
End Device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009174  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000088  20000000  00009174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00020088  2**0
                  CONTENTS
  3 .bss          00000ab8  20000088  000091fc  00020088  2**2
                  ALLOC
  4 .stack        00002000  20000b40  00009cb4  00020088  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
  7 .debug_info   00059fca  00000000  00000000  00020109  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00008164  00000000  00000000  0007a0d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00012309  00000000  00000000  00082237  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b20  00000000  00000000  00094540  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002c90  00000000  00000000  00095060  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000241b3  00000000  00000000  00097cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001ca4d  00000000  00000000  000bbea3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009bb94  00000000  00000000  000d88f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002738  00000000  00000000  00174484  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	40 2b 00 20 65 4f 00 00 61 4f 00 00 61 4f 00 00     @+. eO..aO..aO..
	...
      2c:	61 4f 00 00 00 00 00 00 00 00 00 00 61 4f 00 00     aO..........aO..
      3c:	61 4f 00 00 61 4f 00 00 f9 0d 00 00 c9 04 00 00     aO..aO..........
      4c:	d1 32 00 00 61 4f 00 00 61 4f 00 00 61 4f 00 00     .2..aO..aO..aO..
      5c:	61 4f 00 00 f5 38 00 00 05 39 00 00 15 39 00 00     aO...8...9...9..
      6c:	25 39 00 00 35 39 00 00 45 39 00 00 61 4f 00 00     %9..59..E9..aO..
      7c:	61 4f 00 00 61 4f 00 00 2d 4a 00 00 8d 4a 00 00     aO..aO..-J...J..
	...
      94:	ed 4a 00 00 61 4f 00 00 61 4f 00 00 00 00 00 00     .J..aO..aO......
      a4:	61 4f 00 00 00 00 00 00 00 00 00 00 00 00 00 00     aO..............

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000088 	.word	0x20000088
      d4:	00000000 	.word	0x00000000
      d8:	00009174 	.word	0x00009174

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000008c 	.word	0x2000008c
     108:	00009174 	.word	0x00009174
     10c:	00009174 	.word	0x00009174
     110:	00000000 	.word	0x00000000

00000114 <at30tse_init>:
     114:	2364      	movs	r3, #100	; 0x64
     116:	2180      	movs	r1, #128	; 0x80
     118:	b510      	push	{r4, lr}
     11a:	b08e      	sub	sp, #56	; 0x38
     11c:	9301      	str	r3, [sp, #4]
     11e:	4b1b      	ldr	r3, [pc, #108]	; (18c <at30tse_init+0x78>)
     120:	aa01      	add	r2, sp, #4
     122:	0389      	lsls	r1, r1, #14
     124:	6053      	str	r3, [r2, #4]
     126:	6111      	str	r1, [r2, #16]
     128:	2300      	movs	r3, #0
     12a:	2124      	movs	r1, #36	; 0x24
     12c:	5453      	strb	r3, [r2, r1]
     12e:	3108      	adds	r1, #8
     130:	5453      	strb	r3, [r2, r1]
     132:	3101      	adds	r1, #1
     134:	5453      	strb	r3, [r2, r1]
     136:	3101      	adds	r1, #1
     138:	5453      	strb	r3, [r2, r1]
     13a:	6093      	str	r3, [r2, #8]
     13c:	7313      	strb	r3, [r2, #12]
     13e:	7613      	strb	r3, [r2, #24]
     140:	6293      	str	r3, [r2, #40]	; 0x28
     142:	33d7      	adds	r3, #215	; 0xd7
     144:	8613      	strh	r3, [r2, #48]	; 0x30
     146:	4b12      	ldr	r3, [pc, #72]	; (190 <at30tse_init+0x7c>)
     148:	4c12      	ldr	r4, [pc, #72]	; (194 <at30tse_init+0x80>)
     14a:	9306      	str	r3, [sp, #24]
     14c:	4b12      	ldr	r3, [pc, #72]	; (198 <at30tse_init+0x84>)
     14e:	4913      	ldr	r1, [pc, #76]	; (19c <at30tse_init+0x88>)
     150:	61d3      	str	r3, [r2, #28]
     152:	4b13      	ldr	r3, [pc, #76]	; (1a0 <at30tse_init+0x8c>)
     154:	0020      	movs	r0, r4
     156:	6213      	str	r3, [r2, #32]
     158:	4b12      	ldr	r3, [pc, #72]	; (1a4 <at30tse_init+0x90>)
     15a:	4798      	blx	r3
     15c:	2107      	movs	r1, #7
     15e:	6822      	ldr	r2, [r4, #0]
     160:	69d3      	ldr	r3, [r2, #28]
     162:	4219      	tst	r1, r3
     164:	d1fc      	bne.n	160 <at30tse_init+0x4c>
     166:	2102      	movs	r1, #2
     168:	6813      	ldr	r3, [r2, #0]
     16a:	2010      	movs	r0, #16
     16c:	430b      	orrs	r3, r1
     16e:	6013      	str	r3, [r2, #0]
     170:	88e4      	ldrh	r4, [r4, #6]
     172:	2300      	movs	r3, #0
     174:	e002      	b.n	17c <at30tse_init+0x68>
     176:	3301      	adds	r3, #1
     178:	42a3      	cmp	r3, r4
     17a:	d204      	bcs.n	186 <at30tse_init+0x72>
     17c:	8b51      	ldrh	r1, [r2, #26]
     17e:	4208      	tst	r0, r1
     180:	d0f9      	beq.n	176 <at30tse_init+0x62>
     182:	b00e      	add	sp, #56	; 0x38
     184:	bd10      	pop	{r4, pc}
     186:	8350      	strh	r0, [r2, #26]
     188:	e7fb      	b.n	182 <at30tse_init+0x6e>
     18a:	46c0      	nop			; (mov r8, r8)
     18c:	00000d48 	.word	0x00000d48
     190:	2710ffff 	.word	0x2710ffff
     194:	20000280 	.word	0x20000280
     198:	00100003 	.word	0x00100003
     19c:	42000c00 	.word	0x42000c00
     1a0:	00110003 	.word	0x00110003
     1a4:	000009e5 	.word	0x000009e5

000001a8 <at30tse_read_temperature>:
     1a8:	2300      	movs	r3, #0
     1aa:	b570      	push	{r4, r5, r6, lr}
     1ac:	4a2e      	ldr	r2, [pc, #184]	; (268 <at30tse_read_temperature+0xc0>)
     1ae:	b088      	sub	sp, #32
     1b0:	4e2e      	ldr	r6, [pc, #184]	; (26c <at30tse_read_temperature+0xc4>)
     1b2:	9202      	str	r2, [sp, #8]
     1b4:	4a2e      	ldr	r2, [pc, #184]	; (270 <at30tse_read_temperature+0xc8>)
     1b6:	ac01      	add	r4, sp, #4
     1b8:	a902      	add	r1, sp, #8
     1ba:	ad05      	add	r5, sp, #20
     1bc:	720b      	strb	r3, [r1, #8]
     1be:	724b      	strb	r3, [r1, #9]
     1c0:	728b      	strb	r3, [r1, #10]
     1c2:	9205      	str	r2, [sp, #20]
     1c4:	7023      	strb	r3, [r4, #0]
     1c6:	7063      	strb	r3, [r4, #1]
     1c8:	722b      	strb	r3, [r5, #8]
     1ca:	726b      	strb	r3, [r5, #9]
     1cc:	72ab      	strb	r3, [r5, #10]
     1ce:	0030      	movs	r0, r6
     1d0:	4b28      	ldr	r3, [pc, #160]	; (274 <at30tse_read_temperature+0xcc>)
     1d2:	604c      	str	r4, [r1, #4]
     1d4:	9406      	str	r4, [sp, #24]
     1d6:	4798      	blx	r3
     1d8:	4b27      	ldr	r3, [pc, #156]	; (278 <at30tse_read_temperature+0xd0>)
     1da:	0029      	movs	r1, r5
     1dc:	0030      	movs	r0, r6
     1de:	4798      	blx	r3
     1e0:	7822      	ldrb	r2, [r4, #0]
     1e2:	7863      	ldrb	r3, [r4, #1]
     1e4:	0212      	lsls	r2, r2, #8
     1e6:	4313      	orrs	r3, r2
     1e8:	b21b      	sxth	r3, r3
     1ea:	b29a      	uxth	r2, r3
     1ec:	2001      	movs	r0, #1
     1ee:	2b00      	cmp	r3, #0
     1f0:	db1d      	blt.n	22e <at30tse_read_temperature+0x86>
     1f2:	4b22      	ldr	r3, [pc, #136]	; (27c <at30tse_read_temperature+0xd4>)
     1f4:	781c      	ldrb	r4, [r3, #0]
     1f6:	2c01      	cmp	r4, #1
     1f8:	d020      	beq.n	23c <at30tse_read_temperature+0x94>
     1fa:	2c00      	cmp	r4, #0
     1fc:	d027      	beq.n	24e <at30tse_read_temperature+0xa6>
     1fe:	2c02      	cmp	r4, #2
     200:	d00b      	beq.n	21a <at30tse_read_temperature+0x72>
     202:	2c03      	cmp	r4, #3
     204:	d12c      	bne.n	260 <at30tse_read_temperature+0xb8>
     206:	0912      	lsrs	r2, r2, #4
     208:	4350      	muls	r0, r2
     20a:	4b1d      	ldr	r3, [pc, #116]	; (280 <at30tse_read_temperature+0xd8>)
     20c:	4798      	blx	r3
     20e:	2200      	movs	r2, #0
     210:	4b1c      	ldr	r3, [pc, #112]	; (284 <at30tse_read_temperature+0xdc>)
     212:	4c1d      	ldr	r4, [pc, #116]	; (288 <at30tse_read_temperature+0xe0>)
     214:	47a0      	blx	r4
     216:	b008      	add	sp, #32
     218:	bd70      	pop	{r4, r5, r6, pc}
     21a:	0952      	lsrs	r2, r2, #5
     21c:	4b18      	ldr	r3, [pc, #96]	; (280 <at30tse_read_temperature+0xd8>)
     21e:	4350      	muls	r0, r2
     220:	4798      	blx	r3
     222:	23ff      	movs	r3, #255	; 0xff
     224:	2200      	movs	r2, #0
     226:	059b      	lsls	r3, r3, #22
     228:	4c17      	ldr	r4, [pc, #92]	; (288 <at30tse_read_temperature+0xe0>)
     22a:	47a0      	blx	r4
     22c:	e7f3      	b.n	216 <at30tse_read_temperature+0x6e>
     22e:	4b13      	ldr	r3, [pc, #76]	; (27c <at30tse_read_temperature+0xd4>)
     230:	0452      	lsls	r2, r2, #17
     232:	781c      	ldrb	r4, [r3, #0]
     234:	0c52      	lsrs	r2, r2, #17
     236:	3802      	subs	r0, #2
     238:	2c01      	cmp	r4, #1
     23a:	d1de      	bne.n	1fa <at30tse_read_temperature+0x52>
     23c:	0992      	lsrs	r2, r2, #6
     23e:	4b10      	ldr	r3, [pc, #64]	; (280 <at30tse_read_temperature+0xd8>)
     240:	4350      	muls	r0, r2
     242:	4798      	blx	r3
     244:	2200      	movs	r2, #0
     246:	4b11      	ldr	r3, [pc, #68]	; (28c <at30tse_read_temperature+0xe4>)
     248:	4c0f      	ldr	r4, [pc, #60]	; (288 <at30tse_read_temperature+0xe0>)
     24a:	47a0      	blx	r4
     24c:	e7e3      	b.n	216 <at30tse_read_temperature+0x6e>
     24e:	09d2      	lsrs	r2, r2, #7
     250:	4b0b      	ldr	r3, [pc, #44]	; (280 <at30tse_read_temperature+0xd8>)
     252:	4350      	muls	r0, r2
     254:	4798      	blx	r3
     256:	2200      	movs	r2, #0
     258:	4b0d      	ldr	r3, [pc, #52]	; (290 <at30tse_read_temperature+0xe8>)
     25a:	4c0b      	ldr	r4, [pc, #44]	; (288 <at30tse_read_temperature+0xe0>)
     25c:	47a0      	blx	r4
     25e:	e7da      	b.n	216 <at30tse_read_temperature+0x6e>
     260:	2000      	movs	r0, #0
     262:	2100      	movs	r1, #0
     264:	e7d7      	b.n	216 <at30tse_read_temperature+0x6e>
     266:	46c0      	nop			; (mov r8, r8)
     268:	0001004f 	.word	0x0001004f
     26c:	20000280 	.word	0x20000280
     270:	0002004f 	.word	0x0002004f
     274:	00000ce9 	.word	0x00000ce9
     278:	00000cd5 	.word	0x00000cd5
     27c:	200000a4 	.word	0x200000a4
     280:	0000799d 	.word	0x0000799d
     284:	3fb00000 	.word	0x3fb00000
     288:	00006e09 	.word	0x00006e09
     28c:	3fd00000 	.word	0x3fd00000
     290:	3fe00000 	.word	0x3fe00000

00000294 <rtc_count_enable>:
     294:	2104      	movs	r1, #4
     296:	4b08      	ldr	r3, [pc, #32]	; (2b8 <rtc_count_enable+0x24>)
     298:	6802      	ldr	r2, [r0, #0]
     29a:	6019      	str	r1, [r3, #0]
     29c:	6801      	ldr	r1, [r0, #0]
     29e:	690b      	ldr	r3, [r1, #16]
     2a0:	2b00      	cmp	r3, #0
     2a2:	d1fc      	bne.n	29e <rtc_count_enable+0xa>
     2a4:	2102      	movs	r1, #2
     2a6:	8813      	ldrh	r3, [r2, #0]
     2a8:	430b      	orrs	r3, r1
     2aa:	8013      	strh	r3, [r2, #0]
     2ac:	6802      	ldr	r2, [r0, #0]
     2ae:	6913      	ldr	r3, [r2, #16]
     2b0:	2b00      	cmp	r3, #0
     2b2:	d1fc      	bne.n	2ae <rtc_count_enable+0x1a>
     2b4:	4770      	bx	lr
     2b6:	46c0      	nop			; (mov r8, r8)
     2b8:	e000e100 	.word	0xe000e100

000002bc <rtc_count_disable>:
     2bc:	b510      	push	{r4, lr}
     2be:	2280      	movs	r2, #128	; 0x80
     2c0:	2404      	movs	r4, #4
     2c2:	4909      	ldr	r1, [pc, #36]	; (2e8 <rtc_count_disable+0x2c>)
     2c4:	6803      	ldr	r3, [r0, #0]
     2c6:	508c      	str	r4, [r1, r2]
     2c8:	6801      	ldr	r1, [r0, #0]
     2ca:	690a      	ldr	r2, [r1, #16]
     2cc:	2a00      	cmp	r2, #0
     2ce:	d1fc      	bne.n	2ca <rtc_count_disable+0xe>
     2d0:	2102      	movs	r1, #2
     2d2:	4a06      	ldr	r2, [pc, #24]	; (2ec <rtc_count_disable+0x30>)
     2d4:	811a      	strh	r2, [r3, #8]
     2d6:	819a      	strh	r2, [r3, #12]
     2d8:	881a      	ldrh	r2, [r3, #0]
     2da:	438a      	bics	r2, r1
     2dc:	801a      	strh	r2, [r3, #0]
     2de:	6802      	ldr	r2, [r0, #0]
     2e0:	6913      	ldr	r3, [r2, #16]
     2e2:	2b00      	cmp	r3, #0
     2e4:	d1fc      	bne.n	2e0 <rtc_count_disable+0x24>
     2e6:	bd10      	pop	{r4, pc}
     2e8:	e000e100 	.word	0xe000e100
     2ec:	ffff81ff 	.word	0xffff81ff

000002f0 <rtc_count_init>:
     2f0:	b570      	push	{r4, r5, r6, lr}
     2f2:	6001      	str	r1, [r0, #0]
     2f4:	2180      	movs	r1, #128	; 0x80
     2f6:	0003      	movs	r3, r0
     2f8:	4843      	ldr	r0, [pc, #268]	; (408 <rtc_count_init+0x118>)
     2fa:	0049      	lsls	r1, r1, #1
     2fc:	6944      	ldr	r4, [r0, #20]
     2fe:	2504      	movs	r5, #4
     300:	4321      	orrs	r1, r4
     302:	6141      	str	r1, [r0, #20]
     304:	2000      	movs	r0, #0
     306:	4941      	ldr	r1, [pc, #260]	; (40c <rtc_count_init+0x11c>)
     308:	4c41      	ldr	r4, [pc, #260]	; (410 <rtc_count_init+0x120>)
     30a:	6108      	str	r0, [r1, #16]
     30c:	2180      	movs	r1, #128	; 0x80
     30e:	6818      	ldr	r0, [r3, #0]
     310:	5065      	str	r5, [r4, r1]
     312:	681c      	ldr	r4, [r3, #0]
     314:	6921      	ldr	r1, [r4, #16]
     316:	2900      	cmp	r1, #0
     318:	d1fc      	bne.n	314 <rtc_count_init+0x24>
     31a:	2402      	movs	r4, #2
     31c:	493d      	ldr	r1, [pc, #244]	; (414 <rtc_count_init+0x124>)
     31e:	8101      	strh	r1, [r0, #8]
     320:	8181      	strh	r1, [r0, #12]
     322:	8801      	ldrh	r1, [r0, #0]
     324:	43a1      	bics	r1, r4
     326:	8001      	strh	r1, [r0, #0]
     328:	681c      	ldr	r4, [r3, #0]
     32a:	6921      	ldr	r1, [r4, #16]
     32c:	2900      	cmp	r1, #0
     32e:	d1fc      	bne.n	32a <rtc_count_init+0x3a>
     330:	8699      	strh	r1, [r3, #52]	; 0x34
     332:	86d9      	strh	r1, [r3, #54]	; 0x36
     334:	6921      	ldr	r1, [r4, #16]
     336:	2900      	cmp	r1, #0
     338:	d1fc      	bne.n	334 <rtc_count_init+0x44>
     33a:	2401      	movs	r4, #1
     33c:	8801      	ldrh	r1, [r0, #0]
     33e:	4321      	orrs	r1, r4
     340:	8001      	strh	r1, [r0, #0]
     342:	6818      	ldr	r0, [r3, #0]
     344:	6901      	ldr	r1, [r0, #16]
     346:	2900      	cmp	r1, #0
     348:	d1fc      	bne.n	344 <rtc_count_init+0x54>
     34a:	7891      	ldrb	r1, [r2, #2]
     34c:	7119      	strb	r1, [r3, #4]
     34e:	4932      	ldr	r1, [pc, #200]	; (418 <rtc_count_init+0x128>)
     350:	600b      	str	r3, [r1, #0]
     352:	7911      	ldrb	r1, [r2, #4]
     354:	8814      	ldrh	r4, [r2, #0]
     356:	03c9      	lsls	r1, r1, #15
     358:	6818      	ldr	r0, [r3, #0]
     35a:	4321      	orrs	r1, r4
     35c:	b289      	uxth	r1, r1
     35e:	8001      	strh	r1, [r0, #0]
     360:	7891      	ldrb	r1, [r2, #2]
     362:	2900      	cmp	r1, #0
     364:	d020      	beq.n	3a8 <rtc_count_init+0xb8>
     366:	2901      	cmp	r1, #1
     368:	d001      	beq.n	36e <rtc_count_init+0x7e>
     36a:	2017      	movs	r0, #23
     36c:	bd70      	pop	{r4, r5, r6, pc}
     36e:	8801      	ldrh	r1, [r0, #0]
     370:	b289      	uxth	r1, r1
     372:	8001      	strh	r1, [r0, #0]
     374:	78d1      	ldrb	r1, [r2, #3]
     376:	2900      	cmp	r1, #0
     378:	d139      	bne.n	3ee <rtc_count_init+0xfe>
     37a:	6890      	ldr	r0, [r2, #8]
     37c:	6819      	ldr	r1, [r3, #0]
     37e:	690a      	ldr	r2, [r1, #16]
     380:	2a00      	cmp	r2, #0
     382:	d1fc      	bne.n	37e <rtc_count_init+0x8e>
     384:	791a      	ldrb	r2, [r3, #4]
     386:	2a00      	cmp	r2, #0
     388:	d008      	beq.n	39c <rtc_count_init+0xac>
     38a:	2a01      	cmp	r2, #1
     38c:	d104      	bne.n	398 <rtc_count_init+0xa8>
     38e:	6208      	str	r0, [r1, #32]
     390:	681a      	ldr	r2, [r3, #0]
     392:	6913      	ldr	r3, [r2, #16]
     394:	2b00      	cmp	r3, #0
     396:	d1fc      	bne.n	392 <rtc_count_init+0xa2>
     398:	2000      	movs	r0, #0
     39a:	e7e7      	b.n	36c <rtc_count_init+0x7c>
     39c:	4a1f      	ldr	r2, [pc, #124]	; (41c <rtc_count_init+0x12c>)
     39e:	4290      	cmp	r0, r2
     3a0:	d8fa      	bhi.n	398 <rtc_count_init+0xa8>
     3a2:	b280      	uxth	r0, r0
     3a4:	8408      	strh	r0, [r1, #32]
     3a6:	e7f3      	b.n	390 <rtc_count_init+0xa0>
     3a8:	2404      	movs	r4, #4
     3aa:	8801      	ldrh	r1, [r0, #0]
     3ac:	4321      	orrs	r1, r4
     3ae:	8001      	strh	r1, [r0, #0]
     3b0:	78d1      	ldrb	r1, [r2, #3]
     3b2:	2017      	movs	r0, #23
     3b4:	2900      	cmp	r1, #0
     3b6:	d1d9      	bne.n	36c <rtc_count_init+0x7c>
     3b8:	2000      	movs	r0, #0
     3ba:	681c      	ldr	r4, [r3, #0]
     3bc:	4e17      	ldr	r6, [pc, #92]	; (41c <rtc_count_init+0x12c>)
     3be:	3208      	adds	r2, #8
     3c0:	6815      	ldr	r5, [r2, #0]
     3c2:	6921      	ldr	r1, [r4, #16]
     3c4:	2900      	cmp	r1, #0
     3c6:	d1fc      	bne.n	3c2 <rtc_count_init+0xd2>
     3c8:	7919      	ldrb	r1, [r3, #4]
     3ca:	2900      	cmp	r1, #0
     3cc:	d014      	beq.n	3f8 <rtc_count_init+0x108>
     3ce:	2901      	cmp	r1, #1
     3d0:	d107      	bne.n	3e2 <rtc_count_init+0xf2>
     3d2:	0001      	movs	r1, r0
     3d4:	3108      	adds	r1, #8
     3d6:	0089      	lsls	r1, r1, #2
     3d8:	510d      	str	r5, [r1, r4]
     3da:	681c      	ldr	r4, [r3, #0]
     3dc:	6921      	ldr	r1, [r4, #16]
     3de:	2900      	cmp	r1, #0
     3e0:	d1fc      	bne.n	3dc <rtc_count_init+0xec>
     3e2:	3001      	adds	r0, #1
     3e4:	3204      	adds	r2, #4
     3e6:	2802      	cmp	r0, #2
     3e8:	d1ea      	bne.n	3c0 <rtc_count_init+0xd0>
     3ea:	2000      	movs	r0, #0
     3ec:	e7be      	b.n	36c <rtc_count_init+0x7c>
     3ee:	2480      	movs	r4, #128	; 0x80
     3f0:	8801      	ldrh	r1, [r0, #0]
     3f2:	4321      	orrs	r1, r4
     3f4:	8001      	strh	r1, [r0, #0]
     3f6:	e7c0      	b.n	37a <rtc_count_init+0x8a>
     3f8:	42b5      	cmp	r5, r6
     3fa:	d8f2      	bhi.n	3e2 <rtc_count_init+0xf2>
     3fc:	0001      	movs	r1, r0
     3fe:	3110      	adds	r1, #16
     400:	b2ad      	uxth	r5, r5
     402:	0049      	lsls	r1, r1, #1
     404:	530d      	strh	r5, [r1, r4]
     406:	e7e8      	b.n	3da <rtc_count_init+0xea>
     408:	40000400 	.word	0x40000400
     40c:	40001000 	.word	0x40001000
     410:	e000e100 	.word	0xe000e100
     414:	ffff81ff 	.word	0xffff81ff
     418:	2000028c 	.word	0x2000028c
     41c:	0000ffff 	.word	0x0000ffff

00000420 <rtc_count_set_period>:
     420:	7902      	ldrb	r2, [r0, #4]
     422:	0003      	movs	r3, r0
     424:	2015      	movs	r0, #21
     426:	2a00      	cmp	r2, #0
     428:	d000      	beq.n	42c <rtc_count_set_period+0xc>
     42a:	4770      	bx	lr
     42c:	681a      	ldr	r2, [r3, #0]
     42e:	6910      	ldr	r0, [r2, #16]
     430:	2800      	cmp	r0, #0
     432:	d1fc      	bne.n	42e <rtc_count_set_period+0xe>
     434:	8391      	strh	r1, [r2, #28]
     436:	681a      	ldr	r2, [r3, #0]
     438:	6913      	ldr	r3, [r2, #16]
     43a:	2b00      	cmp	r3, #0
     43c:	d1fc      	bne.n	438 <rtc_count_set_period+0x18>
     43e:	2000      	movs	r0, #0
     440:	e7f3      	b.n	42a <rtc_count_set_period+0xa>
     442:	46c0      	nop			; (mov r8, r8)

00000444 <rtc_count_register_callback>:
     444:	2a0a      	cmp	r2, #10
     446:	d001      	beq.n	44c <rtc_count_register_callback+0x8>
     448:	2a07      	cmp	r2, #7
     44a:	d80b      	bhi.n	464 <rtc_count_register_callback+0x20>
     44c:	1c93      	adds	r3, r2, #2
     44e:	009b      	lsls	r3, r3, #2
     450:	5019      	str	r1, [r3, r0]
     452:	2301      	movs	r3, #1
     454:	4093      	lsls	r3, r2
     456:	8e81      	ldrh	r1, [r0, #52]	; 0x34
     458:	430b      	orrs	r3, r1
     45a:	b29b      	uxth	r3, r3
     45c:	8683      	strh	r3, [r0, #52]	; 0x34
     45e:	2300      	movs	r3, #0
     460:	0018      	movs	r0, r3
     462:	4770      	bx	lr
     464:	7903      	ldrb	r3, [r0, #4]
     466:	2b00      	cmp	r3, #0
     468:	d005      	beq.n	476 <rtc_count_register_callback+0x32>
     46a:	2b01      	cmp	r3, #1
     46c:	d105      	bne.n	47a <rtc_count_register_callback+0x36>
     46e:	3316      	adds	r3, #22
     470:	2a09      	cmp	r2, #9
     472:	d8f5      	bhi.n	460 <rtc_count_register_callback+0x1c>
     474:	e7ea      	b.n	44c <rtc_count_register_callback+0x8>
     476:	2a0a      	cmp	r2, #10
     478:	d9e8      	bls.n	44c <rtc_count_register_callback+0x8>
     47a:	2317      	movs	r3, #23
     47c:	e7f0      	b.n	460 <rtc_count_register_callback+0x1c>
     47e:	46c0      	nop			; (mov r8, r8)

00000480 <rtc_count_enable_callback>:
     480:	b530      	push	{r4, r5, lr}
     482:	6804      	ldr	r4, [r0, #0]
     484:	290a      	cmp	r1, #10
     486:	d017      	beq.n	4b8 <rtc_count_enable_callback+0x38>
     488:	2907      	cmp	r1, #7
     48a:	d910      	bls.n	4ae <rtc_count_enable_callback+0x2e>
     48c:	2301      	movs	r3, #1
     48e:	000a      	movs	r2, r1
     490:	001d      	movs	r5, r3
     492:	3a08      	subs	r2, #8
     494:	4095      	lsls	r5, r2
     496:	022a      	lsls	r2, r5, #8
     498:	25c0      	movs	r5, #192	; 0xc0
     49a:	408b      	lsls	r3, r1
     49c:	00ad      	lsls	r5, r5, #2
     49e:	402a      	ands	r2, r5
     4a0:	8162      	strh	r2, [r4, #10]
     4a2:	001a      	movs	r2, r3
     4a4:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
     4a6:	4313      	orrs	r3, r2
     4a8:	b29b      	uxth	r3, r3
     4aa:	86c3      	strh	r3, [r0, #54]	; 0x36
     4ac:	bd30      	pop	{r4, r5, pc}
     4ae:	2201      	movs	r2, #1
     4b0:	408a      	lsls	r2, r1
     4b2:	b293      	uxth	r3, r2
     4b4:	8163      	strh	r3, [r4, #10]
     4b6:	e7f5      	b.n	4a4 <rtc_count_enable_callback+0x24>
     4b8:	2280      	movs	r2, #128	; 0x80
     4ba:	4b02      	ldr	r3, [pc, #8]	; (4c4 <rtc_count_enable_callback+0x44>)
     4bc:	00d2      	lsls	r2, r2, #3
     4be:	8163      	strh	r3, [r4, #10]
     4c0:	e7f0      	b.n	4a4 <rtc_count_enable_callback+0x24>
     4c2:	46c0      	nop			; (mov r8, r8)
     4c4:	ffff8000 	.word	0xffff8000

000004c8 <RTC_Handler>:
     4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     4ca:	4b3a      	ldr	r3, [pc, #232]	; (5b4 <RTC_Handler+0xec>)
     4cc:	681f      	ldr	r7, [r3, #0]
     4ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
     4d0:	683d      	ldr	r5, [r7, #0]
     4d2:	8ebe      	ldrh	r6, [r7, #52]	; 0x34
     4d4:	401e      	ands	r6, r3
     4d6:	89ab      	ldrh	r3, [r5, #12]
     4d8:	896c      	ldrh	r4, [r5, #10]
     4da:	401c      	ands	r4, r3
     4dc:	b223      	sxth	r3, r4
     4de:	2b00      	cmp	r3, #0
     4e0:	db51      	blt.n	586 <RTC_Handler+0xbe>
     4e2:	23ff      	movs	r3, #255	; 0xff
     4e4:	4223      	tst	r3, r4
     4e6:	d042      	beq.n	56e <RTC_Handler+0xa6>
     4e8:	3bfe      	subs	r3, #254	; 0xfe
     4ea:	4223      	tst	r3, r4
     4ec:	d003      	beq.n	4f6 <RTC_Handler+0x2e>
     4ee:	4233      	tst	r3, r6
     4f0:	d001      	beq.n	4f6 <RTC_Handler+0x2e>
     4f2:	68bb      	ldr	r3, [r7, #8]
     4f4:	4798      	blx	r3
     4f6:	2301      	movs	r3, #1
     4f8:	81ab      	strh	r3, [r5, #12]
     4fa:	07a2      	lsls	r2, r4, #30
     4fc:	d504      	bpl.n	508 <RTC_Handler+0x40>
     4fe:	1072      	asrs	r2, r6, #1
     500:	4213      	tst	r3, r2
     502:	d001      	beq.n	508 <RTC_Handler+0x40>
     504:	68fb      	ldr	r3, [r7, #12]
     506:	4798      	blx	r3
     508:	2302      	movs	r3, #2
     50a:	81ab      	strh	r3, [r5, #12]
     50c:	0763      	lsls	r3, r4, #29
     50e:	d503      	bpl.n	518 <RTC_Handler+0x50>
     510:	0773      	lsls	r3, r6, #29
     512:	d501      	bpl.n	518 <RTC_Handler+0x50>
     514:	693b      	ldr	r3, [r7, #16]
     516:	4798      	blx	r3
     518:	2304      	movs	r3, #4
     51a:	81ab      	strh	r3, [r5, #12]
     51c:	0723      	lsls	r3, r4, #28
     51e:	d503      	bpl.n	528 <RTC_Handler+0x60>
     520:	0733      	lsls	r3, r6, #28
     522:	d501      	bpl.n	528 <RTC_Handler+0x60>
     524:	697b      	ldr	r3, [r7, #20]
     526:	4798      	blx	r3
     528:	2308      	movs	r3, #8
     52a:	81ab      	strh	r3, [r5, #12]
     52c:	06e3      	lsls	r3, r4, #27
     52e:	d503      	bpl.n	538 <RTC_Handler+0x70>
     530:	06f3      	lsls	r3, r6, #27
     532:	d501      	bpl.n	538 <RTC_Handler+0x70>
     534:	69bb      	ldr	r3, [r7, #24]
     536:	4798      	blx	r3
     538:	2310      	movs	r3, #16
     53a:	81ab      	strh	r3, [r5, #12]
     53c:	06a3      	lsls	r3, r4, #26
     53e:	d503      	bpl.n	548 <RTC_Handler+0x80>
     540:	06b3      	lsls	r3, r6, #26
     542:	d501      	bpl.n	548 <RTC_Handler+0x80>
     544:	69fb      	ldr	r3, [r7, #28]
     546:	4798      	blx	r3
     548:	2320      	movs	r3, #32
     54a:	81ab      	strh	r3, [r5, #12]
     54c:	0663      	lsls	r3, r4, #25
     54e:	d503      	bpl.n	558 <RTC_Handler+0x90>
     550:	0673      	lsls	r3, r6, #25
     552:	d501      	bpl.n	558 <RTC_Handler+0x90>
     554:	6a3b      	ldr	r3, [r7, #32]
     556:	4798      	blx	r3
     558:	2340      	movs	r3, #64	; 0x40
     55a:	81ab      	strh	r3, [r5, #12]
     55c:	0623      	lsls	r3, r4, #24
     55e:	d503      	bpl.n	568 <RTC_Handler+0xa0>
     560:	0633      	lsls	r3, r6, #24
     562:	d501      	bpl.n	568 <RTC_Handler+0xa0>
     564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     566:	4798      	blx	r3
     568:	2380      	movs	r3, #128	; 0x80
     56a:	81ab      	strh	r3, [r5, #12]
     56c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     56e:	2380      	movs	r3, #128	; 0x80
     570:	005b      	lsls	r3, r3, #1
     572:	421c      	tst	r4, r3
     574:	d00c      	beq.n	590 <RTC_Handler+0xc8>
     576:	421e      	tst	r6, r3
     578:	d001      	beq.n	57e <RTC_Handler+0xb6>
     57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
     57c:	4798      	blx	r3
     57e:	2380      	movs	r3, #128	; 0x80
     580:	005b      	lsls	r3, r3, #1
     582:	81ab      	strh	r3, [r5, #12]
     584:	e7f2      	b.n	56c <RTC_Handler+0xa4>
     586:	0573      	lsls	r3, r6, #21
     588:	d40c      	bmi.n	5a4 <RTC_Handler+0xdc>
     58a:	4b0b      	ldr	r3, [pc, #44]	; (5b8 <RTC_Handler+0xf0>)
     58c:	81ab      	strh	r3, [r5, #12]
     58e:	e7ed      	b.n	56c <RTC_Handler+0xa4>
     590:	2380      	movs	r3, #128	; 0x80
     592:	009b      	lsls	r3, r3, #2
     594:	421c      	tst	r4, r3
     596:	d0e9      	beq.n	56c <RTC_Handler+0xa4>
     598:	421e      	tst	r6, r3
     59a:	d108      	bne.n	5ae <RTC_Handler+0xe6>
     59c:	2380      	movs	r3, #128	; 0x80
     59e:	009b      	lsls	r3, r3, #2
     5a0:	81ab      	strh	r3, [r5, #12]
     5a2:	e7e3      	b.n	56c <RTC_Handler+0xa4>
     5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     5a6:	4798      	blx	r3
     5a8:	4b03      	ldr	r3, [pc, #12]	; (5b8 <RTC_Handler+0xf0>)
     5aa:	81ab      	strh	r3, [r5, #12]
     5ac:	e7de      	b.n	56c <RTC_Handler+0xa4>
     5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     5b0:	4798      	blx	r3
     5b2:	e7f3      	b.n	59c <RTC_Handler+0xd4>
     5b4:	2000028c 	.word	0x2000028c
     5b8:	ffff8000 	.word	0xffff8000

000005bc <_i2c_master_write_packet>:
     5bc:	b5f0      	push	{r4, r5, r6, r7, lr}
     5be:	4645      	mov	r5, r8
     5c0:	4688      	mov	r8, r1
     5c2:	464e      	mov	r6, r9
     5c4:	46de      	mov	lr, fp
     5c6:	4657      	mov	r7, sl
     5c8:	4643      	mov	r3, r8
     5ca:	b5e0      	push	{r5, r6, r7, lr}
     5cc:	885b      	ldrh	r3, [r3, #2]
     5ce:	2207      	movs	r2, #7
     5d0:	4699      	mov	r9, r3
     5d2:	6801      	ldr	r1, [r0, #0]
     5d4:	69cb      	ldr	r3, [r1, #28]
     5d6:	421a      	tst	r2, r3
     5d8:	d1fc      	bne.n	5d4 <_i2c_master_write_packet+0x18>
     5da:	4643      	mov	r3, r8
     5dc:	7a5b      	ldrb	r3, [r3, #9]
     5de:	2b00      	cmp	r3, #0
     5e0:	d000      	beq.n	5e4 <_i2c_master_write_packet+0x28>
     5e2:	e08d      	b.n	700 <_i2c_master_write_packet+0x144>
     5e4:	684b      	ldr	r3, [r1, #4]
     5e6:	4a55      	ldr	r2, [pc, #340]	; (73c <_i2c_master_write_packet+0x180>)
     5e8:	4013      	ands	r3, r2
     5ea:	604b      	str	r3, [r1, #4]
     5ec:	4643      	mov	r3, r8
     5ee:	7a1b      	ldrb	r3, [r3, #8]
     5f0:	2b00      	cmp	r3, #0
     5f2:	d058      	beq.n	6a6 <_i2c_master_write_packet+0xea>
     5f4:	4643      	mov	r3, r8
     5f6:	4642      	mov	r2, r8
     5f8:	881b      	ldrh	r3, [r3, #0]
     5fa:	7a52      	ldrb	r2, [r2, #9]
     5fc:	005b      	lsls	r3, r3, #1
     5fe:	0392      	lsls	r2, r2, #14
     600:	4313      	orrs	r3, r2
     602:	2280      	movs	r2, #128	; 0x80
     604:	0212      	lsls	r2, r2, #8
     606:	4313      	orrs	r3, r2
     608:	624b      	str	r3, [r1, #36]	; 0x24
     60a:	6802      	ldr	r2, [r0, #0]
     60c:	2300      	movs	r3, #0
     60e:	2501      	movs	r5, #1
     610:	2602      	movs	r6, #2
     612:	e008      	b.n	626 <_i2c_master_write_packet+0x6a>
     614:	7e14      	ldrb	r4, [r2, #24]
     616:	4226      	tst	r6, r4
     618:	d108      	bne.n	62c <_i2c_master_write_packet+0x70>
     61a:	3301      	adds	r3, #1
     61c:	8904      	ldrh	r4, [r0, #8]
     61e:	b29b      	uxth	r3, r3
     620:	429c      	cmp	r4, r3
     622:	d800      	bhi.n	626 <_i2c_master_write_packet+0x6a>
     624:	e06a      	b.n	6fc <_i2c_master_write_packet+0x140>
     626:	7e14      	ldrb	r4, [r2, #24]
     628:	4225      	tst	r5, r4
     62a:	d0f3      	beq.n	614 <_i2c_master_write_packet+0x58>
     62c:	2302      	movs	r3, #2
     62e:	7e14      	ldrb	r4, [r2, #24]
     630:	4223      	tst	r3, r4
     632:	d041      	beq.n	6b8 <_i2c_master_write_packet+0xfc>
     634:	7613      	strb	r3, [r2, #24]
     636:	8b52      	ldrh	r2, [r2, #26]
     638:	4213      	tst	r3, r2
     63a:	d147      	bne.n	6cc <_i2c_master_write_packet+0x110>
     63c:	2300      	movs	r3, #0
     63e:	469c      	mov	ip, r3
     640:	3320      	adds	r3, #32
     642:	469a      	mov	sl, r3
     644:	3308      	adds	r3, #8
     646:	469b      	mov	fp, r3
     648:	4663      	mov	r3, ip
     64a:	2707      	movs	r7, #7
     64c:	468c      	mov	ip, r1
     64e:	2501      	movs	r5, #1
     650:	2602      	movs	r6, #2
     652:	0019      	movs	r1, r3
     654:	4549      	cmp	r1, r9
     656:	d100      	bne.n	65a <_i2c_master_write_packet+0x9e>
     658:	e06d      	b.n	736 <_i2c_master_write_packet+0x17a>
     65a:	4663      	mov	r3, ip
     65c:	4652      	mov	r2, sl
     65e:	8b5b      	ldrh	r3, [r3, #26]
     660:	421a      	tst	r2, r3
     662:	d033      	beq.n	6cc <_i2c_master_write_packet+0x110>
     664:	6802      	ldr	r2, [r0, #0]
     666:	69d3      	ldr	r3, [r2, #28]
     668:	421f      	tst	r7, r3
     66a:	d1fc      	bne.n	666 <_i2c_master_write_packet+0xaa>
     66c:	4643      	mov	r3, r8
     66e:	4662      	mov	r2, ip
     670:	465c      	mov	r4, fp
     672:	685b      	ldr	r3, [r3, #4]
     674:	5c5b      	ldrb	r3, [r3, r1]
     676:	5513      	strb	r3, [r2, r4]
     678:	6802      	ldr	r2, [r0, #0]
     67a:	2300      	movs	r3, #0
     67c:	e007      	b.n	68e <_i2c_master_write_packet+0xd2>
     67e:	7e14      	ldrb	r4, [r2, #24]
     680:	4226      	tst	r6, r4
     682:	d107      	bne.n	694 <_i2c_master_write_packet+0xd8>
     684:	3301      	adds	r3, #1
     686:	8904      	ldrh	r4, [r0, #8]
     688:	b29b      	uxth	r3, r3
     68a:	429c      	cmp	r4, r3
     68c:	d926      	bls.n	6dc <_i2c_master_write_packet+0x120>
     68e:	7e14      	ldrb	r4, [r2, #24]
     690:	4225      	tst	r5, r4
     692:	d0f4      	beq.n	67e <_i2c_master_write_packet+0xc2>
     694:	4663      	mov	r3, ip
     696:	2204      	movs	r2, #4
     698:	8b5b      	ldrh	r3, [r3, #26]
     69a:	3101      	adds	r1, #1
     69c:	421a      	tst	r2, r3
     69e:	d0d9      	beq.n	654 <_i2c_master_write_packet+0x98>
     6a0:	4661      	mov	r1, ip
     6a2:	221e      	movs	r2, #30
     6a4:	e01c      	b.n	6e0 <_i2c_master_write_packet+0x124>
     6a6:	4643      	mov	r3, r8
     6a8:	4642      	mov	r2, r8
     6aa:	881b      	ldrh	r3, [r3, #0]
     6ac:	7a52      	ldrb	r2, [r2, #9]
     6ae:	005b      	lsls	r3, r3, #1
     6b0:	0392      	lsls	r2, r2, #14
     6b2:	4313      	orrs	r3, r2
     6b4:	624b      	str	r3, [r1, #36]	; 0x24
     6b6:	e7a8      	b.n	60a <_i2c_master_write_packet+0x4e>
     6b8:	8b53      	ldrh	r3, [r2, #26]
     6ba:	075b      	lsls	r3, r3, #29
     6bc:	d5be      	bpl.n	63c <_i2c_master_write_packet+0x80>
     6be:	23c0      	movs	r3, #192	; 0xc0
     6c0:	6851      	ldr	r1, [r2, #4]
     6c2:	029b      	lsls	r3, r3, #10
     6c4:	430b      	orrs	r3, r1
     6c6:	6053      	str	r3, [r2, #4]
     6c8:	2218      	movs	r2, #24
     6ca:	e000      	b.n	6ce <_i2c_master_write_packet+0x112>
     6cc:	2241      	movs	r2, #65	; 0x41
     6ce:	0010      	movs	r0, r2
     6d0:	bc3c      	pop	{r2, r3, r4, r5}
     6d2:	4690      	mov	r8, r2
     6d4:	4699      	mov	r9, r3
     6d6:	46a2      	mov	sl, r4
     6d8:	46ab      	mov	fp, r5
     6da:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6dc:	4661      	mov	r1, ip
     6de:	2212      	movs	r2, #18
     6e0:	7a83      	ldrb	r3, [r0, #10]
     6e2:	2b00      	cmp	r3, #0
     6e4:	d0f3      	beq.n	6ce <_i2c_master_write_packet+0x112>
     6e6:	6804      	ldr	r4, [r0, #0]
     6e8:	2007      	movs	r0, #7
     6ea:	69e3      	ldr	r3, [r4, #28]
     6ec:	4218      	tst	r0, r3
     6ee:	d1fc      	bne.n	6ea <_i2c_master_write_packet+0x12e>
     6f0:	23c0      	movs	r3, #192	; 0xc0
     6f2:	6848      	ldr	r0, [r1, #4]
     6f4:	029b      	lsls	r3, r3, #10
     6f6:	4303      	orrs	r3, r0
     6f8:	604b      	str	r3, [r1, #4]
     6fa:	e7e8      	b.n	6ce <_i2c_master_write_packet+0x112>
     6fc:	2212      	movs	r2, #18
     6fe:	e7e6      	b.n	6ce <_i2c_master_write_packet+0x112>
     700:	4643      	mov	r3, r8
     702:	7a9a      	ldrb	r2, [r3, #10]
     704:	2380      	movs	r3, #128	; 0x80
     706:	684c      	ldr	r4, [r1, #4]
     708:	02db      	lsls	r3, r3, #11
     70a:	4323      	orrs	r3, r4
     70c:	604b      	str	r3, [r1, #4]
     70e:	624a      	str	r2, [r1, #36]	; 0x24
     710:	6802      	ldr	r2, [r0, #0]
     712:	2300      	movs	r3, #0
     714:	2501      	movs	r5, #1
     716:	2602      	movs	r6, #2
     718:	e007      	b.n	72a <_i2c_master_write_packet+0x16e>
     71a:	7e14      	ldrb	r4, [r2, #24]
     71c:	4226      	tst	r6, r4
     71e:	d107      	bne.n	730 <_i2c_master_write_packet+0x174>
     720:	3301      	adds	r3, #1
     722:	8904      	ldrh	r4, [r0, #8]
     724:	b29b      	uxth	r3, r3
     726:	429c      	cmp	r4, r3
     728:	d902      	bls.n	730 <_i2c_master_write_packet+0x174>
     72a:	7e14      	ldrb	r4, [r2, #24]
     72c:	4225      	tst	r5, r4
     72e:	d0f4      	beq.n	71a <_i2c_master_write_packet+0x15e>
     730:	2301      	movs	r3, #1
     732:	760b      	strb	r3, [r1, #24]
     734:	e756      	b.n	5e4 <_i2c_master_write_packet+0x28>
     736:	4661      	mov	r1, ip
     738:	2200      	movs	r2, #0
     73a:	e7d1      	b.n	6e0 <_i2c_master_write_packet+0x124>
     73c:	fffbffff 	.word	0xfffbffff

00000740 <_i2c_master_read_packet>:
     740:	b5f0      	push	{r4, r5, r6, r7, lr}
     742:	464e      	mov	r6, r9
     744:	46de      	mov	lr, fp
     746:	4657      	mov	r7, sl
     748:	4645      	mov	r5, r8
     74a:	b5e0      	push	{r5, r6, r7, lr}
     74c:	6803      	ldr	r3, [r0, #0]
     74e:	4689      	mov	r9, r1
     750:	469c      	mov	ip, r3
     752:	4663      	mov	r3, ip
     754:	681b      	ldr	r3, [r3, #0]
     756:	b083      	sub	sp, #12
     758:	011b      	lsls	r3, r3, #4
     75a:	0fdb      	lsrs	r3, r3, #31
     75c:	8849      	ldrh	r1, [r1, #2]
     75e:	9301      	str	r3, [sp, #4]
     760:	464b      	mov	r3, r9
     762:	7a5b      	ldrb	r3, [r3, #9]
     764:	2b00      	cmp	r3, #0
     766:	d000      	beq.n	76a <_i2c_master_read_packet+0x2a>
     768:	e0fc      	b.n	964 <_i2c_master_read_packet+0x224>
     76a:	4663      	mov	r3, ip
     76c:	4a9b      	ldr	r2, [pc, #620]	; (9dc <_i2c_master_read_packet+0x29c>)
     76e:	685b      	ldr	r3, [r3, #4]
     770:	4013      	ands	r3, r2
     772:	4662      	mov	r2, ip
     774:	6053      	str	r3, [r2, #4]
     776:	464b      	mov	r3, r9
     778:	7a1b      	ldrb	r3, [r3, #8]
     77a:	2b00      	cmp	r3, #0
     77c:	d03c      	beq.n	7f8 <_i2c_master_read_packet+0xb8>
     77e:	464b      	mov	r3, r9
     780:	464a      	mov	r2, r9
     782:	881b      	ldrh	r3, [r3, #0]
     784:	7a52      	ldrb	r2, [r2, #9]
     786:	005b      	lsls	r3, r3, #1
     788:	0392      	lsls	r2, r2, #14
     78a:	4313      	orrs	r3, r2
     78c:	2280      	movs	r2, #128	; 0x80
     78e:	0212      	lsls	r2, r2, #8
     790:	4313      	orrs	r3, r2
     792:	4662      	mov	r2, ip
     794:	6253      	str	r3, [r2, #36]	; 0x24
     796:	6802      	ldr	r2, [r0, #0]
     798:	2300      	movs	r3, #0
     79a:	2501      	movs	r5, #1
     79c:	2602      	movs	r6, #2
     79e:	e008      	b.n	7b2 <_i2c_master_read_packet+0x72>
     7a0:	7e14      	ldrb	r4, [r2, #24]
     7a2:	4226      	tst	r6, r4
     7a4:	d108      	bne.n	7b8 <_i2c_master_read_packet+0x78>
     7a6:	3301      	adds	r3, #1
     7a8:	8904      	ldrh	r4, [r0, #8]
     7aa:	b29b      	uxth	r3, r3
     7ac:	429c      	cmp	r4, r3
     7ae:	d800      	bhi.n	7b2 <_i2c_master_read_packet+0x72>
     7b0:	e10a      	b.n	9c8 <_i2c_master_read_packet+0x288>
     7b2:	7e14      	ldrb	r4, [r2, #24]
     7b4:	4225      	tst	r5, r4
     7b6:	d0f3      	beq.n	7a0 <_i2c_master_read_packet+0x60>
     7b8:	4663      	mov	r3, ip
     7ba:	4a88      	ldr	r2, [pc, #544]	; (9dc <_i2c_master_read_packet+0x29c>)
     7bc:	685b      	ldr	r3, [r3, #4]
     7be:	4013      	ands	r3, r2
     7c0:	4662      	mov	r2, ip
     7c2:	6053      	str	r3, [r2, #4]
     7c4:	2202      	movs	r2, #2
     7c6:	6803      	ldr	r3, [r0, #0]
     7c8:	7e1c      	ldrb	r4, [r3, #24]
     7ca:	4222      	tst	r2, r4
     7cc:	d100      	bne.n	7d0 <_i2c_master_read_packet+0x90>
     7ce:	e0ef      	b.n	9b0 <_i2c_master_read_packet+0x270>
     7d0:	761a      	strb	r2, [r3, #24]
     7d2:	8b5b      	ldrh	r3, [r3, #26]
     7d4:	421a      	tst	r2, r3
     7d6:	d000      	beq.n	7da <_i2c_master_read_packet+0x9a>
     7d8:	e0ad      	b.n	936 <_i2c_master_read_packet+0x1f6>
     7da:	464b      	mov	r3, r9
     7dc:	2278      	movs	r2, #120	; 0x78
     7de:	881b      	ldrh	r3, [r3, #0]
     7e0:	2401      	movs	r4, #1
     7e2:	0a1b      	lsrs	r3, r3, #8
     7e4:	4313      	orrs	r3, r2
     7e6:	464a      	mov	r2, r9
     7e8:	7a52      	ldrb	r2, [r2, #9]
     7ea:	005b      	lsls	r3, r3, #1
     7ec:	0392      	lsls	r2, r2, #14
     7ee:	4322      	orrs	r2, r4
     7f0:	4313      	orrs	r3, r2
     7f2:	4662      	mov	r2, ip
     7f4:	6253      	str	r3, [r2, #36]	; 0x24
     7f6:	e00a      	b.n	80e <_i2c_master_read_packet+0xce>
     7f8:	464b      	mov	r3, r9
     7fa:	464a      	mov	r2, r9
     7fc:	881b      	ldrh	r3, [r3, #0]
     7fe:	7a52      	ldrb	r2, [r2, #9]
     800:	005b      	lsls	r3, r3, #1
     802:	0392      	lsls	r2, r2, #14
     804:	4313      	orrs	r3, r2
     806:	2201      	movs	r2, #1
     808:	4313      	orrs	r3, r2
     80a:	4662      	mov	r2, ip
     80c:	6253      	str	r3, [r2, #36]	; 0x24
     80e:	6802      	ldr	r2, [r0, #0]
     810:	2300      	movs	r3, #0
     812:	2501      	movs	r5, #1
     814:	2602      	movs	r6, #2
     816:	e008      	b.n	82a <_i2c_master_read_packet+0xea>
     818:	7e14      	ldrb	r4, [r2, #24]
     81a:	4226      	tst	r6, r4
     81c:	d108      	bne.n	830 <_i2c_master_read_packet+0xf0>
     81e:	3301      	adds	r3, #1
     820:	8904      	ldrh	r4, [r0, #8]
     822:	b29b      	uxth	r3, r3
     824:	429c      	cmp	r4, r3
     826:	d800      	bhi.n	82a <_i2c_master_read_packet+0xea>
     828:	e0ba      	b.n	9a0 <_i2c_master_read_packet+0x260>
     82a:	7e14      	ldrb	r4, [r2, #24]
     82c:	4225      	tst	r5, r4
     82e:	d0f3      	beq.n	818 <_i2c_master_read_packet+0xd8>
     830:	2300      	movs	r3, #0
     832:	9300      	str	r3, [sp, #0]
     834:	9b01      	ldr	r3, [sp, #4]
     836:	2b00      	cmp	r3, #0
     838:	d000      	beq.n	83c <_i2c_master_read_packet+0xfc>
     83a:	e06f      	b.n	91c <_i2c_master_read_packet+0x1dc>
     83c:	4663      	mov	r3, ip
     83e:	4a67      	ldr	r2, [pc, #412]	; (9dc <_i2c_master_read_packet+0x29c>)
     840:	685b      	ldr	r3, [r3, #4]
     842:	4013      	ands	r3, r2
     844:	4662      	mov	r2, ip
     846:	6053      	str	r3, [r2, #4]
     848:	9b00      	ldr	r3, [sp, #0]
     84a:	2b00      	cmp	r3, #0
     84c:	d15e      	bne.n	90c <_i2c_master_read_packet+0x1cc>
     84e:	2202      	movs	r2, #2
     850:	6803      	ldr	r3, [r0, #0]
     852:	7e1c      	ldrb	r4, [r3, #24]
     854:	4222      	tst	r2, r4
     856:	d100      	bne.n	85a <_i2c_master_read_packet+0x11a>
     858:	e0a5      	b.n	9a6 <_i2c_master_read_packet+0x266>
     85a:	761a      	strb	r2, [r3, #24]
     85c:	8b5b      	ldrh	r3, [r3, #26]
     85e:	421a      	tst	r2, r3
     860:	d169      	bne.n	936 <_i2c_master_read_packet+0x1f6>
     862:	4a5f      	ldr	r2, [pc, #380]	; (9e0 <_i2c_master_read_packet+0x2a0>)
     864:	3901      	subs	r1, #1
     866:	4692      	mov	sl, r2
     868:	2220      	movs	r2, #32
     86a:	b289      	uxth	r1, r1
     86c:	2300      	movs	r3, #0
     86e:	4693      	mov	fp, r2
     870:	2707      	movs	r7, #7
     872:	2501      	movs	r5, #1
     874:	2602      	movs	r6, #2
     876:	4551      	cmp	r1, sl
     878:	d02c      	beq.n	8d4 <_i2c_master_read_packet+0x194>
     87a:	4662      	mov	r2, ip
     87c:	465c      	mov	r4, fp
     87e:	8b52      	ldrh	r2, [r2, #26]
     880:	4214      	tst	r4, r2
     882:	d058      	beq.n	936 <_i2c_master_read_packet+0x1f6>
     884:	7ac2      	ldrb	r2, [r0, #11]
     886:	2a00      	cmp	r2, #0
     888:	d004      	beq.n	894 <_i2c_master_read_packet+0x154>
     88a:	9a01      	ldr	r2, [sp, #4]
     88c:	2a00      	cmp	r2, #0
     88e:	d055      	beq.n	93c <_i2c_master_read_packet+0x1fc>
     890:	2901      	cmp	r1, #1
     892:	d055      	beq.n	940 <_i2c_master_read_packet+0x200>
     894:	6804      	ldr	r4, [r0, #0]
     896:	69e2      	ldr	r2, [r4, #28]
     898:	4217      	tst	r7, r2
     89a:	d1fc      	bne.n	896 <_i2c_master_read_packet+0x156>
     89c:	1c5a      	adds	r2, r3, #1
     89e:	b292      	uxth	r2, r2
     8a0:	2428      	movs	r4, #40	; 0x28
     8a2:	4690      	mov	r8, r2
     8a4:	4662      	mov	r2, ip
     8a6:	5d12      	ldrb	r2, [r2, r4]
     8a8:	464c      	mov	r4, r9
     8aa:	6864      	ldr	r4, [r4, #4]
     8ac:	54e2      	strb	r2, [r4, r3]
     8ae:	6802      	ldr	r2, [r0, #0]
     8b0:	2300      	movs	r3, #0
     8b2:	e007      	b.n	8c4 <_i2c_master_read_packet+0x184>
     8b4:	7e14      	ldrb	r4, [r2, #24]
     8b6:	4226      	tst	r6, r4
     8b8:	d107      	bne.n	8ca <_i2c_master_read_packet+0x18a>
     8ba:	3301      	adds	r3, #1
     8bc:	8904      	ldrh	r4, [r0, #8]
     8be:	b29b      	uxth	r3, r3
     8c0:	429c      	cmp	r4, r3
     8c2:	d949      	bls.n	958 <_i2c_master_read_packet+0x218>
     8c4:	7e14      	ldrb	r4, [r2, #24]
     8c6:	4225      	tst	r5, r4
     8c8:	d0f4      	beq.n	8b4 <_i2c_master_read_packet+0x174>
     8ca:	4643      	mov	r3, r8
     8cc:	3901      	subs	r1, #1
     8ce:	b289      	uxth	r1, r1
     8d0:	4551      	cmp	r1, sl
     8d2:	d1d2      	bne.n	87a <_i2c_master_read_packet+0x13a>
     8d4:	4698      	mov	r8, r3
     8d6:	7a83      	ldrb	r3, [r0, #10]
     8d8:	6802      	ldr	r2, [r0, #0]
     8da:	2b00      	cmp	r3, #0
     8dc:	d00b      	beq.n	8f6 <_i2c_master_read_packet+0x1b6>
     8de:	2107      	movs	r1, #7
     8e0:	69d3      	ldr	r3, [r2, #28]
     8e2:	4219      	tst	r1, r3
     8e4:	d1fc      	bne.n	8e0 <_i2c_master_read_packet+0x1a0>
     8e6:	4663      	mov	r3, ip
     8e8:	685a      	ldr	r2, [r3, #4]
     8ea:	23c0      	movs	r3, #192	; 0xc0
     8ec:	029b      	lsls	r3, r3, #10
     8ee:	4313      	orrs	r3, r2
     8f0:	4662      	mov	r2, ip
     8f2:	6053      	str	r3, [r2, #4]
     8f4:	6802      	ldr	r2, [r0, #0]
     8f6:	2107      	movs	r1, #7
     8f8:	69d3      	ldr	r3, [r2, #28]
     8fa:	4219      	tst	r1, r3
     8fc:	d1fc      	bne.n	8f8 <_i2c_master_read_packet+0x1b8>
     8fe:	2328      	movs	r3, #40	; 0x28
     900:	4662      	mov	r2, ip
     902:	5cd2      	ldrb	r2, [r2, r3]
     904:	464b      	mov	r3, r9
     906:	4641      	mov	r1, r8
     908:	685b      	ldr	r3, [r3, #4]
     90a:	545a      	strb	r2, [r3, r1]
     90c:	9800      	ldr	r0, [sp, #0]
     90e:	b003      	add	sp, #12
     910:	bc3c      	pop	{r2, r3, r4, r5}
     912:	4690      	mov	r8, r2
     914:	4699      	mov	r9, r3
     916:	46a2      	mov	sl, r4
     918:	46ab      	mov	fp, r5
     91a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     91c:	464b      	mov	r3, r9
     91e:	885b      	ldrh	r3, [r3, #2]
     920:	2b01      	cmp	r3, #1
     922:	d000      	beq.n	926 <_i2c_master_read_packet+0x1e6>
     924:	e78a      	b.n	83c <_i2c_master_read_packet+0xfc>
     926:	4663      	mov	r3, ip
     928:	685a      	ldr	r2, [r3, #4]
     92a:	2380      	movs	r3, #128	; 0x80
     92c:	02db      	lsls	r3, r3, #11
     92e:	4313      	orrs	r3, r2
     930:	4662      	mov	r2, ip
     932:	6053      	str	r3, [r2, #4]
     934:	e788      	b.n	848 <_i2c_master_read_packet+0x108>
     936:	2341      	movs	r3, #65	; 0x41
     938:	9300      	str	r3, [sp, #0]
     93a:	e7e7      	b.n	90c <_i2c_master_read_packet+0x1cc>
     93c:	2900      	cmp	r1, #0
     93e:	d1a9      	bne.n	894 <_i2c_master_read_packet+0x154>
     940:	4662      	mov	r2, ip
     942:	6854      	ldr	r4, [r2, #4]
     944:	2280      	movs	r2, #128	; 0x80
     946:	02d2      	lsls	r2, r2, #11
     948:	4322      	orrs	r2, r4
     94a:	4698      	mov	r8, r3
     94c:	4664      	mov	r4, ip
     94e:	3901      	subs	r1, #1
     950:	6062      	str	r2, [r4, #4]
     952:	b289      	uxth	r1, r1
     954:	4643      	mov	r3, r8
     956:	e7bb      	b.n	8d0 <_i2c_master_read_packet+0x190>
     958:	2312      	movs	r3, #18
     95a:	9300      	str	r3, [sp, #0]
     95c:	7a83      	ldrb	r3, [r0, #10]
     95e:	2b00      	cmp	r3, #0
     960:	d0c9      	beq.n	8f6 <_i2c_master_read_packet+0x1b6>
     962:	e7bc      	b.n	8de <_i2c_master_read_packet+0x19e>
     964:	464b      	mov	r3, r9
     966:	7a9a      	ldrb	r2, [r3, #10]
     968:	4663      	mov	r3, ip
     96a:	685c      	ldr	r4, [r3, #4]
     96c:	2380      	movs	r3, #128	; 0x80
     96e:	02db      	lsls	r3, r3, #11
     970:	4323      	orrs	r3, r4
     972:	4664      	mov	r4, ip
     974:	6063      	str	r3, [r4, #4]
     976:	6262      	str	r2, [r4, #36]	; 0x24
     978:	6802      	ldr	r2, [r0, #0]
     97a:	2300      	movs	r3, #0
     97c:	2501      	movs	r5, #1
     97e:	2602      	movs	r6, #2
     980:	e007      	b.n	992 <_i2c_master_read_packet+0x252>
     982:	7e14      	ldrb	r4, [r2, #24]
     984:	4226      	tst	r6, r4
     986:	d107      	bne.n	998 <_i2c_master_read_packet+0x258>
     988:	3301      	adds	r3, #1
     98a:	8904      	ldrh	r4, [r0, #8]
     98c:	b29b      	uxth	r3, r3
     98e:	429c      	cmp	r4, r3
     990:	d902      	bls.n	998 <_i2c_master_read_packet+0x258>
     992:	7e14      	ldrb	r4, [r2, #24]
     994:	4225      	tst	r5, r4
     996:	d0f4      	beq.n	982 <_i2c_master_read_packet+0x242>
     998:	2301      	movs	r3, #1
     99a:	4662      	mov	r2, ip
     99c:	7613      	strb	r3, [r2, #24]
     99e:	e6e4      	b.n	76a <_i2c_master_read_packet+0x2a>
     9a0:	2312      	movs	r3, #18
     9a2:	9300      	str	r3, [sp, #0]
     9a4:	e746      	b.n	834 <_i2c_master_read_packet+0xf4>
     9a6:	8b5a      	ldrh	r2, [r3, #26]
     9a8:	0752      	lsls	r2, r2, #29
     9aa:	d400      	bmi.n	9ae <_i2c_master_read_packet+0x26e>
     9ac:	e759      	b.n	862 <_i2c_master_read_packet+0x122>
     9ae:	e003      	b.n	9b8 <_i2c_master_read_packet+0x278>
     9b0:	8b5a      	ldrh	r2, [r3, #26]
     9b2:	0752      	lsls	r2, r2, #29
     9b4:	d400      	bmi.n	9b8 <_i2c_master_read_packet+0x278>
     9b6:	e710      	b.n	7da <_i2c_master_read_packet+0x9a>
     9b8:	22c0      	movs	r2, #192	; 0xc0
     9ba:	6859      	ldr	r1, [r3, #4]
     9bc:	0292      	lsls	r2, r2, #10
     9be:	430a      	orrs	r2, r1
     9c0:	605a      	str	r2, [r3, #4]
     9c2:	2318      	movs	r3, #24
     9c4:	9300      	str	r3, [sp, #0]
     9c6:	e7a1      	b.n	90c <_i2c_master_read_packet+0x1cc>
     9c8:	4663      	mov	r3, ip
     9ca:	4a04      	ldr	r2, [pc, #16]	; (9dc <_i2c_master_read_packet+0x29c>)
     9cc:	685b      	ldr	r3, [r3, #4]
     9ce:	4013      	ands	r3, r2
     9d0:	4662      	mov	r2, ip
     9d2:	6053      	str	r3, [r2, #4]
     9d4:	2312      	movs	r3, #18
     9d6:	9300      	str	r3, [sp, #0]
     9d8:	e798      	b.n	90c <_i2c_master_read_packet+0x1cc>
     9da:	46c0      	nop			; (mov r8, r8)
     9dc:	fffbffff 	.word	0xfffbffff
     9e0:	0000ffff 	.word	0x0000ffff

000009e4 <i2c_master_init>:
     9e4:	b5f0      	push	{r4, r5, r6, r7, lr}
     9e6:	46de      	mov	lr, fp
     9e8:	4657      	mov	r7, sl
     9ea:	4645      	mov	r5, r8
     9ec:	464e      	mov	r6, r9
     9ee:	b5e0      	push	{r5, r6, r7, lr}
     9f0:	0005      	movs	r5, r0
     9f2:	4ba3      	ldr	r3, [pc, #652]	; (c80 <i2c_master_init+0x29c>)
     9f4:	b089      	sub	sp, #36	; 0x24
     9f6:	6029      	str	r1, [r5, #0]
     9f8:	0008      	movs	r0, r1
     9fa:	0014      	movs	r4, r2
     9fc:	000f      	movs	r7, r1
     9fe:	469b      	mov	fp, r3
     a00:	4798      	blx	r3
     a02:	4aa0      	ldr	r2, [pc, #640]	; (c84 <i2c_master_init+0x2a0>)
     a04:	2805      	cmp	r0, #5
     a06:	d100      	bne.n	a0a <i2c_master_init+0x26>
     a08:	e0dc      	b.n	bc4 <i2c_master_init+0x1e0>
     a0a:	2301      	movs	r3, #1
     a0c:	4083      	lsls	r3, r0
     a0e:	69d1      	ldr	r1, [r2, #28]
     a10:	3012      	adds	r0, #18
     a12:	430b      	orrs	r3, r1
     a14:	61d3      	str	r3, [r2, #28]
     a16:	b2c6      	uxtb	r6, r0
     a18:	7b23      	ldrb	r3, [r4, #12]
     a1a:	aa06      	add	r2, sp, #24
     a1c:	7013      	strb	r3, [r2, #0]
     a1e:	0011      	movs	r1, r2
     a20:	0030      	movs	r0, r6
     a22:	4b99      	ldr	r3, [pc, #612]	; (c88 <i2c_master_init+0x2a4>)
     a24:	4798      	blx	r3
     a26:	0030      	movs	r0, r6
     a28:	4b98      	ldr	r3, [pc, #608]	; (c8c <i2c_master_init+0x2a8>)
     a2a:	4798      	blx	r3
     a2c:	4b98      	ldr	r3, [pc, #608]	; (c90 <i2c_master_init+0x2ac>)
     a2e:	7b20      	ldrb	r0, [r4, #12]
     a30:	2100      	movs	r1, #0
     a32:	4798      	blx	r3
     a34:	683b      	ldr	r3, [r7, #0]
     a36:	201c      	movs	r0, #28
     a38:	079b      	lsls	r3, r3, #30
     a3a:	d506      	bpl.n	a4a <i2c_master_init+0x66>
     a3c:	b009      	add	sp, #36	; 0x24
     a3e:	bc3c      	pop	{r2, r3, r4, r5}
     a40:	4690      	mov	r8, r2
     a42:	4699      	mov	r9, r3
     a44:	46a2      	mov	sl, r4
     a46:	46ab      	mov	fp, r5
     a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a4a:	2201      	movs	r2, #1
     a4c:	683b      	ldr	r3, [r7, #0]
     a4e:	4692      	mov	sl, r2
     a50:	401a      	ands	r2, r3
     a52:	4690      	mov	r8, r2
     a54:	3817      	subs	r0, #23
     a56:	1e13      	subs	r3, r2, #0
     a58:	d1f0      	bne.n	a3c <i2c_master_init+0x58>
     a5a:	3314      	adds	r3, #20
     a5c:	603b      	str	r3, [r7, #0]
     a5e:	682b      	ldr	r3, [r5, #0]
     a60:	ae07      	add	r6, sp, #28
     a62:	0018      	movs	r0, r3
     a64:	4699      	mov	r9, r3
     a66:	47d8      	blx	fp
     a68:	2380      	movs	r3, #128	; 0x80
     a6a:	7033      	strb	r3, [r6, #0]
     a6c:	4643      	mov	r3, r8
     a6e:	7073      	strb	r3, [r6, #1]
     a70:	4653      	mov	r3, sl
     a72:	70b3      	strb	r3, [r6, #2]
     a74:	4643      	mov	r3, r8
     a76:	9000      	str	r0, [sp, #0]
     a78:	69e0      	ldr	r0, [r4, #28]
     a7a:	70f3      	strb	r3, [r6, #3]
     a7c:	6a27      	ldr	r7, [r4, #32]
     a7e:	2800      	cmp	r0, #0
     a80:	d100      	bne.n	a84 <i2c_master_init+0xa0>
     a82:	e0b4      	b.n	bee <i2c_master_init+0x20a>
     a84:	2302      	movs	r3, #2
     a86:	7030      	strb	r0, [r6, #0]
     a88:	7073      	strb	r3, [r6, #1]
     a8a:	0c00      	lsrs	r0, r0, #16
     a8c:	4b81      	ldr	r3, [pc, #516]	; (c94 <i2c_master_init+0x2b0>)
     a8e:	b2c0      	uxtb	r0, r0
     a90:	0031      	movs	r1, r6
     a92:	469b      	mov	fp, r3
     a94:	4798      	blx	r3
     a96:	2f00      	cmp	r7, #0
     a98:	d100      	bne.n	a9c <i2c_master_init+0xb8>
     a9a:	e0ad      	b.n	bf8 <i2c_master_init+0x214>
     a9c:	2302      	movs	r3, #2
     a9e:	7037      	strb	r7, [r6, #0]
     aa0:	0c3f      	lsrs	r7, r7, #16
     aa2:	0031      	movs	r1, r6
     aa4:	b2f8      	uxtb	r0, r7
     aa6:	469a      	mov	sl, r3
     aa8:	7073      	strb	r3, [r6, #1]
     aaa:	47d8      	blx	fp
     aac:	8aa3      	ldrh	r3, [r4, #20]
     aae:	2180      	movs	r1, #128	; 0x80
     ab0:	80eb      	strh	r3, [r5, #6]
     ab2:	8ae3      	ldrh	r3, [r4, #22]
     ab4:	812b      	strh	r3, [r5, #8]
     ab6:	7e23      	ldrb	r3, [r4, #24]
     ab8:	2b00      	cmp	r3, #0
     aba:	d100      	bne.n	abe <i2c_master_init+0xda>
     abc:	e088      	b.n	bd0 <i2c_master_init+0x1ec>
     abe:	68a2      	ldr	r2, [r4, #8]
     ac0:	6923      	ldr	r3, [r4, #16]
     ac2:	4313      	orrs	r3, r2
     ac4:	430b      	orrs	r3, r1
     ac6:	2124      	movs	r1, #36	; 0x24
     ac8:	5c61      	ldrb	r1, [r4, r1]
     aca:	2900      	cmp	r1, #0
     acc:	d002      	beq.n	ad4 <i2c_master_init+0xf0>
     ace:	2180      	movs	r1, #128	; 0x80
     ad0:	05c9      	lsls	r1, r1, #23
     ad2:	430b      	orrs	r3, r1
     ad4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
     ad6:	430b      	orrs	r3, r1
     ad8:	212c      	movs	r1, #44	; 0x2c
     ada:	5c61      	ldrb	r1, [r4, r1]
     adc:	2900      	cmp	r1, #0
     ade:	d100      	bne.n	ae2 <i2c_master_init+0xfe>
     ae0:	e07f      	b.n	be2 <i2c_master_init+0x1fe>
     ae2:	2280      	movs	r2, #128	; 0x80
     ae4:	0512      	lsls	r2, r2, #20
     ae6:	4313      	orrs	r3, r2
     ae8:	222d      	movs	r2, #45	; 0x2d
     aea:	5ca2      	ldrb	r2, [r4, r2]
     aec:	2a00      	cmp	r2, #0
     aee:	d002      	beq.n	af6 <i2c_master_init+0x112>
     af0:	2280      	movs	r2, #128	; 0x80
     af2:	0412      	lsls	r2, r2, #16
     af4:	4313      	orrs	r3, r2
     af6:	222e      	movs	r2, #46	; 0x2e
     af8:	5ca2      	ldrb	r2, [r4, r2]
     afa:	2a00      	cmp	r2, #0
     afc:	d002      	beq.n	b04 <i2c_master_init+0x120>
     afe:	2280      	movs	r2, #128	; 0x80
     b00:	03d2      	lsls	r2, r2, #15
     b02:	4313      	orrs	r3, r2
     b04:	464a      	mov	r2, r9
     b06:	6812      	ldr	r2, [r2, #0]
     b08:	9800      	ldr	r0, [sp, #0]
     b0a:	4313      	orrs	r3, r2
     b0c:	464a      	mov	r2, r9
     b0e:	6013      	str	r3, [r2, #0]
     b10:	2380      	movs	r3, #128	; 0x80
     b12:	3012      	adds	r0, #18
     b14:	005b      	lsls	r3, r3, #1
     b16:	25fa      	movs	r5, #250	; 0xfa
     b18:	6053      	str	r3, [r2, #4]
     b1a:	b2c0      	uxtb	r0, r0
     b1c:	4b5e      	ldr	r3, [pc, #376]	; (c98 <i2c_master_init+0x2b4>)
     b1e:	4798      	blx	r3
     b20:	6823      	ldr	r3, [r4, #0]
     b22:	00ad      	lsls	r5, r5, #2
     b24:	435d      	muls	r5, r3
     b26:	4b5d      	ldr	r3, [pc, #372]	; (c9c <i2c_master_init+0x2b8>)
     b28:	9005      	str	r0, [sp, #20]
     b2a:	469b      	mov	fp, r3
     b2c:	4798      	blx	r3
     b2e:	9000      	str	r0, [sp, #0]
     b30:	9101      	str	r1, [sp, #4]
     b32:	0068      	lsls	r0, r5, #1
     b34:	47d8      	blx	fp
     b36:	9002      	str	r0, [sp, #8]
     b38:	9103      	str	r1, [sp, #12]
     b3a:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     b3c:	47d8      	blx	fp
     b3e:	4b58      	ldr	r3, [pc, #352]	; (ca0 <i2c_master_init+0x2bc>)
     b40:	0006      	movs	r6, r0
     b42:	469a      	mov	sl, r3
     b44:	000f      	movs	r7, r1
     b46:	9800      	ldr	r0, [sp, #0]
     b48:	9901      	ldr	r1, [sp, #4]
     b4a:	4a56      	ldr	r2, [pc, #344]	; (ca4 <i2c_master_init+0x2c0>)
     b4c:	4b56      	ldr	r3, [pc, #344]	; (ca8 <i2c_master_init+0x2c4>)
     b4e:	47d0      	blx	sl
     b50:	0002      	movs	r2, r0
     b52:	000b      	movs	r3, r1
     b54:	0030      	movs	r0, r6
     b56:	0039      	movs	r1, r7
     b58:	47d0      	blx	sl
     b5a:	2200      	movs	r2, #0
     b5c:	4b53      	ldr	r3, [pc, #332]	; (cac <i2c_master_init+0x2c8>)
     b5e:	4f54      	ldr	r7, [pc, #336]	; (cb0 <i2c_master_init+0x2cc>)
     b60:	47b8      	blx	r7
     b62:	0006      	movs	r6, r0
     b64:	0028      	movs	r0, r5
     b66:	000f      	movs	r7, r1
     b68:	47d8      	blx	fp
     b6a:	0002      	movs	r2, r0
     b6c:	000b      	movs	r3, r1
     b6e:	0030      	movs	r0, r6
     b70:	0039      	movs	r1, r7
     b72:	47d0      	blx	sl
     b74:	4d4f      	ldr	r5, [pc, #316]	; (cb4 <i2c_master_init+0x2d0>)
     b76:	0002      	movs	r2, r0
     b78:	000b      	movs	r3, r1
     b7a:	9800      	ldr	r0, [sp, #0]
     b7c:	9901      	ldr	r1, [sp, #4]
     b7e:	47a8      	blx	r5
     b80:	9e02      	ldr	r6, [sp, #8]
     b82:	9f03      	ldr	r7, [sp, #12]
     b84:	4d4a      	ldr	r5, [pc, #296]	; (cb0 <i2c_master_init+0x2cc>)
     b86:	0032      	movs	r2, r6
     b88:	003b      	movs	r3, r7
     b8a:	47a8      	blx	r5
     b8c:	2200      	movs	r2, #0
     b8e:	4b4a      	ldr	r3, [pc, #296]	; (cb8 <i2c_master_init+0x2d4>)
     b90:	4d48      	ldr	r5, [pc, #288]	; (cb4 <i2c_master_init+0x2d0>)
     b92:	47a8      	blx	r5
     b94:	0032      	movs	r2, r6
     b96:	003b      	movs	r3, r7
     b98:	4d48      	ldr	r5, [pc, #288]	; (cbc <i2c_master_init+0x2d8>)
     b9a:	47a8      	blx	r5
     b9c:	4f48      	ldr	r7, [pc, #288]	; (cc0 <i2c_master_init+0x2dc>)
     b9e:	47b8      	blx	r7
     ba0:	2380      	movs	r3, #128	; 0x80
     ba2:	68a2      	ldr	r2, [r4, #8]
     ba4:	0006      	movs	r6, r0
     ba6:	049b      	lsls	r3, r3, #18
     ba8:	429a      	cmp	r2, r3
     baa:	d02b      	beq.n	c04 <i2c_master_init+0x220>
     bac:	2040      	movs	r0, #64	; 0x40
     bae:	2eff      	cmp	r6, #255	; 0xff
     bb0:	d900      	bls.n	bb4 <i2c_master_init+0x1d0>
     bb2:	e743      	b.n	a3c <i2c_master_init+0x58>
     bb4:	2300      	movs	r3, #0
     bb6:	4642      	mov	r2, r8
     bb8:	4313      	orrs	r3, r2
     bba:	431e      	orrs	r6, r3
     bbc:	464b      	mov	r3, r9
     bbe:	2000      	movs	r0, #0
     bc0:	60de      	str	r6, [r3, #12]
     bc2:	e73b      	b.n	a3c <i2c_master_init+0x58>
     bc4:	2102      	movs	r1, #2
     bc6:	6a13      	ldr	r3, [r2, #32]
     bc8:	2618      	movs	r6, #24
     bca:	430b      	orrs	r3, r1
     bcc:	6213      	str	r3, [r2, #32]
     bce:	e723      	b.n	a18 <i2c_master_init+0x34>
     bd0:	4652      	mov	r2, sl
     bd2:	4b3c      	ldr	r3, [pc, #240]	; (cc4 <i2c_master_init+0x2e0>)
     bd4:	789b      	ldrb	r3, [r3, #2]
     bd6:	401a      	ands	r2, r3
     bd8:	0013      	movs	r3, r2
     bda:	1e5a      	subs	r2, r3, #1
     bdc:	4193      	sbcs	r3, r2
     bde:	01d9      	lsls	r1, r3, #7
     be0:	e76d      	b.n	abe <i2c_master_init+0xda>
     be2:	2180      	movs	r1, #128	; 0x80
     be4:	0489      	lsls	r1, r1, #18
     be6:	428a      	cmp	r2, r1
     be8:	d000      	beq.n	bec <i2c_master_init+0x208>
     bea:	e77d      	b.n	ae8 <i2c_master_init+0x104>
     bec:	e779      	b.n	ae2 <i2c_master_init+0xfe>
     bee:	2100      	movs	r1, #0
     bf0:	4648      	mov	r0, r9
     bf2:	4b35      	ldr	r3, [pc, #212]	; (cc8 <i2c_master_init+0x2e4>)
     bf4:	4798      	blx	r3
     bf6:	e745      	b.n	a84 <i2c_master_init+0xa0>
     bf8:	2101      	movs	r1, #1
     bfa:	4648      	mov	r0, r9
     bfc:	4b32      	ldr	r3, [pc, #200]	; (cc8 <i2c_master_init+0x2e4>)
     bfe:	4798      	blx	r3
     c00:	0007      	movs	r7, r0
     c02:	e74b      	b.n	a9c <i2c_master_init+0xb8>
     c04:	23fa      	movs	r3, #250	; 0xfa
     c06:	6861      	ldr	r1, [r4, #4]
     c08:	009b      	lsls	r3, r3, #2
     c0a:	434b      	muls	r3, r1
     c0c:	9800      	ldr	r0, [sp, #0]
     c0e:	9901      	ldr	r1, [sp, #4]
     c10:	4698      	mov	r8, r3
     c12:	0002      	movs	r2, r0
     c14:	000b      	movs	r3, r1
     c16:	4c26      	ldr	r4, [pc, #152]	; (cb0 <i2c_master_init+0x2cc>)
     c18:	47a0      	blx	r4
     c1a:	0004      	movs	r4, r0
     c1c:	4640      	mov	r0, r8
     c1e:	000d      	movs	r5, r1
     c20:	47d8      	blx	fp
     c22:	2200      	movs	r2, #0
     c24:	4b29      	ldr	r3, [pc, #164]	; (ccc <i2c_master_init+0x2e8>)
     c26:	47d0      	blx	sl
     c28:	0002      	movs	r2, r0
     c2a:	000b      	movs	r3, r1
     c2c:	0020      	movs	r0, r4
     c2e:	0029      	movs	r1, r5
     c30:	4c22      	ldr	r4, [pc, #136]	; (cbc <i2c_master_init+0x2d8>)
     c32:	47a0      	blx	r4
     c34:	2200      	movs	r2, #0
     c36:	4b20      	ldr	r3, [pc, #128]	; (cb8 <i2c_master_init+0x2d4>)
     c38:	4c1e      	ldr	r4, [pc, #120]	; (cb4 <i2c_master_init+0x2d0>)
     c3a:	47a0      	blx	r4
     c3c:	47b8      	blx	r7
     c3e:	1e04      	subs	r4, r0, #0
     c40:	d013      	beq.n	c6a <i2c_master_init+0x286>
     c42:	4b23      	ldr	r3, [pc, #140]	; (cd0 <i2c_master_init+0x2ec>)
     c44:	4641      	mov	r1, r8
     c46:	9805      	ldr	r0, [sp, #20]
     c48:	4798      	blx	r3
     c4a:	3802      	subs	r0, #2
     c4c:	1b03      	subs	r3, r0, r4
     c4e:	2040      	movs	r0, #64	; 0x40
     c50:	2eff      	cmp	r6, #255	; 0xff
     c52:	d900      	bls.n	c56 <i2c_master_init+0x272>
     c54:	e6f2      	b.n	a3c <i2c_master_init+0x58>
     c56:	2bff      	cmp	r3, #255	; 0xff
     c58:	d900      	bls.n	c5c <i2c_master_init+0x278>
     c5a:	e6ef      	b.n	a3c <i2c_master_init+0x58>
     c5c:	22ff      	movs	r2, #255	; 0xff
     c5e:	041b      	lsls	r3, r3, #16
     c60:	0412      	lsls	r2, r2, #16
     c62:	4013      	ands	r3, r2
     c64:	4698      	mov	r8, r3
     c66:	0623      	lsls	r3, r4, #24
     c68:	e7a5      	b.n	bb6 <i2c_master_init+0x1d2>
     c6a:	4643      	mov	r3, r8
     c6c:	0059      	lsls	r1, r3, #1
     c6e:	9b05      	ldr	r3, [sp, #20]
     c70:	1e48      	subs	r0, r1, #1
     c72:	469c      	mov	ip, r3
     c74:	4b16      	ldr	r3, [pc, #88]	; (cd0 <i2c_master_init+0x2ec>)
     c76:	4460      	add	r0, ip
     c78:	4798      	blx	r3
     c7a:	1e43      	subs	r3, r0, #1
     c7c:	e7e7      	b.n	c4e <i2c_master_init+0x26a>
     c7e:	46c0      	nop			; (mov r8, r8)
     c80:	00003815 	.word	0x00003815
     c84:	40000400 	.word	0x40000400
     c88:	00004831 	.word	0x00004831
     c8c:	00004871 	.word	0x00004871
     c90:	00003671 	.word	0x00003671
     c94:	0000492d 	.word	0x0000492d
     c98:	000048a9 	.word	0x000048a9
     c9c:	00007a21 	.word	0x00007a21
     ca0:	00006e09 	.word	0x00006e09
     ca4:	e826d695 	.word	0xe826d695
     ca8:	3e112e0b 	.word	0x3e112e0b
     cac:	40240000 	.word	0x40240000
     cb0:	00006181 	.word	0x00006181
     cb4:	00007309 	.word	0x00007309
     cb8:	3ff00000 	.word	0x3ff00000
     cbc:	000067a1 	.word	0x000067a1
     cc0:	00007935 	.word	0x00007935
     cc4:	41002000 	.word	0x41002000
     cc8:	000036b9 	.word	0x000036b9
     ccc:	40080000 	.word	0x40080000
     cd0:	00005fd9 	.word	0x00005fd9

00000cd4 <i2c_master_read_packet_wait>:
     cd4:	2301      	movs	r3, #1
     cd6:	b510      	push	{r4, lr}
     cd8:	7283      	strb	r3, [r0, #10]
     cda:	72c3      	strb	r3, [r0, #11]
     cdc:	4b01      	ldr	r3, [pc, #4]	; (ce4 <i2c_master_read_packet_wait+0x10>)
     cde:	4798      	blx	r3
     ce0:	bd10      	pop	{r4, pc}
     ce2:	46c0      	nop			; (mov r8, r8)
     ce4:	00000741 	.word	0x00000741

00000ce8 <i2c_master_write_packet_wait_no_stop>:
     ce8:	2300      	movs	r3, #0
     cea:	b510      	push	{r4, lr}
     cec:	7283      	strb	r3, [r0, #10]
     cee:	3301      	adds	r3, #1
     cf0:	72c3      	strb	r3, [r0, #11]
     cf2:	4b01      	ldr	r3, [pc, #4]	; (cf8 <i2c_master_write_packet_wait_no_stop+0x10>)
     cf4:	4798      	blx	r3
     cf6:	bd10      	pop	{r4, pc}
     cf8:	000005bd 	.word	0x000005bd

00000cfc <wdt_set_config>:
     cfc:	2180      	movs	r1, #128	; 0x80
     cfe:	b510      	push	{r4, lr}
     d00:	4a29      	ldr	r2, [pc, #164]	; (da8 <wdt_set_config+0xac>)
     d02:	6953      	ldr	r3, [r2, #20]
     d04:	430b      	orrs	r3, r1
     d06:	4929      	ldr	r1, [pc, #164]	; (dac <wdt_set_config+0xb0>)
     d08:	6153      	str	r3, [r2, #20]
     d0a:	780b      	ldrb	r3, [r1, #0]
     d0c:	2210      	movs	r2, #16
     d0e:	b25b      	sxtb	r3, r3
     d10:	2b00      	cmp	r3, #0
     d12:	db03      	blt.n	d1c <wdt_set_config+0x20>
     d14:	7883      	ldrb	r3, [r0, #2]
     d16:	3207      	adds	r2, #7
     d18:	2b00      	cmp	r3, #0
     d1a:	d101      	bne.n	d20 <wdt_set_config+0x24>
     d1c:	0010      	movs	r0, r2
     d1e:	bd10      	pop	{r4, pc}
     d20:	78c4      	ldrb	r4, [r0, #3]
     d22:	429c      	cmp	r4, r3
     d24:	d8fa      	bhi.n	d1c <wdt_set_config+0x20>
     d26:	7904      	ldrb	r4, [r0, #4]
     d28:	429c      	cmp	r4, r3
     d2a:	d8f7      	bhi.n	d1c <wdt_set_config+0x20>
     d2c:	780b      	ldrb	r3, [r1, #0]
     d2e:	3a15      	subs	r2, #21
     d30:	4393      	bics	r3, r2
     d32:	700b      	strb	r3, [r1, #0]
     d34:	688b      	ldr	r3, [r1, #8]
     d36:	2b00      	cmp	r3, #0
     d38:	d1fc      	bne.n	d34 <wdt_set_config+0x38>
     d3a:	7843      	ldrb	r3, [r0, #1]
     d3c:	2b00      	cmp	r3, #0
     d3e:	d101      	bne.n	d44 <wdt_set_config+0x48>
     d40:	2200      	movs	r2, #0
     d42:	e7eb      	b.n	d1c <wdt_set_config+0x20>
     d44:	7883      	ldrb	r3, [r0, #2]
     d46:	78c2      	ldrb	r2, [r0, #3]
     d48:	3b01      	subs	r3, #1
     d4a:	2a00      	cmp	r2, #0
     d4c:	d026      	beq.n	d9c <wdt_set_config+0xa0>
     d4e:	2204      	movs	r2, #4
     d50:	780c      	ldrb	r4, [r1, #0]
     d52:	4322      	orrs	r2, r4
     d54:	700a      	strb	r2, [r1, #0]
     d56:	78c2      	ldrb	r2, [r0, #3]
     d58:	3a01      	subs	r2, #1
     d5a:	0112      	lsls	r2, r2, #4
     d5c:	4313      	orrs	r3, r2
     d5e:	4a13      	ldr	r2, [pc, #76]	; (dac <wdt_set_config+0xb0>)
     d60:	6891      	ldr	r1, [r2, #8]
     d62:	2900      	cmp	r1, #0
     d64:	d1fc      	bne.n	d60 <wdt_set_config+0x64>
     d66:	b2db      	uxtb	r3, r3
     d68:	7053      	strb	r3, [r2, #1]
     d6a:	7903      	ldrb	r3, [r0, #4]
     d6c:	2b00      	cmp	r3, #0
     d6e:	d002      	beq.n	d76 <wdt_set_config+0x7a>
     d70:	3b01      	subs	r3, #1
     d72:	b2db      	uxtb	r3, r3
     d74:	7093      	strb	r3, [r2, #2]
     d76:	7803      	ldrb	r3, [r0, #0]
     d78:	4a0c      	ldr	r2, [pc, #48]	; (dac <wdt_set_config+0xb0>)
     d7a:	2b00      	cmp	r3, #0
     d7c:	d009      	beq.n	d92 <wdt_set_config+0x96>
     d7e:	2180      	movs	r1, #128	; 0x80
     d80:	7813      	ldrb	r3, [r2, #0]
     d82:	430b      	orrs	r3, r1
     d84:	7013      	strb	r3, [r2, #0]
     d86:	4b09      	ldr	r3, [pc, #36]	; (dac <wdt_set_config+0xb0>)
     d88:	689a      	ldr	r2, [r3, #8]
     d8a:	2a00      	cmp	r2, #0
     d8c:	d1fc      	bne.n	d88 <wdt_set_config+0x8c>
     d8e:	2200      	movs	r2, #0
     d90:	e7c4      	b.n	d1c <wdt_set_config+0x20>
     d92:	2302      	movs	r3, #2
     d94:	7811      	ldrb	r1, [r2, #0]
     d96:	430b      	orrs	r3, r1
     d98:	7013      	strb	r3, [r2, #0]
     d9a:	e7f4      	b.n	d86 <wdt_set_config+0x8a>
     d9c:	2404      	movs	r4, #4
     d9e:	780a      	ldrb	r2, [r1, #0]
     da0:	43a2      	bics	r2, r4
     da2:	700a      	strb	r2, [r1, #0]
     da4:	e7db      	b.n	d5e <wdt_set_config+0x62>
     da6:	46c0      	nop			; (mov r8, r8)
     da8:	40000400 	.word	0x40000400
     dac:	40001c00 	.word	0x40001c00

00000db0 <wdt_reset_count>:
     db0:	22a5      	movs	r2, #165	; 0xa5
     db2:	4b03      	ldr	r3, [pc, #12]	; (dc0 <wdt_reset_count+0x10>)
     db4:	731a      	strb	r2, [r3, #12]
     db6:	689a      	ldr	r2, [r3, #8]
     db8:	2a00      	cmp	r2, #0
     dba:	d1fc      	bne.n	db6 <wdt_reset_count+0x6>
     dbc:	4770      	bx	lr
     dbe:	46c0      	nop			; (mov r8, r8)
     dc0:	40001c00 	.word	0x40001c00

00000dc4 <wdt_register_callback>:
     dc4:	2900      	cmp	r1, #0
     dc6:	d001      	beq.n	dcc <wdt_register_callback+0x8>
     dc8:	2017      	movs	r0, #23
     dca:	4770      	bx	lr
     dcc:	4b01      	ldr	r3, [pc, #4]	; (dd4 <wdt_register_callback+0x10>)
     dce:	6018      	str	r0, [r3, #0]
     dd0:	2000      	movs	r0, #0
     dd2:	e7fa      	b.n	dca <wdt_register_callback+0x6>
     dd4:	20000290 	.word	0x20000290

00000dd8 <wdt_enable_callback>:
     dd8:	2800      	cmp	r0, #0
     dda:	d001      	beq.n	de0 <wdt_enable_callback+0x8>
     ddc:	2017      	movs	r0, #23
     dde:	4770      	bx	lr
     de0:	2201      	movs	r2, #1
     de2:	4b03      	ldr	r3, [pc, #12]	; (df0 <wdt_enable_callback+0x18>)
     de4:	715a      	strb	r2, [r3, #5]
     de6:	4b03      	ldr	r3, [pc, #12]	; (df4 <wdt_enable_callback+0x1c>)
     de8:	3201      	adds	r2, #1
     dea:	601a      	str	r2, [r3, #0]
     dec:	e7f7      	b.n	dde <wdt_enable_callback+0x6>
     dee:	46c0      	nop			; (mov r8, r8)
     df0:	40001c00 	.word	0x40001c00
     df4:	e000e100 	.word	0xe000e100

00000df8 <WDT_Handler>:
     df8:	2201      	movs	r2, #1
     dfa:	b510      	push	{r4, lr}
     dfc:	4b03      	ldr	r3, [pc, #12]	; (e0c <WDT_Handler+0x14>)
     dfe:	719a      	strb	r2, [r3, #6]
     e00:	4b03      	ldr	r3, [pc, #12]	; (e10 <WDT_Handler+0x18>)
     e02:	681b      	ldr	r3, [r3, #0]
     e04:	2b00      	cmp	r3, #0
     e06:	d000      	beq.n	e0a <WDT_Handler+0x12>
     e08:	4798      	blx	r3
     e0a:	bd10      	pop	{r4, pc}
     e0c:	40001c00 	.word	0x40001c00
     e10:	20000290 	.word	0x20000290

00000e14 <PHY_Sleep>:

/*************************************************************************/ /**
*****************************************************************************/
// Radio Sleep
void PHY_Sleep(void)
{
     e14:	b570      	push	{r4, r5, r6, lr}
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
    do {
        phyWriteRegister(RG_TRX_STATE, TRX_CMD_FORCE_TRX_OFF);
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
     e16:	261f      	movs	r6, #31
     e18:	4c0d      	ldr	r4, [pc, #52]	; (e50 <PHY_Sleep+0x3c>)
     e1a:	4d0e      	ldr	r5, [pc, #56]	; (e54 <PHY_Sleep+0x40>)
    trx_reg_write(reg, value);
     e1c:	2103      	movs	r1, #3
     e1e:	2002      	movs	r0, #2
     e20:	47a0      	blx	r4
    value = trx_reg_read(reg);
     e22:	2001      	movs	r0, #1
     e24:	47a8      	blx	r5
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
     e26:	4030      	ands	r0, r6
     e28:	2808      	cmp	r0, #8
     e2a:	d1f7      	bne.n	e1c <PHY_Sleep+0x8>

    do {
        phyWriteRegister(RG_TRX_STATE,
            state);
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
     e2c:	261f      	movs	r6, #31
    trx_reg_write(reg, value);
     e2e:	2108      	movs	r1, #8
     e30:	2002      	movs	r0, #2
     e32:	47a0      	blx	r4
    value = trx_reg_read(reg);
     e34:	2001      	movs	r0, #1
     e36:	47a8      	blx	r5
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
     e38:	4030      	ands	r0, r6
     e3a:	2808      	cmp	r0, #8
     e3c:	d1f7      	bne.n	e2e <PHY_Sleep+0x1a>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     e3e:	2280      	movs	r2, #128	; 0x80
     e40:	4b05      	ldr	r3, [pc, #20]	; (e58 <PHY_Sleep+0x44>)
     e42:	0352      	lsls	r2, r2, #13
     e44:	619a      	str	r2, [r3, #24]
    phyState = PHY_STATE_SLEEP;
     e46:	2202      	movs	r2, #2
     e48:	4b04      	ldr	r3, [pc, #16]	; (e5c <PHY_Sleep+0x48>)
     e4a:	701a      	strb	r2, [r3, #0]
}
     e4c:	bd70      	pop	{r4, r5, r6, pc}
     e4e:	46c0      	nop			; (mov r8, r8)
     e50:	000054e1 	.word	0x000054e1
     e54:	000053e5 	.word	0x000053e5
     e58:	40002800 	.word	0x40002800
     e5c:	20000129 	.word	0x20000129

00000e60 <MiMAC_SetAltAddress>:
{
     e60:	b510      	push	{r4, lr}
    myNetworkAddress.v[0] = Address[0];
     e62:	4b0e      	ldr	r3, [pc, #56]	; (e9c <MiMAC_SetAltAddress+0x3c>)
     e64:	7802      	ldrb	r2, [r0, #0]
    trx_reg_write(reg, value);
     e66:	4c0e      	ldr	r4, [pc, #56]	; (ea0 <MiMAC_SetAltAddress+0x40>)
    myNetworkAddress.v[0] = Address[0];
     e68:	701a      	strb	r2, [r3, #0]
    myNetworkAddress.v[1] = Address[1];
     e6a:	7842      	ldrb	r2, [r0, #1]
    trx_reg_write(reg, value);
     e6c:	2020      	movs	r0, #32
    myNetworkAddress.v[1] = Address[1];
     e6e:	705a      	strb	r2, [r3, #1]
    MAC_PANID.v[0] = PANID[0];
     e70:	780a      	ldrb	r2, [r1, #0]
     e72:	4b0c      	ldr	r3, [pc, #48]	; (ea4 <MiMAC_SetAltAddress+0x44>)
     e74:	701a      	strb	r2, [r3, #0]
    MAC_PANID.v[1] = PANID[1];
     e76:	784a      	ldrb	r2, [r1, #1]
    trx_reg_write(reg, value);
     e78:	2101      	movs	r1, #1
    MAC_PANID.v[1] = PANID[1];
     e7a:	705a      	strb	r2, [r3, #1]
    trx_reg_write(reg, value);
     e7c:	47a0      	blx	r4
     e7e:	2100      	movs	r1, #0
     e80:	2021      	movs	r0, #33	; 0x21
     e82:	47a0      	blx	r4
     e84:	2101      	movs	r1, #1
     e86:	202d      	movs	r0, #45	; 0x2d
     e88:	47a0      	blx	r4
     e8a:	2111      	movs	r1, #17
     e8c:	2022      	movs	r0, #34	; 0x22
     e8e:	47a0      	blx	r4
     e90:	2111      	movs	r1, #17
     e92:	2023      	movs	r0, #35	; 0x23
     e94:	47a0      	blx	r4
}
     e96:	2001      	movs	r0, #1
     e98:	bd10      	pop	{r4, pc}
     e9a:	46c0      	nop			; (mov r8, r8)
     e9c:	20000298 	.word	0x20000298
     ea0:	000054e1 	.word	0x000054e1
     ea4:	2000090c 	.word	0x2000090c

00000ea8 <mic_generator>:
{
     ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
     eaa:	464e      	mov	r6, r9
     eac:	46de      	mov	lr, fp
     eae:	4657      	mov	r7, sl
     eb0:	4645      	mov	r5, r8
     eb2:	b5e0      	push	{r5, r6, r7, lr}
     eb4:	b0a9      	sub	sp, #164	; 0xa4
     eb6:	9303      	str	r3, [sp, #12]
     eb8:	9002      	str	r0, [sp, #8]
     eba:	9101      	str	r1, [sp, #4]
     ebc:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    iterations = len / AES_BLOCKSIZE;
     ebe:	090e      	lsrs	r6, r1, #4
    if (len % AES_BLOCKSIZE != 0)
     ec0:	0709      	lsls	r1, r1, #28
     ec2:	d000      	beq.n	ec6 <mic_generator+0x1e>
        iterations++;
     ec4:	3601      	adds	r6, #1
    InitVect_in[0] = frame_control; //0x49
     ec6:	4c67      	ldr	r4, [pc, #412]	; (1064 <mic_generator+0x1bc>)
    cbc_header_with_padding[0] = 0x00; // l(a)
     ec8:	af04      	add	r7, sp, #16
    InitVect_in[0] = frame_control; //0x49
     eca:	7022      	strb	r2, [r4, #0]
    cbc_header_with_padding[2] = frame_control; //frame_control;
     ecc:	70ba      	strb	r2, [r7, #2]
        InitVect_in[i + 1] = SourceIEEEAddress[i];
     ece:	781a      	ldrb	r2, [r3, #0]
    cbc_header_with_padding[0] = 0x00; // l(a)
     ed0:	2500      	movs	r5, #0
        InitVect_in[i + 1] = SourceIEEEAddress[i];
     ed2:	7062      	strb	r2, [r4, #1]
        cbc_header_with_padding[i + 7] = SourceIEEEAddress[i];
     ed4:	781a      	ldrb	r2, [r3, #0]
    cbc_header_with_padding[1] = 0x0d; // l(a)Header Length
     ed6:	210d      	movs	r1, #13
        cbc_header_with_padding[i + 7] = SourceIEEEAddress[i];
     ed8:	71fa      	strb	r2, [r7, #7]
        InitVect_in[i + 1] = SourceIEEEAddress[i];
     eda:	785a      	ldrb	r2, [r3, #1]
     edc:	0020      	movs	r0, r4
     ede:	70a2      	strb	r2, [r4, #2]
        cbc_header_with_padding[i + 7] = SourceIEEEAddress[i];
     ee0:	785a      	ldrb	r2, [r3, #1]
    cbc_header_with_padding[0] = 0x00; // l(a)
     ee2:	703d      	strb	r5, [r7, #0]
        cbc_header_with_padding[i + 7] = SourceIEEEAddress[i];
     ee4:	723a      	strb	r2, [r7, #8]
        InitVect_in[i + 1] = SourceIEEEAddress[i];
     ee6:	789a      	ldrb	r2, [r3, #2]
    cbc_header_with_padding[1] = 0x0d; // l(a)Header Length
     ee8:	7079      	strb	r1, [r7, #1]
        InitVect_in[i + 1] = SourceIEEEAddress[i];
     eea:	70e2      	strb	r2, [r4, #3]
        cbc_header_with_padding[i + 7] = SourceIEEEAddress[i];
     eec:	789a      	ldrb	r2, [r3, #2]
     eee:	a903      	add	r1, sp, #12
     ef0:	727a      	strb	r2, [r7, #9]
        InitVect_in[i + 1] = SourceIEEEAddress[i];
     ef2:	78da      	ldrb	r2, [r3, #3]
     ef4:	3009      	adds	r0, #9
     ef6:	7122      	strb	r2, [r4, #4]
        cbc_header_with_padding[i + 7] = SourceIEEEAddress[i];
     ef8:	78da      	ldrb	r2, [r3, #3]
     efa:	72ba      	strb	r2, [r7, #10]
        InitVect_in[i + 1] = SourceIEEEAddress[i];
     efc:	791a      	ldrb	r2, [r3, #4]
     efe:	7162      	strb	r2, [r4, #5]
        cbc_header_with_padding[i + 7] = SourceIEEEAddress[i];
     f00:	791a      	ldrb	r2, [r3, #4]
     f02:	72fa      	strb	r2, [r7, #11]
        InitVect_in[i + 1] = SourceIEEEAddress[i];
     f04:	795a      	ldrb	r2, [r3, #5]
     f06:	71a2      	strb	r2, [r4, #6]
        cbc_header_with_padding[i + 7] = SourceIEEEAddress[i];
     f08:	795a      	ldrb	r2, [r3, #5]
     f0a:	733a      	strb	r2, [r7, #12]
        InitVect_in[i + 1] = SourceIEEEAddress[i];
     f0c:	799a      	ldrb	r2, [r3, #6]
     f0e:	71e2      	strb	r2, [r4, #7]
        cbc_header_with_padding[i + 7] = SourceIEEEAddress[i];
     f10:	799a      	ldrb	r2, [r3, #6]
     f12:	737a      	strb	r2, [r7, #13]
        InitVect_in[i + 1] = SourceIEEEAddress[i];
     f14:	79da      	ldrb	r2, [r3, #7]
     f16:	7222      	strb	r2, [r4, #8]
        cbc_header_with_padding[i + 7] = SourceIEEEAddress[i];
     f18:	79db      	ldrb	r3, [r3, #7]
     f1a:	2204      	movs	r2, #4
     f1c:	73bb      	strb	r3, [r7, #14]
     f1e:	4b52      	ldr	r3, [pc, #328]	; (1068 <mic_generator+0x1c0>)
     f20:	4798      	blx	r3
     f22:	ab02      	add	r3, sp, #8
     f24:	469c      	mov	ip, r3
     f26:	200b      	movs	r0, #11
     f28:	2204      	movs	r2, #4
     f2a:	4460      	add	r0, ip
     f2c:	a903      	add	r1, sp, #12
     f2e:	4b4e      	ldr	r3, [pc, #312]	; (1068 <mic_generator+0x1c0>)
     f30:	4798      	blx	r3
    InitVect_in[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
     f32:	2304      	movs	r3, #4
     f34:	7363      	strb	r3, [r4, #13]
    InitVect_in[15] = len; // For MIC calculation All preceding blocks will be incremented by 1
     f36:	466b      	mov	r3, sp
     f38:	791b      	ldrb	r3, [r3, #4]
    sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
     f3a:	2200      	movs	r2, #0
    InitVect_in[15] = len; // For MIC calculation All preceding blocks will be incremented by 1
     f3c:	73e3      	strb	r3, [r4, #15]
    sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
     f3e:	4b4b      	ldr	r3, [pc, #300]	; (106c <mic_generator+0x1c4>)
     f40:	2100      	movs	r1, #0
     f42:	0018      	movs	r0, r3
     f44:	4698      	mov	r8, r3
     f46:	4b4a      	ldr	r3, [pc, #296]	; (1070 <mic_generator+0x1c8>)
    cbc_header_with_padding[15] = 0x00; // Padding
     f48:	73fd      	strb	r5, [r7, #15]
    InitVect_in[14] = 0x00; // 15 th byte padded to zero
     f4a:	73a5      	strb	r5, [r4, #14]
    sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
     f4c:	4699      	mov	r9, r3
     f4e:	4798      	blx	r3
    sal_aes_wrrd(text, NULL);
     f50:	4b48      	ldr	r3, [pc, #288]	; (1074 <mic_generator+0x1cc>)
     f52:	2100      	movs	r1, #0
     f54:	0020      	movs	r0, r4
     f56:	469a      	mov	sl, r3
     f58:	4798      	blx	r3
    sal_aes_read(text);
     f5a:	4b47      	ldr	r3, [pc, #284]	; (1078 <mic_generator+0x1d0>)
     f5c:	0020      	movs	r0, r4
     f5e:	ad08      	add	r5, sp, #32
     f60:	469b      	mov	fp, r3
     f62:	4798      	blx	r3
     f64:	0039      	movs	r1, r7
     f66:	4b40      	ldr	r3, [pc, #256]	; (1068 <mic_generator+0x1c0>)
     f68:	2210      	movs	r2, #16
     f6a:	0028      	movs	r0, r5
     f6c:	4798      	blx	r3
    for (i = 16; i < len + AES_BLOCKSIZE; i++) {
     f6e:	9901      	ldr	r1, [sp, #4]
     f70:	2010      	movs	r0, #16
     f72:	310f      	adds	r1, #15
     f74:	2310      	movs	r3, #16
     f76:	290f      	cmp	r1, #15
     f78:	d009      	beq.n	f8e <mic_generator+0xe6>
     f7a:	9f02      	ldr	r7, [sp, #8]
        copy_packet[i] = Payloadinfo[i - AES_BLOCKSIZE]; // Copying the Payload
     f7c:	18fa      	adds	r2, r7, r3
     f7e:	3a10      	subs	r2, #16
     f80:	7812      	ldrb	r2, [r2, #0]
    for (i = 16; i < len + AES_BLOCKSIZE; i++) {
     f82:	3301      	adds	r3, #1
     f84:	b2db      	uxtb	r3, r3
        copy_packet[i] = Payloadinfo[i - AES_BLOCKSIZE]; // Copying the Payload
     f86:	542a      	strb	r2, [r5, r0]
    for (i = 16; i < len + AES_BLOCKSIZE; i++) {
     f88:	0018      	movs	r0, r3
     f8a:	428b      	cmp	r3, r1
     f8c:	ddf6      	ble.n	f7c <mic_generator+0xd4>
    for (i = len + 16; i < (iterations * AES_BLOCKSIZE) + AES_BLOCKSIZE; i++) {
     f8e:	9b01      	ldr	r3, [sp, #4]
     f90:	1c72      	adds	r2, r6, #1
     f92:	3310      	adds	r3, #16
     f94:	b2db      	uxtb	r3, r3
     f96:	0112      	lsls	r2, r2, #4
        copy_packet[i] = 0; // Padding
     f98:	2100      	movs	r1, #0
    for (i = len + 16; i < (iterations * AES_BLOCKSIZE) + AES_BLOCKSIZE; i++) {
     f9a:	4293      	cmp	r3, r2
     f9c:	da04      	bge.n	fa8 <mic_generator+0x100>
        copy_packet[i] = 0; // Padding
     f9e:	54e9      	strb	r1, [r5, r3]
    for (i = len + 16; i < (iterations * AES_BLOCKSIZE) + AES_BLOCKSIZE; i++) {
     fa0:	3301      	adds	r3, #1
     fa2:	b2db      	uxtb	r3, r3
     fa4:	4293      	cmp	r3, r2
     fa6:	dbfa      	blt.n	f9e <mic_generator+0xf6>
    for (i = 16; i < len + AES_BLOCKSIZE; i++) {
     fa8:	2300      	movs	r3, #0
     faa:	2700      	movs	r7, #0
            InitVect_in[j] = InitVect_in[j] ^ copy_packet[j + (i * 16)];
     fac:	011b      	lsls	r3, r3, #4
     fae:	5ce9      	ldrb	r1, [r5, r3]
     fb0:	7822      	ldrb	r2, [r4, #0]
     fb2:	18eb      	adds	r3, r5, r3
     fb4:	404a      	eors	r2, r1
     fb6:	7022      	strb	r2, [r4, #0]
     fb8:	7861      	ldrb	r1, [r4, #1]
     fba:	785a      	ldrb	r2, [r3, #1]
    sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
     fbc:	4640      	mov	r0, r8
            InitVect_in[j] = InitVect_in[j] ^ copy_packet[j + (i * 16)];
     fbe:	404a      	eors	r2, r1
     fc0:	7062      	strb	r2, [r4, #1]
     fc2:	78a1      	ldrb	r1, [r4, #2]
     fc4:	789a      	ldrb	r2, [r3, #2]
    for (i = 0; i < iterations + 1; i++) {
     fc6:	3701      	adds	r7, #1
            InitVect_in[j] = InitVect_in[j] ^ copy_packet[j + (i * 16)];
     fc8:	404a      	eors	r2, r1
     fca:	70a2      	strb	r2, [r4, #2]
     fcc:	78e1      	ldrb	r1, [r4, #3]
     fce:	78da      	ldrb	r2, [r3, #3]
    for (i = 0; i < iterations + 1; i++) {
     fd0:	b2ff      	uxtb	r7, r7
            InitVect_in[j] = InitVect_in[j] ^ copy_packet[j + (i * 16)];
     fd2:	404a      	eors	r2, r1
     fd4:	70e2      	strb	r2, [r4, #3]
     fd6:	7921      	ldrb	r1, [r4, #4]
     fd8:	791a      	ldrb	r2, [r3, #4]
     fda:	404a      	eors	r2, r1
     fdc:	7122      	strb	r2, [r4, #4]
     fde:	7961      	ldrb	r1, [r4, #5]
     fe0:	795a      	ldrb	r2, [r3, #5]
     fe2:	404a      	eors	r2, r1
     fe4:	7162      	strb	r2, [r4, #5]
     fe6:	79a1      	ldrb	r1, [r4, #6]
     fe8:	799a      	ldrb	r2, [r3, #6]
     fea:	404a      	eors	r2, r1
     fec:	71a2      	strb	r2, [r4, #6]
     fee:	79e1      	ldrb	r1, [r4, #7]
     ff0:	79da      	ldrb	r2, [r3, #7]
     ff2:	404a      	eors	r2, r1
     ff4:	71e2      	strb	r2, [r4, #7]
     ff6:	7a21      	ldrb	r1, [r4, #8]
     ff8:	7a1a      	ldrb	r2, [r3, #8]
     ffa:	404a      	eors	r2, r1
     ffc:	7222      	strb	r2, [r4, #8]
     ffe:	7a61      	ldrb	r1, [r4, #9]
    1000:	7a5a      	ldrb	r2, [r3, #9]
    1002:	404a      	eors	r2, r1
    1004:	7262      	strb	r2, [r4, #9]
    1006:	7aa1      	ldrb	r1, [r4, #10]
    1008:	7a9a      	ldrb	r2, [r3, #10]
    100a:	404a      	eors	r2, r1
    100c:	72a2      	strb	r2, [r4, #10]
    100e:	7ae1      	ldrb	r1, [r4, #11]
    1010:	7ada      	ldrb	r2, [r3, #11]
    1012:	404a      	eors	r2, r1
    1014:	72e2      	strb	r2, [r4, #11]
    1016:	7b21      	ldrb	r1, [r4, #12]
    1018:	7b1a      	ldrb	r2, [r3, #12]
    101a:	404a      	eors	r2, r1
    101c:	7322      	strb	r2, [r4, #12]
    101e:	7b61      	ldrb	r1, [r4, #13]
    1020:	7b5a      	ldrb	r2, [r3, #13]
    1022:	404a      	eors	r2, r1
    1024:	7362      	strb	r2, [r4, #13]
    1026:	7ba1      	ldrb	r1, [r4, #14]
    1028:	7b9a      	ldrb	r2, [r3, #14]
    102a:	7bdb      	ldrb	r3, [r3, #15]
    102c:	404a      	eors	r2, r1
    102e:	73a2      	strb	r2, [r4, #14]
    1030:	7be2      	ldrb	r2, [r4, #15]
    sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    1032:	2100      	movs	r1, #0
            InitVect_in[j] = InitVect_in[j] ^ copy_packet[j + (i * 16)];
    1034:	4053      	eors	r3, r2
    sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    1036:	2200      	movs	r2, #0
            InitVect_in[j] = InitVect_in[j] ^ copy_packet[j + (i * 16)];
    1038:	73e3      	strb	r3, [r4, #15]
    sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    103a:	47c8      	blx	r9
    sal_aes_wrrd(text, NULL);
    103c:	2100      	movs	r1, #0
    103e:	0020      	movs	r0, r4
    1040:	47d0      	blx	sl
    sal_aes_read(text);
    1042:	0020      	movs	r0, r4
    1044:	47d8      	blx	fp
    for (i = 0; i < iterations + 1; i++) {
    1046:	003b      	movs	r3, r7
    1048:	42b7      	cmp	r7, r6
    104a:	ddaf      	ble.n	fac <mic_generator+0x104>
    104c:	2210      	movs	r2, #16
    104e:	0021      	movs	r1, r4
    1050:	4b05      	ldr	r3, [pc, #20]	; (1068 <mic_generator+0x1c0>)
    1052:	480a      	ldr	r0, [pc, #40]	; (107c <mic_generator+0x1d4>)
    1054:	4798      	blx	r3
}
    1056:	b029      	add	sp, #164	; 0xa4
    1058:	bc3c      	pop	{r2, r3, r4, r5}
    105a:	4690      	mov	r8, r2
    105c:	4699      	mov	r9, r3
    105e:	46a2      	mov	sl, r4
    1060:	46ab      	mov	fp, r5
    1062:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1064:	200002a8 	.word	0x200002a8
    1068:	00007d91 	.word	0x00007d91
    106c:	20000004 	.word	0x20000004
    1070:	00002db9 	.word	0x00002db9
    1074:	00002f35 	.word	0x00002f35
    1078:	00002fa9 	.word	0x00002fa9
    107c:	200008f8 	.word	0x200008f8

00001080 <DataEncrypt>:
{
    1080:	b5f0      	push	{r4, r5, r6, r7, lr}
    1082:	4657      	mov	r7, sl
    1084:	464e      	mov	r6, r9
    1086:	46de      	mov	lr, fp
    1088:	4645      	mov	r5, r8
    108a:	b5e0      	push	{r5, r6, r7, lr}
    108c:	000f      	movs	r7, r1
    iterations = *Payload_len / AES_BLOCKSIZE;
    108e:	7809      	ldrb	r1, [r1, #0]
{
    1090:	b091      	sub	sp, #68	; 0x44
    1092:	0014      	movs	r4, r2
    1094:	001a      	movs	r2, r3
    iterations = *Payload_len / AES_BLOCKSIZE;
    1096:	090b      	lsrs	r3, r1, #4
{
    1098:	9007      	str	r0, [sp, #28]
    iterations = *Payload_len / AES_BLOCKSIZE;
    109a:	4699      	mov	r9, r3
    if (*Payload_len % AES_BLOCKSIZE != 0)
    109c:	070b      	lsls	r3, r1, #28
    109e:	d002      	beq.n	10a6 <DataEncrypt+0x26>
        iterations++;
    10a0:	2301      	movs	r3, #1
    10a2:	469c      	mov	ip, r3
    10a4:	44e1      	add	r9, ip
    mic_generator(&Payloadinfo[0], *Payload_len, FrameControl, FrameCounter, MACInitParams.PAddress);
    10a6:	4d9d      	ldr	r5, [pc, #628]	; (131c <DataEncrypt+0x29c>)
    10a8:	4e9d      	ldr	r6, [pc, #628]	; (1320 <DataEncrypt+0x2a0>)
    10aa:	686b      	ldr	r3, [r5, #4]
    10ac:	9300      	str	r3, [sp, #0]
    10ae:	0023      	movs	r3, r4
    10b0:	47b0      	blx	r6
    for (i = *Payload_len; i < iterations * AES_BLOCKSIZE; i++) {
    10b2:	464a      	mov	r2, r9
    10b4:	783b      	ldrb	r3, [r7, #0]
    10b6:	0112      	lsls	r2, r2, #4
        Payloadinfo[i] = 0; // Padding
    10b8:	2100      	movs	r1, #0
    for (i = *Payload_len; i < iterations * AES_BLOCKSIZE; i++) {
    10ba:	429a      	cmp	r2, r3
    10bc:	dd06      	ble.n	10cc <DataEncrypt+0x4c>
    10be:	9e07      	ldr	r6, [sp, #28]
        Payloadinfo[i] = 0; // Padding
    10c0:	54f1      	strb	r1, [r6, r3]
    for (i = *Payload_len; i < iterations * AES_BLOCKSIZE; i++) {
    10c2:	3301      	adds	r3, #1
    10c4:	b2db      	uxtb	r3, r3
    10c6:	4293      	cmp	r3, r2
    10c8:	dbfa      	blt.n	10c0 <DataEncrypt+0x40>
    10ca:	9607      	str	r6, [sp, #28]
    CTR_Nonce_and_Counter[0] = 0x01; // L
    10cc:	2301      	movs	r3, #1
    10ce:	af0c      	add	r7, sp, #48	; 0x30
    10d0:	703b      	strb	r3, [r7, #0]
    10d2:	ab06      	add	r3, sp, #24
    10d4:	469c      	mov	ip, r3
    10d6:	2019      	movs	r0, #25
    10d8:	6869      	ldr	r1, [r5, #4]
    10da:	2208      	movs	r2, #8
    10dc:	4460      	add	r0, ip
    10de:	4b91      	ldr	r3, [pc, #580]	; (1324 <DataEncrypt+0x2a4>)
    10e0:	4798      	blx	r3
        CTR_Nonce_and_Counter[i + 9] = FrameCounter.v[i];
    10e2:	0423      	lsls	r3, r4, #16
    10e4:	0221      	lsls	r1, r4, #8
    10e6:	0e1b      	lsrs	r3, r3, #24
    10e8:	9304      	str	r3, [sp, #16]
    10ea:	0e0b      	lsrs	r3, r1, #24
    10ec:	001e      	movs	r6, r3
    10ee:	0e23      	lsrs	r3, r4, #24
    10f0:	9303      	str	r3, [sp, #12]
    10f2:	787b      	ldrb	r3, [r7, #1]
    10f4:	79b8      	ldrb	r0, [r7, #6]
    10f6:	469b      	mov	fp, r3
    10f8:	78bb      	ldrb	r3, [r7, #2]
    10fa:	79f9      	ldrb	r1, [r7, #7]
    10fc:	469a      	mov	sl, r3
    10fe:	78fb      	ldrb	r3, [r7, #3]
    1100:	b2e2      	uxtb	r2, r4
    1102:	469c      	mov	ip, r3
    1104:	7a3b      	ldrb	r3, [r7, #8]
    1106:	797c      	ldrb	r4, [r7, #5]
    1108:	9302      	str	r3, [sp, #8]
    110a:	2300      	movs	r3, #0
    110c:	4698      	mov	r8, r3
    110e:	465b      	mov	r3, fp
    1110:	021b      	lsls	r3, r3, #8
    1112:	469b      	mov	fp, r3
    1114:	0212      	lsls	r2, r2, #8
    1116:	9206      	str	r2, [sp, #24]
    1118:	9a04      	ldr	r2, [sp, #16]
    111a:	4653      	mov	r3, sl
    111c:	0412      	lsls	r2, r2, #16
    111e:	9204      	str	r2, [sp, #16]
    1120:	0632      	lsls	r2, r6, #24
    1122:	9205      	str	r2, [sp, #20]
    1124:	4a80      	ldr	r2, [pc, #512]	; (1328 <DataEncrypt+0x2a8>)
            block[j] = CTR_Nonce_and_Counter[j];
    1126:	2601      	movs	r6, #1
    1128:	4692      	mov	sl, r2
    112a:	465a      	mov	r2, fp
    112c:	4665      	mov	r5, ip
    112e:	4332      	orrs	r2, r6
    1130:	041b      	lsls	r3, r3, #16
    1132:	4313      	orrs	r3, r2
    1134:	062d      	lsls	r5, r5, #24
    1136:	469b      	mov	fp, r3
    1138:	46ac      	mov	ip, r5
    113a:	0224      	lsls	r4, r4, #8
    113c:	0025      	movs	r5, r4
    113e:	465a      	mov	r2, fp
    1140:	4663      	mov	r3, ip
    1142:	793f      	ldrb	r7, [r7, #4]
    1144:	0400      	lsls	r0, r0, #16
    1146:	432f      	orrs	r7, r5
    1148:	0609      	lsls	r1, r1, #24
    114a:	4307      	orrs	r7, r0
    114c:	4313      	orrs	r3, r2
    114e:	430f      	orrs	r7, r1
    1150:	469b      	mov	fp, r3
    1152:	003b      	movs	r3, r7
    1154:	2500      	movs	r5, #0
    1156:	4647      	mov	r7, r8
    1158:	4698      	mov	r8, r3
    115a:	9e07      	ldr	r6, [sp, #28]
    115c:	ac08      	add	r4, sp, #32
    115e:	465b      	mov	r3, fp
    1160:	9308      	str	r3, [sp, #32]
    1162:	4643      	mov	r3, r8
    1164:	9a06      	ldr	r2, [sp, #24]
    1166:	9309      	str	r3, [sp, #36]	; 0x24
    1168:	9b02      	ldr	r3, [sp, #8]
    sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    116a:	2100      	movs	r1, #0
            block[j] = CTR_Nonce_and_Counter[j];
    116c:	4313      	orrs	r3, r2
    116e:	9a04      	ldr	r2, [sp, #16]
    sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    1170:	486e      	ldr	r0, [pc, #440]	; (132c <DataEncrypt+0x2ac>)
            block[j] = CTR_Nonce_and_Counter[j];
    1172:	4313      	orrs	r3, r2
    1174:	9a05      	ldr	r2, [sp, #20]
    1176:	73e7      	strb	r7, [r4, #15]
    1178:	4313      	orrs	r3, r2
    117a:	930a      	str	r3, [sp, #40]	; 0x28
    117c:	466b      	mov	r3, sp
    117e:	7b1b      	ldrb	r3, [r3, #12]
    sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    1180:	2200      	movs	r2, #0
            block[j] = CTR_Nonce_and_Counter[j];
    1182:	7323      	strb	r3, [r4, #12]
    1184:	2304      	movs	r3, #4
    1186:	7363      	strb	r3, [r4, #13]
    1188:	2300      	movs	r3, #0
    118a:	73a3      	strb	r3, [r4, #14]
    sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    118c:	4b68      	ldr	r3, [pc, #416]	; (1330 <DataEncrypt+0x2b0>)
    118e:	4798      	blx	r3
    sal_aes_wrrd(text, NULL);
    1190:	0020      	movs	r0, r4
    1192:	2100      	movs	r1, #0
    1194:	4b67      	ldr	r3, [pc, #412]	; (1334 <DataEncrypt+0x2b4>)
    1196:	4798      	blx	r3
    sal_aes_read(text);
    1198:	0020      	movs	r0, r4
    119a:	47d0      	blx	sl
            if (CTR_Nonce_and_Counter[15] == 0) {
    119c:	2f00      	cmp	r7, #0
    119e:	d147      	bne.n	1230 <DataEncrypt+0x1b0>
                final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    11a0:	4a65      	ldr	r2, [pc, #404]	; (1338 <DataEncrypt+0x2b8>)
    11a2:	7821      	ldrb	r1, [r4, #0]
    11a4:	7810      	ldrb	r0, [r2, #0]
    11a6:	4b65      	ldr	r3, [pc, #404]	; (133c <DataEncrypt+0x2bc>)
    11a8:	4041      	eors	r1, r0
    11aa:	7019      	strb	r1, [r3, #0]
    11ac:	7850      	ldrb	r0, [r2, #1]
    11ae:	7861      	ldrb	r1, [r4, #1]
    11b0:	4041      	eors	r1, r0
    11b2:	7059      	strb	r1, [r3, #1]
    11b4:	7890      	ldrb	r0, [r2, #2]
    11b6:	78a1      	ldrb	r1, [r4, #2]
    11b8:	4041      	eors	r1, r0
    11ba:	7099      	strb	r1, [r3, #2]
    11bc:	78d0      	ldrb	r0, [r2, #3]
    11be:	78e1      	ldrb	r1, [r4, #3]
    11c0:	4041      	eors	r1, r0
    11c2:	70d9      	strb	r1, [r3, #3]
    11c4:	7910      	ldrb	r0, [r2, #4]
    11c6:	7921      	ldrb	r1, [r4, #4]
    11c8:	4041      	eors	r1, r0
    11ca:	7119      	strb	r1, [r3, #4]
    11cc:	7950      	ldrb	r0, [r2, #5]
    11ce:	7961      	ldrb	r1, [r4, #5]
    11d0:	4041      	eors	r1, r0
    11d2:	7159      	strb	r1, [r3, #5]
    11d4:	7990      	ldrb	r0, [r2, #6]
    11d6:	79a1      	ldrb	r1, [r4, #6]
    11d8:	4041      	eors	r1, r0
    11da:	7199      	strb	r1, [r3, #6]
    11dc:	79d0      	ldrb	r0, [r2, #7]
    11de:	79e1      	ldrb	r1, [r4, #7]
    11e0:	4041      	eors	r1, r0
    11e2:	71d9      	strb	r1, [r3, #7]
    11e4:	7a10      	ldrb	r0, [r2, #8]
    11e6:	7a21      	ldrb	r1, [r4, #8]
    11e8:	4041      	eors	r1, r0
    11ea:	7219      	strb	r1, [r3, #8]
    11ec:	7a50      	ldrb	r0, [r2, #9]
    11ee:	7a61      	ldrb	r1, [r4, #9]
    11f0:	4041      	eors	r1, r0
    11f2:	7259      	strb	r1, [r3, #9]
    11f4:	7aa1      	ldrb	r1, [r4, #10]
    11f6:	7a90      	ldrb	r0, [r2, #10]
    11f8:	4041      	eors	r1, r0
    11fa:	7299      	strb	r1, [r3, #10]
    11fc:	7ad0      	ldrb	r0, [r2, #11]
    11fe:	7ae1      	ldrb	r1, [r4, #11]
    1200:	4041      	eors	r1, r0
    1202:	72d9      	strb	r1, [r3, #11]
    1204:	7b10      	ldrb	r0, [r2, #12]
    1206:	7b21      	ldrb	r1, [r4, #12]
    1208:	4041      	eors	r1, r0
    120a:	7319      	strb	r1, [r3, #12]
    120c:	7b50      	ldrb	r0, [r2, #13]
    120e:	7b61      	ldrb	r1, [r4, #13]
    1210:	4041      	eors	r1, r0
    1212:	7359      	strb	r1, [r3, #13]
    1214:	7b90      	ldrb	r0, [r2, #14]
    1216:	7ba1      	ldrb	r1, [r4, #14]
    1218:	4041      	eors	r1, r0
    121a:	7399      	strb	r1, [r3, #14]
    121c:	7be1      	ldrb	r1, [r4, #15]
    121e:	7bd2      	ldrb	r2, [r2, #15]
    1220:	404a      	eors	r2, r1
    1222:	73da      	strb	r2, [r3, #15]
    for (i = 0; i < iterations + 1; i++) {
    1224:	464b      	mov	r3, r9
    1226:	2b00      	cmp	r3, #0
    1228:	d070      	beq.n	130c <DataEncrypt+0x28c>
    122a:	2501      	movs	r5, #1
    122c:	2701      	movs	r7, #1
    122e:	e796      	b.n	115e <DataEncrypt+0xde>
                Payloadinfo[j + (i - 1) * AES_BLOCKSIZE] = block[j] ^ Payloadinfo[j + (i - 1) * AES_BLOCKSIZE];
    1230:	3d01      	subs	r5, #1
    1232:	012d      	lsls	r5, r5, #4
    1234:	1972      	adds	r2, r6, r5
    1236:	7811      	ldrb	r1, [r2, #0]
    1238:	7823      	ldrb	r3, [r4, #0]
    for (i = 0; i < iterations + 1; i++) {
    123a:	3701      	adds	r7, #1
                Payloadinfo[j + (i - 1) * AES_BLOCKSIZE] = block[j] ^ Payloadinfo[j + (i - 1) * AES_BLOCKSIZE];
    123c:	404b      	eors	r3, r1
    123e:	7013      	strb	r3, [r2, #0]
    1240:	1c6b      	adds	r3, r5, #1
    1242:	18f3      	adds	r3, r6, r3
    1244:	7819      	ldrb	r1, [r3, #0]
    1246:	7862      	ldrb	r2, [r4, #1]
    for (i = 0; i < iterations + 1; i++) {
    1248:	b2ff      	uxtb	r7, r7
                Payloadinfo[j + (i - 1) * AES_BLOCKSIZE] = block[j] ^ Payloadinfo[j + (i - 1) * AES_BLOCKSIZE];
    124a:	404a      	eors	r2, r1
    124c:	701a      	strb	r2, [r3, #0]
    124e:	1cab      	adds	r3, r5, #2
    1250:	18f3      	adds	r3, r6, r3
    1252:	7819      	ldrb	r1, [r3, #0]
    1254:	78a2      	ldrb	r2, [r4, #2]
    1256:	404a      	eors	r2, r1
    1258:	701a      	strb	r2, [r3, #0]
    125a:	1ceb      	adds	r3, r5, #3
    125c:	18f3      	adds	r3, r6, r3
    125e:	7819      	ldrb	r1, [r3, #0]
    1260:	78e2      	ldrb	r2, [r4, #3]
    1262:	404a      	eors	r2, r1
    1264:	701a      	strb	r2, [r3, #0]
    1266:	1d2b      	adds	r3, r5, #4
    1268:	18f3      	adds	r3, r6, r3
    126a:	7819      	ldrb	r1, [r3, #0]
    126c:	7922      	ldrb	r2, [r4, #4]
    126e:	404a      	eors	r2, r1
    1270:	701a      	strb	r2, [r3, #0]
    1272:	1d6b      	adds	r3, r5, #5
    1274:	18f3      	adds	r3, r6, r3
    1276:	7819      	ldrb	r1, [r3, #0]
    1278:	7962      	ldrb	r2, [r4, #5]
    127a:	404a      	eors	r2, r1
    127c:	701a      	strb	r2, [r3, #0]
    127e:	1dab      	adds	r3, r5, #6
    1280:	18f3      	adds	r3, r6, r3
    1282:	7819      	ldrb	r1, [r3, #0]
    1284:	79a2      	ldrb	r2, [r4, #6]
    1286:	404a      	eors	r2, r1
    1288:	701a      	strb	r2, [r3, #0]
    128a:	1deb      	adds	r3, r5, #7
    128c:	18f3      	adds	r3, r6, r3
    128e:	7819      	ldrb	r1, [r3, #0]
    1290:	79e2      	ldrb	r2, [r4, #7]
    1292:	404a      	eors	r2, r1
    1294:	701a      	strb	r2, [r3, #0]
    1296:	002b      	movs	r3, r5
    1298:	3308      	adds	r3, #8
    129a:	18f3      	adds	r3, r6, r3
    129c:	7819      	ldrb	r1, [r3, #0]
    129e:	7a22      	ldrb	r2, [r4, #8]
    12a0:	404a      	eors	r2, r1
    12a2:	701a      	strb	r2, [r3, #0]
    12a4:	002b      	movs	r3, r5
    12a6:	3309      	adds	r3, #9
    12a8:	18f3      	adds	r3, r6, r3
    12aa:	7819      	ldrb	r1, [r3, #0]
    12ac:	7a62      	ldrb	r2, [r4, #9]
    12ae:	404a      	eors	r2, r1
    12b0:	701a      	strb	r2, [r3, #0]
    12b2:	002b      	movs	r3, r5
    12b4:	330a      	adds	r3, #10
    12b6:	18f3      	adds	r3, r6, r3
    12b8:	7819      	ldrb	r1, [r3, #0]
    12ba:	7aa2      	ldrb	r2, [r4, #10]
    12bc:	404a      	eors	r2, r1
    12be:	701a      	strb	r2, [r3, #0]
    12c0:	002b      	movs	r3, r5
    12c2:	330b      	adds	r3, #11
    12c4:	18f3      	adds	r3, r6, r3
    12c6:	7819      	ldrb	r1, [r3, #0]
    12c8:	7ae2      	ldrb	r2, [r4, #11]
    12ca:	404a      	eors	r2, r1
    12cc:	701a      	strb	r2, [r3, #0]
    12ce:	002b      	movs	r3, r5
    12d0:	330c      	adds	r3, #12
    12d2:	18f3      	adds	r3, r6, r3
    12d4:	7819      	ldrb	r1, [r3, #0]
    12d6:	7b22      	ldrb	r2, [r4, #12]
    12d8:	404a      	eors	r2, r1
    12da:	701a      	strb	r2, [r3, #0]
    12dc:	002b      	movs	r3, r5
    12de:	330d      	adds	r3, #13
    12e0:	18f3      	adds	r3, r6, r3
    12e2:	7819      	ldrb	r1, [r3, #0]
    12e4:	7b62      	ldrb	r2, [r4, #13]
    12e6:	404a      	eors	r2, r1
    12e8:	701a      	strb	r2, [r3, #0]
    12ea:	002b      	movs	r3, r5
    12ec:	330e      	adds	r3, #14
    12ee:	18f3      	adds	r3, r6, r3
    12f0:	7819      	ldrb	r1, [r3, #0]
    12f2:	7ba2      	ldrb	r2, [r4, #14]
    12f4:	350f      	adds	r5, #15
    12f6:	404a      	eors	r2, r1
    12f8:	701a      	strb	r2, [r3, #0]
    12fa:	1975      	adds	r5, r6, r5
    12fc:	782a      	ldrb	r2, [r5, #0]
    12fe:	7be3      	ldrb	r3, [r4, #15]
    1300:	4053      	eors	r3, r2
    1302:	702b      	strb	r3, [r5, #0]
    for (i = 0; i < iterations + 1; i++) {
    1304:	003d      	movs	r5, r7
    1306:	45b9      	cmp	r9, r7
    1308:	db00      	blt.n	130c <DataEncrypt+0x28c>
    130a:	e728      	b.n	115e <DataEncrypt+0xde>
}
    130c:	2001      	movs	r0, #1
    130e:	b011      	add	sp, #68	; 0x44
    1310:	bc3c      	pop	{r2, r3, r4, r5}
    1312:	4690      	mov	r8, r2
    1314:	4699      	mov	r9, r3
    1316:	46a2      	mov	sl, r4
    1318:	46ab      	mov	fp, r5
    131a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    131c:	200002a0 	.word	0x200002a0
    1320:	00000ea9 	.word	0x00000ea9
    1324:	00007d91 	.word	0x00007d91
    1328:	00002fa9 	.word	0x00002fa9
    132c:	20000004 	.word	0x20000004
    1330:	00002db9 	.word	0x00002db9
    1334:	00002f35 	.word	0x00002f35
    1338:	200008f8 	.word	0x200008f8
    133c:	200002cc 	.word	0x200002cc

00001340 <DataDecrypt>:
{
    1340:	b5f0      	push	{r4, r5, r6, r7, lr}
    1342:	4657      	mov	r7, sl
    1344:	46de      	mov	lr, fp
    1346:	464e      	mov	r6, r9
    1348:	4645      	mov	r5, r8
    134a:	b5e0      	push	{r5, r6, r7, lr}
    134c:	b095      	sub	sp, #84	; 0x54
    134e:	9308      	str	r3, [sp, #32]
    1350:	ab1e      	add	r3, sp, #120	; 0x78
    1352:	781b      	ldrb	r3, [r3, #0]
    1354:	9207      	str	r2, [sp, #28]
    1356:	930a      	str	r3, [sp, #40]	; 0x28
    iterations = *PayloadLen / 16;
    1358:	780b      	ldrb	r3, [r1, #0]
{
    135a:	0007      	movs	r7, r0
    iterations = *PayloadLen / 16;
    135c:	091a      	lsrs	r2, r3, #4
{
    135e:	9109      	str	r1, [sp, #36]	; 0x24
    iterations = *PayloadLen / 16;
    1360:	4692      	mov	sl, r2
    if (*PayloadLen % AES_BLOCKSIZE != 0)
    1362:	071a      	lsls	r2, r3, #28
    1364:	d002      	beq.n	136c <DataDecrypt+0x2c>
        iterations++;
    1366:	2201      	movs	r2, #1
    1368:	4694      	mov	ip, r2
    136a:	44e2      	add	sl, ip
    for (i = *PayloadLen; i < iterations * AES_BLOCKSIZE; i++) {
    136c:	4652      	mov	r2, sl
        Payload[i] = 0; // Padding
    136e:	2100      	movs	r1, #0
    for (i = *PayloadLen; i < iterations * AES_BLOCKSIZE; i++) {
    1370:	0112      	lsls	r2, r2, #4
    1372:	429a      	cmp	r2, r3
    1374:	dd04      	ble.n	1380 <DataDecrypt+0x40>
        Payload[i] = 0; // Padding
    1376:	54f9      	strb	r1, [r7, r3]
    for (i = *PayloadLen; i < iterations * AES_BLOCKSIZE; i++) {
    1378:	3301      	adds	r3, #1
    137a:	b2db      	uxtb	r3, r3
    137c:	4293      	cmp	r3, r2
    137e:	dbfa      	blt.n	1376 <DataDecrypt+0x36>
    CTR_Nonce_and_Counter[0] = 0x01; // L
    1380:	2301      	movs	r3, #1
    1382:	4698      	mov	r8, r3
    1384:	ab0a      	add	r3, sp, #40	; 0x28
    1386:	469c      	mov	ip, r3
    1388:	4642      	mov	r2, r8
    138a:	2019      	movs	r0, #25
    138c:	761a      	strb	r2, [r3, #24]
    138e:	9907      	ldr	r1, [sp, #28]
    1390:	2208      	movs	r2, #8
    1392:	4460      	add	r0, ip
    1394:	4bd0      	ldr	r3, [pc, #832]	; (16d8 <DataDecrypt+0x398>)
    1396:	4798      	blx	r3
        CTR_Nonce_and_Counter[i + 9] = FrameCounter.v[i];
    1398:	9908      	ldr	r1, [sp, #32]
    139a:	2620      	movs	r6, #32
    139c:	040a      	lsls	r2, r1, #16
    139e:	0e12      	lsrs	r2, r2, #24
    13a0:	9205      	str	r2, [sp, #20]
    13a2:	020a      	lsls	r2, r1, #8
    13a4:	b2cb      	uxtb	r3, r1
    13a6:	0e10      	lsrs	r0, r2, #24
    13a8:	0e09      	lsrs	r1, r1, #24
    13aa:	9006      	str	r0, [sp, #24]
    13ac:	9103      	str	r1, [sp, #12]
    13ae:	a90a      	add	r1, sp, #40	; 0x28
    13b0:	7e49      	ldrb	r1, [r1, #25]
    13b2:	ad0a      	add	r5, sp, #40	; 0x28
    13b4:	468b      	mov	fp, r1
    13b6:	a90a      	add	r1, sp, #40	; 0x28
    13b8:	7e89      	ldrb	r1, [r1, #26]
    13ba:	7fea      	ldrb	r2, [r5, #31]
    13bc:	19ad      	adds	r5, r5, r6
    13be:	782d      	ldrb	r5, [r5, #0]
    13c0:	468c      	mov	ip, r1
    13c2:	a90a      	add	r1, sp, #40	; 0x28
    13c4:	7ecc      	ldrb	r4, [r1, #27]
    13c6:	7f48      	ldrb	r0, [r1, #29]
    13c8:	7f89      	ldrb	r1, [r1, #30]
    13ca:	9502      	str	r5, [sp, #8]
    13cc:	465d      	mov	r5, fp
    13ce:	022d      	lsls	r5, r5, #8
    13d0:	46ab      	mov	fp, r5
    13d2:	4665      	mov	r5, ip
    13d4:	042d      	lsls	r5, r5, #16
    13d6:	46ac      	mov	ip, r5
    13d8:	021d      	lsls	r5, r3, #8
    13da:	9b05      	ldr	r3, [sp, #20]
    13dc:	9504      	str	r5, [sp, #16]
    13de:	041d      	lsls	r5, r3, #16
    13e0:	9b06      	ldr	r3, [sp, #24]
    13e2:	9505      	str	r5, [sp, #20]
    13e4:	061d      	lsls	r5, r3, #24
    13e6:	9506      	str	r5, [sp, #24]
            block[j] = CTR_Nonce_and_Counter[j];
    13e8:	4643      	mov	r3, r8
    13ea:	465d      	mov	r5, fp
    13ec:	432b      	orrs	r3, r5
    13ee:	469b      	mov	fp, r3
    13f0:	4663      	mov	r3, ip
    13f2:	465d      	mov	r5, fp
    13f4:	432b      	orrs	r3, r5
    13f6:	469b      	mov	fp, r3
    13f8:	465d      	mov	r5, fp
    13fa:	0624      	lsls	r4, r4, #24
    13fc:	940b      	str	r4, [sp, #44]	; 0x2c
    13fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1400:	0200      	lsls	r0, r0, #8
    1402:	432b      	orrs	r3, r5
    1404:	469b      	mov	fp, r3
    1406:	ab0a      	add	r3, sp, #40	; 0x28
    1408:	7f1b      	ldrb	r3, [r3, #28]
    140a:	0409      	lsls	r1, r1, #16
    140c:	4318      	orrs	r0, r3
        CTR_Nonce_and_Counter[i + 9] = FrameCounter.v[i];
    140e:	2600      	movs	r6, #0
    1410:	0612      	lsls	r2, r2, #24
            block[j] = CTR_Nonce_and_Counter[j];
    1412:	4301      	orrs	r1, r0
    1414:	4311      	orrs	r1, r2
    1416:	4688      	mov	r8, r1
    1418:	2500      	movs	r5, #0
        CTR_Nonce_and_Counter[i + 9] = FrameCounter.v[i];
    141a:	46b1      	mov	r9, r6
    141c:	4eaf      	ldr	r6, [pc, #700]	; (16dc <DataDecrypt+0x39c>)
    141e:	ac0c      	add	r4, sp, #48	; 0x30
            block[j] = CTR_Nonce_and_Counter[j];
    1420:	465b      	mov	r3, fp
    1422:	930c      	str	r3, [sp, #48]	; 0x30
    1424:	4643      	mov	r3, r8
    1426:	9a04      	ldr	r2, [sp, #16]
    1428:	930d      	str	r3, [sp, #52]	; 0x34
    142a:	9b02      	ldr	r3, [sp, #8]
    sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    142c:	2100      	movs	r1, #0
            block[j] = CTR_Nonce_and_Counter[j];
    142e:	4313      	orrs	r3, r2
    1430:	9a05      	ldr	r2, [sp, #20]
    sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    1432:	48ab      	ldr	r0, [pc, #684]	; (16e0 <DataDecrypt+0x3a0>)
            block[j] = CTR_Nonce_and_Counter[j];
    1434:	4313      	orrs	r3, r2
    1436:	9a06      	ldr	r2, [sp, #24]
    1438:	4313      	orrs	r3, r2
    143a:	930e      	str	r3, [sp, #56]	; 0x38
    143c:	466b      	mov	r3, sp
    143e:	7b1b      	ldrb	r3, [r3, #12]
    sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    1440:	2200      	movs	r2, #0
            block[j] = CTR_Nonce_and_Counter[j];
    1442:	7323      	strb	r3, [r4, #12]
    1444:	2304      	movs	r3, #4
    1446:	7363      	strb	r3, [r4, #13]
    1448:	2300      	movs	r3, #0
    144a:	73a3      	strb	r3, [r4, #14]
    144c:	464b      	mov	r3, r9
    144e:	73e3      	strb	r3, [r4, #15]
    sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    1450:	4ba4      	ldr	r3, [pc, #656]	; (16e4 <DataDecrypt+0x3a4>)
    1452:	4798      	blx	r3
    sal_aes_wrrd(text, NULL);
    1454:	2100      	movs	r1, #0
    1456:	0020      	movs	r0, r4
    1458:	4ba3      	ldr	r3, [pc, #652]	; (16e8 <DataDecrypt+0x3a8>)
    145a:	4798      	blx	r3
    sal_aes_read(text);
    145c:	4ba3      	ldr	r3, [pc, #652]	; (16ec <DataDecrypt+0x3ac>)
    145e:	0020      	movs	r0, r4
    1460:	4798      	blx	r3
            if (CTR_Nonce_and_Counter[15] == 0) {
    1462:	464b      	mov	r3, r9
    1464:	2b00      	cmp	r3, #0
    1466:	d126      	bne.n	14b6 <DataDecrypt+0x176>
                CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    1468:	7823      	ldrb	r3, [r4, #0]
    146a:	7033      	strb	r3, [r6, #0]
    146c:	7863      	ldrb	r3, [r4, #1]
    146e:	7073      	strb	r3, [r6, #1]
    1470:	78a3      	ldrb	r3, [r4, #2]
    1472:	70b3      	strb	r3, [r6, #2]
    1474:	78e3      	ldrb	r3, [r4, #3]
    1476:	70f3      	strb	r3, [r6, #3]
    1478:	7923      	ldrb	r3, [r4, #4]
    147a:	7133      	strb	r3, [r6, #4]
    147c:	7963      	ldrb	r3, [r4, #5]
    147e:	7173      	strb	r3, [r6, #5]
    1480:	79a3      	ldrb	r3, [r4, #6]
    1482:	71b3      	strb	r3, [r6, #6]
    1484:	79e3      	ldrb	r3, [r4, #7]
    1486:	71f3      	strb	r3, [r6, #7]
    1488:	7a23      	ldrb	r3, [r4, #8]
    148a:	7233      	strb	r3, [r6, #8]
    148c:	7a63      	ldrb	r3, [r4, #9]
    148e:	7273      	strb	r3, [r6, #9]
    1490:	7aa3      	ldrb	r3, [r4, #10]
    1492:	72b3      	strb	r3, [r6, #10]
    1494:	7ae3      	ldrb	r3, [r4, #11]
    1496:	72f3      	strb	r3, [r6, #11]
    1498:	7b23      	ldrb	r3, [r4, #12]
    149a:	7333      	strb	r3, [r6, #12]
    149c:	7b63      	ldrb	r3, [r4, #13]
    149e:	7373      	strb	r3, [r6, #13]
    14a0:	7ba3      	ldrb	r3, [r4, #14]
    14a2:	73b3      	strb	r3, [r6, #14]
    14a4:	7be3      	ldrb	r3, [r4, #15]
    14a6:	73f3      	strb	r3, [r6, #15]
    for (i = 0; i < iterations + 1; i++) {
    14a8:	4653      	mov	r3, sl
    14aa:	2b00      	cmp	r3, #0
    14ac:	d073      	beq.n	1596 <DataDecrypt+0x256>
    14ae:	2301      	movs	r3, #1
    14b0:	2501      	movs	r5, #1
    14b2:	4699      	mov	r9, r3
    14b4:	e7b4      	b.n	1420 <DataDecrypt+0xe0>
                Payload[j + (i - 1) * 16] = block[j] ^ Payload[j + (i - 1) * 16];
    14b6:	3d01      	subs	r5, #1
    14b8:	012d      	lsls	r5, r5, #4
    14ba:	197a      	adds	r2, r7, r5
    14bc:	7811      	ldrb	r1, [r2, #0]
    14be:	7823      	ldrb	r3, [r4, #0]
    14c0:	404b      	eors	r3, r1
    14c2:	7013      	strb	r3, [r2, #0]
    14c4:	1c6b      	adds	r3, r5, #1
    14c6:	18fb      	adds	r3, r7, r3
    14c8:	7819      	ldrb	r1, [r3, #0]
    14ca:	7862      	ldrb	r2, [r4, #1]
    14cc:	404a      	eors	r2, r1
    14ce:	701a      	strb	r2, [r3, #0]
    14d0:	1cab      	adds	r3, r5, #2
    14d2:	18fb      	adds	r3, r7, r3
    14d4:	7819      	ldrb	r1, [r3, #0]
    14d6:	78a2      	ldrb	r2, [r4, #2]
    14d8:	404a      	eors	r2, r1
    14da:	701a      	strb	r2, [r3, #0]
    14dc:	1ceb      	adds	r3, r5, #3
    14de:	18fb      	adds	r3, r7, r3
    14e0:	7819      	ldrb	r1, [r3, #0]
    14e2:	78e2      	ldrb	r2, [r4, #3]
    14e4:	404a      	eors	r2, r1
    14e6:	701a      	strb	r2, [r3, #0]
    14e8:	1d2b      	adds	r3, r5, #4
    14ea:	18fb      	adds	r3, r7, r3
    14ec:	7819      	ldrb	r1, [r3, #0]
    14ee:	7922      	ldrb	r2, [r4, #4]
    14f0:	404a      	eors	r2, r1
    14f2:	701a      	strb	r2, [r3, #0]
    14f4:	1d6b      	adds	r3, r5, #5
    14f6:	18fb      	adds	r3, r7, r3
    14f8:	7819      	ldrb	r1, [r3, #0]
    14fa:	7962      	ldrb	r2, [r4, #5]
    14fc:	404a      	eors	r2, r1
    14fe:	701a      	strb	r2, [r3, #0]
    1500:	1dab      	adds	r3, r5, #6
    1502:	18fb      	adds	r3, r7, r3
    1504:	7819      	ldrb	r1, [r3, #0]
    1506:	79a2      	ldrb	r2, [r4, #6]
    1508:	404a      	eors	r2, r1
    150a:	701a      	strb	r2, [r3, #0]
    150c:	1deb      	adds	r3, r5, #7
    150e:	18fb      	adds	r3, r7, r3
    1510:	7819      	ldrb	r1, [r3, #0]
    1512:	79e2      	ldrb	r2, [r4, #7]
    1514:	404a      	eors	r2, r1
    1516:	701a      	strb	r2, [r3, #0]
    1518:	002b      	movs	r3, r5
    151a:	3308      	adds	r3, #8
    151c:	18fb      	adds	r3, r7, r3
    151e:	7819      	ldrb	r1, [r3, #0]
    1520:	7a22      	ldrb	r2, [r4, #8]
    1522:	404a      	eors	r2, r1
    1524:	701a      	strb	r2, [r3, #0]
    1526:	002b      	movs	r3, r5
    1528:	3309      	adds	r3, #9
    152a:	18fb      	adds	r3, r7, r3
    152c:	7819      	ldrb	r1, [r3, #0]
    152e:	7a62      	ldrb	r2, [r4, #9]
    1530:	404a      	eors	r2, r1
    1532:	701a      	strb	r2, [r3, #0]
    1534:	002b      	movs	r3, r5
    1536:	330a      	adds	r3, #10
    1538:	18fb      	adds	r3, r7, r3
    153a:	7819      	ldrb	r1, [r3, #0]
    153c:	7aa2      	ldrb	r2, [r4, #10]
    153e:	404a      	eors	r2, r1
    1540:	701a      	strb	r2, [r3, #0]
    1542:	002b      	movs	r3, r5
    1544:	330b      	adds	r3, #11
    1546:	18fb      	adds	r3, r7, r3
    1548:	7819      	ldrb	r1, [r3, #0]
    154a:	7ae2      	ldrb	r2, [r4, #11]
    154c:	404a      	eors	r2, r1
    154e:	701a      	strb	r2, [r3, #0]
    1550:	002b      	movs	r3, r5
    1552:	330c      	adds	r3, #12
    1554:	18fb      	adds	r3, r7, r3
    1556:	7819      	ldrb	r1, [r3, #0]
    1558:	7b22      	ldrb	r2, [r4, #12]
    155a:	404a      	eors	r2, r1
    155c:	701a      	strb	r2, [r3, #0]
    155e:	002b      	movs	r3, r5
    1560:	330d      	adds	r3, #13
    1562:	18fb      	adds	r3, r7, r3
    1564:	7819      	ldrb	r1, [r3, #0]
    1566:	7b62      	ldrb	r2, [r4, #13]
    1568:	404a      	eors	r2, r1
    156a:	701a      	strb	r2, [r3, #0]
    156c:	002b      	movs	r3, r5
    156e:	330e      	adds	r3, #14
    1570:	18fb      	adds	r3, r7, r3
    1572:	7819      	ldrb	r1, [r3, #0]
    1574:	7ba2      	ldrb	r2, [r4, #14]
    1576:	350f      	adds	r5, #15
    1578:	404a      	eors	r2, r1
    157a:	701a      	strb	r2, [r3, #0]
    157c:	197d      	adds	r5, r7, r5
    157e:	782a      	ldrb	r2, [r5, #0]
    1580:	7be3      	ldrb	r3, [r4, #15]
    1582:	4053      	eors	r3, r2
    1584:	702b      	strb	r3, [r5, #0]
    for (i = 0; i < iterations + 1; i++) {
    1586:	464b      	mov	r3, r9
    1588:	3301      	adds	r3, #1
    158a:	b2db      	uxtb	r3, r3
    158c:	4699      	mov	r9, r3
    158e:	001d      	movs	r5, r3
    1590:	459a      	cmp	sl, r3
    1592:	db00      	blt.n	1596 <DataDecrypt+0x256>
    1594:	e744      	b.n	1420 <DataDecrypt+0xe0>
    *PayloadLen = *PayloadLen - 4;
    1596:	9b09      	ldr	r3, [sp, #36]	; 0x24
    mic_generator(&Payload[0], *PayloadLen, FrameControl, FrameCounter, SourceIEEEAddress);
    1598:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    *PayloadLen = *PayloadLen - 4;
    159a:	7819      	ldrb	r1, [r3, #0]
    mic_generator(&Payload[0], *PayloadLen, FrameControl, FrameCounter, SourceIEEEAddress);
    159c:	0038      	movs	r0, r7
    *PayloadLen = *PayloadLen - 4;
    159e:	3904      	subs	r1, #4
    15a0:	b2c9      	uxtb	r1, r1
    15a2:	7019      	strb	r1, [r3, #0]
    mic_generator(&Payload[0], *PayloadLen, FrameControl, FrameCounter, SourceIEEEAddress);
    15a4:	9b07      	ldr	r3, [sp, #28]
    15a6:	4c52      	ldr	r4, [pc, #328]	; (16f0 <DataDecrypt+0x3b0>)
    15a8:	9300      	str	r3, [sp, #0]
    15aa:	9b08      	ldr	r3, [sp, #32]
    15ac:	47a0      	blx	r4
    15ae:	0031      	movs	r1, r6
    15b0:	4a50      	ldr	r2, [pc, #320]	; (16f4 <DataDecrypt+0x3b4>)
    15b2:	4b51      	ldr	r3, [pc, #324]	; (16f8 <DataDecrypt+0x3b8>)
    15b4:	4311      	orrs	r1, r2
    15b6:	4319      	orrs	r1, r3
    15b8:	0789      	lsls	r1, r1, #30
    15ba:	d000      	beq.n	15be <DataDecrypt+0x27e>
    15bc:	e0a0      	b.n	1700 <DataDecrypt+0x3c0>
        final_mic_value[i] = CTR_mic[i] ^ CBC_mic[i];
    15be:	7870      	ldrb	r0, [r6, #1]
    15c0:	7831      	ldrb	r1, [r6, #0]
    15c2:	0200      	lsls	r0, r0, #8
    15c4:	4308      	orrs	r0, r1
    15c6:	78b1      	ldrb	r1, [r6, #2]
    15c8:	7854      	ldrb	r4, [r2, #1]
    15ca:	0409      	lsls	r1, r1, #16
    15cc:	4308      	orrs	r0, r1
    15ce:	78f1      	ldrb	r1, [r6, #3]
    15d0:	0224      	lsls	r4, r4, #8
    15d2:	0609      	lsls	r1, r1, #24
    15d4:	4301      	orrs	r1, r0
    15d6:	7810      	ldrb	r0, [r2, #0]
    15d8:	4304      	orrs	r4, r0
    15da:	7890      	ldrb	r0, [r2, #2]
    15dc:	0400      	lsls	r0, r0, #16
    15de:	4304      	orrs	r4, r0
    15e0:	78d0      	ldrb	r0, [r2, #3]
    15e2:	0600      	lsls	r0, r0, #24
    15e4:	4320      	orrs	r0, r4
    15e6:	4041      	eors	r1, r0
    15e8:	0a08      	lsrs	r0, r1, #8
    15ea:	7058      	strb	r0, [r3, #1]
    15ec:	0c08      	lsrs	r0, r1, #16
    15ee:	7019      	strb	r1, [r3, #0]
    15f0:	7098      	strb	r0, [r3, #2]
    15f2:	0e09      	lsrs	r1, r1, #24
    15f4:	7950      	ldrb	r0, [r2, #5]
    15f6:	70d9      	strb	r1, [r3, #3]
    15f8:	7911      	ldrb	r1, [r2, #4]
    15fa:	0200      	lsls	r0, r0, #8
    15fc:	4308      	orrs	r0, r1
    15fe:	7991      	ldrb	r1, [r2, #6]
    1600:	7974      	ldrb	r4, [r6, #5]
    1602:	0409      	lsls	r1, r1, #16
    1604:	4308      	orrs	r0, r1
    1606:	79d1      	ldrb	r1, [r2, #7]
    1608:	0224      	lsls	r4, r4, #8
    160a:	0609      	lsls	r1, r1, #24
    160c:	4301      	orrs	r1, r0
    160e:	7930      	ldrb	r0, [r6, #4]
    1610:	4304      	orrs	r4, r0
    1612:	79b0      	ldrb	r0, [r6, #6]
    1614:	0400      	lsls	r0, r0, #16
    1616:	4304      	orrs	r4, r0
    1618:	79f0      	ldrb	r0, [r6, #7]
    161a:	0600      	lsls	r0, r0, #24
    161c:	4320      	orrs	r0, r4
    161e:	4041      	eors	r1, r0
    1620:	0a08      	lsrs	r0, r1, #8
    1622:	7158      	strb	r0, [r3, #5]
    1624:	0c08      	lsrs	r0, r1, #16
    1626:	7119      	strb	r1, [r3, #4]
    1628:	7198      	strb	r0, [r3, #6]
    162a:	0e09      	lsrs	r1, r1, #24
    162c:	7a50      	ldrb	r0, [r2, #9]
    162e:	71d9      	strb	r1, [r3, #7]
    1630:	7a11      	ldrb	r1, [r2, #8]
    1632:	0200      	lsls	r0, r0, #8
    1634:	4308      	orrs	r0, r1
    1636:	7a91      	ldrb	r1, [r2, #10]
    1638:	7a74      	ldrb	r4, [r6, #9]
    163a:	0409      	lsls	r1, r1, #16
    163c:	4308      	orrs	r0, r1
    163e:	7ad1      	ldrb	r1, [r2, #11]
    1640:	0224      	lsls	r4, r4, #8
    1642:	0609      	lsls	r1, r1, #24
    1644:	4301      	orrs	r1, r0
    1646:	7a30      	ldrb	r0, [r6, #8]
    1648:	4304      	orrs	r4, r0
    164a:	7ab0      	ldrb	r0, [r6, #10]
    164c:	0400      	lsls	r0, r0, #16
    164e:	4304      	orrs	r4, r0
    1650:	7af0      	ldrb	r0, [r6, #11]
    1652:	0600      	lsls	r0, r0, #24
    1654:	4320      	orrs	r0, r4
    1656:	4041      	eors	r1, r0
    1658:	0a08      	lsrs	r0, r1, #8
    165a:	7219      	strb	r1, [r3, #8]
    165c:	7258      	strb	r0, [r3, #9]
    165e:	0c08      	lsrs	r0, r1, #16
    1660:	0e09      	lsrs	r1, r1, #24
    1662:	72d9      	strb	r1, [r3, #11]
    1664:	7b51      	ldrb	r1, [r2, #13]
    1666:	7298      	strb	r0, [r3, #10]
    1668:	7b10      	ldrb	r0, [r2, #12]
    166a:	0209      	lsls	r1, r1, #8
    166c:	4308      	orrs	r0, r1
    166e:	7b91      	ldrb	r1, [r2, #14]
    1670:	7bd2      	ldrb	r2, [r2, #15]
    1672:	0409      	lsls	r1, r1, #16
    1674:	4301      	orrs	r1, r0
    1676:	0612      	lsls	r2, r2, #24
    1678:	7b70      	ldrb	r0, [r6, #13]
    167a:	430a      	orrs	r2, r1
    167c:	7b31      	ldrb	r1, [r6, #12]
    167e:	0200      	lsls	r0, r0, #8
    1680:	4308      	orrs	r0, r1
    1682:	7bb1      	ldrb	r1, [r6, #14]
    1684:	0409      	lsls	r1, r1, #16
    1686:	4308      	orrs	r0, r1
    1688:	7bf1      	ldrb	r1, [r6, #15]
    168a:	0609      	lsls	r1, r1, #24
    168c:	4301      	orrs	r1, r0
    168e:	404a      	eors	r2, r1
    1690:	0a11      	lsrs	r1, r2, #8
    1692:	731a      	strb	r2, [r3, #12]
    1694:	7359      	strb	r1, [r3, #13]
    1696:	0c11      	lsrs	r1, r2, #16
    1698:	0e12      	lsrs	r2, r2, #24
    169a:	7399      	strb	r1, [r3, #14]
    169c:	73da      	strb	r2, [r3, #15]
    if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3]) {
    169e:	4a17      	ldr	r2, [pc, #92]	; (16fc <DataDecrypt+0x3bc>)
    16a0:	781c      	ldrb	r4, [r3, #0]
    16a2:	7811      	ldrb	r1, [r2, #0]
        return false;
    16a4:	2000      	movs	r0, #0
    if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3]) {
    16a6:	428c      	cmp	r4, r1
    16a8:	d006      	beq.n	16b8 <DataDecrypt+0x378>
}
    16aa:	b015      	add	sp, #84	; 0x54
    16ac:	bc3c      	pop	{r2, r3, r4, r5}
    16ae:	4690      	mov	r8, r2
    16b0:	4699      	mov	r9, r3
    16b2:	46a2      	mov	sl, r4
    16b4:	46ab      	mov	fp, r5
    16b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3]) {
    16b8:	785c      	ldrb	r4, [r3, #1]
    16ba:	7851      	ldrb	r1, [r2, #1]
    16bc:	428c      	cmp	r4, r1
    16be:	d1f4      	bne.n	16aa <DataDecrypt+0x36a>
    16c0:	789c      	ldrb	r4, [r3, #2]
    16c2:	7891      	ldrb	r1, [r2, #2]
    16c4:	428c      	cmp	r4, r1
    16c6:	d1f0      	bne.n	16aa <DataDecrypt+0x36a>
    16c8:	78d8      	ldrb	r0, [r3, #3]
    16ca:	78d3      	ldrb	r3, [r2, #3]
    16cc:	1ac0      	subs	r0, r0, r3
    16ce:	4243      	negs	r3, r0
    16d0:	4158      	adcs	r0, r3
    16d2:	b2c0      	uxtb	r0, r0
    16d4:	e7e9      	b.n	16aa <DataDecrypt+0x36a>
    16d6:	46c0      	nop			; (mov r8, r8)
    16d8:	00007d91 	.word	0x00007d91
    16dc:	200002b8 	.word	0x200002b8
    16e0:	20000004 	.word	0x20000004
    16e4:	00002db9 	.word	0x00002db9
    16e8:	00002f35 	.word	0x00002f35
    16ec:	00002fa9 	.word	0x00002fa9
    16f0:	00000ea9 	.word	0x00000ea9
    16f4:	200008f8 	.word	0x200008f8
    16f8:	200002cc 	.word	0x200002cc
    16fc:	20000908 	.word	0x20000908
        final_mic_value[i] = CTR_mic[i] ^ CBC_mic[i];
    1700:	7831      	ldrb	r1, [r6, #0]
    1702:	7810      	ldrb	r0, [r2, #0]
    1704:	4041      	eors	r1, r0
    1706:	7019      	strb	r1, [r3, #0]
    1708:	7851      	ldrb	r1, [r2, #1]
    170a:	7870      	ldrb	r0, [r6, #1]
    170c:	4041      	eors	r1, r0
    170e:	7059      	strb	r1, [r3, #1]
    1710:	7891      	ldrb	r1, [r2, #2]
    1712:	78b0      	ldrb	r0, [r6, #2]
    1714:	4041      	eors	r1, r0
    1716:	7099      	strb	r1, [r3, #2]
    1718:	78d1      	ldrb	r1, [r2, #3]
    171a:	78f0      	ldrb	r0, [r6, #3]
    171c:	4041      	eors	r1, r0
    171e:	70d9      	strb	r1, [r3, #3]
    1720:	7911      	ldrb	r1, [r2, #4]
    1722:	7930      	ldrb	r0, [r6, #4]
    1724:	4041      	eors	r1, r0
    1726:	7119      	strb	r1, [r3, #4]
    1728:	7951      	ldrb	r1, [r2, #5]
    172a:	7970      	ldrb	r0, [r6, #5]
    172c:	4041      	eors	r1, r0
    172e:	7159      	strb	r1, [r3, #5]
    1730:	7990      	ldrb	r0, [r2, #6]
    1732:	79b1      	ldrb	r1, [r6, #6]
    1734:	4041      	eors	r1, r0
    1736:	7199      	strb	r1, [r3, #6]
    1738:	79d0      	ldrb	r0, [r2, #7]
    173a:	79f1      	ldrb	r1, [r6, #7]
    173c:	4041      	eors	r1, r0
    173e:	71d9      	strb	r1, [r3, #7]
    1740:	7a10      	ldrb	r0, [r2, #8]
    1742:	7a31      	ldrb	r1, [r6, #8]
    1744:	4041      	eors	r1, r0
    1746:	7219      	strb	r1, [r3, #8]
    1748:	7a50      	ldrb	r0, [r2, #9]
    174a:	7a71      	ldrb	r1, [r6, #9]
    174c:	4041      	eors	r1, r0
    174e:	7259      	strb	r1, [r3, #9]
    1750:	7a91      	ldrb	r1, [r2, #10]
    1752:	7ab0      	ldrb	r0, [r6, #10]
    1754:	4041      	eors	r1, r0
    1756:	7299      	strb	r1, [r3, #10]
    1758:	7ad1      	ldrb	r1, [r2, #11]
    175a:	7af0      	ldrb	r0, [r6, #11]
    175c:	4041      	eors	r1, r0
    175e:	72d9      	strb	r1, [r3, #11]
    1760:	7b10      	ldrb	r0, [r2, #12]
    1762:	7b31      	ldrb	r1, [r6, #12]
    1764:	4041      	eors	r1, r0
    1766:	7319      	strb	r1, [r3, #12]
    1768:	7b50      	ldrb	r0, [r2, #13]
    176a:	7b71      	ldrb	r1, [r6, #13]
    176c:	4041      	eors	r1, r0
    176e:	7359      	strb	r1, [r3, #13]
    1770:	7b91      	ldrb	r1, [r2, #14]
    1772:	7bb0      	ldrb	r0, [r6, #14]
    1774:	4041      	eors	r1, r0
    1776:	7399      	strb	r1, [r3, #14]
    1778:	7bf1      	ldrb	r1, [r6, #15]
    177a:	7bd2      	ldrb	r2, [r2, #15]
    177c:	404a      	eors	r2, r1
    177e:	73da      	strb	r2, [r3, #15]
    1780:	e78d      	b.n	169e <DataDecrypt+0x35e>
    1782:	46c0      	nop			; (mov r8, r8)

00001784 <MiMAC_SetChannel>:
{
    1784:	b510      	push	{r4, lr}
    1786:	0004      	movs	r4, r0
		return false;
    1788:	2000      	movs	r0, #0
	if (channel < 0x00 || channel > 0x0A) {
    178a:	2c0a      	cmp	r4, #10
    178c:	d80d      	bhi.n	17aa <MiMAC_SetChannel+0x26>
	MACCurrentChannel = channel;
    178e:	4b07      	ldr	r3, [pc, #28]	; (17ac <MiMAC_SetChannel+0x28>)
    value = trx_reg_read(reg);
    1790:	3008      	adds	r0, #8
	MACCurrentChannel = channel;
    1792:	701c      	strb	r4, [r3, #0]
    value = trx_reg_read(reg);
    1794:	4b06      	ldr	r3, [pc, #24]	; (17b0 <MiMAC_SetChannel+0x2c>)
    1796:	4798      	blx	r3
    reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
    1798:	231f      	movs	r3, #31
    179a:	0001      	movs	r1, r0
    179c:	4399      	bics	r1, r3
    phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
    179e:	4321      	orrs	r1, r4
    trx_reg_write(reg, value);
    17a0:	2008      	movs	r0, #8
    17a2:	b2c9      	uxtb	r1, r1
    17a4:	4b03      	ldr	r3, [pc, #12]	; (17b4 <MiMAC_SetChannel+0x30>)
    17a6:	4798      	blx	r3
	return true;
    17a8:	2001      	movs	r0, #1
}
    17aa:	bd10      	pop	{r4, pc}
    17ac:	2000090e 	.word	0x2000090e
    17b0:	000053e5 	.word	0x000053e5
    17b4:	000054e1 	.word	0x000054e1

000017b8 <MiMAC_Init>:
{
    17b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    17ba:	46de      	mov	lr, fp
    17bc:	4657      	mov	r7, sl
    17be:	464e      	mov	r6, r9
    17c0:	4645      	mov	r5, r8
    17c2:	b5e0      	push	{r5, r6, r7, lr}
    trx_spi_init();
    17c4:	4b67      	ldr	r3, [pc, #412]	; (1964 <MiMAC_Init+0x1ac>)
{
    17c6:	b083      	sub	sp, #12
    17c8:	9000      	str	r0, [sp, #0]
    17ca:	9101      	str	r1, [sp, #4]
    trx_spi_init();
    17cc:	4798      	blx	r3
    PhyReset();
    17ce:	4b66      	ldr	r3, [pc, #408]	; (1968 <MiMAC_Init+0x1b0>)
    17d0:	4798      	blx	r3
    phyRxState = false;
    17d2:	4b66      	ldr	r3, [pc, #408]	; (196c <MiMAC_Init+0x1b4>)
{
    17d4:	466f      	mov	r7, sp
    phyRxState = false;
    17d6:	469a      	mov	sl, r3
    17d8:	2300      	movs	r3, #0
    17da:	4652      	mov	r2, sl
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    17dc:	261f      	movs	r6, #31
    trx_reg_write(reg, value);
    17de:	21ff      	movs	r1, #255	; 0xff
    17e0:	200e      	movs	r0, #14
    17e2:	4c63      	ldr	r4, [pc, #396]	; (1970 <MiMAC_Init+0x1b8>)
    phyRxState = false;
    17e4:	7013      	strb	r3, [r2, #0]
    trx_reg_write(reg, value);
    17e6:	47a0      	blx	r4
    17e8:	4d62      	ldr	r5, [pc, #392]	; (1974 <MiMAC_Init+0x1bc>)
    17ea:	2108      	movs	r1, #8
    17ec:	2002      	movs	r0, #2
    17ee:	47a0      	blx	r4
    value = trx_reg_read(reg);
    17f0:	2001      	movs	r0, #1
    17f2:	47a8      	blx	r5
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    17f4:	4030      	ands	r0, r6
    17f6:	2808      	cmp	r0, #8
    17f8:	d1f7      	bne.n	17ea <MiMAC_Init+0x32>
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    17fa:	261f      	movs	r6, #31
    trx_reg_write(reg, value);
    17fc:	212e      	movs	r1, #46	; 0x2e
    17fe:	3804      	subs	r0, #4
    1800:	47a0      	blx	r4
    1802:	21a0      	movs	r1, #160	; 0xa0
    1804:	200c      	movs	r0, #12
    1806:	47a0      	blx	r4
    1808:	21e1      	movs	r1, #225	; 0xe1
    180a:	2005      	movs	r0, #5
    180c:	47a0      	blx	r4
    MACInitParams = initValue;
    180e:	4b5a      	ldr	r3, [pc, #360]	; (1978 <MiMAC_Init+0x1c0>)
    1810:	cf06      	ldmia	r7!, {r1, r2}
    1812:	c306      	stmia	r3!, {r1, r2}
    trx_reg_write(reg, value);
    1814:	2103      	movs	r1, #3
    1816:	2002      	movs	r0, #2
    1818:	47a0      	blx	r4
    value = trx_reg_read(reg);
    181a:	2001      	movs	r0, #1
    181c:	47a8      	blx	r5
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    181e:	4030      	ands	r0, r6
    1820:	2808      	cmp	r0, #8
    1822:	d1f7      	bne.n	1814 <MiMAC_Init+0x5c>
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    1824:	261f      	movs	r6, #31
    trx_reg_write(reg, value);
    1826:	2106      	movs	r1, #6
    1828:	2002      	movs	r0, #2
    182a:	47a0      	blx	r4
    value = trx_reg_read(reg);
    182c:	2001      	movs	r0, #1
    182e:	47a8      	blx	r5
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    1830:	4030      	ands	r0, r6
    1832:	2806      	cmp	r0, #6
    1834:	d1f7      	bne.n	1826 <MiMAC_Init+0x6e>
    1836:	2300      	movs	r3, #0
    1838:	469b      	mov	fp, r3
    183a:	4b50      	ldr	r3, [pc, #320]	; (197c <MiMAC_Init+0x1c4>)
    183c:	2700      	movs	r7, #0
    183e:	4699      	mov	r9, r3
        rndValue = (phyReadRegister(RG_PHY_RSSI) >> RND_VALUE) & 3;
    1840:	2303      	movs	r3, #3
    1842:	4698      	mov	r8, r3
        delay_cycles_us(1);
    1844:	2001      	movs	r0, #1
    1846:	47c8      	blx	r9
    value = trx_reg_read(reg);
    1848:	2006      	movs	r0, #6
    184a:	47a8      	blx	r5
        rnd |= rndValue << i;
    184c:	4643      	mov	r3, r8
        rndValue = (phyReadRegister(RG_PHY_RSSI) >> RND_VALUE) & 3;
    184e:	0946      	lsrs	r6, r0, #5
        rnd |= rndValue << i;
    1850:	401e      	ands	r6, r3
    1852:	40be      	lsls	r6, r7
    1854:	465b      	mov	r3, fp
    1856:	431e      	orrs	r6, r3
    1858:	b236      	sxth	r6, r6
    185a:	b2b3      	uxth	r3, r6
    185c:	3702      	adds	r7, #2
    185e:	469b      	mov	fp, r3
    for (uint8_t i = 0; i < 16; i += 2) {
    1860:	2f10      	cmp	r7, #16
    1862:	d1ef      	bne.n	1844 <MiMAC_Init+0x8c>
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    1864:	370f      	adds	r7, #15
    trx_reg_write(reg, value);
    1866:	2103      	movs	r1, #3
    1868:	2002      	movs	r0, #2
    186a:	47a0      	blx	r4
    value = trx_reg_read(reg);
    186c:	2001      	movs	r0, #1
    186e:	47a8      	blx	r5
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    1870:	4038      	ands	r0, r7
    1872:	2808      	cmp	r0, #8
    1874:	d1f7      	bne.n	1866 <MiMAC_Init+0xae>
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    1876:	271f      	movs	r7, #31
    trx_reg_write(reg, value);
    1878:	2108      	movs	r1, #8
    187a:	2002      	movs	r0, #2
    187c:	47a0      	blx	r4
    value = trx_reg_read(reg);
    187e:	2001      	movs	r0, #1
    1880:	47a8      	blx	r5
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    1882:	4038      	ands	r0, r7
    1884:	2808      	cmp	r0, #8
    1886:	d1f7      	bne.n	1878 <MiMAC_Init+0xc0>
    value = trx_reg_read(reg);
    1888:	3007      	adds	r0, #7
    188a:	47a8      	blx	r5
    if (phyRxState) {
    188c:	4653      	mov	r3, sl
    188e:	781b      	ldrb	r3, [r3, #0]
    1890:	2b00      	cmp	r3, #0
    1892:	d140      	bne.n	1916 <MiMAC_Init+0x15e>
    phyRxState = rx;
    1894:	2301      	movs	r3, #1
    1896:	4652      	mov	r2, sl
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    1898:	271f      	movs	r7, #31
    phyRxState = rx;
    189a:	7013      	strb	r3, [r2, #0]
    trx_reg_write(reg, value);
    189c:	2103      	movs	r1, #3
    189e:	2002      	movs	r0, #2
    18a0:	47a0      	blx	r4
    value = trx_reg_read(reg);
    18a2:	2001      	movs	r0, #1
    18a4:	47a8      	blx	r5
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    18a6:	4038      	ands	r0, r7
    18a8:	2808      	cmp	r0, #8
    18aa:	d1f7      	bne.n	189c <MiMAC_Init+0xe4>
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    18ac:	271f      	movs	r7, #31
    trx_reg_write(reg, value);
    18ae:	2108      	movs	r1, #8
    18b0:	2002      	movs	r0, #2
    18b2:	47a0      	blx	r4
    value = trx_reg_read(reg);
    18b4:	2001      	movs	r0, #1
    18b6:	47a8      	blx	r5
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    18b8:	4038      	ands	r0, r7
    18ba:	2808      	cmp	r0, #8
    18bc:	d1f7      	bne.n	18ae <MiMAC_Init+0xf6>
    value = trx_reg_read(reg);
    18be:	3007      	adds	r0, #7
    18c0:	47a8      	blx	r5
    if (phyRxState) {
    18c2:	4653      	mov	r3, sl
    18c4:	781b      	ldrb	r3, [r3, #0]
    18c6:	2b00      	cmp	r3, #0
    18c8:	d138      	bne.n	193c <MiMAC_Init+0x184>
    MACCurrentChannel = 11;
    18ca:	220b      	movs	r2, #11
    18cc:	2524      	movs	r5, #36	; 0x24
    IEEESeqNum = x & 0xff;
    18ce:	4b2c      	ldr	r3, [pc, #176]	; (1980 <MiMAC_Init+0x1c8>)
    18d0:	701e      	strb	r6, [r3, #0]
    MACCurrentChannel = 11;
    18d2:	4b2c      	ldr	r3, [pc, #176]	; (1984 <MiMAC_Init+0x1cc>)
/*************************************************************************/ /**
*****************************************************************************/
// Setting the IEEE address
void PHY_SetIEEEAddr(uint8_t* ieee_addr)
{
    uint8_t* ptr_to_reg = ieee_addr;
    18d4:	4e2c      	ldr	r6, [pc, #176]	; (1988 <MiMAC_Init+0x1d0>)
    MACCurrentChannel = 11;
    18d6:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 8; i++) {
        trx_reg_write((RG_IEEE_ADDR_0 + i), *ptr_to_reg);
    18d8:	0028      	movs	r0, r5
    18da:	3501      	adds	r5, #1
    18dc:	7831      	ldrb	r1, [r6, #0]
    18de:	b2ed      	uxtb	r5, r5
    18e0:	47a0      	blx	r4
        ptr_to_reg++;
    18e2:	3601      	adds	r6, #1
    for (uint8_t i = 0; i < 8; i++) {
    18e4:	2d2c      	cmp	r5, #44	; 0x2c
    18e6:	d1f7      	bne.n	18d8 <MiMAC_Init+0x120>
    trx_status.Val = 0;
    18e8:	2200      	movs	r2, #0
    18ea:	4b28      	ldr	r3, [pc, #160]	; (198c <MiMAC_Init+0x1d4>)
    18ec:	701a      	strb	r2, [r3, #0]
    18ee:	22c3      	movs	r2, #195	; 0xc3
    18f0:	4b27      	ldr	r3, [pc, #156]	; (1990 <MiMAC_Init+0x1d8>)
    18f2:	00d2      	lsls	r2, r2, #3
    18f4:	1899      	adds	r1, r3, r2
        RxBuffer[i].PayloadLen = 0;
    18f6:	2200      	movs	r2, #0
    18f8:	701a      	strb	r2, [r3, #0]
    18fa:	334e      	adds	r3, #78	; 0x4e
    for (i = 0; i < BANK_SIZE; i++) {
    18fc:	428b      	cmp	r3, r1
    18fe:	d1fb      	bne.n	18f8 <MiMAC_Init+0x140>
    OutgoingFrameCounter.Val = 1;
    1900:	2201      	movs	r2, #1
}
    1902:	2001      	movs	r0, #1
    OutgoingFrameCounter.Val = 1;
    1904:	4b23      	ldr	r3, [pc, #140]	; (1994 <MiMAC_Init+0x1dc>)
    1906:	601a      	str	r2, [r3, #0]
}
    1908:	b003      	add	sp, #12
    190a:	bc3c      	pop	{r2, r3, r4, r5}
    190c:	4690      	mov	r8, r2
    190e:	4699      	mov	r9, r3
    1910:	46a2      	mov	sl, r4
    1912:	46ab      	mov	fp, r5
    1914:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    1916:	271f      	movs	r7, #31
    trx_reg_write(reg, value);
    1918:	2103      	movs	r1, #3
    191a:	2002      	movs	r0, #2
    191c:	47a0      	blx	r4
    value = trx_reg_read(reg);
    191e:	2001      	movs	r0, #1
    1920:	47a8      	blx	r5
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    1922:	4038      	ands	r0, r7
    1924:	2808      	cmp	r0, #8
    1926:	d1f7      	bne.n	1918 <MiMAC_Init+0x160>
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    1928:	271f      	movs	r7, #31
    trx_reg_write(reg, value);
    192a:	2116      	movs	r1, #22
    192c:	2002      	movs	r0, #2
    192e:	47a0      	blx	r4
    value = trx_reg_read(reg);
    1930:	2001      	movs	r0, #1
    1932:	47a8      	blx	r5
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    1934:	4038      	ands	r0, r7
    1936:	2816      	cmp	r0, #22
    1938:	d1f7      	bne.n	192a <MiMAC_Init+0x172>
    193a:	e7ab      	b.n	1894 <MiMAC_Init+0xdc>
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    193c:	271f      	movs	r7, #31
    trx_reg_write(reg, value);
    193e:	2103      	movs	r1, #3
    1940:	2002      	movs	r0, #2
    1942:	47a0      	blx	r4
    value = trx_reg_read(reg);
    1944:	2001      	movs	r0, #1
    1946:	47a8      	blx	r5
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    1948:	4038      	ands	r0, r7
    194a:	2808      	cmp	r0, #8
    194c:	d1f7      	bne.n	193e <MiMAC_Init+0x186>
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    194e:	271f      	movs	r7, #31
    trx_reg_write(reg, value);
    1950:	2116      	movs	r1, #22
    1952:	2002      	movs	r0, #2
    1954:	47a0      	blx	r4
    value = trx_reg_read(reg);
    1956:	2001      	movs	r0, #1
    1958:	47a8      	blx	r5
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    195a:	4038      	ands	r0, r7
    195c:	2816      	cmp	r0, #22
    195e:	d1f7      	bne.n	1950 <MiMAC_Init+0x198>
    1960:	e7b3      	b.n	18ca <MiMAC_Init+0x112>
    1962:	46c0      	nop			; (mov r8, r8)
    1964:	00005299 	.word	0x00005299
    1968:	000053b5 	.word	0x000053b5
    196c:	20000128 	.word	0x20000128
    1970:	000054e1 	.word	0x000054e1
    1974:	000053e5 	.word	0x000053e5
    1978:	200002a0 	.word	0x200002a0
    197c:	000030b1 	.word	0x000030b1
    1980:	20000294 	.word	0x20000294
    1984:	2000090e 	.word	0x2000090e
    1988:	200009f0 	.word	0x200009f0
    198c:	20000910 	.word	0x20000910
    1990:	200002dc 	.word	0x200002dc
    1994:	200008f4 	.word	0x200008f4

00001998 <MiMAC_SendPacket>:
{
    1998:	b5f0      	push	{r4, r5, r6, r7, lr}
    199a:	4657      	mov	r7, sl
    199c:	464e      	mov	r6, r9
    199e:	46de      	mov	lr, fp
    19a0:	4645      	mov	r5, r8
    19a2:	b5e0      	push	{r5, r6, r7, lr}
    19a4:	b0a9      	sub	sp, #164	; 0xa4
    19a6:	af05      	add	r7, sp, #20
    19a8:	000e      	movs	r6, r1
    19aa:	6079      	str	r1, [r7, #4]
    19ac:	0011      	movs	r1, r2
    19ae:	9005      	str	r0, [sp, #20]
    19b0:	b2c0      	uxtb	r0, r0
    19b2:	9302      	str	r3, [sp, #8]
    19b4:	0683      	lsls	r3, r0, #26
    19b6:	0fdb      	lsrs	r3, r3, #31
    19b8:	0a09      	lsrs	r1, r1, #8
    19ba:	4699      	mov	r9, r3
    19bc:	b2d3      	uxtb	r3, r2
    19be:	60ba      	str	r2, [r7, #8]
    19c0:	9604      	str	r6, [sp, #16]
    19c2:	469b      	mov	fp, r3
    19c4:	b2ca      	uxtb	r2, r1
    if (transParam.flags.bits.broadcast) {
    19c6:	0743      	lsls	r3, r0, #29
    19c8:	d501      	bpl.n	19ce <MiMAC_SendPacket+0x36>
    19ca:	2301      	movs	r3, #1
    19cc:	469b      	mov	fp, r3
    if (transParam.flags.bits.secEn) {
    19ce:	2308      	movs	r3, #8
    19d0:	4003      	ands	r3, r0
    19d2:	0019      	movs	r1, r3
    19d4:	424b      	negs	r3, r1
    19d6:	414b      	adcs	r3, r1
    19d8:	425b      	negs	r3, r3
    19da:	401a      	ands	r2, r3
    if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND) {
    19dc:	2303      	movs	r3, #3
    19de:	9201      	str	r2, [sp, #4]
    19e0:	4003      	ands	r3, r0
    19e2:	2b01      	cmp	r3, #1
    19e4:	d100      	bne.n	19e8 <MiMAC_SendPacket+0x50>
    19e6:	e170      	b.n	1cca <MiMAC_SendPacket+0x332>
    else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA) {
    19e8:	4259      	negs	r1, r3
    19ea:	4159      	adcs	r1, r3
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    19ec:	4dcc      	ldr	r5, [pc, #816]	; (1d20 <MiMAC_SendPacket+0x388>)
        frameControl = 0x03;
    19ee:	b2c9      	uxtb	r1, r1
    19f0:	468a      	mov	sl, r1
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    19f2:	897c      	ldrh	r4, [r7, #10]
    19f4:	8829      	ldrh	r1, [r5, #0]
    19f6:	42a1      	cmp	r1, r4
    19f8:	d100      	bne.n	19fc <MiMAC_SendPacket+0x64>
    19fa:	e16e      	b.n	1cda <MiMAC_SendPacket+0x342>
        IntraPAN = false;
    19fc:	2600      	movs	r6, #0
    19fe:	210f      	movs	r1, #15
    1a00:	2409      	movs	r4, #9
    1a02:	9603      	str	r6, [sp, #12]
    if (transParam.altDestAddr) {
    1a04:	465e      	mov	r6, fp
    1a06:	2e00      	cmp	r6, #0
    1a08:	d000      	beq.n	1a0c <MiMAC_SendPacket+0x74>
        headerLength += 2;
    1a0a:	0021      	movs	r1, r4
    if (transParam.altSrcAddr) {
    1a0c:	2a00      	cmp	r2, #0
    1a0e:	d100      	bne.n	1a12 <MiMAC_SendPacket+0x7a>
    1a10:	e0de      	b.n	1bd0 <MiMAC_SendPacket+0x238>
        headerLength += 2;
    1a12:	3102      	adds	r1, #2
    1a14:	b2ca      	uxtb	r2, r1
    1a16:	4690      	mov	r8, r2
    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false) {
    1a18:	2224      	movs	r2, #36	; 0x24
    1a1a:	4010      	ands	r0, r2
    1a1c:	2820      	cmp	r0, #32
    1a1e:	d100      	bne.n	1a22 <MiMAC_SendPacket+0x8a>
    1a20:	e0de      	b.n	1be0 <MiMAC_SendPacket+0x248>
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE) {
    1a22:	2b03      	cmp	r3, #3
    1a24:	d100      	bne.n	1a28 <MiMAC_SendPacket+0x90>
    1a26:	e0e2      	b.n	1bee <MiMAC_SendPacket+0x256>
    if (transParam.flags.bits.secEn) {
    1a28:	464b      	mov	r3, r9
    1a2a:	2220      	movs	r2, #32
    1a2c:	783e      	ldrb	r6, [r7, #0]
    1a2e:	015b      	lsls	r3, r3, #5
    1a30:	4396      	bics	r6, r2
    1a32:	431e      	orrs	r6, r3
    1a34:	703e      	strb	r6, [r7, #0]
    1a36:	0733      	lsls	r3, r6, #28
    1a38:	d500      	bpl.n	1a3c <MiMAC_SendPacket+0xa4>
    1a3a:	e0e1      	b.n	1c00 <MiMAC_SendPacket+0x268>
    packet[loc++] = headerLength;
    1a3c:	4643      	mov	r3, r8
    1a3e:	ac08      	add	r4, sp, #32
    1a40:	7023      	strb	r3, [r4, #0]
        packet[loc++] = MACPayloadLen + headerLength;
    1a42:	ab32      	add	r3, sp, #200	; 0xc8
    1a44:	781b      	ldrb	r3, [r3, #0]
    1a46:	4443      	add	r3, r8
    1a48:	7063      	strb	r3, [r4, #1]
    packet[loc++] = frameControl;
    1a4a:	4653      	mov	r3, sl
    1a4c:	70a3      	strb	r3, [r4, #2]
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE) {
    1a4e:	43f3      	mvns	r3, r6
    1a50:	079b      	lsls	r3, r3, #30
    1a52:	d100      	bne.n	1a56 <MiMAC_SendPacket+0xbe>
    1a54:	e0ee      	b.n	1c34 <MiMAC_SendPacket+0x29c>
        if (transParam.altDestAddr && transParam.altSrcAddr) {
    1a56:	465b      	mov	r3, fp
    1a58:	2b00      	cmp	r3, #0
    1a5a:	d100      	bne.n	1a5e <MiMAC_SendPacket+0xc6>
    1a5c:	e0f5      	b.n	1c4a <MiMAC_SendPacket+0x2b2>
    1a5e:	9b01      	ldr	r3, [sp, #4]
    1a60:	2b00      	cmp	r3, #0
    1a62:	d000      	beq.n	1a66 <MiMAC_SendPacket+0xce>
    1a64:	e146      	b.n	1cf4 <MiMAC_SendPacket+0x35c>
            packet[loc++] = 0xC8;
    1a66:	23c8      	movs	r3, #200	; 0xc8
    1a68:	70e3      	strb	r3, [r4, #3]
        packet[loc++] = IEEESeqNum++;
    1a6a:	4aae      	ldr	r2, [pc, #696]	; (1d24 <MiMAC_SendPacket+0x38c>)
    1a6c:	7813      	ldrb	r3, [r2, #0]
    1a6e:	1c59      	adds	r1, r3, #1
    1a70:	7011      	strb	r1, [r2, #0]
    1a72:	7123      	strb	r3, [r4, #4]
        packet[loc++] = transParam.DestPANID.v[0];
    1a74:	7abb      	ldrb	r3, [r7, #10]
    1a76:	7163      	strb	r3, [r4, #5]
        packet[loc++] = transParam.DestPANID.v[1];
    1a78:	7afb      	ldrb	r3, [r7, #11]
    1a7a:	71a3      	strb	r3, [r4, #6]
        if (transParam.flags.bits.broadcast) {
    1a7c:	0773      	lsls	r3, r6, #29
    1a7e:	d400      	bmi.n	1a82 <MiMAC_SendPacket+0xea>
    1a80:	e13b      	b.n	1cfa <MiMAC_SendPacket+0x362>
            packet[loc++] = 0xFF;
    1a82:	23ff      	movs	r3, #255	; 0xff
    1a84:	210a      	movs	r1, #10
    1a86:	2209      	movs	r2, #9
    1a88:	71e3      	strb	r3, [r4, #7]
            packet[loc++] = 0xFF;
    1a8a:	7223      	strb	r3, [r4, #8]
    1a8c:	3bf6      	subs	r3, #246	; 0xf6
    if (IntraPAN == false) {
    1a8e:	9803      	ldr	r0, [sp, #12]
    1a90:	2800      	cmp	r0, #0
    1a92:	d108      	bne.n	1aa6 <MiMAC_SendPacket+0x10e>
        packet[loc++] = MAC_PANID.v[0];
    1a94:	7828      	ldrb	r0, [r5, #0]
    1a96:	54a0      	strb	r0, [r4, r2]
        packet[loc++] = MAC_PANID.v[1];
    1a98:	7868      	ldrb	r0, [r5, #1]
    1a9a:	1c9a      	adds	r2, r3, #2
    1a9c:	b2d2      	uxtb	r2, r2
    1a9e:	3303      	adds	r3, #3
    1aa0:	5460      	strb	r0, [r4, r1]
    1aa2:	b2d9      	uxtb	r1, r3
    1aa4:	0013      	movs	r3, r2
    if (transParam.altSrcAddr) {
    1aa6:	9801      	ldr	r0, [sp, #4]
    1aa8:	2800      	cmp	r0, #0
    1aaa:	d100      	bne.n	1aae <MiMAC_SendPacket+0x116>
    1aac:	e0ea      	b.n	1c84 <MiMAC_SendPacket+0x2ec>
        packet[loc++] = myNetworkAddress.v[0];
    1aae:	489e      	ldr	r0, [pc, #632]	; (1d28 <MiMAC_SendPacket+0x390>)
        packet[loc++] = myNetworkAddress.v[1];
    1ab0:	3302      	adds	r3, #2
        packet[loc++] = myNetworkAddress.v[0];
    1ab2:	7806      	ldrb	r6, [r0, #0]
        packet[loc++] = myNetworkAddress.v[1];
    1ab4:	b2db      	uxtb	r3, r3
        packet[loc++] = myNetworkAddress.v[0];
    1ab6:	54a6      	strb	r6, [r4, r2]
        packet[loc++] = myNetworkAddress.v[1];
    1ab8:	7842      	ldrb	r2, [r0, #1]
    1aba:	5462      	strb	r2, [r4, r1]
    if (transParam.flags.bits.secEn) {
    1abc:	464a      	mov	r2, r9
    1abe:	2020      	movs	r0, #32
    1ac0:	0151      	lsls	r1, r2, #5
    1ac2:	783a      	ldrb	r2, [r7, #0]
    1ac4:	4382      	bics	r2, r0
    1ac6:	430a      	orrs	r2, r1
    1ac8:	0016      	movs	r6, r2
    1aca:	703a      	strb	r2, [r7, #0]
    1acc:	0732      	lsls	r2, r6, #28
    1ace:	d517      	bpl.n	1b00 <MiMAC_SendPacket+0x168>
            packet[loc++] = OutgoingFrameCounter.v[i];
    1ad0:	4a96      	ldr	r2, [pc, #600]	; (1d2c <MiMAC_SendPacket+0x394>)
    1ad2:	7811      	ldrb	r1, [r2, #0]
    1ad4:	54e1      	strb	r1, [r4, r3]
    1ad6:	7850      	ldrb	r0, [r2, #1]
    1ad8:	1c59      	adds	r1, r3, #1
    1ada:	b2c9      	uxtb	r1, r1
    1adc:	5460      	strb	r0, [r4, r1]
    1ade:	7890      	ldrb	r0, [r2, #2]
    1ae0:	1c99      	adds	r1, r3, #2
    1ae2:	b2c9      	uxtb	r1, r1
    1ae4:	5460      	strb	r0, [r4, r1]
    1ae6:	78d0      	ldrb	r0, [r2, #3]
    1ae8:	1cd9      	adds	r1, r3, #3
    1aea:	b2c9      	uxtb	r1, r1
    1aec:	5460      	strb	r0, [r4, r1]
        OutgoingFrameCounter.Val++;
    1aee:	6810      	ldr	r0, [r2, #0]
    1af0:	1d19      	adds	r1, r3, #4
    1af2:	3001      	adds	r0, #1
    1af4:	6010      	str	r0, [r2, #0]
        packet[loc++] = myKeySequenceNumber;
    1af6:	2200      	movs	r2, #0
    1af8:	b2c9      	uxtb	r1, r1
    1afa:	3305      	adds	r3, #5
    1afc:	b2db      	uxtb	r3, r3
    1afe:	5462      	strb	r2, [r4, r1]
    for (i = 0; i < MACPayloadLen; i++) {
    1b00:	aa32      	add	r2, sp, #200	; 0xc8
    1b02:	7811      	ldrb	r1, [r2, #0]
    1b04:	2900      	cmp	r1, #0
    1b06:	d100      	bne.n	1b0a <MiMAC_SendPacket+0x172>
    1b08:	e108      	b.n	1d1c <MiMAC_SendPacket+0x384>
    1b0a:	18c9      	adds	r1, r1, r3
    1b0c:	9d02      	ldr	r5, [sp, #8]
    1b0e:	b2ca      	uxtb	r2, r1
        packet[loc++] = MACPayload[i];
    1b10:	7828      	ldrb	r0, [r5, #0]
    1b12:	1c59      	adds	r1, r3, #1
    1b14:	54e0      	strb	r0, [r4, r3]
    1b16:	b2cb      	uxtb	r3, r1
    1b18:	3501      	adds	r5, #1
    for (i = 0; i < MACPayloadLen; i++) {
    1b1a:	4293      	cmp	r3, r2
    1b1c:	d1f8      	bne.n	1b10 <MiMAC_SendPacket+0x178>
    packet[loc++] = final_mic_value[0];
    1b1e:	4b84      	ldr	r3, [pc, #528]	; (1d30 <MiMAC_SendPacket+0x398>)
    1b20:	7819      	ldrb	r1, [r3, #0]
    1b22:	54a1      	strb	r1, [r4, r2]
    packet[loc++] = final_mic_value[1];
    1b24:	7858      	ldrb	r0, [r3, #1]
    packet[loc++] = final_mic_value[0];
    1b26:	1c51      	adds	r1, r2, #1
    packet[loc++] = final_mic_value[1];
    1b28:	b2c9      	uxtb	r1, r1
    1b2a:	5460      	strb	r0, [r4, r1]
    packet[loc++] = final_mic_value[2];
    1b2c:	7898      	ldrb	r0, [r3, #2]
    packet[loc++] = final_mic_value[1];
    1b2e:	1c91      	adds	r1, r2, #2
    packet[loc++] = final_mic_value[2];
    1b30:	b2c9      	uxtb	r1, r1
    1b32:	5460      	strb	r0, [r4, r1]
    packet[loc++] = final_mic_value[3];
    1b34:	78db      	ldrb	r3, [r3, #3]
    packet[loc++] = final_mic_value[2];
    1b36:	3203      	adds	r2, #3
    packet[loc++] = final_mic_value[3];
    1b38:	b2d2      	uxtb	r2, r2
    1b3a:	54a3      	strb	r3, [r4, r2]
    trx_status.bits.TX_BUSY = 1;
    1b3c:	4b7d      	ldr	r3, [pc, #500]	; (1d34 <MiMAC_SendPacket+0x39c>)
    1b3e:	2201      	movs	r2, #1
    1b40:	4698      	mov	r8, r3
    1b42:	781b      	ldrb	r3, [r3, #0]
    1b44:	4313      	orrs	r3, r2
    1b46:	4642      	mov	r2, r8
    1b48:	7013      	strb	r3, [r2, #0]
    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false) {
    1b4a:	2224      	movs	r2, #36	; 0x24
        trx_status.bits.TX_PENDING_ACK = 1;
    1b4c:	4643      	mov	r3, r8
    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false) {
    1b4e:	4032      	ands	r2, r6
        trx_status.bits.TX_PENDING_ACK = 1;
    1b50:	781b      	ldrb	r3, [r3, #0]
    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false) {
    1b52:	2a20      	cmp	r2, #32
    1b54:	d100      	bne.n	1b58 <MiMAC_SendPacket+0x1c0>
    1b56:	e0dc      	b.n	1d12 <MiMAC_SendPacket+0x37a>
        trx_status.bits.TX_PENDING_ACK = 0;
    1b58:	2202      	movs	r2, #2
    1b5a:	4393      	bics	r3, r2
    1b5c:	4642      	mov	r2, r8
    1b5e:	7013      	strb	r3, [r2, #0]
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    1b60:	271f      	movs	r7, #31
    1b62:	4e75      	ldr	r6, [pc, #468]	; (1d38 <MiMAC_SendPacket+0x3a0>)
    1b64:	4d75      	ldr	r5, [pc, #468]	; (1d3c <MiMAC_SendPacket+0x3a4>)
    trx_reg_write(reg, value);
    1b66:	2103      	movs	r1, #3
    1b68:	2002      	movs	r0, #2
    1b6a:	47b0      	blx	r6
    value = trx_reg_read(reg);
    1b6c:	2001      	movs	r0, #1
    1b6e:	47a8      	blx	r5
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    1b70:	4038      	ands	r0, r7
    1b72:	2808      	cmp	r0, #8
    1b74:	d1f7      	bne.n	1b66 <MiMAC_SendPacket+0x1ce>
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    1b76:	271f      	movs	r7, #31
    trx_reg_write(reg, value);
    1b78:	2119      	movs	r1, #25
    1b7a:	2002      	movs	r0, #2
    1b7c:	47b0      	blx	r6
    value = trx_reg_read(reg);
    1b7e:	2001      	movs	r0, #1
    1b80:	47a8      	blx	r5
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    1b82:	4038      	ands	r0, r7
    1b84:	2819      	cmp	r0, #25
    1b86:	d1f7      	bne.n	1b78 <MiMAC_SendPacket+0x1e0>
    value = trx_reg_read(reg);
    1b88:	200f      	movs	r0, #15
    1b8a:	47a8      	blx	r5
    data[1] += 2; // 2
    1b8c:	7861      	ldrb	r1, [r4, #1]
    trx_frame_write(&data[1], (data[1] - 1) /* length value*/);
    1b8e:	2011      	movs	r0, #17
    data[1] += 2; // 2
    1b90:	1c8b      	adds	r3, r1, #2
    1b92:	7063      	strb	r3, [r4, #1]
    trx_frame_write(&data[1], (data[1] - 1) /* length value*/);
    1b94:	ab04      	add	r3, sp, #16
    1b96:	469c      	mov	ip, r3
    1b98:	3101      	adds	r1, #1
    1b9a:	b2c9      	uxtb	r1, r1
    1b9c:	4460      	add	r0, ip
    1b9e:	4b68      	ldr	r3, [pc, #416]	; (1d40 <MiMAC_SendPacket+0x3a8>)
    1ba0:	4798      	blx	r3
    phyState = PHY_STATE_TX_WAIT_END;
    1ba2:	2203      	movs	r2, #3
    1ba4:	4b67      	ldr	r3, [pc, #412]	; (1d44 <MiMAC_SendPacket+0x3ac>)
    1ba6:	701a      	strb	r2, [r3, #0]
    1ba8:	2280      	movs	r2, #128	; 0x80
    1baa:	4b67      	ldr	r3, [pc, #412]	; (1d48 <MiMAC_SendPacket+0x3b0>)
    1bac:	0352      	lsls	r2, r2, #13
    1bae:	619a      	str	r2, [r3, #24]

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
    1bb0:	46c0      	nop			; (mov r8, r8)
    1bb2:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1bb4:	615a      	str	r2, [r3, #20]
    return !trx_status.bits.TX_FAIL;
    1bb6:	4643      	mov	r3, r8
    1bb8:	7818      	ldrb	r0, [r3, #0]
    1bba:	2301      	movs	r3, #1
    1bbc:	0740      	lsls	r0, r0, #29
    1bbe:	0fc0      	lsrs	r0, r0, #31
    1bc0:	4058      	eors	r0, r3
}
    1bc2:	b029      	add	sp, #164	; 0xa4
    1bc4:	bc3c      	pop	{r2, r3, r4, r5}
    1bc6:	4690      	mov	r8, r2
    1bc8:	4699      	mov	r9, r3
    1bca:	46a2      	mov	sl, r4
    1bcc:	46ab      	mov	fp, r5
    1bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        headerLength += 8;
    1bd0:	3108      	adds	r1, #8
    1bd2:	b2ca      	uxtb	r2, r1
    1bd4:	4690      	mov	r8, r2
    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false) {
    1bd6:	2224      	movs	r2, #36	; 0x24
    1bd8:	4010      	ands	r0, r2
    1bda:	2820      	cmp	r0, #32
    1bdc:	d000      	beq.n	1be0 <MiMAC_SendPacket+0x248>
    1bde:	e720      	b.n	1a22 <MiMAC_SendPacket+0x8a>
        frameControl |= 0x20;
    1be0:	4651      	mov	r1, sl
    1be2:	3a04      	subs	r2, #4
    1be4:	4311      	orrs	r1, r2
    1be6:	468a      	mov	sl, r1
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE) {
    1be8:	2b03      	cmp	r3, #3
    1bea:	d000      	beq.n	1bee <MiMAC_SendPacket+0x256>
    1bec:	e71c      	b.n	1a28 <MiMAC_SendPacket+0x90>
    1bee:	3b02      	subs	r3, #2
    1bf0:	9301      	str	r3, [sp, #4]
        transParam.flags.bits.ackReq = false;
    1bf2:	2300      	movs	r3, #0
    1bf4:	4699      	mov	r9, r3
        IntraPAN = false;
    1bf6:	9303      	str	r3, [sp, #12]
        frameControl = 0x00;
    1bf8:	469a      	mov	sl, r3
        headerLength = 7;
    1bfa:	3307      	adds	r3, #7
    1bfc:	4698      	mov	r8, r3
    1bfe:	e713      	b.n	1a28 <MiMAC_SendPacket+0x90>
        frameControl |= 0x08;
    1c00:	2308      	movs	r3, #8
    1c02:	4652      	mov	r2, sl
    1c04:	431a      	orrs	r2, r3
    1c06:	b2d3      	uxtb	r3, r2
    1c08:	469a      	mov	sl, r3
        DataEncrypt(MACPayload, &MACPayloadLen, OutgoingFrameCounter, frameControl);
    1c0a:	4b48      	ldr	r3, [pc, #288]	; (1d2c <MiMAC_SendPacket+0x394>)
    1c0c:	4c4f      	ldr	r4, [pc, #316]	; (1d4c <MiMAC_SendPacket+0x3b4>)
    1c0e:	681a      	ldr	r2, [r3, #0]
    1c10:	a932      	add	r1, sp, #200	; 0xc8
    1c12:	4653      	mov	r3, sl
    1c14:	9802      	ldr	r0, [sp, #8]
    1c16:	47a0      	blx	r4
    packet[loc++] = headerLength;
    1c18:	4643      	mov	r3, r8
    1c1a:	ac08      	add	r4, sp, #32
    1c1c:	7023      	strb	r3, [r4, #0]
        packet[loc++] = MACPayloadLen + headerLength + 9;
    1c1e:	ab32      	add	r3, sp, #200	; 0xc8
    1c20:	781b      	ldrb	r3, [r3, #0]
    1c22:	3309      	adds	r3, #9
    1c24:	4443      	add	r3, r8
    1c26:	7063      	strb	r3, [r4, #1]
    packet[loc++] = frameControl;
    1c28:	4653      	mov	r3, sl
    1c2a:	70a3      	strb	r3, [r4, #2]
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE) {
    1c2c:	43f3      	mvns	r3, r6
    1c2e:	079b      	lsls	r3, r3, #30
    1c30:	d000      	beq.n	1c34 <MiMAC_SendPacket+0x29c>
    1c32:	e710      	b.n	1a56 <MiMAC_SendPacket+0xbe>
        packet[loc++] = 0x80;
    1c34:	2380      	movs	r3, #128	; 0x80
        packet[loc++] = IEEESeqNum++;
    1c36:	4a3b      	ldr	r2, [pc, #236]	; (1d24 <MiMAC_SendPacket+0x38c>)
        packet[loc++] = 0x80;
    1c38:	70e3      	strb	r3, [r4, #3]
        packet[loc++] = IEEESeqNum++;
    1c3a:	7813      	ldrb	r3, [r2, #0]
    1c3c:	1c59      	adds	r1, r3, #1
    1c3e:	7011      	strb	r1, [r2, #0]
    1c40:	7123      	strb	r3, [r4, #4]
    1c42:	2106      	movs	r1, #6
    1c44:	2205      	movs	r2, #5
    1c46:	2305      	movs	r3, #5
    1c48:	e721      	b.n	1a8e <MiMAC_SendPacket+0xf6>
        else if (transParam.altDestAddr == 0 && transParam.altSrcAddr == 1) {
    1c4a:	9b01      	ldr	r3, [sp, #4]
    1c4c:	2b00      	cmp	r3, #0
    1c4e:	d15d      	bne.n	1d0c <MiMAC_SendPacket+0x374>
            packet[loc++] = 0xCC;
    1c50:	23cc      	movs	r3, #204	; 0xcc
    1c52:	70e3      	strb	r3, [r4, #3]
        packet[loc++] = IEEESeqNum++;
    1c54:	4a33      	ldr	r2, [pc, #204]	; (1d24 <MiMAC_SendPacket+0x38c>)
    1c56:	7813      	ldrb	r3, [r2, #0]
    1c58:	1c59      	adds	r1, r3, #1
    1c5a:	7011      	strb	r1, [r2, #0]
    1c5c:	7123      	strb	r3, [r4, #4]
        packet[loc++] = transParam.DestPANID.v[0];
    1c5e:	7abb      	ldrb	r3, [r7, #10]
    1c60:	7163      	strb	r3, [r4, #5]
        packet[loc++] = transParam.DestPANID.v[1];
    1c62:	7afb      	ldrb	r3, [r7, #11]
    1c64:	71a3      	strb	r3, [r4, #6]
        if (transParam.flags.bits.broadcast) {
    1c66:	0773      	lsls	r3, r6, #29
    1c68:	d500      	bpl.n	1c6c <MiMAC_SendPacket+0x2d4>
    1c6a:	e70a      	b.n	1a82 <MiMAC_SendPacket+0xea>
    1c6c:	ab04      	add	r3, sp, #16
    1c6e:	469c      	mov	ip, r3
    1c70:	2017      	movs	r0, #23
    1c72:	2208      	movs	r2, #8
    1c74:	9904      	ldr	r1, [sp, #16]
    1c76:	4b36      	ldr	r3, [pc, #216]	; (1d50 <MiMAC_SendPacket+0x3b8>)
    1c78:	4460      	add	r0, ip
    1c7a:	4798      	blx	r3
    1c7c:	2110      	movs	r1, #16
    1c7e:	220f      	movs	r2, #15
                    packet[loc++] = transParam.DestAddress[i];
    1c80:	230f      	movs	r3, #15
    1c82:	e704      	b.n	1a8e <MiMAC_SendPacket+0xf6>
    1c84:	4a33      	ldr	r2, [pc, #204]	; (1d54 <MiMAC_SendPacket+0x3bc>)
    1c86:	6852      	ldr	r2, [r2, #4]
            packet[loc++] = MACInitParams.PAddress[i];
    1c88:	7811      	ldrb	r1, [r2, #0]
    1c8a:	54e1      	strb	r1, [r4, r3]
    1c8c:	7850      	ldrb	r0, [r2, #1]
    1c8e:	1c59      	adds	r1, r3, #1
    1c90:	b2c9      	uxtb	r1, r1
    1c92:	5460      	strb	r0, [r4, r1]
    1c94:	7890      	ldrb	r0, [r2, #2]
    1c96:	1c99      	adds	r1, r3, #2
    1c98:	b2c9      	uxtb	r1, r1
    1c9a:	5460      	strb	r0, [r4, r1]
    1c9c:	78d0      	ldrb	r0, [r2, #3]
    1c9e:	1cd9      	adds	r1, r3, #3
    1ca0:	b2c9      	uxtb	r1, r1
    1ca2:	5460      	strb	r0, [r4, r1]
    1ca4:	7910      	ldrb	r0, [r2, #4]
    1ca6:	1d19      	adds	r1, r3, #4
    1ca8:	b2c9      	uxtb	r1, r1
    1caa:	5460      	strb	r0, [r4, r1]
    1cac:	7950      	ldrb	r0, [r2, #5]
    1cae:	1d59      	adds	r1, r3, #5
    1cb0:	b2c9      	uxtb	r1, r1
    1cb2:	5460      	strb	r0, [r4, r1]
    1cb4:	7990      	ldrb	r0, [r2, #6]
    1cb6:	1d99      	adds	r1, r3, #6
    1cb8:	b2c9      	uxtb	r1, r1
    1cba:	5460      	strb	r0, [r4, r1]
    1cbc:	79d1      	ldrb	r1, [r2, #7]
    1cbe:	1dda      	adds	r2, r3, #7
    1cc0:	b2d2      	uxtb	r2, r2
    1cc2:	3308      	adds	r3, #8
    1cc4:	54a1      	strb	r1, [r4, r2]
    1cc6:	b2db      	uxtb	r3, r3
    1cc8:	e6f8      	b.n	1abc <MiMAC_SendPacket+0x124>
        frameControl = 0x03;
    1cca:	2103      	movs	r1, #3
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    1ccc:	4d14      	ldr	r5, [pc, #80]	; (1d20 <MiMAC_SendPacket+0x388>)
        frameControl = 0x03;
    1cce:	468a      	mov	sl, r1
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    1cd0:	897c      	ldrh	r4, [r7, #10]
    1cd2:	8829      	ldrh	r1, [r5, #0]
    1cd4:	42a1      	cmp	r1, r4
    1cd6:	d000      	beq.n	1cda <MiMAC_SendPacket+0x342>
    1cd8:	e690      	b.n	19fc <MiMAC_SendPacket+0x64>
    1cda:	4c1f      	ldr	r4, [pc, #124]	; (1d58 <MiMAC_SendPacket+0x3c0>)
    1cdc:	42a1      	cmp	r1, r4
    1cde:	d100      	bne.n	1ce2 <MiMAC_SendPacket+0x34a>
    1ce0:	e68c      	b.n	19fc <MiMAC_SendPacket+0x64>
        frameControl |= 0x40;
    1ce2:	2140      	movs	r1, #64	; 0x40
    1ce4:	4654      	mov	r4, sl
        IntraPAN = true;
    1ce6:	2601      	movs	r6, #1
        frameControl |= 0x40;
    1ce8:	430c      	orrs	r4, r1
    1cea:	46a2      	mov	sl, r4
        IntraPAN = true;
    1cec:	3933      	subs	r1, #51	; 0x33
    1cee:	2407      	movs	r4, #7
    1cf0:	9603      	str	r6, [sp, #12]
    1cf2:	e687      	b.n	1a04 <MiMAC_SendPacket+0x6c>
            packet[loc++] = 0x88;
    1cf4:	2388      	movs	r3, #136	; 0x88
    1cf6:	70e3      	strb	r3, [r4, #3]
    1cf8:	e6b7      	b.n	1a6a <MiMAC_SendPacket+0xd2>
                packet[loc++] = transParam.DestAddress[0];
    1cfa:	9a04      	ldr	r2, [sp, #16]
    1cfc:	210a      	movs	r1, #10
    1cfe:	7813      	ldrb	r3, [r2, #0]
    1d00:	71e3      	strb	r3, [r4, #7]
                packet[loc++] = transParam.DestAddress[1];
    1d02:	7853      	ldrb	r3, [r2, #1]
    1d04:	2209      	movs	r2, #9
    1d06:	7223      	strb	r3, [r4, #8]
    1d08:	2309      	movs	r3, #9
    1d0a:	e6c0      	b.n	1a8e <MiMAC_SendPacket+0xf6>
            packet[loc++] = 0x8C;
    1d0c:	238c      	movs	r3, #140	; 0x8c
    1d0e:	70e3      	strb	r3, [r4, #3]
    1d10:	e7a0      	b.n	1c54 <MiMAC_SendPacket+0x2bc>
        trx_status.bits.TX_PENDING_ACK = 1;
    1d12:	2202      	movs	r2, #2
    1d14:	4313      	orrs	r3, r2
    1d16:	4642      	mov	r2, r8
    1d18:	7013      	strb	r3, [r2, #0]
    1d1a:	e721      	b.n	1b60 <MiMAC_SendPacket+0x1c8>
    for (i = 0; i < MACPayloadLen; i++) {
    1d1c:	001a      	movs	r2, r3
    1d1e:	e6fe      	b.n	1b1e <MiMAC_SendPacket+0x186>
    1d20:	2000090c 	.word	0x2000090c
    1d24:	20000294 	.word	0x20000294
    1d28:	20000298 	.word	0x20000298
    1d2c:	200008f4 	.word	0x200008f4
    1d30:	200002cc 	.word	0x200002cc
    1d34:	20000910 	.word	0x20000910
    1d38:	000054e1 	.word	0x000054e1
    1d3c:	000053e5 	.word	0x000053e5
    1d40:	00005729 	.word	0x00005729
    1d44:	20000129 	.word	0x20000129
    1d48:	40002800 	.word	0x40002800
    1d4c:	00001081 	.word	0x00001081
    1d50:	00007d91 	.word	0x00007d91
    1d54:	200002a0 	.word	0x200002a0
    1d58:	0000ffff 	.word	0x0000ffff

00001d5c <MiMAC_DiscardPacket>:
 *
 *****************************************************************************************/
void MiMAC_DiscardPacket(void)
{
    //re-enable the ACKS
    if (BankIndex < BANK_SIZE) {
    1d5c:	4b04      	ldr	r3, [pc, #16]	; (1d70 <MiMAC_DiscardPacket+0x14>)
    1d5e:	781b      	ldrb	r3, [r3, #0]
    1d60:	2b13      	cmp	r3, #19
    1d62:	d804      	bhi.n	1d6e <MiMAC_DiscardPacket+0x12>
        RxBuffer[BankIndex].PayloadLen = 0;
    1d64:	224e      	movs	r2, #78	; 0x4e
    1d66:	2100      	movs	r1, #0
    1d68:	4353      	muls	r3, r2
    1d6a:	4a02      	ldr	r2, [pc, #8]	; (1d74 <MiMAC_DiscardPacket+0x18>)
    1d6c:	5499      	strb	r1, [r3, r2]
    }
}
    1d6e:	4770      	bx	lr
    1d70:	20000000 	.word	0x20000000
    1d74:	200002dc 	.word	0x200002dc

00001d78 <MiMAC_ReceivedPacket>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_ReceivedPacket(void)
{
    1d78:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d7a:	46de      	mov	lr, fp
    1d7c:	4657      	mov	r7, sl
    1d7e:	464e      	mov	r6, r9
    1d80:	4645      	mov	r5, r8
    1d82:	b5e0      	push	{r5, r6, r7, lr}
    uint8_t i;

    //If the stack TX has been busy for a long time then
    //time out the TX because we may have missed the interrupt
    //and don't want to lock up the stack forever
    if (trx_status.bits.TX_BUSY) {
    1d84:	4bcc      	ldr	r3, [pc, #816]	; (20b8 <STACK_SIZE+0xb8>)
{
    1d86:	b085      	sub	sp, #20
    if (trx_status.bits.TX_BUSY) {
    1d88:	781a      	ldrb	r2, [r3, #0]
    1d8a:	07d2      	lsls	r2, r2, #31
    1d8c:	d509      	bpl.n	1da2 <MiMAC_ReceivedPacket+0x2a>
        if (failureCounter >= FAILURE_COUNTER) {
    1d8e:	4acb      	ldr	r2, [pc, #812]	; (20bc <STACK_SIZE+0xbc>)
    1d90:	8811      	ldrh	r1, [r2, #0]
    1d92:	2905      	cmp	r1, #5
    1d94:	d941      	bls.n	1e1a <MiMAC_ReceivedPacket+0xa2>
            failureCounter = 0;
    1d96:	2100      	movs	r1, #0
    1d98:	8011      	strh	r1, [r2, #0]
            trx_status.bits.TX_BUSY = 0;
    1d9a:	781a      	ldrb	r2, [r3, #0]
    1d9c:	3101      	adds	r1, #1
    1d9e:	438a      	bics	r2, r1
    1da0:	701a      	strb	r2, [r3, #0]
        else {
            failureCounter++;
        }
    }

    BankIndex = 0xFF;
    1da2:	23ff      	movs	r3, #255	; 0xff
    1da4:	4fc6      	ldr	r7, [pc, #792]	; (20c0 <STACK_SIZE+0xc0>)
    1da6:	4ec7      	ldr	r6, [pc, #796]	; (20c4 <STACK_SIZE+0xc4>)
    1da8:	703b      	strb	r3, [r7, #0]
    1daa:	0032      	movs	r2, r6
    1dac:	2300      	movs	r3, #0
    for (i = 0; i < BANK_SIZE; i++) {
        if (RxBuffer[i].PayloadLen > 0) {
    1dae:	7811      	ldrb	r1, [r2, #0]
    1db0:	b2d8      	uxtb	r0, r3
    1db2:	001c      	movs	r4, r3
    1db4:	2900      	cmp	r1, #0
    1db6:	d10b      	bne.n	1dd0 <MiMAC_ReceivedPacket+0x58>
    1db8:	3301      	adds	r3, #1
    1dba:	324e      	adds	r2, #78	; 0x4e
    for (i = 0; i < BANK_SIZE; i++) {
    1dbc:	2b14      	cmp	r3, #20
    1dbe:	d1f6      	bne.n	1dae <MiMAC_ReceivedPacket+0x36>
            // use reserved packet type to represent beacon packet
            MACRxPacket.flags.bits.packetType = PACKET_TYPE_RESERVE;
            break;
        default: // not support frame type
            MiMAC_DiscardPacket();
            return false;
    1dc0:	2000      	movs	r0, #0
#endif

        return true;
    }
    return false;
}
    1dc2:	b005      	add	sp, #20
    1dc4:	bc3c      	pop	{r2, r3, r4, r5}
    1dc6:	4690      	mov	r8, r2
    1dc8:	4699      	mov	r9, r3
    1dca:	46a2      	mov	sl, r4
    1dcc:	46ab      	mov	fp, r5
    1dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((RxBuffer[BankIndex].Payload[0] & 0x40) == 0) {
    1dd0:	224e      	movs	r2, #78	; 0x4e
    1dd2:	435a      	muls	r2, r3
            BankIndex = i;
    1dd4:	7038      	strb	r0, [r7, #0]
        if ((RxBuffer[BankIndex].Payload[0] & 0x40) == 0) {
    1dd6:	18b0      	adds	r0, r6, r2
    1dd8:	4684      	mov	ip, r0
    1dda:	7840      	ldrb	r0, [r0, #1]
    1ddc:	9203      	str	r2, [sp, #12]
    1dde:	4680      	mov	r8, r0
    1de0:	2040      	movs	r0, #64	; 0x40
    1de2:	4645      	mov	r5, r8
    1de4:	4005      	ands	r5, r0
        MACRxPacket.flags.Val = 0;
    1de6:	2000      	movs	r0, #0
    1de8:	46a9      	mov	r9, r5
    1dea:	4db7      	ldr	r5, [pc, #732]	; (20c8 <STACK_SIZE+0xc8>)
    1dec:	7028      	strb	r0, [r5, #0]
        MACRxPacket.altSourceAddress = false;
    1dee:	73e8      	strb	r0, [r5, #15]
        addrMode = RxBuffer[BankIndex].Payload[1] & 0xCC;
    1df0:	4660      	mov	r0, ip
    1df2:	7882      	ldrb	r2, [r0, #2]
        switch (addrMode) {
    1df4:	2033      	movs	r0, #51	; 0x33
    1df6:	4382      	bics	r2, r0
    1df8:	2a88      	cmp	r2, #136	; 0x88
    1dfa:	d100      	bne.n	1dfe <MiMAC_ReceivedPacket+0x86>
    1dfc:	e121      	b.n	2042 <STACK_SIZE+0x42>
    1dfe:	d911      	bls.n	1e24 <MiMAC_ReceivedPacket+0xac>
    1e00:	2ac8      	cmp	r2, #200	; 0xc8
    1e02:	d100      	bne.n	1e06 <MiMAC_ReceivedPacket+0x8e>
    1e04:	e099      	b.n	1f3a <MiMAC_ReceivedPacket+0x1c2>
    1e06:	2acc      	cmp	r2, #204	; 0xcc
    1e08:	d04e      	beq.n	1ea8 <MiMAC_ReceivedPacket+0x130>
    1e0a:	2a8c      	cmp	r2, #140	; 0x8c
    1e0c:	d07b      	beq.n	1f06 <MiMAC_ReceivedPacket+0x18e>
        RxBuffer[BankIndex].PayloadLen = 0;
    1e0e:	224e      	movs	r2, #78	; 0x4e
    1e10:	4353      	muls	r3, r2
    1e12:	2200      	movs	r2, #0
            return false;
    1e14:	2000      	movs	r0, #0
        RxBuffer[BankIndex].PayloadLen = 0;
    1e16:	54f2      	strb	r2, [r6, r3]
            return false;
    1e18:	e7d3      	b.n	1dc2 <MiMAC_ReceivedPacket+0x4a>
            failureCounter++;
    1e1a:	8813      	ldrh	r3, [r2, #0]
    1e1c:	3301      	adds	r3, #1
    1e1e:	b29b      	uxth	r3, r3
    1e20:	8013      	strh	r3, [r2, #0]
    1e22:	e7be      	b.n	1da2 <MiMAC_ReceivedPacket+0x2a>
        switch (addrMode) {
    1e24:	2a08      	cmp	r2, #8
    1e26:	d032      	beq.n	1e8e <MiMAC_ReceivedPacket+0x116>
    1e28:	2a80      	cmp	r2, #128	; 0x80
    1e2a:	d1f0      	bne.n	1e0e <MiMAC_ReceivedPacket+0x96>
            MACRxPacket.flags.bits.sourcePrsnt = 1;
    1e2c:	207c      	movs	r0, #124	; 0x7c
    1e2e:	4240      	negs	r0, r0
    1e30:	7028      	strb	r0, [r5, #0]
            MACRxPacket.altSourceAddress = true;
    1e32:	307d      	adds	r0, #125	; 0x7d
    1e34:	73e8      	strb	r0, [r5, #15]
            MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    1e36:	4660      	mov	r0, ip
    1e38:	7900      	ldrb	r0, [r0, #4]
            MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[5]);
    1e3a:	9a03      	ldr	r2, [sp, #12]
            MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    1e3c:	7428      	strb	r0, [r5, #16]
            MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    1e3e:	4660      	mov	r0, ip
    1e40:	7940      	ldrb	r0, [r0, #5]
            MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 11;
    1e42:	390b      	subs	r1, #11
            MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    1e44:	7468      	strb	r0, [r5, #17]
            MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[5]);
    1e46:	1d90      	adds	r0, r2, #6
            MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    1e48:	3208      	adds	r2, #8
            MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[5]);
    1e4a:	1830      	adds	r0, r6, r0
            MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    1e4c:	18b2      	adds	r2, r6, r2
            MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[5]);
    1e4e:	6068      	str	r0, [r5, #4]
            MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 11;
    1e50:	7329      	strb	r1, [r5, #12]
            MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    1e52:	60aa      	str	r2, [r5, #8]
        if (RxBuffer[BankIndex].Payload[0] & 0x08) {
    1e54:	4642      	mov	r2, r8
    1e56:	0712      	lsls	r2, r2, #28
    1e58:	d450      	bmi.n	1efc <MiMAC_ReceivedPacket+0x184>
        switch (RxBuffer[BankIndex].Payload[0] & 0x07) // check frame type
    1e5a:	2307      	movs	r3, #7
    1e5c:	4642      	mov	r2, r8
    1e5e:	4013      	ands	r3, r2
    1e60:	2b01      	cmp	r3, #1
    1e62:	d100      	bne.n	1e66 <MiMAC_ReceivedPacket+0xee>
    1e64:	e112      	b.n	208c <STACK_SIZE+0x8c>
    1e66:	2b00      	cmp	r3, #0
    1e68:	d100      	bne.n	1e6c <MiMAC_ReceivedPacket+0xf4>
    1e6a:	e10a      	b.n	2082 <STACK_SIZE+0x82>
    1e6c:	2b03      	cmp	r3, #3
    1e6e:	d000      	beq.n	1e72 <MiMAC_ReceivedPacket+0xfa>
    1e70:	e185      	b.n	217e <STACK_SIZE+0x17e>
            MACRxPacket.flags.bits.packetType = PACKET_TYPE_COMMAND;
    1e72:	2203      	movs	r2, #3
    1e74:	782b      	ldrb	r3, [r5, #0]
    1e76:	4393      	bics	r3, r2
    1e78:	2201      	movs	r2, #1
    1e7a:	4313      	orrs	r3, r2
    1e7c:	702b      	strb	r3, [r5, #0]
        MACRxPacket.LQIValue = Received_LQI_Val;
    1e7e:	4b93      	ldr	r3, [pc, #588]	; (20cc <STACK_SIZE+0xcc>)
        return true;
    1e80:	2001      	movs	r0, #1
        MACRxPacket.LQIValue = Received_LQI_Val;
    1e82:	781b      	ldrb	r3, [r3, #0]
    1e84:	73ab      	strb	r3, [r5, #14]
        MACRxPacket.RSSIValue = Received_RSSI_Val;
    1e86:	4b92      	ldr	r3, [pc, #584]	; (20d0 <STACK_SIZE+0xd0>)
    1e88:	781b      	ldrb	r3, [r3, #0]
    1e8a:	736b      	strb	r3, [r5, #13]
        return true;
    1e8c:	e799      	b.n	1dc2 <MiMAC_ReceivedPacket+0x4a>
            if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF) {
    1e8e:	4662      	mov	r2, ip
    1e90:	7992      	ldrb	r2, [r2, #6]
    1e92:	2aff      	cmp	r2, #255	; 0xff
    1e94:	d100      	bne.n	1e98 <MiMAC_ReceivedPacket+0x120>
    1e96:	e1d3      	b.n	2240 <STACK_SIZE+0x240>
            MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    1e98:	224e      	movs	r2, #78	; 0x4e
    1e9a:	435a      	muls	r2, r3
    1e9c:	3208      	adds	r2, #8
            MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 10;
    1e9e:	390a      	subs	r1, #10
            MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    1ea0:	18b2      	adds	r2, r6, r2
            MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 10;
    1ea2:	7329      	strb	r1, [r5, #12]
            MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    1ea4:	60aa      	str	r2, [r5, #8]
        } break;
    1ea6:	e7d5      	b.n	1e54 <MiMAC_ReceivedPacket+0xdc>
            MACRxPacket.flags.bits.sourcePrsnt = 1;
    1ea8:	2380      	movs	r3, #128	; 0x80
    1eaa:	425b      	negs	r3, r3
    1eac:	702b      	strb	r3, [r5, #0]
            if (bIntraPAN) // check if it is intraPAN
    1eae:	464b      	mov	r3, r9
    1eb0:	2b00      	cmp	r3, #0
    1eb2:	d100      	bne.n	1eb6 <MiMAC_ReceivedPacket+0x13e>
    1eb4:	e13a      	b.n	212c <STACK_SIZE+0x12c>
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    1eb6:	4663      	mov	r3, ip
    1eb8:	791b      	ldrb	r3, [r3, #4]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[21]);
    1eba:	9a03      	ldr	r2, [sp, #12]
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    1ebc:	742b      	strb	r3, [r5, #16]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    1ebe:	4663      	mov	r3, ip
    1ec0:	795b      	ldrb	r3, [r3, #5]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[21]);
    1ec2:	3216      	adds	r2, #22
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    1ec4:	746b      	strb	r3, [r5, #17]
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
    1ec6:	9b03      	ldr	r3, [sp, #12]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 25;
    1ec8:	3919      	subs	r1, #25
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
    1eca:	330e      	adds	r3, #14
    1ecc:	18f3      	adds	r3, r6, r3
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[21]);
    1ece:	18b2      	adds	r2, r6, r2
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
    1ed0:	606b      	str	r3, [r5, #4]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 25;
    1ed2:	7329      	strb	r1, [r5, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[21]);
    1ed4:	60aa      	str	r2, [r5, #8]
    1ed6:	e04e      	b.n	1f76 <MiMAC_ReceivedPacket+0x1fe>
                if ((ConnectionTable[i].status.bits.isValid) && isSameAddress(ConnectionTable[i].Address, MACRxPacket.SourceAddress)) {
    1ed8:	0020      	movs	r0, r4
    1eda:	6869      	ldr	r1, [r5, #4]
    1edc:	300a      	adds	r0, #10
    1ede:	4b7d      	ldr	r3, [pc, #500]	; (20d4 <STACK_SIZE+0xd4>)
    1ee0:	4798      	blx	r3
    1ee2:	2800      	cmp	r0, #0
    1ee4:	d05e      	beq.n	1fa4 <MiMAC_ReceivedPacket+0x22c>
    1ee6:	2301      	movs	r3, #1
                if (IncomingFrameCounter[i].Val > FrameCounter.Val) {
    1ee8:	4a7b      	ldr	r2, [pc, #492]	; (20d8 <STACK_SIZE+0xd8>)
    1eea:	009b      	lsls	r3, r3, #2
    1eec:	5899      	ldr	r1, [r3, r2]
    1eee:	4541      	cmp	r1, r8
    1ef0:	d800      	bhi.n	1ef4 <MiMAC_ReceivedPacket+0x17c>
    1ef2:	e149      	b.n	2188 <STACK_SIZE+0x188>
    if (BankIndex < BANK_SIZE) {
    1ef4:	783b      	ldrb	r3, [r7, #0]
    1ef6:	2b13      	cmp	r3, #19
    1ef8:	d900      	bls.n	1efc <MiMAC_ReceivedPacket+0x184>
    1efa:	e761      	b.n	1dc0 <MiMAC_ReceivedPacket+0x48>
        RxBuffer[BankIndex].PayloadLen = 0;
    1efc:	224e      	movs	r2, #78	; 0x4e
    1efe:	4353      	muls	r3, r2
    1f00:	2200      	movs	r2, #0
    1f02:	54f2      	strb	r2, [r6, r3]
    1f04:	e75c      	b.n	1dc0 <MiMAC_ReceivedPacket+0x48>
            MACRxPacket.flags.bits.sourcePrsnt = 1;
    1f06:	2080      	movs	r0, #128	; 0x80
    1f08:	4240      	negs	r0, r0
    1f0a:	7028      	strb	r0, [r5, #0]
            MACRxPacket.altSourceAddress = true;
    1f0c:	3081      	adds	r0, #129	; 0x81
    1f0e:	73e8      	strb	r0, [r5, #15]
            if (bIntraPAN) // check if it is intraPAN
    1f10:	4648      	mov	r0, r9
    1f12:	2800      	cmp	r0, #0
    1f14:	d100      	bne.n	1f18 <MiMAC_ReceivedPacket+0x1a0>
    1f16:	e0f8      	b.n	210a <STACK_SIZE+0x10a>
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    1f18:	4660      	mov	r0, ip
    1f1a:	7900      	ldrb	r0, [r0, #4]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    1f1c:	9a03      	ldr	r2, [sp, #12]
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    1f1e:	7428      	strb	r0, [r5, #16]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    1f20:	4660      	mov	r0, ip
    1f22:	7940      	ldrb	r0, [r0, #5]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    1f24:	3210      	adds	r2, #16
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    1f26:	7468      	strb	r0, [r5, #17]
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[12]);
    1f28:	9803      	ldr	r0, [sp, #12]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    1f2a:	3913      	subs	r1, #19
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[12]);
    1f2c:	300d      	adds	r0, #13
    1f2e:	1830      	adds	r0, r6, r0
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    1f30:	18b2      	adds	r2, r6, r2
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[12]);
    1f32:	6068      	str	r0, [r5, #4]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    1f34:	7329      	strb	r1, [r5, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    1f36:	60aa      	str	r2, [r5, #8]
    1f38:	e78c      	b.n	1e54 <MiMAC_ReceivedPacket+0xdc>
            if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF) {
    1f3a:	4662      	mov	r2, ip
    1f3c:	7992      	ldrb	r2, [r2, #6]
    1f3e:	2aff      	cmp	r2, #255	; 0xff
    1f40:	d100      	bne.n	1f44 <MiMAC_ReceivedPacket+0x1cc>
    1f42:	e18d      	b.n	2260 <STACK_SIZE+0x260>
            MACRxPacket.flags.bits.sourcePrsnt = 1;
    1f44:	2280      	movs	r2, #128	; 0x80
    1f46:	7828      	ldrb	r0, [r5, #0]
    1f48:	4252      	negs	r2, r2
    1f4a:	4302      	orrs	r2, r0
    1f4c:	702a      	strb	r2, [r5, #0]
            if (bIntraPAN) // check if it is intraPAN
    1f4e:	464a      	mov	r2, r9
    1f50:	2a00      	cmp	r2, #0
    1f52:	d000      	beq.n	1f56 <MiMAC_ReceivedPacket+0x1de>
    1f54:	e0c8      	b.n	20e8 <STACK_SIZE+0xe8>
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    1f56:	224e      	movs	r2, #78	; 0x4e
    1f58:	4353      	muls	r3, r2
    1f5a:	18f2      	adds	r2, r6, r3
    1f5c:	7a10      	ldrb	r0, [r2, #8]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    1f5e:	7a52      	ldrb	r2, [r2, #9]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    1f60:	3915      	subs	r1, #21
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    1f62:	746a      	strb	r2, [r5, #17]
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    1f64:	001a      	movs	r2, r3
    1f66:	320a      	adds	r2, #10
    1f68:	18b2      	adds	r2, r6, r2
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    1f6a:	3312      	adds	r3, #18
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    1f6c:	606a      	str	r2, [r5, #4]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    1f6e:	18f2      	adds	r2, r6, r3
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    1f70:	7428      	strb	r0, [r5, #16]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    1f72:	7329      	strb	r1, [r5, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    1f74:	60aa      	str	r2, [r5, #8]
        if (RxBuffer[BankIndex].Payload[0] & 0x08) {
    1f76:	4643      	mov	r3, r8
    1f78:	071b      	lsls	r3, r3, #28
    1f7a:	d400      	bmi.n	1f7e <MiMAC_ReceivedPacket+0x206>
    1f7c:	e76d      	b.n	1e5a <MiMAC_ReceivedPacket+0xe2>
            FrameCounter.v[1] = MACRxPacket.Payload[1];
    1f7e:	7850      	ldrb	r0, [r2, #1]
    1f80:	7813      	ldrb	r3, [r2, #0]
            FrameCounter.v[2] = MACRxPacket.Payload[2];
    1f82:	7891      	ldrb	r1, [r2, #2]
            FrameCounter.v[1] = MACRxPacket.Payload[1];
    1f84:	0200      	lsls	r0, r0, #8
            FrameCounter.v[3] = MACRxPacket.Payload[3];
    1f86:	78d2      	ldrb	r2, [r2, #3]
            FrameCounter.v[2] = MACRxPacket.Payload[2];
    1f88:	0409      	lsls	r1, r1, #16
    1f8a:	4303      	orrs	r3, r0
            FrameCounter.v[3] = MACRxPacket.Payload[3];
    1f8c:	0612      	lsls	r2, r2, #24
    1f8e:	430b      	orrs	r3, r1
                if ((ConnectionTable[i].status.bits.isValid) && isSameAddress(ConnectionTable[i].Address, MACRxPacket.SourceAddress)) {
    1f90:	4c52      	ldr	r4, [pc, #328]	; (20dc <STACK_SIZE+0xdc>)
            FrameCounter.v[3] = MACRxPacket.Payload[3];
    1f92:	4313      	orrs	r3, r2
    1f94:	4698      	mov	r8, r3
                if ((ConnectionTable[i].status.bits.isValid) && isSameAddress(ConnectionTable[i].Address, MACRxPacket.SourceAddress)) {
    1f96:	7a63      	ldrb	r3, [r4, #9]
    1f98:	09db      	lsrs	r3, r3, #7
    1f9a:	d000      	beq.n	1f9e <MiMAC_ReceivedPacket+0x226>
    1f9c:	e0f7      	b.n	218e <STACK_SIZE+0x18e>
    1f9e:	7ce3      	ldrb	r3, [r4, #19]
    1fa0:	09db      	lsrs	r3, r3, #7
    1fa2:	d199      	bne.n	1ed8 <MiMAC_ReceivedPacket+0x160>
    1fa4:	7f63      	ldrb	r3, [r4, #29]
    1fa6:	09db      	lsrs	r3, r3, #7
    1fa8:	d000      	beq.n	1fac <MiMAC_ReceivedPacket+0x234>
    1faa:	e103      	b.n	21b4 <STACK_SIZE+0x1b4>
    1fac:	2327      	movs	r3, #39	; 0x27
    1fae:	5ce3      	ldrb	r3, [r4, r3]
    1fb0:	09db      	lsrs	r3, r3, #7
    1fb2:	d000      	beq.n	1fb6 <MiMAC_ReceivedPacket+0x23e>
    1fb4:	e0f4      	b.n	21a0 <STACK_SIZE+0x1a0>
    1fb6:	2331      	movs	r3, #49	; 0x31
    1fb8:	5ce3      	ldrb	r3, [r4, r3]
    1fba:	09db      	lsrs	r3, r3, #7
    1fbc:	d000      	beq.n	1fc0 <MiMAC_ReceivedPacket+0x248>
    1fbe:	e121      	b.n	2204 <STACK_SIZE+0x204>
    1fc0:	233b      	movs	r3, #59	; 0x3b
    1fc2:	5ce3      	ldrb	r3, [r4, r3]
    1fc4:	09db      	lsrs	r3, r3, #7
    1fc6:	d000      	beq.n	1fca <MiMAC_ReceivedPacket+0x252>
    1fc8:	e112      	b.n	21f0 <STACK_SIZE+0x1f0>
    1fca:	2345      	movs	r3, #69	; 0x45
    1fcc:	5ce3      	ldrb	r3, [r4, r3]
    1fce:	09db      	lsrs	r3, r3, #7
    1fd0:	d000      	beq.n	1fd4 <MiMAC_ReceivedPacket+0x25c>
    1fd2:	e103      	b.n	21dc <STACK_SIZE+0x1dc>
    1fd4:	234f      	movs	r3, #79	; 0x4f
    1fd6:	5ce3      	ldrb	r3, [r4, r3]
    1fd8:	09db      	lsrs	r3, r3, #7
    1fda:	d000      	beq.n	1fde <MiMAC_ReceivedPacket+0x266>
    1fdc:	e11c      	b.n	2218 <STACK_SIZE+0x218>
    1fde:	2359      	movs	r3, #89	; 0x59
    1fe0:	5ce3      	ldrb	r3, [r4, r3]
    1fe2:	09db      	lsrs	r3, r3, #7
    1fe4:	d000      	beq.n	1fe8 <MiMAC_ReceivedPacket+0x270>
    1fe6:	e121      	b.n	222c <STACK_SIZE+0x22c>
    1fe8:	2363      	movs	r3, #99	; 0x63
    1fea:	5ce3      	ldrb	r3, [r4, r3]
    1fec:	09db      	lsrs	r3, r3, #7
    1fee:	d000      	beq.n	1ff2 <MiMAC_ReceivedPacket+0x27a>
    1ff0:	e0ea      	b.n	21c8 <STACK_SIZE+0x1c8>
            MACRxPacket.PayloadLen -= 5; // used to 5 for frame counter now -4 also added for MIC integrity
    1ff2:	7b2b      	ldrb	r3, [r5, #12]
            received_mic_values[0] = MACRxPacket.Payload[MACRxPacket.PayloadLen + 1];
    1ff4:	68a8      	ldr	r0, [r5, #8]
            MACRxPacket.PayloadLen -= 5; // used to 5 for frame counter now -4 also added for MIC integrity
    1ff6:	3b05      	subs	r3, #5
    1ff8:	b2db      	uxtb	r3, r3
    1ffa:	732b      	strb	r3, [r5, #12]
            received_mic_values[0] = MACRxPacket.Payload[MACRxPacket.PayloadLen + 1];
    1ffc:	18c3      	adds	r3, r0, r3
    1ffe:	7859      	ldrb	r1, [r3, #1]
    2000:	4a37      	ldr	r2, [pc, #220]	; (20e0 <STACK_SIZE+0xe0>)
            if (false == DataDecrypt(&(MACRxPacket.Payload[5]), &(MACRxPacket.PayloadLen), MACRxPacket.SourceAddress, FrameCounter, RxBuffer[BankIndex].Payload[0])) {
    2002:	3005      	adds	r0, #5
            received_mic_values[0] = MACRxPacket.Payload[MACRxPacket.PayloadLen + 1];
    2004:	7011      	strb	r1, [r2, #0]
            received_mic_values[1] = MACRxPacket.Payload[MACRxPacket.PayloadLen + 2];
    2006:	7899      	ldrb	r1, [r3, #2]
            if (false == DataDecrypt(&(MACRxPacket.Payload[5]), &(MACRxPacket.PayloadLen), MACRxPacket.SourceAddress, FrameCounter, RxBuffer[BankIndex].Payload[0])) {
    2008:	4c36      	ldr	r4, [pc, #216]	; (20e4 <STACK_SIZE+0xe4>)
            received_mic_values[1] = MACRxPacket.Payload[MACRxPacket.PayloadLen + 2];
    200a:	7051      	strb	r1, [r2, #1]
            received_mic_values[2] = MACRxPacket.Payload[MACRxPacket.PayloadLen + 3];
    200c:	78d9      	ldrb	r1, [r3, #3]
    200e:	7091      	strb	r1, [r2, #2]
            received_mic_values[3] = MACRxPacket.Payload[MACRxPacket.PayloadLen + 4];
    2010:	791b      	ldrb	r3, [r3, #4]
            if (false == DataDecrypt(&(MACRxPacket.Payload[5]), &(MACRxPacket.PayloadLen), MACRxPacket.SourceAddress, FrameCounter, RxBuffer[BankIndex].Payload[0])) {
    2012:	0029      	movs	r1, r5
            received_mic_values[3] = MACRxPacket.Payload[MACRxPacket.PayloadLen + 4];
    2014:	70d3      	strb	r3, [r2, #3]
            if (false == DataDecrypt(&(MACRxPacket.Payload[5]), &(MACRxPacket.PayloadLen), MACRxPacket.SourceAddress, FrameCounter, RxBuffer[BankIndex].Payload[0])) {
    2016:	224e      	movs	r2, #78	; 0x4e
    2018:	783b      	ldrb	r3, [r7, #0]
    201a:	4691      	mov	r9, r2
    201c:	4353      	muls	r3, r2
    201e:	18f3      	adds	r3, r6, r3
    2020:	785b      	ldrb	r3, [r3, #1]
    2022:	310c      	adds	r1, #12
    2024:	9300      	str	r3, [sp, #0]
    2026:	686a      	ldr	r2, [r5, #4]
    2028:	4643      	mov	r3, r8
    202a:	47a0      	blx	r4
    202c:	2800      	cmp	r0, #0
    202e:	d000      	beq.n	2032 <STACK_SIZE+0x32>
    2030:	e08d      	b.n	214e <STACK_SIZE+0x14e>
    if (BankIndex < BANK_SIZE) {
    2032:	783b      	ldrb	r3, [r7, #0]
    2034:	2b13      	cmp	r3, #19
    2036:	d900      	bls.n	203a <STACK_SIZE+0x3a>
    2038:	e6c2      	b.n	1dc0 <MiMAC_ReceivedPacket+0x48>
        RxBuffer[BankIndex].PayloadLen = 0;
    203a:	464a      	mov	r2, r9
    203c:	435a      	muls	r2, r3
    203e:	54b0      	strb	r0, [r6, r2]
    2040:	e6be      	b.n	1dc0 <MiMAC_ReceivedPacket+0x48>
            if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF) {
    2042:	4662      	mov	r2, ip
    2044:	7992      	ldrb	r2, [r2, #6]
    2046:	2aff      	cmp	r2, #255	; 0xff
    2048:	d100      	bne.n	204c <STACK_SIZE+0x4c>
    204a:	e101      	b.n	2250 <STACK_SIZE+0x250>
            MACRxPacket.flags.bits.sourcePrsnt = 1;
    204c:	2280      	movs	r2, #128	; 0x80
    204e:	7828      	ldrb	r0, [r5, #0]
    2050:	4252      	negs	r2, r2
    2052:	4302      	orrs	r2, r0
    2054:	702a      	strb	r2, [r5, #0]
            MACRxPacket.altSourceAddress = true;
    2056:	2201      	movs	r2, #1
    2058:	73ea      	strb	r2, [r5, #15]
            if (bIntraPAN == false) {
    205a:	464a      	mov	r2, r9
    205c:	2a00      	cmp	r2, #0
    205e:	d11a      	bne.n	2096 <STACK_SIZE+0x96>
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    2060:	324e      	adds	r2, #78	; 0x4e
    2062:	435a      	muls	r2, r3
    2064:	18b0      	adds	r0, r6, r2
    2066:	7a07      	ldrb	r7, [r0, #8]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    2068:	7a40      	ldrb	r0, [r0, #9]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 15;
    206a:	390f      	subs	r1, #15
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    206c:	7468      	strb	r0, [r5, #17]
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    206e:	0010      	movs	r0, r2
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[11]);
    2070:	320c      	adds	r2, #12
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    2072:	300a      	adds	r0, #10
    2074:	1830      	adds	r0, r6, r0
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[11]);
    2076:	18b2      	adds	r2, r6, r2
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    2078:	742f      	strb	r7, [r5, #16]
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    207a:	6068      	str	r0, [r5, #4]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 15;
    207c:	7329      	strb	r1, [r5, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[11]);
    207e:	60aa      	str	r2, [r5, #8]
    2080:	e6e8      	b.n	1e54 <MiMAC_ReceivedPacket+0xdc>
            MACRxPacket.flags.bits.packetType = PACKET_TYPE_RESERVE;
    2082:	2203      	movs	r2, #3
    2084:	782b      	ldrb	r3, [r5, #0]
    2086:	4313      	orrs	r3, r2
    2088:	702b      	strb	r3, [r5, #0]
            break;
    208a:	e6f8      	b.n	1e7e <MiMAC_ReceivedPacket+0x106>
            MACRxPacket.flags.bits.packetType = PACKET_TYPE_DATA;
    208c:	2203      	movs	r2, #3
    208e:	782b      	ldrb	r3, [r5, #0]
    2090:	4393      	bics	r3, r2
    2092:	702b      	strb	r3, [r5, #0]
            break;
    2094:	e6f3      	b.n	1e7e <MiMAC_ReceivedPacket+0x106>
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    2096:	224e      	movs	r2, #78	; 0x4e
    2098:	435a      	muls	r2, r3
    209a:	18b0      	adds	r0, r6, r2
    209c:	7907      	ldrb	r7, [r0, #4]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    209e:	7940      	ldrb	r0, [r0, #5]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 13;
    20a0:	390d      	subs	r1, #13
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    20a2:	7468      	strb	r0, [r5, #17]
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    20a4:	0010      	movs	r0, r2
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[9]);
    20a6:	320a      	adds	r2, #10
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    20a8:	3008      	adds	r0, #8
    20aa:	1830      	adds	r0, r6, r0
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[9]);
    20ac:	18b2      	adds	r2, r6, r2
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    20ae:	742f      	strb	r7, [r5, #16]
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    20b0:	6068      	str	r0, [r5, #4]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 13;
    20b2:	7329      	strb	r1, [r5, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[9]);
    20b4:	60aa      	str	r2, [r5, #8]
    20b6:	e6cd      	b.n	1e54 <MiMAC_ReceivedPacket+0xdc>
    20b8:	20000910 	.word	0x20000910
    20bc:	200000a6 	.word	0x200000a6
    20c0:	20000000 	.word	0x20000000
    20c4:	200002dc 	.word	0x200002dc
    20c8:	2000097c 	.word	0x2000097c
    20cc:	20000295 	.word	0x20000295
    20d0:	200002c8 	.word	0x200002c8
    20d4:	0000262d 	.word	0x0000262d
    20d8:	20000998 	.word	0x20000998
    20dc:	20000918 	.word	0x20000918
    20e0:	20000908 	.word	0x20000908
    20e4:	00001341 	.word	0x00001341
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    20e8:	224e      	movs	r2, #78	; 0x4e
    20ea:	4353      	muls	r3, r2
    20ec:	18f2      	adds	r2, r6, r3
    20ee:	7910      	ldrb	r0, [r2, #4]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    20f0:	7952      	ldrb	r2, [r2, #5]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    20f2:	3913      	subs	r1, #19
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    20f4:	746a      	strb	r2, [r5, #17]
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    20f6:	001a      	movs	r2, r3
    20f8:	3208      	adds	r2, #8
    20fa:	18b2      	adds	r2, r6, r2
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    20fc:	3310      	adds	r3, #16
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    20fe:	606a      	str	r2, [r5, #4]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    2100:	18f2      	adds	r2, r6, r3
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    2102:	7428      	strb	r0, [r5, #16]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    2104:	7329      	strb	r1, [r5, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    2106:	60aa      	str	r2, [r5, #8]
    2108:	e735      	b.n	1f76 <MiMAC_ReceivedPacket+0x1fe>
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[12];
    210a:	4660      	mov	r0, ip
    210c:	7b40      	ldrb	r0, [r0, #13]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    210e:	9a03      	ldr	r2, [sp, #12]
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[12];
    2110:	7428      	strb	r0, [r5, #16]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[13];
    2112:	4660      	mov	r0, ip
    2114:	7b80      	ldrb	r0, [r0, #14]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    2116:	3212      	adds	r2, #18
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[13];
    2118:	7468      	strb	r0, [r5, #17]
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[14]);
    211a:	9803      	ldr	r0, [sp, #12]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    211c:	3915      	subs	r1, #21
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[14]);
    211e:	300f      	adds	r0, #15
    2120:	1830      	adds	r0, r6, r0
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    2122:	18b2      	adds	r2, r6, r2
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[14]);
    2124:	6068      	str	r0, [r5, #4]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    2126:	7329      	strb	r1, [r5, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    2128:	60aa      	str	r2, [r5, #8]
    212a:	e693      	b.n	1e54 <MiMAC_ReceivedPacket+0xdc>
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[13];
    212c:	4663      	mov	r3, ip
    212e:	7b9b      	ldrb	r3, [r3, #14]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[23]);
    2130:	9a03      	ldr	r2, [sp, #12]
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[13];
    2132:	742b      	strb	r3, [r5, #16]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[14];
    2134:	4663      	mov	r3, ip
    2136:	7bdb      	ldrb	r3, [r3, #15]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[23]);
    2138:	3218      	adds	r2, #24
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[14];
    213a:	746b      	strb	r3, [r5, #17]
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[15]);
    213c:	9b03      	ldr	r3, [sp, #12]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 27;
    213e:	391b      	subs	r1, #27
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[15]);
    2140:	3310      	adds	r3, #16
    2142:	18f3      	adds	r3, r6, r3
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[23]);
    2144:	18b2      	adds	r2, r6, r2
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[15]);
    2146:	606b      	str	r3, [r5, #4]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 27;
    2148:	7329      	strb	r1, [r5, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[23]);
    214a:	60aa      	str	r2, [r5, #8]
    214c:	e713      	b.n	1f76 <MiMAC_ReceivedPacket+0x1fe>
            MACRxPacket.flags.bits.secEn = 1;
    214e:	2208      	movs	r2, #8
            MACRxPacket.Payload = &(MACRxPacket.Payload[5]);
    2150:	68ab      	ldr	r3, [r5, #8]
    2152:	783c      	ldrb	r4, [r7, #0]
    2154:	3305      	adds	r3, #5
    2156:	60ab      	str	r3, [r5, #8]
            MACRxPacket.flags.bits.secEn = 1;
    2158:	782b      	ldrb	r3, [r5, #0]
    215a:	4313      	orrs	r3, r2
    215c:	702b      	strb	r3, [r5, #0]
        switch (RxBuffer[BankIndex].Payload[0] & 0x07) // check frame type
    215e:	464b      	mov	r3, r9
    2160:	4363      	muls	r3, r4
    2162:	18f3      	adds	r3, r6, r3
    2164:	785a      	ldrb	r2, [r3, #1]
    2166:	2307      	movs	r3, #7
    2168:	4013      	ands	r3, r2
    216a:	2b01      	cmp	r3, #1
    216c:	d08e      	beq.n	208c <STACK_SIZE+0x8c>
    216e:	2b00      	cmp	r3, #0
    2170:	d087      	beq.n	2082 <STACK_SIZE+0x82>
    2172:	2b03      	cmp	r3, #3
    2174:	d100      	bne.n	2178 <STACK_SIZE+0x178>
    2176:	e67c      	b.n	1e72 <MiMAC_ReceivedPacket+0xfa>
    if (BankIndex < BANK_SIZE) {
    2178:	2c13      	cmp	r4, #19
    217a:	d900      	bls.n	217e <STACK_SIZE+0x17e>
    217c:	e620      	b.n	1dc0 <MiMAC_ReceivedPacket+0x48>
        RxBuffer[BankIndex].PayloadLen = 0;
    217e:	234e      	movs	r3, #78	; 0x4e
    2180:	435c      	muls	r4, r3
    2182:	2300      	movs	r3, #0
    2184:	5533      	strb	r3, [r6, r4]
    2186:	e61b      	b.n	1dc0 <MiMAC_ReceivedPacket+0x48>
                    IncomingFrameCounter[i].Val = FrameCounter.Val;
    2188:	4641      	mov	r1, r8
    218a:	5099      	str	r1, [r3, r2]
    218c:	e731      	b.n	1ff2 <MiMAC_ReceivedPacket+0x27a>
                if ((ConnectionTable[i].status.bits.isValid) && isSameAddress(ConnectionTable[i].Address, MACRxPacket.SourceAddress)) {
    218e:	6869      	ldr	r1, [r5, #4]
    2190:	0020      	movs	r0, r4
    2192:	4b37      	ldr	r3, [pc, #220]	; (2270 <STACK_SIZE+0x270>)
    2194:	4798      	blx	r3
    2196:	2800      	cmp	r0, #0
    2198:	d100      	bne.n	219c <STACK_SIZE+0x19c>
    219a:	e700      	b.n	1f9e <MiMAC_ReceivedPacket+0x226>
    219c:	2300      	movs	r3, #0
    219e:	e6a3      	b.n	1ee8 <MiMAC_ReceivedPacket+0x170>
    21a0:	0020      	movs	r0, r4
    21a2:	6869      	ldr	r1, [r5, #4]
    21a4:	301e      	adds	r0, #30
    21a6:	4b32      	ldr	r3, [pc, #200]	; (2270 <STACK_SIZE+0x270>)
    21a8:	4798      	blx	r3
    21aa:	2800      	cmp	r0, #0
    21ac:	d100      	bne.n	21b0 <STACK_SIZE+0x1b0>
    21ae:	e702      	b.n	1fb6 <MiMAC_ReceivedPacket+0x23e>
    21b0:	2303      	movs	r3, #3
    21b2:	e699      	b.n	1ee8 <MiMAC_ReceivedPacket+0x170>
    21b4:	0020      	movs	r0, r4
    21b6:	6869      	ldr	r1, [r5, #4]
    21b8:	3014      	adds	r0, #20
    21ba:	4b2d      	ldr	r3, [pc, #180]	; (2270 <STACK_SIZE+0x270>)
    21bc:	4798      	blx	r3
    21be:	2800      	cmp	r0, #0
    21c0:	d100      	bne.n	21c4 <STACK_SIZE+0x1c4>
    21c2:	e6f3      	b.n	1fac <MiMAC_ReceivedPacket+0x234>
    21c4:	2302      	movs	r3, #2
    21c6:	e68f      	b.n	1ee8 <MiMAC_ReceivedPacket+0x170>
    21c8:	0020      	movs	r0, r4
    21ca:	6869      	ldr	r1, [r5, #4]
    21cc:	305a      	adds	r0, #90	; 0x5a
    21ce:	4b28      	ldr	r3, [pc, #160]	; (2270 <STACK_SIZE+0x270>)
    21d0:	4798      	blx	r3
    21d2:	2800      	cmp	r0, #0
    21d4:	d100      	bne.n	21d8 <STACK_SIZE+0x1d8>
    21d6:	e70c      	b.n	1ff2 <MiMAC_ReceivedPacket+0x27a>
    21d8:	2309      	movs	r3, #9
    21da:	e685      	b.n	1ee8 <MiMAC_ReceivedPacket+0x170>
    21dc:	0020      	movs	r0, r4
    21de:	6869      	ldr	r1, [r5, #4]
    21e0:	303c      	adds	r0, #60	; 0x3c
    21e2:	4b23      	ldr	r3, [pc, #140]	; (2270 <STACK_SIZE+0x270>)
    21e4:	4798      	blx	r3
    21e6:	2800      	cmp	r0, #0
    21e8:	d100      	bne.n	21ec <STACK_SIZE+0x1ec>
    21ea:	e6f3      	b.n	1fd4 <MiMAC_ReceivedPacket+0x25c>
    21ec:	2306      	movs	r3, #6
    21ee:	e67b      	b.n	1ee8 <MiMAC_ReceivedPacket+0x170>
    21f0:	0020      	movs	r0, r4
    21f2:	6869      	ldr	r1, [r5, #4]
    21f4:	3032      	adds	r0, #50	; 0x32
    21f6:	4b1e      	ldr	r3, [pc, #120]	; (2270 <STACK_SIZE+0x270>)
    21f8:	4798      	blx	r3
    21fa:	2800      	cmp	r0, #0
    21fc:	d100      	bne.n	2200 <STACK_SIZE+0x200>
    21fe:	e6e4      	b.n	1fca <MiMAC_ReceivedPacket+0x252>
    2200:	2305      	movs	r3, #5
    2202:	e671      	b.n	1ee8 <MiMAC_ReceivedPacket+0x170>
    2204:	0020      	movs	r0, r4
    2206:	6869      	ldr	r1, [r5, #4]
    2208:	3028      	adds	r0, #40	; 0x28
    220a:	4b19      	ldr	r3, [pc, #100]	; (2270 <STACK_SIZE+0x270>)
    220c:	4798      	blx	r3
    220e:	2800      	cmp	r0, #0
    2210:	d100      	bne.n	2214 <STACK_SIZE+0x214>
    2212:	e6d5      	b.n	1fc0 <MiMAC_ReceivedPacket+0x248>
    2214:	2304      	movs	r3, #4
    2216:	e667      	b.n	1ee8 <MiMAC_ReceivedPacket+0x170>
    2218:	0020      	movs	r0, r4
    221a:	6869      	ldr	r1, [r5, #4]
    221c:	3046      	adds	r0, #70	; 0x46
    221e:	4b14      	ldr	r3, [pc, #80]	; (2270 <STACK_SIZE+0x270>)
    2220:	4798      	blx	r3
    2222:	2800      	cmp	r0, #0
    2224:	d100      	bne.n	2228 <STACK_SIZE+0x228>
    2226:	e6da      	b.n	1fde <MiMAC_ReceivedPacket+0x266>
    2228:	2307      	movs	r3, #7
    222a:	e65d      	b.n	1ee8 <MiMAC_ReceivedPacket+0x170>
    222c:	0020      	movs	r0, r4
    222e:	6869      	ldr	r1, [r5, #4]
    2230:	3050      	adds	r0, #80	; 0x50
    2232:	4b0f      	ldr	r3, [pc, #60]	; (2270 <STACK_SIZE+0x270>)
    2234:	4798      	blx	r3
    2236:	2800      	cmp	r0, #0
    2238:	d100      	bne.n	223c <STACK_SIZE+0x23c>
    223a:	e6d5      	b.n	1fe8 <MiMAC_ReceivedPacket+0x270>
    223c:	2308      	movs	r3, #8
    223e:	e653      	b.n	1ee8 <MiMAC_ReceivedPacket+0x170>
            if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF) {
    2240:	4662      	mov	r2, ip
    2242:	79d2      	ldrb	r2, [r2, #7]
    2244:	2aff      	cmp	r2, #255	; 0xff
    2246:	d000      	beq.n	224a <STACK_SIZE+0x24a>
    2248:	e626      	b.n	1e98 <MiMAC_ReceivedPacket+0x120>
                MACRxPacket.flags.bits.broadcast = 1;
    224a:	3afb      	subs	r2, #251	; 0xfb
    224c:	702a      	strb	r2, [r5, #0]
    224e:	e623      	b.n	1e98 <MiMAC_ReceivedPacket+0x120>
            if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF) {
    2250:	4662      	mov	r2, ip
    2252:	79d2      	ldrb	r2, [r2, #7]
    2254:	2aff      	cmp	r2, #255	; 0xff
    2256:	d000      	beq.n	225a <STACK_SIZE+0x25a>
    2258:	e6f8      	b.n	204c <STACK_SIZE+0x4c>
                MACRxPacket.flags.bits.broadcast = 1;
    225a:	3afb      	subs	r2, #251	; 0xfb
    225c:	702a      	strb	r2, [r5, #0]
    225e:	e6f5      	b.n	204c <STACK_SIZE+0x4c>
            if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF) {
    2260:	4662      	mov	r2, ip
    2262:	79d2      	ldrb	r2, [r2, #7]
    2264:	2aff      	cmp	r2, #255	; 0xff
    2266:	d000      	beq.n	226a <STACK_SIZE+0x26a>
    2268:	e66c      	b.n	1f44 <MiMAC_ReceivedPacket+0x1cc>
                MACRxPacket.flags.bits.broadcast = 1;
    226a:	3afb      	subs	r2, #251	; 0xfb
    226c:	702a      	strb	r2, [r5, #0]
    226e:	e669      	b.n	1f44 <MiMAC_ReceivedPacket+0x1cc>
    2270:	0000262d 	.word	0x0000262d

00002274 <PHY_PacketReceieved>:

/*************************************************************************/ /**
*****************************************************************************/
// Handle Packet Received // ISR calls this routine
void PHY_PacketReceieved(void)
{
    2274:	b5f0      	push	{r4, r5, r6, r7, lr}
    2276:	46d6      	mov	lr, sl
    2278:	464f      	mov	r7, r9
    227a:	4646      	mov	r6, r8
    227c:	b5c0      	push	{r6, r7, lr}
    if (PHY_STATE_SLEEP == phyState) {
    227e:	4c50      	ldr	r4, [pc, #320]	; (23c0 <PHY_PacketReceieved+0x14c>)
{
    2280:	b082      	sub	sp, #8
    if (PHY_STATE_SLEEP == phyState) {
    2282:	7823      	ldrb	r3, [r4, #0]
    2284:	2b02      	cmp	r3, #2
    2286:	d009      	beq.n	229c <PHY_PacketReceieved+0x28>
    value = trx_reg_read(reg);
    2288:	200f      	movs	r0, #15
    228a:	4d4e      	ldr	r5, [pc, #312]	; (23c4 <PHY_PacketReceieved+0x150>)
    228c:	47a8      	blx	r5
        return;
    }
    if (phyReadRegister(RG_IRQ_STATUS) & (1 << TRX_END)) {
    228e:	0703      	lsls	r3, r0, #28
    2290:	d504      	bpl.n	229c <PHY_PacketReceieved+0x28>
        if (PHY_STATE_IDLE == phyState) {
    2292:	7823      	ldrb	r3, [r4, #0]
    2294:	2b01      	cmp	r3, #1
    2296:	d032      	beq.n	22fe <PHY_PacketReceieved+0x8a>
            }
            Received_LQI_Val = phyRxBuffer[i - 2];

            phyWaitState(TRX_STATUS_RX_AACK_ON);
        }
        else if (PHY_STATE_TX_WAIT_END == phyState) {
    2298:	2b03      	cmp	r3, #3
    229a:	d005      	beq.n	22a8 <PHY_PacketReceieved+0x34>

            phySetRxState();
            phyState = PHY_STATE_IDLE;
        }
    }
    229c:	b002      	add	sp, #8
    229e:	bc1c      	pop	{r2, r3, r4}
    22a0:	4690      	mov	r8, r2
    22a2:	4699      	mov	r9, r3
    22a4:	46a2      	mov	sl, r4
    22a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    value = trx_reg_read(reg);
    22a8:	2002      	movs	r0, #2
    22aa:	47a8      	blx	r5
            trx_status.bits.TX_FAIL = 0;
    22ac:	2104      	movs	r1, #4
    22ae:	4b46      	ldr	r3, [pc, #280]	; (23c8 <PHY_PacketReceieved+0x154>)
                = (phyReadRegister(RG_TRX_STATE) >> TRAC_STATUS) & 7;
    22b0:	0940      	lsrs	r0, r0, #5
            trx_status.bits.TX_FAIL = 0;
    22b2:	781a      	ldrb	r2, [r3, #0]
            if (TRAC_STATUS_SUCCESS == status) {
    22b4:	b2c0      	uxtb	r0, r0
            trx_status.bits.TX_FAIL = 0;
    22b6:	438a      	bics	r2, r1
    22b8:	701a      	strb	r2, [r3, #0]
            trx_status.bits.TX_PENDING_ACK = 0;
    22ba:	781a      	ldrb	r2, [r3, #0]
    22bc:	3902      	subs	r1, #2
    22be:	438a      	bics	r2, r1
    22c0:	701a      	strb	r2, [r3, #0]
            if (TRAC_STATUS_SUCCESS == status) {
    22c2:	2805      	cmp	r0, #5
    22c4:	d063      	beq.n	238e <PHY_PacketReceieved+0x11a>
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    22c6:	271f      	movs	r7, #31
    22c8:	4e40      	ldr	r6, [pc, #256]	; (23cc <PHY_PacketReceieved+0x158>)
    trx_reg_write(reg, value);
    22ca:	2103      	movs	r1, #3
    22cc:	2002      	movs	r0, #2
    22ce:	47b0      	blx	r6
    value = trx_reg_read(reg);
    22d0:	2001      	movs	r0, #1
    22d2:	47a8      	blx	r5
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    22d4:	4038      	ands	r0, r7
    22d6:	2808      	cmp	r0, #8
    22d8:	d1f7      	bne.n	22ca <PHY_PacketReceieved+0x56>
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    22da:	271f      	movs	r7, #31
    trx_reg_write(reg, value);
    22dc:	2108      	movs	r1, #8
    22de:	2002      	movs	r0, #2
    22e0:	47b0      	blx	r6
    value = trx_reg_read(reg);
    22e2:	2001      	movs	r0, #1
    22e4:	47a8      	blx	r5
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    22e6:	4038      	ands	r0, r7
    22e8:	2808      	cmp	r0, #8
    22ea:	d1f7      	bne.n	22dc <PHY_PacketReceieved+0x68>
    value = trx_reg_read(reg);
    22ec:	3007      	adds	r0, #7
    22ee:	47a8      	blx	r5
    if (phyRxState) {
    22f0:	4b37      	ldr	r3, [pc, #220]	; (23d0 <PHY_PacketReceieved+0x15c>)
    22f2:	781b      	ldrb	r3, [r3, #0]
    22f4:	2b00      	cmp	r3, #0
    22f6:	d14f      	bne.n	2398 <PHY_PacketReceieved+0x124>
            phyState = PHY_STATE_IDLE;
    22f8:	2301      	movs	r3, #1
    22fa:	7023      	strb	r3, [r4, #0]
    22fc:	e7ce      	b.n	229c <PHY_PacketReceieved+0x28>
    22fe:	4b35      	ldr	r3, [pc, #212]	; (23d4 <PHY_PacketReceieved+0x160>)
        if (PHY_STATE_IDLE == phyState) {
    2300:	2600      	movs	r6, #0
    2302:	4699      	mov	r9, r3
    2304:	001a      	movs	r2, r3
                if (RxBuffer[i].PayloadLen == 0) {
    2306:	7813      	ldrb	r3, [r2, #0]
    2308:	2b00      	cmp	r3, #0
    230a:	d03e      	beq.n	238a <PHY_PacketReceieved+0x116>
    230c:	3601      	adds	r6, #1
    230e:	324e      	adds	r2, #78	; 0x4e
            for (i = 0; i < BANK_SIZE; i++) {
    2310:	2e14      	cmp	r6, #20
    2312:	d1f8      	bne.n	2306 <PHY_PacketReceieved+0x92>
    2314:	2314      	movs	r3, #20
    2316:	4698      	mov	r8, r3
    2318:	36eb      	adds	r6, #235	; 0xeb
    value = trx_reg_read(reg);
    231a:	2007      	movs	r0, #7
    231c:	47a8      	blx	r5
            Received_RSSI_Val = PHY_RSSI_BASE_VAL + (uint8_t)phyReadRegister(RG_PHY_ED_LEVEL);
    231e:	4b2e      	ldr	r3, [pc, #184]	; (23d8 <PHY_PacketReceieved+0x164>)
    2320:	385b      	subs	r0, #91	; 0x5b
    2322:	7018      	strb	r0, [r3, #0]
            trx_frame_read(&size, 1);
    2324:	466b      	mov	r3, sp
    2326:	1ddf      	adds	r7, r3, #7
    2328:	4b2c      	ldr	r3, [pc, #176]	; (23dc <PHY_PacketReceieved+0x168>)
    232a:	2101      	movs	r1, #1
    232c:	0038      	movs	r0, r7
    232e:	469a      	mov	sl, r3
    2330:	4798      	blx	r3
            trx_frame_read(phyRxBuffer, size + 2 + 3); // +3 is ED, LQI and RX_STATUS bytes
    2332:	7839      	ldrb	r1, [r7, #0]
    2334:	4c2a      	ldr	r4, [pc, #168]	; (23e0 <PHY_PacketReceieved+0x16c>)
    2336:	3105      	adds	r1, #5
    2338:	0020      	movs	r0, r4
    233a:	b2c9      	uxtb	r1, r1
    233c:	47d0      	blx	sl
            RxBuffer[RxBank].PayloadLen = size + 2;
    233e:	234e      	movs	r3, #78	; 0x4e
    2340:	435e      	muls	r6, r3
    2342:	464b      	mov	r3, r9
    2344:	7838      	ldrb	r0, [r7, #0]
    2346:	3002      	adds	r0, #2
    2348:	b2c2      	uxtb	r2, r0
    234a:	559a      	strb	r2, [r3, r6]
            if (RxBuffer[RxBank].PayloadLen < RX_PACKET_SIZE) {
    234c:	2a4c      	cmp	r2, #76	; 0x4c
    234e:	d90b      	bls.n	2368 <PHY_PacketReceieved+0xf4>
    2350:	4643      	mov	r3, r8
    2352:	3b02      	subs	r3, #2
            Received_LQI_Val = phyRxBuffer[i - 2];
    2354:	5ce2      	ldrb	r2, [r4, r3]
    while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK)) {
    2356:	241f      	movs	r4, #31
            Received_LQI_Val = phyRxBuffer[i - 2];
    2358:	4b22      	ldr	r3, [pc, #136]	; (23e4 <PHY_PacketReceieved+0x170>)
    235a:	701a      	strb	r2, [r3, #0]
    value = trx_reg_read(reg);
    235c:	2001      	movs	r0, #1
    235e:	47a8      	blx	r5
    while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK)) {
    2360:	4020      	ands	r0, r4
    2362:	2816      	cmp	r0, #22
    2364:	d1fa      	bne.n	235c <PHY_PacketReceieved+0xe8>
    2366:	e799      	b.n	229c <PHY_PacketReceieved+0x28>
                trx_status.bits.RX_BUFFERED = 1;
    2368:	2120      	movs	r1, #32
    236a:	4a17      	ldr	r2, [pc, #92]	; (23c8 <PHY_PacketReceieved+0x154>)
                    RxBuffer[RxBank].Payload[i - 1] = phyRxBuffer[i];
    236c:	444e      	add	r6, r9
                trx_status.bits.RX_BUFFERED = 1;
    236e:	7813      	ldrb	r3, [r2, #0]
    2370:	430b      	orrs	r3, r1
    2372:	7013      	strb	r3, [r2, #0]
                for (i = 1; i <= size + 2; i++) {
    2374:	2201      	movs	r2, #1
    2376:	2301      	movs	r3, #1
                    RxBuffer[RxBank].Payload[i - 1] = phyRxBuffer[i];
    2378:	5ca1      	ldrb	r1, [r4, r2]
                for (i = 1; i <= size + 2; i++) {
    237a:	3301      	adds	r3, #1
    237c:	b2db      	uxtb	r3, r3
                    RxBuffer[RxBank].Payload[i - 1] = phyRxBuffer[i];
    237e:	54b1      	strb	r1, [r6, r2]
                for (i = 1; i <= size + 2; i++) {
    2380:	001a      	movs	r2, r3
    2382:	4283      	cmp	r3, r0
    2384:	ddf8      	ble.n	2378 <PHY_PacketReceieved+0x104>
    2386:	3b02      	subs	r3, #2
    2388:	e7e4      	b.n	2354 <PHY_PacketReceieved+0xe0>
                if (RxBuffer[i].PayloadLen == 0) {
    238a:	46b0      	mov	r8, r6
    238c:	e7c5      	b.n	231a <PHY_PacketReceieved+0xa6>
                trx_status.bits.TX_FAIL = 1;
    238e:	2104      	movs	r1, #4
    2390:	781a      	ldrb	r2, [r3, #0]
    2392:	430a      	orrs	r2, r1
    2394:	701a      	strb	r2, [r3, #0]
    2396:	e796      	b.n	22c6 <PHY_PacketReceieved+0x52>
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    2398:	271f      	movs	r7, #31
    trx_reg_write(reg, value);
    239a:	2103      	movs	r1, #3
    239c:	2002      	movs	r0, #2
    239e:	47b0      	blx	r6
    value = trx_reg_read(reg);
    23a0:	2001      	movs	r0, #1
    23a2:	47a8      	blx	r5
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    23a4:	4038      	ands	r0, r7
    23a6:	2808      	cmp	r0, #8
    23a8:	d1f7      	bne.n	239a <PHY_PacketReceieved+0x126>
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    23aa:	271f      	movs	r7, #31
    trx_reg_write(reg, value);
    23ac:	2116      	movs	r1, #22
    23ae:	2002      	movs	r0, #2
    23b0:	47b0      	blx	r6
    value = trx_reg_read(reg);
    23b2:	2001      	movs	r0, #1
    23b4:	47a8      	blx	r5
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    23b6:	4038      	ands	r0, r7
    23b8:	2816      	cmp	r0, #22
    23ba:	d1f7      	bne.n	23ac <PHY_PacketReceieved+0x138>
    23bc:	e79c      	b.n	22f8 <PHY_PacketReceieved+0x84>
    23be:	46c0      	nop			; (mov r8, r8)
    23c0:	20000129 	.word	0x20000129
    23c4:	000053e5 	.word	0x000053e5
    23c8:	20000910 	.word	0x20000910
    23cc:	000054e1 	.word	0x000054e1
    23d0:	20000128 	.word	0x20000128
    23d4:	200002dc 	.word	0x200002dc
    23d8:	200002c8 	.word	0x200002c8
    23dc:	000055ed 	.word	0x000055ed
    23e0:	200000a8 	.word	0x200000a8
    23e4:	20000295 	.word	0x20000295

000023e8 <Total_Connections>:
        if (ConnectionTable[i].Address[0] != 0x00 || ConnectionTable[i].Address[1] != 0x00 || ConnectionTable[i].Address[2] != 0x00)
        {
            count++;
        }
    #else
        if (ConnectionTable[i].status.bits.isValid)
    23e8:	4b13      	ldr	r3, [pc, #76]	; (2438 <Total_Connections+0x50>)
    23ea:	7a58      	ldrb	r0, [r3, #9]
    23ec:	7cda      	ldrb	r2, [r3, #19]
    23ee:	09c0      	lsrs	r0, r0, #7
    23f0:	09d2      	lsrs	r2, r2, #7
    23f2:	1880      	adds	r0, r0, r2
    23f4:	7f5a      	ldrb	r2, [r3, #29]
    23f6:	09d2      	lsrs	r2, r2, #7
    23f8:	1880      	adds	r0, r0, r2
    23fa:	2227      	movs	r2, #39	; 0x27
    23fc:	5c9a      	ldrb	r2, [r3, r2]
    23fe:	09d2      	lsrs	r2, r2, #7
    2400:	1880      	adds	r0, r0, r2
    2402:	2231      	movs	r2, #49	; 0x31
    2404:	5c9a      	ldrb	r2, [r3, r2]
    2406:	09d2      	lsrs	r2, r2, #7
    2408:	1880      	adds	r0, r0, r2
    240a:	223b      	movs	r2, #59	; 0x3b
    240c:	5c9a      	ldrb	r2, [r3, r2]
    240e:	09d2      	lsrs	r2, r2, #7
    2410:	1880      	adds	r0, r0, r2
    2412:	2245      	movs	r2, #69	; 0x45
    2414:	5c9a      	ldrb	r2, [r3, r2]
    2416:	09d2      	lsrs	r2, r2, #7
    2418:	1880      	adds	r0, r0, r2
    241a:	224f      	movs	r2, #79	; 0x4f
    241c:	5c9a      	ldrb	r2, [r3, r2]
    241e:	09d2      	lsrs	r2, r2, #7
    2420:	1880      	adds	r0, r0, r2
    2422:	2259      	movs	r2, #89	; 0x59
    2424:	5c9a      	ldrb	r2, [r3, r2]
    2426:	09d2      	lsrs	r2, r2, #7
    2428:	1880      	adds	r0, r0, r2
    242a:	2263      	movs	r2, #99	; 0x63
    242c:	5c9b      	ldrb	r3, [r3, r2]
        {
            count++;
        }
    #endif      
    }
    return count;
    242e:	09db      	lsrs	r3, r3, #7
    2430:	18c0      	adds	r0, r0, r3
    2432:	b2c0      	uxtb	r0, r0
}
    2434:	4770      	bx	lr
    2436:	46c0      	nop			; (mov r8, r8)
    2438:	20000918 	.word	0x20000918

0000243c <MiApp_ProtocolInit>:
	#if defined(ENABLE_NETWORK_FREEZER)
	NVMInit();
	#endif
	
	//clear all status bits
	P2PStatus.Val = 0;
    243c:	2200      	movs	r2, #0
{
    243e:	b570      	push	{r4, r5, r6, lr}
	P2PStatus.Val = 0;
    2440:	4b55      	ldr	r3, [pc, #340]	; (2598 <MiApp_ProtocolInit+0x15c>)
{
    2442:	0004      	movs	r4, r0
	P2PStatus.Val = 0;
    2444:	701a      	strb	r2, [r3, #0]
	
	#if defined (USE_MAC_ADDRESS)
	// Each SAM MCU has a unique address stored in Flash Memory
	uint32_t val_1, val_2, val_3, val_4;
	uint32_t *ptr1 = (uint32_t *)0x0080A00C;
	val_1 = *ptr1;
    2446:	4b55      	ldr	r3, [pc, #340]	; (259c <MiApp_ProtocolInit+0x160>)
	val_2 = *ptr;
	ptr++;
	val_3 = *ptr;
	ptr++;
	val_4 = *ptr;
	myLongAddress[0] = (val_1 & 0xFF) + ((val_1>>8) & 0xFF);
    2448:	4d55      	ldr	r5, [pc, #340]	; (25a0 <MiApp_ProtocolInit+0x164>)
	val_1 = *ptr1;
    244a:	6818      	ldr	r0, [r3, #0]
	val_2 = *ptr;
    244c:	4b55      	ldr	r3, [pc, #340]	; (25a4 <MiApp_ProtocolInit+0x168>)
	myLongAddress[0] = (val_1 & 0xFF) + ((val_1>>8) & 0xFF);
    244e:	0a06      	lsrs	r6, r0, #8
	val_2 = *ptr;
    2450:	6819      	ldr	r1, [r3, #0]
	val_3 = *ptr;
    2452:	4b55      	ldr	r3, [pc, #340]	; (25a8 <MiApp_ProtocolInit+0x16c>)
	myLongAddress[0] = (val_1 & 0xFF) + ((val_1>>8) & 0xFF);
    2454:	1836      	adds	r6, r6, r0
	val_3 = *ptr;
    2456:	681a      	ldr	r2, [r3, #0]
	val_4 = *ptr;
    2458:	4b54      	ldr	r3, [pc, #336]	; (25ac <MiApp_ProtocolInit+0x170>)
{
    245a:	b084      	sub	sp, #16
	val_4 = *ptr;
    245c:	681b      	ldr	r3, [r3, #0]
	myLongAddress[0] = (val_1 & 0xFF) + ((val_1>>8) & 0xFF);
    245e:	702e      	strb	r6, [r5, #0]
	myLongAddress[1] = ((val_1>>16) & 0xFF) + ((val_1)>>24 & 0xFF);
    2460:	0c06      	lsrs	r6, r0, #16
    2462:	0e00      	lsrs	r0, r0, #24
    2464:	1830      	adds	r0, r6, r0
    2466:	7068      	strb	r0, [r5, #1]
	myLongAddress[2] = (val_2 & 0xFF) + ((val_2>>8) & 0xFF);
    2468:	0a08      	lsrs	r0, r1, #8
    246a:	1840      	adds	r0, r0, r1
    246c:	70a8      	strb	r0, [r5, #2]
	myLongAddress[3] = ((val_2>>16) & 0xFF) + ((val_2)>>24 & 0xFF);
    246e:	0c08      	lsrs	r0, r1, #16
    2470:	0e09      	lsrs	r1, r1, #24
    2472:	1841      	adds	r1, r0, r1
    2474:	70e9      	strb	r1, [r5, #3]
	myLongAddress[4] = (val_3 & 0xFF) + ((val_3>>8) & 0xFF);
    2476:	0a11      	lsrs	r1, r2, #8
    2478:	1889      	adds	r1, r1, r2
    247a:	7129      	strb	r1, [r5, #4]
	myLongAddress[5] = ((val_3>>16) & 0xFF) + ((val_3)>>24 & 0xFF);
    247c:	0c11      	lsrs	r1, r2, #16
    247e:	0e12      	lsrs	r2, r2, #24
    2480:	188a      	adds	r2, r1, r2
    2482:	716a      	strb	r2, [r5, #5]
	myLongAddress[6] = (val_4 & 0xFF) + ((val_4>>8) & 0xFF);
    2484:	0a1a      	lsrs	r2, r3, #8
    2486:	18d2      	adds	r2, r2, r3
    2488:	71aa      	strb	r2, [r5, #6]
	myLongAddress[7] = ((val_4>>16) & 0xFF) + ((val_4)>>24 & 0xFF);
    248a:	0c1a      	lsrs	r2, r3, #16
    248c:	0e1b      	lsrs	r3, r3, #24
    248e:	18d3      	adds	r3, r2, r3
    2490:	71eb      	strb	r3, [r5, #7]
	myLongAddress[6] = EUI_6;
	myLongAddress[7] = EUI_7;
	#endif

	
	if (!bNetworkFreezer)
    2492:	2c00      	cmp	r4, #0
    2494:	d142      	bne.n	251c <MiApp_ProtocolInit+0xe0>
	{
		for(i = 0; i < CONNECTION_SIZE; i++)
		{
			ConnectionTable[i].status.Val = 0;
    2496:	2227      	movs	r2, #39	; 0x27
    2498:	4b45      	ldr	r3, [pc, #276]	; (25b0 <MiApp_ProtocolInit+0x174>)
    249a:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].Address[0] = 0x00;
			ConnectionTable[i].Address[1] = 0x00;
			ConnectionTable[i].Address[2] = 0x00;
    249c:	3a07      	subs	r2, #7
			ConnectionTable[i].Address[0] = 0x00;
    249e:	779c      	strb	r4, [r3, #30]
			ConnectionTable[i].Address[1] = 0x00;
    24a0:	77dc      	strb	r4, [r3, #31]
			ConnectionTable[i].Address[2] = 0x00;
    24a2:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].status.Val = 0;
    24a4:	3211      	adds	r2, #17
    24a6:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].Address[0] = 0x00;
    24a8:	3a09      	subs	r2, #9
    24aa:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].Address[1] = 0x00;
    24ac:	3201      	adds	r2, #1
    24ae:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].Address[2] = 0x00;
    24b0:	3201      	adds	r2, #1
    24b2:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].status.Val = 0;
    24b4:	3211      	adds	r2, #17
    24b6:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].Address[0] = 0x00;
    24b8:	3a09      	subs	r2, #9
    24ba:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].Address[1] = 0x00;
    24bc:	3201      	adds	r2, #1
    24be:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].Address[2] = 0x00;
    24c0:	3201      	adds	r2, #1
    24c2:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].status.Val = 0;
    24c4:	3211      	adds	r2, #17
    24c6:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].Address[0] = 0x00;
    24c8:	3a09      	subs	r2, #9
    24ca:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].Address[1] = 0x00;
    24cc:	3201      	adds	r2, #1
    24ce:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].Address[2] = 0x00;
    24d0:	3201      	adds	r2, #1
    24d2:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].status.Val = 0;
    24d4:	3211      	adds	r2, #17
    24d6:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].Address[0] = 0x00;
    24d8:	3a09      	subs	r2, #9
    24da:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].Address[1] = 0x00;
    24dc:	3201      	adds	r2, #1
    24de:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].Address[2] = 0x00;
    24e0:	3201      	adds	r2, #1
			ConnectionTable[i].status.Val = 0;
    24e2:	725c      	strb	r4, [r3, #9]
			ConnectionTable[i].Address[0] = 0x00;
    24e4:	701c      	strb	r4, [r3, #0]
			ConnectionTable[i].Address[1] = 0x00;
    24e6:	705c      	strb	r4, [r3, #1]
			ConnectionTable[i].Address[2] = 0x00;
    24e8:	709c      	strb	r4, [r3, #2]
			ConnectionTable[i].status.Val = 0;
    24ea:	74dc      	strb	r4, [r3, #19]
			ConnectionTable[i].Address[0] = 0x00;
    24ec:	729c      	strb	r4, [r3, #10]
			ConnectionTable[i].Address[1] = 0x00;
    24ee:	72dc      	strb	r4, [r3, #11]
			ConnectionTable[i].Address[2] = 0x00;
    24f0:	731c      	strb	r4, [r3, #12]
			ConnectionTable[i].status.Val = 0;
    24f2:	775c      	strb	r4, [r3, #29]
			ConnectionTable[i].Address[0] = 0x00;
    24f4:	751c      	strb	r4, [r3, #20]
			ConnectionTable[i].Address[1] = 0x00;
    24f6:	755c      	strb	r4, [r3, #21]
			ConnectionTable[i].Address[2] = 0x00;
    24f8:	759c      	strb	r4, [r3, #22]
    24fa:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].status.Val = 0;
    24fc:	3211      	adds	r2, #17
    24fe:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].Address[0] = 0x00;
    2500:	3a09      	subs	r2, #9
    2502:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].Address[1] = 0x00;
    2504:	3201      	adds	r2, #1
    2506:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].Address[2] = 0x00;
    2508:	3201      	adds	r2, #1
    250a:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].status.Val = 0;
    250c:	3211      	adds	r2, #17
    250e:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].Address[0] = 0x00;
    2510:	3a09      	subs	r2, #9
    2512:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].Address[1] = 0x00;
    2514:	3201      	adds	r2, #1
    2516:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].Address[2] = 0x00;
    2518:	3201      	adds	r2, #1
    251a:	549c      	strb	r4, [r3, r2]
			permanent_connections[i] = 0x00;
			#endif
		}
	}
	
	TxData = 0;
    251c:	2200      	movs	r2, #0
    251e:	4b25      	ldr	r3, [pc, #148]	; (25b4 <MiApp_ProtocolInit+0x178>)
    2520:	2100      	movs	r1, #0
    2522:	701a      	strb	r2, [r3, #0]
    2524:	4824      	ldr	r0, [pc, #144]	; (25b8 <MiApp_ProtocolInit+0x17c>)
    2526:	3228      	adds	r2, #40	; 0x28
    2528:	4b24      	ldr	r3, [pc, #144]	; (25bc <MiApp_ProtocolInit+0x180>)
    252a:	4798      	blx	r3
	myPANID.Val = MY_PAN_ID;
	#endif

	
	initValue.PAddress = myLongAddress;
	initValue.actionFlags.bits.CCAEnable = 1;
    252c:	2102      	movs	r1, #2
	myPANID.Val = MY_PAN_ID;
    252e:	4e24      	ldr	r6, [pc, #144]	; (25c0 <MiApp_ProtocolInit+0x184>)
    2530:	4b24      	ldr	r3, [pc, #144]	; (25c4 <MiApp_ProtocolInit+0x188>)
	initValue.PAddress = myLongAddress;
    2532:	aa02      	add	r2, sp, #8
	myPANID.Val = MY_PAN_ID;
    2534:	8033      	strh	r3, [r6, #0]
	initValue.actionFlags.bits.CCAEnable = 1;
    2536:	7813      	ldrb	r3, [r2, #0]
	initValue.actionFlags.bits.PAddrLength = MY_ADDRESS_LENGTH;
	initValue.actionFlags.bits.NetworkFreezer = bNetworkFreezer;
    2538:	2001      	movs	r0, #1
	initValue.actionFlags.bits.CCAEnable = 1;
    253a:	430b      	orrs	r3, r1
	initValue.actionFlags.bits.PAddrLength = MY_ADDRESS_LENGTH;
    253c:	2187      	movs	r1, #135	; 0x87
    253e:	400b      	ands	r3, r1
    2540:	2140      	movs	r1, #64	; 0x40
	initValue.actionFlags.bits.NetworkFreezer = bNetworkFreezer;
    2542:	4004      	ands	r4, r0
	initValue.actionFlags.bits.PAddrLength = MY_ADDRESS_LENGTH;
    2544:	430b      	orrs	r3, r1
	initValue.actionFlags.bits.NetworkFreezer = bNetworkFreezer;
    2546:	00a1      	lsls	r1, r4, #2
    2548:	24c3      	movs	r4, #195	; 0xc3
    254a:	401c      	ands	r4, r3
	initValue.actionFlags.bits.RepeaterMode = 0;
    254c:	430c      	orrs	r4, r1
    254e:	4384      	bics	r4, r0
    2550:	7014      	strb	r4, [r2, #0]

	MiMAC_Init(initValue);
    2552:	0029      	movs	r1, r5
    2554:	4b1c      	ldr	r3, [pc, #112]	; (25c8 <MiApp_ProtocolInit+0x18c>)
    2556:	9802      	ldr	r0, [sp, #8]
    2558:	4798      	blx	r3
	

	
	#if defined(IEEE_802_15_4)
	{
		uint16_t tmp = 0xFFFF;
    255a:	466b      	mov	r3, sp
    255c:	1d98      	adds	r0, r3, #6
    255e:	2301      	movs	r3, #1
    2560:	425b      	negs	r3, r3
    2562:	8003      	strh	r3, [r0, #0]
		MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    2564:	0031      	movs	r1, r6
    2566:	4b19      	ldr	r3, [pc, #100]	; (25cc <MiApp_ProtocolInit+0x190>)
    2568:	4798      	blx	r3
	}
	#endif
	
	MiApp_SetChannel(currentChannel);
    256a:	4c19      	ldr	r4, [pc, #100]	; (25d0 <MiApp_ProtocolInit+0x194>)


 
bool MiApp_SetChannel(uint8_t channel)
{
    if( MiMAC_SetChannel(channel, 0) )
    256c:	2100      	movs	r1, #0
	MiApp_SetChannel(currentChannel);
    256e:	7825      	ldrb	r5, [r4, #0]
    if( MiMAC_SetChannel(channel, 0) )
    2570:	4b18      	ldr	r3, [pc, #96]	; (25d4 <MiApp_ProtocolInit+0x198>)
    2572:	0028      	movs	r0, r5
    2574:	4798      	blx	r3
    2576:	2800      	cmp	r0, #0
    2578:	d000      	beq.n	257c <MiApp_ProtocolInit+0x140>
    {
        currentChannel = channel;
    257a:	7025      	strb	r5, [r4, #0]
	P2PCapacityInfo |= (ConnMode << 4);
    257c:	2209      	movs	r2, #9
    257e:	4b16      	ldr	r3, [pc, #88]	; (25d8 <MiApp_ProtocolInit+0x19c>)
	ENABLE_TRX_IRQ();
    2580:	2100      	movs	r1, #0
	P2PCapacityInfo |= (ConnMode << 4);
    2582:	781b      	ldrb	r3, [r3, #0]
	ENABLE_TRX_IRQ();
    2584:	2000      	movs	r0, #0
	P2PCapacityInfo |= (ConnMode << 4);
    2586:	011b      	lsls	r3, r3, #4
    2588:	4313      	orrs	r3, r2
    258a:	4a14      	ldr	r2, [pc, #80]	; (25dc <MiApp_ProtocolInit+0x1a0>)
    258c:	7013      	strb	r3, [r2, #0]
	ENABLE_TRX_IRQ();
    258e:	4b14      	ldr	r3, [pc, #80]	; (25e0 <MiApp_ProtocolInit+0x1a4>)
    2590:	4798      	blx	r3
}
    2592:	2001      	movs	r0, #1
    2594:	b004      	add	sp, #16
    2596:	bd70      	pop	{r4, r5, r6, pc}
    2598:	200009c4 	.word	0x200009c4
    259c:	0080a00c 	.word	0x0080a00c
    25a0:	200009f0 	.word	0x200009f0
    25a4:	0080a040 	.word	0x0080a040
    25a8:	0080a044 	.word	0x0080a044
    25ac:	0080a048 	.word	0x0080a048
    25b0:	20000918 	.word	0x20000918
    25b4:	200009c5 	.word	0x200009c5
    25b8:	20000998 	.word	0x20000998
    25bc:	00007da3 	.word	0x00007da3
    25c0:	20000994 	.word	0x20000994
    25c4:	00001111 	.word	0x00001111
    25c8:	000017b9 	.word	0x000017b9
    25cc:	00000e61 	.word	0x00000e61
    25d0:	2000012a 	.word	0x2000012a
    25d4:	00001785 	.word	0x00001785
    25d8:	20000014 	.word	0x20000014
    25dc:	20000990 	.word	0x20000990
    25e0:	00003289 	.word	0x00003289

000025e4 <MiApp_BroadcastPacket>:
{
    25e4:	b570      	push	{r4, r5, r6, lr}
    25e6:	4b0d      	ldr	r3, [pc, #52]	; (261c <MiApp_BroadcastPacket+0x38>)
    tParam.flags.Val = 0;
    25e8:	2500      	movs	r5, #0
    25ea:	8819      	ldrh	r1, [r3, #0]
    tParam.flags.bits.secEn = SecurityEnabled;
    25ec:	2301      	movs	r3, #1
{
    25ee:	b086      	sub	sp, #24
    tParam.flags.Val = 0;
    25f0:	aa03      	add	r2, sp, #12
    status = MiMAC_SendPacket(tParam, TxBuffer, TxData); 
    25f2:	4c0b      	ldr	r4, [pc, #44]	; (2620 <MiApp_BroadcastPacket+0x3c>)
    tParam.flags.bits.secEn = SecurityEnabled;
    25f4:	4018      	ands	r0, r3
        tParam.altDestAddr = (Broadcast) ? true : false;
    25f6:	7213      	strb	r3, [r2, #8]
    tParam.flags.bits.secEn = SecurityEnabled;
    25f8:	00c0      	lsls	r0, r0, #3
        tParam.flags.bits.sourcePrsnt = 1;
    25fa:	3b7d      	subs	r3, #125	; 0x7d
    25fc:	4318      	orrs	r0, r3
    status = MiMAC_SendPacket(tParam, TxBuffer, TxData); 
    25fe:	7823      	ldrb	r3, [r4, #0]
        tParam.altSrcAddr = 0;
    2600:	7255      	strb	r5, [r2, #9]
        tParam.flags.bits.sourcePrsnt = 1;
    2602:	7010      	strb	r0, [r2, #0]
        tParam.DestPANID.Val = DestinationPANID.Val;
    2604:	8151      	strh	r1, [r2, #10]
    status = MiMAC_SendPacket(tParam, TxBuffer, TxData); 
    2606:	9803      	ldr	r0, [sp, #12]
    2608:	9300      	str	r3, [sp, #0]
    260a:	2100      	movs	r1, #0
    260c:	4b05      	ldr	r3, [pc, #20]	; (2624 <MiApp_BroadcastPacket+0x40>)
    260e:	9a05      	ldr	r2, [sp, #20]
    2610:	4e05      	ldr	r6, [pc, #20]	; (2628 <MiApp_BroadcastPacket+0x44>)
    2612:	47b0      	blx	r6
    TxData = 0;
    2614:	7025      	strb	r5, [r4, #0]
}
    2616:	b006      	add	sp, #24
    2618:	bd70      	pop	{r4, r5, r6, pc}
    261a:	46c0      	nop			; (mov r8, r8)
    261c:	20000994 	.word	0x20000994
    2620:	200009c5 	.word	0x200009c5
    2624:	200009c8 	.word	0x200009c8
    2628:	00001999 	.word	0x00001999

0000262c <isSameAddress>:
        if( Address1[i] != Address2[i] )
    262c:	780a      	ldrb	r2, [r1, #0]
    262e:	7803      	ldrb	r3, [r0, #0]
    2630:	429a      	cmp	r2, r3
    2632:	d11e      	bne.n	2672 <isSameAddress+0x46>
    2634:	7842      	ldrb	r2, [r0, #1]
    2636:	784b      	ldrb	r3, [r1, #1]
    2638:	429a      	cmp	r2, r3
    263a:	d11a      	bne.n	2672 <isSameAddress+0x46>
    263c:	7882      	ldrb	r2, [r0, #2]
    263e:	788b      	ldrb	r3, [r1, #2]
    2640:	429a      	cmp	r2, r3
    2642:	d116      	bne.n	2672 <isSameAddress+0x46>
    2644:	78c2      	ldrb	r2, [r0, #3]
    2646:	78cb      	ldrb	r3, [r1, #3]
    2648:	429a      	cmp	r2, r3
    264a:	d112      	bne.n	2672 <isSameAddress+0x46>
    264c:	7902      	ldrb	r2, [r0, #4]
    264e:	790b      	ldrb	r3, [r1, #4]
    2650:	429a      	cmp	r2, r3
    2652:	d10e      	bne.n	2672 <isSameAddress+0x46>
    2654:	7942      	ldrb	r2, [r0, #5]
    2656:	794b      	ldrb	r3, [r1, #5]
    2658:	429a      	cmp	r2, r3
    265a:	d10a      	bne.n	2672 <isSameAddress+0x46>
    265c:	7982      	ldrb	r2, [r0, #6]
    265e:	798b      	ldrb	r3, [r1, #6]
    2660:	429a      	cmp	r2, r3
    2662:	d106      	bne.n	2672 <isSameAddress+0x46>
    2664:	79cb      	ldrb	r3, [r1, #7]
    2666:	79c0      	ldrb	r0, [r0, #7]
    2668:	1ac0      	subs	r0, r0, r3
    266a:	4243      	negs	r3, r0
    266c:	4158      	adcs	r0, r3
    266e:	b2c0      	uxtb	r0, r0
}
    2670:	4770      	bx	lr
            return false;
    2672:	2000      	movs	r0, #0
    2674:	e7fc      	b.n	2670 <isSameAddress+0x44>
    2676:	46c0      	nop			; (mov r8, r8)

00002678 <MiApp_DiscardMessage>:
    P2PStatus.bits.RxHasUserData = 0;
    2678:	2108      	movs	r1, #8
{
    267a:	b510      	push	{r4, lr}
    P2PStatus.bits.RxHasUserData = 0;
    267c:	4a03      	ldr	r2, [pc, #12]	; (268c <MiApp_DiscardMessage+0x14>)
    267e:	7813      	ldrb	r3, [r2, #0]
    2680:	438b      	bics	r3, r1
    2682:	7013      	strb	r3, [r2, #0]
    MiMAC_DiscardPacket();
    2684:	4b02      	ldr	r3, [pc, #8]	; (2690 <MiApp_DiscardMessage+0x18>)
    2686:	4798      	blx	r3
}
    2688:	bd10      	pop	{r4, pc}
    268a:	46c0      	nop			; (mov r8, r8)
    268c:	200009c4 	.word	0x200009c4
    2690:	00001d5d 	.word	0x00001d5d

00002694 <MiApp_SetChannel>:
{
    2694:	b510      	push	{r4, lr}
    if( MiMAC_SetChannel(channel, 0) )
    2696:	2100      	movs	r1, #0
    2698:	4b03      	ldr	r3, [pc, #12]	; (26a8 <MiApp_SetChannel+0x14>)
{
    269a:	0004      	movs	r4, r0
    if( MiMAC_SetChannel(channel, 0) )
    269c:	4798      	blx	r3
    269e:	2800      	cmp	r0, #0
    26a0:	d001      	beq.n	26a6 <MiApp_SetChannel+0x12>
        currentChannel = channel;
    26a2:	4b02      	ldr	r3, [pc, #8]	; (26ac <MiApp_SetChannel+0x18>)
    26a4:	701c      	strb	r4, [r3, #0]
            nvmPutCurrentChannel(&currentChannel);
        #endif
        return true;
    }
    return false;
}
    26a6:	bd10      	pop	{r4, pc}
    26a8:	00001785 	.word	0x00001785
    26ac:	2000012a 	.word	0x2000012a

000026b0 <AddConnection>:
     *                  connection operation ends if an entry is added 
     *                  successfully
     *
     ********************************************************************/
    uint8_t AddConnection(void)
    {
    26b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    26b2:	464f      	mov	r7, r9
    26b4:	46d6      	mov	lr, sl
    26b6:	4646      	mov	r6, r8
        {
            // check if the entry is valid
            if( ConnectionTable[i].status.bits.isValid )
            {
                // check if the entry address matches source address of current received packet
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    26b8:	4b6b      	ldr	r3, [pc, #428]	; (2868 <AddConnection+0x1b8>)
    26ba:	4d6c      	ldr	r5, [pc, #432]	; (286c <AddConnection+0x1bc>)
    {
    26bc:	b5c0      	push	{r6, r7, lr}
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    26be:	4699      	mov	r9, r3
    26c0:	0029      	movs	r1, r5
    26c2:	2200      	movs	r2, #0
        uint8_t connectionSlot = 0xFF;
    26c4:	27ff      	movs	r7, #255	; 0xff
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    26c6:	685c      	ldr	r4, [r3, #4]
            if( ConnectionTable[i].status.bits.isValid )
    26c8:	0093      	lsls	r3, r2, #2
    26ca:	189b      	adds	r3, r3, r2
    26cc:	005b      	lsls	r3, r3, #1
    26ce:	18eb      	adds	r3, r5, r3
    26d0:	7a5b      	ldrb	r3, [r3, #9]
    26d2:	b2d6      	uxtb	r6, r2
    26d4:	09db      	lsrs	r3, r3, #7
    26d6:	d100      	bne.n	26da <AddConnection+0x2a>
    26d8:	e0a4      	b.n	2824 <AddConnection+0x174>
        if( Address1[i] != Address2[i] )
    26da:	7820      	ldrb	r0, [r4, #0]
    26dc:	780b      	ldrb	r3, [r1, #0]
    26de:	4298      	cmp	r0, r3
    26e0:	d000      	beq.n	26e4 <AddConnection+0x34>
    26e2:	e0a2      	b.n	282a <AddConnection+0x17a>
    26e4:	7860      	ldrb	r0, [r4, #1]
    26e6:	784b      	ldrb	r3, [r1, #1]
    26e8:	4298      	cmp	r0, r3
    26ea:	d000      	beq.n	26ee <AddConnection+0x3e>
    26ec:	e09d      	b.n	282a <AddConnection+0x17a>
    26ee:	78a0      	ldrb	r0, [r4, #2]
    26f0:	788b      	ldrb	r3, [r1, #2]
    26f2:	4298      	cmp	r0, r3
    26f4:	d000      	beq.n	26f8 <AddConnection+0x48>
    26f6:	e098      	b.n	282a <AddConnection+0x17a>
    26f8:	78e3      	ldrb	r3, [r4, #3]
    26fa:	469c      	mov	ip, r3
    26fc:	78cb      	ldrb	r3, [r1, #3]
    26fe:	459c      	cmp	ip, r3
    2700:	d000      	beq.n	2704 <AddConnection+0x54>
    2702:	e092      	b.n	282a <AddConnection+0x17a>
    2704:	7923      	ldrb	r3, [r4, #4]
    2706:	469c      	mov	ip, r3
    2708:	790b      	ldrb	r3, [r1, #4]
    270a:	459c      	cmp	ip, r3
    270c:	d000      	beq.n	2710 <AddConnection+0x60>
    270e:	e08c      	b.n	282a <AddConnection+0x17a>
    2710:	7963      	ldrb	r3, [r4, #5]
    2712:	469c      	mov	ip, r3
    2714:	794b      	ldrb	r3, [r1, #5]
    2716:	459c      	cmp	ip, r3
    2718:	d000      	beq.n	271c <AddConnection+0x6c>
    271a:	e086      	b.n	282a <AddConnection+0x17a>
    271c:	79a3      	ldrb	r3, [r4, #6]
    271e:	469c      	mov	ip, r3
    2720:	798b      	ldrb	r3, [r1, #6]
    2722:	459c      	cmp	ip, r3
    2724:	d000      	beq.n	2728 <AddConnection+0x78>
    2726:	e080      	b.n	282a <AddConnection+0x17a>
    2728:	79e3      	ldrb	r3, [r4, #7]
    272a:	469c      	mov	ip, r3
    272c:	79cb      	ldrb	r3, [r1, #7]
    272e:	459c      	cmp	ip, r3
    2730:	d000      	beq.n	2734 <AddConnection+0x84>
    2732:	e07a      	b.n	282a <AddConnection+0x17a>
                {
                    connectionSlot = i;
                    status = STATUS_EXISTS;
    2734:	2201      	movs	r2, #1
        {
            return STATUS_NOT_ENOUGH_SPACE;
        }
        else 
        {
            if( ConnMode >= ENABLE_PREV_CONN )
    2736:	4b4e      	ldr	r3, [pc, #312]	; (2870 <AddConnection+0x1c0>)
    2738:	781b      	ldrb	r3, [r3, #0]
    273a:	2b00      	cmp	r3, #0
    273c:	d16c      	bne.n	2818 <AddConnection+0x168>
            {
                return status;
            }
            MyindexinPC = connectionSlot;    
    273e:	494d      	ldr	r1, [pc, #308]	; (2874 <AddConnection+0x1c4>)
    2740:	00b7      	lsls	r7, r6, #2
    2742:	700e      	strb	r6, [r1, #0]
    2744:	19b9      	adds	r1, r7, r6
    2746:	0049      	lsls	r1, r1, #1
    2748:	1868      	adds	r0, r5, r1
    274a:	4684      	mov	ip, r0
    274c:	0018      	movs	r0, r3
    274e:	3104      	adds	r1, #4
    2750:	1869      	adds	r1, r5, r1
    2752:	428c      	cmp	r4, r1
    2754:	4158      	adcs	r0, r3
    2756:	4682      	mov	sl, r0
    2758:	1d20      	adds	r0, r4, #4
    275a:	4680      	mov	r8, r0
    275c:	4660      	mov	r0, ip
    275e:	4641      	mov	r1, r8
    2760:	4288      	cmp	r0, r1
    2762:	415b      	adcs	r3, r3
    2764:	4651      	mov	r1, sl
    2766:	430b      	orrs	r3, r1
    2768:	b2db      	uxtb	r3, r3
    276a:	2b00      	cmp	r3, #0
    276c:	d068      	beq.n	2840 <AddConnection+0x190>
    276e:	4663      	mov	r3, ip
    2770:	4323      	orrs	r3, r4
    2772:	079b      	lsls	r3, r3, #30
    2774:	d164      	bne.n	2840 <AddConnection+0x190>
            // store the source address
            for(i = 0; i < 8; i++)
            {
                ConnectionTable[connectionSlot].Address[i] = rxMessage.SourceAddress[i];
    2776:	6821      	ldr	r1, [r4, #0]
    2778:	6001      	str	r1, [r0, #0]
    277a:	6861      	ldr	r1, [r4, #4]
    277c:	6041      	str	r1, [r0, #4]
            }
            
            // store the capacity info and validate the entry
            ConnectionTable[connectionSlot].status.bits.isValid = 1;
    277e:	19bb      	adds	r3, r7, r6
    2780:	005b      	lsls	r3, r3, #1
    2782:	18eb      	adds	r3, r5, r3
    2784:	7a59      	ldrb	r1, [r3, #9]
    2786:	468c      	mov	ip, r1
    2788:	2180      	movs	r1, #128	; 0x80
    278a:	4660      	mov	r0, ip
    278c:	4249      	negs	r1, r1
    278e:	4301      	orrs	r1, r0
    2790:	7259      	strb	r1, [r3, #9]
            ConnectionTable[connectionSlot].status.bits.RXOnWhenIdle = (rxMessage.Payload[2] & 0x01);
    2792:	4649      	mov	r1, r9
    2794:	6889      	ldr	r1, [r1, #8]
    2796:	468c      	mov	ip, r1
    2798:	2101      	movs	r1, #1
    279a:	4688      	mov	r8, r1
    279c:	4661      	mov	r1, ip
    279e:	7888      	ldrb	r0, [r1, #2]
    27a0:	4641      	mov	r1, r8
    27a2:	4008      	ands	r0, r1
    27a4:	4681      	mov	r9, r0
    27a6:	4640      	mov	r0, r8
    27a8:	7a59      	ldrb	r1, [r3, #9]
    27aa:	4381      	bics	r1, r0
    27ac:	4648      	mov	r0, r9
    27ae:	4301      	orrs	r1, r0
    27b0:	7259      	strb	r1, [r3, #9]
                for(i = 0; i < ADDITIONAL_NODE_ID_SIZE; i++)
                {
                    ConnectionTable[connectionSlot].PeerInfo[i] = rxMessage.Payload[3+i];
                }
            #endif
			ConnectionTable[connectionSlot].flag = rxMessage.Payload[3];
    27b2:	4661      	mov	r1, ip
    27b4:	78c9      	ldrb	r1, [r1, #3]
            #ifdef ENABLE_SECURITY
                // if security is enabled, clear the incoming frame control
                IncomingFrameCounter[connectionSlot].Val = 0;
            #endif
            LatestConnection = connectionSlot;
            P2PStatus.bits.SearchConnection = 0;   
    27b6:	2010      	movs	r0, #16
			ConnectionTable[connectionSlot].flag = rxMessage.Payload[3];
    27b8:	7219      	strb	r1, [r3, #8]
                IncomingFrameCounter[connectionSlot].Val = 0;
    27ba:	2100      	movs	r1, #0
    27bc:	4b2e      	ldr	r3, [pc, #184]	; (2878 <AddConnection+0x1c8>)
    27be:	51d9      	str	r1, [r3, r7]
            P2PStatus.bits.SearchConnection = 0;   
    27c0:	492e      	ldr	r1, [pc, #184]	; (287c <AddConnection+0x1cc>)
            LatestConnection = connectionSlot;
    27c2:	4b2f      	ldr	r3, [pc, #188]	; (2880 <AddConnection+0x1d0>)
    27c4:	701e      	strb	r6, [r3, #0]
            P2PStatus.bits.SearchConnection = 0;   
    27c6:	780b      	ldrb	r3, [r1, #0]
    27c8:	4383      	bics	r3, r0
    27ca:	700b      	strb	r3, [r1, #0]
        if (ConnectionTable[i].status.bits.isValid)
    27cc:	7a6b      	ldrb	r3, [r5, #9]
    27ce:	7ce9      	ldrb	r1, [r5, #19]
    27d0:	09db      	lsrs	r3, r3, #7
    27d2:	09c9      	lsrs	r1, r1, #7
    27d4:	185b      	adds	r3, r3, r1
    27d6:	7f69      	ldrb	r1, [r5, #29]
    27d8:	09c9      	lsrs	r1, r1, #7
    27da:	185b      	adds	r3, r3, r1
    27dc:	2127      	movs	r1, #39	; 0x27
    27de:	5c69      	ldrb	r1, [r5, r1]
    27e0:	09c9      	lsrs	r1, r1, #7
    27e2:	185b      	adds	r3, r3, r1
    27e4:	2131      	movs	r1, #49	; 0x31
    27e6:	5c69      	ldrb	r1, [r5, r1]
    27e8:	09c9      	lsrs	r1, r1, #7
    27ea:	185b      	adds	r3, r3, r1
    27ec:	213b      	movs	r1, #59	; 0x3b
    27ee:	5c69      	ldrb	r1, [r5, r1]
    27f0:	09c9      	lsrs	r1, r1, #7
    27f2:	185b      	adds	r3, r3, r1
    27f4:	2145      	movs	r1, #69	; 0x45
    27f6:	5c69      	ldrb	r1, [r5, r1]
    27f8:	09c9      	lsrs	r1, r1, #7
    27fa:	185b      	adds	r3, r3, r1
    27fc:	214f      	movs	r1, #79	; 0x4f
    27fe:	5c69      	ldrb	r1, [r5, r1]
    2800:	09c9      	lsrs	r1, r1, #7
    2802:	185b      	adds	r3, r3, r1
    2804:	2159      	movs	r1, #89	; 0x59
    2806:	5c69      	ldrb	r1, [r5, r1]
    2808:	09c9      	lsrs	r1, r1, #7
    280a:	185b      	adds	r3, r3, r1
    280c:	2163      	movs	r1, #99	; 0x63
    280e:	5c69      	ldrb	r1, [r5, r1]
        }
        conn_size = Total_Connections();
    2810:	09c9      	lsrs	r1, r1, #7
    2812:	185b      	adds	r3, r3, r1
    2814:	491b      	ldr	r1, [pc, #108]	; (2884 <AddConnection+0x1d4>)
    2816:	700b      	strb	r3, [r1, #0]
    #if defined (ENABLE_NETWORK_FREEZER)
        nvmPutMyDC(&conn_size);
    #endif

        return status;
    }
    2818:	0010      	movs	r0, r2
    281a:	bc1c      	pop	{r2, r3, r4}
    281c:	4690      	mov	r8, r2
    281e:	4699      	mov	r9, r3
    2820:	46a2      	mov	sl, r4
    2822:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if( connectionSlot == 0xFF )
    2824:	2fff      	cmp	r7, #255	; 0xff
    2826:	d100      	bne.n	282a <AddConnection+0x17a>
    2828:	0037      	movs	r7, r6
    282a:	3201      	adds	r2, #1
    282c:	310a      	adds	r1, #10
        for(i = 0; i < CONNECTION_SIZE; i++)
    282e:	2a0a      	cmp	r2, #10
    2830:	d000      	beq.n	2834 <AddConnection+0x184>
    2832:	e749      	b.n	26c8 <AddConnection+0x18>
            return STATUS_NOT_ENOUGH_SPACE;
    2834:	32e7      	adds	r2, #231	; 0xe7
        if( connectionSlot == 0xFF )
    2836:	2fff      	cmp	r7, #255	; 0xff
    2838:	d0ee      	beq.n	2818 <AddConnection+0x168>
    283a:	003e      	movs	r6, r7
        uint8_t status = STATUS_SUCCESS;
    283c:	2200      	movs	r2, #0
    283e:	e77a      	b.n	2736 <AddConnection+0x86>
                ConnectionTable[connectionSlot].Address[i] = rxMessage.SourceAddress[i];
    2840:	7821      	ldrb	r1, [r4, #0]
    2842:	19bb      	adds	r3, r7, r6
    2844:	005b      	lsls	r3, r3, #1
    2846:	54e9      	strb	r1, [r5, r3]
    2848:	7861      	ldrb	r1, [r4, #1]
    284a:	18eb      	adds	r3, r5, r3
    284c:	7059      	strb	r1, [r3, #1]
    284e:	78a1      	ldrb	r1, [r4, #2]
    2850:	7099      	strb	r1, [r3, #2]
    2852:	78e1      	ldrb	r1, [r4, #3]
    2854:	70d9      	strb	r1, [r3, #3]
    2856:	7921      	ldrb	r1, [r4, #4]
    2858:	7119      	strb	r1, [r3, #4]
    285a:	7961      	ldrb	r1, [r4, #5]
    285c:	7159      	strb	r1, [r3, #5]
    285e:	79a1      	ldrb	r1, [r4, #6]
    2860:	7199      	strb	r1, [r3, #6]
    2862:	79e1      	ldrb	r1, [r4, #7]
    2864:	71d9      	strb	r1, [r3, #7]
    2866:	e78a      	b.n	277e <AddConnection+0xce>
    2868:	200009f8 	.word	0x200009f8
    286c:	20000918 	.word	0x20000918
    2870:	20000014 	.word	0x20000014
    2874:	200009c0 	.word	0x200009c0
    2878:	20000998 	.word	0x20000998
    287c:	200009c4 	.word	0x200009c4
    2880:	20000914 	.word	0x20000914
    2884:	20000997 	.word	0x20000997

00002888 <P2PTasks.part.0>:
void P2PTasks(void)
    2888:	b5f0      	push	{r4, r5, r6, r7, lr}
    288a:	4647      	mov	r7, r8
    288c:	46ce      	mov	lr, r9
    288e:	b580      	push	{r7, lr}
            temp_bit = MACRxPacket.flags.bits.broadcast;
    2890:	48a6      	ldr	r0, [pc, #664]	; (2b2c <P2PTasks.part.0+0x2a4>)
    2892:	4aa7      	ldr	r2, [pc, #668]	; (2b30 <P2PTasks.part.0+0x2a8>)
    2894:	7801      	ldrb	r1, [r0, #0]
        rxMessage.flags.bits.secEn = MACRxPacket.flags.bits.secEn;
    2896:	2501      	movs	r5, #1
            temp_bit = MACRxPacket.flags.bits.broadcast;
    2898:	074b      	lsls	r3, r1, #29
    289a:	0fdb      	lsrs	r3, r3, #31
    289c:	7013      	strb	r3, [r2, #0]
            rxMessage.flags.bits.broadcast = temp_bit;
    289e:	2203      	movs	r2, #3
        rxMessage.flags.bits.secEn = MACRxPacket.flags.bits.secEn;
    28a0:	4013      	ands	r3, r2
        rxMessage.flags.bits.command = (MACRxPacket.flags.bits.packetType == PACKET_TYPE_COMMAND) ? 1:0;
    28a2:	400a      	ands	r2, r1
    28a4:	3a01      	subs	r2, #1
        rxMessage.flags.bits.secEn = MACRxPacket.flags.bits.secEn;
    28a6:	4698      	mov	r8, r3
        rxMessage.flags.bits.command = (MACRxPacket.flags.bits.packetType == PACKET_TYPE_COMMAND) ? 1:0;
    28a8:	4253      	negs	r3, r2
    28aa:	4153      	adcs	r3, r2
    28ac:	015a      	lsls	r2, r3, #5
    28ae:	4643      	mov	r3, r8
        rxMessage.flags.bits.secEn = MACRxPacket.flags.bits.secEn;
    28b0:	08ce      	lsrs	r6, r1, #3
    28b2:	402e      	ands	r6, r5
    28b4:	00f6      	lsls	r6, r6, #3
        rxMessage.flags.bits.command = (MACRxPacket.flags.bits.packetType == PACKET_TYPE_COMMAND) ? 1:0;
    28b6:	4333      	orrs	r3, r6
        rxMessage.flags.bits.srcPrsnt = MACRxPacket.flags.bits.sourcePrsnt;
    28b8:	09ce      	lsrs	r6, r1, #7
    28ba:	4035      	ands	r5, r6
        rxMessage.flags.Val = 0;
    28bc:	4c9d      	ldr	r4, [pc, #628]	; (2b34 <P2PTasks.part.0+0x2ac>)
        rxMessage.flags.bits.srcPrsnt = MACRxPacket.flags.bits.sourcePrsnt;
    28be:	01ad      	lsls	r5, r5, #6
    28c0:	4313      	orrs	r3, r2
    28c2:	432b      	orrs	r3, r5
        if( MACRxPacket.flags.bits.sourcePrsnt )
    28c4:	b249      	sxtb	r1, r1
void P2PTasks(void)
    28c6:	b087      	sub	sp, #28
        rxMessage.flags.bits.srcPrsnt = MACRxPacket.flags.bits.sourcePrsnt;
    28c8:	7023      	strb	r3, [r4, #0]
        if( MACRxPacket.flags.bits.sourcePrsnt )
    28ca:	2900      	cmp	r1, #0
    28cc:	db2e      	blt.n	292c <P2PTasks.part.0+0xa4>
            rxMessage.SourcePANID.Val = MACRxPacket.SourcePANID.Val;
    28ce:	8a05      	ldrh	r5, [r0, #16]
        rxMessage.Payload = MACRxPacket.Payload;
    28d0:	6881      	ldr	r1, [r0, #8]
            rxMessage.SourcePANID.Val = MACRxPacket.SourcePANID.Val;
    28d2:	8065      	strh	r5, [r4, #2]
        rxMessage.PayloadSize = MACRxPacket.PayloadLen;
    28d4:	7b02      	ldrb	r2, [r0, #12]
        rxMessage.Payload = MACRxPacket.Payload;
    28d6:	60a1      	str	r1, [r4, #8]
        rxMessage.PayloadSize = MACRxPacket.PayloadLen;
    28d8:	7322      	strb	r2, [r4, #12]
            rxMessage.PacketLQI = MACRxPacket.LQIValue;
    28da:	7b83      	ldrb	r3, [r0, #14]
    28dc:	73a3      	strb	r3, [r4, #14]
            rxMessage.PacketRSSI = MACRxPacket.RSSIValue;
    28de:	7b43      	ldrb	r3, [r0, #13]
    28e0:	7363      	strb	r3, [r4, #13]
        if( rxMessage.flags.bits.command )
    28e2:	7823      	ldrb	r3, [r4, #0]
    28e4:	069b      	lsls	r3, r3, #26
    28e6:	d508      	bpl.n	28fa <P2PTasks.part.0+0x72>
            switch( rxMessage.Payload[0] )
    28e8:	780b      	ldrb	r3, [r1, #0]
    28ea:	337e      	adds	r3, #126	; 0x7e
    28ec:	b2db      	uxtb	r3, r3
    28ee:	2b15      	cmp	r3, #21
    28f0:	d803      	bhi.n	28fa <P2PTasks.part.0+0x72>
    28f2:	4891      	ldr	r0, [pc, #580]	; (2b38 <P2PTasks.part.0+0x2b0>)
    28f4:	009b      	lsls	r3, r3, #2
    28f6:	58c3      	ldr	r3, [r0, r3]
    28f8:	469f      	mov	pc, r3
            P2PStatus.bits.RxHasUserData = 1;
    28fa:	2108      	movs	r1, #8
    28fc:	4d8f      	ldr	r5, [pc, #572]	; (2b3c <P2PTasks.part.0+0x2b4>)
    28fe:	782b      	ldrb	r3, [r5, #0]
    2900:	430b      	orrs	r3, r1
    2902:	702b      	strb	r3, [r5, #0]
        if( rxMessage.PayloadSize == 0  || P2PStatus.bits.SearchConnection || P2PStatus.bits.Resync )
    2904:	2a00      	cmp	r2, #0
    2906:	d002      	beq.n	290e <P2PTasks.part.0+0x86>
    2908:	782b      	ldrb	r3, [r5, #0]
    290a:	06db      	lsls	r3, r3, #27
    290c:	d50a      	bpl.n	2924 <P2PTasks.part.0+0x9c>
            P2PStatus.bits.RxHasUserData = 0;
    290e:	2208      	movs	r2, #8
    2910:	782b      	ldrb	r3, [r5, #0]
    2912:	4393      	bics	r3, r2
    2914:	702b      	strb	r3, [r5, #0]
            MiMAC_DiscardPacket();
    2916:	4b8a      	ldr	r3, [pc, #552]	; (2b40 <P2PTasks.part.0+0x2b8>)
    2918:	4798      	blx	r3
}
    291a:	b007      	add	sp, #28
    291c:	bc0c      	pop	{r2, r3}
    291e:	4690      	mov	r8, r2
    2920:	4699      	mov	r9, r3
    2922:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( rxMessage.PayloadSize == 0  || P2PStatus.bits.SearchConnection || P2PStatus.bits.Resync )
    2924:	782b      	ldrb	r3, [r5, #0]
    2926:	069b      	lsls	r3, r3, #26
    2928:	d4f1      	bmi.n	290e <P2PTasks.part.0+0x86>
    292a:	e7f6      	b.n	291a <P2PTasks.part.0+0x92>
            rxMessage.SourceAddress = MACRxPacket.SourceAddress;
    292c:	6843      	ldr	r3, [r0, #4]
    292e:	6063      	str	r3, [r4, #4]
    2930:	e7cd      	b.n	28ce <P2PTasks.part.0+0x46>
                            if( P2PStatus.bits.Resync )
    2932:	4d82      	ldr	r5, [pc, #520]	; (2b3c <P2PTasks.part.0+0x2b4>)
    2934:	782b      	ldrb	r3, [r5, #0]
    2936:	069b      	lsls	r3, r3, #26
    2938:	d503      	bpl.n	2942 <P2PTasks.part.0+0xba>
                                P2PStatus.bits.Resync = 0;   
    293a:	2220      	movs	r2, #32
    293c:	782b      	ldrb	r3, [r5, #0]
    293e:	4393      	bics	r3, r2
    2940:	702b      	strb	r3, [r5, #0]
                            MiMAC_DiscardPacket(); 
    2942:	4b7f      	ldr	r3, [pc, #508]	; (2b40 <P2PTasks.part.0+0x2b8>)
    2944:	4798      	blx	r3
    2946:	7b22      	ldrb	r2, [r4, #12]
    2948:	e7dc      	b.n	2904 <P2PTasks.part.0+0x7c>
                            if( rxMessage.Payload[1] == STATUS_SUCCESS )
    294a:	784b      	ldrb	r3, [r1, #1]
    294c:	2b00      	cmp	r3, #0
    294e:	d135      	bne.n	29bc <P2PTasks.part.0+0x134>
    2950:	4f7c      	ldr	r7, [pc, #496]	; (2b44 <P2PTasks.part.0+0x2bc>)
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    2952:	2100      	movs	r1, #0
    2954:	003a      	movs	r2, r7
    2956:	6865      	ldr	r5, [r4, #4]
                                    if( ConnectionTable[i].status.bits.isValid )
    2958:	008b      	lsls	r3, r1, #2
    295a:	185b      	adds	r3, r3, r1
    295c:	005b      	lsls	r3, r3, #1
    295e:	18fb      	adds	r3, r7, r3
    2960:	7a58      	ldrb	r0, [r3, #9]
    2962:	09c0      	lsrs	r0, r0, #7
    2964:	d100      	bne.n	2968 <P2PTasks.part.0+0xe0>
    2966:	e0d2      	b.n	2b0e <P2PTasks.part.0+0x286>
        if( Address1[i] != Address2[i] )
    2968:	782e      	ldrb	r6, [r5, #0]
    296a:	7810      	ldrb	r0, [r2, #0]
    296c:	4286      	cmp	r6, r0
    296e:	d000      	beq.n	2972 <P2PTasks.part.0+0xea>
    2970:	e0cd      	b.n	2b0e <P2PTasks.part.0+0x286>
    2972:	786e      	ldrb	r6, [r5, #1]
    2974:	7850      	ldrb	r0, [r2, #1]
    2976:	4286      	cmp	r6, r0
    2978:	d000      	beq.n	297c <P2PTasks.part.0+0xf4>
    297a:	e0c8      	b.n	2b0e <P2PTasks.part.0+0x286>
    297c:	78ae      	ldrb	r6, [r5, #2]
    297e:	7890      	ldrb	r0, [r2, #2]
    2980:	4286      	cmp	r6, r0
    2982:	d000      	beq.n	2986 <P2PTasks.part.0+0xfe>
    2984:	e0c3      	b.n	2b0e <P2PTasks.part.0+0x286>
    2986:	78ee      	ldrb	r6, [r5, #3]
    2988:	78d0      	ldrb	r0, [r2, #3]
    298a:	4286      	cmp	r6, r0
    298c:	d000      	beq.n	2990 <P2PTasks.part.0+0x108>
    298e:	e0be      	b.n	2b0e <P2PTasks.part.0+0x286>
    2990:	792e      	ldrb	r6, [r5, #4]
    2992:	7910      	ldrb	r0, [r2, #4]
    2994:	4286      	cmp	r6, r0
    2996:	d000      	beq.n	299a <P2PTasks.part.0+0x112>
    2998:	e0b9      	b.n	2b0e <P2PTasks.part.0+0x286>
    299a:	796e      	ldrb	r6, [r5, #5]
    299c:	7950      	ldrb	r0, [r2, #5]
    299e:	4286      	cmp	r6, r0
    29a0:	d000      	beq.n	29a4 <P2PTasks.part.0+0x11c>
    29a2:	e0b4      	b.n	2b0e <P2PTasks.part.0+0x286>
    29a4:	79ae      	ldrb	r6, [r5, #6]
    29a6:	7990      	ldrb	r0, [r2, #6]
    29a8:	4286      	cmp	r6, r0
    29aa:	d000      	beq.n	29ae <P2PTasks.part.0+0x126>
    29ac:	e0af      	b.n	2b0e <P2PTasks.part.0+0x286>
    29ae:	79ee      	ldrb	r6, [r5, #7]
    29b0:	79d0      	ldrb	r0, [r2, #7]
    29b2:	4286      	cmp	r6, r0
    29b4:	d000      	beq.n	29b8 <P2PTasks.part.0+0x130>
    29b6:	e0aa      	b.n	2b0e <P2PTasks.part.0+0x286>
                                            ConnectionTable[i].status.Val = 0;
    29b8:	2200      	movs	r2, #0
    29ba:	725a      	strb	r2, [r3, #9]
                        MiMAC_DiscardPacket();
    29bc:	4b60      	ldr	r3, [pc, #384]	; (2b40 <P2PTasks.part.0+0x2b8>)
    29be:	4798      	blx	r3
    29c0:	7b22      	ldrb	r2, [r4, #12]
    29c2:	4d5e      	ldr	r5, [pc, #376]	; (2b3c <P2PTasks.part.0+0x2b4>)
    29c4:	e79e      	b.n	2904 <P2PTasks.part.0+0x7c>
                            if(ConnMode > ENABLE_ACTIVE_SCAN_RSP)
    29c6:	4b60      	ldr	r3, [pc, #384]	; (2b48 <P2PTasks.part.0+0x2c0>)
    29c8:	781b      	ldrb	r3, [r3, #0]
    29ca:	2b02      	cmp	r3, #2
    29cc:	d8f6      	bhi.n	29bc <P2PTasks.part.0+0x134>
                            if( currentChannel != rxMessage.Payload[1] )
    29ce:	4b5f      	ldr	r3, [pc, #380]	; (2b4c <P2PTasks.part.0+0x2c4>)
    29d0:	784a      	ldrb	r2, [r1, #1]
    29d2:	781b      	ldrb	r3, [r3, #0]
    29d4:	429a      	cmp	r2, r3
    29d6:	d1f1      	bne.n	29bc <P2PTasks.part.0+0x134>
                            MiApp_WriteData(CMD_P2P_ACTIVE_SCAN_RESPONSE);
    29d8:	2397      	movs	r3, #151	; 0x97
    29da:	4f5d      	ldr	r7, [pc, #372]	; (2b50 <P2PTasks.part.0+0x2c8>)
                            MiApp_WriteData(P2PCapacityInfo);
    29dc:	4d5d      	ldr	r5, [pc, #372]	; (2b54 <P2PTasks.part.0+0x2cc>)
                            MiApp_WriteData(CMD_P2P_ACTIVE_SCAN_RESPONSE);
    29de:	703b      	strb	r3, [r7, #0]
                            MiApp_WriteData(P2PCapacityInfo);
    29e0:	3b95      	subs	r3, #149	; 0x95
    29e2:	702b      	strb	r3, [r5, #0]
    29e4:	4b5c      	ldr	r3, [pc, #368]	; (2b58 <P2PTasks.part.0+0x2d0>)
    tParam.flags.Val = 0;
    29e6:	2600      	movs	r6, #0
                            MiApp_WriteData(P2PCapacityInfo);
    29e8:	781b      	ldrb	r3, [r3, #0]
    29ea:	707b      	strb	r3, [r7, #1]
                            MiMAC_DiscardPacket();
    29ec:	4b54      	ldr	r3, [pc, #336]	; (2b40 <P2PTasks.part.0+0x2b8>)
    29ee:	4798      	blx	r3
    tParam.flags.bits.secEn = SecurityEnabled;
    29f0:	2008      	movs	r0, #8
                                    SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
    29f2:	7823      	ldrb	r3, [r4, #0]
    tParam.flags.Val = 0;
    29f4:	aa03      	add	r2, sp, #12
    tParam.flags.bits.secEn = SecurityEnabled;
    29f6:	4003      	ands	r3, r0
        tParam.flags.bits.sourcePrsnt = 1;
    29f8:	3827      	subs	r0, #39	; 0x27
    29fa:	4303      	orrs	r3, r0
    29fc:	7013      	strb	r3, [r2, #0]
    tParam.DestAddress = DestinationAddress;
    29fe:	6863      	ldr	r3, [r4, #4]
    2a00:	8861      	ldrh	r1, [r4, #2]
    2a02:	9304      	str	r3, [sp, #16]
    status = MiMAC_SendPacket(tParam, TxBuffer, TxData); 
    2a04:	782b      	ldrb	r3, [r5, #0]
        tParam.DestPANID.Val = DestinationPANID.Val;
    2a06:	8151      	strh	r1, [r2, #10]
        tParam.altSrcAddr = 0;
    2a08:	7256      	strb	r6, [r2, #9]
        tParam.altDestAddr = (Broadcast) ? true : false;
    2a0a:	7216      	strb	r6, [r2, #8]
    status = MiMAC_SendPacket(tParam, TxBuffer, TxData); 
    2a0c:	9300      	str	r3, [sp, #0]
    2a0e:	9a05      	ldr	r2, [sp, #20]
    2a10:	003b      	movs	r3, r7
    2a12:	9803      	ldr	r0, [sp, #12]
    2a14:	6861      	ldr	r1, [r4, #4]
    2a16:	4f51      	ldr	r7, [pc, #324]	; (2b5c <P2PTasks.part.0+0x2d4>)
    2a18:	47b8      	blx	r7
    TxData = 0;
    2a1a:	702e      	strb	r6, [r5, #0]
    2a1c:	7b22      	ldrb	r2, [r4, #12]
    2a1e:	4d47      	ldr	r5, [pc, #284]	; (2b3c <P2PTasks.part.0+0x2b4>)
    2a20:	e770      	b.n	2904 <P2PTasks.part.0+0x7c>
                            switch( rxMessage.Payload[1] )
    2a22:	784b      	ldrb	r3, [r1, #1]
    2a24:	2b01      	cmp	r3, #1
    2a26:	d8c9      	bhi.n	29bc <P2PTasks.part.0+0x134>
                                        if( myPANID.Val == 0xFFFF )
    2a28:	494d      	ldr	r1, [pc, #308]	; (2b60 <P2PTasks.part.0+0x2d8>)
    2a2a:	4b4e      	ldr	r3, [pc, #312]	; (2b64 <P2PTasks.part.0+0x2dc>)
    2a2c:	880a      	ldrh	r2, [r1, #0]
    2a2e:	429a      	cmp	r2, r3
    2a30:	d073      	beq.n	2b1a <P2PTasks.part.0+0x292>
                                    AddConnection();
    2a32:	4b4d      	ldr	r3, [pc, #308]	; (2b68 <P2PTasks.part.0+0x2e0>)
    2a34:	4798      	blx	r3
    2a36:	e7c1      	b.n	29bc <P2PTasks.part.0+0x134>
                            MiApp_WriteData(CMD_P2P_CONNECTION_REMOVAL_RESPONSE);
    2a38:	2301      	movs	r3, #1
    2a3a:	4d46      	ldr	r5, [pc, #280]	; (2b54 <P2PTasks.part.0+0x2cc>)
    2a3c:	4f41      	ldr	r7, [pc, #260]	; (2b44 <P2PTasks.part.0+0x2bc>)
    2a3e:	702b      	strb	r3, [r5, #0]
    2a40:	4b43      	ldr	r3, [pc, #268]	; (2b50 <P2PTasks.part.0+0x2c8>)
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    2a42:	2100      	movs	r1, #0
                            MiApp_WriteData(CMD_P2P_CONNECTION_REMOVAL_RESPONSE);
    2a44:	4699      	mov	r9, r3
    2a46:	2392      	movs	r3, #146	; 0x92
    2a48:	464a      	mov	r2, r9
    2a4a:	7013      	strb	r3, [r2, #0]
    2a4c:	003a      	movs	r2, r7
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    2a4e:	6866      	ldr	r6, [r4, #4]
                                if( ConnectionTable[i].status.bits.isValid )
    2a50:	008b      	lsls	r3, r1, #2
    2a52:	185b      	adds	r3, r3, r1
    2a54:	005b      	lsls	r3, r3, #1
    2a56:	18fb      	adds	r3, r7, r3
    2a58:	7a58      	ldrb	r0, [r3, #9]
    2a5a:	09c0      	lsrs	r0, r0, #7
    2a5c:	d049      	beq.n	2af2 <P2PTasks.part.0+0x26a>
        if( Address1[i] != Address2[i] )
    2a5e:	7810      	ldrb	r0, [r2, #0]
    2a60:	4680      	mov	r8, r0
    2a62:	7830      	ldrb	r0, [r6, #0]
    2a64:	4580      	cmp	r8, r0
    2a66:	d144      	bne.n	2af2 <P2PTasks.part.0+0x26a>
    2a68:	7870      	ldrb	r0, [r6, #1]
    2a6a:	4680      	mov	r8, r0
    2a6c:	7850      	ldrb	r0, [r2, #1]
    2a6e:	4580      	cmp	r8, r0
    2a70:	d13f      	bne.n	2af2 <P2PTasks.part.0+0x26a>
    2a72:	78b0      	ldrb	r0, [r6, #2]
    2a74:	4680      	mov	r8, r0
    2a76:	7890      	ldrb	r0, [r2, #2]
    2a78:	4580      	cmp	r8, r0
    2a7a:	d13a      	bne.n	2af2 <P2PTasks.part.0+0x26a>
    2a7c:	78f0      	ldrb	r0, [r6, #3]
    2a7e:	4680      	mov	r8, r0
    2a80:	78d0      	ldrb	r0, [r2, #3]
    2a82:	4580      	cmp	r8, r0
    2a84:	d135      	bne.n	2af2 <P2PTasks.part.0+0x26a>
    2a86:	7930      	ldrb	r0, [r6, #4]
    2a88:	4680      	mov	r8, r0
    2a8a:	7910      	ldrb	r0, [r2, #4]
    2a8c:	4580      	cmp	r8, r0
    2a8e:	d130      	bne.n	2af2 <P2PTasks.part.0+0x26a>
    2a90:	7970      	ldrb	r0, [r6, #5]
    2a92:	4680      	mov	r8, r0
    2a94:	7950      	ldrb	r0, [r2, #5]
    2a96:	4580      	cmp	r8, r0
    2a98:	d12b      	bne.n	2af2 <P2PTasks.part.0+0x26a>
    2a9a:	79b0      	ldrb	r0, [r6, #6]
    2a9c:	4680      	mov	r8, r0
    2a9e:	7990      	ldrb	r0, [r2, #6]
    2aa0:	4580      	cmp	r8, r0
    2aa2:	d126      	bne.n	2af2 <P2PTasks.part.0+0x26a>
    2aa4:	79f0      	ldrb	r0, [r6, #7]
    2aa6:	4680      	mov	r8, r0
    2aa8:	79d0      	ldrb	r0, [r2, #7]
    2aaa:	4580      	cmp	r8, r0
    2aac:	d121      	bne.n	2af2 <P2PTasks.part.0+0x26a>
                                        ConnectionTable[i].status.Val = 0;
    2aae:	2200      	movs	r2, #0
    2ab0:	725a      	strb	r2, [r3, #9]
                                        MiApp_WriteData(STATUS_SUCCESS);
    2ab2:	2302      	movs	r3, #2
    2ab4:	702b      	strb	r3, [r5, #0]
    2ab6:	464b      	mov	r3, r9
    2ab8:	705a      	strb	r2, [r3, #1]
                            MiMAC_DiscardPacket();
    2aba:	4b21      	ldr	r3, [pc, #132]	; (2b40 <P2PTasks.part.0+0x2b8>)
    2abc:	4798      	blx	r3
    2abe:	782b      	ldrb	r3, [r5, #0]
    tParam.flags.bits.secEn = SecurityEnabled;
    2ac0:	2608      	movs	r6, #8
    tParam.flags.Val = 0;
    2ac2:	2700      	movs	r7, #0
                                    SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
    2ac4:	7821      	ldrb	r1, [r4, #0]
    tParam.flags.Val = 0;
    2ac6:	aa03      	add	r2, sp, #12
    tParam.flags.bits.secEn = SecurityEnabled;
    2ac8:	4031      	ands	r1, r6
        tParam.flags.bits.sourcePrsnt = 1;
    2aca:	3e27      	subs	r6, #39	; 0x27
    2acc:	8860      	ldrh	r0, [r4, #2]
    2ace:	4331      	orrs	r1, r6
    2ad0:	7011      	strb	r1, [r2, #0]
    tParam.DestAddress = DestinationAddress;
    2ad2:	6861      	ldr	r1, [r4, #4]
        tParam.DestPANID.Val = DestinationPANID.Val;
    2ad4:	8150      	strh	r0, [r2, #10]
        tParam.altSrcAddr = 0;
    2ad6:	7257      	strb	r7, [r2, #9]
        tParam.altDestAddr = (Broadcast) ? true : false;
    2ad8:	7217      	strb	r7, [r2, #8]
    status = MiMAC_SendPacket(tParam, TxBuffer, TxData); 
    2ada:	9300      	str	r3, [sp, #0]
    tParam.DestAddress = DestinationAddress;
    2adc:	9104      	str	r1, [sp, #16]
    status = MiMAC_SendPacket(tParam, TxBuffer, TxData); 
    2ade:	9a05      	ldr	r2, [sp, #20]
    2ae0:	464b      	mov	r3, r9
    2ae2:	9803      	ldr	r0, [sp, #12]
    2ae4:	6861      	ldr	r1, [r4, #4]
    2ae6:	4e1d      	ldr	r6, [pc, #116]	; (2b5c <P2PTasks.part.0+0x2d4>)
    2ae8:	47b0      	blx	r6
    TxData = 0;
    2aea:	702f      	strb	r7, [r5, #0]
    2aec:	7b22      	ldrb	r2, [r4, #12]
    2aee:	4d13      	ldr	r5, [pc, #76]	; (2b3c <P2PTasks.part.0+0x2b4>)
    2af0:	e708      	b.n	2904 <P2PTasks.part.0+0x7c>
    2af2:	3101      	adds	r1, #1
    2af4:	320a      	adds	r2, #10
                            for(i = 0; i < CONNECTION_SIZE; i++)
    2af6:	290a      	cmp	r1, #10
    2af8:	d1aa      	bne.n	2a50 <P2PTasks.part.0+0x1c8>
                            MiMAC_DiscardPacket();
    2afa:	4b11      	ldr	r3, [pc, #68]	; (2b40 <P2PTasks.part.0+0x2b8>)
    2afc:	4798      	blx	r3
                                MiApp_WriteData(STATUS_ENTRY_NOT_EXIST);
    2afe:	21f0      	movs	r1, #240	; 0xf0
    2b00:	4648      	mov	r0, r9
    2b02:	782a      	ldrb	r2, [r5, #0]
    2b04:	1c53      	adds	r3, r2, #1
    2b06:	b2db      	uxtb	r3, r3
    2b08:	702b      	strb	r3, [r5, #0]
    2b0a:	5481      	strb	r1, [r0, r2]
    2b0c:	e7d8      	b.n	2ac0 <P2PTasks.part.0+0x238>
    2b0e:	3101      	adds	r1, #1
    2b10:	320a      	adds	r2, #10
                                for(i = 0; i < CONNECTION_SIZE; i++)
    2b12:	290a      	cmp	r1, #10
    2b14:	d000      	beq.n	2b18 <P2PTasks.part.0+0x290>
    2b16:	e71f      	b.n	2958 <P2PTasks.part.0+0xd0>
    2b18:	e750      	b.n	29bc <P2PTasks.part.0+0x134>
                                                uint16_t tmp = 0xFFFF;
    2b1a:	2301      	movs	r3, #1
    2b1c:	a803      	add	r0, sp, #12
    2b1e:	425b      	negs	r3, r3
    2b20:	8003      	strh	r3, [r0, #0]
                                                MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    2b22:	4b12      	ldr	r3, [pc, #72]	; (2b6c <P2PTasks.part.0+0x2e4>)
                                            myPANID.Val = rxMessage.SourcePANID.Val;
    2b24:	800d      	strh	r5, [r1, #0]
                                                MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    2b26:	4798      	blx	r3
    2b28:	e783      	b.n	2a32 <P2PTasks.part.0+0x1aa>
    2b2a:	46c0      	nop			; (mov r8, r8)
    2b2c:	2000097c 	.word	0x2000097c
    2b30:	20000996 	.word	0x20000996
    2b34:	200009f8 	.word	0x200009f8
    2b38:	00008e6c 	.word	0x00008e6c
    2b3c:	200009c4 	.word	0x200009c4
    2b40:	00001d5d 	.word	0x00001d5d
    2b44:	20000918 	.word	0x20000918
    2b48:	20000014 	.word	0x20000014
    2b4c:	2000012a 	.word	0x2000012a
    2b50:	200009c8 	.word	0x200009c8
    2b54:	200009c5 	.word	0x200009c5
    2b58:	20000990 	.word	0x20000990
    2b5c:	00001999 	.word	0x00001999
    2b60:	20000994 	.word	0x20000994
    2b64:	0000ffff 	.word	0x0000ffff
    2b68:	000026b1 	.word	0x000026b1
    2b6c:	00000e61 	.word	0x00000e61

00002b70 <MiApp_MessageAvailable>:
{ 
    2b70:	b510      	push	{r4, lr}
    if( P2PStatus.bits.RxHasUserData == 0 && MiMAC_ReceivedPacket() )
    2b72:	4c07      	ldr	r4, [pc, #28]	; (2b90 <MiApp_MessageAvailable+0x20>)
    2b74:	7823      	ldrb	r3, [r4, #0]
    2b76:	071b      	lsls	r3, r3, #28
    2b78:	d503      	bpl.n	2b82 <MiApp_MessageAvailable+0x12>
    return P2PStatus.bits.RxHasUserData;
    2b7a:	7820      	ldrb	r0, [r4, #0]
    2b7c:	0700      	lsls	r0, r0, #28
    2b7e:	0fc0      	lsrs	r0, r0, #31
}
    2b80:	bd10      	pop	{r4, pc}
    if( P2PStatus.bits.RxHasUserData == 0 && MiMAC_ReceivedPacket() )
    2b82:	4b04      	ldr	r3, [pc, #16]	; (2b94 <MiApp_MessageAvailable+0x24>)
    2b84:	4798      	blx	r3
    2b86:	2800      	cmp	r0, #0
    2b88:	d0f7      	beq.n	2b7a <MiApp_MessageAvailable+0xa>
    2b8a:	4b03      	ldr	r3, [pc, #12]	; (2b98 <MiApp_MessageAvailable+0x28>)
    2b8c:	4798      	blx	r3
    2b8e:	e7f4      	b.n	2b7a <MiApp_MessageAvailable+0xa>
    2b90:	200009c4 	.word	0x200009c4
    2b94:	00001d79 	.word	0x00001d79
    2b98:	00002889 	.word	0x00002889

00002b9c <MiApp_EstablishConnection>:
    {
    2b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b9e:	46de      	mov	lr, fp
    2ba0:	4657      	mov	r7, sl
    2ba2:	464e      	mov	r6, r9
    2ba4:	4645      	mov	r5, r8
    2ba6:	b5e0      	push	{r5, r6, r7, lr}
            return 0xFF;
    2ba8:	20ff      	movs	r0, #255	; 0xff
    {
    2baa:	b089      	sub	sp, #36	; 0x24
        if( Mode == CONN_MODE_INDIRECT )
    2bac:	2901      	cmp	r1, #1
    2bae:	d106      	bne.n	2bbe <MiApp_EstablishConnection+0x22>
    }
    2bb0:	b009      	add	sp, #36	; 0x24
    2bb2:	bc3c      	pop	{r2, r3, r4, r5}
    2bb4:	4690      	mov	r8, r2
    2bb6:	4699      	mov	r9, r3
    2bb8:	46a2      	mov	sl, r4
    2bba:	46ab      	mov	fp, r5
    2bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint8_t    tmpConnectionMode = ConnMode;
    2bbe:	4b37      	ldr	r3, [pc, #220]	; (2c9c <MiApp_EstablishConnection+0x100>)
        uint8_t    connectionInterval = 0;
    2bc0:	2600      	movs	r6, #0
        uint8_t    tmpConnectionMode = ConnMode;
    2bc2:	781b      	ldrb	r3, [r3, #0]
    2bc4:	9303      	str	r3, [sp, #12]
        t1.Val = MiWi_TickGet();
    2bc6:	4b36      	ldr	r3, [pc, #216]	; (2ca0 <MiApp_EstablishConnection+0x104>)
    2bc8:	4699      	mov	r9, r3
    2bca:	4798      	blx	r3
        ConnMode = ENABLE_ALL_CONN;
    2bcc:	2300      	movs	r3, #0
    2bce:	4a33      	ldr	r2, [pc, #204]	; (2c9c <MiApp_EstablishConnection+0x100>)
        P2PStatus.bits.SearchConnection = 1;
    2bd0:	4c34      	ldr	r4, [pc, #208]	; (2ca4 <MiApp_EstablishConnection+0x108>)
        ConnMode = ENABLE_ALL_CONN;
    2bd2:	7013      	strb	r3, [r2, #0]
        P2PStatus.bits.SearchConnection = 1;
    2bd4:	2210      	movs	r2, #16
    2bd6:	7823      	ldrb	r3, [r4, #0]
        t1.Val -= (ONE_SECOND);
    2bd8:	387c      	subs	r0, #124	; 0x7c
        P2PStatus.bits.SearchConnection = 1;
    2bda:	4313      	orrs	r3, r2
    2bdc:	7023      	strb	r3, [r4, #0]
        uint8_t    retry = CONNECTION_RETRY_TIMES;
    2bde:	2303      	movs	r3, #3
    2be0:	469a      	mov	sl, r3
        tParam.flags.bits.sourcePrsnt = 1;
    2be2:	3b7e      	subs	r3, #126	; 0x7e
        t1.Val -= (ONE_SECOND);
    2be4:	0007      	movs	r7, r0
        tParam.flags.bits.sourcePrsnt = 1;
    2be6:	469b      	mov	fp, r3
        while( P2PStatus.bits.SearchConnection )
    2be8:	7823      	ldrb	r3, [r4, #0]
    2bea:	06db      	lsls	r3, r3, #27
    2bec:	d53f      	bpl.n	2c6e <MiApp_EstablishConnection+0xd2>
            t2.Val = MiWi_TickGet();
    2bee:	47c8      	blx	r9
    2bf0:	0005      	movs	r5, r0
            if( MiWi_TickGetDiff(t2, t1) > (ONE_SECOND) )
    2bf2:	1bc3      	subs	r3, r0, r7
    2bf4:	2b7c      	cmp	r3, #124	; 0x7c
    2bf6:	d92b      	bls.n	2c50 <MiApp_EstablishConnection+0xb4>
                if( connectionInterval-- > 0 )
    2bf8:	2e00      	cmp	r6, #0
    2bfa:	d13f      	bne.n	2c7c <MiApp_EstablishConnection+0xe0>
                if( retry-- == 0 )
    2bfc:	4653      	mov	r3, sl
    2bfe:	3b01      	subs	r3, #1
    2c00:	b2db      	uxtb	r3, r3
    2c02:	4698      	mov	r8, r3
    2c04:	4653      	mov	r3, sl
    2c06:	2b00      	cmp	r3, #0
    2c08:	d042      	beq.n	2c90 <MiApp_EstablishConnection+0xf4>
                MiApp_WriteData(CMD_P2P_CONNECTION_REQUEST);
    2c0a:	2281      	movs	r2, #129	; 0x81
					MiApp_WriteData(0xA2);
    2c0c:	2104      	movs	r1, #4
                MiApp_WriteData(CMD_P2P_CONNECTION_REQUEST);
    2c0e:	4b26      	ldr	r3, [pc, #152]	; (2ca8 <MiApp_EstablishConnection+0x10c>)
        tParam.altDestAddr = (Broadcast) ? true : false;
    2c10:	2701      	movs	r7, #1
                MiApp_WriteData(CMD_P2P_CONNECTION_REQUEST);
    2c12:	701a      	strb	r2, [r3, #0]
                MiApp_WriteData(currentChannel);
    2c14:	4a25      	ldr	r2, [pc, #148]	; (2cac <MiApp_EstablishConnection+0x110>)
    tParam.DestAddress = DestinationAddress;
    2c16:	9606      	str	r6, [sp, #24]
                MiApp_WriteData(currentChannel);
    2c18:	7812      	ldrb	r2, [r2, #0]
    2c1a:	46c2      	mov	sl, r8
    2c1c:	705a      	strb	r2, [r3, #1]
                MiApp_WriteData(P2PCapacityInfo);
    2c1e:	4a24      	ldr	r2, [pc, #144]	; (2cb0 <MiApp_EstablishConnection+0x114>)
    2c20:	7812      	ldrb	r2, [r2, #0]
    2c22:	709a      	strb	r2, [r3, #2]
					MiApp_WriteData(0xA2);
    2c24:	4a23      	ldr	r2, [pc, #140]	; (2cb4 <MiApp_EstablishConnection+0x118>)
    2c26:	7011      	strb	r1, [r2, #0]
    2c28:	22a2      	movs	r2, #162	; 0xa2
    2c2a:	70da      	strb	r2, [r3, #3]
    2c2c:	4a22      	ldr	r2, [pc, #136]	; (2cb8 <MiApp_EstablishConnection+0x11c>)
    2c2e:	8810      	ldrh	r0, [r2, #0]
    tParam.flags.Val = 0;
    2c30:	aa05      	add	r2, sp, #20
        tParam.altDestAddr = (Broadcast) ? true : false;
    2c32:	7217      	strb	r7, [r2, #8]
        tParam.flags.bits.sourcePrsnt = 1;
    2c34:	465f      	mov	r7, fp
        tParam.altSrcAddr = 0;
    2c36:	7256      	strb	r6, [r2, #9]
        tParam.flags.bits.sourcePrsnt = 1;
    2c38:	7017      	strb	r7, [r2, #0]
        tParam.DestPANID.Val = DestinationPANID.Val;
    2c3a:	8150      	strh	r0, [r2, #10]
    status = MiMAC_SendPacket(tParam, TxBuffer, TxData); 
    2c3c:	4f1f      	ldr	r7, [pc, #124]	; (2cbc <MiApp_EstablishConnection+0x120>)
    2c3e:	9100      	str	r1, [sp, #0]
    2c40:	9805      	ldr	r0, [sp, #20]
    2c42:	2100      	movs	r1, #0
    2c44:	9a07      	ldr	r2, [sp, #28]
    2c46:	47b8      	blx	r7
    TxData = 0;
    2c48:	4b1a      	ldr	r3, [pc, #104]	; (2cb4 <MiApp_EstablishConnection+0x118>)
                t1.Val = t2.Val;
    2c4a:	002f      	movs	r7, r5
    TxData = 0;
    2c4c:	701e      	strb	r6, [r3, #0]
                connectionInterval = CONNECTION_INTERVAL-1;
    2c4e:	2601      	movs	r6, #1
    if( P2PStatus.bits.RxHasUserData == 0 && MiMAC_ReceivedPacket() )
    2c50:	7823      	ldrb	r3, [r4, #0]
    2c52:	071b      	lsls	r3, r3, #28
    2c54:	d515      	bpl.n	2c82 <MiApp_EstablishConnection+0xe6>
    return P2PStatus.bits.RxHasUserData;
    2c56:	7823      	ldrb	r3, [r4, #0]
            if( MiApp_MessageAvailable())
    2c58:	071b      	lsls	r3, r3, #28
    2c5a:	d5c5      	bpl.n	2be8 <MiApp_EstablishConnection+0x4c>
    P2PStatus.bits.RxHasUserData = 0;
    2c5c:	2208      	movs	r2, #8
    2c5e:	7823      	ldrb	r3, [r4, #0]
    2c60:	4393      	bics	r3, r2
    2c62:	7023      	strb	r3, [r4, #0]
    MiMAC_DiscardPacket();
    2c64:	4b16      	ldr	r3, [pc, #88]	; (2cc0 <MiApp_EstablishConnection+0x124>)
    2c66:	4798      	blx	r3
        while( P2PStatus.bits.SearchConnection )
    2c68:	7823      	ldrb	r3, [r4, #0]
    2c6a:	06db      	lsls	r3, r3, #27
    2c6c:	d4bf      	bmi.n	2bee <MiApp_EstablishConnection+0x52>
        ConnMode = tmpConnectionMode;
    2c6e:	466a      	mov	r2, sp
    2c70:	4b0a      	ldr	r3, [pc, #40]	; (2c9c <MiApp_EstablishConnection+0x100>)
    2c72:	7b12      	ldrb	r2, [r2, #12]
    2c74:	701a      	strb	r2, [r3, #0]
        return LatestConnection;
    2c76:	4b13      	ldr	r3, [pc, #76]	; (2cc4 <MiApp_EstablishConnection+0x128>)
    2c78:	7818      	ldrb	r0, [r3, #0]
    2c7a:	e799      	b.n	2bb0 <MiApp_EstablishConnection+0x14>
                t1.Val = t2.Val;
    2c7c:	0007      	movs	r7, r0
    2c7e:	2600      	movs	r6, #0
    2c80:	e7b2      	b.n	2be8 <MiApp_EstablishConnection+0x4c>
    if( P2PStatus.bits.RxHasUserData == 0 && MiMAC_ReceivedPacket() )
    2c82:	4b11      	ldr	r3, [pc, #68]	; (2cc8 <MiApp_EstablishConnection+0x12c>)
    2c84:	4798      	blx	r3
    2c86:	2800      	cmp	r0, #0
    2c88:	d0e5      	beq.n	2c56 <MiApp_EstablishConnection+0xba>
    2c8a:	4b10      	ldr	r3, [pc, #64]	; (2ccc <MiApp_EstablishConnection+0x130>)
    2c8c:	4798      	blx	r3
    2c8e:	e7e2      	b.n	2c56 <MiApp_EstablishConnection+0xba>
                    P2PStatus.bits.SearchConnection = 0;
    2c90:	2210      	movs	r2, #16
    2c92:	7823      	ldrb	r3, [r4, #0]
                    return 0xFF;
    2c94:	20ff      	movs	r0, #255	; 0xff
                    P2PStatus.bits.SearchConnection = 0;
    2c96:	4393      	bics	r3, r2
    2c98:	7023      	strb	r3, [r4, #0]
                    return 0xFF;
    2c9a:	e789      	b.n	2bb0 <MiApp_EstablishConnection+0x14>
    2c9c:	20000014 	.word	0x20000014
    2ca0:	0000305d 	.word	0x0000305d
    2ca4:	200009c4 	.word	0x200009c4
    2ca8:	200009c8 	.word	0x200009c8
    2cac:	2000012a 	.word	0x2000012a
    2cb0:	20000990 	.word	0x20000990
    2cb4:	200009c5 	.word	0x200009c5
    2cb8:	20000994 	.word	0x20000994
    2cbc:	00001999 	.word	0x00001999
    2cc0:	00001d5d 	.word	0x00001d5d
    2cc4:	20000914 	.word	0x20000914
    2cc8:	00001d79 	.word	0x00001d79
    2ccc:	00002889 	.word	0x00002889

00002cd0 <MiApp_ConnectionMode>:
 *      None
 *
 *****************************************************************************************/ 
void MiApp_ConnectionMode(INPUT uint8_t Mode)
{
    if( Mode > 3 )
    2cd0:	2803      	cmp	r0, #3
    2cd2:	d808      	bhi.n	2ce6 <MiApp_ConnectionMode+0x16>
    {
        return;
    }
    ConnMode = Mode;
    2cd4:	4b04      	ldr	r3, [pc, #16]	; (2ce8 <MiApp_ConnectionMode+0x18>)
    P2PCapacityInfo = (P2PCapacityInfo & 0x0F) | (ConnMode << 4);
    2cd6:	4a05      	ldr	r2, [pc, #20]	; (2cec <MiApp_ConnectionMode+0x1c>)
    ConnMode = Mode;
    2cd8:	7018      	strb	r0, [r3, #0]
    P2PCapacityInfo = (P2PCapacityInfo & 0x0F) | (ConnMode << 4);
    2cda:	230f      	movs	r3, #15
    2cdc:	7811      	ldrb	r1, [r2, #0]
    2cde:	0100      	lsls	r0, r0, #4
    2ce0:	400b      	ands	r3, r1
    2ce2:	4318      	orrs	r0, r3
    2ce4:	7010      	strb	r0, [r2, #0]
    
    #if defined(ENABLE_NETWORK_FREEZER)
        nvmPutConnMode(&ConnMode);
    #endif
    2ce6:	4770      	bx	lr
    2ce8:	20000014 	.word	0x20000014
    2cec:	20000990 	.word	0x20000990

00002cf0 <rtc_overflow_callback>:

/*! \brief RTC timer overflow callback
 *
 */
void rtc_overflow_callback(void)
{
    2cf0:	b510      	push	{r4, lr}
	/* Do something on RTC overflow here */
	rtc_count_disable(&rtc_instance);	
    2cf2:	4802      	ldr	r0, [pc, #8]	; (2cfc <rtc_overflow_callback+0xc>)
    2cf4:	4b02      	ldr	r3, [pc, #8]	; (2d00 <rtc_overflow_callback+0x10>)
    2cf6:	4798      	blx	r3
	
}
    2cf8:	bd10      	pop	{r4, pc}
    2cfa:	46c0      	nop			; (mov r8, r8)
    2cfc:	20000a0c 	.word	0x20000a0c
    2d00:	000002bd 	.word	0x000002bd

00002d04 <setSleepPeriod>:

}

void setSleepPeriod(uint32_t interval)
{
	interval = interval * 1000;
    2d04:	21fa      	movs	r1, #250	; 0xfa
    2d06:	0089      	lsls	r1, r1, #2
    2d08:	4341      	muls	r1, r0
{
    2d0a:	b510      	push	{r4, lr}
	rtc_count_set_period(&rtc_instance, interval);
    2d0c:	4c0d      	ldr	r4, [pc, #52]	; (2d44 <setSleepPeriod+0x40>)
    2d0e:	b289      	uxth	r1, r1
    2d10:	4b0d      	ldr	r3, [pc, #52]	; (2d48 <setSleepPeriod+0x44>)
    2d12:	0020      	movs	r0, r4
    2d14:	4798      	blx	r3
	rtc_count_register_callback(
    2d16:	220a      	movs	r2, #10
    2d18:	490c      	ldr	r1, [pc, #48]	; (2d4c <setSleepPeriod+0x48>)
    2d1a:	4b0d      	ldr	r3, [pc, #52]	; (2d50 <setSleepPeriod+0x4c>)
    2d1c:	0020      	movs	r0, r4
    2d1e:	4798      	blx	r3
	rtc_count_enable_callback(&rtc_instance, RTC_COUNT_CALLBACK_OVERFLOW);
    2d20:	210a      	movs	r1, #10
    2d22:	0020      	movs	r0, r4
    2d24:	4b0b      	ldr	r3, [pc, #44]	; (2d54 <setSleepPeriod+0x50>)
    2d26:	4798      	blx	r3
	configure_rtc_callbacks();
	rtc_count_enable(&rtc_instance);
    2d28:	4b0b      	ldr	r3, [pc, #44]	; (2d58 <setSleepPeriod+0x54>)
    2d2a:	0020      	movs	r0, r4
    2d2c:	4798      	blx	r3
 * \param[in] sleep_mode  Sleep mode to configure for the next sleep operation
 */
static inline void system_set_sleepmode(
	const enum system_sleepmode sleep_mode)
{
	PM->SLEEPCFG.reg = sleep_mode;
    2d2e:	2280      	movs	r2, #128	; 0x80
    2d30:	2305      	movs	r3, #5
    2d32:	05d2      	lsls	r2, r2, #23
    2d34:	7053      	strb	r3, [r2, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    2d36:	7853      	ldrb	r3, [r2, #1]
    2d38:	2b05      	cmp	r3, #5
    2d3a:	d1fc      	bne.n	2d36 <setSleepPeriod+0x32>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    2d3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    2d40:	bf30      	wfi

	/*put the MCU in standby mode with RTC as wakeup source*/
	system_set_sleepmode(SYSTEM_SLEEPMODE_BACKUP);
	system_sleep();
}
    2d42:	bd10      	pop	{r4, pc}
    2d44:	20000a0c 	.word	0x20000a0c
    2d48:	00000421 	.word	0x00000421
    2d4c:	00002cf1 	.word	0x00002cf1
    2d50:	00000445 	.word	0x00000445
    2d54:	00000481 	.word	0x00000481
    2d58:	00000295 	.word	0x00000295

00002d5c <rtc_init>:

/*! \brief Initialize RTC timer
 *
 */
void rtc_init(void)
{
    2d5c:	b510      	push	{r4, lr}
    2d5e:	b084      	sub	sp, #16
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
	config->mode                = RTC_COUNT_MODE_32BIT;
	config->clear_on_match      = false;
    2d60:	2300      	movs	r3, #0
    2d62:	466a      	mov	r2, sp

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
    2d64:	4669      	mov	r1, sp
	config->clear_on_match      = false;
    2d66:	70d3      	strb	r3, [r2, #3]
	config->enable_read_sync    = true;
    2d68:	2201      	movs	r2, #1
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
		config->compare_values[i] = 0;
    2d6a:	2000      	movs	r0, #0
	config->enable_read_sync    = true;
    2d6c:	710a      	strb	r2, [r1, #4]
		config->compare_values[i] = 0;
    2d6e:	2100      	movs	r1, #0
	config_rtc_count.prescaler           = RTC_COUNT_PRESCALER_DIV_16;
    2d70:	22a0      	movs	r2, #160	; 0xa0
    2d72:	9002      	str	r0, [sp, #8]
    2d74:	9103      	str	r1, [sp, #12]
    2d76:	4669      	mov	r1, sp
	rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
    2d78:	4c09      	ldr	r4, [pc, #36]	; (2da0 <rtc_init+0x44>)
	config_rtc_count.prescaler           = RTC_COUNT_PRESCALER_DIV_16;
    2d7a:	00d2      	lsls	r2, r2, #3
    2d7c:	800a      	strh	r2, [r1, #0]
	config_rtc_count.mode                = RTC_COUNT_MODE_16BIT;
    2d7e:	708b      	strb	r3, [r1, #2]
    2d80:	466a      	mov	r2, sp
	rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
    2d82:	4908      	ldr	r1, [pc, #32]	; (2da4 <rtc_init+0x48>)
    2d84:	0020      	movs	r0, r4
    2d86:	4b08      	ldr	r3, [pc, #32]	; (2da8 <rtc_init+0x4c>)
    2d88:	4798      	blx	r3
	rtc_count_register_callback(
    2d8a:	220a      	movs	r2, #10
    2d8c:	4907      	ldr	r1, [pc, #28]	; (2dac <rtc_init+0x50>)
    2d8e:	0020      	movs	r0, r4
    2d90:	4b07      	ldr	r3, [pc, #28]	; (2db0 <rtc_init+0x54>)
    2d92:	4798      	blx	r3
	rtc_count_enable_callback(&rtc_instance, RTC_COUNT_CALLBACK_OVERFLOW);
    2d94:	210a      	movs	r1, #10
    2d96:	0020      	movs	r0, r4
    2d98:	4b06      	ldr	r3, [pc, #24]	; (2db4 <rtc_init+0x58>)
    2d9a:	4798      	blx	r3
	configure_rtc_count();
}
    2d9c:	b004      	add	sp, #16
    2d9e:	bd10      	pop	{r4, pc}
    2da0:	20000a0c 	.word	0x20000a0c
    2da4:	40002000 	.word	0x40002000
    2da8:	000002f1 	.word	0x000002f1
    2dac:	00002cf1 	.word	0x00002cf1
    2db0:	00000445 	.word	0x00000445
    2db4:	00000481 	.word	0x00000481

00002db8 <sal_aes_setup>:
    2db8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dba:	4657      	mov	r7, sl
    2dbc:	4645      	mov	r5, r8
    2dbe:	46de      	mov	lr, fp
    2dc0:	464e      	mov	r6, r9
    2dc2:	b5e0      	push	{r5, r6, r7, lr}
    2dc4:	0014      	movs	r4, r2
    2dc6:	b085      	sub	sp, #20
    2dc8:	0007      	movs	r7, r0
    2dca:	000d      	movs	r5, r1
    2dcc:	2800      	cmp	r0, #0
    2dce:	d018      	beq.n	2e02 <sal_aes_setup+0x4a>
    2dd0:	2200      	movs	r2, #0
    2dd2:	4b4d      	ldr	r3, [pc, #308]	; (2f08 <sal_aes_setup+0x150>)
    2dd4:	0001      	movs	r1, r0
    2dd6:	701a      	strb	r2, [r3, #0]
    2dd8:	4b4c      	ldr	r3, [pc, #304]	; (2f0c <sal_aes_setup+0x154>)
    2dda:	3202      	adds	r2, #2
    2ddc:	701a      	strb	r2, [r3, #0]
    2dde:	4e4c      	ldr	r6, [pc, #304]	; (2f10 <sal_aes_setup+0x158>)
    2de0:	320e      	adds	r2, #14
    2de2:	484c      	ldr	r0, [pc, #304]	; (2f14 <sal_aes_setup+0x15c>)
    2de4:	47b0      	blx	r6
    2de6:	4b4c      	ldr	r3, [pc, #304]	; (2f18 <sal_aes_setup+0x160>)
    2de8:	0039      	movs	r1, r7
    2dea:	4698      	mov	r8, r3
    2dec:	2310      	movs	r3, #16
    2dee:	4642      	mov	r2, r8
    2df0:	7013      	strb	r3, [r2, #0]
    2df2:	1c50      	adds	r0, r2, #1
    2df4:	2210      	movs	r2, #16
    2df6:	47b0      	blx	r6
    2df8:	2211      	movs	r2, #17
    2dfa:	4641      	mov	r1, r8
    2dfc:	2083      	movs	r0, #131	; 0x83
    2dfe:	4b47      	ldr	r3, [pc, #284]	; (2f1c <sal_aes_setup+0x164>)
    2e00:	4798      	blx	r3
    2e02:	2c00      	cmp	r4, #0
    2e04:	d042      	beq.n	2e8c <sal_aes_setup+0xd4>
    2e06:	2c01      	cmp	r4, #1
    2e08:	d138      	bne.n	2e7c <sal_aes_setup+0xc4>
    2e0a:	4f40      	ldr	r7, [pc, #256]	; (2f0c <sal_aes_setup+0x154>)
    2e0c:	783b      	ldrb	r3, [r7, #0]
    2e0e:	2b01      	cmp	r3, #1
    2e10:	d01d      	beq.n	2e4e <sal_aes_setup+0x96>
    2e12:	4b41      	ldr	r3, [pc, #260]	; (2f18 <sal_aes_setup+0x160>)
    2e14:	4698      	mov	r8, r3
    2e16:	2310      	movs	r3, #16
    2e18:	469b      	mov	fp, r3
    2e1a:	4643      	mov	r3, r8
    2e1c:	465a      	mov	r2, fp
    2e1e:	701a      	strb	r2, [r3, #0]
    2e20:	4b39      	ldr	r3, [pc, #228]	; (2f08 <sal_aes_setup+0x150>)
    2e22:	4699      	mov	r9, r3
    2e24:	781b      	ldrb	r3, [r3, #0]
    2e26:	469a      	mov	sl, r3
    2e28:	2b00      	cmp	r3, #0
    2e2a:	d041      	beq.n	2eb0 <sal_aes_setup+0xf8>
    2e2c:	4b3b      	ldr	r3, [pc, #236]	; (2f1c <sal_aes_setup+0x164>)
    2e2e:	4e38      	ldr	r6, [pc, #224]	; (2f10 <sal_aes_setup+0x158>)
    2e30:	469a      	mov	sl, r3
    2e32:	4b3b      	ldr	r3, [pc, #236]	; (2f20 <sal_aes_setup+0x168>)
    2e34:	469b      	mov	fp, r3
    2e36:	4643      	mov	r3, r8
    2e38:	2210      	movs	r2, #16
    2e3a:	1c58      	adds	r0, r3, #1
    2e3c:	4659      	mov	r1, fp
    2e3e:	47b0      	blx	r6
    2e40:	2211      	movs	r2, #17
    2e42:	4641      	mov	r1, r8
    2e44:	2083      	movs	r0, #131	; 0x83
    2e46:	47d0      	blx	sl
    2e48:	2301      	movs	r3, #1
    2e4a:	464a      	mov	r2, r9
    2e4c:	7013      	strb	r3, [r2, #0]
    2e4e:	703c      	strb	r4, [r7, #0]
    2e50:	2d00      	cmp	r5, #0
    2e52:	d001      	beq.n	2e58 <sal_aes_setup+0xa0>
    2e54:	2d02      	cmp	r5, #2
    2e56:	d111      	bne.n	2e7c <sal_aes_setup+0xc4>
    2e58:	2370      	movs	r3, #112	; 0x70
    2e5a:	012d      	lsls	r5, r5, #4
    2e5c:	401d      	ands	r5, r3
    2e5e:	00e4      	lsls	r4, r4, #3
    2e60:	3b68      	subs	r3, #104	; 0x68
    2e62:	401c      	ands	r4, r3
    2e64:	432c      	orrs	r4, r5
    2e66:	2580      	movs	r5, #128	; 0x80
    2e68:	2201      	movs	r2, #1
    2e6a:	4b2b      	ldr	r3, [pc, #172]	; (2f18 <sal_aes_setup+0x160>)
    2e6c:	426d      	negs	r5, r5
    2e6e:	701c      	strb	r4, [r3, #0]
    2e70:	432c      	orrs	r4, r5
    2e72:	745c      	strb	r4, [r3, #17]
    2e74:	4b2b      	ldr	r3, [pc, #172]	; (2f24 <sal_aes_setup+0x16c>)
    2e76:	2001      	movs	r0, #1
    2e78:	701a      	strb	r2, [r3, #0]
    2e7a:	e000      	b.n	2e7e <sal_aes_setup+0xc6>
    2e7c:	2000      	movs	r0, #0
    2e7e:	b005      	add	sp, #20
    2e80:	bc3c      	pop	{r2, r3, r4, r5}
    2e82:	4690      	mov	r8, r2
    2e84:	4699      	mov	r9, r3
    2e86:	46a2      	mov	sl, r4
    2e88:	46ab      	mov	fp, r5
    2e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e8c:	4f1f      	ldr	r7, [pc, #124]	; (2f0c <sal_aes_setup+0x154>)
    2e8e:	783b      	ldrb	r3, [r7, #0]
    2e90:	2b01      	cmp	r3, #1
    2e92:	d1dc      	bne.n	2e4e <sal_aes_setup+0x96>
    2e94:	4e20      	ldr	r6, [pc, #128]	; (2f18 <sal_aes_setup+0x160>)
    2e96:	330f      	adds	r3, #15
    2e98:	7033      	strb	r3, [r6, #0]
    2e9a:	1c70      	adds	r0, r6, #1
    2e9c:	2210      	movs	r2, #16
    2e9e:	491d      	ldr	r1, [pc, #116]	; (2f14 <sal_aes_setup+0x15c>)
    2ea0:	4b1b      	ldr	r3, [pc, #108]	; (2f10 <sal_aes_setup+0x158>)
    2ea2:	4798      	blx	r3
    2ea4:	2211      	movs	r2, #17
    2ea6:	0031      	movs	r1, r6
    2ea8:	2083      	movs	r0, #131	; 0x83
    2eaa:	4b1c      	ldr	r3, [pc, #112]	; (2f1c <sal_aes_setup+0x164>)
    2eac:	4798      	blx	r3
    2eae:	e7ce      	b.n	2e4e <sal_aes_setup+0x96>
    2eb0:	4643      	mov	r3, r8
    2eb2:	4652      	mov	r2, sl
    2eb4:	701a      	strb	r2, [r3, #0]
    2eb6:	2280      	movs	r2, #128	; 0x80
    2eb8:	745a      	strb	r2, [r3, #17]
    2eba:	4b1a      	ldr	r3, [pc, #104]	; (2f24 <sal_aes_setup+0x16c>)
    2ebc:	4669      	mov	r1, sp
    2ebe:	701c      	strb	r4, [r3, #0]
    2ec0:	4643      	mov	r3, r8
    2ec2:	2210      	movs	r2, #16
    2ec4:	1c58      	adds	r0, r3, #1
    2ec6:	4e12      	ldr	r6, [pc, #72]	; (2f10 <sal_aes_setup+0x158>)
    2ec8:	47b0      	blx	r6
    2eca:	4641      	mov	r1, r8
    2ecc:	2212      	movs	r2, #18
    2ece:	2083      	movs	r0, #131	; 0x83
    2ed0:	4b15      	ldr	r3, [pc, #84]	; (2f28 <sal_aes_setup+0x170>)
    2ed2:	4798      	blx	r3
    2ed4:	4652      	mov	r2, sl
    2ed6:	4b13      	ldr	r3, [pc, #76]	; (2f24 <sal_aes_setup+0x16c>)
    2ed8:	2018      	movs	r0, #24
    2eda:	701a      	strb	r2, [r3, #0]
    2edc:	4643      	mov	r3, r8
    2ede:	2280      	movs	r2, #128	; 0x80
    2ee0:	745a      	strb	r2, [r3, #17]
    2ee2:	4b12      	ldr	r3, [pc, #72]	; (2f2c <sal_aes_setup+0x174>)
    2ee4:	4798      	blx	r3
    2ee6:	4643      	mov	r3, r8
    2ee8:	465a      	mov	r2, fp
    2eea:	701a      	strb	r2, [r3, #0]
    2eec:	4b0b      	ldr	r3, [pc, #44]	; (2f1c <sal_aes_setup+0x164>)
    2eee:	4641      	mov	r1, r8
    2ef0:	2201      	movs	r2, #1
    2ef2:	2083      	movs	r0, #131	; 0x83
    2ef4:	469a      	mov	sl, r3
    2ef6:	4798      	blx	r3
    2ef8:	4b09      	ldr	r3, [pc, #36]	; (2f20 <sal_aes_setup+0x168>)
    2efa:	2210      	movs	r2, #16
    2efc:	469b      	mov	fp, r3
    2efe:	0019      	movs	r1, r3
    2f00:	2084      	movs	r0, #132	; 0x84
    2f02:	4b0b      	ldr	r3, [pc, #44]	; (2f30 <sal_aes_setup+0x178>)
    2f04:	4798      	blx	r3
    2f06:	e796      	b.n	2e36 <sal_aes_setup+0x7e>
    2f08:	2000013e 	.word	0x2000013e
    2f0c:	20000015 	.word	0x20000015
    2f10:	00007d91 	.word	0x00007d91
    2f14:	20000150 	.word	0x20000150
    2f18:	2000012c 	.word	0x2000012c
    2f1c:	00005865 	.word	0x00005865
    2f20:	20000140 	.word	0x20000140
    2f24:	20000160 	.word	0x20000160
    2f28:	00005b7d 	.word	0x00005b7d
    2f2c:	000030b1 	.word	0x000030b1
    2f30:	000059ed 	.word	0x000059ed

00002f34 <sal_aes_wrrd>:
    2f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f36:	46ce      	mov	lr, r9
    2f38:	4647      	mov	r7, r8
    2f3a:	4c16      	ldr	r4, [pc, #88]	; (2f94 <sal_aes_wrrd+0x60>)
    2f3c:	b580      	push	{r7, lr}
    2f3e:	1c67      	adds	r7, r4, #1
    2f40:	000e      	movs	r6, r1
    2f42:	2210      	movs	r2, #16
    2f44:	0001      	movs	r1, r0
    2f46:	4d14      	ldr	r5, [pc, #80]	; (2f98 <sal_aes_wrrd+0x64>)
    2f48:	0038      	movs	r0, r7
    2f4a:	47a8      	blx	r5
    2f4c:	7c63      	ldrb	r3, [r4, #17]
    2f4e:	4699      	mov	r9, r3
    2f50:	4b12      	ldr	r3, [pc, #72]	; (2f9c <sal_aes_wrrd+0x68>)
    2f52:	4698      	mov	r8, r3
    2f54:	781b      	ldrb	r3, [r3, #0]
    2f56:	2b00      	cmp	r3, #0
    2f58:	d016      	beq.n	2f88 <sal_aes_wrrd+0x54>
    2f5a:	2212      	movs	r2, #18
    2f5c:	4b10      	ldr	r3, [pc, #64]	; (2fa0 <sal_aes_wrrd+0x6c>)
    2f5e:	0021      	movs	r1, r4
    2f60:	2083      	movs	r0, #131	; 0x83
    2f62:	4798      	blx	r3
    2f64:	2300      	movs	r3, #0
    2f66:	4642      	mov	r2, r8
    2f68:	7013      	strb	r3, [r2, #0]
    2f6a:	2e00      	cmp	r6, #0
    2f6c:	d003      	beq.n	2f76 <sal_aes_wrrd+0x42>
    2f6e:	1c61      	adds	r1, r4, #1
    2f70:	2210      	movs	r2, #16
    2f72:	0030      	movs	r0, r6
    2f74:	47a8      	blx	r5
    2f76:	464b      	mov	r3, r9
    2f78:	2018      	movs	r0, #24
    2f7a:	7463      	strb	r3, [r4, #17]
    2f7c:	4b09      	ldr	r3, [pc, #36]	; (2fa4 <sal_aes_wrrd+0x70>)
    2f7e:	4798      	blx	r3
    2f80:	bc0c      	pop	{r2, r3}
    2f82:	4690      	mov	r8, r2
    2f84:	4699      	mov	r9, r3
    2f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f88:	2211      	movs	r2, #17
    2f8a:	0039      	movs	r1, r7
    2f8c:	2084      	movs	r0, #132	; 0x84
    2f8e:	4b04      	ldr	r3, [pc, #16]	; (2fa0 <sal_aes_wrrd+0x6c>)
    2f90:	4798      	blx	r3
    2f92:	e7ea      	b.n	2f6a <sal_aes_wrrd+0x36>
    2f94:	2000012c 	.word	0x2000012c
    2f98:	00007d91 	.word	0x00007d91
    2f9c:	20000160 	.word	0x20000160
    2fa0:	00005b7d 	.word	0x00005b7d
    2fa4:	000030b1 	.word	0x000030b1

00002fa8 <sal_aes_read>:
    2fa8:	b510      	push	{r4, lr}
    2faa:	0001      	movs	r1, r0
    2fac:	2210      	movs	r2, #16
    2fae:	2084      	movs	r0, #132	; 0x84
    2fb0:	4b01      	ldr	r3, [pc, #4]	; (2fb8 <sal_aes_read+0x10>)
    2fb2:	4798      	blx	r3
    2fb4:	bd10      	pop	{r4, pc}
    2fb6:	46c0      	nop			; (mov r8, r8)
    2fb8:	000059ed 	.word	0x000059ed

00002fbc <configure_tc>:
    2fbc:	b510      	push	{r4, lr}
    2fbe:	4c22      	ldr	r4, [pc, #136]	; (3048 <configure_tc+0x8c>)
    2fc0:	b08e      	sub	sp, #56	; 0x38
    2fc2:	4b22      	ldr	r3, [pc, #136]	; (304c <configure_tc+0x90>)
    2fc4:	0020      	movs	r0, r4
    2fc6:	4798      	blx	r3
    2fc8:	2300      	movs	r3, #0
    2fca:	466a      	mov	r2, sp
    2fcc:	2000      	movs	r0, #0
    2fce:	2100      	movs	r1, #0
    2fd0:	7193      	strb	r3, [r2, #6]
    2fd2:	71d3      	strb	r3, [r2, #7]
    2fd4:	7053      	strb	r3, [r2, #1]
    2fd6:	7093      	strb	r3, [r2, #2]
    2fd8:	7213      	strb	r3, [r2, #8]
    2fda:	7253      	strb	r3, [r2, #9]
    2fdc:	7293      	strb	r3, [r2, #10]
    2fde:	72d3      	strb	r3, [r2, #11]
    2fe0:	7313      	strb	r3, [r2, #12]
    2fe2:	7393      	strb	r3, [r2, #14]
    2fe4:	7353      	strb	r3, [r2, #13]
    2fe6:	7413      	strb	r3, [r2, #16]
    2fe8:	7713      	strb	r3, [r2, #28]
    2fea:	9008      	str	r0, [sp, #32]
    2fec:	9109      	str	r1, [sp, #36]	; 0x24
    2fee:	8513      	strh	r3, [r2, #40]	; 0x28
    2ff0:	4669      	mov	r1, sp
    2ff2:	8553      	strh	r3, [r2, #42]	; 0x2a
    2ff4:	8593      	strh	r3, [r2, #44]	; 0x2c
    2ff6:	2200      	movs	r2, #0
    2ff8:	9305      	str	r3, [sp, #20]
    2ffa:	9306      	str	r3, [sp, #24]
    2ffc:	3334      	adds	r3, #52	; 0x34
    2ffe:	54ca      	strb	r2, [r1, r3]
    3000:	3b2c      	subs	r3, #44	; 0x2c
    3002:	70cb      	strb	r3, [r1, #3]
    3004:	3b07      	subs	r3, #7
    3006:	700b      	strb	r3, [r1, #0]
    3008:	23a0      	movs	r3, #160	; 0xa0
    300a:	00db      	lsls	r3, r3, #3
    300c:	808b      	strh	r3, [r1, #4]
    300e:	466a      	mov	r2, sp
    3010:	490f      	ldr	r1, [pc, #60]	; (3050 <configure_tc+0x94>)
    3012:	0020      	movs	r0, r4
    3014:	4b0f      	ldr	r3, [pc, #60]	; (3054 <configure_tc+0x98>)
    3016:	4798      	blx	r3
    3018:	6822      	ldr	r2, [r4, #0]
    301a:	6913      	ldr	r3, [r2, #16]
    301c:	2b00      	cmp	r3, #0
    301e:	d1fc      	bne.n	301a <configure_tc+0x5e>
    3020:	2102      	movs	r1, #2
    3022:	6813      	ldr	r3, [r2, #0]
    3024:	0020      	movs	r0, r4
    3026:	430b      	orrs	r3, r1
    3028:	6013      	str	r3, [r2, #0]
    302a:	2100      	movs	r1, #0
    302c:	4b0a      	ldr	r3, [pc, #40]	; (3058 <configure_tc+0x9c>)
    302e:	4798      	blx	r3
    3030:	6823      	ldr	r3, [r4, #0]
    3032:	691a      	ldr	r2, [r3, #16]
    3034:	2a00      	cmp	r2, #0
    3036:	d1fc      	bne.n	3032 <configure_tc+0x76>
    3038:	711a      	strb	r2, [r3, #4]
    303a:	691a      	ldr	r2, [r3, #16]
    303c:	2a00      	cmp	r2, #0
    303e:	d1fc      	bne.n	303a <configure_tc+0x7e>
    3040:	3220      	adds	r2, #32
    3042:	715a      	strb	r2, [r3, #5]
    3044:	b00e      	add	sp, #56	; 0x38
    3046:	bd10      	pop	{r4, pc}
    3048:	20000a5c 	.word	0x20000a5c
    304c:	00004f21 	.word	0x00004f21
    3050:	43000800 	.word	0x43000800
    3054:	00004b4d 	.word	0x00004b4d
    3058:	00004eb1 	.word	0x00004eb1

0000305c <MiWi_TickGet>:
    305c:	b510      	push	{r4, lr}
    305e:	4802      	ldr	r0, [pc, #8]	; (3068 <MiWi_TickGet+0xc>)
    3060:	4b02      	ldr	r3, [pc, #8]	; (306c <MiWi_TickGet+0x10>)
    3062:	4798      	blx	r3
    3064:	bd10      	pop	{r4, pc}
    3066:	46c0      	nop			; (mov r8, r8)
    3068:	20000a5c 	.word	0x20000a5c
    306c:	00004ee1 	.word	0x00004ee1

00003070 <delay_init>:
    3070:	b570      	push	{r4, r5, r6, lr}
    3072:	4b09      	ldr	r3, [pc, #36]	; (3098 <delay_init+0x28>)
    3074:	2000      	movs	r0, #0
    3076:	4798      	blx	r3
    3078:	21fa      	movs	r1, #250	; 0xfa
    307a:	4c08      	ldr	r4, [pc, #32]	; (309c <delay_init+0x2c>)
    307c:	0089      	lsls	r1, r1, #2
    307e:	0005      	movs	r5, r0
    3080:	47a0      	blx	r4
    3082:	4b07      	ldr	r3, [pc, #28]	; (30a0 <delay_init+0x30>)
    3084:	4907      	ldr	r1, [pc, #28]	; (30a4 <delay_init+0x34>)
    3086:	6018      	str	r0, [r3, #0]
    3088:	0028      	movs	r0, r5
    308a:	47a0      	blx	r4
    308c:	2205      	movs	r2, #5
    308e:	4b06      	ldr	r3, [pc, #24]	; (30a8 <delay_init+0x38>)
    3090:	6018      	str	r0, [r3, #0]
    3092:	4b06      	ldr	r3, [pc, #24]	; (30ac <delay_init+0x3c>)
    3094:	601a      	str	r2, [r3, #0]
    3096:	bd70      	pop	{r4, r5, r6, pc}
    3098:	000047c5 	.word	0x000047c5
    309c:	00005fd9 	.word	0x00005fd9
    30a0:	20000018 	.word	0x20000018
    30a4:	000f4240 	.word	0x000f4240
    30a8:	2000001c 	.word	0x2000001c
    30ac:	e000e010 	.word	0xe000e010

000030b0 <delay_cycles_us>:
    30b0:	2180      	movs	r1, #128	; 0x80
    30b2:	b530      	push	{r4, r5, lr}
    30b4:	2500      	movs	r5, #0
    30b6:	4b08      	ldr	r3, [pc, #32]	; (30d8 <delay_cycles_us+0x28>)
    30b8:	4a08      	ldr	r2, [pc, #32]	; (30dc <delay_cycles_us+0x2c>)
    30ba:	681c      	ldr	r4, [r3, #0]
    30bc:	0249      	lsls	r1, r1, #9
    30be:	3801      	subs	r0, #1
    30c0:	d308      	bcc.n	30d4 <delay_cycles_us+0x24>
    30c2:	2c00      	cmp	r4, #0
    30c4:	d0fb      	beq.n	30be <delay_cycles_us+0xe>
    30c6:	6054      	str	r4, [r2, #4]
    30c8:	6095      	str	r5, [r2, #8]
    30ca:	6813      	ldr	r3, [r2, #0]
    30cc:	420b      	tst	r3, r1
    30ce:	d0fc      	beq.n	30ca <delay_cycles_us+0x1a>
    30d0:	3801      	subs	r0, #1
    30d2:	d2f6      	bcs.n	30c2 <delay_cycles_us+0x12>
    30d4:	bd30      	pop	{r4, r5, pc}
    30d6:	46c0      	nop			; (mov r8, r8)
    30d8:	2000001c 	.word	0x2000001c
    30dc:	e000e010 	.word	0xe000e010

000030e0 <delay_cycles_ms>:
    30e0:	2180      	movs	r1, #128	; 0x80
    30e2:	b530      	push	{r4, r5, lr}
    30e4:	2500      	movs	r5, #0
    30e6:	4b08      	ldr	r3, [pc, #32]	; (3108 <delay_cycles_ms+0x28>)
    30e8:	4a08      	ldr	r2, [pc, #32]	; (310c <delay_cycles_ms+0x2c>)
    30ea:	681c      	ldr	r4, [r3, #0]
    30ec:	0249      	lsls	r1, r1, #9
    30ee:	3801      	subs	r0, #1
    30f0:	d308      	bcc.n	3104 <delay_cycles_ms+0x24>
    30f2:	2c00      	cmp	r4, #0
    30f4:	d0fb      	beq.n	30ee <delay_cycles_ms+0xe>
    30f6:	6054      	str	r4, [r2, #4]
    30f8:	6095      	str	r5, [r2, #8]
    30fa:	6813      	ldr	r3, [r2, #0]
    30fc:	420b      	tst	r3, r1
    30fe:	d0fc      	beq.n	30fa <delay_cycles_ms+0x1a>
    3100:	3801      	subs	r0, #1
    3102:	d2f6      	bcs.n	30f2 <delay_cycles_ms+0x12>
    3104:	bd30      	pop	{r4, r5, pc}
    3106:	46c0      	nop			; (mov r8, r8)
    3108:	20000018 	.word	0x20000018
    310c:	e000e010 	.word	0xe000e010

00003110 <cpu_irq_enter_critical>:
    3110:	4b0b      	ldr	r3, [pc, #44]	; (3140 <cpu_irq_enter_critical+0x30>)
    3112:	681a      	ldr	r2, [r3, #0]
    3114:	2a00      	cmp	r2, #0
    3116:	d105      	bne.n	3124 <cpu_irq_enter_critical+0x14>
    3118:	f3ef 8110 	mrs	r1, PRIMASK
    311c:	2900      	cmp	r1, #0
    311e:	d005      	beq.n	312c <cpu_irq_enter_critical+0x1c>
    3120:	4908      	ldr	r1, [pc, #32]	; (3144 <cpu_irq_enter_critical+0x34>)
    3122:	700a      	strb	r2, [r1, #0]
    3124:	681a      	ldr	r2, [r3, #0]
    3126:	3201      	adds	r2, #1
    3128:	601a      	str	r2, [r3, #0]
    312a:	4770      	bx	lr
    312c:	b672      	cpsid	i
    312e:	f3bf 8f5f 	dmb	sy
    3132:	4a05      	ldr	r2, [pc, #20]	; (3148 <cpu_irq_enter_critical+0x38>)
    3134:	7011      	strb	r1, [r2, #0]
    3136:	4a03      	ldr	r2, [pc, #12]	; (3144 <cpu_irq_enter_critical+0x34>)
    3138:	3101      	adds	r1, #1
    313a:	7011      	strb	r1, [r2, #0]
    313c:	e7f2      	b.n	3124 <cpu_irq_enter_critical+0x14>
    313e:	46c0      	nop			; (mov r8, r8)
    3140:	20000164 	.word	0x20000164
    3144:	20000168 	.word	0x20000168
    3148:	20000020 	.word	0x20000020

0000314c <cpu_irq_leave_critical>:
    314c:	4b08      	ldr	r3, [pc, #32]	; (3170 <cpu_irq_leave_critical+0x24>)
    314e:	681a      	ldr	r2, [r3, #0]
    3150:	3a01      	subs	r2, #1
    3152:	601a      	str	r2, [r3, #0]
    3154:	681b      	ldr	r3, [r3, #0]
    3156:	2b00      	cmp	r3, #0
    3158:	d109      	bne.n	316e <cpu_irq_leave_critical+0x22>
    315a:	4b06      	ldr	r3, [pc, #24]	; (3174 <cpu_irq_leave_critical+0x28>)
    315c:	781b      	ldrb	r3, [r3, #0]
    315e:	2b00      	cmp	r3, #0
    3160:	d005      	beq.n	316e <cpu_irq_leave_critical+0x22>
    3162:	2201      	movs	r2, #1
    3164:	4b04      	ldr	r3, [pc, #16]	; (3178 <cpu_irq_leave_critical+0x2c>)
    3166:	701a      	strb	r2, [r3, #0]
    3168:	f3bf 8f5f 	dmb	sy
    316c:	b662      	cpsie	i
    316e:	4770      	bx	lr
    3170:	20000164 	.word	0x20000164
    3174:	20000168 	.word	0x20000168
    3178:	20000020 	.word	0x20000020

0000317c <system_board_init>:
    317c:	b5f0      	push	{r4, r5, r6, r7, lr}
    317e:	46c6      	mov	lr, r8
    3180:	b500      	push	{lr}
    3182:	b082      	sub	sp, #8
    3184:	2501      	movs	r5, #1
    3186:	466b      	mov	r3, sp
    3188:	2600      	movs	r6, #0
    318a:	4c2e      	ldr	r4, [pc, #184]	; (3244 <system_board_init+0xc8>)
    318c:	4669      	mov	r1, sp
    318e:	2013      	movs	r0, #19
    3190:	705d      	strb	r5, [r3, #1]
    3192:	709e      	strb	r6, [r3, #2]
    3194:	701d      	strb	r5, [r3, #0]
    3196:	47a0      	blx	r4
    3198:	4b2b      	ldr	r3, [pc, #172]	; (3248 <system_board_init+0xcc>)
    319a:	4669      	mov	r1, sp
    319c:	4698      	mov	r8, r3
    319e:	2380      	movs	r3, #128	; 0x80
    31a0:	4642      	mov	r2, r8
    31a2:	031b      	lsls	r3, r3, #12
    31a4:	6193      	str	r3, [r2, #24]
    31a6:	466b      	mov	r3, sp
    31a8:	2012      	movs	r0, #18
    31aa:	2780      	movs	r7, #128	; 0x80
    31ac:	701d      	strb	r5, [r3, #0]
    31ae:	47a0      	blx	r4
    31b0:	4643      	mov	r3, r8
    31b2:	02ff      	lsls	r7, r7, #11
    31b4:	619f      	str	r7, [r3, #24]
    31b6:	466b      	mov	r3, sp
    31b8:	4669      	mov	r1, sp
    31ba:	201c      	movs	r0, #28
    31bc:	701e      	strb	r6, [r3, #0]
    31be:	705d      	strb	r5, [r3, #1]
    31c0:	47a0      	blx	r4
    31c2:	466b      	mov	r3, sp
    31c4:	4669      	mov	r1, sp
    31c6:	2052      	movs	r0, #82	; 0x52
    31c8:	705d      	strb	r5, [r3, #1]
    31ca:	709e      	strb	r6, [r3, #2]
    31cc:	701d      	strb	r5, [r3, #0]
    31ce:	47a0      	blx	r4
    31d0:	4669      	mov	r1, sp
    31d2:	203e      	movs	r0, #62	; 0x3e
    31d4:	47a0      	blx	r4
    31d6:	4669      	mov	r1, sp
    31d8:	203f      	movs	r0, #63	; 0x3f
    31da:	47a0      	blx	r4
    31dc:	4669      	mov	r1, sp
    31de:	202f      	movs	r0, #47	; 0x2f
    31e0:	47a0      	blx	r4
    31e2:	4669      	mov	r1, sp
    31e4:	2014      	movs	r0, #20
    31e6:	47a0      	blx	r4
    31e8:	2280      	movs	r2, #128	; 0x80
    31ea:	4b18      	ldr	r3, [pc, #96]	; (324c <system_board_init+0xd0>)
    31ec:	05d2      	lsls	r2, r2, #23
    31ee:	619f      	str	r7, [r3, #24]
    31f0:	4b17      	ldr	r3, [pc, #92]	; (3250 <system_board_init+0xd4>)
    31f2:	2780      	movs	r7, #128	; 0x80
    31f4:	619a      	str	r2, [r3, #24]
    31f6:	2280      	movs	r2, #128	; 0x80
    31f8:	023f      	lsls	r7, r7, #8
    31fa:	0612      	lsls	r2, r2, #24
    31fc:	619a      	str	r2, [r3, #24]
    31fe:	619f      	str	r7, [r3, #24]
    3200:	2380      	movs	r3, #128	; 0x80
    3202:	4642      	mov	r2, r8
    3204:	035b      	lsls	r3, r3, #13
    3206:	6193      	str	r3, [r2, #24]
    3208:	466b      	mov	r3, sp
    320a:	4669      	mov	r1, sp
    320c:	2053      	movs	r0, #83	; 0x53
    320e:	701e      	strb	r6, [r3, #0]
    3210:	47a0      	blx	r4
    3212:	4b10      	ldr	r3, [pc, #64]	; (3254 <system_board_init+0xd8>)
    3214:	ac01      	add	r4, sp, #4
    3216:	69da      	ldr	r2, [r3, #28]
    3218:	0021      	movs	r1, r4
    321a:	4317      	orrs	r7, r2
    321c:	2204      	movs	r2, #4
    321e:	61df      	str	r7, [r3, #28]
    3220:	4b0d      	ldr	r3, [pc, #52]	; (3258 <system_board_init+0xdc>)
    3222:	2009      	movs	r0, #9
    3224:	801a      	strh	r2, [r3, #0]
    3226:	2305      	movs	r3, #5
    3228:	70a5      	strb	r5, [r4, #2]
    322a:	7065      	strb	r5, [r4, #1]
    322c:	4d0b      	ldr	r5, [pc, #44]	; (325c <system_board_init+0xe0>)
    322e:	7023      	strb	r3, [r4, #0]
    3230:	70e6      	strb	r6, [r4, #3]
    3232:	47a8      	blx	r5
    3234:	0021      	movs	r1, r4
    3236:	200c      	movs	r0, #12
    3238:	47a8      	blx	r5
    323a:	b002      	add	sp, #8
    323c:	bc04      	pop	{r2}
    323e:	4690      	mov	r8, r2
    3240:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3242:	46c0      	nop			; (mov r8, r8)
    3244:	0000343d 	.word	0x0000343d
    3248:	40002800 	.word	0x40002800
    324c:	40002900 	.word	0x40002900
    3250:	40002880 	.word	0x40002880
    3254:	40000400 	.word	0x40000400
    3258:	42003c00 	.word	0x42003c00
    325c:	0000492d 	.word	0x0000492d

00003260 <extint_register_callback>:
    3260:	2317      	movs	r3, #23
    3262:	2a00      	cmp	r2, #0
    3264:	d001      	beq.n	326a <extint_register_callback+0xa>
    3266:	0018      	movs	r0, r3
    3268:	4770      	bx	lr
    326a:	4a06      	ldr	r2, [pc, #24]	; (3284 <extint_register_callback+0x24>)
    326c:	0089      	lsls	r1, r1, #2
    326e:	588b      	ldr	r3, [r1, r2]
    3270:	2b00      	cmp	r3, #0
    3272:	d003      	beq.n	327c <extint_register_callback+0x1c>
    3274:	4283      	cmp	r3, r0
    3276:	d003      	beq.n	3280 <extint_register_callback+0x20>
    3278:	231d      	movs	r3, #29
    327a:	e7f4      	b.n	3266 <extint_register_callback+0x6>
    327c:	5088      	str	r0, [r1, r2]
    327e:	e7f2      	b.n	3266 <extint_register_callback+0x6>
    3280:	2300      	movs	r3, #0
    3282:	e7f0      	b.n	3266 <extint_register_callback+0x6>
    3284:	20000a7c 	.word	0x20000a7c

00003288 <extint_chan_enable_callback>:
    3288:	2317      	movs	r3, #23
    328a:	2900      	cmp	r1, #0
    328c:	d001      	beq.n	3292 <extint_chan_enable_callback+0xa>
    328e:	0018      	movs	r0, r3
    3290:	4770      	bx	lr
    3292:	281f      	cmp	r0, #31
    3294:	d805      	bhi.n	32a2 <extint_chan_enable_callback+0x1a>
    3296:	3b16      	subs	r3, #22
    3298:	4083      	lsls	r3, r0
    329a:	4a03      	ldr	r2, [pc, #12]	; (32a8 <extint_chan_enable_callback+0x20>)
    329c:	6113      	str	r3, [r2, #16]
    329e:	2300      	movs	r3, #0
    32a0:	e7f5      	b.n	328e <extint_chan_enable_callback+0x6>
    32a2:	6109      	str	r1, [r1, #16]
    32a4:	deff      	udf	#255	; 0xff
    32a6:	46c0      	nop			; (mov r8, r8)
    32a8:	40002400 	.word	0x40002400

000032ac <extint_chan_disable_callback>:
    32ac:	2317      	movs	r3, #23
    32ae:	2900      	cmp	r1, #0
    32b0:	d001      	beq.n	32b6 <extint_chan_disable_callback+0xa>
    32b2:	0018      	movs	r0, r3
    32b4:	4770      	bx	lr
    32b6:	281f      	cmp	r0, #31
    32b8:	d805      	bhi.n	32c6 <extint_chan_disable_callback+0x1a>
    32ba:	3b16      	subs	r3, #22
    32bc:	4083      	lsls	r3, r0
    32be:	4a03      	ldr	r2, [pc, #12]	; (32cc <extint_chan_disable_callback+0x20>)
    32c0:	60d3      	str	r3, [r2, #12]
    32c2:	2300      	movs	r3, #0
    32c4:	e7f5      	b.n	32b2 <extint_chan_disable_callback+0x6>
    32c6:	60c9      	str	r1, [r1, #12]
    32c8:	deff      	udf	#255	; 0xff
    32ca:	46c0      	nop			; (mov r8, r8)
    32cc:	40002400 	.word	0x40002400

000032d0 <EIC_Handler>:
    32d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    32d2:	2300      	movs	r3, #0
    32d4:	2601      	movs	r6, #1
    32d6:	4c0b      	ldr	r4, [pc, #44]	; (3304 <EIC_Handler+0x34>)
    32d8:	4d0b      	ldr	r5, [pc, #44]	; (3308 <EIC_Handler+0x38>)
    32da:	4f0c      	ldr	r7, [pc, #48]	; (330c <EIC_Handler+0x3c>)
    32dc:	7023      	strb	r3, [r4, #0]
    32de:	0032      	movs	r2, r6
    32e0:	409a      	lsls	r2, r3
    32e2:	6969      	ldr	r1, [r5, #20]
    32e4:	4211      	tst	r1, r2
    32e6:	d006      	beq.n	32f6 <EIC_Handler+0x26>
    32e8:	616a      	str	r2, [r5, #20]
    32ea:	009b      	lsls	r3, r3, #2
    32ec:	59db      	ldr	r3, [r3, r7]
    32ee:	2b00      	cmp	r3, #0
    32f0:	d000      	beq.n	32f4 <EIC_Handler+0x24>
    32f2:	4798      	blx	r3
    32f4:	7823      	ldrb	r3, [r4, #0]
    32f6:	3301      	adds	r3, #1
    32f8:	b2db      	uxtb	r3, r3
    32fa:	7023      	strb	r3, [r4, #0]
    32fc:	2b0f      	cmp	r3, #15
    32fe:	d9ee      	bls.n	32de <EIC_Handler+0xe>
    3300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3302:	46c0      	nop			; (mov r8, r8)
    3304:	20000a78 	.word	0x20000a78
    3308:	40002400 	.word	0x40002400
    330c:	20000a7c 	.word	0x20000a7c

00003310 <_system_extint_init>:
    3310:	2380      	movs	r3, #128	; 0x80
    3312:	b510      	push	{r4, lr}
    3314:	4a15      	ldr	r2, [pc, #84]	; (336c <_system_extint_init+0x5c>)
    3316:	009b      	lsls	r3, r3, #2
    3318:	6951      	ldr	r1, [r2, #20]
    331a:	4c15      	ldr	r4, [pc, #84]	; (3370 <_system_extint_init+0x60>)
    331c:	430b      	orrs	r3, r1
    331e:	6153      	str	r3, [r2, #20]
    3320:	2201      	movs	r2, #1
    3322:	2101      	movs	r1, #1
    3324:	7823      	ldrb	r3, [r4, #0]
    3326:	4313      	orrs	r3, r2
    3328:	7023      	strb	r3, [r4, #0]
    332a:	3201      	adds	r2, #1
    332c:	6863      	ldr	r3, [r4, #4]
    332e:	421a      	tst	r2, r3
    3330:	d1fc      	bne.n	332c <_system_extint_init+0x1c>
    3332:	6863      	ldr	r3, [r4, #4]
    3334:	4219      	tst	r1, r3
    3336:	d1f9      	bne.n	332c <_system_extint_init+0x1c>
    3338:	2210      	movs	r2, #16
    333a:	7823      	ldrb	r3, [r4, #0]
    333c:	2100      	movs	r1, #0
    333e:	4313      	orrs	r3, r2
    3340:	7023      	strb	r3, [r4, #0]
    3342:	2240      	movs	r2, #64	; 0x40
    3344:	4b0b      	ldr	r3, [pc, #44]	; (3374 <_system_extint_init+0x64>)
    3346:	480c      	ldr	r0, [pc, #48]	; (3378 <_system_extint_init+0x68>)
    3348:	4798      	blx	r3
    334a:	2208      	movs	r2, #8
    334c:	2102      	movs	r1, #2
    334e:	2001      	movs	r0, #1
    3350:	4b0a      	ldr	r3, [pc, #40]	; (337c <_system_extint_init+0x6c>)
    3352:	601a      	str	r2, [r3, #0]
    3354:	7823      	ldrb	r3, [r4, #0]
    3356:	3a06      	subs	r2, #6
    3358:	4313      	orrs	r3, r2
    335a:	7023      	strb	r3, [r4, #0]
    335c:	4b04      	ldr	r3, [pc, #16]	; (3370 <_system_extint_init+0x60>)
    335e:	685a      	ldr	r2, [r3, #4]
    3360:	4211      	tst	r1, r2
    3362:	d1fc      	bne.n	335e <_system_extint_init+0x4e>
    3364:	685a      	ldr	r2, [r3, #4]
    3366:	4210      	tst	r0, r2
    3368:	d1f9      	bne.n	335e <_system_extint_init+0x4e>
    336a:	bd10      	pop	{r4, pc}
    336c:	40000400 	.word	0x40000400
    3370:	40002400 	.word	0x40002400
    3374:	00007da3 	.word	0x00007da3
    3378:	20000a7c 	.word	0x20000a7c
    337c:	e000e100 	.word	0xe000e100

00003380 <extint_chan_get_config_defaults>:
    3380:	2201      	movs	r2, #1
    3382:	2300      	movs	r3, #0
    3384:	7202      	strb	r2, [r0, #8]
    3386:	3201      	adds	r2, #1
    3388:	6003      	str	r3, [r0, #0]
    338a:	6043      	str	r3, [r0, #4]
    338c:	7283      	strb	r3, [r0, #10]
    338e:	72c2      	strb	r2, [r0, #11]
    3390:	7243      	strb	r3, [r0, #9]
    3392:	4770      	bx	lr

00003394 <extint_chan_set_config>:
    3394:	b5f0      	push	{r4, r5, r6, r7, lr}
    3396:	000c      	movs	r4, r1
    3398:	2102      	movs	r1, #2
    339a:	0005      	movs	r5, r0
    339c:	2001      	movs	r0, #1
    339e:	4a25      	ldr	r2, [pc, #148]	; (3434 <extint_chan_set_config+0xa0>)
    33a0:	b083      	sub	sp, #12
    33a2:	7813      	ldrb	r3, [r2, #0]
    33a4:	438b      	bics	r3, r1
    33a6:	7013      	strb	r3, [r2, #0]
    33a8:	6853      	ldr	r3, [r2, #4]
    33aa:	4219      	tst	r1, r3
    33ac:	d1fc      	bne.n	33a8 <extint_chan_set_config+0x14>
    33ae:	6853      	ldr	r3, [r2, #4]
    33b0:	4003      	ands	r3, r0
    33b2:	d1f9      	bne.n	33a8 <extint_chan_set_config+0x14>
    33b4:	a901      	add	r1, sp, #4
    33b6:	704b      	strb	r3, [r1, #1]
    33b8:	70cb      	strb	r3, [r1, #3]
    33ba:	7923      	ldrb	r3, [r4, #4]
    33bc:	7820      	ldrb	r0, [r4, #0]
    33be:	700b      	strb	r3, [r1, #0]
    33c0:	7a23      	ldrb	r3, [r4, #8]
    33c2:	708b      	strb	r3, [r1, #2]
    33c4:	4b1c      	ldr	r3, [pc, #112]	; (3438 <extint_chan_set_config+0xa4>)
    33c6:	4798      	blx	r3
    33c8:	2100      	movs	r1, #0
    33ca:	2d1f      	cmp	r5, #31
    33cc:	d800      	bhi.n	33d0 <extint_chan_set_config+0x3c>
    33ce:	4919      	ldr	r1, [pc, #100]	; (3434 <extint_chan_set_config+0xa0>)
    33d0:	2207      	movs	r2, #7
    33d2:	7aa3      	ldrb	r3, [r4, #10]
    33d4:	402a      	ands	r2, r5
    33d6:	0092      	lsls	r2, r2, #2
    33d8:	7ae7      	ldrb	r7, [r4, #11]
    33da:	2b00      	cmp	r3, #0
    33dc:	d001      	beq.n	33e2 <extint_chan_set_config+0x4e>
    33de:	2308      	movs	r3, #8
    33e0:	431f      	orrs	r7, r3
    33e2:	260f      	movs	r6, #15
    33e4:	4097      	lsls	r7, r2
    33e6:	4096      	lsls	r6, r2
    33e8:	003a      	movs	r2, r7
    33ea:	08eb      	lsrs	r3, r5, #3
    33ec:	009b      	lsls	r3, r3, #2
    33ee:	18cb      	adds	r3, r1, r3
    33f0:	69d8      	ldr	r0, [r3, #28]
    33f2:	43b0      	bics	r0, r6
    33f4:	4302      	orrs	r2, r0
    33f6:	61da      	str	r2, [r3, #28]
    33f8:	7a63      	ldrb	r3, [r4, #9]
    33fa:	698a      	ldr	r2, [r1, #24]
    33fc:	2b00      	cmp	r3, #0
    33fe:	d114      	bne.n	342a <extint_chan_set_config+0x96>
    3400:	2301      	movs	r3, #1
    3402:	40ab      	lsls	r3, r5
    3404:	43db      	mvns	r3, r3
    3406:	041b      	lsls	r3, r3, #16
    3408:	0c1b      	lsrs	r3, r3, #16
    340a:	4013      	ands	r3, r2
    340c:	618b      	str	r3, [r1, #24]
    340e:	2102      	movs	r1, #2
    3410:	2001      	movs	r0, #1
    3412:	4b08      	ldr	r3, [pc, #32]	; (3434 <extint_chan_set_config+0xa0>)
    3414:	781a      	ldrb	r2, [r3, #0]
    3416:	430a      	orrs	r2, r1
    3418:	701a      	strb	r2, [r3, #0]
    341a:	685a      	ldr	r2, [r3, #4]
    341c:	4211      	tst	r1, r2
    341e:	d1fc      	bne.n	341a <extint_chan_set_config+0x86>
    3420:	685a      	ldr	r2, [r3, #4]
    3422:	4210      	tst	r0, r2
    3424:	d1f9      	bne.n	341a <extint_chan_set_config+0x86>
    3426:	b003      	add	sp, #12
    3428:	bdf0      	pop	{r4, r5, r6, r7, pc}
    342a:	2301      	movs	r3, #1
    342c:	40ab      	lsls	r3, r5
    342e:	4313      	orrs	r3, r2
    3430:	618b      	str	r3, [r1, #24]
    3432:	e7ec      	b.n	340e <extint_chan_set_config+0x7a>
    3434:	40002400 	.word	0x40002400
    3438:	0000492d 	.word	0x0000492d

0000343c <port_pin_set_config>:
    343c:	2280      	movs	r2, #128	; 0x80
    343e:	b500      	push	{lr}
    3440:	b083      	sub	sp, #12
    3442:	ab01      	add	r3, sp, #4
    3444:	701a      	strb	r2, [r3, #0]
    3446:	780a      	ldrb	r2, [r1, #0]
    3448:	705a      	strb	r2, [r3, #1]
    344a:	784a      	ldrb	r2, [r1, #1]
    344c:	709a      	strb	r2, [r3, #2]
    344e:	788a      	ldrb	r2, [r1, #2]
    3450:	0019      	movs	r1, r3
    3452:	70da      	strb	r2, [r3, #3]
    3454:	4b01      	ldr	r3, [pc, #4]	; (345c <port_pin_set_config+0x20>)
    3456:	4798      	blx	r3
    3458:	b003      	add	sp, #12
    345a:	bd00      	pop	{pc}
    345c:	0000492d 	.word	0x0000492d

00003460 <_sercom_get_sync_baud_val>:
    3460:	b510      	push	{r4, lr}
    3462:	0849      	lsrs	r1, r1, #1
    3464:	2340      	movs	r3, #64	; 0x40
    3466:	2400      	movs	r4, #0
    3468:	4281      	cmp	r1, r0
    346a:	d202      	bcs.n	3472 <_sercom_get_sync_baud_val+0x12>
    346c:	0018      	movs	r0, r3
    346e:	bd10      	pop	{r4, pc}
    3470:	001c      	movs	r4, r3
    3472:	1c63      	adds	r3, r4, #1
    3474:	1a09      	subs	r1, r1, r0
    3476:	b29b      	uxth	r3, r3
    3478:	4288      	cmp	r0, r1
    347a:	d9f9      	bls.n	3470 <_sercom_get_sync_baud_val+0x10>
    347c:	2340      	movs	r3, #64	; 0x40
    347e:	2cff      	cmp	r4, #255	; 0xff
    3480:	d8f4      	bhi.n	346c <_sercom_get_sync_baud_val+0xc>
    3482:	8014      	strh	r4, [r2, #0]
    3484:	2300      	movs	r3, #0
    3486:	e7f1      	b.n	346c <_sercom_get_sync_baud_val+0xc>

00003488 <_sercom_get_async_baud_val>:
    3488:	b5f0      	push	{r4, r5, r6, r7, lr}
    348a:	4645      	mov	r5, r8
    348c:	46de      	mov	lr, fp
    348e:	4657      	mov	r7, sl
    3490:	464e      	mov	r6, r9
    3492:	b5e0      	push	{r5, r6, r7, lr}
    3494:	0005      	movs	r5, r0
    3496:	b087      	sub	sp, #28
    3498:	9204      	str	r2, [sp, #16]
    349a:	aa10      	add	r2, sp, #64	; 0x40
    349c:	000c      	movs	r4, r1
    349e:	7811      	ldrb	r1, [r2, #0]
    34a0:	2240      	movs	r2, #64	; 0x40
    34a2:	434d      	muls	r5, r1
    34a4:	42a5      	cmp	r5, r4
    34a6:	d907      	bls.n	34b8 <_sercom_get_async_baud_val+0x30>
    34a8:	0010      	movs	r0, r2
    34aa:	b007      	add	sp, #28
    34ac:	bc3c      	pop	{r2, r3, r4, r5}
    34ae:	4690      	mov	r8, r2
    34b0:	4699      	mov	r9, r3
    34b2:	46a2      	mov	sl, r4
    34b4:	46ab      	mov	fp, r5
    34b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34b8:	2b00      	cmp	r3, #0
    34ba:	d153      	bne.n	3564 <_sercom_get_async_baud_val+0xdc>
    34bc:	0002      	movs	r2, r0
    34be:	4d6a      	ldr	r5, [pc, #424]	; (3668 <_sercom_get_async_baud_val+0x1e0>)
    34c0:	0008      	movs	r0, r1
    34c2:	2100      	movs	r1, #0
    34c4:	47a8      	blx	r5
    34c6:	2300      	movs	r3, #0
    34c8:	2120      	movs	r1, #32
    34ca:	4681      	mov	r9, r0
    34cc:	4698      	mov	r8, r3
    34ce:	2700      	movs	r7, #0
    34d0:	468a      	mov	sl, r1
    34d2:	391f      	subs	r1, #31
    34d4:	9301      	str	r3, [sp, #4]
    34d6:	46c3      	mov	fp, r8
    34d8:	9400      	str	r4, [sp, #0]
    34da:	46c8      	mov	r8, r9
    34dc:	2200      	movs	r2, #0
    34de:	2300      	movs	r3, #0
    34e0:	203f      	movs	r0, #63	; 0x3f
    34e2:	468c      	mov	ip, r1
    34e4:	46b9      	mov	r9, r7
    34e6:	e007      	b.n	34f8 <_sercom_get_async_baud_val+0x70>
    34e8:	42bd      	cmp	r5, r7
    34ea:	d04e      	beq.n	358a <_sercom_get_async_baud_val+0x102>
    34ec:	0014      	movs	r4, r2
    34ee:	0019      	movs	r1, r3
    34f0:	0022      	movs	r2, r4
    34f2:	000b      	movs	r3, r1
    34f4:	3801      	subs	r0, #1
    34f6:	d331      	bcc.n	355c <_sercom_get_async_baud_val+0xd4>
    34f8:	2120      	movs	r1, #32
    34fa:	4249      	negs	r1, r1
    34fc:	1841      	adds	r1, r0, r1
    34fe:	d43e      	bmi.n	357e <_sercom_get_async_baud_val+0xf6>
    3500:	4664      	mov	r4, ip
    3502:	408c      	lsls	r4, r1
    3504:	0021      	movs	r1, r4
    3506:	4664      	mov	r4, ip
    3508:	4084      	lsls	r4, r0
    350a:	1892      	adds	r2, r2, r2
    350c:	415b      	adcs	r3, r3
    350e:	9402      	str	r4, [sp, #8]
    3510:	4666      	mov	r6, ip
    3512:	4644      	mov	r4, r8
    3514:	4316      	orrs	r6, r2
    3516:	4221      	tst	r1, r4
    3518:	d000      	beq.n	351c <_sercom_get_async_baud_val+0x94>
    351a:	0032      	movs	r2, r6
    351c:	0014      	movs	r4, r2
    351e:	001d      	movs	r5, r3
    3520:	0016      	movs	r6, r2
    3522:	001f      	movs	r7, r3
    3524:	9a00      	ldr	r2, [sp, #0]
    3526:	9b01      	ldr	r3, [sp, #4]
    3528:	1aa4      	subs	r4, r4, r2
    352a:	419d      	sbcs	r5, r3
    352c:	0022      	movs	r2, r4
    352e:	464c      	mov	r4, r9
    3530:	002b      	movs	r3, r5
    3532:	9d02      	ldr	r5, [sp, #8]
    3534:	4325      	orrs	r5, r4
    3536:	002c      	movs	r4, r5
    3538:	465d      	mov	r5, fp
    353a:	4329      	orrs	r1, r5
    353c:	9d01      	ldr	r5, [sp, #4]
    353e:	42bd      	cmp	r5, r7
    3540:	d81a      	bhi.n	3578 <_sercom_get_async_baud_val+0xf0>
    3542:	d016      	beq.n	3572 <_sercom_get_async_baud_val+0xea>
    3544:	46a1      	mov	r9, r4
    3546:	9c00      	ldr	r4, [sp, #0]
    3548:	9d01      	ldr	r5, [sp, #4]
    354a:	468b      	mov	fp, r1
    354c:	42bd      	cmp	r5, r7
    354e:	d9cb      	bls.n	34e8 <_sercom_get_async_baud_val+0x60>
    3550:	0034      	movs	r4, r6
    3552:	0039      	movs	r1, r7
    3554:	0022      	movs	r2, r4
    3556:	000b      	movs	r3, r1
    3558:	3801      	subs	r0, #1
    355a:	d2cd      	bcs.n	34f8 <_sercom_get_async_baud_val+0x70>
    355c:	464f      	mov	r7, r9
    355e:	427f      	negs	r7, r7
    3560:	0c3f      	lsrs	r7, r7, #16
    3562:	e002      	b.n	356a <_sercom_get_async_baud_val+0xe2>
    3564:	2700      	movs	r7, #0
    3566:	2b01      	cmp	r3, #1
    3568:	d015      	beq.n	3596 <_sercom_get_async_baud_val+0x10e>
    356a:	9b04      	ldr	r3, [sp, #16]
    356c:	2200      	movs	r2, #0
    356e:	801f      	strh	r7, [r3, #0]
    3570:	e79a      	b.n	34a8 <_sercom_get_async_baud_val+0x20>
    3572:	9d00      	ldr	r5, [sp, #0]
    3574:	42b5      	cmp	r5, r6
    3576:	d9e5      	bls.n	3544 <_sercom_get_async_baud_val+0xbc>
    3578:	464c      	mov	r4, r9
    357a:	4659      	mov	r1, fp
    357c:	e7e2      	b.n	3544 <_sercom_get_async_baud_val+0xbc>
    357e:	4651      	mov	r1, sl
    3580:	4664      	mov	r4, ip
    3582:	1a09      	subs	r1, r1, r0
    3584:	40cc      	lsrs	r4, r1
    3586:	0021      	movs	r1, r4
    3588:	e7bd      	b.n	3506 <_sercom_get_async_baud_val+0x7e>
    358a:	9900      	ldr	r1, [sp, #0]
    358c:	42b1      	cmp	r1, r6
    358e:	d9ad      	bls.n	34ec <_sercom_get_async_baud_val+0x64>
    3590:	0034      	movs	r4, r6
    3592:	0039      	movs	r1, r7
    3594:	e7de      	b.n	3554 <_sercom_get_async_baud_val+0xcc>
    3596:	0f63      	lsrs	r3, r4, #29
    3598:	4698      	mov	r8, r3
    359a:	00e3      	lsls	r3, r4, #3
    359c:	000a      	movs	r2, r1
    359e:	469a      	mov	sl, r3
    35a0:	2100      	movs	r1, #0
    35a2:	2300      	movs	r3, #0
    35a4:	4c30      	ldr	r4, [pc, #192]	; (3668 <_sercom_get_async_baud_val+0x1e0>)
    35a6:	47a0      	blx	r4
    35a8:	2300      	movs	r3, #0
    35aa:	9305      	str	r3, [sp, #20]
    35ac:	3301      	adds	r3, #1
    35ae:	469c      	mov	ip, r3
    35b0:	2300      	movs	r3, #0
    35b2:	2200      	movs	r2, #0
    35b4:	4699      	mov	r9, r3
    35b6:	273f      	movs	r7, #63	; 0x3f
    35b8:	2300      	movs	r3, #0
    35ba:	e019      	b.n	35f0 <_sercom_get_async_baud_val+0x168>
    35bc:	0014      	movs	r4, r2
    35be:	001d      	movs	r5, r3
    35c0:	0022      	movs	r2, r4
    35c2:	002b      	movs	r3, r5
    35c4:	1a24      	subs	r4, r4, r0
    35c6:	418d      	sbcs	r5, r1
    35c8:	464e      	mov	r6, r9
    35ca:	9402      	str	r4, [sp, #8]
    35cc:	9503      	str	r5, [sp, #12]
    35ce:	9c00      	ldr	r4, [sp, #0]
    35d0:	4334      	orrs	r4, r6
    35d2:	0026      	movs	r6, r4
    35d4:	4299      	cmp	r1, r3
    35d6:	d838      	bhi.n	364a <_sercom_get_async_baud_val+0x1c2>
    35d8:	d035      	beq.n	3646 <_sercom_get_async_baud_val+0x1be>
    35da:	46b1      	mov	r9, r6
    35dc:	4299      	cmp	r1, r3
    35de:	d820      	bhi.n	3622 <_sercom_get_async_baud_val+0x19a>
    35e0:	d01d      	beq.n	361e <_sercom_get_async_baud_val+0x196>
    35e2:	9b02      	ldr	r3, [sp, #8]
    35e4:	9c03      	ldr	r4, [sp, #12]
    35e6:	469b      	mov	fp, r3
    35e8:	0023      	movs	r3, r4
    35ea:	465a      	mov	r2, fp
    35ec:	3f01      	subs	r7, #1
    35ee:	d31e      	bcc.n	362e <_sercom_get_async_baud_val+0x1a6>
    35f0:	2420      	movs	r4, #32
    35f2:	4264      	negs	r4, r4
    35f4:	193c      	adds	r4, r7, r4
    35f6:	d42a      	bmi.n	364e <_sercom_get_async_baud_val+0x1c6>
    35f8:	4665      	mov	r5, ip
    35fa:	40a5      	lsls	r5, r4
    35fc:	1892      	adds	r2, r2, r2
    35fe:	415b      	adcs	r3, r3
    3600:	4664      	mov	r4, ip
    3602:	4666      	mov	r6, ip
    3604:	4314      	orrs	r4, r2
    3606:	40be      	lsls	r6, r7
    3608:	46a3      	mov	fp, r4
    360a:	4654      	mov	r4, sl
    360c:	9600      	str	r6, [sp, #0]
    360e:	4034      	ands	r4, r6
    3610:	4646      	mov	r6, r8
    3612:	4035      	ands	r5, r6
    3614:	432c      	orrs	r4, r5
    3616:	d0d1      	beq.n	35bc <_sercom_get_async_baud_val+0x134>
    3618:	465c      	mov	r4, fp
    361a:	001d      	movs	r5, r3
    361c:	e7d0      	b.n	35c0 <_sercom_get_async_baud_val+0x138>
    361e:	4290      	cmp	r0, r2
    3620:	d9df      	bls.n	35e2 <_sercom_get_async_baud_val+0x15a>
    3622:	4693      	mov	fp, r2
    3624:	001c      	movs	r4, r3
    3626:	465a      	mov	r2, fp
    3628:	0023      	movs	r3, r4
    362a:	3f01      	subs	r7, #1
    362c:	d2e0      	bcs.n	35f0 <_sercom_get_async_baud_val+0x168>
    362e:	9b05      	ldr	r3, [sp, #20]
    3630:	4a0e      	ldr	r2, [pc, #56]	; (366c <_sercom_get_async_baud_val+0x1e4>)
    3632:	1af6      	subs	r6, r6, r3
    3634:	08f6      	lsrs	r6, r6, #3
    3636:	4296      	cmp	r6, r2
    3638:	d90e      	bls.n	3658 <_sercom_get_async_baud_val+0x1d0>
    363a:	3301      	adds	r3, #1
    363c:	9305      	str	r3, [sp, #20]
    363e:	2b08      	cmp	r3, #8
    3640:	d1b6      	bne.n	35b0 <_sercom_get_async_baud_val+0x128>
    3642:	2240      	movs	r2, #64	; 0x40
    3644:	e730      	b.n	34a8 <_sercom_get_async_baud_val+0x20>
    3646:	4290      	cmp	r0, r2
    3648:	d9c7      	bls.n	35da <_sercom_get_async_baud_val+0x152>
    364a:	464e      	mov	r6, r9
    364c:	e7c5      	b.n	35da <_sercom_get_async_baud_val+0x152>
    364e:	2420      	movs	r4, #32
    3650:	4665      	mov	r5, ip
    3652:	1be4      	subs	r4, r4, r7
    3654:	40e5      	lsrs	r5, r4
    3656:	e7d1      	b.n	35fc <_sercom_get_async_baud_val+0x174>
    3658:	035f      	lsls	r7, r3, #13
    365a:	23ff      	movs	r3, #255	; 0xff
    365c:	035b      	lsls	r3, r3, #13
    365e:	401f      	ands	r7, r3
    3660:	4337      	orrs	r7, r6
    3662:	b2bf      	uxth	r7, r7
    3664:	e781      	b.n	356a <_sercom_get_async_baud_val+0xe2>
    3666:	46c0      	nop			; (mov r8, r8)
    3668:	000060f1 	.word	0x000060f1
    366c:	00001fff 	.word	0x00001fff

00003670 <sercom_set_gclk_generator>:
    3670:	b530      	push	{r4, r5, lr}
    3672:	4c0e      	ldr	r4, [pc, #56]	; (36ac <sercom_set_gclk_generator+0x3c>)
    3674:	b083      	sub	sp, #12
    3676:	7823      	ldrb	r3, [r4, #0]
    3678:	0005      	movs	r5, r0
    367a:	2b00      	cmp	r3, #0
    367c:	d006      	beq.n	368c <sercom_set_gclk_generator+0x1c>
    367e:	2900      	cmp	r1, #0
    3680:	d104      	bne.n	368c <sercom_set_gclk_generator+0x1c>
    3682:	7863      	ldrb	r3, [r4, #1]
    3684:	4283      	cmp	r3, r0
    3686:	d00f      	beq.n	36a8 <sercom_set_gclk_generator+0x38>
    3688:	201d      	movs	r0, #29
    368a:	e00b      	b.n	36a4 <sercom_set_gclk_generator+0x34>
    368c:	a901      	add	r1, sp, #4
    368e:	2011      	movs	r0, #17
    3690:	4b07      	ldr	r3, [pc, #28]	; (36b0 <sercom_set_gclk_generator+0x40>)
    3692:	700d      	strb	r5, [r1, #0]
    3694:	4798      	blx	r3
    3696:	2011      	movs	r0, #17
    3698:	4b06      	ldr	r3, [pc, #24]	; (36b4 <sercom_set_gclk_generator+0x44>)
    369a:	4798      	blx	r3
    369c:	2301      	movs	r3, #1
    369e:	2000      	movs	r0, #0
    36a0:	7065      	strb	r5, [r4, #1]
    36a2:	7023      	strb	r3, [r4, #0]
    36a4:	b003      	add	sp, #12
    36a6:	bd30      	pop	{r4, r5, pc}
    36a8:	2000      	movs	r0, #0
    36aa:	e7fb      	b.n	36a4 <sercom_set_gclk_generator+0x34>
    36ac:	2000016c 	.word	0x2000016c
    36b0:	00004831 	.word	0x00004831
    36b4:	00004871 	.word	0x00004871

000036b8 <_sercom_get_default_pad>:
    36b8:	4b3a      	ldr	r3, [pc, #232]	; (37a4 <_sercom_get_default_pad+0xec>)
    36ba:	4298      	cmp	r0, r3
    36bc:	d044      	beq.n	3748 <_sercom_get_default_pad+0x90>
    36be:	d90a      	bls.n	36d6 <_sercom_get_default_pad+0x1e>
    36c0:	4b39      	ldr	r3, [pc, #228]	; (37a8 <_sercom_get_default_pad+0xf0>)
    36c2:	4298      	cmp	r0, r3
    36c4:	d018      	beq.n	36f8 <_sercom_get_default_pad+0x40>
    36c6:	4b39      	ldr	r3, [pc, #228]	; (37ac <_sercom_get_default_pad+0xf4>)
    36c8:	4298      	cmp	r0, r3
    36ca:	d033      	beq.n	3734 <_sercom_get_default_pad+0x7c>
    36cc:	4b38      	ldr	r3, [pc, #224]	; (37b0 <_sercom_get_default_pad+0xf8>)
    36ce:	4298      	cmp	r0, r3
    36d0:	d01c      	beq.n	370c <_sercom_get_default_pad+0x54>
    36d2:	2000      	movs	r0, #0
    36d4:	4770      	bx	lr
    36d6:	2384      	movs	r3, #132	; 0x84
    36d8:	05db      	lsls	r3, r3, #23
    36da:	4298      	cmp	r0, r3
    36dc:	d020      	beq.n	3720 <_sercom_get_default_pad+0x68>
    36de:	4b35      	ldr	r3, [pc, #212]	; (37b4 <_sercom_get_default_pad+0xfc>)
    36e0:	4298      	cmp	r0, r3
    36e2:	d1f6      	bne.n	36d2 <_sercom_get_default_pad+0x1a>
    36e4:	2901      	cmp	r1, #1
    36e6:	d043      	beq.n	3770 <_sercom_get_default_pad+0xb8>
    36e8:	2900      	cmp	r1, #0
    36ea:	d03f      	beq.n	376c <_sercom_get_default_pad+0xb4>
    36ec:	2902      	cmp	r1, #2
    36ee:	d03b      	beq.n	3768 <_sercom_get_default_pad+0xb0>
    36f0:	2903      	cmp	r1, #3
    36f2:	d1ee      	bne.n	36d2 <_sercom_get_default_pad+0x1a>
    36f4:	4830      	ldr	r0, [pc, #192]	; (37b8 <_sercom_get_default_pad+0x100>)
    36f6:	e7ed      	b.n	36d4 <_sercom_get_default_pad+0x1c>
    36f8:	2901      	cmp	r1, #1
    36fa:	d031      	beq.n	3760 <_sercom_get_default_pad+0xa8>
    36fc:	2900      	cmp	r1, #0
    36fe:	d02d      	beq.n	375c <_sercom_get_default_pad+0xa4>
    3700:	2902      	cmp	r1, #2
    3702:	d02f      	beq.n	3764 <_sercom_get_default_pad+0xac>
    3704:	2903      	cmp	r1, #3
    3706:	d1e4      	bne.n	36d2 <_sercom_get_default_pad+0x1a>
    3708:	482c      	ldr	r0, [pc, #176]	; (37bc <_sercom_get_default_pad+0x104>)
    370a:	e7e3      	b.n	36d4 <_sercom_get_default_pad+0x1c>
    370c:	2901      	cmp	r1, #1
    370e:	d03f      	beq.n	3790 <_sercom_get_default_pad+0xd8>
    3710:	2900      	cmp	r1, #0
    3712:	d03b      	beq.n	378c <_sercom_get_default_pad+0xd4>
    3714:	2902      	cmp	r1, #2
    3716:	d037      	beq.n	3788 <_sercom_get_default_pad+0xd0>
    3718:	2903      	cmp	r1, #3
    371a:	d1da      	bne.n	36d2 <_sercom_get_default_pad+0x1a>
    371c:	4828      	ldr	r0, [pc, #160]	; (37c0 <_sercom_get_default_pad+0x108>)
    371e:	e7d9      	b.n	36d4 <_sercom_get_default_pad+0x1c>
    3720:	2901      	cmp	r1, #1
    3722:	d03d      	beq.n	37a0 <_sercom_get_default_pad+0xe8>
    3724:	2900      	cmp	r1, #0
    3726:	d039      	beq.n	379c <_sercom_get_default_pad+0xe4>
    3728:	2902      	cmp	r1, #2
    372a:	d02b      	beq.n	3784 <_sercom_get_default_pad+0xcc>
    372c:	2903      	cmp	r1, #3
    372e:	d1d0      	bne.n	36d2 <_sercom_get_default_pad+0x1a>
    3730:	4824      	ldr	r0, [pc, #144]	; (37c4 <_sercom_get_default_pad+0x10c>)
    3732:	e7cf      	b.n	36d4 <_sercom_get_default_pad+0x1c>
    3734:	2901      	cmp	r1, #1
    3736:	d023      	beq.n	3780 <_sercom_get_default_pad+0xc8>
    3738:	2900      	cmp	r1, #0
    373a:	d01f      	beq.n	377c <_sercom_get_default_pad+0xc4>
    373c:	2902      	cmp	r1, #2
    373e:	d01b      	beq.n	3778 <_sercom_get_default_pad+0xc0>
    3740:	2903      	cmp	r1, #3
    3742:	d1c6      	bne.n	36d2 <_sercom_get_default_pad+0x1a>
    3744:	4820      	ldr	r0, [pc, #128]	; (37c8 <_sercom_get_default_pad+0x110>)
    3746:	e7c5      	b.n	36d4 <_sercom_get_default_pad+0x1c>
    3748:	2901      	cmp	r1, #1
    374a:	d025      	beq.n	3798 <_sercom_get_default_pad+0xe0>
    374c:	2900      	cmp	r1, #0
    374e:	d021      	beq.n	3794 <_sercom_get_default_pad+0xdc>
    3750:	2902      	cmp	r1, #2
    3752:	d00f      	beq.n	3774 <_sercom_get_default_pad+0xbc>
    3754:	2903      	cmp	r1, #3
    3756:	d1bc      	bne.n	36d2 <_sercom_get_default_pad+0x1a>
    3758:	481c      	ldr	r0, [pc, #112]	; (37cc <_sercom_get_default_pad+0x114>)
    375a:	e7bb      	b.n	36d4 <_sercom_get_default_pad+0x1c>
    375c:	481c      	ldr	r0, [pc, #112]	; (37d0 <_sercom_get_default_pad+0x118>)
    375e:	e7b9      	b.n	36d4 <_sercom_get_default_pad+0x1c>
    3760:	481c      	ldr	r0, [pc, #112]	; (37d4 <_sercom_get_default_pad+0x11c>)
    3762:	e7b7      	b.n	36d4 <_sercom_get_default_pad+0x1c>
    3764:	481c      	ldr	r0, [pc, #112]	; (37d8 <_sercom_get_default_pad+0x120>)
    3766:	e7b5      	b.n	36d4 <_sercom_get_default_pad+0x1c>
    3768:	481c      	ldr	r0, [pc, #112]	; (37dc <_sercom_get_default_pad+0x124>)
    376a:	e7b3      	b.n	36d4 <_sercom_get_default_pad+0x1c>
    376c:	2003      	movs	r0, #3
    376e:	e7b1      	b.n	36d4 <_sercom_get_default_pad+0x1c>
    3770:	481b      	ldr	r0, [pc, #108]	; (37e0 <_sercom_get_default_pad+0x128>)
    3772:	e7af      	b.n	36d4 <_sercom_get_default_pad+0x1c>
    3774:	481b      	ldr	r0, [pc, #108]	; (37e4 <_sercom_get_default_pad+0x12c>)
    3776:	e7ad      	b.n	36d4 <_sercom_get_default_pad+0x1c>
    3778:	481b      	ldr	r0, [pc, #108]	; (37e8 <_sercom_get_default_pad+0x130>)
    377a:	e7ab      	b.n	36d4 <_sercom_get_default_pad+0x1c>
    377c:	481b      	ldr	r0, [pc, #108]	; (37ec <_sercom_get_default_pad+0x134>)
    377e:	e7a9      	b.n	36d4 <_sercom_get_default_pad+0x1c>
    3780:	481b      	ldr	r0, [pc, #108]	; (37f0 <_sercom_get_default_pad+0x138>)
    3782:	e7a7      	b.n	36d4 <_sercom_get_default_pad+0x1c>
    3784:	481b      	ldr	r0, [pc, #108]	; (37f4 <_sercom_get_default_pad+0x13c>)
    3786:	e7a5      	b.n	36d4 <_sercom_get_default_pad+0x1c>
    3788:	481b      	ldr	r0, [pc, #108]	; (37f8 <_sercom_get_default_pad+0x140>)
    378a:	e7a3      	b.n	36d4 <_sercom_get_default_pad+0x1c>
    378c:	481b      	ldr	r0, [pc, #108]	; (37fc <_sercom_get_default_pad+0x144>)
    378e:	e7a1      	b.n	36d4 <_sercom_get_default_pad+0x1c>
    3790:	481b      	ldr	r0, [pc, #108]	; (3800 <_sercom_get_default_pad+0x148>)
    3792:	e79f      	b.n	36d4 <_sercom_get_default_pad+0x1c>
    3794:	481b      	ldr	r0, [pc, #108]	; (3804 <_sercom_get_default_pad+0x14c>)
    3796:	e79d      	b.n	36d4 <_sercom_get_default_pad+0x1c>
    3798:	481b      	ldr	r0, [pc, #108]	; (3808 <_sercom_get_default_pad+0x150>)
    379a:	e79b      	b.n	36d4 <_sercom_get_default_pad+0x1c>
    379c:	481b      	ldr	r0, [pc, #108]	; (380c <_sercom_get_default_pad+0x154>)
    379e:	e799      	b.n	36d4 <_sercom_get_default_pad+0x1c>
    37a0:	481b      	ldr	r0, [pc, #108]	; (3810 <_sercom_get_default_pad+0x158>)
    37a2:	e797      	b.n	36d4 <_sercom_get_default_pad+0x1c>
    37a4:	42000800 	.word	0x42000800
    37a8:	42001000 	.word	0x42001000
    37ac:	43000400 	.word	0x43000400
    37b0:	42000c00 	.word	0x42000c00
    37b4:	42000400 	.word	0x42000400
    37b8:	001f0003 	.word	0x001f0003
    37bc:	000f0003 	.word	0x000f0003
    37c0:	00130003 	.word	0x00130003
    37c4:	00070003 	.word	0x00070003
    37c8:	00190003 	.word	0x00190003
    37cc:	000b0003 	.word	0x000b0003
    37d0:	000c0003 	.word	0x000c0003
    37d4:	000d0003 	.word	0x000d0003
    37d8:	000e0003 	.word	0x000e0003
    37dc:	001e0003 	.word	0x001e0003
    37e0:	00010003 	.word	0x00010003
    37e4:	000a0003 	.word	0x000a0003
    37e8:	00180003 	.word	0x00180003
    37ec:	00160003 	.word	0x00160003
    37f0:	00170003 	.word	0x00170003
    37f4:	00060003 	.word	0x00060003
    37f8:	00120003 	.word	0x00120003
    37fc:	00100003 	.word	0x00100003
    3800:	00110003 	.word	0x00110003
    3804:	00080003 	.word	0x00080003
    3808:	00090003 	.word	0x00090003
    380c:	00040003 	.word	0x00040003
    3810:	00050003 	.word	0x00050003

00003814 <_sercom_get_sercom_inst_index>:
    3814:	b570      	push	{r4, r5, r6, lr}
    3816:	b086      	sub	sp, #24
    3818:	0001      	movs	r1, r0
    381a:	4668      	mov	r0, sp
    381c:	4b15      	ldr	r3, [pc, #84]	; (3874 <_sercom_get_sercom_inst_index+0x60>)
    381e:	cb70      	ldmia	r3!, {r4, r5, r6}
    3820:	c070      	stmia	r0!, {r4, r5, r6}
    3822:	cb70      	ldmia	r3!, {r4, r5, r6}
    3824:	c070      	stmia	r0!, {r4, r5, r6}
    3826:	9b00      	ldr	r3, [sp, #0]
    3828:	428b      	cmp	r3, r1
    382a:	d011      	beq.n	3850 <_sercom_get_sercom_inst_index+0x3c>
    382c:	9b01      	ldr	r3, [sp, #4]
    382e:	428b      	cmp	r3, r1
    3830:	d011      	beq.n	3856 <_sercom_get_sercom_inst_index+0x42>
    3832:	9b02      	ldr	r3, [sp, #8]
    3834:	428b      	cmp	r3, r1
    3836:	d011      	beq.n	385c <_sercom_get_sercom_inst_index+0x48>
    3838:	9b03      	ldr	r3, [sp, #12]
    383a:	428b      	cmp	r3, r1
    383c:	d011      	beq.n	3862 <_sercom_get_sercom_inst_index+0x4e>
    383e:	9b04      	ldr	r3, [sp, #16]
    3840:	428b      	cmp	r3, r1
    3842:	d011      	beq.n	3868 <_sercom_get_sercom_inst_index+0x54>
    3844:	9b05      	ldr	r3, [sp, #20]
    3846:	2000      	movs	r0, #0
    3848:	428b      	cmp	r3, r1
    384a:	d010      	beq.n	386e <_sercom_get_sercom_inst_index+0x5a>
    384c:	b006      	add	sp, #24
    384e:	bd70      	pop	{r4, r5, r6, pc}
    3850:	2000      	movs	r0, #0
    3852:	b2c0      	uxtb	r0, r0
    3854:	e7fa      	b.n	384c <_sercom_get_sercom_inst_index+0x38>
    3856:	2001      	movs	r0, #1
    3858:	b2c0      	uxtb	r0, r0
    385a:	e7f7      	b.n	384c <_sercom_get_sercom_inst_index+0x38>
    385c:	2002      	movs	r0, #2
    385e:	b2c0      	uxtb	r0, r0
    3860:	e7f4      	b.n	384c <_sercom_get_sercom_inst_index+0x38>
    3862:	2003      	movs	r0, #3
    3864:	b2c0      	uxtb	r0, r0
    3866:	e7f1      	b.n	384c <_sercom_get_sercom_inst_index+0x38>
    3868:	2004      	movs	r0, #4
    386a:	b2c0      	uxtb	r0, r0
    386c:	e7ee      	b.n	384c <_sercom_get_sercom_inst_index+0x38>
    386e:	3005      	adds	r0, #5
    3870:	b2c0      	uxtb	r0, r0
    3872:	e7eb      	b.n	384c <_sercom_get_sercom_inst_index+0x38>
    3874:	00008ec4 	.word	0x00008ec4

00003878 <_sercom_default_handler>:
    3878:	4770      	bx	lr
    387a:	46c0      	nop			; (mov r8, r8)

0000387c <_sercom_set_handler>:
    387c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    387e:	4e0c      	ldr	r6, [pc, #48]	; (38b0 <_sercom_set_handler+0x34>)
    3880:	0005      	movs	r5, r0
    3882:	7833      	ldrb	r3, [r6, #0]
    3884:	000f      	movs	r7, r1
    3886:	4c0b      	ldr	r4, [pc, #44]	; (38b4 <_sercom_set_handler+0x38>)
    3888:	2b00      	cmp	r3, #0
    388a:	d10d      	bne.n	38a8 <_sercom_set_handler+0x2c>
    388c:	4b0a      	ldr	r3, [pc, #40]	; (38b8 <_sercom_set_handler+0x3c>)
    388e:	2218      	movs	r2, #24
    3890:	6023      	str	r3, [r4, #0]
    3892:	6063      	str	r3, [r4, #4]
    3894:	60a3      	str	r3, [r4, #8]
    3896:	60e3      	str	r3, [r4, #12]
    3898:	6123      	str	r3, [r4, #16]
    389a:	6163      	str	r3, [r4, #20]
    389c:	2100      	movs	r1, #0
    389e:	4b07      	ldr	r3, [pc, #28]	; (38bc <_sercom_set_handler+0x40>)
    38a0:	4807      	ldr	r0, [pc, #28]	; (38c0 <_sercom_set_handler+0x44>)
    38a2:	4798      	blx	r3
    38a4:	2301      	movs	r3, #1
    38a6:	7033      	strb	r3, [r6, #0]
    38a8:	00ad      	lsls	r5, r5, #2
    38aa:	5167      	str	r7, [r4, r5]
    38ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    38ae:	46c0      	nop			; (mov r8, r8)
    38b0:	2000016e 	.word	0x2000016e
    38b4:	20000170 	.word	0x20000170
    38b8:	00003879 	.word	0x00003879
    38bc:	00007da3 	.word	0x00007da3
    38c0:	20000abc 	.word	0x20000abc

000038c4 <_sercom_get_interrupt_vector>:
    38c4:	b500      	push	{lr}
    38c6:	b083      	sub	sp, #12
    38c8:	466a      	mov	r2, sp
    38ca:	2308      	movs	r3, #8
    38cc:	7013      	strb	r3, [r2, #0]
    38ce:	3301      	adds	r3, #1
    38d0:	7053      	strb	r3, [r2, #1]
    38d2:	3301      	adds	r3, #1
    38d4:	7093      	strb	r3, [r2, #2]
    38d6:	3301      	adds	r3, #1
    38d8:	70d3      	strb	r3, [r2, #3]
    38da:	3301      	adds	r3, #1
    38dc:	7113      	strb	r3, [r2, #4]
    38de:	3301      	adds	r3, #1
    38e0:	7153      	strb	r3, [r2, #5]
    38e2:	4b03      	ldr	r3, [pc, #12]	; (38f0 <_sercom_get_interrupt_vector+0x2c>)
    38e4:	4798      	blx	r3
    38e6:	466b      	mov	r3, sp
    38e8:	5618      	ldrsb	r0, [r3, r0]
    38ea:	b003      	add	sp, #12
    38ec:	bd00      	pop	{pc}
    38ee:	46c0      	nop			; (mov r8, r8)
    38f0:	00003815 	.word	0x00003815

000038f4 <SERCOM0_Handler>:
    38f4:	b510      	push	{r4, lr}
    38f6:	4b02      	ldr	r3, [pc, #8]	; (3900 <SERCOM0_Handler+0xc>)
    38f8:	2000      	movs	r0, #0
    38fa:	681b      	ldr	r3, [r3, #0]
    38fc:	4798      	blx	r3
    38fe:	bd10      	pop	{r4, pc}
    3900:	20000170 	.word	0x20000170

00003904 <SERCOM1_Handler>:
    3904:	b510      	push	{r4, lr}
    3906:	4b02      	ldr	r3, [pc, #8]	; (3910 <SERCOM1_Handler+0xc>)
    3908:	2001      	movs	r0, #1
    390a:	685b      	ldr	r3, [r3, #4]
    390c:	4798      	blx	r3
    390e:	bd10      	pop	{r4, pc}
    3910:	20000170 	.word	0x20000170

00003914 <SERCOM2_Handler>:
    3914:	b510      	push	{r4, lr}
    3916:	4b02      	ldr	r3, [pc, #8]	; (3920 <SERCOM2_Handler+0xc>)
    3918:	2002      	movs	r0, #2
    391a:	689b      	ldr	r3, [r3, #8]
    391c:	4798      	blx	r3
    391e:	bd10      	pop	{r4, pc}
    3920:	20000170 	.word	0x20000170

00003924 <SERCOM3_Handler>:
    3924:	b510      	push	{r4, lr}
    3926:	4b02      	ldr	r3, [pc, #8]	; (3930 <SERCOM3_Handler+0xc>)
    3928:	2003      	movs	r0, #3
    392a:	68db      	ldr	r3, [r3, #12]
    392c:	4798      	blx	r3
    392e:	bd10      	pop	{r4, pc}
    3930:	20000170 	.word	0x20000170

00003934 <SERCOM4_Handler>:
    3934:	b510      	push	{r4, lr}
    3936:	4b02      	ldr	r3, [pc, #8]	; (3940 <SERCOM4_Handler+0xc>)
    3938:	2004      	movs	r0, #4
    393a:	691b      	ldr	r3, [r3, #16]
    393c:	4798      	blx	r3
    393e:	bd10      	pop	{r4, pc}
    3940:	20000170 	.word	0x20000170

00003944 <SERCOM5_Handler>:
    3944:	b510      	push	{r4, lr}
    3946:	4b02      	ldr	r3, [pc, #8]	; (3950 <SERCOM5_Handler+0xc>)
    3948:	2005      	movs	r0, #5
    394a:	695b      	ldr	r3, [r3, #20]
    394c:	4798      	blx	r3
    394e:	bd10      	pop	{r4, pc}
    3950:	20000170 	.word	0x20000170

00003954 <spi_init>:
    3954:	b5f0      	push	{r4, r5, r6, r7, lr}
    3956:	4645      	mov	r5, r8
    3958:	464e      	mov	r6, r9
    395a:	46de      	mov	lr, fp
    395c:	4657      	mov	r7, sl
    395e:	b5e0      	push	{r5, r6, r7, lr}
    3960:	0005      	movs	r5, r0
    3962:	0014      	movs	r4, r2
    3964:	2202      	movs	r2, #2
    3966:	6029      	str	r1, [r5, #0]
    3968:	680b      	ldr	r3, [r1, #0]
    396a:	b087      	sub	sp, #28
    396c:	000e      	movs	r6, r1
    396e:	4690      	mov	r8, r2
    3970:	421a      	tst	r2, r3
    3972:	d10c      	bne.n	398e <spi_init+0x3a>
    3974:	2701      	movs	r7, #1
    3976:	680b      	ldr	r3, [r1, #0]
    3978:	2005      	movs	r0, #5
    397a:	421f      	tst	r7, r3
    397c:	d100      	bne.n	3980 <spi_init+0x2c>
    397e:	e0df      	b.n	3b40 <spi_init+0x1ec>
    3980:	b007      	add	sp, #28
    3982:	bc3c      	pop	{r2, r3, r4, r5}
    3984:	4690      	mov	r8, r2
    3986:	4699      	mov	r9, r3
    3988:	46a2      	mov	sl, r4
    398a:	46ab      	mov	fp, r5
    398c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    398e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    3990:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    3992:	4698      	mov	r8, r3
    3994:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3996:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3998:	4699      	mov	r9, r3
    399a:	2800      	cmp	r0, #0
    399c:	d100      	bne.n	39a0 <spi_init+0x4c>
    399e:	e0bf      	b.n	3b20 <spi_init+0x1cc>
    39a0:	1c43      	adds	r3, r0, #1
    39a2:	d01e      	beq.n	39e2 <spi_init+0x8e>
    39a4:	0402      	lsls	r2, r0, #16
    39a6:	0c00      	lsrs	r0, r0, #16
    39a8:	0c13      	lsrs	r3, r2, #16
    39aa:	b2c0      	uxtb	r0, r0
    39ac:	469b      	mov	fp, r3
    39ae:	09c1      	lsrs	r1, r0, #7
    39b0:	0943      	lsrs	r3, r0, #5
    39b2:	2900      	cmp	r1, #0
    39b4:	d000      	beq.n	39b8 <spi_init+0x64>
    39b6:	e0be      	b.n	3b36 <spi_init+0x1e2>
    39b8:	311f      	adds	r1, #31
    39ba:	4001      	ands	r1, r0
    39bc:	468c      	mov	ip, r1
    39be:	49ce      	ldr	r1, [pc, #824]	; (3cf8 <spi_init+0x3a4>)
    39c0:	01db      	lsls	r3, r3, #7
    39c2:	468a      	mov	sl, r1
    39c4:	4661      	mov	r1, ip
    39c6:	4453      	add	r3, sl
    39c8:	1859      	adds	r1, r3, r1
    39ca:	3140      	adds	r1, #64	; 0x40
    39cc:	7809      	ldrb	r1, [r1, #0]
    39ce:	468a      	mov	sl, r1
    39d0:	2101      	movs	r1, #1
    39d2:	4652      	mov	r2, sl
    39d4:	4211      	tst	r1, r2
    39d6:	d000      	beq.n	39da <spi_init+0x86>
    39d8:	e13e      	b.n	3c58 <spi_init+0x304>
    39da:	2380      	movs	r3, #128	; 0x80
    39dc:	455b      	cmp	r3, fp
    39de:	d000      	beq.n	39e2 <spi_init+0x8e>
    39e0:	e09a      	b.n	3b18 <spi_init+0x1c4>
    39e2:	2f00      	cmp	r7, #0
    39e4:	d100      	bne.n	39e8 <spi_init+0x94>
    39e6:	e0a0      	b.n	3b2a <spi_init+0x1d6>
    39e8:	1c7b      	adds	r3, r7, #1
    39ea:	d019      	beq.n	3a20 <spi_init+0xcc>
    39ec:	043a      	lsls	r2, r7, #16
    39ee:	0c3f      	lsrs	r7, r7, #16
    39f0:	0c13      	lsrs	r3, r2, #16
    39f2:	b2f8      	uxtb	r0, r7
    39f4:	469a      	mov	sl, r3
    39f6:	09c1      	lsrs	r1, r0, #7
    39f8:	0943      	lsrs	r3, r0, #5
    39fa:	2900      	cmp	r1, #0
    39fc:	d000      	beq.n	3a00 <spi_init+0xac>
    39fe:	e09a      	b.n	3b36 <spi_init+0x1e2>
    3a00:	49bd      	ldr	r1, [pc, #756]	; (3cf8 <spi_init+0x3a4>)
    3a02:	271f      	movs	r7, #31
    3a04:	468c      	mov	ip, r1
    3a06:	2201      	movs	r2, #1
    3a08:	01db      	lsls	r3, r3, #7
    3a0a:	4007      	ands	r7, r0
    3a0c:	4463      	add	r3, ip
    3a0e:	19d9      	adds	r1, r3, r7
    3a10:	3140      	adds	r1, #64	; 0x40
    3a12:	7809      	ldrb	r1, [r1, #0]
    3a14:	420a      	tst	r2, r1
    3a16:	d000      	beq.n	3a1a <spi_init+0xc6>
    3a18:	e12e      	b.n	3c78 <spi_init+0x324>
    3a1a:	2380      	movs	r3, #128	; 0x80
    3a1c:	4553      	cmp	r3, sl
    3a1e:	d17b      	bne.n	3b18 <spi_init+0x1c4>
    3a20:	4643      	mov	r3, r8
    3a22:	2b00      	cmp	r3, #0
    3a24:	d100      	bne.n	3a28 <spi_init+0xd4>
    3a26:	e13f      	b.n	3ca8 <spi_init+0x354>
    3a28:	4643      	mov	r3, r8
    3a2a:	3301      	adds	r3, #1
    3a2c:	d019      	beq.n	3a62 <spi_init+0x10e>
    3a2e:	4643      	mov	r3, r8
    3a30:	041a      	lsls	r2, r3, #16
    3a32:	0c13      	lsrs	r3, r2, #16
    3a34:	469a      	mov	sl, r3
    3a36:	4643      	mov	r3, r8
    3a38:	0c18      	lsrs	r0, r3, #16
    3a3a:	b2c0      	uxtb	r0, r0
    3a3c:	0943      	lsrs	r3, r0, #5
    3a3e:	09c1      	lsrs	r1, r0, #7
    3a40:	d179      	bne.n	3b36 <spi_init+0x1e2>
    3a42:	49ad      	ldr	r1, [pc, #692]	; (3cf8 <spi_init+0x3a4>)
    3a44:	271f      	movs	r7, #31
    3a46:	468c      	mov	ip, r1
    3a48:	2201      	movs	r2, #1
    3a4a:	01db      	lsls	r3, r3, #7
    3a4c:	4007      	ands	r7, r0
    3a4e:	4463      	add	r3, ip
    3a50:	19d9      	adds	r1, r3, r7
    3a52:	3140      	adds	r1, #64	; 0x40
    3a54:	7809      	ldrb	r1, [r1, #0]
    3a56:	420a      	tst	r2, r1
    3a58:	d000      	beq.n	3a5c <spi_init+0x108>
    3a5a:	e119      	b.n	3c90 <spi_init+0x33c>
    3a5c:	2380      	movs	r3, #128	; 0x80
    3a5e:	459a      	cmp	sl, r3
    3a60:	d15a      	bne.n	3b18 <spi_init+0x1c4>
    3a62:	464b      	mov	r3, r9
    3a64:	2b00      	cmp	r3, #0
    3a66:	d100      	bne.n	3a6a <spi_init+0x116>
    3a68:	e124      	b.n	3cb4 <spi_init+0x360>
    3a6a:	464b      	mov	r3, r9
    3a6c:	3301      	adds	r3, #1
    3a6e:	d027      	beq.n	3ac0 <spi_init+0x16c>
    3a70:	464b      	mov	r3, r9
    3a72:	0419      	lsls	r1, r3, #16
    3a74:	0c0b      	lsrs	r3, r1, #16
    3a76:	469a      	mov	sl, r3
    3a78:	464b      	mov	r3, r9
    3a7a:	0c18      	lsrs	r0, r3, #16
    3a7c:	b2c0      	uxtb	r0, r0
    3a7e:	0943      	lsrs	r3, r0, #5
    3a80:	09c2      	lsrs	r2, r0, #7
    3a82:	d158      	bne.n	3b36 <spi_init+0x1e2>
    3a84:	4a9c      	ldr	r2, [pc, #624]	; (3cf8 <spi_init+0x3a4>)
    3a86:	271f      	movs	r7, #31
    3a88:	4694      	mov	ip, r2
    3a8a:	01db      	lsls	r3, r3, #7
    3a8c:	4463      	add	r3, ip
    3a8e:	4007      	ands	r7, r0
    3a90:	19da      	adds	r2, r3, r7
    3a92:	3240      	adds	r2, #64	; 0x40
    3a94:	7812      	ldrb	r2, [r2, #0]
    3a96:	4690      	mov	r8, r2
    3a98:	2201      	movs	r2, #1
    3a9a:	4694      	mov	ip, r2
    3a9c:	327f      	adds	r2, #127	; 0x7f
    3a9e:	4691      	mov	r9, r2
    3aa0:	4661      	mov	r1, ip
    3aa2:	4642      	mov	r2, r8
    3aa4:	4211      	tst	r1, r2
    3aa6:	d009      	beq.n	3abc <spi_init+0x168>
    3aa8:	087f      	lsrs	r7, r7, #1
    3aaa:	19db      	adds	r3, r3, r7
    3aac:	3330      	adds	r3, #48	; 0x30
    3aae:	781a      	ldrb	r2, [r3, #0]
    3ab0:	b2d2      	uxtb	r2, r2
    3ab2:	4201      	tst	r1, r0
    3ab4:	d100      	bne.n	3ab8 <spi_init+0x164>
    3ab6:	e103      	b.n	3cc0 <spi_init+0x36c>
    3ab8:	0913      	lsrs	r3, r2, #4
    3aba:	4699      	mov	r9, r3
    3abc:	45ca      	cmp	sl, r9
    3abe:	d12b      	bne.n	3b18 <spi_init+0x1c4>
    3ac0:	2011      	movs	r0, #17
    3ac2:	4b8e      	ldr	r3, [pc, #568]	; (3cfc <spi_init+0x3a8>)
    3ac4:	4798      	blx	r3
    3ac6:	7822      	ldrb	r2, [r4, #0]
    3ac8:	2700      	movs	r7, #0
    3aca:	2a01      	cmp	r2, #1
    3acc:	d100      	bne.n	3ad0 <spi_init+0x17c>
    3ace:	e127      	b.n	3d20 <spi_init+0x3cc>
    3ad0:	68a2      	ldr	r2, [r4, #8]
    3ad2:	6863      	ldr	r3, [r4, #4]
    3ad4:	7c61      	ldrb	r1, [r4, #17]
    3ad6:	4313      	orrs	r3, r2
    3ad8:	68e2      	ldr	r2, [r4, #12]
    3ada:	4313      	orrs	r3, r2
    3adc:	433b      	orrs	r3, r7
    3ade:	7c22      	ldrb	r2, [r4, #16]
    3ae0:	2900      	cmp	r1, #0
    3ae2:	d001      	beq.n	3ae8 <spi_init+0x194>
    3ae4:	2180      	movs	r1, #128	; 0x80
    3ae6:	430b      	orrs	r3, r1
    3ae8:	7ca1      	ldrb	r1, [r4, #18]
    3aea:	2900      	cmp	r1, #0
    3aec:	d002      	beq.n	3af4 <spi_init+0x1a0>
    3aee:	2180      	movs	r1, #128	; 0x80
    3af0:	0289      	lsls	r1, r1, #10
    3af2:	430a      	orrs	r2, r1
    3af4:	7ce1      	ldrb	r1, [r4, #19]
    3af6:	2900      	cmp	r1, #0
    3af8:	d002      	beq.n	3b00 <spi_init+0x1ac>
    3afa:	2180      	movs	r1, #128	; 0x80
    3afc:	0089      	lsls	r1, r1, #2
    3afe:	430a      	orrs	r2, r1
    3b00:	7d21      	ldrb	r1, [r4, #20]
    3b02:	2900      	cmp	r1, #0
    3b04:	d002      	beq.n	3b0c <spi_init+0x1b8>
    3b06:	2180      	movs	r1, #128	; 0x80
    3b08:	0189      	lsls	r1, r1, #6
    3b0a:	430a      	orrs	r2, r1
    3b0c:	2002      	movs	r0, #2
    3b0e:	6831      	ldr	r1, [r6, #0]
    3b10:	4303      	orrs	r3, r0
    3b12:	428b      	cmp	r3, r1
    3b14:	d100      	bne.n	3b18 <spi_init+0x1c4>
    3b16:	e0d7      	b.n	3cc8 <spi_init+0x374>
    3b18:	2300      	movs	r3, #0
    3b1a:	201c      	movs	r0, #28
    3b1c:	602b      	str	r3, [r5, #0]
    3b1e:	e72f      	b.n	3980 <spi_init+0x2c>
    3b20:	2100      	movs	r1, #0
    3b22:	0030      	movs	r0, r6
    3b24:	4b76      	ldr	r3, [pc, #472]	; (3d00 <spi_init+0x3ac>)
    3b26:	4798      	blx	r3
    3b28:	e73a      	b.n	39a0 <spi_init+0x4c>
    3b2a:	2101      	movs	r1, #1
    3b2c:	0030      	movs	r0, r6
    3b2e:	4b74      	ldr	r3, [pc, #464]	; (3d00 <spi_init+0x3ac>)
    3b30:	4798      	blx	r3
    3b32:	0007      	movs	r7, r0
    3b34:	e758      	b.n	39e8 <spi_init+0x94>
    3b36:	231f      	movs	r3, #31
    3b38:	4018      	ands	r0, r3
    3b3a:	3040      	adds	r0, #64	; 0x40
    3b3c:	7803      	ldrb	r3, [r0, #0]
    3b3e:	deff      	udf	#255	; 0xff
    3b40:	0008      	movs	r0, r1
    3b42:	4b70      	ldr	r3, [pc, #448]	; (3d04 <spi_init+0x3b0>)
    3b44:	4798      	blx	r3
    3b46:	2805      	cmp	r0, #5
    3b48:	d100      	bne.n	3b4c <spi_init+0x1f8>
    3b4a:	e0cd      	b.n	3ce8 <spi_init+0x394>
    3b4c:	4087      	lsls	r7, r0
    3b4e:	4b6e      	ldr	r3, [pc, #440]	; (3d08 <spi_init+0x3b4>)
    3b50:	3012      	adds	r0, #18
    3b52:	69da      	ldr	r2, [r3, #28]
    3b54:	4317      	orrs	r7, r2
    3b56:	61df      	str	r7, [r3, #28]
    3b58:	b2c7      	uxtb	r7, r0
    3b5a:	2324      	movs	r3, #36	; 0x24
    3b5c:	466a      	mov	r2, sp
    3b5e:	4698      	mov	r8, r3
    3b60:	5ce3      	ldrb	r3, [r4, r3]
    3b62:	4669      	mov	r1, sp
    3b64:	7013      	strb	r3, [r2, #0]
    3b66:	0038      	movs	r0, r7
    3b68:	4b68      	ldr	r3, [pc, #416]	; (3d0c <spi_init+0x3b8>)
    3b6a:	4798      	blx	r3
    3b6c:	0038      	movs	r0, r7
    3b6e:	4b68      	ldr	r3, [pc, #416]	; (3d10 <spi_init+0x3bc>)
    3b70:	4798      	blx	r3
    3b72:	4643      	mov	r3, r8
    3b74:	2100      	movs	r1, #0
    3b76:	5ce0      	ldrb	r0, [r4, r3]
    3b78:	4b66      	ldr	r3, [pc, #408]	; (3d14 <spi_init+0x3c0>)
    3b7a:	4798      	blx	r3
    3b7c:	7823      	ldrb	r3, [r4, #0]
    3b7e:	2b01      	cmp	r3, #1
    3b80:	d100      	bne.n	3b84 <spi_init+0x230>
    3b82:	e0ab      	b.n	3cdc <spi_init+0x388>
    3b84:	682a      	ldr	r2, [r5, #0]
    3b86:	4669      	mov	r1, sp
    3b88:	4691      	mov	r9, r2
    3b8a:	2280      	movs	r2, #128	; 0x80
    3b8c:	710a      	strb	r2, [r1, #4]
    3b8e:	2200      	movs	r2, #0
    3b90:	4668      	mov	r0, sp
    3b92:	714a      	strb	r2, [r1, #5]
    3b94:	2101      	movs	r1, #1
    3b96:	71c2      	strb	r2, [r0, #7]
    3b98:	7181      	strb	r1, [r0, #6]
    3b9a:	2b00      	cmp	r3, #0
    3b9c:	d100      	bne.n	3ba0 <spi_init+0x24c>
    3b9e:	7183      	strb	r3, [r0, #6]
    3ba0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3ba2:	af02      	add	r7, sp, #8
    3ba4:	9302      	str	r3, [sp, #8]
    3ba6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3ba8:	2600      	movs	r6, #0
    3baa:	607b      	str	r3, [r7, #4]
    3bac:	6b23      	ldr	r3, [r4, #48]	; 0x30
    3bae:	60bb      	str	r3, [r7, #8]
    3bb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3bb2:	60fb      	str	r3, [r7, #12]
    3bb4:	4b52      	ldr	r3, [pc, #328]	; (3d00 <spi_init+0x3ac>)
    3bb6:	469b      	mov	fp, r3
    3bb8:	4b57      	ldr	r3, [pc, #348]	; (3d18 <spi_init+0x3c4>)
    3bba:	469a      	mov	sl, r3
    3bbc:	00b3      	lsls	r3, r6, #2
    3bbe:	58f8      	ldr	r0, [r7, r3]
    3bc0:	b2f1      	uxtb	r1, r6
    3bc2:	2800      	cmp	r0, #0
    3bc4:	d045      	beq.n	3c52 <spi_init+0x2fe>
    3bc6:	1c43      	adds	r3, r0, #1
    3bc8:	d005      	beq.n	3bd6 <spi_init+0x282>
    3bca:	466b      	mov	r3, sp
    3bcc:	7118      	strb	r0, [r3, #4]
    3bce:	0c00      	lsrs	r0, r0, #16
    3bd0:	b2c0      	uxtb	r0, r0
    3bd2:	a901      	add	r1, sp, #4
    3bd4:	47d0      	blx	sl
    3bd6:	3601      	adds	r6, #1
    3bd8:	2e04      	cmp	r6, #4
    3bda:	d1ef      	bne.n	3bbc <spi_init+0x268>
    3bdc:	7823      	ldrb	r3, [r4, #0]
    3bde:	466a      	mov	r2, sp
    3be0:	716b      	strb	r3, [r5, #5]
    3be2:	7c23      	ldrb	r3, [r4, #16]
    3be4:	71ab      	strb	r3, [r5, #6]
    3be6:	7ca3      	ldrb	r3, [r4, #18]
    3be8:	71eb      	strb	r3, [r5, #7]
    3bea:	7d23      	ldrb	r3, [r4, #20]
    3bec:	722b      	strb	r3, [r5, #8]
    3bee:	2300      	movs	r3, #0
    3bf0:	8053      	strh	r3, [r2, #2]
    3bf2:	7823      	ldrb	r3, [r4, #0]
    3bf4:	2b01      	cmp	r3, #1
    3bf6:	d100      	bne.n	3bfa <spi_init+0x2a6>
    3bf8:	e0a5      	b.n	3d46 <spi_init+0x3f2>
    3bfa:	68a2      	ldr	r2, [r4, #8]
    3bfc:	6863      	ldr	r3, [r4, #4]
    3bfe:	7c21      	ldrb	r1, [r4, #16]
    3c00:	4313      	orrs	r3, r2
    3c02:	68e2      	ldr	r2, [r4, #12]
    3c04:	4313      	orrs	r3, r2
    3c06:	7c62      	ldrb	r2, [r4, #17]
    3c08:	2a00      	cmp	r2, #0
    3c0a:	d11f      	bne.n	3c4c <spi_init+0x2f8>
    3c0c:	4a43      	ldr	r2, [pc, #268]	; (3d1c <spi_init+0x3c8>)
    3c0e:	7892      	ldrb	r2, [r2, #2]
    3c10:	0792      	lsls	r2, r2, #30
    3c12:	d41b      	bmi.n	3c4c <spi_init+0x2f8>
    3c14:	7ca2      	ldrb	r2, [r4, #18]
    3c16:	2a00      	cmp	r2, #0
    3c18:	d002      	beq.n	3c20 <spi_init+0x2cc>
    3c1a:	2280      	movs	r2, #128	; 0x80
    3c1c:	0292      	lsls	r2, r2, #10
    3c1e:	4311      	orrs	r1, r2
    3c20:	7ce2      	ldrb	r2, [r4, #19]
    3c22:	2a00      	cmp	r2, #0
    3c24:	d002      	beq.n	3c2c <spi_init+0x2d8>
    3c26:	2280      	movs	r2, #128	; 0x80
    3c28:	0092      	lsls	r2, r2, #2
    3c2a:	4311      	orrs	r1, r2
    3c2c:	7d22      	ldrb	r2, [r4, #20]
    3c2e:	2a00      	cmp	r2, #0
    3c30:	d002      	beq.n	3c38 <spi_init+0x2e4>
    3c32:	2280      	movs	r2, #128	; 0x80
    3c34:	0192      	lsls	r2, r2, #6
    3c36:	4311      	orrs	r1, r2
    3c38:	464a      	mov	r2, r9
    3c3a:	6812      	ldr	r2, [r2, #0]
    3c3c:	2000      	movs	r0, #0
    3c3e:	4313      	orrs	r3, r2
    3c40:	464a      	mov	r2, r9
    3c42:	6013      	str	r3, [r2, #0]
    3c44:	6853      	ldr	r3, [r2, #4]
    3c46:	430b      	orrs	r3, r1
    3c48:	6053      	str	r3, [r2, #4]
    3c4a:	e699      	b.n	3980 <spi_init+0x2c>
    3c4c:	2280      	movs	r2, #128	; 0x80
    3c4e:	4313      	orrs	r3, r2
    3c50:	e7e0      	b.n	3c14 <spi_init+0x2c0>
    3c52:	4648      	mov	r0, r9
    3c54:	47d8      	blx	fp
    3c56:	e7b6      	b.n	3bc6 <spi_init+0x272>
    3c58:	4662      	mov	r2, ip
    3c5a:	0852      	lsrs	r2, r2, #1
    3c5c:	4694      	mov	ip, r2
    3c5e:	4463      	add	r3, ip
    3c60:	3330      	adds	r3, #48	; 0x30
    3c62:	781b      	ldrb	r3, [r3, #0]
    3c64:	b2db      	uxtb	r3, r3
    3c66:	469c      	mov	ip, r3
    3c68:	091b      	lsrs	r3, r3, #4
    3c6a:	4201      	tst	r1, r0
    3c6c:	d000      	beq.n	3c70 <spi_init+0x31c>
    3c6e:	e6b5      	b.n	39dc <spi_init+0x88>
    3c70:	230f      	movs	r3, #15
    3c72:	4662      	mov	r2, ip
    3c74:	4013      	ands	r3, r2
    3c76:	e6b1      	b.n	39dc <spi_init+0x88>
    3c78:	087f      	lsrs	r7, r7, #1
    3c7a:	19db      	adds	r3, r3, r7
    3c7c:	3330      	adds	r3, #48	; 0x30
    3c7e:	7819      	ldrb	r1, [r3, #0]
    3c80:	b2c9      	uxtb	r1, r1
    3c82:	090b      	lsrs	r3, r1, #4
    3c84:	4202      	tst	r2, r0
    3c86:	d000      	beq.n	3c8a <spi_init+0x336>
    3c88:	e6c8      	b.n	3a1c <spi_init+0xc8>
    3c8a:	230f      	movs	r3, #15
    3c8c:	400b      	ands	r3, r1
    3c8e:	e6c5      	b.n	3a1c <spi_init+0xc8>
    3c90:	087f      	lsrs	r7, r7, #1
    3c92:	19db      	adds	r3, r3, r7
    3c94:	3330      	adds	r3, #48	; 0x30
    3c96:	7819      	ldrb	r1, [r3, #0]
    3c98:	b2c9      	uxtb	r1, r1
    3c9a:	090b      	lsrs	r3, r1, #4
    3c9c:	4202      	tst	r2, r0
    3c9e:	d000      	beq.n	3ca2 <spi_init+0x34e>
    3ca0:	e6dd      	b.n	3a5e <spi_init+0x10a>
    3ca2:	230f      	movs	r3, #15
    3ca4:	400b      	ands	r3, r1
    3ca6:	e6da      	b.n	3a5e <spi_init+0x10a>
    3ca8:	2102      	movs	r1, #2
    3caa:	0030      	movs	r0, r6
    3cac:	4b14      	ldr	r3, [pc, #80]	; (3d00 <spi_init+0x3ac>)
    3cae:	4798      	blx	r3
    3cb0:	4680      	mov	r8, r0
    3cb2:	e6b9      	b.n	3a28 <spi_init+0xd4>
    3cb4:	2103      	movs	r1, #3
    3cb6:	0030      	movs	r0, r6
    3cb8:	4b11      	ldr	r3, [pc, #68]	; (3d00 <spi_init+0x3ac>)
    3cba:	4798      	blx	r3
    3cbc:	4681      	mov	r9, r0
    3cbe:	e6d4      	b.n	3a6a <spi_init+0x116>
    3cc0:	230f      	movs	r3, #15
    3cc2:	401a      	ands	r2, r3
    3cc4:	4691      	mov	r9, r2
    3cc6:	e6f9      	b.n	3abc <spi_init+0x168>
    3cc8:	6873      	ldr	r3, [r6, #4]
    3cca:	4293      	cmp	r3, r2
    3ccc:	d000      	beq.n	3cd0 <spi_init+0x37c>
    3cce:	e723      	b.n	3b18 <spi_init+0x1c4>
    3cd0:	7823      	ldrb	r3, [r4, #0]
    3cd2:	2000      	movs	r0, #0
    3cd4:	716b      	strb	r3, [r5, #5]
    3cd6:	7c23      	ldrb	r3, [r4, #16]
    3cd8:	71ab      	strb	r3, [r5, #6]
    3cda:	e651      	b.n	3980 <spi_init+0x2c>
    3cdc:	220c      	movs	r2, #12
    3cde:	6833      	ldr	r3, [r6, #0]
    3ce0:	4313      	orrs	r3, r2
    3ce2:	6033      	str	r3, [r6, #0]
    3ce4:	7823      	ldrb	r3, [r4, #0]
    3ce6:	e74d      	b.n	3b84 <spi_init+0x230>
    3ce8:	4641      	mov	r1, r8
    3cea:	4a07      	ldr	r2, [pc, #28]	; (3d08 <spi_init+0x3b4>)
    3cec:	2718      	movs	r7, #24
    3cee:	6a13      	ldr	r3, [r2, #32]
    3cf0:	430b      	orrs	r3, r1
    3cf2:	6213      	str	r3, [r2, #32]
    3cf4:	e731      	b.n	3b5a <spi_init+0x206>
    3cf6:	46c0      	nop			; (mov r8, r8)
    3cf8:	40002800 	.word	0x40002800
    3cfc:	000048a9 	.word	0x000048a9
    3d00:	000036b9 	.word	0x000036b9
    3d04:	00003815 	.word	0x00003815
    3d08:	40000400 	.word	0x40000400
    3d0c:	00004831 	.word	0x00004831
    3d10:	00004871 	.word	0x00004871
    3d14:	00003671 	.word	0x00003671
    3d18:	0000492d 	.word	0x0000492d
    3d1c:	41002000 	.word	0x41002000
    3d20:	0001      	movs	r1, r0
    3d22:	4b14      	ldr	r3, [pc, #80]	; (3d74 <spi_init+0x420>)
    3d24:	aa02      	add	r2, sp, #8
    3d26:	69a0      	ldr	r0, [r4, #24]
    3d28:	4798      	blx	r3
    3d2a:	0003      	movs	r3, r0
    3d2c:	2017      	movs	r0, #23
    3d2e:	2b00      	cmp	r3, #0
    3d30:	d000      	beq.n	3d34 <spi_init+0x3e0>
    3d32:	e625      	b.n	3980 <spi_init+0x2c>
    3d34:	466a      	mov	r2, sp
    3d36:	7b33      	ldrb	r3, [r6, #12]
    3d38:	7a12      	ldrb	r2, [r2, #8]
    3d3a:	3005      	adds	r0, #5
    3d3c:	429a      	cmp	r2, r3
    3d3e:	d000      	beq.n	3d42 <spi_init+0x3ee>
    3d40:	e61e      	b.n	3980 <spi_init+0x2c>
    3d42:	370c      	adds	r7, #12
    3d44:	e6c4      	b.n	3ad0 <spi_init+0x17c>
    3d46:	4b0c      	ldr	r3, [pc, #48]	; (3d78 <spi_init+0x424>)
    3d48:	6828      	ldr	r0, [r5, #0]
    3d4a:	4798      	blx	r3
    3d4c:	3012      	adds	r0, #18
    3d4e:	4b0b      	ldr	r3, [pc, #44]	; (3d7c <spi_init+0x428>)
    3d50:	b2c0      	uxtb	r0, r0
    3d52:	4798      	blx	r3
    3d54:	466b      	mov	r3, sp
    3d56:	0001      	movs	r1, r0
    3d58:	1c9a      	adds	r2, r3, #2
    3d5a:	69a0      	ldr	r0, [r4, #24]
    3d5c:	4b05      	ldr	r3, [pc, #20]	; (3d74 <spi_init+0x420>)
    3d5e:	4798      	blx	r3
    3d60:	0003      	movs	r3, r0
    3d62:	2017      	movs	r0, #23
    3d64:	2b00      	cmp	r3, #0
    3d66:	d000      	beq.n	3d6a <spi_init+0x416>
    3d68:	e60a      	b.n	3980 <spi_init+0x2c>
    3d6a:	466b      	mov	r3, sp
    3d6c:	464a      	mov	r2, r9
    3d6e:	789b      	ldrb	r3, [r3, #2]
    3d70:	7313      	strb	r3, [r2, #12]
    3d72:	e742      	b.n	3bfa <spi_init+0x2a6>
    3d74:	00003461 	.word	0x00003461
    3d78:	00003815 	.word	0x00003815
    3d7c:	000048a9 	.word	0x000048a9

00003d80 <spi_select_slave>:
    3d80:	b570      	push	{r4, r5, r6, lr}
    3d82:	7943      	ldrb	r3, [r0, #5]
    3d84:	2415      	movs	r4, #21
    3d86:	2b01      	cmp	r3, #1
    3d88:	d001      	beq.n	3d8e <spi_select_slave+0xe>
    3d8a:	0020      	movs	r0, r4
    3d8c:	bd70      	pop	{r4, r5, r6, pc}
    3d8e:	7a04      	ldrb	r4, [r0, #8]
    3d90:	2c00      	cmp	r4, #0
    3d92:	d13a      	bne.n	3e0a <spi_select_slave+0x8a>
    3d94:	2a00      	cmp	r2, #0
    3d96:	d03a      	beq.n	3e0e <spi_select_slave+0x8e>
    3d98:	784a      	ldrb	r2, [r1, #1]
    3d9a:	2a00      	cmp	r2, #0
    3d9c:	d046      	beq.n	3e2c <spi_select_slave+0xac>
    3d9e:	6802      	ldr	r2, [r0, #0]
    3da0:	7e12      	ldrb	r2, [r2, #24]
    3da2:	401a      	ands	r2, r3
    3da4:	d10d      	bne.n	3dc2 <spi_select_slave+0x42>
    3da6:	7808      	ldrb	r0, [r1, #0]
    3da8:	0941      	lsrs	r1, r0, #5
    3daa:	09c4      	lsrs	r4, r0, #7
    3dac:	d13c      	bne.n	3e28 <spi_select_slave+0xa8>
    3dae:	321f      	adds	r2, #31
    3db0:	4002      	ands	r2, r0
    3db2:	4093      	lsls	r3, r2
    3db4:	01ca      	lsls	r2, r1, #7
    3db6:	4926      	ldr	r1, [pc, #152]	; (3e50 <spi_select_slave+0xd0>)
    3db8:	3405      	adds	r4, #5
    3dba:	468c      	mov	ip, r1
    3dbc:	4462      	add	r2, ip
    3dbe:	6193      	str	r3, [r2, #24]
    3dc0:	e7e3      	b.n	3d8a <spi_select_slave+0xa>
    3dc2:	780d      	ldrb	r5, [r1, #0]
    3dc4:	096a      	lsrs	r2, r5, #5
    3dc6:	09ee      	lsrs	r6, r5, #7
    3dc8:	d13f      	bne.n	3e4a <spi_select_slave+0xca>
    3dca:	241f      	movs	r4, #31
    3dcc:	402c      	ands	r4, r5
    3dce:	001d      	movs	r5, r3
    3dd0:	40a5      	lsls	r5, r4
    3dd2:	002c      	movs	r4, r5
    3dd4:	4d1e      	ldr	r5, [pc, #120]	; (3e50 <spi_select_slave+0xd0>)
    3dd6:	01d2      	lsls	r2, r2, #7
    3dd8:	46ac      	mov	ip, r5
    3dda:	4462      	add	r2, ip
    3ddc:	6154      	str	r4, [r2, #20]
    3dde:	6802      	ldr	r2, [r0, #0]
    3de0:	788c      	ldrb	r4, [r1, #2]
    3de2:	7e11      	ldrb	r1, [r2, #24]
    3de4:	420b      	tst	r3, r1
    3de6:	d000      	beq.n	3dea <spi_select_slave+0x6a>
    3de8:	6294      	str	r4, [r2, #40]	; 0x28
    3dea:	79c3      	ldrb	r3, [r0, #7]
    3dec:	2b00      	cmp	r3, #0
    3dee:	d10c      	bne.n	3e0a <spi_select_slave+0x8a>
    3df0:	2104      	movs	r1, #4
    3df2:	6802      	ldr	r2, [r0, #0]
    3df4:	7e13      	ldrb	r3, [r2, #24]
    3df6:	4219      	tst	r1, r3
    3df8:	d0fc      	beq.n	3df4 <spi_select_slave+0x74>
    3dfa:	7e13      	ldrb	r3, [r2, #24]
    3dfc:	4219      	tst	r1, r3
    3dfe:	d004      	beq.n	3e0a <spi_select_slave+0x8a>
    3e00:	8b53      	ldrh	r3, [r2, #26]
    3e02:	075b      	lsls	r3, r3, #29
    3e04:	d500      	bpl.n	3e08 <spi_select_slave+0x88>
    3e06:	8351      	strh	r1, [r2, #26]
    3e08:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3e0a:	2400      	movs	r4, #0
    3e0c:	e7bd      	b.n	3d8a <spi_select_slave+0xa>
    3e0e:	7808      	ldrb	r0, [r1, #0]
    3e10:	0941      	lsrs	r1, r0, #5
    3e12:	09c4      	lsrs	r4, r0, #7
    3e14:	d108      	bne.n	3e28 <spi_select_slave+0xa8>
    3e16:	221f      	movs	r2, #31
    3e18:	4002      	ands	r2, r0
    3e1a:	4093      	lsls	r3, r2
    3e1c:	01ca      	lsls	r2, r1, #7
    3e1e:	490c      	ldr	r1, [pc, #48]	; (3e50 <spi_select_slave+0xd0>)
    3e20:	468c      	mov	ip, r1
    3e22:	4462      	add	r2, ip
    3e24:	6193      	str	r3, [r2, #24]
    3e26:	e7b0      	b.n	3d8a <spi_select_slave+0xa>
    3e28:	6192      	str	r2, [r2, #24]
    3e2a:	deff      	udf	#255	; 0xff
    3e2c:	7808      	ldrb	r0, [r1, #0]
    3e2e:	0941      	lsrs	r1, r0, #5
    3e30:	09c4      	lsrs	r4, r0, #7
    3e32:	d108      	bne.n	3e46 <spi_select_slave+0xc6>
    3e34:	221f      	movs	r2, #31
    3e36:	4002      	ands	r2, r0
    3e38:	4093      	lsls	r3, r2
    3e3a:	01ca      	lsls	r2, r1, #7
    3e3c:	4904      	ldr	r1, [pc, #16]	; (3e50 <spi_select_slave+0xd0>)
    3e3e:	468c      	mov	ip, r1
    3e40:	4462      	add	r2, ip
    3e42:	6153      	str	r3, [r2, #20]
    3e44:	e7a1      	b.n	3d8a <spi_select_slave+0xa>
    3e46:	6152      	str	r2, [r2, #20]
    3e48:	deff      	udf	#255	; 0xff
    3e4a:	6164      	str	r4, [r4, #20]
    3e4c:	deff      	udf	#255	; 0xff
    3e4e:	46c0      	nop			; (mov r8, r8)
    3e50:	40002800 	.word	0x40002800

00003e54 <usart_init>:
    3e54:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e56:	4645      	mov	r5, r8
    3e58:	46de      	mov	lr, fp
    3e5a:	464e      	mov	r6, r9
    3e5c:	4657      	mov	r7, sl
    3e5e:	0003      	movs	r3, r0
    3e60:	b5e0      	push	{r5, r6, r7, lr}
    3e62:	6019      	str	r1, [r3, #0]
    3e64:	4bb6      	ldr	r3, [pc, #728]	; (4140 <usart_init+0x2ec>)
    3e66:	b091      	sub	sp, #68	; 0x44
    3e68:	4680      	mov	r8, r0
    3e6a:	0008      	movs	r0, r1
    3e6c:	4699      	mov	r9, r3
    3e6e:	000c      	movs	r4, r1
    3e70:	0015      	movs	r5, r2
    3e72:	4798      	blx	r3
    3e74:	0003      	movs	r3, r0
    3e76:	2805      	cmp	r0, #5
    3e78:	d100      	bne.n	3e7c <usart_init+0x28>
    3e7a:	e108      	b.n	408e <usart_init+0x23a>
    3e7c:	0006      	movs	r6, r0
    3e7e:	0007      	movs	r7, r0
    3e80:	3612      	adds	r6, #18
    3e82:	2201      	movs	r2, #1
    3e84:	6821      	ldr	r1, [r4, #0]
    3e86:	2005      	movs	r0, #5
    3e88:	420a      	tst	r2, r1
    3e8a:	d006      	beq.n	3e9a <usart_init+0x46>
    3e8c:	b011      	add	sp, #68	; 0x44
    3e8e:	bc3c      	pop	{r2, r3, r4, r5}
    3e90:	4690      	mov	r8, r2
    3e92:	4699      	mov	r9, r3
    3e94:	46a2      	mov	sl, r4
    3e96:	46ab      	mov	fp, r5
    3e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e9a:	6821      	ldr	r1, [r4, #0]
    3e9c:	3017      	adds	r0, #23
    3e9e:	0789      	lsls	r1, r1, #30
    3ea0:	d4f4      	bmi.n	3e8c <usart_init+0x38>
    3ea2:	2b05      	cmp	r3, #5
    3ea4:	d100      	bne.n	3ea8 <usart_init+0x54>
    3ea6:	e119      	b.n	40dc <usart_init+0x288>
    3ea8:	40ba      	lsls	r2, r7
    3eaa:	4ba6      	ldr	r3, [pc, #664]	; (4144 <usart_init+0x2f0>)
    3eac:	69d9      	ldr	r1, [r3, #28]
    3eae:	430a      	orrs	r2, r1
    3eb0:	61da      	str	r2, [r3, #28]
    3eb2:	272d      	movs	r7, #45	; 0x2d
    3eb4:	5deb      	ldrb	r3, [r5, r7]
    3eb6:	a90a      	add	r1, sp, #40	; 0x28
    3eb8:	b2f6      	uxtb	r6, r6
    3eba:	700b      	strb	r3, [r1, #0]
    3ebc:	0030      	movs	r0, r6
    3ebe:	4ba2      	ldr	r3, [pc, #648]	; (4148 <usart_init+0x2f4>)
    3ec0:	4798      	blx	r3
    3ec2:	0030      	movs	r0, r6
    3ec4:	4ba1      	ldr	r3, [pc, #644]	; (414c <usart_init+0x2f8>)
    3ec6:	4798      	blx	r3
    3ec8:	2100      	movs	r1, #0
    3eca:	4ba1      	ldr	r3, [pc, #644]	; (4150 <usart_init+0x2fc>)
    3ecc:	5de8      	ldrb	r0, [r5, r7]
    3ece:	4798      	blx	r3
    3ed0:	4642      	mov	r2, r8
    3ed2:	7aeb      	ldrb	r3, [r5, #11]
    3ed4:	ae0c      	add	r6, sp, #48	; 0x30
    3ed6:	7153      	strb	r3, [r2, #5]
    3ed8:	2324      	movs	r3, #36	; 0x24
    3eda:	5ceb      	ldrb	r3, [r5, r3]
    3edc:	7193      	strb	r3, [r2, #6]
    3ede:	2325      	movs	r3, #37	; 0x25
    3ee0:	5ceb      	ldrb	r3, [r5, r3]
    3ee2:	71d3      	strb	r3, [r2, #7]
    3ee4:	7eeb      	ldrb	r3, [r5, #27]
    3ee6:	7213      	strb	r3, [r2, #8]
    3ee8:	7f2b      	ldrb	r3, [r5, #28]
    3eea:	7253      	strb	r3, [r2, #9]
    3eec:	6813      	ldr	r3, [r2, #0]
    3eee:	0018      	movs	r0, r3
    3ef0:	469a      	mov	sl, r3
    3ef2:	47c8      	blx	r9
    3ef4:	2300      	movs	r3, #0
    3ef6:	8033      	strh	r3, [r6, #0]
    3ef8:	2380      	movs	r3, #128	; 0x80
    3efa:	8a2a      	ldrh	r2, [r5, #16]
    3efc:	3012      	adds	r0, #18
    3efe:	9202      	str	r2, [sp, #8]
    3f00:	01db      	lsls	r3, r3, #7
    3f02:	429a      	cmp	r2, r3
    3f04:	d100      	bne.n	3f08 <usart_init+0xb4>
    3f06:	e0ef      	b.n	40e8 <usart_init+0x294>
    3f08:	d800      	bhi.n	3f0c <usart_init+0xb8>
    3f0a:	e0de      	b.n	40ca <usart_init+0x276>
    3f0c:	23c0      	movs	r3, #192	; 0xc0
    3f0e:	01db      	lsls	r3, r3, #7
    3f10:	429a      	cmp	r2, r3
    3f12:	d100      	bne.n	3f16 <usart_init+0xc2>
    3f14:	e0be      	b.n	4094 <usart_init+0x240>
    3f16:	2380      	movs	r3, #128	; 0x80
    3f18:	021b      	lsls	r3, r3, #8
    3f1a:	429a      	cmp	r2, r3
    3f1c:	d000      	beq.n	3f20 <usart_init+0xcc>
    3f1e:	e0e8      	b.n	40f2 <usart_init+0x29e>
    3f20:	2303      	movs	r3, #3
    3f22:	9309      	str	r3, [sp, #36]	; 0x24
    3f24:	2300      	movs	r3, #0
    3f26:	9308      	str	r3, [sp, #32]
    3f28:	682b      	ldr	r3, [r5, #0]
    3f2a:	9303      	str	r3, [sp, #12]
    3f2c:	68eb      	ldr	r3, [r5, #12]
    3f2e:	9304      	str	r3, [sp, #16]
    3f30:	696b      	ldr	r3, [r5, #20]
    3f32:	9305      	str	r3, [sp, #20]
    3f34:	7e2b      	ldrb	r3, [r5, #24]
    3f36:	9306      	str	r3, [sp, #24]
    3f38:	2326      	movs	r3, #38	; 0x26
    3f3a:	5ceb      	ldrb	r3, [r5, r3]
    3f3c:	9307      	str	r3, [sp, #28]
    3f3e:	686b      	ldr	r3, [r5, #4]
    3f40:	469b      	mov	fp, r3
    3f42:	2b00      	cmp	r3, #0
    3f44:	d100      	bne.n	3f48 <usart_init+0xf4>
    3f46:	e0af      	b.n	40a8 <usart_init+0x254>
    3f48:	2380      	movs	r3, #128	; 0x80
    3f4a:	055b      	lsls	r3, r3, #21
    3f4c:	459b      	cmp	fp, r3
    3f4e:	d000      	beq.n	3f52 <usart_init+0xfe>
    3f50:	e0a8      	b.n	40a4 <usart_init+0x250>
    3f52:	2327      	movs	r3, #39	; 0x27
    3f54:	5ceb      	ldrb	r3, [r5, r3]
    3f56:	2100      	movs	r1, #0
    3f58:	2b00      	cmp	r3, #0
    3f5a:	d100      	bne.n	3f5e <usart_init+0x10a>
    3f5c:	e0e4      	b.n	4128 <usart_init+0x2d4>
    3f5e:	7e6b      	ldrb	r3, [r5, #25]
    3f60:	2b00      	cmp	r3, #0
    3f62:	d002      	beq.n	3f6a <usart_init+0x116>
    3f64:	4652      	mov	r2, sl
    3f66:	7eab      	ldrb	r3, [r5, #26]
    3f68:	7393      	strb	r3, [r2, #14]
    3f6a:	4643      	mov	r3, r8
    3f6c:	9f02      	ldr	r7, [sp, #8]
    3f6e:	681a      	ldr	r2, [r3, #0]
    3f70:	69d3      	ldr	r3, [r2, #28]
    3f72:	2b00      	cmp	r3, #0
    3f74:	d1fc      	bne.n	3f70 <usart_init+0x11c>
    3f76:	4653      	mov	r3, sl
    3f78:	9a04      	ldr	r2, [sp, #16]
    3f7a:	8199      	strh	r1, [r3, #12]
    3f7c:	9b03      	ldr	r3, [sp, #12]
    3f7e:	4313      	orrs	r3, r2
    3f80:	9a05      	ldr	r2, [sp, #20]
    3f82:	4313      	orrs	r3, r2
    3f84:	465a      	mov	r2, fp
    3f86:	4313      	orrs	r3, r2
    3f88:	431f      	orrs	r7, r3
    3f8a:	9b06      	ldr	r3, [sp, #24]
    3f8c:	021b      	lsls	r3, r3, #8
    3f8e:	431f      	orrs	r7, r3
    3f90:	9b07      	ldr	r3, [sp, #28]
    3f92:	075b      	lsls	r3, r3, #29
    3f94:	431f      	orrs	r7, r3
    3f96:	2327      	movs	r3, #39	; 0x27
    3f98:	5ceb      	ldrb	r3, [r5, r3]
    3f9a:	2b00      	cmp	r3, #0
    3f9c:	d101      	bne.n	3fa2 <usart_init+0x14e>
    3f9e:	3304      	adds	r3, #4
    3fa0:	431f      	orrs	r7, r3
    3fa2:	7e6b      	ldrb	r3, [r5, #25]
    3fa4:	7f2a      	ldrb	r2, [r5, #28]
    3fa6:	029b      	lsls	r3, r3, #10
    3fa8:	0252      	lsls	r2, r2, #9
    3faa:	4313      	orrs	r3, r2
    3fac:	7f6a      	ldrb	r2, [r5, #29]
    3fae:	7ae9      	ldrb	r1, [r5, #11]
    3fb0:	0212      	lsls	r2, r2, #8
    3fb2:	4313      	orrs	r3, r2
    3fb4:	2224      	movs	r2, #36	; 0x24
    3fb6:	5caa      	ldrb	r2, [r5, r2]
    3fb8:	0452      	lsls	r2, r2, #17
    3fba:	4313      	orrs	r3, r2
    3fbc:	2225      	movs	r2, #37	; 0x25
    3fbe:	5caa      	ldrb	r2, [r5, r2]
    3fc0:	0412      	lsls	r2, r2, #16
    3fc2:	4313      	orrs	r3, r2
    3fc4:	892a      	ldrh	r2, [r5, #8]
    3fc6:	4319      	orrs	r1, r3
    3fc8:	2aff      	cmp	r2, #255	; 0xff
    3fca:	d100      	bne.n	3fce <usart_init+0x17a>
    3fcc:	e096      	b.n	40fc <usart_init+0x2a8>
    3fce:	2380      	movs	r3, #128	; 0x80
    3fd0:	045b      	lsls	r3, r3, #17
    3fd2:	431f      	orrs	r7, r3
    3fd4:	4311      	orrs	r1, r2
    3fd6:	222c      	movs	r2, #44	; 0x2c
    3fd8:	5caa      	ldrb	r2, [r5, r2]
    3fda:	2a00      	cmp	r2, #0
    3fdc:	d103      	bne.n	3fe6 <usart_init+0x192>
    3fde:	4b5d      	ldr	r3, [pc, #372]	; (4154 <usart_init+0x300>)
    3fe0:	789b      	ldrb	r3, [r3, #2]
    3fe2:	079b      	lsls	r3, r3, #30
    3fe4:	d501      	bpl.n	3fea <usart_init+0x196>
    3fe6:	2380      	movs	r3, #128	; 0x80
    3fe8:	431f      	orrs	r7, r3
    3fea:	4643      	mov	r3, r8
    3fec:	681a      	ldr	r2, [r3, #0]
    3fee:	69d3      	ldr	r3, [r2, #28]
    3ff0:	2b00      	cmp	r3, #0
    3ff2:	d1fc      	bne.n	3fee <usart_init+0x19a>
    3ff4:	4653      	mov	r3, sl
    3ff6:	6059      	str	r1, [r3, #4]
    3ff8:	4643      	mov	r3, r8
    3ffa:	681a      	ldr	r2, [r3, #0]
    3ffc:	69d3      	ldr	r3, [r2, #28]
    3ffe:	2b00      	cmp	r3, #0
    4000:	d1fc      	bne.n	3ffc <usart_init+0x1a8>
    4002:	4652      	mov	r2, sl
    4004:	6017      	str	r7, [r2, #0]
    4006:	af0b      	add	r7, sp, #44	; 0x2c
    4008:	707b      	strb	r3, [r7, #1]
    400a:	70fb      	strb	r3, [r7, #3]
    400c:	70bb      	strb	r3, [r7, #2]
    400e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    4010:	2280      	movs	r2, #128	; 0x80
    4012:	930c      	str	r3, [sp, #48]	; 0x30
    4014:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    4016:	703a      	strb	r2, [r7, #0]
    4018:	6073      	str	r3, [r6, #4]
    401a:	6bab      	ldr	r3, [r5, #56]	; 0x38
    401c:	60b3      	str	r3, [r6, #8]
    401e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    4020:	2500      	movs	r5, #0
    4022:	60f3      	str	r3, [r6, #12]
    4024:	4b4c      	ldr	r3, [pc, #304]	; (4158 <usart_init+0x304>)
    4026:	469b      	mov	fp, r3
    4028:	4b4c      	ldr	r3, [pc, #304]	; (415c <usart_init+0x308>)
    402a:	469a      	mov	sl, r3
    402c:	00ab      	lsls	r3, r5, #2
    402e:	58f0      	ldr	r0, [r6, r3]
    4030:	b2e9      	uxtb	r1, r5
    4032:	2800      	cmp	r0, #0
    4034:	d033      	beq.n	409e <usart_init+0x24a>
    4036:	1c43      	adds	r3, r0, #1
    4038:	d004      	beq.n	4044 <usart_init+0x1f0>
    403a:	7038      	strb	r0, [r7, #0]
    403c:	0c00      	lsrs	r0, r0, #16
    403e:	b2c0      	uxtb	r0, r0
    4040:	0039      	movs	r1, r7
    4042:	47d0      	blx	sl
    4044:	3501      	adds	r5, #1
    4046:	2d04      	cmp	r5, #4
    4048:	d1f0      	bne.n	402c <usart_init+0x1d8>
    404a:	4640      	mov	r0, r8
    404c:	2218      	movs	r2, #24
    404e:	2100      	movs	r1, #0
    4050:	4b43      	ldr	r3, [pc, #268]	; (4160 <usart_init+0x30c>)
    4052:	300c      	adds	r0, #12
    4054:	4798      	blx	r3
    4056:	2200      	movs	r2, #0
    4058:	4643      	mov	r3, r8
    405a:	4641      	mov	r1, r8
    405c:	629a      	str	r2, [r3, #40]	; 0x28
    405e:	625a      	str	r2, [r3, #36]	; 0x24
    4060:	2300      	movs	r3, #0
    4062:	85ca      	strh	r2, [r1, #46]	; 0x2e
    4064:	858a      	strh	r2, [r1, #44]	; 0x2c
    4066:	3230      	adds	r2, #48	; 0x30
    4068:	548b      	strb	r3, [r1, r2]
    406a:	3201      	adds	r2, #1
    406c:	548b      	strb	r3, [r1, r2]
    406e:	3201      	adds	r2, #1
    4070:	548b      	strb	r3, [r1, r2]
    4072:	3201      	adds	r2, #1
    4074:	548b      	strb	r3, [r1, r2]
    4076:	6808      	ldr	r0, [r1, #0]
    4078:	47c8      	blx	r9
    407a:	4b3a      	ldr	r3, [pc, #232]	; (4164 <usart_init+0x310>)
    407c:	0004      	movs	r4, r0
    407e:	493a      	ldr	r1, [pc, #232]	; (4168 <usart_init+0x314>)
    4080:	4798      	blx	r3
    4082:	4642      	mov	r2, r8
    4084:	4b39      	ldr	r3, [pc, #228]	; (416c <usart_init+0x318>)
    4086:	00a4      	lsls	r4, r4, #2
    4088:	50e2      	str	r2, [r4, r3]
    408a:	2000      	movs	r0, #0
    408c:	e6fe      	b.n	3e8c <usart_init+0x38>
    408e:	2618      	movs	r6, #24
    4090:	2701      	movs	r7, #1
    4092:	e6f6      	b.n	3e82 <usart_init+0x2e>
    4094:	2308      	movs	r3, #8
    4096:	9309      	str	r3, [sp, #36]	; 0x24
    4098:	3b07      	subs	r3, #7
    409a:	9308      	str	r3, [sp, #32]
    409c:	e744      	b.n	3f28 <usart_init+0xd4>
    409e:	0020      	movs	r0, r4
    40a0:	47d8      	blx	fp
    40a2:	e7c8      	b.n	4036 <usart_init+0x1e2>
    40a4:	2100      	movs	r1, #0
    40a6:	e75a      	b.n	3f5e <usart_init+0x10a>
    40a8:	2327      	movs	r3, #39	; 0x27
    40aa:	5ceb      	ldrb	r3, [r5, r3]
    40ac:	2b00      	cmp	r3, #0
    40ae:	d02d      	beq.n	410c <usart_init+0x2b8>
    40b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    40b2:	0032      	movs	r2, r6
    40b4:	9300      	str	r3, [sp, #0]
    40b6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    40b8:	9b08      	ldr	r3, [sp, #32]
    40ba:	6a28      	ldr	r0, [r5, #32]
    40bc:	4f2c      	ldr	r7, [pc, #176]	; (4170 <usart_init+0x31c>)
    40be:	47b8      	blx	r7
    40c0:	2800      	cmp	r0, #0
    40c2:	d000      	beq.n	40c6 <usart_init+0x272>
    40c4:	e6e2      	b.n	3e8c <usart_init+0x38>
    40c6:	8831      	ldrh	r1, [r6, #0]
    40c8:	e749      	b.n	3f5e <usart_init+0x10a>
    40ca:	2380      	movs	r3, #128	; 0x80
    40cc:	019b      	lsls	r3, r3, #6
    40ce:	429a      	cmp	r2, r3
    40d0:	d10f      	bne.n	40f2 <usart_init+0x29e>
    40d2:	2310      	movs	r3, #16
    40d4:	9309      	str	r3, [sp, #36]	; 0x24
    40d6:	3b0f      	subs	r3, #15
    40d8:	9308      	str	r3, [sp, #32]
    40da:	e725      	b.n	3f28 <usart_init+0xd4>
    40dc:	40ba      	lsls	r2, r7
    40de:	4b19      	ldr	r3, [pc, #100]	; (4144 <usart_init+0x2f0>)
    40e0:	6a19      	ldr	r1, [r3, #32]
    40e2:	430a      	orrs	r2, r1
    40e4:	621a      	str	r2, [r3, #32]
    40e6:	e6e4      	b.n	3eb2 <usart_init+0x5e>
    40e8:	2308      	movs	r3, #8
    40ea:	9309      	str	r3, [sp, #36]	; 0x24
    40ec:	2300      	movs	r3, #0
    40ee:	9308      	str	r3, [sp, #32]
    40f0:	e71a      	b.n	3f28 <usart_init+0xd4>
    40f2:	2310      	movs	r3, #16
    40f4:	9309      	str	r3, [sp, #36]	; 0x24
    40f6:	2300      	movs	r3, #0
    40f8:	9308      	str	r3, [sp, #32]
    40fa:	e715      	b.n	3f28 <usart_init+0xd4>
    40fc:	7eeb      	ldrb	r3, [r5, #27]
    40fe:	2b00      	cmp	r3, #0
    4100:	d100      	bne.n	4104 <usart_init+0x2b0>
    4102:	e768      	b.n	3fd6 <usart_init+0x182>
    4104:	2380      	movs	r3, #128	; 0x80
    4106:	04db      	lsls	r3, r3, #19
    4108:	431f      	orrs	r7, r3
    410a:	e764      	b.n	3fd6 <usart_init+0x182>
    410c:	6a2b      	ldr	r3, [r5, #32]
    410e:	b2c0      	uxtb	r0, r0
    4110:	001f      	movs	r7, r3
    4112:	4b18      	ldr	r3, [pc, #96]	; (4174 <usart_init+0x320>)
    4114:	4798      	blx	r3
    4116:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4118:	0001      	movs	r1, r0
    411a:	9300      	str	r3, [sp, #0]
    411c:	0032      	movs	r2, r6
    411e:	9b08      	ldr	r3, [sp, #32]
    4120:	0038      	movs	r0, r7
    4122:	4f13      	ldr	r7, [pc, #76]	; (4170 <usart_init+0x31c>)
    4124:	47b8      	blx	r7
    4126:	e7cb      	b.n	40c0 <usart_init+0x26c>
    4128:	6a2b      	ldr	r3, [r5, #32]
    412a:	b2c0      	uxtb	r0, r0
    412c:	001f      	movs	r7, r3
    412e:	4b11      	ldr	r3, [pc, #68]	; (4174 <usart_init+0x320>)
    4130:	4798      	blx	r3
    4132:	0032      	movs	r2, r6
    4134:	0001      	movs	r1, r0
    4136:	4b10      	ldr	r3, [pc, #64]	; (4178 <usart_init+0x324>)
    4138:	0038      	movs	r0, r7
    413a:	4798      	blx	r3
    413c:	e7c0      	b.n	40c0 <usart_init+0x26c>
    413e:	46c0      	nop			; (mov r8, r8)
    4140:	00003815 	.word	0x00003815
    4144:	40000400 	.word	0x40000400
    4148:	00004831 	.word	0x00004831
    414c:	00004871 	.word	0x00004871
    4150:	00003671 	.word	0x00003671
    4154:	41002000 	.word	0x41002000
    4158:	000036b9 	.word	0x000036b9
    415c:	0000492d 	.word	0x0000492d
    4160:	00007da3 	.word	0x00007da3
    4164:	0000387d 	.word	0x0000387d
    4168:	00004325 	.word	0x00004325
    416c:	20000abc 	.word	0x20000abc
    4170:	00003489 	.word	0x00003489
    4174:	000048a9 	.word	0x000048a9
    4178:	00003461 	.word	0x00003461

0000417c <usart_write_wait>:
    417c:	79c2      	ldrb	r2, [r0, #7]
    417e:	231c      	movs	r3, #28
    4180:	2a00      	cmp	r2, #0
    4182:	d101      	bne.n	4188 <usart_write_wait+0xc>
    4184:	0018      	movs	r0, r3
    4186:	4770      	bx	lr
    4188:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    418a:	3b17      	subs	r3, #23
    418c:	2a00      	cmp	r2, #0
    418e:	d1f9      	bne.n	4184 <usart_write_wait+0x8>
    4190:	6803      	ldr	r3, [r0, #0]
    4192:	69da      	ldr	r2, [r3, #28]
    4194:	2a00      	cmp	r2, #0
    4196:	d1fc      	bne.n	4192 <usart_write_wait+0x16>
    4198:	8519      	strh	r1, [r3, #40]	; 0x28
    419a:	2102      	movs	r1, #2
    419c:	7e1a      	ldrb	r2, [r3, #24]
    419e:	4211      	tst	r1, r2
    41a0:	d0fc      	beq.n	419c <usart_write_wait+0x20>
    41a2:	2300      	movs	r3, #0
    41a4:	e7ee      	b.n	4184 <usart_write_wait+0x8>
    41a6:	46c0      	nop			; (mov r8, r8)

000041a8 <usart_read_wait>:
    41a8:	7982      	ldrb	r2, [r0, #6]
    41aa:	0003      	movs	r3, r0
    41ac:	201c      	movs	r0, #28
    41ae:	2a00      	cmp	r2, #0
    41b0:	d100      	bne.n	41b4 <usart_read_wait+0xc>
    41b2:	4770      	bx	lr
    41b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
    41b6:	3817      	subs	r0, #23
    41b8:	2a00      	cmp	r2, #0
    41ba:	d1fa      	bne.n	41b2 <usart_read_wait+0xa>
    41bc:	681a      	ldr	r2, [r3, #0]
    41be:	7e13      	ldrb	r3, [r2, #24]
    41c0:	075b      	lsls	r3, r3, #29
    41c2:	d5f6      	bpl.n	41b2 <usart_read_wait+0xa>
    41c4:	69d3      	ldr	r3, [r2, #28]
    41c6:	2b00      	cmp	r3, #0
    41c8:	d1fc      	bne.n	41c4 <usart_read_wait+0x1c>
    41ca:	8b53      	ldrh	r3, [r2, #26]
    41cc:	b2db      	uxtb	r3, r3
    41ce:	0698      	lsls	r0, r3, #26
    41d0:	d005      	beq.n	41de <usart_read_wait+0x36>
    41d2:	2002      	movs	r0, #2
    41d4:	4218      	tst	r0, r3
    41d6:	d006      	beq.n	41e6 <usart_read_wait+0x3e>
    41d8:	8350      	strh	r0, [r2, #26]
    41da:	3018      	adds	r0, #24
    41dc:	e7e9      	b.n	41b2 <usart_read_wait+0xa>
    41de:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    41e0:	2000      	movs	r0, #0
    41e2:	800b      	strh	r3, [r1, #0]
    41e4:	e7e5      	b.n	41b2 <usart_read_wait+0xa>
    41e6:	2004      	movs	r0, #4
    41e8:	4218      	tst	r0, r3
    41ea:	d002      	beq.n	41f2 <usart_read_wait+0x4a>
    41ec:	8350      	strh	r0, [r2, #26]
    41ee:	301a      	adds	r0, #26
    41f0:	e7df      	b.n	41b2 <usart_read_wait+0xa>
    41f2:	2001      	movs	r0, #1
    41f4:	4218      	tst	r0, r3
    41f6:	d002      	beq.n	41fe <usart_read_wait+0x56>
    41f8:	8350      	strh	r0, [r2, #26]
    41fa:	3012      	adds	r0, #18
    41fc:	e7d9      	b.n	41b2 <usart_read_wait+0xa>
    41fe:	2010      	movs	r0, #16
    4200:	4203      	tst	r3, r0
    4202:	d002      	beq.n	420a <usart_read_wait+0x62>
    4204:	8350      	strh	r0, [r2, #26]
    4206:	3032      	adds	r0, #50	; 0x32
    4208:	e7d3      	b.n	41b2 <usart_read_wait+0xa>
    420a:	2020      	movs	r0, #32
    420c:	4203      	tst	r3, r0
    420e:	d0e6      	beq.n	41de <usart_read_wait+0x36>
    4210:	8350      	strh	r0, [r2, #26]
    4212:	3021      	adds	r0, #33	; 0x21
    4214:	e7cd      	b.n	41b2 <usart_read_wait+0xa>
    4216:	46c0      	nop			; (mov r8, r8)

00004218 <usart_read_buffer_wait>:
    4218:	b5f0      	push	{r4, r5, r6, r7, lr}
    421a:	46de      	mov	lr, fp
    421c:	4657      	mov	r7, sl
    421e:	464e      	mov	r6, r9
    4220:	4645      	mov	r5, r8
    4222:	b5e0      	push	{r5, r6, r7, lr}
    4224:	2317      	movs	r3, #23
    4226:	b083      	sub	sp, #12
    4228:	2a00      	cmp	r2, #0
    422a:	d107      	bne.n	423c <usart_read_buffer_wait+0x24>
    422c:	0018      	movs	r0, r3
    422e:	b003      	add	sp, #12
    4230:	bc3c      	pop	{r2, r3, r4, r5}
    4232:	4690      	mov	r8, r2
    4234:	4699      	mov	r9, r3
    4236:	46a2      	mov	sl, r4
    4238:	46ab      	mov	fp, r5
    423a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    423c:	7983      	ldrb	r3, [r0, #6]
    423e:	2b00      	cmp	r3, #0
    4240:	d101      	bne.n	4246 <usart_read_buffer_wait+0x2e>
    4242:	231c      	movs	r3, #28
    4244:	e7f2      	b.n	422c <usart_read_buffer_wait+0x14>
    4246:	2502      	movs	r5, #2
    4248:	46ab      	mov	fp, r5
    424a:	3d01      	subs	r5, #1
    424c:	46aa      	mov	sl, r5
    424e:	350f      	adds	r5, #15
    4250:	46a9      	mov	r9, r5
    4252:	4d33      	ldr	r5, [pc, #204]	; (4320 <usart_read_buffer_wait+0x108>)
    4254:	2600      	movs	r6, #0
    4256:	2304      	movs	r3, #4
    4258:	46a8      	mov	r8, r5
    425a:	3a01      	subs	r2, #1
    425c:	6804      	ldr	r4, [r0, #0]
    425e:	b292      	uxth	r2, r2
    4260:	7e25      	ldrb	r5, [r4, #24]
    4262:	422b      	tst	r3, r5
    4264:	d107      	bne.n	4276 <usart_read_buffer_wait+0x5e>
    4266:	4d2e      	ldr	r5, [pc, #184]	; (4320 <usart_read_buffer_wait+0x108>)
    4268:	e002      	b.n	4270 <usart_read_buffer_wait+0x58>
    426a:	3d01      	subs	r5, #1
    426c:	2d00      	cmp	r5, #0
    426e:	d00a      	beq.n	4286 <usart_read_buffer_wait+0x6e>
    4270:	7e27      	ldrb	r7, [r4, #24]
    4272:	423b      	tst	r3, r7
    4274:	d0f9      	beq.n	426a <usart_read_buffer_wait+0x52>
    4276:	7985      	ldrb	r5, [r0, #6]
    4278:	2d00      	cmp	r5, #0
    427a:	d0e2      	beq.n	4242 <usart_read_buffer_wait+0x2a>
    427c:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
    427e:	2d00      	cmp	r5, #0
    4280:	d003      	beq.n	428a <usart_read_buffer_wait+0x72>
    4282:	2305      	movs	r3, #5
    4284:	e7d2      	b.n	422c <usart_read_buffer_wait+0x14>
    4286:	2312      	movs	r3, #18
    4288:	e7d0      	b.n	422c <usart_read_buffer_wait+0x14>
    428a:	6805      	ldr	r5, [r0, #0]
    428c:	7e2f      	ldrb	r7, [r5, #24]
    428e:	423b      	tst	r3, r7
    4290:	d0f7      	beq.n	4282 <usart_read_buffer_wait+0x6a>
    4292:	69ef      	ldr	r7, [r5, #28]
    4294:	2f00      	cmp	r7, #0
    4296:	d1fc      	bne.n	4292 <usart_read_buffer_wait+0x7a>
    4298:	8b6f      	ldrh	r7, [r5, #26]
    429a:	46ac      	mov	ip, r5
    429c:	253f      	movs	r5, #63	; 0x3f
    429e:	b2ff      	uxtb	r7, r7
    42a0:	423d      	tst	r5, r7
    42a2:	d007      	beq.n	42b4 <usart_read_buffer_wait+0x9c>
    42a4:	465d      	mov	r5, fp
    42a6:	423d      	tst	r5, r7
    42a8:	d01b      	beq.n	42e2 <usart_read_buffer_wait+0xca>
    42aa:	465b      	mov	r3, fp
    42ac:	4665      	mov	r5, ip
    42ae:	836b      	strh	r3, [r5, #26]
    42b0:	231a      	movs	r3, #26
    42b2:	e7bb      	b.n	422c <usart_read_buffer_wait+0x14>
    42b4:	4665      	mov	r5, ip
    42b6:	8d2d      	ldrh	r5, [r5, #40]	; 0x28
    42b8:	1c77      	adds	r7, r6, #1
    42ba:	b2bf      	uxth	r7, r7
    42bc:	b2ad      	uxth	r5, r5
    42be:	9701      	str	r7, [sp, #4]
    42c0:	558d      	strb	r5, [r1, r6]
    42c2:	7947      	ldrb	r7, [r0, #5]
    42c4:	2f01      	cmp	r7, #1
    42c6:	d006      	beq.n	42d6 <usart_read_buffer_wait+0xbe>
    42c8:	9e01      	ldr	r6, [sp, #4]
    42ca:	3a01      	subs	r2, #1
    42cc:	b292      	uxth	r2, r2
    42ce:	4542      	cmp	r2, r8
    42d0:	d1c6      	bne.n	4260 <usart_read_buffer_wait+0x48>
    42d2:	2300      	movs	r3, #0
    42d4:	e7aa      	b.n	422c <usart_read_buffer_wait+0x14>
    42d6:	9f01      	ldr	r7, [sp, #4]
    42d8:	3602      	adds	r6, #2
    42da:	0a2d      	lsrs	r5, r5, #8
    42dc:	b2b6      	uxth	r6, r6
    42de:	55cd      	strb	r5, [r1, r7]
    42e0:	e7f3      	b.n	42ca <usart_read_buffer_wait+0xb2>
    42e2:	423b      	tst	r3, r7
    42e4:	d003      	beq.n	42ee <usart_read_buffer_wait+0xd6>
    42e6:	4665      	mov	r5, ip
    42e8:	836b      	strh	r3, [r5, #26]
    42ea:	231e      	movs	r3, #30
    42ec:	e79e      	b.n	422c <usart_read_buffer_wait+0x14>
    42ee:	4655      	mov	r5, sl
    42f0:	423d      	tst	r5, r7
    42f2:	d004      	beq.n	42fe <usart_read_buffer_wait+0xe6>
    42f4:	4653      	mov	r3, sl
    42f6:	4665      	mov	r5, ip
    42f8:	836b      	strh	r3, [r5, #26]
    42fa:	2313      	movs	r3, #19
    42fc:	e796      	b.n	422c <usart_read_buffer_wait+0x14>
    42fe:	464d      	mov	r5, r9
    4300:	422f      	tst	r7, r5
    4302:	d004      	beq.n	430e <usart_read_buffer_wait+0xf6>
    4304:	464b      	mov	r3, r9
    4306:	4665      	mov	r5, ip
    4308:	836b      	strh	r3, [r5, #26]
    430a:	2342      	movs	r3, #66	; 0x42
    430c:	e78e      	b.n	422c <usart_read_buffer_wait+0x14>
    430e:	2520      	movs	r5, #32
    4310:	422f      	tst	r7, r5
    4312:	d0cf      	beq.n	42b4 <usart_read_buffer_wait+0x9c>
    4314:	2320      	movs	r3, #32
    4316:	4665      	mov	r5, ip
    4318:	836b      	strh	r3, [r5, #26]
    431a:	2341      	movs	r3, #65	; 0x41
    431c:	e786      	b.n	422c <usart_read_buffer_wait+0x14>
    431e:	46c0      	nop			; (mov r8, r8)
    4320:	0000ffff 	.word	0x0000ffff

00004324 <_usart_interrupt_handler>:
    4324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4326:	4b62      	ldr	r3, [pc, #392]	; (44b0 <_usart_interrupt_handler+0x18c>)
    4328:	0080      	lsls	r0, r0, #2
    432a:	58c5      	ldr	r5, [r0, r3]
    432c:	682c      	ldr	r4, [r5, #0]
    432e:	69e3      	ldr	r3, [r4, #28]
    4330:	2b00      	cmp	r3, #0
    4332:	d1fc      	bne.n	432e <_usart_interrupt_handler+0xa>
    4334:	7e23      	ldrb	r3, [r4, #24]
    4336:	7da6      	ldrb	r6, [r4, #22]
    4338:	2231      	movs	r2, #49	; 0x31
    433a:	401e      	ands	r6, r3
    433c:	2330      	movs	r3, #48	; 0x30
    433e:	5caf      	ldrb	r7, [r5, r2]
    4340:	5ceb      	ldrb	r3, [r5, r3]
    4342:	401f      	ands	r7, r3
    4344:	2301      	movs	r3, #1
    4346:	4233      	tst	r3, r6
    4348:	d019      	beq.n	437e <_usart_interrupt_handler+0x5a>
    434a:	8dea      	ldrh	r2, [r5, #46]	; 0x2e
    434c:	2a00      	cmp	r2, #0
    434e:	d04d      	beq.n	43ec <_usart_interrupt_handler+0xc8>
    4350:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    4352:	1c51      	adds	r1, r2, #1
    4354:	7813      	ldrb	r3, [r2, #0]
    4356:	62a9      	str	r1, [r5, #40]	; 0x28
    4358:	7969      	ldrb	r1, [r5, #5]
    435a:	b2db      	uxtb	r3, r3
    435c:	2901      	cmp	r1, #1
    435e:	d100      	bne.n	4362 <_usart_interrupt_handler+0x3e>
    4360:	e075      	b.n	444e <_usart_interrupt_handler+0x12a>
    4362:	b29b      	uxth	r3, r3
    4364:	05db      	lsls	r3, r3, #23
    4366:	0ddb      	lsrs	r3, r3, #23
    4368:	8523      	strh	r3, [r4, #40]	; 0x28
    436a:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    436c:	3b01      	subs	r3, #1
    436e:	b29b      	uxth	r3, r3
    4370:	85eb      	strh	r3, [r5, #46]	; 0x2e
    4372:	2b00      	cmp	r3, #0
    4374:	d103      	bne.n	437e <_usart_interrupt_handler+0x5a>
    4376:	3301      	adds	r3, #1
    4378:	7523      	strb	r3, [r4, #20]
    437a:	3301      	adds	r3, #1
    437c:	75a3      	strb	r3, [r4, #22]
    437e:	2302      	movs	r3, #2
    4380:	4233      	tst	r3, r6
    4382:	d005      	beq.n	4390 <_usart_interrupt_handler+0x6c>
    4384:	2200      	movs	r2, #0
    4386:	7523      	strb	r3, [r4, #20]
    4388:	3331      	adds	r3, #49	; 0x31
    438a:	54ea      	strb	r2, [r5, r3]
    438c:	07fb      	lsls	r3, r7, #31
    438e:	d43b      	bmi.n	4408 <_usart_interrupt_handler+0xe4>
    4390:	2304      	movs	r3, #4
    4392:	4233      	tst	r3, r6
    4394:	d012      	beq.n	43bc <_usart_interrupt_handler+0x98>
    4396:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
    4398:	2a00      	cmp	r2, #0
    439a:	d025      	beq.n	43e8 <_usart_interrupt_handler+0xc4>
    439c:	8b63      	ldrh	r3, [r4, #26]
    439e:	b2db      	uxtb	r3, r3
    43a0:	071a      	lsls	r2, r3, #28
    43a2:	d535      	bpl.n	4410 <_usart_interrupt_handler+0xec>
    43a4:	2237      	movs	r2, #55	; 0x37
    43a6:	4013      	ands	r3, r2
    43a8:	d035      	beq.n	4416 <_usart_interrupt_handler+0xf2>
    43aa:	2202      	movs	r2, #2
    43ac:	421a      	tst	r2, r3
    43ae:	d054      	beq.n	445a <_usart_interrupt_handler+0x136>
    43b0:	211a      	movs	r1, #26
    43b2:	2332      	movs	r3, #50	; 0x32
    43b4:	54e9      	strb	r1, [r5, r3]
    43b6:	8362      	strh	r2, [r4, #26]
    43b8:	077b      	lsls	r3, r7, #29
    43ba:	d459      	bmi.n	4470 <_usart_interrupt_handler+0x14c>
    43bc:	2310      	movs	r3, #16
    43be:	4233      	tst	r3, r6
    43c0:	d003      	beq.n	43ca <_usart_interrupt_handler+0xa6>
    43c2:	7523      	strb	r3, [r4, #20]
    43c4:	7623      	strb	r3, [r4, #24]
    43c6:	423b      	tst	r3, r7
    43c8:	d116      	bne.n	43f8 <_usart_interrupt_handler+0xd4>
    43ca:	2320      	movs	r3, #32
    43cc:	4233      	tst	r3, r6
    43ce:	d003      	beq.n	43d8 <_usart_interrupt_handler+0xb4>
    43d0:	7523      	strb	r3, [r4, #20]
    43d2:	7623      	strb	r3, [r4, #24]
    43d4:	073b      	lsls	r3, r7, #28
    43d6:	d413      	bmi.n	4400 <_usart_interrupt_handler+0xdc>
    43d8:	2308      	movs	r3, #8
    43da:	4233      	tst	r3, r6
    43dc:	d003      	beq.n	43e6 <_usart_interrupt_handler+0xc2>
    43de:	7523      	strb	r3, [r4, #20]
    43e0:	7623      	strb	r3, [r4, #24]
    43e2:	06bb      	lsls	r3, r7, #26
    43e4:	d404      	bmi.n	43f0 <_usart_interrupt_handler+0xcc>
    43e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    43e8:	7523      	strb	r3, [r4, #20]
    43ea:	e7e7      	b.n	43bc <_usart_interrupt_handler+0x98>
    43ec:	7523      	strb	r3, [r4, #20]
    43ee:	e7c6      	b.n	437e <_usart_interrupt_handler+0x5a>
    43f0:	6a2b      	ldr	r3, [r5, #32]
    43f2:	0028      	movs	r0, r5
    43f4:	4798      	blx	r3
    43f6:	e7f6      	b.n	43e6 <_usart_interrupt_handler+0xc2>
    43f8:	0028      	movs	r0, r5
    43fa:	69eb      	ldr	r3, [r5, #28]
    43fc:	4798      	blx	r3
    43fe:	e7e4      	b.n	43ca <_usart_interrupt_handler+0xa6>
    4400:	0028      	movs	r0, r5
    4402:	69ab      	ldr	r3, [r5, #24]
    4404:	4798      	blx	r3
    4406:	e7e7      	b.n	43d8 <_usart_interrupt_handler+0xb4>
    4408:	0028      	movs	r0, r5
    440a:	68eb      	ldr	r3, [r5, #12]
    440c:	4798      	blx	r3
    440e:	e7bf      	b.n	4390 <_usart_interrupt_handler+0x6c>
    4410:	223f      	movs	r2, #63	; 0x3f
    4412:	4013      	ands	r3, r2
    4414:	d1c9      	bne.n	43aa <_usart_interrupt_handler+0x86>
    4416:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    4418:	6a69      	ldr	r1, [r5, #36]	; 0x24
    441a:	05db      	lsls	r3, r3, #23
    441c:	0ddb      	lsrs	r3, r3, #23
    441e:	b2da      	uxtb	r2, r3
    4420:	700a      	strb	r2, [r1, #0]
    4422:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    4424:	1c51      	adds	r1, r2, #1
    4426:	6269      	str	r1, [r5, #36]	; 0x24
    4428:	7969      	ldrb	r1, [r5, #5]
    442a:	2901      	cmp	r1, #1
    442c:	d029      	beq.n	4482 <_usart_interrupt_handler+0x15e>
    442e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    4430:	3b01      	subs	r3, #1
    4432:	b29b      	uxth	r3, r3
    4434:	85ab      	strh	r3, [r5, #44]	; 0x2c
    4436:	2b00      	cmp	r3, #0
    4438:	d1c0      	bne.n	43bc <_usart_interrupt_handler+0x98>
    443a:	2204      	movs	r2, #4
    443c:	7522      	strb	r2, [r4, #20]
    443e:	322e      	adds	r2, #46	; 0x2e
    4440:	54ab      	strb	r3, [r5, r2]
    4442:	07bb      	lsls	r3, r7, #30
    4444:	d5ba      	bpl.n	43bc <_usart_interrupt_handler+0x98>
    4446:	0028      	movs	r0, r5
    4448:	692b      	ldr	r3, [r5, #16]
    444a:	4798      	blx	r3
    444c:	e7b6      	b.n	43bc <_usart_interrupt_handler+0x98>
    444e:	7851      	ldrb	r1, [r2, #1]
    4450:	3202      	adds	r2, #2
    4452:	0209      	lsls	r1, r1, #8
    4454:	430b      	orrs	r3, r1
    4456:	62aa      	str	r2, [r5, #40]	; 0x28
    4458:	e784      	b.n	4364 <_usart_interrupt_handler+0x40>
    445a:	2204      	movs	r2, #4
    445c:	421a      	tst	r2, r3
    445e:	d10b      	bne.n	4478 <_usart_interrupt_handler+0x154>
    4460:	2201      	movs	r2, #1
    4462:	421a      	tst	r2, r3
    4464:	d013      	beq.n	448e <_usart_interrupt_handler+0x16a>
    4466:	2113      	movs	r1, #19
    4468:	2332      	movs	r3, #50	; 0x32
    446a:	54e9      	strb	r1, [r5, r3]
    446c:	8362      	strh	r2, [r4, #26]
    446e:	e7a3      	b.n	43b8 <_usart_interrupt_handler+0x94>
    4470:	0028      	movs	r0, r5
    4472:	696b      	ldr	r3, [r5, #20]
    4474:	4798      	blx	r3
    4476:	e7a1      	b.n	43bc <_usart_interrupt_handler+0x98>
    4478:	211e      	movs	r1, #30
    447a:	2332      	movs	r3, #50	; 0x32
    447c:	54e9      	strb	r1, [r5, r3]
    447e:	8362      	strh	r2, [r4, #26]
    4480:	e79a      	b.n	43b8 <_usart_interrupt_handler+0x94>
    4482:	0a1b      	lsrs	r3, r3, #8
    4484:	7053      	strb	r3, [r2, #1]
    4486:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4488:	3301      	adds	r3, #1
    448a:	626b      	str	r3, [r5, #36]	; 0x24
    448c:	e7cf      	b.n	442e <_usart_interrupt_handler+0x10a>
    448e:	2210      	movs	r2, #16
    4490:	421a      	tst	r2, r3
    4492:	d004      	beq.n	449e <_usart_interrupt_handler+0x17a>
    4494:	2142      	movs	r1, #66	; 0x42
    4496:	2332      	movs	r3, #50	; 0x32
    4498:	54e9      	strb	r1, [r5, r3]
    449a:	8362      	strh	r2, [r4, #26]
    449c:	e78c      	b.n	43b8 <_usart_interrupt_handler+0x94>
    449e:	2220      	movs	r2, #32
    44a0:	421a      	tst	r2, r3
    44a2:	d100      	bne.n	44a6 <_usart_interrupt_handler+0x182>
    44a4:	e788      	b.n	43b8 <_usart_interrupt_handler+0x94>
    44a6:	2141      	movs	r1, #65	; 0x41
    44a8:	2332      	movs	r3, #50	; 0x32
    44aa:	54e9      	strb	r1, [r5, r3]
    44ac:	8362      	strh	r2, [r4, #26]
    44ae:	e783      	b.n	43b8 <_usart_interrupt_handler+0x94>
    44b0:	20000abc 	.word	0x20000abc

000044b4 <system_clock_source_get_hz>:
    44b4:	b510      	push	{r4, lr}
    44b6:	2808      	cmp	r0, #8
    44b8:	d82d      	bhi.n	4516 <system_clock_source_get_hz+0x62>
    44ba:	4b1c      	ldr	r3, [pc, #112]	; (452c <system_clock_source_get_hz+0x78>)
    44bc:	0080      	lsls	r0, r0, #2
    44be:	581b      	ldr	r3, [r3, r0]
    44c0:	469f      	mov	pc, r3
    44c2:	2080      	movs	r0, #128	; 0x80
    44c4:	0200      	lsls	r0, r0, #8
    44c6:	bd10      	pop	{r4, pc}
    44c8:	4b19      	ldr	r3, [pc, #100]	; (4530 <system_clock_source_get_hz+0x7c>)
    44ca:	6958      	ldr	r0, [r3, #20]
    44cc:	e7fb      	b.n	44c6 <system_clock_source_get_hz+0x12>
    44ce:	4b19      	ldr	r3, [pc, #100]	; (4534 <system_clock_source_get_hz+0x80>)
    44d0:	7d18      	ldrb	r0, [r3, #20]
    44d2:	0700      	lsls	r0, r0, #28
    44d4:	0f80      	lsrs	r0, r0, #30
    44d6:	1c43      	adds	r3, r0, #1
    44d8:	4817      	ldr	r0, [pc, #92]	; (4538 <system_clock_source_get_hz+0x84>)
    44da:	4358      	muls	r0, r3
    44dc:	e7f3      	b.n	44c6 <system_clock_source_get_hz+0x12>
    44de:	4c14      	ldr	r4, [pc, #80]	; (4530 <system_clock_source_get_hz+0x7c>)
    44e0:	2000      	movs	r0, #0
    44e2:	6823      	ldr	r3, [r4, #0]
    44e4:	079b      	lsls	r3, r3, #30
    44e6:	d5ee      	bpl.n	44c6 <system_clock_source_get_hz+0x12>
    44e8:	2280      	movs	r2, #128	; 0x80
    44ea:	4912      	ldr	r1, [pc, #72]	; (4534 <system_clock_source_get_hz+0x80>)
    44ec:	0052      	lsls	r2, r2, #1
    44ee:	68cb      	ldr	r3, [r1, #12]
    44f0:	4213      	tst	r3, r2
    44f2:	d0fc      	beq.n	44ee <system_clock_source_get_hz+0x3a>
    44f4:	6823      	ldr	r3, [r4, #0]
    44f6:	075b      	lsls	r3, r3, #29
    44f8:	d40f      	bmi.n	451a <system_clock_source_get_hz+0x66>
    44fa:	4810      	ldr	r0, [pc, #64]	; (453c <system_clock_source_get_hz+0x88>)
    44fc:	e7e3      	b.n	44c6 <system_clock_source_get_hz+0x12>
    44fe:	4b0c      	ldr	r3, [pc, #48]	; (4530 <system_clock_source_get_hz+0x7c>)
    4500:	6918      	ldr	r0, [r3, #16]
    4502:	e7e0      	b.n	44c6 <system_clock_source_get_hz+0x12>
    4504:	2328      	movs	r3, #40	; 0x28
    4506:	4a0b      	ldr	r2, [pc, #44]	; (4534 <system_clock_source_get_hz+0x80>)
    4508:	2000      	movs	r0, #0
    450a:	5cd3      	ldrb	r3, [r2, r3]
    450c:	079b      	lsls	r3, r3, #30
    450e:	d5da      	bpl.n	44c6 <system_clock_source_get_hz+0x12>
    4510:	4b07      	ldr	r3, [pc, #28]	; (4530 <system_clock_source_get_hz+0x7c>)
    4512:	68d8      	ldr	r0, [r3, #12]
    4514:	e7d7      	b.n	44c6 <system_clock_source_get_hz+0x12>
    4516:	2000      	movs	r0, #0
    4518:	e7d5      	b.n	44c6 <system_clock_source_get_hz+0x12>
    451a:	4b09      	ldr	r3, [pc, #36]	; (4540 <system_clock_source_get_hz+0x8c>)
    451c:	2000      	movs	r0, #0
    451e:	4798      	blx	r3
    4520:	68a3      	ldr	r3, [r4, #8]
    4522:	041b      	lsls	r3, r3, #16
    4524:	0c1b      	lsrs	r3, r3, #16
    4526:	4358      	muls	r0, r3
    4528:	e7cd      	b.n	44c6 <system_clock_source_get_hz+0x12>
    452a:	46c0      	nop			; (mov r8, r8)
    452c:	00008edc 	.word	0x00008edc
    4530:	20000188 	.word	0x20000188
    4534:	40000c00 	.word	0x40000c00
    4538:	003d0900 	.word	0x003d0900
    453c:	02dc6c00 	.word	0x02dc6c00
    4540:	000048a9 	.word	0x000048a9

00004544 <system_clock_init>:
    4544:	b5f0      	push	{r4, r5, r6, r7, lr}
    4546:	2280      	movs	r2, #128	; 0x80
    4548:	46d6      	mov	lr, sl
    454a:	464f      	mov	r7, r9
    454c:	4646      	mov	r6, r8
    454e:	211e      	movs	r1, #30
    4550:	4b4c      	ldr	r3, [pc, #304]	; (4684 <system_clock_init+0x140>)
    4552:	b5c0      	push	{r6, r7, lr}
    4554:	0052      	lsls	r2, r2, #1
    4556:	609a      	str	r2, [r3, #8]
    4558:	4b4b      	ldr	r3, [pc, #300]	; (4688 <system_clock_init+0x144>)
    455a:	3afd      	subs	r2, #253	; 0xfd
    455c:	609a      	str	r2, [r3, #8]
    455e:	4a4b      	ldr	r2, [pc, #300]	; (468c <system_clock_init+0x148>)
    4560:	b084      	sub	sp, #16
    4562:	6853      	ldr	r3, [r2, #4]
    4564:	438b      	bics	r3, r1
    4566:	6053      	str	r3, [r2, #4]
    4568:	2280      	movs	r2, #128	; 0x80
    456a:	05d2      	lsls	r2, r2, #23
    456c:	7893      	ldrb	r3, [r2, #2]
    456e:	2b02      	cmp	r3, #2
    4570:	d006      	beq.n	4580 <system_clock_init+0x3c>
    4572:	2301      	movs	r3, #1
    4574:	7193      	strb	r3, [r2, #6]
    4576:	3301      	adds	r3, #1
    4578:	7093      	strb	r3, [r2, #2]
    457a:	7993      	ldrb	r3, [r2, #6]
    457c:	2b00      	cmp	r3, #0
    457e:	d0fc      	beq.n	457a <system_clock_init+0x36>
    4580:	210c      	movs	r1, #12
    4582:	4a43      	ldr	r2, [pc, #268]	; (4690 <system_clock_init+0x14c>)
    4584:	2640      	movs	r6, #64	; 0x40
    4586:	6993      	ldr	r3, [r2, #24]
    4588:	ac01      	add	r4, sp, #4
    458a:	430b      	orrs	r3, r1
    458c:	21f0      	movs	r1, #240	; 0xf0
    458e:	43b3      	bics	r3, r6
    4590:	00c9      	lsls	r1, r1, #3
    4592:	430b      	orrs	r3, r1
    4594:	493f      	ldr	r1, [pc, #252]	; (4694 <system_clock_init+0x150>)
    4596:	2000      	movs	r0, #0
    4598:	400b      	ands	r3, r1
    459a:	2102      	movs	r1, #2
    459c:	6193      	str	r3, [r2, #24]
    459e:	6993      	ldr	r3, [r2, #24]
    45a0:	4688      	mov	r8, r1
    45a2:	430b      	orrs	r3, r1
    45a4:	6193      	str	r3, [r2, #24]
    45a6:	2301      	movs	r3, #1
    45a8:	6063      	str	r3, [r4, #4]
    45aa:	2300      	movs	r3, #0
    45ac:	0021      	movs	r1, r4
    45ae:	7063      	strb	r3, [r4, #1]
    45b0:	7223      	strb	r3, [r4, #8]
    45b2:	7263      	strb	r3, [r4, #9]
    45b4:	4f38      	ldr	r7, [pc, #224]	; (4698 <system_clock_init+0x154>)
    45b6:	3303      	adds	r3, #3
    45b8:	7023      	strb	r3, [r4, #0]
    45ba:	47b8      	blx	r7
    45bc:	4642      	mov	r2, r8
    45be:	4d31      	ldr	r5, [pc, #196]	; (4684 <system_clock_init+0x140>)
    45c0:	7d2b      	ldrb	r3, [r5, #20]
    45c2:	4393      	bics	r3, r2
    45c4:	752b      	strb	r3, [r5, #20]
    45c6:	7d2b      	ldrb	r3, [r5, #20]
    45c8:	320a      	adds	r2, #10
    45ca:	4393      	bics	r3, r2
    45cc:	2204      	movs	r2, #4
    45ce:	4313      	orrs	r3, r2
    45d0:	227f      	movs	r2, #127	; 0x7f
    45d2:	43b3      	bics	r3, r6
    45d4:	4013      	ands	r3, r2
    45d6:	752b      	strb	r3, [r5, #20]
    45d8:	7d2b      	ldrb	r3, [r5, #20]
    45da:	3a7d      	subs	r2, #125	; 0x7d
    45dc:	4313      	orrs	r3, r2
    45de:	752b      	strb	r3, [r5, #20]
    45e0:	320e      	adds	r2, #14
    45e2:	68eb      	ldr	r3, [r5, #12]
    45e4:	421a      	tst	r2, r3
    45e6:	d0fc      	beq.n	45e2 <system_clock_init+0x9e>
    45e8:	2301      	movs	r3, #1
    45ea:	2600      	movs	r6, #0
    45ec:	4698      	mov	r8, r3
    45ee:	0021      	movs	r1, r4
    45f0:	2000      	movs	r0, #0
    45f2:	6063      	str	r3, [r4, #4]
    45f4:	3305      	adds	r3, #5
    45f6:	4699      	mov	r9, r3
    45f8:	7023      	strb	r3, [r4, #0]
    45fa:	7066      	strb	r6, [r4, #1]
    45fc:	7226      	strb	r6, [r4, #8]
    45fe:	7266      	strb	r6, [r4, #9]
    4600:	47b8      	blx	r7
    4602:	2280      	movs	r2, #128	; 0x80
    4604:	7d2b      	ldrb	r3, [r5, #20]
    4606:	4313      	orrs	r3, r2
    4608:	752b      	strb	r3, [r5, #20]
    460a:	4b24      	ldr	r3, [pc, #144]	; (469c <system_clock_init+0x158>)
    460c:	4798      	blx	r3
    460e:	4643      	mov	r3, r8
    4610:	0021      	movs	r1, r4
    4612:	6063      	str	r3, [r4, #4]
    4614:	2001      	movs	r0, #1
    4616:	3303      	adds	r3, #3
    4618:	7023      	strb	r3, [r4, #0]
    461a:	7066      	strb	r6, [r4, #1]
    461c:	7226      	strb	r6, [r4, #8]
    461e:	7266      	strb	r6, [r4, #9]
    4620:	47b8      	blx	r7
    4622:	4b1f      	ldr	r3, [pc, #124]	; (46a0 <system_clock_init+0x15c>)
    4624:	2001      	movs	r0, #1
    4626:	469a      	mov	sl, r3
    4628:	4798      	blx	r3
    462a:	4643      	mov	r3, r8
    462c:	4d1d      	ldr	r5, [pc, #116]	; (46a4 <system_clock_init+0x160>)
    462e:	0021      	movs	r1, r4
    4630:	71ab      	strb	r3, [r5, #6]
    4632:	716b      	strb	r3, [r5, #5]
    4634:	712b      	strb	r3, [r5, #4]
    4636:	4643      	mov	r3, r8
    4638:	6063      	str	r3, [r4, #4]
    463a:	464b      	mov	r3, r9
    463c:	2000      	movs	r0, #0
    463e:	7023      	strb	r3, [r4, #0]
    4640:	7066      	strb	r6, [r4, #1]
    4642:	7226      	strb	r6, [r4, #8]
    4644:	7266      	strb	r6, [r4, #9]
    4646:	47b8      	blx	r7
    4648:	2000      	movs	r0, #0
    464a:	47d0      	blx	sl
    464c:	4b16      	ldr	r3, [pc, #88]	; (46a8 <system_clock_init+0x164>)
    464e:	2000      	movs	r0, #0
    4650:	4798      	blx	r3
    4652:	7929      	ldrb	r1, [r5, #4]
    4654:	4b15      	ldr	r3, [pc, #84]	; (46ac <system_clock_init+0x168>)
    4656:	b2c9      	uxtb	r1, r1
    4658:	4798      	blx	r3
    465a:	4b15      	ldr	r3, [pc, #84]	; (46b0 <system_clock_init+0x16c>)
    465c:	4298      	cmp	r0, r3
    465e:	d804      	bhi.n	466a <system_clock_init+0x126>
    4660:	2280      	movs	r2, #128	; 0x80
    4662:	05d2      	lsls	r2, r2, #23
    4664:	7893      	ldrb	r3, [r2, #2]
    4666:	2b00      	cmp	r3, #0
    4668:	d105      	bne.n	4676 <system_clock_init+0x132>
    466a:	b004      	add	sp, #16
    466c:	bc1c      	pop	{r2, r3, r4}
    466e:	4690      	mov	r8, r2
    4670:	4699      	mov	r9, r3
    4672:	46a2      	mov	sl, r4
    4674:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4676:	4643      	mov	r3, r8
    4678:	7193      	strb	r3, [r2, #6]
    467a:	7096      	strb	r6, [r2, #2]
    467c:	7993      	ldrb	r3, [r2, #6]
    467e:	2b00      	cmp	r3, #0
    4680:	d0fc      	beq.n	467c <system_clock_init+0x138>
    4682:	e7f2      	b.n	466a <system_clock_init+0x126>
    4684:	40000c00 	.word	0x40000c00
    4688:	40001400 	.word	0x40001400
    468c:	41004000 	.word	0x41004000
    4690:	40001000 	.word	0x40001000
    4694:	ffffefff 	.word	0xffffefff
    4698:	000046d9 	.word	0x000046d9
    469c:	000046b5 	.word	0x000046b5
    46a0:	00004785 	.word	0x00004785
    46a4:	40000400 	.word	0x40000400
    46a8:	000047c5 	.word	0x000047c5
    46ac:	00005fd9 	.word	0x00005fd9
    46b0:	00b71b00 	.word	0x00b71b00

000046b4 <system_gclk_init>:
    46b4:	2140      	movs	r1, #64	; 0x40
    46b6:	4a06      	ldr	r2, [pc, #24]	; (46d0 <system_gclk_init+0x1c>)
    46b8:	6953      	ldr	r3, [r2, #20]
    46ba:	430b      	orrs	r3, r1
    46bc:	6153      	str	r3, [r2, #20]
    46be:	2301      	movs	r3, #1
    46c0:	4a04      	ldr	r2, [pc, #16]	; (46d4 <system_gclk_init+0x20>)
    46c2:	393f      	subs	r1, #63	; 0x3f
    46c4:	7013      	strb	r3, [r2, #0]
    46c6:	7813      	ldrb	r3, [r2, #0]
    46c8:	4219      	tst	r1, r3
    46ca:	d1fc      	bne.n	46c6 <system_gclk_init+0x12>
    46cc:	4770      	bx	lr
    46ce:	46c0      	nop			; (mov r8, r8)
    46d0:	40000400 	.word	0x40000400
    46d4:	40001800 	.word	0x40001800

000046d8 <system_gclk_gen_set_config>:
    46d8:	b570      	push	{r4, r5, r6, lr}
    46da:	784b      	ldrb	r3, [r1, #1]
    46dc:	0004      	movs	r4, r0
    46de:	780d      	ldrb	r5, [r1, #0]
    46e0:	2b00      	cmp	r3, #0
    46e2:	d002      	beq.n	46ea <system_gclk_gen_set_config+0x12>
    46e4:	2380      	movs	r3, #128	; 0x80
    46e6:	00db      	lsls	r3, r3, #3
    46e8:	431d      	orrs	r5, r3
    46ea:	7a4b      	ldrb	r3, [r1, #9]
    46ec:	2b00      	cmp	r3, #0
    46ee:	d002      	beq.n	46f6 <system_gclk_gen_set_config+0x1e>
    46f0:	2380      	movs	r3, #128	; 0x80
    46f2:	011b      	lsls	r3, r3, #4
    46f4:	431d      	orrs	r5, r3
    46f6:	6848      	ldr	r0, [r1, #4]
    46f8:	2801      	cmp	r0, #1
    46fa:	d90f      	bls.n	471c <system_gclk_gen_set_config+0x44>
    46fc:	1e43      	subs	r3, r0, #1
    46fe:	4218      	tst	r0, r3
    4700:	d12f      	bne.n	4762 <system_gclk_gen_set_config+0x8a>
    4702:	2802      	cmp	r0, #2
    4704:	d033      	beq.n	476e <system_gclk_gen_set_config+0x96>
    4706:	2302      	movs	r3, #2
    4708:	2200      	movs	r2, #0
    470a:	3201      	adds	r2, #1
    470c:	005b      	lsls	r3, r3, #1
    470e:	4298      	cmp	r0, r3
    4710:	d8fb      	bhi.n	470a <system_gclk_gen_set_config+0x32>
    4712:	0412      	lsls	r2, r2, #16
    4714:	2380      	movs	r3, #128	; 0x80
    4716:	015b      	lsls	r3, r3, #5
    4718:	431d      	orrs	r5, r3
    471a:	4315      	orrs	r5, r2
    471c:	7a0b      	ldrb	r3, [r1, #8]
    471e:	2b00      	cmp	r3, #0
    4720:	d002      	beq.n	4728 <system_gclk_gen_set_config+0x50>
    4722:	2380      	movs	r3, #128	; 0x80
    4724:	019b      	lsls	r3, r3, #6
    4726:	431d      	orrs	r5, r3
    4728:	2604      	movs	r6, #4
    472a:	40a6      	lsls	r6, r4
    472c:	4911      	ldr	r1, [pc, #68]	; (4774 <system_gclk_gen_set_config+0x9c>)
    472e:	4a12      	ldr	r2, [pc, #72]	; (4778 <system_gclk_gen_set_config+0xa0>)
    4730:	684b      	ldr	r3, [r1, #4]
    4732:	4013      	ands	r3, r2
    4734:	421e      	tst	r6, r3
    4736:	d1fb      	bne.n	4730 <system_gclk_gen_set_config+0x58>
    4738:	4b10      	ldr	r3, [pc, #64]	; (477c <system_gclk_gen_set_config+0xa4>)
    473a:	4798      	blx	r3
    473c:	4b0d      	ldr	r3, [pc, #52]	; (4774 <system_gclk_gen_set_config+0x9c>)
    473e:	2280      	movs	r2, #128	; 0x80
    4740:	469c      	mov	ip, r3
    4742:	4661      	mov	r1, ip
    4744:	00a4      	lsls	r4, r4, #2
    4746:	4464      	add	r4, ip
    4748:	6a23      	ldr	r3, [r4, #32]
    474a:	0052      	lsls	r2, r2, #1
    474c:	4013      	ands	r3, r2
    474e:	431d      	orrs	r5, r3
    4750:	4a09      	ldr	r2, [pc, #36]	; (4778 <system_gclk_gen_set_config+0xa0>)
    4752:	6225      	str	r5, [r4, #32]
    4754:	684b      	ldr	r3, [r1, #4]
    4756:	4013      	ands	r3, r2
    4758:	421e      	tst	r6, r3
    475a:	d1fb      	bne.n	4754 <system_gclk_gen_set_config+0x7c>
    475c:	4b08      	ldr	r3, [pc, #32]	; (4780 <system_gclk_gen_set_config+0xa8>)
    475e:	4798      	blx	r3
    4760:	bd70      	pop	{r4, r5, r6, pc}
    4762:	2380      	movs	r3, #128	; 0x80
    4764:	0400      	lsls	r0, r0, #16
    4766:	009b      	lsls	r3, r3, #2
    4768:	4318      	orrs	r0, r3
    476a:	4305      	orrs	r5, r0
    476c:	e7d6      	b.n	471c <system_gclk_gen_set_config+0x44>
    476e:	2200      	movs	r2, #0
    4770:	e7d0      	b.n	4714 <system_gclk_gen_set_config+0x3c>
    4772:	46c0      	nop			; (mov r8, r8)
    4774:	40001800 	.word	0x40001800
    4778:	000007fc 	.word	0x000007fc
    477c:	00003111 	.word	0x00003111
    4780:	0000314d 	.word	0x0000314d

00004784 <system_gclk_gen_enable>:
    4784:	2204      	movs	r2, #4
    4786:	b510      	push	{r4, lr}
    4788:	4082      	lsls	r2, r0
    478a:	0004      	movs	r4, r0
    478c:	4909      	ldr	r1, [pc, #36]	; (47b4 <system_gclk_gen_enable+0x30>)
    478e:	480a      	ldr	r0, [pc, #40]	; (47b8 <system_gclk_gen_enable+0x34>)
    4790:	6843      	ldr	r3, [r0, #4]
    4792:	400b      	ands	r3, r1
    4794:	421a      	tst	r2, r3
    4796:	d1fb      	bne.n	4790 <system_gclk_gen_enable+0xc>
    4798:	4b08      	ldr	r3, [pc, #32]	; (47bc <system_gclk_gen_enable+0x38>)
    479a:	4798      	blx	r3
    479c:	4b06      	ldr	r3, [pc, #24]	; (47b8 <system_gclk_gen_enable+0x34>)
    479e:	00a0      	lsls	r0, r4, #2
    47a0:	469c      	mov	ip, r3
    47a2:	2380      	movs	r3, #128	; 0x80
    47a4:	4460      	add	r0, ip
    47a6:	6a02      	ldr	r2, [r0, #32]
    47a8:	005b      	lsls	r3, r3, #1
    47aa:	4313      	orrs	r3, r2
    47ac:	6203      	str	r3, [r0, #32]
    47ae:	4b04      	ldr	r3, [pc, #16]	; (47c0 <system_gclk_gen_enable+0x3c>)
    47b0:	4798      	blx	r3
    47b2:	bd10      	pop	{r4, pc}
    47b4:	000007fc 	.word	0x000007fc
    47b8:	40001800 	.word	0x40001800
    47bc:	00003111 	.word	0x00003111
    47c0:	0000314d 	.word	0x0000314d

000047c4 <system_gclk_gen_get_hz>:
    47c4:	2204      	movs	r2, #4
    47c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    47c8:	4082      	lsls	r2, r0
    47ca:	0004      	movs	r4, r0
    47cc:	4e12      	ldr	r6, [pc, #72]	; (4818 <system_gclk_gen_get_hz+0x54>)
    47ce:	4913      	ldr	r1, [pc, #76]	; (481c <system_gclk_gen_get_hz+0x58>)
    47d0:	6873      	ldr	r3, [r6, #4]
    47d2:	400b      	ands	r3, r1
    47d4:	421a      	tst	r2, r3
    47d6:	d1fb      	bne.n	47d0 <system_gclk_gen_get_hz+0xc>
    47d8:	3408      	adds	r4, #8
    47da:	00a4      	lsls	r4, r4, #2
    47dc:	4b10      	ldr	r3, [pc, #64]	; (4820 <system_gclk_gen_get_hz+0x5c>)
    47de:	4798      	blx	r3
    47e0:	59a0      	ldr	r0, [r4, r6]
    47e2:	4b10      	ldr	r3, [pc, #64]	; (4824 <system_gclk_gen_get_hz+0x60>)
    47e4:	0700      	lsls	r0, r0, #28
    47e6:	0f00      	lsrs	r0, r0, #28
    47e8:	4798      	blx	r3
    47ea:	59a5      	ldr	r5, [r4, r6]
    47ec:	59a4      	ldr	r4, [r4, r6]
    47ee:	04ed      	lsls	r5, r5, #19
    47f0:	4b0d      	ldr	r3, [pc, #52]	; (4828 <system_gclk_gen_get_hz+0x64>)
    47f2:	0fed      	lsrs	r5, r5, #31
    47f4:	0007      	movs	r7, r0
    47f6:	0c24      	lsrs	r4, r4, #16
    47f8:	4798      	blx	r3
    47fa:	2d00      	cmp	r5, #0
    47fc:	d003      	beq.n	4806 <system_gclk_gen_get_hz+0x42>
    47fe:	3401      	adds	r4, #1
    4800:	40e7      	lsrs	r7, r4
    4802:	0038      	movs	r0, r7
    4804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4806:	2c01      	cmp	r4, #1
    4808:	d9fb      	bls.n	4802 <system_gclk_gen_get_hz+0x3e>
    480a:	0038      	movs	r0, r7
    480c:	0021      	movs	r1, r4
    480e:	4b07      	ldr	r3, [pc, #28]	; (482c <system_gclk_gen_get_hz+0x68>)
    4810:	4798      	blx	r3
    4812:	0007      	movs	r7, r0
    4814:	e7f5      	b.n	4802 <system_gclk_gen_get_hz+0x3e>
    4816:	46c0      	nop			; (mov r8, r8)
    4818:	40001800 	.word	0x40001800
    481c:	000007fc 	.word	0x000007fc
    4820:	00003111 	.word	0x00003111
    4824:	000044b5 	.word	0x000044b5
    4828:	0000314d 	.word	0x0000314d
    482c:	00005fd9 	.word	0x00005fd9

00004830 <system_gclk_chan_set_config>:
    4830:	b570      	push	{r4, r5, r6, lr}
    4832:	4b0c      	ldr	r3, [pc, #48]	; (4864 <system_gclk_chan_set_config+0x34>)
    4834:	0004      	movs	r4, r0
    4836:	000e      	movs	r6, r1
    4838:	4798      	blx	r3
    483a:	4b0b      	ldr	r3, [pc, #44]	; (4868 <system_gclk_chan_set_config+0x38>)
    483c:	2280      	movs	r2, #128	; 0x80
    483e:	469c      	mov	ip, r3
    4840:	2140      	movs	r1, #64	; 0x40
    4842:	2580      	movs	r5, #128	; 0x80
    4844:	00a4      	lsls	r4, r4, #2
    4846:	4464      	add	r4, ip
    4848:	58a3      	ldr	r3, [r4, r2]
    484a:	438b      	bics	r3, r1
    484c:	50a3      	str	r3, [r4, r2]
    484e:	3a40      	subs	r2, #64	; 0x40
    4850:	5963      	ldr	r3, [r4, r5]
    4852:	421a      	tst	r2, r3
    4854:	d1fc      	bne.n	4850 <system_gclk_chan_set_config+0x20>
    4856:	4b05      	ldr	r3, [pc, #20]	; (486c <system_gclk_chan_set_config+0x3c>)
    4858:	4798      	blx	r3
    485a:	230f      	movs	r3, #15
    485c:	7832      	ldrb	r2, [r6, #0]
    485e:	4013      	ands	r3, r2
    4860:	5163      	str	r3, [r4, r5]
    4862:	bd70      	pop	{r4, r5, r6, pc}
    4864:	00003111 	.word	0x00003111
    4868:	40001800 	.word	0x40001800
    486c:	0000314d 	.word	0x0000314d

00004870 <system_gclk_chan_enable>:
    4870:	b510      	push	{r4, lr}
    4872:	4b0a      	ldr	r3, [pc, #40]	; (489c <system_gclk_chan_enable+0x2c>)
    4874:	0004      	movs	r4, r0
    4876:	4798      	blx	r3
    4878:	4b09      	ldr	r3, [pc, #36]	; (48a0 <system_gclk_chan_enable+0x30>)
    487a:	2280      	movs	r2, #128	; 0x80
    487c:	469c      	mov	ip, r3
    487e:	2140      	movs	r1, #64	; 0x40
    4880:	00a0      	lsls	r0, r4, #2
    4882:	4460      	add	r0, ip
    4884:	5883      	ldr	r3, [r0, r2]
    4886:	430b      	orrs	r3, r1
    4888:	5083      	str	r3, [r0, r2]
    488a:	3140      	adds	r1, #64	; 0x40
    488c:	3a40      	subs	r2, #64	; 0x40
    488e:	5843      	ldr	r3, [r0, r1]
    4890:	421a      	tst	r2, r3
    4892:	d0fc      	beq.n	488e <system_gclk_chan_enable+0x1e>
    4894:	4b03      	ldr	r3, [pc, #12]	; (48a4 <system_gclk_chan_enable+0x34>)
    4896:	4798      	blx	r3
    4898:	bd10      	pop	{r4, pc}
    489a:	46c0      	nop			; (mov r8, r8)
    489c:	00003111 	.word	0x00003111
    48a0:	40001800 	.word	0x40001800
    48a4:	0000314d 	.word	0x0000314d

000048a8 <system_gclk_chan_get_hz>:
    48a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    48aa:	46c6      	mov	lr, r8
    48ac:	0004      	movs	r4, r0
    48ae:	b500      	push	{lr}
    48b0:	4e18      	ldr	r6, [pc, #96]	; (4914 <system_gclk_chan_get_hz+0x6c>)
    48b2:	4d19      	ldr	r5, [pc, #100]	; (4918 <system_gclk_chan_get_hz+0x70>)
    48b4:	3420      	adds	r4, #32
    48b6:	47b0      	blx	r6
    48b8:	00a4      	lsls	r4, r4, #2
    48ba:	4f18      	ldr	r7, [pc, #96]	; (491c <system_gclk_chan_get_hz+0x74>)
    48bc:	5964      	ldr	r4, [r4, r5]
    48be:	47b8      	blx	r7
    48c0:	2204      	movs	r2, #4
    48c2:	0724      	lsls	r4, r4, #28
    48c4:	0f24      	lsrs	r4, r4, #28
    48c6:	40a2      	lsls	r2, r4
    48c8:	4915      	ldr	r1, [pc, #84]	; (4920 <system_gclk_chan_get_hz+0x78>)
    48ca:	686b      	ldr	r3, [r5, #4]
    48cc:	400b      	ands	r3, r1
    48ce:	421a      	tst	r2, r3
    48d0:	d1fb      	bne.n	48ca <system_gclk_chan_get_hz+0x22>
    48d2:	3408      	adds	r4, #8
    48d4:	00a4      	lsls	r4, r4, #2
    48d6:	47b0      	blx	r6
    48d8:	5960      	ldr	r0, [r4, r5]
    48da:	4b12      	ldr	r3, [pc, #72]	; (4924 <system_gclk_chan_get_hz+0x7c>)
    48dc:	0700      	lsls	r0, r0, #28
    48de:	0f00      	lsrs	r0, r0, #28
    48e0:	4798      	blx	r3
    48e2:	5966      	ldr	r6, [r4, r5]
    48e4:	5964      	ldr	r4, [r4, r5]
    48e6:	04f6      	lsls	r6, r6, #19
    48e8:	0ff6      	lsrs	r6, r6, #31
    48ea:	4680      	mov	r8, r0
    48ec:	0c24      	lsrs	r4, r4, #16
    48ee:	47b8      	blx	r7
    48f0:	2e00      	cmp	r6, #0
    48f2:	d007      	beq.n	4904 <system_gclk_chan_get_hz+0x5c>
    48f4:	4643      	mov	r3, r8
    48f6:	3401      	adds	r4, #1
    48f8:	40e3      	lsrs	r3, r4
    48fa:	4698      	mov	r8, r3
    48fc:	4640      	mov	r0, r8
    48fe:	bc04      	pop	{r2}
    4900:	4690      	mov	r8, r2
    4902:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4904:	2c01      	cmp	r4, #1
    4906:	d9f9      	bls.n	48fc <system_gclk_chan_get_hz+0x54>
    4908:	4640      	mov	r0, r8
    490a:	0021      	movs	r1, r4
    490c:	4b06      	ldr	r3, [pc, #24]	; (4928 <system_gclk_chan_get_hz+0x80>)
    490e:	4798      	blx	r3
    4910:	4680      	mov	r8, r0
    4912:	e7f3      	b.n	48fc <system_gclk_chan_get_hz+0x54>
    4914:	00003111 	.word	0x00003111
    4918:	40001800 	.word	0x40001800
    491c:	0000314d 	.word	0x0000314d
    4920:	000007fc 	.word	0x000007fc
    4924:	000044b5 	.word	0x000044b5
    4928:	00005fd9 	.word	0x00005fd9

0000492c <system_pinmux_pin_set_config>:
    492c:	b570      	push	{r4, r5, r6, lr}
    492e:	09c2      	lsrs	r2, r0, #7
    4930:	2300      	movs	r3, #0
    4932:	2a00      	cmp	r2, #0
    4934:	d104      	bne.n	4940 <system_pinmux_pin_set_config+0x14>
    4936:	4a2f      	ldr	r2, [pc, #188]	; (49f4 <system_pinmux_pin_set_config+0xc8>)
    4938:	0943      	lsrs	r3, r0, #5
    493a:	4694      	mov	ip, r2
    493c:	01db      	lsls	r3, r3, #7
    493e:	4463      	add	r3, ip
    4940:	221f      	movs	r2, #31
    4942:	4010      	ands	r0, r2
    4944:	3a1e      	subs	r2, #30
    4946:	4082      	lsls	r2, r0
    4948:	78c8      	ldrb	r0, [r1, #3]
    494a:	2800      	cmp	r0, #0
    494c:	d131      	bne.n	49b2 <system_pinmux_pin_set_config+0x86>
    494e:	7808      	ldrb	r0, [r1, #0]
    4950:	2880      	cmp	r0, #128	; 0x80
    4952:	d047      	beq.n	49e4 <system_pinmux_pin_set_config+0xb8>
    4954:	2480      	movs	r4, #128	; 0x80
    4956:	0600      	lsls	r0, r0, #24
    4958:	0264      	lsls	r4, r4, #9
    495a:	4320      	orrs	r0, r4
    495c:	784c      	ldrb	r4, [r1, #1]
    495e:	2502      	movs	r5, #2
    4960:	0026      	movs	r6, r4
    4962:	43ae      	bics	r6, r5
    4964:	d107      	bne.n	4976 <system_pinmux_pin_set_config+0x4a>
    4966:	788c      	ldrb	r4, [r1, #2]
    4968:	2c00      	cmp	r4, #0
    496a:	d137      	bne.n	49dc <system_pinmux_pin_set_config+0xb0>
    496c:	2480      	movs	r4, #128	; 0x80
    496e:	02a4      	lsls	r4, r4, #10
    4970:	4320      	orrs	r0, r4
    4972:	605a      	str	r2, [r3, #4]
    4974:	784c      	ldrb	r4, [r1, #1]
    4976:	3c01      	subs	r4, #1
    4978:	2c01      	cmp	r4, #1
    497a:	d935      	bls.n	49e8 <system_pinmux_pin_set_config+0xbc>
    497c:	24a0      	movs	r4, #160	; 0xa0
    497e:	0415      	lsls	r5, r2, #16
    4980:	0c2d      	lsrs	r5, r5, #16
    4982:	05e4      	lsls	r4, r4, #23
    4984:	432c      	orrs	r4, r5
    4986:	4304      	orrs	r4, r0
    4988:	629c      	str	r4, [r3, #40]	; 0x28
    498a:	24d0      	movs	r4, #208	; 0xd0
    498c:	0c15      	lsrs	r5, r2, #16
    498e:	0624      	lsls	r4, r4, #24
    4990:	432c      	orrs	r4, r5
    4992:	4304      	orrs	r4, r0
    4994:	629c      	str	r4, [r3, #40]	; 0x28
    4996:	78cc      	ldrb	r4, [r1, #3]
    4998:	2c00      	cmp	r4, #0
    499a:	d109      	bne.n	49b0 <system_pinmux_pin_set_config+0x84>
    499c:	0340      	lsls	r0, r0, #13
    499e:	d503      	bpl.n	49a8 <system_pinmux_pin_set_config+0x7c>
    49a0:	7888      	ldrb	r0, [r1, #2]
    49a2:	2801      	cmp	r0, #1
    49a4:	d023      	beq.n	49ee <system_pinmux_pin_set_config+0xc2>
    49a6:	615a      	str	r2, [r3, #20]
    49a8:	7849      	ldrb	r1, [r1, #1]
    49aa:	3901      	subs	r1, #1
    49ac:	2901      	cmp	r1, #1
    49ae:	d913      	bls.n	49d8 <system_pinmux_pin_set_config+0xac>
    49b0:	bd70      	pop	{r4, r5, r6, pc}
    49b2:	20a0      	movs	r0, #160	; 0xa0
    49b4:	0414      	lsls	r4, r2, #16
    49b6:	0c24      	lsrs	r4, r4, #16
    49b8:	05c0      	lsls	r0, r0, #23
    49ba:	4320      	orrs	r0, r4
    49bc:	605a      	str	r2, [r3, #4]
    49be:	6298      	str	r0, [r3, #40]	; 0x28
    49c0:	20d0      	movs	r0, #208	; 0xd0
    49c2:	0c14      	lsrs	r4, r2, #16
    49c4:	0600      	lsls	r0, r0, #24
    49c6:	4320      	orrs	r0, r4
    49c8:	6298      	str	r0, [r3, #40]	; 0x28
    49ca:	78c8      	ldrb	r0, [r1, #3]
    49cc:	2800      	cmp	r0, #0
    49ce:	d1ef      	bne.n	49b0 <system_pinmux_pin_set_config+0x84>
    49d0:	7849      	ldrb	r1, [r1, #1]
    49d2:	3901      	subs	r1, #1
    49d4:	2901      	cmp	r1, #1
    49d6:	d8eb      	bhi.n	49b0 <system_pinmux_pin_set_config+0x84>
    49d8:	609a      	str	r2, [r3, #8]
    49da:	e7e9      	b.n	49b0 <system_pinmux_pin_set_config+0x84>
    49dc:	24c0      	movs	r4, #192	; 0xc0
    49de:	02e4      	lsls	r4, r4, #11
    49e0:	4320      	orrs	r0, r4
    49e2:	e7c6      	b.n	4972 <system_pinmux_pin_set_config+0x46>
    49e4:	2000      	movs	r0, #0
    49e6:	e7b9      	b.n	495c <system_pinmux_pin_set_config+0x30>
    49e8:	4c03      	ldr	r4, [pc, #12]	; (49f8 <system_pinmux_pin_set_config+0xcc>)
    49ea:	4020      	ands	r0, r4
    49ec:	e7c6      	b.n	497c <system_pinmux_pin_set_config+0x50>
    49ee:	619a      	str	r2, [r3, #24]
    49f0:	e7da      	b.n	49a8 <system_pinmux_pin_set_config+0x7c>
    49f2:	46c0      	nop			; (mov r8, r8)
    49f4:	40002800 	.word	0x40002800
    49f8:	fffbffff 	.word	0xfffbffff

000049fc <_system_dummy_init>:
    49fc:	4770      	bx	lr
    49fe:	46c0      	nop			; (mov r8, r8)

00004a00 <system_init>:
    4a00:	b510      	push	{r4, lr}
    4a02:	4b05      	ldr	r3, [pc, #20]	; (4a18 <system_init+0x18>)
    4a04:	4798      	blx	r3
    4a06:	4b05      	ldr	r3, [pc, #20]	; (4a1c <system_init+0x1c>)
    4a08:	4798      	blx	r3
    4a0a:	4b05      	ldr	r3, [pc, #20]	; (4a20 <system_init+0x20>)
    4a0c:	4798      	blx	r3
    4a0e:	4b05      	ldr	r3, [pc, #20]	; (4a24 <system_init+0x24>)
    4a10:	4798      	blx	r3
    4a12:	4b05      	ldr	r3, [pc, #20]	; (4a28 <system_init+0x28>)
    4a14:	4798      	blx	r3
    4a16:	bd10      	pop	{r4, pc}
    4a18:	00004545 	.word	0x00004545
    4a1c:	0000317d 	.word	0x0000317d
    4a20:	000049fd 	.word	0x000049fd
    4a24:	00003311 	.word	0x00003311
    4a28:	000049fd 	.word	0x000049fd

00004a2c <TC0_Handler>:
    4a2c:	b570      	push	{r4, r5, r6, lr}
    4a2e:	2601      	movs	r6, #1
    4a30:	4b15      	ldr	r3, [pc, #84]	; (4a88 <TC0_Handler+0x5c>)
    4a32:	681d      	ldr	r5, [r3, #0]
    4a34:	682b      	ldr	r3, [r5, #0]
    4a36:	7e2a      	ldrb	r2, [r5, #24]
    4a38:	7e6c      	ldrb	r4, [r5, #25]
    4a3a:	7a9b      	ldrb	r3, [r3, #10]
    4a3c:	4014      	ands	r4, r2
    4a3e:	401c      	ands	r4, r3
    4a40:	4226      	tst	r6, r4
    4a42:	d11a      	bne.n	4a7a <TC0_Handler+0x4e>
    4a44:	2602      	movs	r6, #2
    4a46:	4226      	tst	r6, r4
    4a48:	d111      	bne.n	4a6e <TC0_Handler+0x42>
    4a4a:	2610      	movs	r6, #16
    4a4c:	4226      	tst	r6, r4
    4a4e:	d108      	bne.n	4a62 <TC0_Handler+0x36>
    4a50:	2620      	movs	r6, #32
    4a52:	4226      	tst	r6, r4
    4a54:	d004      	beq.n	4a60 <TC0_Handler+0x34>
    4a56:	696b      	ldr	r3, [r5, #20]
    4a58:	0028      	movs	r0, r5
    4a5a:	4798      	blx	r3
    4a5c:	682b      	ldr	r3, [r5, #0]
    4a5e:	729e      	strb	r6, [r3, #10]
    4a60:	bd70      	pop	{r4, r5, r6, pc}
    4a62:	692b      	ldr	r3, [r5, #16]
    4a64:	0028      	movs	r0, r5
    4a66:	4798      	blx	r3
    4a68:	682b      	ldr	r3, [r5, #0]
    4a6a:	729e      	strb	r6, [r3, #10]
    4a6c:	e7f0      	b.n	4a50 <TC0_Handler+0x24>
    4a6e:	68eb      	ldr	r3, [r5, #12]
    4a70:	0028      	movs	r0, r5
    4a72:	4798      	blx	r3
    4a74:	682b      	ldr	r3, [r5, #0]
    4a76:	729e      	strb	r6, [r3, #10]
    4a78:	e7e7      	b.n	4a4a <TC0_Handler+0x1e>
    4a7a:	68ab      	ldr	r3, [r5, #8]
    4a7c:	0028      	movs	r0, r5
    4a7e:	4798      	blx	r3
    4a80:	682b      	ldr	r3, [r5, #0]
    4a82:	729e      	strb	r6, [r3, #10]
    4a84:	e7de      	b.n	4a44 <TC0_Handler+0x18>
    4a86:	46c0      	nop			; (mov r8, r8)
    4a88:	20000ad4 	.word	0x20000ad4

00004a8c <TC1_Handler>:
    4a8c:	b570      	push	{r4, r5, r6, lr}
    4a8e:	2601      	movs	r6, #1
    4a90:	4b15      	ldr	r3, [pc, #84]	; (4ae8 <TC1_Handler+0x5c>)
    4a92:	685d      	ldr	r5, [r3, #4]
    4a94:	682b      	ldr	r3, [r5, #0]
    4a96:	7e2a      	ldrb	r2, [r5, #24]
    4a98:	7e6c      	ldrb	r4, [r5, #25]
    4a9a:	7a9b      	ldrb	r3, [r3, #10]
    4a9c:	4014      	ands	r4, r2
    4a9e:	401c      	ands	r4, r3
    4aa0:	4226      	tst	r6, r4
    4aa2:	d11a      	bne.n	4ada <TC1_Handler+0x4e>
    4aa4:	2602      	movs	r6, #2
    4aa6:	4226      	tst	r6, r4
    4aa8:	d111      	bne.n	4ace <TC1_Handler+0x42>
    4aaa:	2610      	movs	r6, #16
    4aac:	4226      	tst	r6, r4
    4aae:	d108      	bne.n	4ac2 <TC1_Handler+0x36>
    4ab0:	2620      	movs	r6, #32
    4ab2:	4226      	tst	r6, r4
    4ab4:	d004      	beq.n	4ac0 <TC1_Handler+0x34>
    4ab6:	696b      	ldr	r3, [r5, #20]
    4ab8:	0028      	movs	r0, r5
    4aba:	4798      	blx	r3
    4abc:	682b      	ldr	r3, [r5, #0]
    4abe:	729e      	strb	r6, [r3, #10]
    4ac0:	bd70      	pop	{r4, r5, r6, pc}
    4ac2:	692b      	ldr	r3, [r5, #16]
    4ac4:	0028      	movs	r0, r5
    4ac6:	4798      	blx	r3
    4ac8:	682b      	ldr	r3, [r5, #0]
    4aca:	729e      	strb	r6, [r3, #10]
    4acc:	e7f0      	b.n	4ab0 <TC1_Handler+0x24>
    4ace:	68eb      	ldr	r3, [r5, #12]
    4ad0:	0028      	movs	r0, r5
    4ad2:	4798      	blx	r3
    4ad4:	682b      	ldr	r3, [r5, #0]
    4ad6:	729e      	strb	r6, [r3, #10]
    4ad8:	e7e7      	b.n	4aaa <TC1_Handler+0x1e>
    4ada:	68ab      	ldr	r3, [r5, #8]
    4adc:	0028      	movs	r0, r5
    4ade:	4798      	blx	r3
    4ae0:	682b      	ldr	r3, [r5, #0]
    4ae2:	729e      	strb	r6, [r3, #10]
    4ae4:	e7de      	b.n	4aa4 <TC1_Handler+0x18>
    4ae6:	46c0      	nop			; (mov r8, r8)
    4ae8:	20000ad4 	.word	0x20000ad4

00004aec <TC4_Handler>:
    4aec:	b570      	push	{r4, r5, r6, lr}
    4aee:	2601      	movs	r6, #1
    4af0:	4b15      	ldr	r3, [pc, #84]	; (4b48 <TC4_Handler+0x5c>)
    4af2:	689d      	ldr	r5, [r3, #8]
    4af4:	682b      	ldr	r3, [r5, #0]
    4af6:	7e2a      	ldrb	r2, [r5, #24]
    4af8:	7e6c      	ldrb	r4, [r5, #25]
    4afa:	7a9b      	ldrb	r3, [r3, #10]
    4afc:	4014      	ands	r4, r2
    4afe:	401c      	ands	r4, r3
    4b00:	4226      	tst	r6, r4
    4b02:	d11a      	bne.n	4b3a <TC4_Handler+0x4e>
    4b04:	2602      	movs	r6, #2
    4b06:	4226      	tst	r6, r4
    4b08:	d111      	bne.n	4b2e <TC4_Handler+0x42>
    4b0a:	2610      	movs	r6, #16
    4b0c:	4226      	tst	r6, r4
    4b0e:	d108      	bne.n	4b22 <TC4_Handler+0x36>
    4b10:	2620      	movs	r6, #32
    4b12:	4226      	tst	r6, r4
    4b14:	d004      	beq.n	4b20 <TC4_Handler+0x34>
    4b16:	696b      	ldr	r3, [r5, #20]
    4b18:	0028      	movs	r0, r5
    4b1a:	4798      	blx	r3
    4b1c:	682b      	ldr	r3, [r5, #0]
    4b1e:	729e      	strb	r6, [r3, #10]
    4b20:	bd70      	pop	{r4, r5, r6, pc}
    4b22:	692b      	ldr	r3, [r5, #16]
    4b24:	0028      	movs	r0, r5
    4b26:	4798      	blx	r3
    4b28:	682b      	ldr	r3, [r5, #0]
    4b2a:	729e      	strb	r6, [r3, #10]
    4b2c:	e7f0      	b.n	4b10 <TC4_Handler+0x24>
    4b2e:	68eb      	ldr	r3, [r5, #12]
    4b30:	0028      	movs	r0, r5
    4b32:	4798      	blx	r3
    4b34:	682b      	ldr	r3, [r5, #0]
    4b36:	729e      	strb	r6, [r3, #10]
    4b38:	e7e7      	b.n	4b0a <TC4_Handler+0x1e>
    4b3a:	68ab      	ldr	r3, [r5, #8]
    4b3c:	0028      	movs	r0, r5
    4b3e:	4798      	blx	r3
    4b40:	682b      	ldr	r3, [r5, #0]
    4b42:	729e      	strb	r6, [r3, #10]
    4b44:	e7de      	b.n	4b04 <TC4_Handler+0x18>
    4b46:	46c0      	nop			; (mov r8, r8)
    4b48:	20000ad4 	.word	0x20000ad4

00004b4c <tc_init>:
    4b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b4e:	4645      	mov	r5, r8
    4b50:	46de      	mov	lr, fp
    4b52:	4657      	mov	r7, sl
    4b54:	464e      	mov	r6, r9
    4b56:	b5e0      	push	{r5, r6, r7, lr}
    4b58:	b08b      	sub	sp, #44	; 0x2c
    4b5a:	ab04      	add	r3, sp, #16
    4b5c:	469b      	mov	fp, r3
    4b5e:	4bc8      	ldr	r3, [pc, #800]	; (4e80 <tc_init+0x334>)
    4b60:	000f      	movs	r7, r1
    4b62:	4690      	mov	r8, r2
    4b64:	0019      	movs	r1, r3
    4b66:	465a      	mov	r2, fp
    4b68:	0004      	movs	r4, r0
    4b6a:	c961      	ldmia	r1!, {r0, r5, r6}
    4b6c:	c261      	stmia	r2!, {r0, r5, r6}
    4b6e:	9a04      	ldr	r2, [sp, #16]
    4b70:	42ba      	cmp	r2, r7
    4b72:	d100      	bne.n	4b76 <tc_init+0x2a>
    4b74:	e133      	b.n	4dde <tc_init+0x292>
    4b76:	685a      	ldr	r2, [r3, #4]
    4b78:	42ba      	cmp	r2, r7
    4b7a:	d100      	bne.n	4b7e <tc_init+0x32>
    4b7c:	e134      	b.n	4de8 <tc_init+0x29c>
    4b7e:	2200      	movs	r2, #0
    4b80:	4691      	mov	r9, r2
    4b82:	4692      	mov	sl, r2
    4b84:	689a      	ldr	r2, [r3, #8]
    4b86:	4297      	cmp	r7, r2
    4b88:	d100      	bne.n	4b8c <tc_init+0x40>
    4b8a:	e12f      	b.n	4dec <tc_init+0x2a0>
    4b8c:	221b      	movs	r2, #27
    4b8e:	ae02      	add	r6, sp, #8
    4b90:	7032      	strb	r2, [r6, #0]
    4b92:	7072      	strb	r2, [r6, #1]
    4b94:	3202      	adds	r2, #2
    4b96:	70b2      	strb	r2, [r6, #2]
    4b98:	465a      	mov	r2, fp
    4b9a:	330c      	adds	r3, #12
    4b9c:	cb23      	ldmia	r3!, {r0, r1, r5}
    4b9e:	c223      	stmia	r2!, {r0, r1, r5}
    4ba0:	cb23      	ldmia	r3!, {r0, r1, r5}
    4ba2:	c223      	stmia	r2!, {r0, r1, r5}
    4ba4:	2300      	movs	r3, #0
    4ba6:	60a3      	str	r3, [r4, #8]
    4ba8:	60e3      	str	r3, [r4, #12]
    4baa:	6123      	str	r3, [r4, #16]
    4bac:	6163      	str	r3, [r4, #20]
    4bae:	7623      	strb	r3, [r4, #24]
    4bb0:	7663      	strb	r3, [r4, #25]
    4bb2:	464b      	mov	r3, r9
    4bb4:	4ab3      	ldr	r2, [pc, #716]	; (4e84 <tc_init+0x338>)
    4bb6:	009b      	lsls	r3, r3, #2
    4bb8:	509c      	str	r4, [r3, r2]
    4bba:	4642      	mov	r2, r8
    4bbc:	2334      	movs	r3, #52	; 0x34
    4bbe:	6027      	str	r7, [r4, #0]
    4bc0:	5cd3      	ldrb	r3, [r2, r3]
    4bc2:	76a3      	strb	r3, [r4, #26]
    4bc4:	78d3      	ldrb	r3, [r2, #3]
    4bc6:	2b08      	cmp	r3, #8
    4bc8:	d00c      	beq.n	4be4 <tc_init+0x98>
    4bca:	7123      	strb	r3, [r4, #4]
    4bcc:	2301      	movs	r3, #1
    4bce:	683a      	ldr	r2, [r7, #0]
    4bd0:	2005      	movs	r0, #5
    4bd2:	4213      	tst	r3, r2
    4bd4:	d00b      	beq.n	4bee <tc_init+0xa2>
    4bd6:	b00b      	add	sp, #44	; 0x2c
    4bd8:	bc3c      	pop	{r2, r3, r4, r5}
    4bda:	4690      	mov	r8, r2
    4bdc:	4699      	mov	r9, r3
    4bde:	46a2      	mov	sl, r4
    4be0:	46ab      	mov	fp, r5
    4be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4be4:	4652      	mov	r2, sl
    4be6:	2017      	movs	r0, #23
    4be8:	07d2      	lsls	r2, r2, #31
    4bea:	d4f4      	bmi.n	4bd6 <tc_init+0x8a>
    4bec:	e7ed      	b.n	4bca <tc_init+0x7e>
    4bee:	2202      	movs	r2, #2
    4bf0:	7af9      	ldrb	r1, [r7, #11]
    4bf2:	3017      	adds	r0, #23
    4bf4:	420a      	tst	r2, r1
    4bf6:	d1ee      	bne.n	4bd6 <tc_init+0x8a>
    4bf8:	6839      	ldr	r1, [r7, #0]
    4bfa:	400a      	ands	r2, r1
    4bfc:	d1eb      	bne.n	4bd6 <tc_init+0x8a>
    4bfe:	4641      	mov	r1, r8
    4c00:	7c09      	ldrb	r1, [r1, #16]
    4c02:	2900      	cmp	r1, #0
    4c04:	d000      	beq.n	4c08 <tc_init+0xbc>
    4c06:	e0f6      	b.n	4df6 <tc_init+0x2aa>
    4c08:	4643      	mov	r3, r8
    4c0a:	7f1b      	ldrb	r3, [r3, #28]
    4c0c:	2b00      	cmp	r3, #0
    4c0e:	d000      	beq.n	4c12 <tc_init+0xc6>
    4c10:	e0fd      	b.n	4e0e <tc_init+0x2c2>
    4c12:	464b      	mov	r3, r9
    4c14:	4659      	mov	r1, fp
    4c16:	005a      	lsls	r2, r3, #1
    4c18:	1c53      	adds	r3, r2, #1
    4c1a:	009b      	lsls	r3, r3, #2
    4c1c:	58c9      	ldr	r1, [r1, r3]
    4c1e:	464b      	mov	r3, r9
    4c20:	4658      	mov	r0, fp
    4c22:	00db      	lsls	r3, r3, #3
    4c24:	5cc3      	ldrb	r3, [r0, r3]
    4c26:	2b04      	cmp	r3, #4
    4c28:	d807      	bhi.n	4c3a <tc_init+0xee>
    4c2a:	4897      	ldr	r0, [pc, #604]	; (4e88 <tc_init+0x33c>)
    4c2c:	009b      	lsls	r3, r3, #2
    4c2e:	58c3      	ldr	r3, [r0, r3]
    4c30:	469f      	mov	pc, r3
    4c32:	4896      	ldr	r0, [pc, #600]	; (4e8c <tc_init+0x340>)
    4c34:	6a03      	ldr	r3, [r0, #32]
    4c36:	4319      	orrs	r1, r3
    4c38:	6201      	str	r1, [r0, #32]
    4c3a:	4643      	mov	r3, r8
    4c3c:	78db      	ldrb	r3, [r3, #3]
    4c3e:	2b08      	cmp	r3, #8
    4c40:	d100      	bne.n	4c44 <tc_init+0xf8>
    4c42:	e0f6      	b.n	4e32 <tc_init+0x2e6>
    4c44:	4643      	mov	r3, r8
    4c46:	781b      	ldrb	r3, [r3, #0]
    4c48:	a901      	add	r1, sp, #4
    4c4a:	700b      	strb	r3, [r1, #0]
    4c4c:	464b      	mov	r3, r9
    4c4e:	5cf5      	ldrb	r5, [r6, r3]
    4c50:	4b8f      	ldr	r3, [pc, #572]	; (4e90 <tc_init+0x344>)
    4c52:	0028      	movs	r0, r5
    4c54:	4798      	blx	r3
    4c56:	4b8f      	ldr	r3, [pc, #572]	; (4e94 <tc_init+0x348>)
    4c58:	0028      	movs	r0, r5
    4c5a:	4798      	blx	r3
    4c5c:	4643      	mov	r3, r8
    4c5e:	4642      	mov	r2, r8
    4c60:	78db      	ldrb	r3, [r3, #3]
    4c62:	79d2      	ldrb	r2, [r2, #7]
    4c64:	4313      	orrs	r3, r2
    4c66:	4642      	mov	r2, r8
    4c68:	8892      	ldrh	r2, [r2, #4]
    4c6a:	4313      	orrs	r3, r2
    4c6c:	4642      	mov	r2, r8
    4c6e:	7a52      	ldrb	r2, [r2, #9]
    4c70:	2a00      	cmp	r2, #0
    4c72:	d002      	beq.n	4c7a <tc_init+0x12e>
    4c74:	2280      	movs	r2, #128	; 0x80
    4c76:	0252      	lsls	r2, r2, #9
    4c78:	4313      	orrs	r3, r2
    4c7a:	4642      	mov	r2, r8
    4c7c:	7a92      	ldrb	r2, [r2, #10]
    4c7e:	2a00      	cmp	r2, #0
    4c80:	d002      	beq.n	4c88 <tc_init+0x13c>
    4c82:	2280      	movs	r2, #128	; 0x80
    4c84:	0292      	lsls	r2, r2, #10
    4c86:	4313      	orrs	r3, r2
    4c88:	4642      	mov	r2, r8
    4c8a:	7ad2      	ldrb	r2, [r2, #11]
    4c8c:	2a00      	cmp	r2, #0
    4c8e:	d002      	beq.n	4c96 <tc_init+0x14a>
    4c90:	2280      	movs	r2, #128	; 0x80
    4c92:	0352      	lsls	r2, r2, #13
    4c94:	4313      	orrs	r3, r2
    4c96:	4642      	mov	r2, r8
    4c98:	7b12      	ldrb	r2, [r2, #12]
    4c9a:	2a00      	cmp	r2, #0
    4c9c:	d002      	beq.n	4ca4 <tc_init+0x158>
    4c9e:	2280      	movs	r2, #128	; 0x80
    4ca0:	0392      	lsls	r2, r2, #14
    4ca2:	4313      	orrs	r3, r2
    4ca4:	4642      	mov	r2, r8
    4ca6:	7851      	ldrb	r1, [r2, #1]
    4ca8:	7892      	ldrb	r2, [r2, #2]
    4caa:	0189      	lsls	r1, r1, #6
    4cac:	01d2      	lsls	r2, r2, #7
    4cae:	4311      	orrs	r1, r2
    4cb0:	6822      	ldr	r2, [r4, #0]
    4cb2:	4319      	orrs	r1, r3
    4cb4:	6913      	ldr	r3, [r2, #16]
    4cb6:	2b00      	cmp	r3, #0
    4cb8:	d1fc      	bne.n	4cb4 <tc_init+0x168>
    4cba:	6039      	str	r1, [r7, #0]
    4cbc:	6822      	ldr	r2, [r4, #0]
    4cbe:	6913      	ldr	r3, [r2, #16]
    4cc0:	2b00      	cmp	r3, #0
    4cc2:	d1fc      	bne.n	4cbe <tc_init+0x172>
    4cc4:	4643      	mov	r3, r8
    4cc6:	799b      	ldrb	r3, [r3, #6]
    4cc8:	733b      	strb	r3, [r7, #12]
    4cca:	4643      	mov	r3, r8
    4ccc:	7b5b      	ldrb	r3, [r3, #13]
    4cce:	2b00      	cmp	r3, #0
    4cd0:	d000      	beq.n	4cd4 <tc_init+0x188>
    4cd2:	e08d      	b.n	4df0 <tc_init+0x2a4>
    4cd4:	2101      	movs	r1, #1
    4cd6:	2200      	movs	r2, #0
    4cd8:	4643      	mov	r3, r8
    4cda:	7b9b      	ldrb	r3, [r3, #14]
    4cdc:	2b00      	cmp	r3, #0
    4cde:	d100      	bne.n	4ce2 <tc_init+0x196>
    4ce0:	0011      	movs	r1, r2
    4ce2:	6822      	ldr	r2, [r4, #0]
    4ce4:	6913      	ldr	r3, [r2, #16]
    4ce6:	2b00      	cmp	r3, #0
    4ce8:	d1fc      	bne.n	4ce4 <tc_init+0x198>
    4cea:	33ff      	adds	r3, #255	; 0xff
    4cec:	713b      	strb	r3, [r7, #4]
    4cee:	2900      	cmp	r1, #0
    4cf0:	d004      	beq.n	4cfc <tc_init+0x1b0>
    4cf2:	6822      	ldr	r2, [r4, #0]
    4cf4:	6913      	ldr	r3, [r2, #16]
    4cf6:	2b00      	cmp	r3, #0
    4cf8:	d1fc      	bne.n	4cf4 <tc_init+0x1a8>
    4cfa:	7179      	strb	r1, [r7, #5]
    4cfc:	4643      	mov	r3, r8
    4cfe:	7a1b      	ldrb	r3, [r3, #8]
    4d00:	737b      	strb	r3, [r7, #13]
    4d02:	6822      	ldr	r2, [r4, #0]
    4d04:	6913      	ldr	r3, [r2, #16]
    4d06:	2b00      	cmp	r3, #0
    4d08:	d1fc      	bne.n	4d04 <tc_init+0x1b8>
    4d0a:	7923      	ldrb	r3, [r4, #4]
    4d0c:	2b04      	cmp	r3, #4
    4d0e:	d01b      	beq.n	4d48 <tc_init+0x1fc>
    4d10:	2b08      	cmp	r3, #8
    4d12:	d03a      	beq.n	4d8a <tc_init+0x23e>
    4d14:	2017      	movs	r0, #23
    4d16:	2b00      	cmp	r3, #0
    4d18:	d000      	beq.n	4d1c <tc_init+0x1d0>
    4d1a:	e75c      	b.n	4bd6 <tc_init+0x8a>
    4d1c:	6913      	ldr	r3, [r2, #16]
    4d1e:	2b00      	cmp	r3, #0
    4d20:	d1fc      	bne.n	4d1c <tc_init+0x1d0>
    4d22:	4643      	mov	r3, r8
    4d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4d26:	82bb      	strh	r3, [r7, #20]
    4d28:	6822      	ldr	r2, [r4, #0]
    4d2a:	6913      	ldr	r3, [r2, #16]
    4d2c:	2b00      	cmp	r3, #0
    4d2e:	d1fc      	bne.n	4d2a <tc_init+0x1de>
    4d30:	4643      	mov	r3, r8
    4d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    4d34:	83bb      	strh	r3, [r7, #28]
    4d36:	6822      	ldr	r2, [r4, #0]
    4d38:	6913      	ldr	r3, [r2, #16]
    4d3a:	2b00      	cmp	r3, #0
    4d3c:	d1fc      	bne.n	4d38 <tc_init+0x1ec>
    4d3e:	4643      	mov	r3, r8
    4d40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    4d42:	2000      	movs	r0, #0
    4d44:	83fb      	strh	r3, [r7, #30]
    4d46:	e746      	b.n	4bd6 <tc_init+0x8a>
    4d48:	6913      	ldr	r3, [r2, #16]
    4d4a:	2b00      	cmp	r3, #0
    4d4c:	d1fc      	bne.n	4d48 <tc_init+0x1fc>
    4d4e:	4642      	mov	r2, r8
    4d50:	3328      	adds	r3, #40	; 0x28
    4d52:	5cd3      	ldrb	r3, [r2, r3]
    4d54:	753b      	strb	r3, [r7, #20]
    4d56:	6822      	ldr	r2, [r4, #0]
    4d58:	6913      	ldr	r3, [r2, #16]
    4d5a:	2b00      	cmp	r3, #0
    4d5c:	d1fc      	bne.n	4d58 <tc_init+0x20c>
    4d5e:	4642      	mov	r2, r8
    4d60:	3329      	adds	r3, #41	; 0x29
    4d62:	5cd3      	ldrb	r3, [r2, r3]
    4d64:	76fb      	strb	r3, [r7, #27]
    4d66:	6822      	ldr	r2, [r4, #0]
    4d68:	6913      	ldr	r3, [r2, #16]
    4d6a:	2b00      	cmp	r3, #0
    4d6c:	d1fc      	bne.n	4d68 <tc_init+0x21c>
    4d6e:	4642      	mov	r2, r8
    4d70:	332a      	adds	r3, #42	; 0x2a
    4d72:	5cd3      	ldrb	r3, [r2, r3]
    4d74:	773b      	strb	r3, [r7, #28]
    4d76:	6822      	ldr	r2, [r4, #0]
    4d78:	6913      	ldr	r3, [r2, #16]
    4d7a:	2b00      	cmp	r3, #0
    4d7c:	d1fc      	bne.n	4d78 <tc_init+0x22c>
    4d7e:	4642      	mov	r2, r8
    4d80:	332b      	adds	r3, #43	; 0x2b
    4d82:	5cd3      	ldrb	r3, [r2, r3]
    4d84:	2000      	movs	r0, #0
    4d86:	777b      	strb	r3, [r7, #29]
    4d88:	e725      	b.n	4bd6 <tc_init+0x8a>
    4d8a:	6913      	ldr	r3, [r2, #16]
    4d8c:	2b00      	cmp	r3, #0
    4d8e:	d1fc      	bne.n	4d8a <tc_init+0x23e>
    4d90:	4643      	mov	r3, r8
    4d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4d94:	617b      	str	r3, [r7, #20]
    4d96:	6822      	ldr	r2, [r4, #0]
    4d98:	6913      	ldr	r3, [r2, #16]
    4d9a:	2b00      	cmp	r3, #0
    4d9c:	d1fc      	bne.n	4d98 <tc_init+0x24c>
    4d9e:	4643      	mov	r3, r8
    4da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4da2:	61fb      	str	r3, [r7, #28]
    4da4:	6822      	ldr	r2, [r4, #0]
    4da6:	6913      	ldr	r3, [r2, #16]
    4da8:	2b00      	cmp	r3, #0
    4daa:	d1fc      	bne.n	4da6 <tc_init+0x25a>
    4dac:	4643      	mov	r3, r8
    4dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4db0:	2000      	movs	r0, #0
    4db2:	623b      	str	r3, [r7, #32]
    4db4:	e70f      	b.n	4bd6 <tc_init+0x8a>
    4db6:	4835      	ldr	r0, [pc, #212]	; (4e8c <tc_init+0x340>)
    4db8:	69c3      	ldr	r3, [r0, #28]
    4dba:	4319      	orrs	r1, r3
    4dbc:	61c1      	str	r1, [r0, #28]
    4dbe:	e73c      	b.n	4c3a <tc_init+0xee>
    4dc0:	4832      	ldr	r0, [pc, #200]	; (4e8c <tc_init+0x340>)
    4dc2:	6983      	ldr	r3, [r0, #24]
    4dc4:	4319      	orrs	r1, r3
    4dc6:	6181      	str	r1, [r0, #24]
    4dc8:	e737      	b.n	4c3a <tc_init+0xee>
    4dca:	4830      	ldr	r0, [pc, #192]	; (4e8c <tc_init+0x340>)
    4dcc:	6943      	ldr	r3, [r0, #20]
    4dce:	4319      	orrs	r1, r3
    4dd0:	6141      	str	r1, [r0, #20]
    4dd2:	e732      	b.n	4c3a <tc_init+0xee>
    4dd4:	4b2d      	ldr	r3, [pc, #180]	; (4e8c <tc_init+0x340>)
    4dd6:	6a58      	ldr	r0, [r3, #36]	; 0x24
    4dd8:	4301      	orrs	r1, r0
    4dda:	6259      	str	r1, [r3, #36]	; 0x24
    4ddc:	e72d      	b.n	4c3a <tc_init+0xee>
    4dde:	2200      	movs	r2, #0
    4de0:	b2d1      	uxtb	r1, r2
    4de2:	468a      	mov	sl, r1
    4de4:	4691      	mov	r9, r2
    4de6:	e6d1      	b.n	4b8c <tc_init+0x40>
    4de8:	2201      	movs	r2, #1
    4dea:	e7f9      	b.n	4de0 <tc_init+0x294>
    4dec:	2202      	movs	r2, #2
    4dee:	e7f7      	b.n	4de0 <tc_init+0x294>
    4df0:	2105      	movs	r1, #5
    4df2:	2204      	movs	r2, #4
    4df4:	e770      	b.n	4cd8 <tc_init+0x18c>
    4df6:	a903      	add	r1, sp, #12
    4df8:	70ca      	strb	r2, [r1, #3]
    4dfa:	4642      	mov	r2, r8
    4dfc:	708b      	strb	r3, [r1, #2]
    4dfe:	704b      	strb	r3, [r1, #1]
    4e00:	4643      	mov	r3, r8
    4e02:	7e12      	ldrb	r2, [r2, #24]
    4e04:	7d18      	ldrb	r0, [r3, #20]
    4e06:	4b24      	ldr	r3, [pc, #144]	; (4e98 <tc_init+0x34c>)
    4e08:	700a      	strb	r2, [r1, #0]
    4e0a:	4798      	blx	r3
    4e0c:	e6fc      	b.n	4c08 <tc_init+0xbc>
    4e0e:	2200      	movs	r2, #0
    4e10:	a903      	add	r1, sp, #12
    4e12:	70ca      	strb	r2, [r1, #3]
    4e14:	2024      	movs	r0, #36	; 0x24
    4e16:	4642      	mov	r2, r8
    4e18:	2301      	movs	r3, #1
    4e1a:	1812      	adds	r2, r2, r0
    4e1c:	7812      	ldrb	r2, [r2, #0]
    4e1e:	708b      	strb	r3, [r1, #2]
    4e20:	700a      	strb	r2, [r1, #0]
    4e22:	704b      	strb	r3, [r1, #1]
    4e24:	2220      	movs	r2, #32
    4e26:	4643      	mov	r3, r8
    4e28:	189b      	adds	r3, r3, r2
    4e2a:	7818      	ldrb	r0, [r3, #0]
    4e2c:	4b1a      	ldr	r3, [pc, #104]	; (4e98 <tc_init+0x34c>)
    4e2e:	4798      	blx	r3
    4e30:	e6ef      	b.n	4c12 <tc_init+0xc6>
    4e32:	4653      	mov	r3, sl
    4e34:	2b02      	cmp	r3, #2
    4e36:	d100      	bne.n	4e3a <tc_init+0x2ee>
    4e38:	e704      	b.n	4c44 <tc_init+0xf8>
    4e3a:	4659      	mov	r1, fp
    4e3c:	1cd3      	adds	r3, r2, #3
    4e3e:	3202      	adds	r2, #2
    4e40:	0092      	lsls	r2, r2, #2
    4e42:	5c8a      	ldrb	r2, [r1, r2]
    4e44:	009b      	lsls	r3, r3, #2
    4e46:	58cb      	ldr	r3, [r1, r3]
    4e48:	2a04      	cmp	r2, #4
    4e4a:	d900      	bls.n	4e4e <tc_init+0x302>
    4e4c:	e6fa      	b.n	4c44 <tc_init+0xf8>
    4e4e:	4913      	ldr	r1, [pc, #76]	; (4e9c <tc_init+0x350>)
    4e50:	0092      	lsls	r2, r2, #2
    4e52:	588a      	ldr	r2, [r1, r2]
    4e54:	4697      	mov	pc, r2
    4e56:	4a0d      	ldr	r2, [pc, #52]	; (4e8c <tc_init+0x340>)
    4e58:	6a51      	ldr	r1, [r2, #36]	; 0x24
    4e5a:	430b      	orrs	r3, r1
    4e5c:	6253      	str	r3, [r2, #36]	; 0x24
    4e5e:	e6f1      	b.n	4c44 <tc_init+0xf8>
    4e60:	490a      	ldr	r1, [pc, #40]	; (4e8c <tc_init+0x340>)
    4e62:	6a0a      	ldr	r2, [r1, #32]
    4e64:	4313      	orrs	r3, r2
    4e66:	620b      	str	r3, [r1, #32]
    4e68:	e6ec      	b.n	4c44 <tc_init+0xf8>
    4e6a:	4908      	ldr	r1, [pc, #32]	; (4e8c <tc_init+0x340>)
    4e6c:	69ca      	ldr	r2, [r1, #28]
    4e6e:	4313      	orrs	r3, r2
    4e70:	61cb      	str	r3, [r1, #28]
    4e72:	e6e7      	b.n	4c44 <tc_init+0xf8>
    4e74:	4905      	ldr	r1, [pc, #20]	; (4e8c <tc_init+0x340>)
    4e76:	698a      	ldr	r2, [r1, #24]
    4e78:	4313      	orrs	r3, r2
    4e7a:	618b      	str	r3, [r1, #24]
    4e7c:	e6e2      	b.n	4c44 <tc_init+0xf8>
    4e7e:	46c0      	nop			; (mov r8, r8)
    4e80:	00008f28 	.word	0x00008f28
    4e84:	20000ad4 	.word	0x20000ad4
    4e88:	00008f00 	.word	0x00008f00
    4e8c:	40000400 	.word	0x40000400
    4e90:	00004831 	.word	0x00004831
    4e94:	00004871 	.word	0x00004871
    4e98:	0000492d 	.word	0x0000492d
    4e9c:	00008f14 	.word	0x00008f14
    4ea0:	4902      	ldr	r1, [pc, #8]	; (4eac <tc_init+0x360>)
    4ea2:	694a      	ldr	r2, [r1, #20]
    4ea4:	4313      	orrs	r3, r2
    4ea6:	614b      	str	r3, [r1, #20]
    4ea8:	e6cc      	b.n	4c44 <tc_init+0xf8>
    4eaa:	46c0      	nop			; (mov r8, r8)
    4eac:	40000400 	.word	0x40000400

00004eb0 <tc_set_count_value>:
    4eb0:	6802      	ldr	r2, [r0, #0]
    4eb2:	6913      	ldr	r3, [r2, #16]
    4eb4:	2b00      	cmp	r3, #0
    4eb6:	d1fc      	bne.n	4eb2 <tc_set_count_value+0x2>
    4eb8:	7903      	ldrb	r3, [r0, #4]
    4eba:	2b04      	cmp	r3, #4
    4ebc:	d00c      	beq.n	4ed8 <tc_set_count_value+0x28>
    4ebe:	2b08      	cmp	r3, #8
    4ec0:	d007      	beq.n	4ed2 <tc_set_count_value+0x22>
    4ec2:	2017      	movs	r0, #23
    4ec4:	2b00      	cmp	r3, #0
    4ec6:	d000      	beq.n	4eca <tc_set_count_value+0x1a>
    4ec8:	4770      	bx	lr
    4eca:	b289      	uxth	r1, r1
    4ecc:	8291      	strh	r1, [r2, #20]
    4ece:	2000      	movs	r0, #0
    4ed0:	e7fa      	b.n	4ec8 <tc_set_count_value+0x18>
    4ed2:	6151      	str	r1, [r2, #20]
    4ed4:	2000      	movs	r0, #0
    4ed6:	e7f7      	b.n	4ec8 <tc_set_count_value+0x18>
    4ed8:	b2c9      	uxtb	r1, r1
    4eda:	7511      	strb	r1, [r2, #20]
    4edc:	2000      	movs	r0, #0
    4ede:	e7f3      	b.n	4ec8 <tc_set_count_value+0x18>

00004ee0 <tc_get_count_value>:
    4ee0:	6802      	ldr	r2, [r0, #0]
    4ee2:	6913      	ldr	r3, [r2, #16]
    4ee4:	2b00      	cmp	r3, #0
    4ee6:	d1fc      	bne.n	4ee2 <tc_get_count_value+0x2>
    4ee8:	7113      	strb	r3, [r2, #4]
    4eea:	6801      	ldr	r1, [r0, #0]
    4eec:	690b      	ldr	r3, [r1, #16]
    4eee:	2b00      	cmp	r3, #0
    4ef0:	d1fc      	bne.n	4eec <tc_get_count_value+0xc>
    4ef2:	3380      	adds	r3, #128	; 0x80
    4ef4:	7153      	strb	r3, [r2, #5]
    4ef6:	6802      	ldr	r2, [r0, #0]
    4ef8:	6913      	ldr	r3, [r2, #16]
    4efa:	2b00      	cmp	r3, #0
    4efc:	d1fc      	bne.n	4ef8 <tc_get_count_value+0x18>
    4efe:	7903      	ldrb	r3, [r0, #4]
    4f00:	2b04      	cmp	r3, #4
    4f02:	d00a      	beq.n	4f1a <tc_get_count_value+0x3a>
    4f04:	2b08      	cmp	r3, #8
    4f06:	d006      	beq.n	4f16 <tc_get_count_value+0x36>
    4f08:	2000      	movs	r0, #0
    4f0a:	2b00      	cmp	r3, #0
    4f0c:	d000      	beq.n	4f10 <tc_get_count_value+0x30>
    4f0e:	4770      	bx	lr
    4f10:	8a90      	ldrh	r0, [r2, #20]
    4f12:	b280      	uxth	r0, r0
    4f14:	e7fb      	b.n	4f0e <tc_get_count_value+0x2e>
    4f16:	6950      	ldr	r0, [r2, #20]
    4f18:	e7f9      	b.n	4f0e <tc_get_count_value+0x2e>
    4f1a:	7d10      	ldrb	r0, [r2, #20]
    4f1c:	b2c0      	uxtb	r0, r0
    4f1e:	e7f6      	b.n	4f0e <tc_get_count_value+0x2e>

00004f20 <tc_reset>:
    4f20:	2102      	movs	r1, #2
    4f22:	b510      	push	{r4, lr}
    4f24:	6803      	ldr	r3, [r0, #0]
    4f26:	2215      	movs	r2, #21
    4f28:	7adc      	ldrb	r4, [r3, #11]
    4f2a:	4221      	tst	r1, r4
    4f2c:	d001      	beq.n	4f32 <tc_reset+0x12>
    4f2e:	0010      	movs	r0, r2
    4f30:	bd10      	pop	{r4, pc}
    4f32:	681a      	ldr	r2, [r3, #0]
    4f34:	4211      	tst	r1, r2
    4f36:	d00d      	beq.n	4f54 <tc_reset+0x34>
    4f38:	691a      	ldr	r2, [r3, #16]
    4f3a:	2a00      	cmp	r2, #0
    4f3c:	d1fc      	bne.n	4f38 <tc_reset+0x18>
    4f3e:	2102      	movs	r1, #2
    4f40:	3233      	adds	r2, #51	; 0x33
    4f42:	721a      	strb	r2, [r3, #8]
    4f44:	729a      	strb	r2, [r3, #10]
    4f46:	681a      	ldr	r2, [r3, #0]
    4f48:	438a      	bics	r2, r1
    4f4a:	601a      	str	r2, [r3, #0]
    4f4c:	6801      	ldr	r1, [r0, #0]
    4f4e:	690a      	ldr	r2, [r1, #16]
    4f50:	2a00      	cmp	r2, #0
    4f52:	d1fc      	bne.n	4f4e <tc_reset+0x2e>
    4f54:	2101      	movs	r1, #1
    4f56:	681a      	ldr	r2, [r3, #0]
    4f58:	430a      	orrs	r2, r1
    4f5a:	601a      	str	r2, [r3, #0]
    4f5c:	2200      	movs	r2, #0
    4f5e:	e7e6      	b.n	4f2e <tc_reset+0xe>

00004f60 <Dummy_Handler>:
    4f60:	4770      	bx	lr
    4f62:	46c0      	nop			; (mov r8, r8)

00004f64 <Reset_Handler>:
    4f64:	4914      	ldr	r1, [pc, #80]	; (4fb8 <Reset_Handler+0x54>)
    4f66:	4815      	ldr	r0, [pc, #84]	; (4fbc <Reset_Handler+0x58>)
    4f68:	b510      	push	{r4, lr}
    4f6a:	4281      	cmp	r1, r0
    4f6c:	d009      	beq.n	4f82 <Reset_Handler+0x1e>
    4f6e:	4b14      	ldr	r3, [pc, #80]	; (4fc0 <Reset_Handler+0x5c>)
    4f70:	4298      	cmp	r0, r3
    4f72:	d206      	bcs.n	4f82 <Reset_Handler+0x1e>
    4f74:	43c2      	mvns	r2, r0
    4f76:	18d2      	adds	r2, r2, r3
    4f78:	0892      	lsrs	r2, r2, #2
    4f7a:	3201      	adds	r2, #1
    4f7c:	0092      	lsls	r2, r2, #2
    4f7e:	4b11      	ldr	r3, [pc, #68]	; (4fc4 <Reset_Handler+0x60>)
    4f80:	4798      	blx	r3
    4f82:	4811      	ldr	r0, [pc, #68]	; (4fc8 <Reset_Handler+0x64>)
    4f84:	4b11      	ldr	r3, [pc, #68]	; (4fcc <Reset_Handler+0x68>)
    4f86:	4298      	cmp	r0, r3
    4f88:	d207      	bcs.n	4f9a <Reset_Handler+0x36>
    4f8a:	43c2      	mvns	r2, r0
    4f8c:	18d2      	adds	r2, r2, r3
    4f8e:	0892      	lsrs	r2, r2, #2
    4f90:	3201      	adds	r2, #1
    4f92:	0092      	lsls	r2, r2, #2
    4f94:	2100      	movs	r1, #0
    4f96:	4b0e      	ldr	r3, [pc, #56]	; (4fd0 <Reset_Handler+0x6c>)
    4f98:	4798      	blx	r3
    4f9a:	21ff      	movs	r1, #255	; 0xff
    4f9c:	4b0d      	ldr	r3, [pc, #52]	; (4fd4 <Reset_Handler+0x70>)
    4f9e:	4a0e      	ldr	r2, [pc, #56]	; (4fd8 <Reset_Handler+0x74>)
    4fa0:	438b      	bics	r3, r1
    4fa2:	6093      	str	r3, [r2, #8]
    4fa4:	4a0d      	ldr	r2, [pc, #52]	; (4fdc <Reset_Handler+0x78>)
    4fa6:	397f      	subs	r1, #127	; 0x7f
    4fa8:	6853      	ldr	r3, [r2, #4]
    4faa:	430b      	orrs	r3, r1
    4fac:	6053      	str	r3, [r2, #4]
    4fae:	4b0c      	ldr	r3, [pc, #48]	; (4fe0 <Reset_Handler+0x7c>)
    4fb0:	4798      	blx	r3
    4fb2:	4b0c      	ldr	r3, [pc, #48]	; (4fe4 <Reset_Handler+0x80>)
    4fb4:	4798      	blx	r3
    4fb6:	e7fe      	b.n	4fb6 <Reset_Handler+0x52>
    4fb8:	00009174 	.word	0x00009174
    4fbc:	20000000 	.word	0x20000000
    4fc0:	20000088 	.word	0x20000088
    4fc4:	00007d91 	.word	0x00007d91
    4fc8:	20000088 	.word	0x20000088
    4fcc:	20000b40 	.word	0x20000b40
    4fd0:	00007da3 	.word	0x00007da3
    4fd4:	00000000 	.word	0x00000000
    4fd8:	e000ed00 	.word	0xe000ed00
    4fdc:	41004000 	.word	0x41004000
    4fe0:	00007d49 	.word	0x00007d49
    4fe4:	00005da9 	.word	0x00005da9

00004fe8 <_read>:
    4fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4fea:	46c6      	mov	lr, r8
    4fec:	000c      	movs	r4, r1
    4fee:	b500      	push	{lr}
    4ff0:	4690      	mov	r8, r2
    4ff2:	2800      	cmp	r0, #0
    4ff4:	d112      	bne.n	501c <_read+0x34>
    4ff6:	2a00      	cmp	r2, #0
    4ff8:	dd0d      	ble.n	5016 <_read+0x2e>
    4ffa:	4e0a      	ldr	r6, [pc, #40]	; (5024 <_read+0x3c>)
    4ffc:	4d0a      	ldr	r5, [pc, #40]	; (5028 <_read+0x40>)
    4ffe:	188f      	adds	r7, r1, r2
    5000:	0021      	movs	r1, r4
    5002:	6830      	ldr	r0, [r6, #0]
    5004:	682b      	ldr	r3, [r5, #0]
    5006:	3401      	adds	r4, #1
    5008:	4798      	blx	r3
    500a:	42bc      	cmp	r4, r7
    500c:	d1f8      	bne.n	5000 <_read+0x18>
    500e:	4640      	mov	r0, r8
    5010:	bc04      	pop	{r2}
    5012:	4690      	mov	r8, r2
    5014:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5016:	2300      	movs	r3, #0
    5018:	4698      	mov	r8, r3
    501a:	e7f8      	b.n	500e <_read+0x26>
    501c:	2301      	movs	r3, #1
    501e:	425b      	negs	r3, r3
    5020:	4698      	mov	r8, r3
    5022:	e7f4      	b.n	500e <_read+0x26>
    5024:	20000ae8 	.word	0x20000ae8
    5028:	20000ae0 	.word	0x20000ae0

0000502c <_write>:
    502c:	b5f0      	push	{r4, r5, r6, r7, lr}
    502e:	46c6      	mov	lr, r8
    5030:	3801      	subs	r0, #1
    5032:	b500      	push	{lr}
    5034:	000e      	movs	r6, r1
    5036:	0015      	movs	r5, r2
    5038:	2802      	cmp	r0, #2
    503a:	d810      	bhi.n	505e <_write+0x32>
    503c:	2400      	movs	r4, #0
    503e:	2a00      	cmp	r2, #0
    5040:	d00f      	beq.n	5062 <_write+0x36>
    5042:	4b0a      	ldr	r3, [pc, #40]	; (506c <_write+0x40>)
    5044:	4f0a      	ldr	r7, [pc, #40]	; (5070 <_write+0x44>)
    5046:	4698      	mov	r8, r3
    5048:	e002      	b.n	5050 <_write+0x24>
    504a:	3401      	adds	r4, #1
    504c:	42a5      	cmp	r5, r4
    504e:	d008      	beq.n	5062 <_write+0x36>
    5050:	4643      	mov	r3, r8
    5052:	5d31      	ldrb	r1, [r6, r4]
    5054:	6818      	ldr	r0, [r3, #0]
    5056:	683b      	ldr	r3, [r7, #0]
    5058:	4798      	blx	r3
    505a:	2800      	cmp	r0, #0
    505c:	daf5      	bge.n	504a <_write+0x1e>
    505e:	2401      	movs	r4, #1
    5060:	4264      	negs	r4, r4
    5062:	0020      	movs	r0, r4
    5064:	bc04      	pop	{r2}
    5066:	4690      	mov	r8, r2
    5068:	bdf0      	pop	{r4, r5, r6, r7, pc}
    506a:	46c0      	nop			; (mov r8, r8)
    506c:	20000ae8 	.word	0x20000ae8
    5070:	20000ae4 	.word	0x20000ae4

00005074 <_sbrk>:
    5074:	4a04      	ldr	r2, [pc, #16]	; (5088 <_sbrk+0x14>)
    5076:	6813      	ldr	r3, [r2, #0]
    5078:	2b00      	cmp	r3, #0
    507a:	d003      	beq.n	5084 <_sbrk+0x10>
    507c:	1818      	adds	r0, r3, r0
    507e:	6010      	str	r0, [r2, #0]
    5080:	0018      	movs	r0, r3
    5082:	4770      	bx	lr
    5084:	4b01      	ldr	r3, [pc, #4]	; (508c <_sbrk+0x18>)
    5086:	e7f9      	b.n	507c <_sbrk+0x8>
    5088:	200001a0 	.word	0x200001a0
    508c:	20002b40 	.word	0x20002b40

00005090 <_close>:
    5090:	2001      	movs	r0, #1
    5092:	4240      	negs	r0, r0
    5094:	4770      	bx	lr
    5096:	46c0      	nop			; (mov r8, r8)

00005098 <_fstat>:
    5098:	2380      	movs	r3, #128	; 0x80
    509a:	019b      	lsls	r3, r3, #6
    509c:	2000      	movs	r0, #0
    509e:	604b      	str	r3, [r1, #4]
    50a0:	4770      	bx	lr
    50a2:	46c0      	nop			; (mov r8, r8)

000050a4 <_isatty>:
    50a4:	2001      	movs	r0, #1
    50a6:	4770      	bx	lr

000050a8 <_lseek>:
    50a8:	2000      	movs	r0, #0
    50aa:	4770      	bx	lr

000050ac <usart_serial_getchar>:
    50ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    50ae:	b083      	sub	sp, #12
    50b0:	466b      	mov	r3, sp
    50b2:	1d9c      	adds	r4, r3, #6
    50b4:	2300      	movs	r3, #0
    50b6:	0006      	movs	r6, r0
    50b8:	000f      	movs	r7, r1
    50ba:	4d05      	ldr	r5, [pc, #20]	; (50d0 <usart_serial_getchar+0x24>)
    50bc:	8023      	strh	r3, [r4, #0]
    50be:	0021      	movs	r1, r4
    50c0:	0030      	movs	r0, r6
    50c2:	47a8      	blx	r5
    50c4:	2800      	cmp	r0, #0
    50c6:	d1fa      	bne.n	50be <usart_serial_getchar+0x12>
    50c8:	8823      	ldrh	r3, [r4, #0]
    50ca:	703b      	strb	r3, [r7, #0]
    50cc:	b003      	add	sp, #12
    50ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    50d0:	000041a9 	.word	0x000041a9

000050d4 <usart_serial_putchar>:
    50d4:	b570      	push	{r4, r5, r6, lr}
    50d6:	0006      	movs	r6, r0
    50d8:	4d03      	ldr	r5, [pc, #12]	; (50e8 <usart_serial_putchar+0x14>)
    50da:	b28c      	uxth	r4, r1
    50dc:	0021      	movs	r1, r4
    50de:	0030      	movs	r0, r6
    50e0:	47a8      	blx	r5
    50e2:	2800      	cmp	r0, #0
    50e4:	d1fa      	bne.n	50dc <usart_serial_putchar+0x8>
    50e6:	bd70      	pop	{r4, r5, r6, pc}
    50e8:	0000417d 	.word	0x0000417d

000050ec <USART_HOST_ISR_VECT>:
    50ec:	b510      	push	{r4, lr}
    50ee:	b082      	sub	sp, #8
    50f0:	466b      	mov	r3, sp
    50f2:	1ddc      	adds	r4, r3, #7
    50f4:	2201      	movs	r2, #1
    50f6:	0021      	movs	r1, r4
    50f8:	4b0d      	ldr	r3, [pc, #52]	; (5130 <USART_HOST_ISR_VECT+0x44>)
    50fa:	480e      	ldr	r0, [pc, #56]	; (5134 <USART_HOST_ISR_VECT+0x48>)
    50fc:	4798      	blx	r3
    50fe:	b672      	cpsid	i
    5100:	f3bf 8f5f 	dmb	sy
    5104:	2300      	movs	r3, #0
    5106:	4a0c      	ldr	r2, [pc, #48]	; (5138 <USART_HOST_ISR_VECT+0x4c>)
    5108:	490c      	ldr	r1, [pc, #48]	; (513c <USART_HOST_ISR_VECT+0x50>)
    510a:	7013      	strb	r3, [r2, #0]
    510c:	7824      	ldrb	r4, [r4, #0]
    510e:	780b      	ldrb	r3, [r1, #0]
    5110:	480b      	ldr	r0, [pc, #44]	; (5140 <USART_HOST_ISR_VECT+0x54>)
    5112:	54c4      	strb	r4, [r0, r3]
    5114:	2b9b      	cmp	r3, #155	; 0x9b
    5116:	d009      	beq.n	512c <USART_HOST_ISR_VECT+0x40>
    5118:	3301      	adds	r3, #1
    511a:	b2db      	uxtb	r3, r3
    511c:	700b      	strb	r3, [r1, #0]
    511e:	2301      	movs	r3, #1
    5120:	7013      	strb	r3, [r2, #0]
    5122:	f3bf 8f5f 	dmb	sy
    5126:	b662      	cpsie	i
    5128:	b002      	add	sp, #8
    512a:	bd10      	pop	{r4, pc}
    512c:	2300      	movs	r3, #0
    512e:	e7f5      	b.n	511c <USART_HOST_ISR_VECT+0x30>
    5130:	00004219 	.word	0x00004219
    5134:	200001a4 	.word	0x200001a4
    5138:	20000020 	.word	0x20000020
    513c:	20000274 	.word	0x20000274
    5140:	200001d8 	.word	0x200001d8

00005144 <sio2host_init>:
    5144:	b570      	push	{r4, r5, r6, lr}
    5146:	b090      	sub	sp, #64	; 0x40
    5148:	4669      	mov	r1, sp
    514a:	22ff      	movs	r2, #255	; 0xff
    514c:	2380      	movs	r3, #128	; 0x80
    514e:	810a      	strh	r2, [r1, #8]
    5150:	2202      	movs	r2, #2
    5152:	05db      	lsls	r3, r3, #23
    5154:	9300      	str	r3, [sp, #0]
    5156:	2300      	movs	r3, #0
    5158:	32ff      	adds	r2, #255	; 0xff
    515a:	9209      	str	r2, [sp, #36]	; 0x24
    515c:	3ad5      	subs	r2, #213	; 0xd5
    515e:	548b      	strb	r3, [r1, r2]
    5160:	3201      	adds	r2, #1
    5162:	548b      	strb	r3, [r1, r2]
    5164:	728b      	strb	r3, [r1, #10]
    5166:	72cb      	strb	r3, [r1, #11]
    5168:	820b      	strh	r3, [r1, #16]
    516a:	9301      	str	r3, [sp, #4]
    516c:	930a      	str	r3, [sp, #40]	; 0x28
    516e:	9305      	str	r3, [sp, #20]
    5170:	2313      	movs	r3, #19
    5172:	768b      	strb	r3, [r1, #26]
    5174:	2380      	movs	r3, #128	; 0x80
    5176:	035b      	lsls	r3, r3, #13
    5178:	9303      	str	r3, [sp, #12]
    517a:	4b32      	ldr	r3, [pc, #200]	; (5244 <sio2host_init+0x100>)
    517c:	2200      	movs	r2, #0
    517e:	930c      	str	r3, [sp, #48]	; 0x30
    5180:	4b31      	ldr	r3, [pc, #196]	; (5248 <sio2host_init+0x104>)
    5182:	76ca      	strb	r2, [r1, #27]
    5184:	930d      	str	r3, [sp, #52]	; 0x34
    5186:	2301      	movs	r3, #1
    5188:	425b      	negs	r3, r3
    518a:	930e      	str	r3, [sp, #56]	; 0x38
    518c:	930f      	str	r3, [sp, #60]	; 0x3c
    518e:	23e1      	movs	r3, #225	; 0xe1
    5190:	760a      	strb	r2, [r1, #24]
    5192:	770a      	strb	r2, [r1, #28]
    5194:	764a      	strb	r2, [r1, #25]
    5196:	774a      	strb	r2, [r1, #29]
    5198:	2184      	movs	r1, #132	; 0x84
    519a:	025b      	lsls	r3, r3, #9
    519c:	4c2b      	ldr	r4, [pc, #172]	; (524c <sio2host_init+0x108>)
    519e:	9308      	str	r3, [sp, #32]
    51a0:	4b2b      	ldr	r3, [pc, #172]	; (5250 <sio2host_init+0x10c>)
    51a2:	4a2c      	ldr	r2, [pc, #176]	; (5254 <sio2host_init+0x110>)
    51a4:	601c      	str	r4, [r3, #0]
    51a6:	4b2c      	ldr	r3, [pc, #176]	; (5258 <sio2host_init+0x114>)
    51a8:	05c9      	lsls	r1, r1, #23
    51aa:	601a      	str	r2, [r3, #0]
    51ac:	4a2b      	ldr	r2, [pc, #172]	; (525c <sio2host_init+0x118>)
    51ae:	4b2c      	ldr	r3, [pc, #176]	; (5260 <sio2host_init+0x11c>)
    51b0:	0020      	movs	r0, r4
    51b2:	601a      	str	r2, [r3, #0]
    51b4:	466a      	mov	r2, sp
    51b6:	4b2b      	ldr	r3, [pc, #172]	; (5264 <sio2host_init+0x120>)
    51b8:	4798      	blx	r3
    51ba:	4e2b      	ldr	r6, [pc, #172]	; (5268 <sio2host_init+0x124>)
    51bc:	4d2b      	ldr	r5, [pc, #172]	; (526c <sio2host_init+0x128>)
    51be:	6833      	ldr	r3, [r6, #0]
    51c0:	2100      	movs	r1, #0
    51c2:	6898      	ldr	r0, [r3, #8]
    51c4:	47a8      	blx	r5
    51c6:	6833      	ldr	r3, [r6, #0]
    51c8:	2100      	movs	r1, #0
    51ca:	6858      	ldr	r0, [r3, #4]
    51cc:	47a8      	blx	r5
    51ce:	6825      	ldr	r5, [r4, #0]
    51d0:	4b27      	ldr	r3, [pc, #156]	; (5270 <sio2host_init+0x12c>)
    51d2:	0028      	movs	r0, r5
    51d4:	4798      	blx	r3
    51d6:	231f      	movs	r3, #31
    51d8:	4018      	ands	r0, r3
    51da:	3b1e      	subs	r3, #30
    51dc:	4083      	lsls	r3, r0
    51de:	4a25      	ldr	r2, [pc, #148]	; (5274 <sio2host_init+0x130>)
    51e0:	6013      	str	r3, [r2, #0]
    51e2:	6822      	ldr	r2, [r4, #0]
    51e4:	69d3      	ldr	r3, [r2, #28]
    51e6:	2b00      	cmp	r3, #0
    51e8:	d1fc      	bne.n	51e4 <sio2host_init+0xa0>
    51ea:	2202      	movs	r2, #2
    51ec:	682b      	ldr	r3, [r5, #0]
    51ee:	4313      	orrs	r3, r2
    51f0:	602b      	str	r3, [r5, #0]
    51f2:	6823      	ldr	r3, [r4, #0]
    51f4:	69da      	ldr	r2, [r3, #28]
    51f6:	2a00      	cmp	r2, #0
    51f8:	d1fc      	bne.n	51f4 <sio2host_init+0xb0>
    51fa:	2280      	movs	r2, #128	; 0x80
    51fc:	6859      	ldr	r1, [r3, #4]
    51fe:	0252      	lsls	r2, r2, #9
    5200:	430a      	orrs	r2, r1
    5202:	605a      	str	r2, [r3, #4]
    5204:	2201      	movs	r2, #1
    5206:	71e2      	strb	r2, [r4, #7]
    5208:	69da      	ldr	r2, [r3, #28]
    520a:	2a00      	cmp	r2, #0
    520c:	d1fc      	bne.n	5208 <sio2host_init+0xc4>
    520e:	69da      	ldr	r2, [r3, #28]
    5210:	2a00      	cmp	r2, #0
    5212:	d1fc      	bne.n	520e <sio2host_init+0xca>
    5214:	2280      	movs	r2, #128	; 0x80
    5216:	6859      	ldr	r1, [r3, #4]
    5218:	0292      	lsls	r2, r2, #10
    521a:	430a      	orrs	r2, r1
    521c:	605a      	str	r2, [r3, #4]
    521e:	2201      	movs	r2, #1
    5220:	71a2      	strb	r2, [r4, #6]
    5222:	69da      	ldr	r2, [r3, #28]
    5224:	2a00      	cmp	r2, #0
    5226:	d1fc      	bne.n	5222 <sio2host_init+0xde>
    5228:	4913      	ldr	r1, [pc, #76]	; (5278 <sio2host_init+0x134>)
    522a:	2000      	movs	r0, #0
    522c:	4b13      	ldr	r3, [pc, #76]	; (527c <sio2host_init+0x138>)
    522e:	4798      	blx	r3
    5230:	2384      	movs	r3, #132	; 0x84
    5232:	2204      	movs	r2, #4
    5234:	05db      	lsls	r3, r3, #23
    5236:	759a      	strb	r2, [r3, #22]
    5238:	4b0e      	ldr	r3, [pc, #56]	; (5274 <sio2host_init+0x130>)
    523a:	32fc      	adds	r2, #252	; 0xfc
    523c:	601a      	str	r2, [r3, #0]
    523e:	b010      	add	sp, #64	; 0x40
    5240:	bd70      	pop	{r4, r5, r6, pc}
    5242:	46c0      	nop			; (mov r8, r8)
    5244:	00040003 	.word	0x00040003
    5248:	00050003 	.word	0x00050003
    524c:	200001a4 	.word	0x200001a4
    5250:	20000ae8 	.word	0x20000ae8
    5254:	000050d5 	.word	0x000050d5
    5258:	20000ae4 	.word	0x20000ae4
    525c:	000050ad 	.word	0x000050ad
    5260:	20000ae0 	.word	0x20000ae0
    5264:	00003e55 	.word	0x00003e55
    5268:	20000024 	.word	0x20000024
    526c:	00007ebd 	.word	0x00007ebd
    5270:	000038c5 	.word	0x000038c5
    5274:	e000e100 	.word	0xe000e100
    5278:	000050ed 	.word	0x000050ed
    527c:	0000387d 	.word	0x0000387d

00005280 <AT86RFX_ISR>:
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    5280:	2201      	movs	r2, #1
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    5282:	b510      	push	{r4, lr}
    5284:	4b02      	ldr	r3, [pc, #8]	; (5290 <AT86RFX_ISR+0x10>)
    5286:	615a      	str	r2, [r3, #20]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
	PHY_PacketReceieved();
    5288:	4b02      	ldr	r3, [pc, #8]	; (5294 <AT86RFX_ISR+0x14>)
    528a:	4798      	blx	r3

}
    528c:	bd10      	pop	{r4, pc}
    528e:	46c0      	nop			; (mov r8, r8)
    5290:	40002400 	.word	0x40002400
    5294:	00002275 	.word	0x00002275

00005298 <trx_spi_init>:

void trx_spi_init(void)
{
    5298:	b570      	push	{r4, r5, r6, lr}
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    529a:	223f      	movs	r2, #63	; 0x3f
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = 10;
	config->address_enabled = false;
    529c:	2400      	movs	r4, #0
    529e:	4b34      	ldr	r3, [pc, #208]	; (5370 <trx_spi_init+0xd8>)
{
    52a0:	b084      	sub	sp, #16
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    52a2:	701a      	strb	r2, [r3, #0]
    52a4:	705c      	strb	r4, [r3, #1]
	config->address         = 0;
    52a6:	709c      	strb	r4, [r3, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    52a8:	2501      	movs	r5, #1
    52aa:	466b      	mov	r3, sp
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    52ac:	4e31      	ldr	r6, [pc, #196]	; (5374 <trx_spi_init+0xdc>)
    52ae:	705d      	strb	r5, [r3, #1]
	config->powersave  = false;
    52b0:	709c      	strb	r4, [r3, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    52b2:	701d      	strb	r5, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    52b4:	203f      	movs	r0, #63	; 0x3f
    52b6:	4b30      	ldr	r3, [pc, #192]	; (5378 <trx_spi_init+0xe0>)
    52b8:	4669      	mov	r1, sp
	slave->ss_pin          = config->ss_pin;
    52ba:	7032      	strb	r2, [r6, #0]
	slave->address_enabled = config->address_enabled;
    52bc:	7074      	strb	r4, [r6, #1]
	slave->address         = config->address;
    52be:	70b4      	strb	r4, [r6, #2]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    52c0:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    52c2:	7830      	ldrb	r0, [r6, #0]
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
	uint8_t group_index = (gpio_pin / 32);
    52c4:	0942      	lsrs	r2, r0, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    52c6:	09c3      	lsrs	r3, r0, #7
    52c8:	d150      	bne.n	536c <trx_spi_init+0xd4>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    52ca:	211f      	movs	r1, #31
    52cc:	4001      	ands	r1, r0
    52ce:	0028      	movs	r0, r5
    52d0:	4088      	lsls	r0, r1
    52d2:	0001      	movs	r1, r0
		port_base->OUTSET.reg = pin_mask;
    52d4:	4829      	ldr	r0, [pc, #164]	; (537c <trx_spi_init+0xe4>)
	config->mode             = SPI_MODE_MASTER;
    52d6:	4c2a      	ldr	r4, [pc, #168]	; (5380 <trx_spi_init+0xe8>)
    52d8:	4684      	mov	ip, r0
    52da:	01d2      	lsls	r2, r2, #7
    52dc:	4462      	add	r2, ip
    52de:	6191      	str	r1, [r2, #24]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    52e0:	0020      	movs	r0, r4
	config->generator_source = GCLK_GENERATOR_0;
    52e2:	2224      	movs	r2, #36	; 0x24
	config->data_order       = SPI_DATA_ORDER_MSB;
    52e4:	6063      	str	r3, [r4, #4]
	config->generator_source = GCLK_GENERATOR_0;
    52e6:	54a3      	strb	r3, [r4, r2]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    52e8:	60a3      	str	r3, [r4, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    52ea:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    52ec:	7463      	strb	r3, [r4, #17]
	config->master_slave_select_enable= false;
    52ee:	7523      	strb	r3, [r4, #20]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    52f0:	3a18      	subs	r2, #24
    52f2:	2100      	movs	r1, #0
    52f4:	4b23      	ldr	r3, [pc, #140]	; (5384 <trx_spi_init+0xec>)
    52f6:	3018      	adds	r0, #24
	config->mode             = SPI_MODE_MASTER;
    52f8:	7025      	strb	r5, [r4, #0]
	config->receiver_enable  = true;
    52fa:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
    52fc:	74e5      	strb	r5, [r4, #19]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    52fe:	4798      	blx	r3
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    5300:	2380      	movs	r3, #128	; 0x80
    5302:	025b      	lsls	r3, r3, #9
    5304:	60e3      	str	r3, [r4, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    5306:	4b20      	ldr	r3, [pc, #128]	; (5388 <trx_spi_init+0xf0>)
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
	spi_init(&master, AT86RFX_SPI, &config);
    5308:	4d20      	ldr	r5, [pc, #128]	; (538c <trx_spi_init+0xf4>)
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    530a:	61a3      	str	r3, [r4, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    530c:	4b20      	ldr	r3, [pc, #128]	; (5390 <trx_spi_init+0xf8>)
	spi_init(&master, AT86RFX_SPI, &config);
    530e:	0022      	movs	r2, r4
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    5310:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    5312:	2301      	movs	r3, #1
    5314:	425b      	negs	r3, r3
    5316:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    5318:	4b1e      	ldr	r3, [pc, #120]	; (5394 <trx_spi_init+0xfc>)
	spi_init(&master, AT86RFX_SPI, &config);
    531a:	491f      	ldr	r1, [pc, #124]	; (5398 <trx_spi_init+0x100>)
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    531c:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    531e:	4b1f      	ldr	r3, [pc, #124]	; (539c <trx_spi_init+0x104>)
	spi_init(&master, AT86RFX_SPI, &config);
    5320:	0028      	movs	r0, r5
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    5322:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    5324:	4b1e      	ldr	r3, [pc, #120]	; (53a0 <trx_spi_init+0x108>)
    5326:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5328:	682b      	ldr	r3, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    532a:	69dc      	ldr	r4, [r3, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    532c:	2c00      	cmp	r4, #0
    532e:	d1fc      	bne.n	532a <trx_spi_init+0x92>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    5330:	2502      	movs	r5, #2
    5332:	681a      	ldr	r2, [r3, #0]
	spi_enable(&master);

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    5334:	4668      	mov	r0, sp
    5336:	432a      	orrs	r2, r5
    5338:	601a      	str	r2, [r3, #0]
    533a:	4b1a      	ldr	r3, [pc, #104]	; (53a4 <trx_spi_init+0x10c>)
    533c:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    533e:	2380      	movs	r3, #128	; 0x80
    5340:	2220      	movs	r2, #32
    5342:	039b      	lsls	r3, r3, #14
    5344:	9200      	str	r2, [sp, #0]
    5346:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    5348:	466b      	mov	r3, sp
	eint_chan_conf.enable_async_edge_detection = false;
	#else
	eint_chan_conf.wake_if_sleeping    = true;
	#endif
	eint_chan_conf.filter_input_signal = false;
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    534a:	466a      	mov	r2, sp
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    534c:	721d      	strb	r5, [r3, #8]
	eint_chan_conf.enable_async_edge_detection = false;
    534e:	725c      	strb	r4, [r3, #9]
	eint_chan_conf.filter_input_signal = false;
    5350:	729c      	strb	r4, [r3, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    5352:	2301      	movs	r3, #1
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    5354:	4669      	mov	r1, sp
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    5356:	72d3      	strb	r3, [r2, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    5358:	2000      	movs	r0, #0
    535a:	4b13      	ldr	r3, [pc, #76]	; (53a8 <trx_spi_init+0x110>)
    535c:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    535e:	2200      	movs	r2, #0
    5360:	2100      	movs	r1, #0
    5362:	4b12      	ldr	r3, [pc, #72]	; (53ac <trx_spi_init+0x114>)
    5364:	4812      	ldr	r0, [pc, #72]	; (53b0 <trx_spi_init+0x118>)
    5366:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    5368:	b004      	add	sp, #16
    536a:	bd70      	pop	{r4, r5, r6, pc}
    536c:	61a4      	str	r4, [r4, #24]
    536e:	deff      	udf	#255	; 0xff
    5370:	20000af0 	.word	0x20000af0
    5374:	20000af4 	.word	0x20000af4
    5378:	0000343d 	.word	0x0000343d
    537c:	40002800 	.word	0x40002800
    5380:	20000af8 	.word	0x20000af8
    5384:	00007da3 	.word	0x00007da3
    5388:	003d0900 	.word	0x003d0900
    538c:	20000b30 	.word	0x20000b30
    5390:	00530005 	.word	0x00530005
    5394:	003e0005 	.word	0x003e0005
    5398:	42001000 	.word	0x42001000
    539c:	00520005 	.word	0x00520005
    53a0:	00003955 	.word	0x00003955
    53a4:	00003381 	.word	0x00003381
    53a8:	00003395 	.word	0x00003395
    53ac:	00003261 	.word	0x00003261
    53b0:	00005281 	.word	0x00005281

000053b4 <PhyReset>:

void PhyReset(void)
{
    53b4:	b570      	push	{r4, r5, r6, lr}
		port_base->OUTCLR.reg = pin_mask;
    53b6:	2280      	movs	r2, #128	; 0x80
		port_base->OUTSET.reg = pin_mask;
    53b8:	2580      	movs	r5, #128	; 0x80
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    53ba:	20a5      	movs	r0, #165	; 0xa5
    53bc:	4c06      	ldr	r4, [pc, #24]	; (53d8 <PhyReset+0x24>)
		port_base->OUTCLR.reg = pin_mask;
    53be:	4b07      	ldr	r3, [pc, #28]	; (53dc <PhyReset+0x28>)
		port_base->OUTSET.reg = pin_mask;
    53c0:	022d      	lsls	r5, r5, #8
		port_base->OUTCLR.reg = pin_mask;
    53c2:	0352      	lsls	r2, r2, #13
		port_base->OUTSET.reg = pin_mask;
    53c4:	61a5      	str	r5, [r4, #24]
    53c6:	4e06      	ldr	r6, [pc, #24]	; (53e0 <PhyReset+0x2c>)
		port_base->OUTCLR.reg = pin_mask;
    53c8:	615a      	str	r2, [r3, #20]
    53ca:	0040      	lsls	r0, r0, #1
    53cc:	47b0      	blx	r6
    53ce:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    53d0:	200a      	movs	r0, #10
    53d2:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    53d4:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    53d6:	bd70      	pop	{r4, r5, r6, pc}
    53d8:	40002880 	.word	0x40002880
    53dc:	40002800 	.word	0x40002800
    53e0:	000030b1 	.word	0x000030b1

000053e4 <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    53e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    53e6:	46ce      	mov	lr, r9
    53e8:	4647      	mov	r7, r8
    53ea:	b580      	push	{r7, lr}
    53ec:	b083      	sub	sp, #12
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    53ee:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    53f2:	425a      	negs	r2, r3
    53f4:	4153      	adcs	r3, r2
    53f6:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    53f8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    53fa:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    53fe:	2300      	movs	r3, #0
    5400:	4f32      	ldr	r7, [pc, #200]	; (54cc <trx_reg_read+0xe8>)
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    5402:	4c33      	ldr	r4, [pc, #204]	; (54d0 <trx_reg_read+0xec>)
    5404:	703b      	strb	r3, [r7, #0]
	return flags;
    5406:	9b01      	ldr	r3, [sp, #4]
    5408:	4e32      	ldr	r6, [pc, #200]	; (54d4 <trx_reg_read+0xf0>)
    540a:	4698      	mov	r8, r3
	addr |= READ_ACCESS_COMMAND;
    540c:	2380      	movs	r3, #128	; 0x80
    540e:	4318      	orrs	r0, r3
	spi_select_slave(&master, &slave, true);
    5410:	0031      	movs	r1, r6
	addr |= READ_ACCESS_COMMAND;
    5412:	4681      	mov	r9, r0
	spi_select_slave(&master, &slave, true);
    5414:	2201      	movs	r2, #1
    5416:	0020      	movs	r0, r4
    5418:	4d2f      	ldr	r5, [pc, #188]	; (54d8 <trx_reg_read+0xf4>)
    541a:	47a8      	blx	r5

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    541c:	2101      	movs	r1, #1
    541e:	6823      	ldr	r3, [r4, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5420:	7e1a      	ldrb	r2, [r3, #24]
    5422:	4211      	tst	r1, r2
    5424:	d0fc      	beq.n	5420 <trx_reg_read+0x3c>
    5426:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    5428:	4211      	tst	r1, r2
    542a:	d001      	beq.n	5430 <trx_reg_read+0x4c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    542c:	464a      	mov	r2, r9
    542e:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    5430:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5432:	7e1a      	ldrb	r2, [r3, #24]
    5434:	4211      	tst	r1, r2
    5436:	d0fc      	beq.n	5432 <trx_reg_read+0x4e>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    5438:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    543a:	7e1a      	ldrb	r2, [r3, #24]
    543c:	4211      	tst	r1, r2
    543e:	d0fc      	beq.n	543a <trx_reg_read+0x56>
    5440:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    5442:	4211      	tst	r1, r2
    5444:	d00a      	beq.n	545c <trx_reg_read+0x78>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5446:	8b5a      	ldrh	r2, [r3, #26]
    5448:	0752      	lsls	r2, r2, #29
    544a:	d500      	bpl.n	544e <trx_reg_read+0x6a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    544c:	8359      	strh	r1, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    544e:	79a2      	ldrb	r2, [r4, #6]
    5450:	2a01      	cmp	r2, #1
    5452:	d034      	beq.n	54be <trx_reg_read+0xda>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5454:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5456:	4921      	ldr	r1, [pc, #132]	; (54dc <trx_reg_read+0xf8>)
    5458:	b2d2      	uxtb	r2, r2
    545a:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    545c:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    545e:	7e1a      	ldrb	r2, [r3, #24]
    5460:	4211      	tst	r1, r2
    5462:	d0fc      	beq.n	545e <trx_reg_read+0x7a>
    5464:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5466:	4211      	tst	r1, r2
    5468:	d001      	beq.n	546e <trx_reg_read+0x8a>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    546a:	2200      	movs	r2, #0
    546c:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    546e:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5470:	7e1a      	ldrb	r2, [r3, #24]
    5472:	4211      	tst	r1, r2
    5474:	d0fc      	beq.n	5470 <trx_reg_read+0x8c>
	}
	while (!spi_is_ready_to_read(&master)) {
    5476:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5478:	7e1a      	ldrb	r2, [r3, #24]
    547a:	4211      	tst	r1, r2
    547c:	d0fc      	beq.n	5478 <trx_reg_read+0x94>
	if (!spi_is_ready_to_read(module)) {
    547e:	2000      	movs	r0, #0
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5480:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    5482:	4681      	mov	r9, r0
    5484:	4211      	tst	r1, r2
    5486:	d005      	beq.n	5494 <trx_reg_read+0xb0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5488:	8b5a      	ldrh	r2, [r3, #26]
    548a:	0752      	lsls	r2, r2, #29
    548c:	d415      	bmi.n	54ba <trx_reg_read+0xd6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    548e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5490:	b2db      	uxtb	r3, r3
    5492:	4699      	mov	r9, r3
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    5494:	2200      	movs	r2, #0
    5496:	0031      	movs	r1, r6
    5498:	0020      	movs	r0, r4
    549a:	47a8      	blx	r5
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    549c:	23ff      	movs	r3, #255	; 0xff
    549e:	4642      	mov	r2, r8
    54a0:	4213      	tst	r3, r2
    54a2:	d004      	beq.n	54ae <trx_reg_read+0xca>
		cpu_irq_enable();
    54a4:	3bfe      	subs	r3, #254	; 0xfe
    54a6:	703b      	strb	r3, [r7, #0]
    54a8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    54ac:	b662      	cpsie	i
	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
}
    54ae:	4648      	mov	r0, r9
    54b0:	b003      	add	sp, #12
    54b2:	bc0c      	pop	{r2, r3}
    54b4:	4690      	mov	r8, r2
    54b6:	4699      	mov	r9, r3
    54b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    54ba:	8359      	strh	r1, [r3, #26]
    54bc:	e7e7      	b.n	548e <trx_reg_read+0xaa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    54be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    54c0:	4906      	ldr	r1, [pc, #24]	; (54dc <trx_reg_read+0xf8>)
    54c2:	05d2      	lsls	r2, r2, #23
    54c4:	0dd2      	lsrs	r2, r2, #23
    54c6:	800a      	strh	r2, [r1, #0]
    54c8:	e7c8      	b.n	545c <trx_reg_read+0x78>
    54ca:	46c0      	nop			; (mov r8, r8)
    54cc:	20000020 	.word	0x20000020
    54d0:	20000b30 	.word	0x20000b30
    54d4:	20000af4 	.word	0x20000af4
    54d8:	00003d81 	.word	0x00003d81
    54dc:	20000aec 	.word	0x20000aec

000054e0 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    54e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    54e2:	464f      	mov	r7, r9
    54e4:	46d6      	mov	lr, sl
    54e6:	4646      	mov	r6, r8
    54e8:	b5c0      	push	{r6, r7, lr}
    54ea:	4689      	mov	r9, r1
    54ec:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    54ee:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    54f2:	425a      	negs	r2, r3
    54f4:	4153      	adcs	r3, r2
    54f6:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    54f8:	b672      	cpsid	i
    54fa:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    54fe:	2300      	movs	r3, #0
    5500:	4f35      	ldr	r7, [pc, #212]	; (55d8 <trx_reg_write+0xf8>)
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    5502:	4c36      	ldr	r4, [pc, #216]	; (55dc <trx_reg_write+0xfc>)
    5504:	703b      	strb	r3, [r7, #0]
	return flags;
    5506:	9b01      	ldr	r3, [sp, #4]
    5508:	4e35      	ldr	r6, [pc, #212]	; (55e0 <trx_reg_write+0x100>)
    550a:	4698      	mov	r8, r3
	addr |= WRITE_ACCESS_COMMAND;
    550c:	23c0      	movs	r3, #192	; 0xc0
    550e:	4318      	orrs	r0, r3
	spi_select_slave(&master, &slave, true);
    5510:	0031      	movs	r1, r6
	addr |= WRITE_ACCESS_COMMAND;
    5512:	4682      	mov	sl, r0
	spi_select_slave(&master, &slave, true);
    5514:	2201      	movs	r2, #1
    5516:	0020      	movs	r0, r4
    5518:	4d32      	ldr	r5, [pc, #200]	; (55e4 <trx_reg_write+0x104>)
    551a:	47a8      	blx	r5

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    551c:	2101      	movs	r1, #1
    551e:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5520:	7e1a      	ldrb	r2, [r3, #24]
    5522:	4211      	tst	r1, r2
    5524:	d0fc      	beq.n	5520 <trx_reg_write+0x40>
    5526:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5528:	4211      	tst	r1, r2
    552a:	d001      	beq.n	5530 <trx_reg_write+0x50>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    552c:	4652      	mov	r2, sl
    552e:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    5530:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5532:	7e1a      	ldrb	r2, [r3, #24]
    5534:	4211      	tst	r1, r2
    5536:	d0fc      	beq.n	5532 <trx_reg_write+0x52>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    5538:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    553a:	7e1a      	ldrb	r2, [r3, #24]
    553c:	4211      	tst	r1, r2
    553e:	d0fc      	beq.n	553a <trx_reg_write+0x5a>
    5540:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    5542:	4211      	tst	r1, r2
    5544:	d00a      	beq.n	555c <trx_reg_write+0x7c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5546:	8b5a      	ldrh	r2, [r3, #26]
    5548:	0752      	lsls	r2, r2, #29
    554a:	d500      	bpl.n	554e <trx_reg_write+0x6e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    554c:	8359      	strh	r1, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    554e:	79a2      	ldrb	r2, [r4, #6]
    5550:	2a01      	cmp	r2, #1
    5552:	d03a      	beq.n	55ca <trx_reg_write+0xea>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5554:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5556:	4924      	ldr	r1, [pc, #144]	; (55e8 <trx_reg_write+0x108>)
    5558:	b2d2      	uxtb	r2, r2
    555a:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    555c:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    555e:	7e1a      	ldrb	r2, [r3, #24]
    5560:	4211      	tst	r1, r2
    5562:	d0fc      	beq.n	555e <trx_reg_write+0x7e>
    5564:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5566:	4211      	tst	r1, r2
    5568:	d001      	beq.n	556e <trx_reg_write+0x8e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    556a:	464a      	mov	r2, r9
    556c:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    556e:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5570:	7e1a      	ldrb	r2, [r3, #24]
    5572:	4211      	tst	r1, r2
    5574:	d0fc      	beq.n	5570 <trx_reg_write+0x90>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    5576:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5578:	7e1a      	ldrb	r2, [r3, #24]
    557a:	4211      	tst	r1, r2
    557c:	d0fc      	beq.n	5578 <trx_reg_write+0x98>
    557e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    5580:	4211      	tst	r1, r2
    5582:	d00a      	beq.n	559a <trx_reg_write+0xba>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5584:	8b5a      	ldrh	r2, [r3, #26]
    5586:	0752      	lsls	r2, r2, #29
    5588:	d500      	bpl.n	558c <trx_reg_write+0xac>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    558a:	8359      	strh	r1, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    558c:	79a2      	ldrb	r2, [r4, #6]
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    558e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5590:	2a01      	cmp	r2, #1
    5592:	d015      	beq.n	55c0 <trx_reg_write+0xe0>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5594:	4a14      	ldr	r2, [pc, #80]	; (55e8 <trx_reg_write+0x108>)
    5596:	b2db      	uxtb	r3, r3
    5598:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    559a:	2200      	movs	r2, #0
    559c:	0031      	movs	r1, r6
    559e:	0020      	movs	r0, r4
    55a0:	47a8      	blx	r5
	if (cpu_irq_is_enabled_flags(flags))
    55a2:	23ff      	movs	r3, #255	; 0xff
    55a4:	4642      	mov	r2, r8
    55a6:	4213      	tst	r3, r2
    55a8:	d004      	beq.n	55b4 <trx_reg_write+0xd4>
		cpu_irq_enable();
    55aa:	3bfe      	subs	r3, #254	; 0xfe
    55ac:	703b      	strb	r3, [r7, #0]
    55ae:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    55b2:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    55b4:	b002      	add	sp, #8
    55b6:	bc1c      	pop	{r2, r3, r4}
    55b8:	4690      	mov	r8, r2
    55ba:	4699      	mov	r9, r3
    55bc:	46a2      	mov	sl, r4
    55be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    55c0:	05db      	lsls	r3, r3, #23
    55c2:	4a09      	ldr	r2, [pc, #36]	; (55e8 <trx_reg_write+0x108>)
    55c4:	0ddb      	lsrs	r3, r3, #23
    55c6:	8013      	strh	r3, [r2, #0]
    55c8:	e7e7      	b.n	559a <trx_reg_write+0xba>
    55ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    55cc:	4906      	ldr	r1, [pc, #24]	; (55e8 <trx_reg_write+0x108>)
    55ce:	05d2      	lsls	r2, r2, #23
    55d0:	0dd2      	lsrs	r2, r2, #23
    55d2:	800a      	strh	r2, [r1, #0]
    55d4:	e7c2      	b.n	555c <trx_reg_write+0x7c>
    55d6:	46c0      	nop			; (mov r8, r8)
    55d8:	20000020 	.word	0x20000020
    55dc:	20000b30 	.word	0x20000b30
    55e0:	20000af4 	.word	0x20000af4
    55e4:	00003d81 	.word	0x00003d81
    55e8:	20000aec 	.word	0x20000aec

000055ec <trx_frame_read>:
	new_value |= current_reg_value;
	trx_reg_write(reg_addr, new_value);
}

void trx_frame_read(uint8_t *data, uint8_t length)
{
    55ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    55ee:	4645      	mov	r5, r8
    55f0:	46de      	mov	lr, fp
    55f2:	4657      	mov	r7, sl
    55f4:	464e      	mov	r6, r9
    55f6:	b5e0      	push	{r5, r6, r7, lr}
    55f8:	0004      	movs	r4, r0
    55fa:	b085      	sub	sp, #20
    55fc:	4688      	mov	r8, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    55fe:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    5602:	425a      	negs	r2, r3
    5604:	4153      	adcs	r3, r2
    5606:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    5608:	b672      	cpsid	i
    560a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    560e:	2300      	movs	r3, #0
    5610:	4a40      	ldr	r2, [pc, #256]	; (5714 <trx_frame_read+0x128>)
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    5612:	4d41      	ldr	r5, [pc, #260]	; (5718 <trx_frame_read+0x12c>)
    5614:	7013      	strb	r3, [r2, #0]
	return flags;
    5616:	9b03      	ldr	r3, [sp, #12]
    5618:	4940      	ldr	r1, [pc, #256]	; (571c <trx_frame_read+0x130>)
    561a:	9301      	str	r3, [sp, #4]
    561c:	4b40      	ldr	r3, [pc, #256]	; (5720 <trx_frame_read+0x134>)
    561e:	2201      	movs	r2, #1
    5620:	0028      	movs	r0, r5
    5622:	469a      	mov	sl, r3
    5624:	4798      	blx	r3

	temp = TRX_CMD_FR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    5626:	2101      	movs	r1, #1
    5628:	682b      	ldr	r3, [r5, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    562a:	7e1a      	ldrb	r2, [r3, #24]
    562c:	4211      	tst	r1, r2
    562e:	d0fc      	beq.n	562a <trx_frame_read+0x3e>
    5630:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5632:	4211      	tst	r1, r2
    5634:	d001      	beq.n	563a <trx_frame_read+0x4e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5636:	2220      	movs	r2, #32
    5638:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    563a:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    563c:	7e1a      	ldrb	r2, [r3, #24]
    563e:	4211      	tst	r1, r2
    5640:	d0fc      	beq.n	563c <trx_frame_read+0x50>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    5642:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5644:	7e1a      	ldrb	r2, [r3, #24]
    5646:	4211      	tst	r1, r2
    5648:	d0fc      	beq.n	5644 <trx_frame_read+0x58>
    564a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    564c:	4211      	tst	r1, r2
    564e:	d00a      	beq.n	5666 <trx_frame_read+0x7a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5650:	8b5a      	ldrh	r2, [r3, #26]
    5652:	0752      	lsls	r2, r2, #29
    5654:	d500      	bpl.n	5658 <trx_frame_read+0x6c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5656:	8359      	strh	r1, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5658:	79aa      	ldrb	r2, [r5, #6]
    565a:	2a01      	cmp	r2, #1
    565c:	d053      	beq.n	5706 <trx_frame_read+0x11a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    565e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5660:	4930      	ldr	r1, [pc, #192]	; (5724 <trx_frame_read+0x138>)
    5662:	b2d2      	uxtb	r2, r2
    5664:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    5666:	4642      	mov	r2, r8
    5668:	4641      	mov	r1, r8
    566a:	3a01      	subs	r2, #1
    566c:	b2d2      	uxtb	r2, r2
    566e:	2900      	cmp	r1, #0
    5670:	d034      	beq.n	56dc <trx_frame_read+0xf0>
    5672:	3201      	adds	r2, #1
    5674:	4691      	mov	r9, r2
    5676:	2220      	movs	r2, #32
    5678:	4690      	mov	r8, r2
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    567a:	2200      	movs	r2, #0
		while (!spi_is_ready_to_write(&master)) {
    567c:	2101      	movs	r1, #1
    567e:	4693      	mov	fp, r2
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    5680:	2702      	movs	r7, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    5682:	2004      	movs	r0, #4
    5684:	2604      	movs	r6, #4
    5686:	44a1      	add	r9, r4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5688:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    568a:	4211      	tst	r1, r2
    568c:	d0fc      	beq.n	5688 <trx_frame_read+0x9c>
    568e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5690:	4211      	tst	r1, r2
    5692:	d001      	beq.n	5698 <trx_frame_read+0xac>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5694:	465a      	mov	r2, fp
    5696:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5698:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    569a:	4217      	tst	r7, r2
    569c:	d0fc      	beq.n	5698 <trx_frame_read+0xac>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    569e:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    56a0:	4210      	tst	r0, r2
    56a2:	d0fc      	beq.n	569e <trx_frame_read+0xb2>
    56a4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    56a6:	4216      	tst	r6, r2
    56a8:	d009      	beq.n	56be <trx_frame_read+0xd2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    56aa:	8b5a      	ldrh	r2, [r3, #26]
    56ac:	4210      	tst	r0, r2
    56ae:	d000      	beq.n	56b2 <trx_frame_read+0xc6>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    56b0:	8358      	strh	r0, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    56b2:	79aa      	ldrb	r2, [r5, #6]
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    56b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    56b6:	2a01      	cmp	r2, #1
    56b8:	d008      	beq.n	56cc <trx_frame_read+0xe0>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    56ba:	b2db      	uxtb	r3, r3
    56bc:	4698      	mov	r8, r3
		}
		spi_read(&master, &temp);
		*data = temp;
    56be:	4643      	mov	r3, r8
    56c0:	7023      	strb	r3, [r4, #0]
		data++;
    56c2:	3401      	adds	r4, #1
	while (length--) {
    56c4:	454c      	cmp	r4, r9
    56c6:	d009      	beq.n	56dc <trx_frame_read+0xf0>
    56c8:	682b      	ldr	r3, [r5, #0]
    56ca:	e7dd      	b.n	5688 <trx_frame_read+0x9c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    56cc:	05db      	lsls	r3, r3, #23
    56ce:	0ddb      	lsrs	r3, r3, #23
    56d0:	4698      	mov	r8, r3
		*data = temp;
    56d2:	4643      	mov	r3, r8
    56d4:	7023      	strb	r3, [r4, #0]
		data++;
    56d6:	3401      	adds	r4, #1
	while (length--) {
    56d8:	454c      	cmp	r4, r9
    56da:	d1f5      	bne.n	56c8 <trx_frame_read+0xdc>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    56dc:	2200      	movs	r2, #0
    56de:	490f      	ldr	r1, [pc, #60]	; (571c <trx_frame_read+0x130>)
    56e0:	0028      	movs	r0, r5
    56e2:	47d0      	blx	sl
	if (cpu_irq_is_enabled_flags(flags))
    56e4:	23ff      	movs	r3, #255	; 0xff
    56e6:	9a01      	ldr	r2, [sp, #4]
    56e8:	4213      	tst	r3, r2
    56ea:	d005      	beq.n	56f8 <trx_frame_read+0x10c>
		cpu_irq_enable();
    56ec:	2301      	movs	r3, #1
    56ee:	4a09      	ldr	r2, [pc, #36]	; (5714 <trx_frame_read+0x128>)
    56f0:	7013      	strb	r3, [r2, #0]
    56f2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    56f6:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    56f8:	b005      	add	sp, #20
    56fa:	bc3c      	pop	{r2, r3, r4, r5}
    56fc:	4690      	mov	r8, r2
    56fe:	4699      	mov	r9, r3
    5700:	46a2      	mov	sl, r4
    5702:	46ab      	mov	fp, r5
    5704:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5706:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5708:	4906      	ldr	r1, [pc, #24]	; (5724 <trx_frame_read+0x138>)
    570a:	05d2      	lsls	r2, r2, #23
    570c:	0dd2      	lsrs	r2, r2, #23
    570e:	800a      	strh	r2, [r1, #0]
    5710:	e7a9      	b.n	5666 <trx_frame_read+0x7a>
    5712:	46c0      	nop			; (mov r8, r8)
    5714:	20000020 	.word	0x20000020
    5718:	20000b30 	.word	0x20000b30
    571c:	20000af4 	.word	0x20000af4
    5720:	00003d81 	.word	0x00003d81
    5724:	20000aec 	.word	0x20000aec

00005728 <trx_frame_write>:

void trx_frame_write(uint8_t *data, uint8_t length)
{
    5728:	b5f0      	push	{r4, r5, r6, r7, lr}
    572a:	464e      	mov	r6, r9
    572c:	46de      	mov	lr, fp
    572e:	4657      	mov	r7, sl
    5730:	4645      	mov	r5, r8
    5732:	b5e0      	push	{r5, r6, r7, lr}
    5734:	0004      	movs	r4, r0
    5736:	b085      	sub	sp, #20
    5738:	000e      	movs	r6, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    573a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    573e:	425a      	negs	r2, r3
    5740:	4153      	adcs	r3, r2
    5742:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    5744:	b672      	cpsid	i
    5746:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    574a:	2300      	movs	r3, #0
    574c:	4a40      	ldr	r2, [pc, #256]	; (5850 <trx_frame_write+0x128>)
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    574e:	4841      	ldr	r0, [pc, #260]	; (5854 <trx_frame_write+0x12c>)
    5750:	7013      	strb	r3, [r2, #0]
	return flags;
    5752:	9b03      	ldr	r3, [sp, #12]
    5754:	2201      	movs	r2, #1
    5756:	9301      	str	r3, [sp, #4]
    5758:	4b3f      	ldr	r3, [pc, #252]	; (5858 <trx_frame_write+0x130>)
    575a:	0019      	movs	r1, r3
    575c:	4698      	mov	r8, r3
    575e:	4b3f      	ldr	r3, [pc, #252]	; (585c <trx_frame_write+0x134>)
    5760:	4798      	blx	r3

	temp = TRX_CMD_FW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    5762:	2101      	movs	r1, #1
    5764:	4b3b      	ldr	r3, [pc, #236]	; (5854 <trx_frame_write+0x12c>)
    5766:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5768:	7e1a      	ldrb	r2, [r3, #24]
    576a:	4211      	tst	r1, r2
    576c:	d0fc      	beq.n	5768 <trx_frame_write+0x40>
    576e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5770:	4211      	tst	r1, r2
    5772:	d001      	beq.n	5778 <trx_frame_write+0x50>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5774:	2260      	movs	r2, #96	; 0x60
    5776:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    5778:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    577a:	7e1a      	ldrb	r2, [r3, #24]
    577c:	4211      	tst	r1, r2
    577e:	d0fc      	beq.n	577a <trx_frame_write+0x52>
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    5780:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5782:	7e1a      	ldrb	r2, [r3, #24]
    5784:	4211      	tst	r1, r2
    5786:	d0fc      	beq.n	5782 <trx_frame_write+0x5a>
    5788:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    578a:	4211      	tst	r1, r2
    578c:	d00b      	beq.n	57a6 <trx_frame_write+0x7e>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    578e:	8b5a      	ldrh	r2, [r3, #26]
    5790:	0752      	lsls	r2, r2, #29
    5792:	d500      	bpl.n	5796 <trx_frame_write+0x6e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5794:	8359      	strh	r1, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5796:	4a2f      	ldr	r2, [pc, #188]	; (5854 <trx_frame_write+0x12c>)
    5798:	7992      	ldrb	r2, [r2, #6]
    579a:	2a01      	cmp	r2, #1
    579c:	d051      	beq.n	5842 <trx_frame_write+0x11a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    579e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    57a0:	492f      	ldr	r1, [pc, #188]	; (5860 <trx_frame_write+0x138>)
    57a2:	b2d2      	uxtb	r2, r2
    57a4:	800a      	strh	r2, [r1, #0]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    57a6:	4a2b      	ldr	r2, [pc, #172]	; (5854 <trx_frame_write+0x12c>)
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    57a8:	2104      	movs	r1, #4
    57aa:	7992      	ldrb	r2, [r2, #6]
    57ac:	4689      	mov	r9, r1
    57ae:	4692      	mov	sl, r2
		*rx_data = (uint8_t)spi_module->DATA.reg;
    57b0:	492b      	ldr	r1, [pc, #172]	; (5860 <trx_frame_write+0x138>)
	while (length--) {
    57b2:	3e01      	subs	r6, #1
    57b4:	b2f6      	uxtb	r6, r6
    57b6:	0020      	movs	r0, r4
		while (!spi_is_ready_to_write(&master)) {
    57b8:	2201      	movs	r2, #1
		while (!spi_is_write_complete(&master)) {
    57ba:	2502      	movs	r5, #2
		while (!spi_is_ready_to_read(&master)) {
    57bc:	2404      	movs	r4, #4
    57be:	468b      	mov	fp, r1
    57c0:	46d4      	mov	ip, sl
	while (length--) {
    57c2:	2eff      	cmp	r6, #255	; 0xff
    57c4:	d021      	beq.n	580a <trx_frame_write+0xe2>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    57c6:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    57c8:	420a      	tst	r2, r1
    57ca:	d0fc      	beq.n	57c6 <trx_frame_write+0x9e>
    57cc:	7e19      	ldrb	r1, [r3, #24]
		spi_write(&master, *data++);
    57ce:	7807      	ldrb	r7, [r0, #0]
	if (!spi_is_ready_to_write(module)) {
    57d0:	420a      	tst	r2, r1
    57d2:	d000      	beq.n	57d6 <trx_frame_write+0xae>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    57d4:	629f      	str	r7, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    57d6:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    57d8:	420d      	tst	r5, r1
    57da:	d0fc      	beq.n	57d6 <trx_frame_write+0xae>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    57dc:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    57de:	420c      	tst	r4, r1
    57e0:	d0fc      	beq.n	57dc <trx_frame_write+0xb4>
	if (!spi_is_ready_to_read(module)) {
    57e2:	464f      	mov	r7, r9
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    57e4:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    57e6:	420f      	tst	r7, r1
    57e8:	d00a      	beq.n	5800 <trx_frame_write+0xd8>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    57ea:	8b59      	ldrh	r1, [r3, #26]
    57ec:	420c      	tst	r4, r1
    57ee:	d000      	beq.n	57f2 <trx_frame_write+0xca>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    57f0:	835c      	strh	r4, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    57f2:	4661      	mov	r1, ip
    57f4:	2901      	cmp	r1, #1
    57f6:	d01d      	beq.n	5834 <trx_frame_write+0x10c>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    57f8:	465f      	mov	r7, fp
    57fa:	6a99      	ldr	r1, [r3, #40]	; 0x28
    57fc:	b2c9      	uxtb	r1, r1
    57fe:	8039      	strh	r1, [r7, #0]
    5800:	3001      	adds	r0, #1
	while (length--) {
    5802:	3e01      	subs	r6, #1
    5804:	b2f6      	uxtb	r6, r6
    5806:	2eff      	cmp	r6, #255	; 0xff
    5808:	d1dd      	bne.n	57c6 <trx_frame_write+0x9e>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    580a:	4b14      	ldr	r3, [pc, #80]	; (585c <trx_frame_write+0x134>)
    580c:	2200      	movs	r2, #0
    580e:	4641      	mov	r1, r8
    5810:	4810      	ldr	r0, [pc, #64]	; (5854 <trx_frame_write+0x12c>)
    5812:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    5814:	9b01      	ldr	r3, [sp, #4]
    5816:	421e      	tst	r6, r3
    5818:	d005      	beq.n	5826 <trx_frame_write+0xfe>
		cpu_irq_enable();
    581a:	2301      	movs	r3, #1
    581c:	4a0c      	ldr	r2, [pc, #48]	; (5850 <trx_frame_write+0x128>)
    581e:	7013      	strb	r3, [r2, #0]
    5820:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5824:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    5826:	b005      	add	sp, #20
    5828:	bc3c      	pop	{r2, r3, r4, r5}
    582a:	4690      	mov	r8, r2
    582c:	4699      	mov	r9, r3
    582e:	46a2      	mov	sl, r4
    5830:	46ab      	mov	fp, r5
    5832:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5834:	6a99      	ldr	r1, [r3, #40]	; 0x28
    5836:	4f0a      	ldr	r7, [pc, #40]	; (5860 <trx_frame_write+0x138>)
    5838:	05c9      	lsls	r1, r1, #23
    583a:	0dc9      	lsrs	r1, r1, #23
    583c:	8039      	strh	r1, [r7, #0]
    583e:	3001      	adds	r0, #1
    5840:	e7df      	b.n	5802 <trx_frame_write+0xda>
    5842:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5844:	4906      	ldr	r1, [pc, #24]	; (5860 <trx_frame_write+0x138>)
    5846:	05d2      	lsls	r2, r2, #23
    5848:	0dd2      	lsrs	r2, r2, #23
    584a:	800a      	strh	r2, [r1, #0]
    584c:	e7ab      	b.n	57a6 <trx_frame_write+0x7e>
    584e:	46c0      	nop			; (mov r8, r8)
    5850:	20000020 	.word	0x20000020
    5854:	20000b30 	.word	0x20000b30
    5858:	20000af4 	.word	0x20000af4
    585c:	00003d81 	.word	0x00003d81
    5860:	20000aec 	.word	0x20000aec

00005864 <trx_sram_write>:
 * @param addr Start address in the SRAM for the write operation
 * @param data Pointer to the data to be written into SRAM
 * @param length Number of bytes to be written into SRAM
 */
void trx_sram_write(uint8_t addr, uint8_t *data, uint8_t length)
{
    5864:	b5f0      	push	{r4, r5, r6, r7, lr}
    5866:	464e      	mov	r6, r9
    5868:	4645      	mov	r5, r8
    586a:	46de      	mov	lr, fp
    586c:	4657      	mov	r7, sl
    586e:	b5e0      	push	{r5, r6, r7, lr}
    5870:	000c      	movs	r4, r1
    5872:	b085      	sub	sp, #20
    5874:	0005      	movs	r5, r0
    5876:	0016      	movs	r6, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5878:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    587c:	425a      	negs	r2, r3
    587e:	4153      	adcs	r3, r2
    5880:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    5882:	b672      	cpsid	i
    5884:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    5888:	2300      	movs	r3, #0
    588a:	4a53      	ldr	r2, [pc, #332]	; (59d8 <trx_sram_write+0x174>)
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    588c:	4853      	ldr	r0, [pc, #332]	; (59dc <trx_sram_write+0x178>)
    588e:	7013      	strb	r3, [r2, #0]
	return flags;
    5890:	9b03      	ldr	r3, [sp, #12]
    5892:	2201      	movs	r2, #1
    5894:	9301      	str	r3, [sp, #4]
    5896:	4b52      	ldr	r3, [pc, #328]	; (59e0 <trx_sram_write+0x17c>)
    5898:	0019      	movs	r1, r3
    589a:	4698      	mov	r8, r3
    589c:	4b51      	ldr	r3, [pc, #324]	; (59e4 <trx_sram_write+0x180>)
    589e:	4798      	blx	r3

	/* Send the command byte */
	temp = TRX_CMD_SW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    58a0:	2101      	movs	r1, #1
    58a2:	4b4e      	ldr	r3, [pc, #312]	; (59dc <trx_sram_write+0x178>)
    58a4:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    58a6:	7e1a      	ldrb	r2, [r3, #24]
    58a8:	4211      	tst	r1, r2
    58aa:	d0fc      	beq.n	58a6 <trx_sram_write+0x42>
    58ac:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    58ae:	4211      	tst	r1, r2
    58b0:	d001      	beq.n	58b6 <trx_sram_write+0x52>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    58b2:	2240      	movs	r2, #64	; 0x40
    58b4:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    58b6:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    58b8:	7e1a      	ldrb	r2, [r3, #24]
    58ba:	4211      	tst	r1, r2
    58bc:	d0fc      	beq.n	58b8 <trx_sram_write+0x54>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    58be:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    58c0:	7e1a      	ldrb	r2, [r3, #24]
    58c2:	4211      	tst	r1, r2
    58c4:	d0fc      	beq.n	58c0 <trx_sram_write+0x5c>
    58c6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    58c8:	4211      	tst	r1, r2
    58ca:	d00c      	beq.n	58e6 <trx_sram_write+0x82>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    58cc:	8b5a      	ldrh	r2, [r3, #26]
    58ce:	0752      	lsls	r2, r2, #29
    58d0:	d500      	bpl.n	58d4 <trx_sram_write+0x70>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    58d2:	8359      	strh	r1, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    58d4:	4a41      	ldr	r2, [pc, #260]	; (59dc <trx_sram_write+0x178>)
    58d6:	7992      	ldrb	r2, [r2, #6]
    58d8:	2a01      	cmp	r2, #1
    58da:	d100      	bne.n	58de <trx_sram_write+0x7a>
    58dc:	e076      	b.n	59cc <trx_sram_write+0x168>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    58de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    58e0:	4941      	ldr	r1, [pc, #260]	; (59e8 <trx_sram_write+0x184>)
    58e2:	b2d2      	uxtb	r2, r2
    58e4:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the write operation should start */
	while (!spi_is_ready_to_write(&master)) {
    58e6:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    58e8:	7e1a      	ldrb	r2, [r3, #24]
    58ea:	4211      	tst	r1, r2
    58ec:	d0fc      	beq.n	58e8 <trx_sram_write+0x84>
    58ee:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    58f0:	4211      	tst	r1, r2
    58f2:	d000      	beq.n	58f6 <trx_sram_write+0x92>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    58f4:	629d      	str	r5, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    58f6:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    58f8:	7e1a      	ldrb	r2, [r3, #24]
    58fa:	4211      	tst	r1, r2
    58fc:	d0fc      	beq.n	58f8 <trx_sram_write+0x94>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    58fe:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5900:	7e1a      	ldrb	r2, [r3, #24]
    5902:	4211      	tst	r1, r2
    5904:	d0fc      	beq.n	5900 <trx_sram_write+0x9c>
    5906:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    5908:	4211      	tst	r1, r2
    590a:	d00b      	beq.n	5924 <trx_sram_write+0xc0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    590c:	8b5a      	ldrh	r2, [r3, #26]
    590e:	0752      	lsls	r2, r2, #29
    5910:	d500      	bpl.n	5914 <trx_sram_write+0xb0>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5912:	8359      	strh	r1, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5914:	4a31      	ldr	r2, [pc, #196]	; (59dc <trx_sram_write+0x178>)
    5916:	7992      	ldrb	r2, [r2, #6]
    5918:	2a01      	cmp	r2, #1
    591a:	d051      	beq.n	59c0 <trx_sram_write+0x15c>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    591c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    591e:	4932      	ldr	r1, [pc, #200]	; (59e8 <trx_sram_write+0x184>)
    5920:	b2d2      	uxtb	r2, r2
    5922:	800a      	strh	r2, [r1, #0]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5924:	4a2d      	ldr	r2, [pc, #180]	; (59dc <trx_sram_write+0x178>)
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    5926:	3e01      	subs	r6, #1
    5928:	7992      	ldrb	r2, [r2, #6]
    592a:	b2f6      	uxtb	r6, r6
    592c:	4692      	mov	sl, r2
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    592e:	2204      	movs	r2, #4
    5930:	4691      	mov	r9, r2
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5932:	4a2d      	ldr	r2, [pc, #180]	; (59e8 <trx_sram_write+0x184>)
    5934:	0021      	movs	r1, r4
		while (!spi_is_ready_to_write(&master)) {
    5936:	2001      	movs	r0, #1
		while (!spi_is_write_complete(&master)) {
    5938:	2502      	movs	r5, #2
		while (!spi_is_ready_to_read(&master)) {
    593a:	2404      	movs	r4, #4
    593c:	4693      	mov	fp, r2
    593e:	46d4      	mov	ip, sl
	while (length--) {
    5940:	2eff      	cmp	r6, #255	; 0xff
    5942:	d021      	beq.n	5988 <trx_sram_write+0x124>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5944:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    5946:	4210      	tst	r0, r2
    5948:	d0fc      	beq.n	5944 <trx_sram_write+0xe0>
    594a:	7e1a      	ldrb	r2, [r3, #24]
		spi_write(&master, *data++);
    594c:	780f      	ldrb	r7, [r1, #0]
	if (!spi_is_ready_to_write(module)) {
    594e:	4210      	tst	r0, r2
    5950:	d000      	beq.n	5954 <trx_sram_write+0xf0>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5952:	629f      	str	r7, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5954:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    5956:	4215      	tst	r5, r2
    5958:	d0fc      	beq.n	5954 <trx_sram_write+0xf0>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    595a:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    595c:	4214      	tst	r4, r2
    595e:	d0fc      	beq.n	595a <trx_sram_write+0xf6>
	if (!spi_is_ready_to_read(module)) {
    5960:	464f      	mov	r7, r9
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5962:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    5964:	4217      	tst	r7, r2
    5966:	d00a      	beq.n	597e <trx_sram_write+0x11a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5968:	8b5a      	ldrh	r2, [r3, #26]
    596a:	4214      	tst	r4, r2
    596c:	d000      	beq.n	5970 <trx_sram_write+0x10c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    596e:	835c      	strh	r4, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5970:	4662      	mov	r2, ip
    5972:	2a01      	cmp	r2, #1
    5974:	d01d      	beq.n	59b2 <trx_sram_write+0x14e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5976:	465f      	mov	r7, fp
    5978:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    597a:	b2d2      	uxtb	r2, r2
    597c:	803a      	strh	r2, [r7, #0]
    597e:	3101      	adds	r1, #1
	while (length--) {
    5980:	3e01      	subs	r6, #1
    5982:	b2f6      	uxtb	r6, r6
    5984:	2eff      	cmp	r6, #255	; 0xff
    5986:	d1dd      	bne.n	5944 <trx_sram_write+0xe0>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    5988:	4b16      	ldr	r3, [pc, #88]	; (59e4 <trx_sram_write+0x180>)
    598a:	2200      	movs	r2, #0
    598c:	4641      	mov	r1, r8
    598e:	4813      	ldr	r0, [pc, #76]	; (59dc <trx_sram_write+0x178>)
    5990:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    5992:	9b01      	ldr	r3, [sp, #4]
    5994:	421e      	tst	r6, r3
    5996:	d005      	beq.n	59a4 <trx_sram_write+0x140>
		cpu_irq_enable();
    5998:	2301      	movs	r3, #1
    599a:	4a0f      	ldr	r2, [pc, #60]	; (59d8 <trx_sram_write+0x174>)
    599c:	7013      	strb	r3, [r2, #0]
    599e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    59a2:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    59a4:	b005      	add	sp, #20
    59a6:	bc3c      	pop	{r2, r3, r4, r5}
    59a8:	4690      	mov	r8, r2
    59aa:	4699      	mov	r9, r3
    59ac:	46a2      	mov	sl, r4
    59ae:	46ab      	mov	fp, r5
    59b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    59b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    59b4:	4f0c      	ldr	r7, [pc, #48]	; (59e8 <trx_sram_write+0x184>)
    59b6:	05d2      	lsls	r2, r2, #23
    59b8:	0dd2      	lsrs	r2, r2, #23
    59ba:	803a      	strh	r2, [r7, #0]
    59bc:	3101      	adds	r1, #1
    59be:	e7df      	b.n	5980 <trx_sram_write+0x11c>
    59c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    59c2:	4909      	ldr	r1, [pc, #36]	; (59e8 <trx_sram_write+0x184>)
    59c4:	05d2      	lsls	r2, r2, #23
    59c6:	0dd2      	lsrs	r2, r2, #23
    59c8:	800a      	strh	r2, [r1, #0]
    59ca:	e7ab      	b.n	5924 <trx_sram_write+0xc0>
    59cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    59ce:	4906      	ldr	r1, [pc, #24]	; (59e8 <trx_sram_write+0x184>)
    59d0:	05d2      	lsls	r2, r2, #23
    59d2:	0dd2      	lsrs	r2, r2, #23
    59d4:	800a      	strh	r2, [r1, #0]
    59d6:	e786      	b.n	58e6 <trx_sram_write+0x82>
    59d8:	20000020 	.word	0x20000020
    59dc:	20000b30 	.word	0x20000b30
    59e0:	20000af4 	.word	0x20000af4
    59e4:	00003d81 	.word	0x00003d81
    59e8:	20000aec 	.word	0x20000aec

000059ec <trx_sram_read>:
 * @param[in] addr Start address in SRAM for read operation
 * @param[out] data Pointer to the location where data stored
 * @param[in] length Number of bytes to be read from SRAM
 */
void trx_sram_read(uint8_t addr, uint8_t *data, uint8_t length)
{
    59ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    59ee:	46de      	mov	lr, fp
    59f0:	464e      	mov	r6, r9
    59f2:	4645      	mov	r5, r8
    59f4:	4657      	mov	r7, sl
    59f6:	b5e0      	push	{r5, r6, r7, lr}
	delay_us(1); /* wap_rf4ce */
    59f8:	4b5a      	ldr	r3, [pc, #360]	; (5b64 <trx_sram_read+0x178>)
{
    59fa:	b085      	sub	sp, #20
    59fc:	0006      	movs	r6, r0
	delay_us(1); /* wap_rf4ce */
    59fe:	2001      	movs	r0, #1
{
    5a00:	000c      	movs	r4, r1
    5a02:	4690      	mov	r8, r2
	delay_us(1); /* wap_rf4ce */
    5a04:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5a06:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    5a0a:	425a      	negs	r2, r3
    5a0c:	4153      	adcs	r3, r2
    5a0e:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    5a10:	b672      	cpsid	i
    5a12:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    5a16:	2300      	movs	r3, #0
    5a18:	4a53      	ldr	r2, [pc, #332]	; (5b68 <trx_sram_read+0x17c>)
	**/
	ENTER_TRX_CRITICAL_REGION();
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    5a1a:	4d54      	ldr	r5, [pc, #336]	; (5b6c <trx_sram_read+0x180>)
    5a1c:	7013      	strb	r3, [r2, #0]
	return flags;
    5a1e:	9b03      	ldr	r3, [sp, #12]
    5a20:	4953      	ldr	r1, [pc, #332]	; (5b70 <trx_sram_read+0x184>)
    5a22:	9301      	str	r3, [sp, #4]
    5a24:	4b53      	ldr	r3, [pc, #332]	; (5b74 <trx_sram_read+0x188>)
    5a26:	2201      	movs	r2, #1
    5a28:	0028      	movs	r0, r5
    5a2a:	469a      	mov	sl, r3
    5a2c:	4798      	blx	r3

	temp = TRX_CMD_SR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    5a2e:	2101      	movs	r1, #1
    5a30:	682b      	ldr	r3, [r5, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5a32:	7e1a      	ldrb	r2, [r3, #24]
    5a34:	4211      	tst	r1, r2
    5a36:	d0fc      	beq.n	5a32 <trx_sram_read+0x46>
    5a38:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5a3a:	4211      	tst	r1, r2
    5a3c:	d001      	beq.n	5a42 <trx_sram_read+0x56>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5a3e:	2200      	movs	r2, #0
    5a40:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    5a42:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5a44:	7e1a      	ldrb	r2, [r3, #24]
    5a46:	4211      	tst	r1, r2
    5a48:	d0fc      	beq.n	5a44 <trx_sram_read+0x58>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    5a4a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5a4c:	7e1a      	ldrb	r2, [r3, #24]
    5a4e:	4211      	tst	r1, r2
    5a50:	d0fc      	beq.n	5a4c <trx_sram_read+0x60>
    5a52:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    5a54:	4211      	tst	r1, r2
    5a56:	d00b      	beq.n	5a70 <trx_sram_read+0x84>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5a58:	8b5a      	ldrh	r2, [r3, #26]
    5a5a:	0752      	lsls	r2, r2, #29
    5a5c:	d500      	bpl.n	5a60 <trx_sram_read+0x74>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5a5e:	8359      	strh	r1, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5a60:	79aa      	ldrb	r2, [r5, #6]
    5a62:	2a01      	cmp	r2, #1
    5a64:	d100      	bne.n	5a68 <trx_sram_read+0x7c>
    5a66:	e076      	b.n	5b56 <trx_sram_read+0x16a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5a68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5a6a:	4943      	ldr	r1, [pc, #268]	; (5b78 <trx_sram_read+0x18c>)
    5a6c:	b2d2      	uxtb	r2, r2
    5a6e:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the read operation should start */
	while (!spi_is_ready_to_write(&master)) {
    5a70:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5a72:	7e1a      	ldrb	r2, [r3, #24]
    5a74:	4211      	tst	r1, r2
    5a76:	d0fc      	beq.n	5a72 <trx_sram_read+0x86>
    5a78:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5a7a:	4211      	tst	r1, r2
    5a7c:	d000      	beq.n	5a80 <trx_sram_read+0x94>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5a7e:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    5a80:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5a82:	7e1a      	ldrb	r2, [r3, #24]
    5a84:	4211      	tst	r1, r2
    5a86:	d0fc      	beq.n	5a82 <trx_sram_read+0x96>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    5a88:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5a8a:	7e1a      	ldrb	r2, [r3, #24]
    5a8c:	4211      	tst	r1, r2
    5a8e:	d0fc      	beq.n	5a8a <trx_sram_read+0x9e>
    5a90:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    5a92:	4211      	tst	r1, r2
    5a94:	d00a      	beq.n	5aac <trx_sram_read+0xc0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5a96:	8b5a      	ldrh	r2, [r3, #26]
    5a98:	0752      	lsls	r2, r2, #29
    5a9a:	d500      	bpl.n	5a9e <trx_sram_read+0xb2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5a9c:	8359      	strh	r1, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5a9e:	79aa      	ldrb	r2, [r5, #6]
    5aa0:	2a01      	cmp	r2, #1
    5aa2:	d052      	beq.n	5b4a <trx_sram_read+0x15e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5aa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5aa6:	4934      	ldr	r1, [pc, #208]	; (5b78 <trx_sram_read+0x18c>)
    5aa8:	b2d2      	uxtb	r2, r2
    5aaa:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    5aac:	4642      	mov	r2, r8
    5aae:	4641      	mov	r1, r8
    5ab0:	3a01      	subs	r2, #1
    5ab2:	b2d2      	uxtb	r2, r2
    5ab4:	2900      	cmp	r1, #0
    5ab6:	d033      	beq.n	5b20 <trx_sram_read+0x134>
    5ab8:	3201      	adds	r2, #1
    5aba:	4691      	mov	r9, r2
    5abc:	2200      	movs	r2, #0
		while (!spi_is_ready_to_write(&master)) {
    5abe:	2101      	movs	r1, #1
	while (length--) {
    5ac0:	4690      	mov	r8, r2
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5ac2:	4693      	mov	fp, r2
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    5ac4:	2702      	movs	r7, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    5ac6:	2004      	movs	r0, #4
    5ac8:	2604      	movs	r6, #4
    5aca:	44a1      	add	r9, r4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5acc:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    5ace:	4211      	tst	r1, r2
    5ad0:	d0fc      	beq.n	5acc <trx_sram_read+0xe0>
    5ad2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5ad4:	4211      	tst	r1, r2
    5ad6:	d001      	beq.n	5adc <trx_sram_read+0xf0>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5ad8:	465a      	mov	r2, fp
    5ada:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5adc:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    5ade:	4217      	tst	r7, r2
    5ae0:	d0fc      	beq.n	5adc <trx_sram_read+0xf0>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5ae2:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    5ae4:	4210      	tst	r0, r2
    5ae6:	d0fc      	beq.n	5ae2 <trx_sram_read+0xf6>
    5ae8:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    5aea:	4216      	tst	r6, r2
    5aec:	d009      	beq.n	5b02 <trx_sram_read+0x116>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5aee:	8b5a      	ldrh	r2, [r3, #26]
    5af0:	4210      	tst	r0, r2
    5af2:	d000      	beq.n	5af6 <trx_sram_read+0x10a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5af4:	8358      	strh	r0, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5af6:	79aa      	ldrb	r2, [r5, #6]
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5afa:	2a01      	cmp	r2, #1
    5afc:	d008      	beq.n	5b10 <trx_sram_read+0x124>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5afe:	b2db      	uxtb	r3, r3
    5b00:	4698      	mov	r8, r3
		}
		spi_read(&master, &temp);
		*data = temp;
    5b02:	4643      	mov	r3, r8
    5b04:	7023      	strb	r3, [r4, #0]
		data++;
    5b06:	3401      	adds	r4, #1
	while (length--) {
    5b08:	454c      	cmp	r4, r9
    5b0a:	d009      	beq.n	5b20 <trx_sram_read+0x134>
    5b0c:	682b      	ldr	r3, [r5, #0]
    5b0e:	e7dd      	b.n	5acc <trx_sram_read+0xe0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5b10:	05db      	lsls	r3, r3, #23
    5b12:	0ddb      	lsrs	r3, r3, #23
    5b14:	4698      	mov	r8, r3
		*data = temp;
    5b16:	4643      	mov	r3, r8
    5b18:	7023      	strb	r3, [r4, #0]
		data++;
    5b1a:	3401      	adds	r4, #1
	while (length--) {
    5b1c:	454c      	cmp	r4, r9
    5b1e:	d1f5      	bne.n	5b0c <trx_sram_read+0x120>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    5b20:	2200      	movs	r2, #0
    5b22:	4913      	ldr	r1, [pc, #76]	; (5b70 <trx_sram_read+0x184>)
    5b24:	0028      	movs	r0, r5
    5b26:	47d0      	blx	sl
	if (cpu_irq_is_enabled_flags(flags))
    5b28:	23ff      	movs	r3, #255	; 0xff
    5b2a:	9a01      	ldr	r2, [sp, #4]
    5b2c:	4213      	tst	r3, r2
    5b2e:	d005      	beq.n	5b3c <trx_sram_read+0x150>
		cpu_irq_enable();
    5b30:	2301      	movs	r3, #1
    5b32:	4a0d      	ldr	r2, [pc, #52]	; (5b68 <trx_sram_read+0x17c>)
    5b34:	7013      	strb	r3, [r2, #0]
    5b36:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5b3a:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    5b3c:	b005      	add	sp, #20
    5b3e:	bc3c      	pop	{r2, r3, r4, r5}
    5b40:	4690      	mov	r8, r2
    5b42:	4699      	mov	r9, r3
    5b44:	46a2      	mov	sl, r4
    5b46:	46ab      	mov	fp, r5
    5b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5b4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5b4c:	490a      	ldr	r1, [pc, #40]	; (5b78 <trx_sram_read+0x18c>)
    5b4e:	05d2      	lsls	r2, r2, #23
    5b50:	0dd2      	lsrs	r2, r2, #23
    5b52:	800a      	strh	r2, [r1, #0]
    5b54:	e7aa      	b.n	5aac <trx_sram_read+0xc0>
    5b56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5b58:	4907      	ldr	r1, [pc, #28]	; (5b78 <trx_sram_read+0x18c>)
    5b5a:	05d2      	lsls	r2, r2, #23
    5b5c:	0dd2      	lsrs	r2, r2, #23
    5b5e:	800a      	strh	r2, [r1, #0]
    5b60:	e786      	b.n	5a70 <trx_sram_read+0x84>
    5b62:	46c0      	nop			; (mov r8, r8)
    5b64:	000030b1 	.word	0x000030b1
    5b68:	20000020 	.word	0x20000020
    5b6c:	20000b30 	.word	0x20000b30
    5b70:	20000af4 	.word	0x20000af4
    5b74:	00003d81 	.word	0x00003d81
    5b78:	20000aec 	.word	0x20000aec

00005b7c <trx_aes_wrrd>:
 * @param addr Start address in the SRAM for the write operation
 * @param idata Pointer to the data written/read into/from SRAM
 * @param length Number of bytes written/read into/from SRAM
 */
void trx_aes_wrrd(uint8_t addr, uint8_t *idata, uint8_t length)
{
    5b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b7e:	46de      	mov	lr, fp
    5b80:	464e      	mov	r6, r9
    5b82:	4657      	mov	r7, sl
    5b84:	4645      	mov	r5, r8
    5b86:	b5e0      	push	{r5, r6, r7, lr}
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t odata_var = 0;
#endif
	uint8_t temp;

	delay_us(1); /* wap_rf4ce */
    5b88:	4b7c      	ldr	r3, [pc, #496]	; (5d7c <trx_aes_wrrd+0x200>)
{
    5b8a:	b083      	sub	sp, #12
    5b8c:	0006      	movs	r6, r0
	delay_us(1); /* wap_rf4ce */
    5b8e:	2001      	movs	r0, #1
{
    5b90:	4691      	mov	r9, r2
    5b92:	9101      	str	r1, [sp, #4]
	delay_us(1); /* wap_rf4ce */
    5b94:	4798      	blx	r3

	ENTER_TRX_REGION();
    5b96:	2100      	movs	r1, #0
    5b98:	4b79      	ldr	r3, [pc, #484]	; (5d80 <trx_aes_wrrd+0x204>)
    5b9a:	2000      	movs	r0, #0
    5b9c:	4798      	blx	r3
		/* wait until SPI gets available */
	}
#endif
#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    5b9e:	4b79      	ldr	r3, [pc, #484]	; (5d84 <trx_aes_wrrd+0x208>)
    5ba0:	4c79      	ldr	r4, [pc, #484]	; (5d88 <trx_aes_wrrd+0x20c>)
    5ba2:	0019      	movs	r1, r3
    5ba4:	469a      	mov	sl, r3
    5ba6:	4b79      	ldr	r3, [pc, #484]	; (5d8c <trx_aes_wrrd+0x210>)
    5ba8:	2201      	movs	r2, #1
    5baa:	0020      	movs	r0, r4
    5bac:	4698      	mov	r8, r3
    5bae:	4798      	blx	r3

	/* Send the command byte */
	temp = TRX_CMD_SW;

	while (!spi_is_ready_to_write(&master)) {
    5bb0:	2101      	movs	r1, #1
    5bb2:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5bb4:	7e1a      	ldrb	r2, [r3, #24]
    5bb6:	4211      	tst	r1, r2
    5bb8:	d0fc      	beq.n	5bb4 <trx_aes_wrrd+0x38>
    5bba:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5bbc:	4211      	tst	r1, r2
    5bbe:	d001      	beq.n	5bc4 <trx_aes_wrrd+0x48>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5bc0:	2240      	movs	r2, #64	; 0x40
    5bc2:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    5bc4:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5bc6:	7e1a      	ldrb	r2, [r3, #24]
    5bc8:	4211      	tst	r1, r2
    5bca:	d0fc      	beq.n	5bc6 <trx_aes_wrrd+0x4a>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    5bcc:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5bce:	7e1a      	ldrb	r2, [r3, #24]
    5bd0:	4211      	tst	r1, r2
    5bd2:	d0fc      	beq.n	5bce <trx_aes_wrrd+0x52>
    5bd4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    5bd6:	4211      	tst	r1, r2
    5bd8:	d00b      	beq.n	5bf2 <trx_aes_wrrd+0x76>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5bda:	8b5a      	ldrh	r2, [r3, #26]
    5bdc:	0752      	lsls	r2, r2, #29
    5bde:	d500      	bpl.n	5be2 <trx_aes_wrrd+0x66>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5be0:	8359      	strh	r1, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5be2:	79a2      	ldrb	r2, [r4, #6]
    5be4:	2a01      	cmp	r2, #1
    5be6:	d100      	bne.n	5bea <trx_aes_wrrd+0x6e>
    5be8:	e0b7      	b.n	5d5a <trx_aes_wrrd+0x1de>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5bea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5bec:	4968      	ldr	r1, [pc, #416]	; (5d90 <trx_aes_wrrd+0x214>)
    5bee:	b2d2      	uxtb	r2, r2
    5bf0:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* write SRAM start address */
	while (!spi_is_ready_to_write(&master)) {
    5bf2:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5bf4:	7e1a      	ldrb	r2, [r3, #24]
    5bf6:	4211      	tst	r1, r2
    5bf8:	d0fc      	beq.n	5bf4 <trx_aes_wrrd+0x78>
    5bfa:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5bfc:	4211      	tst	r1, r2
    5bfe:	d000      	beq.n	5c02 <trx_aes_wrrd+0x86>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5c00:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    5c02:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5c04:	7e1a      	ldrb	r2, [r3, #24]
    5c06:	4211      	tst	r1, r2
    5c08:	d0fc      	beq.n	5c04 <trx_aes_wrrd+0x88>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    5c0a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5c0c:	7e1a      	ldrb	r2, [r3, #24]
    5c0e:	4211      	tst	r1, r2
    5c10:	d0fc      	beq.n	5c0c <trx_aes_wrrd+0x90>
    5c12:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    5c14:	4211      	tst	r1, r2
    5c16:	d00b      	beq.n	5c30 <trx_aes_wrrd+0xb4>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5c18:	8b5a      	ldrh	r2, [r3, #26]
    5c1a:	0752      	lsls	r2, r2, #29
    5c1c:	d500      	bpl.n	5c20 <trx_aes_wrrd+0xa4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5c1e:	8359      	strh	r1, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5c20:	79a2      	ldrb	r2, [r4, #6]
    5c22:	2a01      	cmp	r2, #1
    5c24:	d100      	bne.n	5c28 <trx_aes_wrrd+0xac>
    5c26:	e092      	b.n	5d4e <trx_aes_wrrd+0x1d2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5c28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5c2a:	4959      	ldr	r1, [pc, #356]	; (5d90 <trx_aes_wrrd+0x214>)
    5c2c:	b2d2      	uxtb	r2, r2
    5c2e:	800a      	strh	r2, [r1, #0]

	/* now transfer data */
	odata = idata;

	/* write data byte 0 - the obtained value in SPDR is meaningless */
	while (!spi_is_ready_to_write(&master)) {
    5c30:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5c32:	7e1a      	ldrb	r2, [r3, #24]
    5c34:	4211      	tst	r1, r2
    5c36:	d0fc      	beq.n	5c32 <trx_aes_wrrd+0xb6>
	}
	spi_write(&master, *idata++);
    5c38:	9a01      	ldr	r2, [sp, #4]
    5c3a:	7810      	ldrb	r0, [r2, #0]
    5c3c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5c3e:	4211      	tst	r1, r2
    5c40:	d000      	beq.n	5c44 <trx_aes_wrrd+0xc8>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5c42:	6298      	str	r0, [r3, #40]	; 0x28
	while (!spi_is_write_complete(&master)) {
    5c44:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5c46:	7e1a      	ldrb	r2, [r3, #24]
    5c48:	4211      	tst	r1, r2
    5c4a:	d0fc      	beq.n	5c46 <trx_aes_wrrd+0xca>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    5c4c:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5c4e:	7e1a      	ldrb	r2, [r3, #24]
    5c50:	4211      	tst	r1, r2
    5c52:	d0fc      	beq.n	5c4e <trx_aes_wrrd+0xd2>
    5c54:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    5c56:	4211      	tst	r1, r2
    5c58:	d00b      	beq.n	5c72 <trx_aes_wrrd+0xf6>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5c5a:	8b5a      	ldrh	r2, [r3, #26]
    5c5c:	0752      	lsls	r2, r2, #29
    5c5e:	d500      	bpl.n	5c62 <trx_aes_wrrd+0xe6>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5c60:	8359      	strh	r1, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5c62:	79a2      	ldrb	r2, [r4, #6]
    5c64:	2a01      	cmp	r2, #1
    5c66:	d100      	bne.n	5c6a <trx_aes_wrrd+0xee>
    5c68:	e07d      	b.n	5d66 <trx_aes_wrrd+0x1ea>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5c6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5c6c:	4948      	ldr	r1, [pc, #288]	; (5d90 <trx_aes_wrrd+0x214>)
    5c6e:	b2d2      	uxtb	r2, r2
    5c70:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    5c72:	464a      	mov	r2, r9
    5c74:	2a00      	cmp	r2, #0
    5c76:	d100      	bne.n	5c7a <trx_aes_wrrd+0xfe>
    5c78:	e07e      	b.n	5d78 <trx_aes_wrrd+0x1fc>
    5c7a:	9901      	ldr	r1, [sp, #4]
    5c7c:	3a01      	subs	r2, #1
    5c7e:	468c      	mov	ip, r1
    5c80:	b2d2      	uxtb	r2, r2
    5c82:	3201      	adds	r2, #1
    5c84:	4494      	add	ip, r2
    5c86:	4662      	mov	r2, ip
    5c88:	9201      	str	r2, [sp, #4]
    5c8a:	2200      	movs	r2, #0
    5c8c:	4691      	mov	r9, r2
		while (!spi_is_ready_to_write(&master)) {
		}
		spi_write(&master, *idata++);
		while (!spi_is_write_complete(&master)) {
		}
		while (!spi_is_ready_to_read(&master)) {
    5c8e:	3204      	adds	r2, #4
    5c90:	000e      	movs	r6, r1
		while (!spi_is_write_complete(&master)) {
    5c92:	2702      	movs	r7, #2
		while (!spi_is_ready_to_write(&master)) {
    5c94:	2101      	movs	r1, #1
		while (!spi_is_ready_to_read(&master)) {
    5c96:	2004      	movs	r0, #4
    5c98:	4694      	mov	ip, r2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5c9a:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    5c9c:	4211      	tst	r1, r2
    5c9e:	d0fc      	beq.n	5c9a <trx_aes_wrrd+0x11e>
		spi_write(&master, *idata++);
    5ca0:	7872      	ldrb	r2, [r6, #1]
    5ca2:	4693      	mov	fp, r2
    5ca4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5ca6:	4211      	tst	r1, r2
    5ca8:	d001      	beq.n	5cae <trx_aes_wrrd+0x132>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5caa:	465a      	mov	r2, fp
    5cac:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5cae:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    5cb0:	4217      	tst	r7, r2
    5cb2:	d0fc      	beq.n	5cae <trx_aes_wrrd+0x132>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5cb4:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    5cb6:	4210      	tst	r0, r2
    5cb8:	d0fc      	beq.n	5cb4 <trx_aes_wrrd+0x138>
	if (!spi_is_ready_to_read(module)) {
    5cba:	4665      	mov	r5, ip
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5cbc:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    5cbe:	4215      	tst	r5, r2
    5cc0:	d009      	beq.n	5cd6 <trx_aes_wrrd+0x15a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5cc2:	8b5a      	ldrh	r2, [r3, #26]
    5cc4:	4210      	tst	r0, r2
    5cc6:	d000      	beq.n	5cca <trx_aes_wrrd+0x14e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5cc8:	8358      	strh	r0, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5cca:	79a2      	ldrb	r2, [r4, #6]
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5cce:	2a01      	cmp	r2, #1
    5cd0:	d00c      	beq.n	5cec <trx_aes_wrrd+0x170>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5cd2:	b2db      	uxtb	r3, r3
    5cd4:	4699      	mov	r9, r3
		}

#if SAMD || SAMR21 || SAML21 || SAMR30
		spi_read(&master, &odata_var);
		*odata++ = (uint8_t)odata_var;
    5cd6:	464b      	mov	r3, r9
    5cd8:	466a      	mov	r2, sp
    5cda:	70d3      	strb	r3, [r2, #3]
    5cdc:	78d2      	ldrb	r2, [r2, #3]
	while (length > 0) {
    5cde:	9b01      	ldr	r3, [sp, #4]
		*odata++ = (uint8_t)odata_var;
    5ce0:	7032      	strb	r2, [r6, #0]
    5ce2:	3601      	adds	r6, #1
	while (length > 0) {
    5ce4:	42b3      	cmp	r3, r6
    5ce6:	d005      	beq.n	5cf4 <trx_aes_wrrd+0x178>
    5ce8:	6823      	ldr	r3, [r4, #0]
    5cea:	e7d6      	b.n	5c9a <trx_aes_wrrd+0x11e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5cec:	05db      	lsls	r3, r3, #23
    5cee:	0ddb      	lsrs	r3, r3, #23
    5cf0:	4699      	mov	r9, r3
    5cf2:	e7f0      	b.n	5cd6 <trx_aes_wrrd+0x15a>
    5cf4:	6823      	ldr	r3, [r4, #0]
#endif
		length--;
	}

	/* To get the last data byte, write some dummy byte */
	while (!spi_is_ready_to_write(&master)) {
    5cf6:	2001      	movs	r0, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5cf8:	7e19      	ldrb	r1, [r3, #24]
    5cfa:	4208      	tst	r0, r1
    5cfc:	d0fc      	beq.n	5cf8 <trx_aes_wrrd+0x17c>
    5cfe:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5d00:	4208      	tst	r0, r1
    5d02:	d001      	beq.n	5d08 <trx_aes_wrrd+0x18c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5d04:	2100      	movs	r1, #0
    5d06:	6299      	str	r1, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    5d08:	2002      	movs	r0, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5d0a:	7e19      	ldrb	r1, [r3, #24]
    5d0c:	4208      	tst	r0, r1
    5d0e:	d0fc      	beq.n	5d0a <trx_aes_wrrd+0x18e>
	}
	while (!spi_is_ready_to_read(&master)) {
    5d10:	2004      	movs	r0, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5d12:	7e19      	ldrb	r1, [r3, #24]
    5d14:	4208      	tst	r0, r1
    5d16:	d0fc      	beq.n	5d12 <trx_aes_wrrd+0x196>
    5d18:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    5d1a:	4208      	tst	r0, r1
    5d1c:	d004      	beq.n	5d28 <trx_aes_wrrd+0x1ac>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5d1e:	8b5a      	ldrh	r2, [r3, #26]
    5d20:	0752      	lsls	r2, r2, #29
    5d22:	d412      	bmi.n	5d4a <trx_aes_wrrd+0x1ce>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5d24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5d26:	b2d2      	uxtb	r2, r2
	}
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_read(&master, &odata_var);
	*odata = (uint8_t)odata_var;
    5d28:	9b01      	ldr	r3, [sp, #4]
#else
	spi_read(&master, (uint16_t *)odata);
#endif

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    5d2a:	4651      	mov	r1, sl
	*odata = (uint8_t)odata_var;
    5d2c:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&master, &slave, false);
    5d2e:	0020      	movs	r0, r4
    5d30:	2200      	movs	r2, #0
    5d32:	47c0      	blx	r8
	spi_read_packet(AT86RFX_SPI, odata, 1);

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	LEAVE_TRX_REGION();
    5d34:	2100      	movs	r1, #0
    5d36:	4b17      	ldr	r3, [pc, #92]	; (5d94 <trx_aes_wrrd+0x218>)
    5d38:	2000      	movs	r0, #0
    5d3a:	4798      	blx	r3
}
    5d3c:	b003      	add	sp, #12
    5d3e:	bc3c      	pop	{r2, r3, r4, r5}
    5d40:	4690      	mov	r8, r2
    5d42:	4699      	mov	r9, r3
    5d44:	46a2      	mov	sl, r4
    5d46:	46ab      	mov	fp, r5
    5d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5d4a:	8358      	strh	r0, [r3, #26]
    5d4c:	e7ea      	b.n	5d24 <trx_aes_wrrd+0x1a8>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5d4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5d50:	490f      	ldr	r1, [pc, #60]	; (5d90 <trx_aes_wrrd+0x214>)
    5d52:	05d2      	lsls	r2, r2, #23
    5d54:	0dd2      	lsrs	r2, r2, #23
    5d56:	800a      	strh	r2, [r1, #0]
    5d58:	e76a      	b.n	5c30 <trx_aes_wrrd+0xb4>
    5d5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5d5c:	490c      	ldr	r1, [pc, #48]	; (5d90 <trx_aes_wrrd+0x214>)
    5d5e:	05d2      	lsls	r2, r2, #23
    5d60:	0dd2      	lsrs	r2, r2, #23
    5d62:	800a      	strh	r2, [r1, #0]
    5d64:	e745      	b.n	5bf2 <trx_aes_wrrd+0x76>
    5d66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5d68:	4909      	ldr	r1, [pc, #36]	; (5d90 <trx_aes_wrrd+0x214>)
    5d6a:	05d2      	lsls	r2, r2, #23
    5d6c:	0dd2      	lsrs	r2, r2, #23
    5d6e:	800a      	strh	r2, [r1, #0]
	while (length > 0) {
    5d70:	464a      	mov	r2, r9
    5d72:	2a00      	cmp	r2, #0
    5d74:	d000      	beq.n	5d78 <trx_aes_wrrd+0x1fc>
    5d76:	e780      	b.n	5c7a <trx_aes_wrrd+0xfe>
    5d78:	2200      	movs	r2, #0
    5d7a:	e7bc      	b.n	5cf6 <trx_aes_wrrd+0x17a>
    5d7c:	000030b1 	.word	0x000030b1
    5d80:	000032ad 	.word	0x000032ad
    5d84:	20000af4 	.word	0x20000af4
    5d88:	20000b30 	.word	0x20000b30
    5d8c:	00003d81 	.word	0x00003d81
    5d90:	20000aec 	.word	0x20000aec
    5d94:	00003289 	.word	0x00003289

00005d98 <watchdog_early_warning_callback>:
		port_base->OUTCLR.reg = pin_mask;
    5d98:	2280      	movs	r2, #128	; 0x80
    5d9a:	4b02      	ldr	r3, [pc, #8]	; (5da4 <watchdog_early_warning_callback+0xc>)
    5d9c:	0312      	lsls	r2, r2, #12
    5d9e:	615a      	str	r2, [r3, #20]
// Watch Dog Timer Support
//! [setup]
static void watchdog_early_warning_callback(void)
{
	port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
}
    5da0:	4770      	bx	lr
    5da2:	46c0      	nop			; (mov r8, r8)
    5da4:	40002800 	.word	0x40002800

00005da8 <main>:
		LED_Toggle(val);
		delay_ms(100);
	}
}
int main(void)
{	
    5da8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5daa:	46de      	mov	lr, fp
    5dac:	4657      	mov	r7, sl
    5dae:	464e      	mov	r6, r9
    5db0:	4645      	mov	r5, r8
    5db2:	b5e0      	push	{r5, r6, r7, lr}
	uint8_t connection_index = 0xFF;
	// Hardware Init
	system_init();
    5db4:	4b58      	ldr	r3, [pc, #352]	; (5f18 <main+0x170>)
{	
    5db6:	b083      	sub	sp, #12
	system_init();
    5db8:	4798      	blx	r3
	delay_init();
    5dba:	4b58      	ldr	r3, [pc, #352]	; (5f1c <main+0x174>)
    5dbc:	4798      	blx	r3
	// Uart init for console display
	sio2host_init();
    5dbe:	4b58      	ldr	r3, [pc, #352]	; (5f20 <main+0x178>)
    5dc0:	4798      	blx	r3
	// Timer Init for MiWi stack timing events
	configure_tc();
    5dc2:	4b58      	ldr	r3, [pc, #352]	; (5f24 <main+0x17c>)
    5dc4:	4798      	blx	r3
	// RTC Init
	// This is used to wake up from Backup Mode 
	rtc_init();
    5dc6:	4b58      	ldr	r3, [pc, #352]	; (5f28 <main+0x180>)
    5dc8:	4798      	blx	r3
	// Function MiApp_ProtocolInit initialize the protocol stack. The
	// only input parameter indicates if previous network configuration
	// should be restored. In this simple example, we assume that the
	// network starts from scratch.
	/*******************************************************************/
	MiApp_ProtocolInit(false);
    5dca:	4b58      	ldr	r3, [pc, #352]	; (5f2c <main+0x184>)
    5dcc:	2000      	movs	r0, #0
    5dce:	4798      	blx	r3
	// Set the Channel 
	MiApp_SetChannel(APP_CHANNEL_SEL);
    5dd0:	4b57      	ldr	r3, [pc, #348]	; (5f30 <main+0x188>)
    5dd2:	2005      	movs	r0, #5
    5dd4:	4798      	blx	r3
	//  ENABLE_PREV_CONN:   Only allow connection already exists in
	//                      connection table
	//  ENABL_ACTIVE_SCAN_RSP:  Allow response to Active scan
	//  DISABLE_ALL_CONN:   Disable all connections.
	/*******************************************************************/
	MiApp_ConnectionMode(ENABLE_ALL_CONN);
    5dd6:	2000      	movs	r0, #0
    5dd8:	4b56      	ldr	r3, [pc, #344]	; (5f34 <main+0x18c>)
    5dda:	4798      	blx	r3
	// Enable Transceiver Interrupt 
	ENABLE_TRX_IRQ();
    5ddc:	2100      	movs	r1, #0
    5dde:	4b56      	ldr	r3, [pc, #344]	; (5f38 <main+0x190>)
    5de0:	2000      	movs	r0, #0
    5de2:	4798      	blx	r3
	// Enable All cpu interrupts 
	cpu_irq_enable();
    5de4:	2201      	movs	r2, #1
    5de6:	4b55      	ldr	r3, [pc, #340]	; (5f3c <main+0x194>)
    5de8:	701a      	strb	r2, [r3, #0]
    5dea:	f3bf 8f5f 	dmb	sy
    5dee:	b662      	cpsie	i
	printf("\033[2J\r\n ");
    5df0:	4b53      	ldr	r3, [pc, #332]	; (5f40 <main+0x198>)
    5df2:	4854      	ldr	r0, [pc, #336]	; (5f44 <main+0x19c>)
    5df4:	4699      	mov	r9, r3
    5df6:	4798      	blx	r3
 *
 * \return An enum value indicating the cause of the last system reset.
 */
static inline enum system_reset_cause system_get_reset_cause(void)
{
	return (enum system_reset_cause)RSTC->RCAUSE.reg;
    5df8:	4b53      	ldr	r3, [pc, #332]	; (5f48 <main+0x1a0>)
	printf("\r\nLast reset cause: ");
    5dfa:	4854      	ldr	r0, [pc, #336]	; (5f4c <main+0x1a4>)
    5dfc:	781c      	ldrb	r4, [r3, #0]
    5dfe:	b2e4      	uxtb	r4, r4
    5e00:	47c8      	blx	r9
	if(rcause & (1 << 6)) {
    5e02:	0663      	lsls	r3, r4, #25
    5e04:	d500      	bpl.n	5e08 <main+0x60>
    5e06:	e081      	b.n	5f0c <main+0x164>
    5e08:	4b51      	ldr	r3, [pc, #324]	; (5f50 <main+0x1a8>)
    5e0a:	4698      	mov	r8, r3
	if(rcause & (1 << 5)) {
    5e0c:	06a3      	lsls	r3, r4, #26
    5e0e:	d47a      	bmi.n	5f06 <main+0x15e>
	if(rcause & (1 << 4)) {
    5e10:	06e3      	lsls	r3, r4, #27
    5e12:	d475      	bmi.n	5f00 <main+0x158>
	if(rcause & (1 << 2)) {
    5e14:	0763      	lsls	r3, r4, #29
    5e16:	d470      	bmi.n	5efa <main+0x152>
	if(rcause & (1 << 1)) {
    5e18:	07a3      	lsls	r3, r4, #30
    5e1a:	d46b      	bmi.n	5ef4 <main+0x14c>
	if(rcause & (1 << 0)) {
    5e1c:	07e3      	lsls	r3, r4, #31
    5e1e:	d466      	bmi.n	5eee <main+0x146>
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    5e20:	2380      	movs	r3, #128	; 0x80
    5e22:	031b      	lsls	r3, r3, #12
    5e24:	469a      	mov	sl, r3
    5e26:	001f      	movs	r7, r3
    5e28:	4d4a      	ldr	r5, [pc, #296]	; (5f54 <main+0x1ac>)
    5e2a:	4e4b      	ldr	r6, [pc, #300]	; (5f58 <main+0x1b0>)
{	
    5e2c:	240a      	movs	r4, #10
    5e2e:	3c01      	subs	r4, #1
    5e30:	61f7      	str	r7, [r6, #28]
		delay_ms(100);
    5e32:	2064      	movs	r0, #100	; 0x64
    5e34:	b2e4      	uxtb	r4, r4
    5e36:	47a8      	blx	r5
	while(timer--)
    5e38:	2c00      	cmp	r4, #0
    5e3a:	d1f8      	bne.n	5e2e <main+0x86>
	print_reset_causes();
	while(connection_index == 0xFF)
	{
		toggleLED(LED0);
		connection_index  = MiApp_EstablishConnection(0xFF, CONN_MODE_DIRECT);
    5e3c:	4b47      	ldr	r3, [pc, #284]	; (5f5c <main+0x1b4>)
    5e3e:	2100      	movs	r1, #0
    5e40:	20ff      	movs	r0, #255	; 0xff
    5e42:	4798      	blx	r3
    5e44:	4683      	mov	fp, r0
		printf("Waiting to Join\r\n");
    5e46:	4846      	ldr	r0, [pc, #280]	; (5f60 <main+0x1b8>)
    5e48:	47c0      	blx	r8
	while(connection_index == 0xFF)
    5e4a:	465b      	mov	r3, fp
    5e4c:	2bff      	cmp	r3, #255	; 0xff
    5e4e:	d0ed      	beq.n	5e2c <main+0x84>
	}
	printf("Total Connections:%d\r\n", Total_Connections());
    5e50:	4b44      	ldr	r3, [pc, #272]	; (5f64 <main+0x1bc>)
    5e52:	4798      	blx	r3
    5e54:	0001      	movs	r1, r0
    5e56:	4844      	ldr	r0, [pc, #272]	; (5f68 <main+0x1c0>)
    5e58:	47c8      	blx	r9
	#if defined(ED)
		printf("joined as a End Device....\r\n");
    5e5a:	4844      	ldr	r0, [pc, #272]	; (5f6c <main+0x1c4>)
    5e5c:	47c0      	blx	r8
	#endif
	at30tse_init();
    5e5e:	4b44      	ldr	r3, [pc, #272]	; (5f70 <main+0x1c8>)
    5e60:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    5e62:	4653      	mov	r3, sl
    5e64:	6173      	str	r3, [r6, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->always_on            = false;
    5e66:	466b      	mov	r3, sp
	config->enable               = true;
    5e68:	466a      	mov	r2, sp
	config->always_on            = false;
    5e6a:	701c      	strb	r4, [r3, #0]
	config->enable               = true;
    5e6c:	2301      	movs	r3, #1
    5e6e:	7053      	strb	r3, [r2, #1]
#if !(SAML21) && !(SAML22) && !(SAMC20) && !(SAMC21) && !(SAMR30)
	config->clock_source         = GCLK_GENERATOR_4;
#endif
	config->timeout_period       = WDT_PERIOD_16384CLK;
    5e70:	330b      	adds	r3, #11
    5e72:	7093      	strb	r3, [r2, #2]
	config_wdt.early_warning_period = WDT_PERIOD_8192CLK;
    5e74:	230b      	movs	r3, #11
	wdt_set_config(&config_wdt);
    5e76:	4668      	mov	r0, sp
	config_wdt.early_warning_period = WDT_PERIOD_8192CLK;
    5e78:	7113      	strb	r3, [r2, #4]
	wdt_set_config(&config_wdt);
    5e7a:	4b3e      	ldr	r3, [pc, #248]	; (5f74 <main+0x1cc>)
	config->window_period        = WDT_PERIOD_NONE;
    5e7c:	70d4      	strb	r4, [r2, #3]
    5e7e:	4798      	blx	r3
	wdt_register_callback(watchdog_early_warning_callback,
    5e80:	2100      	movs	r1, #0
    5e82:	4b3d      	ldr	r3, [pc, #244]	; (5f78 <main+0x1d0>)
    5e84:	483d      	ldr	r0, [pc, #244]	; (5f7c <main+0x1d4>)
    5e86:	4798      	blx	r3
	wdt_enable_callback(WDT_CALLBACK_EARLY_WARNING);
    5e88:	4b3d      	ldr	r3, [pc, #244]	; (5f80 <main+0x1d8>)
    5e8a:	2000      	movs	r0, #0
    5e8c:	4798      	blx	r3
    5e8e:	4b3d      	ldr	r3, [pc, #244]	; (5f84 <main+0x1dc>)
    5e90:	4c3d      	ldr	r4, [pc, #244]	; (5f88 <main+0x1e0>)
    5e92:	469b      	mov	fp, r3
    5e94:	4b3d      	ldr	r3, [pc, #244]	; (5f8c <main+0x1e4>)
    5e96:	4f3e      	ldr	r7, [pc, #248]	; (5f90 <main+0x1e8>)
    5e98:	469a      	mov	sl, r3
    5e9a:	4b3e      	ldr	r3, [pc, #248]	; (5f94 <main+0x1ec>)
    5e9c:	4699      	mov	r9, r3
    5e9e:	4b3e      	ldr	r3, [pc, #248]	; (5f98 <main+0x1f0>)
    5ea0:	4698      	mov	r8, r3
    5ea2:	e01d      	b.n	5ee0 <main+0x138>
	port_base->OUTTGL.reg = pin_mask;
    5ea4:	2380      	movs	r3, #128	; 0x80
    5ea6:	4a2c      	ldr	r2, [pc, #176]	; (5f58 <main+0x1b0>)
    5ea8:	031b      	lsls	r3, r3, #12
    5eaa:	61d3      	str	r3, [r2, #28]
		// Send Temp Data and go to Sleep immediately 
		#if defined(ED)
			MiApp_FlushTx();
			LED_Toggle(LED0);
			// Tx Buffer User Data
			MiApp_WriteData(NodeID);
    5eac:	2306      	movs	r3, #6
			MiApp_WriteData( at30tse_read_temperature()*1.8+32);
    5eae:	464a      	mov	r2, r9
			MiApp_WriteData(NodeID);
    5eb0:	7023      	strb	r3, [r4, #0]
			MiApp_WriteData( at30tse_read_temperature()*1.8+32);
    5eb2:	3b04      	subs	r3, #4
    5eb4:	7013      	strb	r3, [r2, #0]
    5eb6:	47c0      	blx	r8
    5eb8:	4a38      	ldr	r2, [pc, #224]	; (5f9c <main+0x1f4>)
    5eba:	4b39      	ldr	r3, [pc, #228]	; (5fa0 <main+0x1f8>)
    5ebc:	47b8      	blx	r7
    5ebe:	2200      	movs	r2, #0
    5ec0:	4b38      	ldr	r3, [pc, #224]	; (5fa4 <main+0x1fc>)
    5ec2:	4e39      	ldr	r6, [pc, #228]	; (5fa8 <main+0x200>)
    5ec4:	47b0      	blx	r6
    5ec6:	4b39      	ldr	r3, [pc, #228]	; (5fac <main+0x204>)
    5ec8:	4798      	blx	r3
			//This function unicasts a message in the TxBuffer to the first connected peer device
			// indexed at 0 in connection table
			MiApp_BroadcastPacket(true); // Send Packet to Parent Device
    5eca:	4b39      	ldr	r3, [pc, #228]	; (5fb0 <main+0x208>)
			MiApp_WriteData( at30tse_read_temperature()*1.8+32);
    5ecc:	7060      	strb	r0, [r4, #1]
			MiApp_BroadcastPacket(true); // Send Packet to Parent Device
    5ece:	2001      	movs	r0, #1
    5ed0:	4798      	blx	r3
			delay_ms(50);
    5ed2:	2032      	movs	r0, #50	; 0x32
    5ed4:	47a8      	blx	r5
			PHY_Sleep();
    5ed6:	4b37      	ldr	r3, [pc, #220]	; (5fb4 <main+0x20c>)
    5ed8:	4798      	blx	r3
			setSleepPeriod(60); // 65 = 16 min
    5eda:	203c      	movs	r0, #60	; 0x3c
    5edc:	4b36      	ldr	r3, [pc, #216]	; (5fb8 <main+0x210>)
    5ede:	4798      	blx	r3
		wdt_reset_count();
    5ee0:	47d8      	blx	fp
		if (MiApp_MessageAvailable())
    5ee2:	47d0      	blx	sl
    5ee4:	2800      	cmp	r0, #0
    5ee6:	d0dd      	beq.n	5ea4 <main+0xfc>
			MiApp_DiscardMessage();
    5ee8:	4b34      	ldr	r3, [pc, #208]	; (5fbc <main+0x214>)
    5eea:	4798      	blx	r3
    5eec:	e7da      	b.n	5ea4 <main+0xfc>
		printf("Power-On Reset\r\n");
    5eee:	4834      	ldr	r0, [pc, #208]	; (5fc0 <main+0x218>)
    5ef0:	47c0      	blx	r8
    5ef2:	e795      	b.n	5e20 <main+0x78>
		printf("Brown Out 12 Detector Reset\r\n");
    5ef4:	4833      	ldr	r0, [pc, #204]	; (5fc4 <main+0x21c>)
    5ef6:	47c0      	blx	r8
    5ef8:	e790      	b.n	5e1c <main+0x74>
		printf("Brown Out 33 Detector Reset\r\n");
    5efa:	4833      	ldr	r0, [pc, #204]	; (5fc8 <main+0x220>)
    5efc:	47c0      	blx	r8
    5efe:	e78b      	b.n	5e18 <main+0x70>
		printf("External Reset\r\n");
    5f00:	4832      	ldr	r0, [pc, #200]	; (5fcc <main+0x224>)
    5f02:	47c0      	blx	r8
    5f04:	e786      	b.n	5e14 <main+0x6c>
		printf("Watchdog Reset\r\n");
    5f06:	4832      	ldr	r0, [pc, #200]	; (5fd0 <main+0x228>)
    5f08:	47c0      	blx	r8
    5f0a:	e781      	b.n	5e10 <main+0x68>
		printf("System Reset Request\r\n");
    5f0c:	4b10      	ldr	r3, [pc, #64]	; (5f50 <main+0x1a8>)
    5f0e:	4831      	ldr	r0, [pc, #196]	; (5fd4 <main+0x22c>)
    5f10:	4698      	mov	r8, r3
    5f12:	4798      	blx	r3
    5f14:	e77a      	b.n	5e0c <main+0x64>
    5f16:	46c0      	nop			; (mov r8, r8)
    5f18:	00004a01 	.word	0x00004a01
    5f1c:	00003071 	.word	0x00003071
    5f20:	00005145 	.word	0x00005145
    5f24:	00002fbd 	.word	0x00002fbd
    5f28:	00002d5d 	.word	0x00002d5d
    5f2c:	0000243d 	.word	0x0000243d
    5f30:	00002695 	.word	0x00002695
    5f34:	00002cd1 	.word	0x00002cd1
    5f38:	00003289 	.word	0x00003289
    5f3c:	20000020 	.word	0x20000020
    5f40:	00007db5 	.word	0x00007db5
    5f44:	00008f4c 	.word	0x00008f4c
    5f48:	40000800 	.word	0x40000800
    5f4c:	00008f54 	.word	0x00008f54
    5f50:	00007ea9 	.word	0x00007ea9
    5f54:	000030e1 	.word	0x000030e1
    5f58:	40002800 	.word	0x40002800
    5f5c:	00002b9d 	.word	0x00002b9d
    5f60:	00008ff4 	.word	0x00008ff4
    5f64:	000023e9 	.word	0x000023e9
    5f68:	00009008 	.word	0x00009008
    5f6c:	00009020 	.word	0x00009020
    5f70:	00000115 	.word	0x00000115
    5f74:	00000cfd 	.word	0x00000cfd
    5f78:	00000dc5 	.word	0x00000dc5
    5f7c:	00005d99 	.word	0x00005d99
    5f80:	00000dd9 	.word	0x00000dd9
    5f84:	00000db1 	.word	0x00000db1
    5f88:	200009c8 	.word	0x200009c8
    5f8c:	00002b71 	.word	0x00002b71
    5f90:	00006e09 	.word	0x00006e09
    5f94:	200009c5 	.word	0x200009c5
    5f98:	000001a9 	.word	0x000001a9
    5f9c:	cccccccd 	.word	0xcccccccd
    5fa0:	3ffccccc 	.word	0x3ffccccc
    5fa4:	40400000 	.word	0x40400000
    5fa8:	00006181 	.word	0x00006181
    5fac:	00006145 	.word	0x00006145
    5fb0:	000025e5 	.word	0x000025e5
    5fb4:	00000e15 	.word	0x00000e15
    5fb8:	00002d05 	.word	0x00002d05
    5fbc:	00002679 	.word	0x00002679
    5fc0:	00008fe4 	.word	0x00008fe4
    5fc4:	00008fc4 	.word	0x00008fc4
    5fc8:	00008fa4 	.word	0x00008fa4
    5fcc:	00008f94 	.word	0x00008f94
    5fd0:	00008f84 	.word	0x00008f84
    5fd4:	00008f6c 	.word	0x00008f6c

00005fd8 <__udivsi3>:
    5fd8:	2200      	movs	r2, #0
    5fda:	0843      	lsrs	r3, r0, #1
    5fdc:	428b      	cmp	r3, r1
    5fde:	d374      	bcc.n	60ca <__udivsi3+0xf2>
    5fe0:	0903      	lsrs	r3, r0, #4
    5fe2:	428b      	cmp	r3, r1
    5fe4:	d35f      	bcc.n	60a6 <__udivsi3+0xce>
    5fe6:	0a03      	lsrs	r3, r0, #8
    5fe8:	428b      	cmp	r3, r1
    5fea:	d344      	bcc.n	6076 <__udivsi3+0x9e>
    5fec:	0b03      	lsrs	r3, r0, #12
    5fee:	428b      	cmp	r3, r1
    5ff0:	d328      	bcc.n	6044 <__udivsi3+0x6c>
    5ff2:	0c03      	lsrs	r3, r0, #16
    5ff4:	428b      	cmp	r3, r1
    5ff6:	d30d      	bcc.n	6014 <__udivsi3+0x3c>
    5ff8:	22ff      	movs	r2, #255	; 0xff
    5ffa:	0209      	lsls	r1, r1, #8
    5ffc:	ba12      	rev	r2, r2
    5ffe:	0c03      	lsrs	r3, r0, #16
    6000:	428b      	cmp	r3, r1
    6002:	d302      	bcc.n	600a <__udivsi3+0x32>
    6004:	1212      	asrs	r2, r2, #8
    6006:	0209      	lsls	r1, r1, #8
    6008:	d065      	beq.n	60d6 <__udivsi3+0xfe>
    600a:	0b03      	lsrs	r3, r0, #12
    600c:	428b      	cmp	r3, r1
    600e:	d319      	bcc.n	6044 <__udivsi3+0x6c>
    6010:	e000      	b.n	6014 <__udivsi3+0x3c>
    6012:	0a09      	lsrs	r1, r1, #8
    6014:	0bc3      	lsrs	r3, r0, #15
    6016:	428b      	cmp	r3, r1
    6018:	d301      	bcc.n	601e <__udivsi3+0x46>
    601a:	03cb      	lsls	r3, r1, #15
    601c:	1ac0      	subs	r0, r0, r3
    601e:	4152      	adcs	r2, r2
    6020:	0b83      	lsrs	r3, r0, #14
    6022:	428b      	cmp	r3, r1
    6024:	d301      	bcc.n	602a <__udivsi3+0x52>
    6026:	038b      	lsls	r3, r1, #14
    6028:	1ac0      	subs	r0, r0, r3
    602a:	4152      	adcs	r2, r2
    602c:	0b43      	lsrs	r3, r0, #13
    602e:	428b      	cmp	r3, r1
    6030:	d301      	bcc.n	6036 <__udivsi3+0x5e>
    6032:	034b      	lsls	r3, r1, #13
    6034:	1ac0      	subs	r0, r0, r3
    6036:	4152      	adcs	r2, r2
    6038:	0b03      	lsrs	r3, r0, #12
    603a:	428b      	cmp	r3, r1
    603c:	d301      	bcc.n	6042 <__udivsi3+0x6a>
    603e:	030b      	lsls	r3, r1, #12
    6040:	1ac0      	subs	r0, r0, r3
    6042:	4152      	adcs	r2, r2
    6044:	0ac3      	lsrs	r3, r0, #11
    6046:	428b      	cmp	r3, r1
    6048:	d301      	bcc.n	604e <__udivsi3+0x76>
    604a:	02cb      	lsls	r3, r1, #11
    604c:	1ac0      	subs	r0, r0, r3
    604e:	4152      	adcs	r2, r2
    6050:	0a83      	lsrs	r3, r0, #10
    6052:	428b      	cmp	r3, r1
    6054:	d301      	bcc.n	605a <__udivsi3+0x82>
    6056:	028b      	lsls	r3, r1, #10
    6058:	1ac0      	subs	r0, r0, r3
    605a:	4152      	adcs	r2, r2
    605c:	0a43      	lsrs	r3, r0, #9
    605e:	428b      	cmp	r3, r1
    6060:	d301      	bcc.n	6066 <__udivsi3+0x8e>
    6062:	024b      	lsls	r3, r1, #9
    6064:	1ac0      	subs	r0, r0, r3
    6066:	4152      	adcs	r2, r2
    6068:	0a03      	lsrs	r3, r0, #8
    606a:	428b      	cmp	r3, r1
    606c:	d301      	bcc.n	6072 <__udivsi3+0x9a>
    606e:	020b      	lsls	r3, r1, #8
    6070:	1ac0      	subs	r0, r0, r3
    6072:	4152      	adcs	r2, r2
    6074:	d2cd      	bcs.n	6012 <__udivsi3+0x3a>
    6076:	09c3      	lsrs	r3, r0, #7
    6078:	428b      	cmp	r3, r1
    607a:	d301      	bcc.n	6080 <__udivsi3+0xa8>
    607c:	01cb      	lsls	r3, r1, #7
    607e:	1ac0      	subs	r0, r0, r3
    6080:	4152      	adcs	r2, r2
    6082:	0983      	lsrs	r3, r0, #6
    6084:	428b      	cmp	r3, r1
    6086:	d301      	bcc.n	608c <__udivsi3+0xb4>
    6088:	018b      	lsls	r3, r1, #6
    608a:	1ac0      	subs	r0, r0, r3
    608c:	4152      	adcs	r2, r2
    608e:	0943      	lsrs	r3, r0, #5
    6090:	428b      	cmp	r3, r1
    6092:	d301      	bcc.n	6098 <__udivsi3+0xc0>
    6094:	014b      	lsls	r3, r1, #5
    6096:	1ac0      	subs	r0, r0, r3
    6098:	4152      	adcs	r2, r2
    609a:	0903      	lsrs	r3, r0, #4
    609c:	428b      	cmp	r3, r1
    609e:	d301      	bcc.n	60a4 <__udivsi3+0xcc>
    60a0:	010b      	lsls	r3, r1, #4
    60a2:	1ac0      	subs	r0, r0, r3
    60a4:	4152      	adcs	r2, r2
    60a6:	08c3      	lsrs	r3, r0, #3
    60a8:	428b      	cmp	r3, r1
    60aa:	d301      	bcc.n	60b0 <__udivsi3+0xd8>
    60ac:	00cb      	lsls	r3, r1, #3
    60ae:	1ac0      	subs	r0, r0, r3
    60b0:	4152      	adcs	r2, r2
    60b2:	0883      	lsrs	r3, r0, #2
    60b4:	428b      	cmp	r3, r1
    60b6:	d301      	bcc.n	60bc <__udivsi3+0xe4>
    60b8:	008b      	lsls	r3, r1, #2
    60ba:	1ac0      	subs	r0, r0, r3
    60bc:	4152      	adcs	r2, r2
    60be:	0843      	lsrs	r3, r0, #1
    60c0:	428b      	cmp	r3, r1
    60c2:	d301      	bcc.n	60c8 <__udivsi3+0xf0>
    60c4:	004b      	lsls	r3, r1, #1
    60c6:	1ac0      	subs	r0, r0, r3
    60c8:	4152      	adcs	r2, r2
    60ca:	1a41      	subs	r1, r0, r1
    60cc:	d200      	bcs.n	60d0 <__udivsi3+0xf8>
    60ce:	4601      	mov	r1, r0
    60d0:	4152      	adcs	r2, r2
    60d2:	4610      	mov	r0, r2
    60d4:	4770      	bx	lr
    60d6:	e7ff      	b.n	60d8 <__udivsi3+0x100>
    60d8:	b501      	push	{r0, lr}
    60da:	2000      	movs	r0, #0
    60dc:	f000 f806 	bl	60ec <__aeabi_idiv0>
    60e0:	bd02      	pop	{r1, pc}
    60e2:	46c0      	nop			; (mov r8, r8)

000060e4 <__aeabi_uidivmod>:
    60e4:	2900      	cmp	r1, #0
    60e6:	d0f7      	beq.n	60d8 <__udivsi3+0x100>
    60e8:	e776      	b.n	5fd8 <__udivsi3>
    60ea:	4770      	bx	lr

000060ec <__aeabi_idiv0>:
    60ec:	4770      	bx	lr
    60ee:	46c0      	nop			; (mov r8, r8)

000060f0 <__aeabi_lmul>:
    60f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    60f2:	46ce      	mov	lr, r9
    60f4:	4647      	mov	r7, r8
    60f6:	0415      	lsls	r5, r2, #16
    60f8:	0c2d      	lsrs	r5, r5, #16
    60fa:	002e      	movs	r6, r5
    60fc:	b580      	push	{r7, lr}
    60fe:	0407      	lsls	r7, r0, #16
    6100:	0c14      	lsrs	r4, r2, #16
    6102:	0c3f      	lsrs	r7, r7, #16
    6104:	4699      	mov	r9, r3
    6106:	0c03      	lsrs	r3, r0, #16
    6108:	437e      	muls	r6, r7
    610a:	435d      	muls	r5, r3
    610c:	4367      	muls	r7, r4
    610e:	4363      	muls	r3, r4
    6110:	197f      	adds	r7, r7, r5
    6112:	0c34      	lsrs	r4, r6, #16
    6114:	19e4      	adds	r4, r4, r7
    6116:	469c      	mov	ip, r3
    6118:	42a5      	cmp	r5, r4
    611a:	d903      	bls.n	6124 <__aeabi_lmul+0x34>
    611c:	2380      	movs	r3, #128	; 0x80
    611e:	025b      	lsls	r3, r3, #9
    6120:	4698      	mov	r8, r3
    6122:	44c4      	add	ip, r8
    6124:	464b      	mov	r3, r9
    6126:	4351      	muls	r1, r2
    6128:	4343      	muls	r3, r0
    612a:	0436      	lsls	r6, r6, #16
    612c:	0c36      	lsrs	r6, r6, #16
    612e:	0c25      	lsrs	r5, r4, #16
    6130:	0424      	lsls	r4, r4, #16
    6132:	4465      	add	r5, ip
    6134:	19a4      	adds	r4, r4, r6
    6136:	1859      	adds	r1, r3, r1
    6138:	1949      	adds	r1, r1, r5
    613a:	0020      	movs	r0, r4
    613c:	bc0c      	pop	{r2, r3}
    613e:	4690      	mov	r8, r2
    6140:	4699      	mov	r9, r3
    6142:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006144 <__aeabi_d2uiz>:
    6144:	b570      	push	{r4, r5, r6, lr}
    6146:	2200      	movs	r2, #0
    6148:	4b0c      	ldr	r3, [pc, #48]	; (617c <__aeabi_d2uiz+0x38>)
    614a:	0004      	movs	r4, r0
    614c:	000d      	movs	r5, r1
    614e:	f001 fcd3 	bl	7af8 <__aeabi_dcmpge>
    6152:	2800      	cmp	r0, #0
    6154:	d104      	bne.n	6160 <__aeabi_d2uiz+0x1c>
    6156:	0020      	movs	r0, r4
    6158:	0029      	movs	r1, r5
    615a:	f001 fbeb 	bl	7934 <__aeabi_d2iz>
    615e:	bd70      	pop	{r4, r5, r6, pc}
    6160:	4b06      	ldr	r3, [pc, #24]	; (617c <__aeabi_d2uiz+0x38>)
    6162:	2200      	movs	r2, #0
    6164:	0020      	movs	r0, r4
    6166:	0029      	movs	r1, r5
    6168:	f001 f8ce 	bl	7308 <__aeabi_dsub>
    616c:	f001 fbe2 	bl	7934 <__aeabi_d2iz>
    6170:	2380      	movs	r3, #128	; 0x80
    6172:	061b      	lsls	r3, r3, #24
    6174:	469c      	mov	ip, r3
    6176:	4460      	add	r0, ip
    6178:	e7f1      	b.n	615e <__aeabi_d2uiz+0x1a>
    617a:	46c0      	nop			; (mov r8, r8)
    617c:	41e00000 	.word	0x41e00000

00006180 <__aeabi_dadd>:
    6180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6182:	4645      	mov	r5, r8
    6184:	46de      	mov	lr, fp
    6186:	4657      	mov	r7, sl
    6188:	464e      	mov	r6, r9
    618a:	030c      	lsls	r4, r1, #12
    618c:	b5e0      	push	{r5, r6, r7, lr}
    618e:	004e      	lsls	r6, r1, #1
    6190:	0fc9      	lsrs	r1, r1, #31
    6192:	4688      	mov	r8, r1
    6194:	000d      	movs	r5, r1
    6196:	0a61      	lsrs	r1, r4, #9
    6198:	0f44      	lsrs	r4, r0, #29
    619a:	430c      	orrs	r4, r1
    619c:	00c7      	lsls	r7, r0, #3
    619e:	0319      	lsls	r1, r3, #12
    61a0:	0058      	lsls	r0, r3, #1
    61a2:	0fdb      	lsrs	r3, r3, #31
    61a4:	469b      	mov	fp, r3
    61a6:	0a4b      	lsrs	r3, r1, #9
    61a8:	0f51      	lsrs	r1, r2, #29
    61aa:	430b      	orrs	r3, r1
    61ac:	0d76      	lsrs	r6, r6, #21
    61ae:	0d40      	lsrs	r0, r0, #21
    61b0:	0019      	movs	r1, r3
    61b2:	00d2      	lsls	r2, r2, #3
    61b4:	45d8      	cmp	r8, fp
    61b6:	d100      	bne.n	61ba <__aeabi_dadd+0x3a>
    61b8:	e0ae      	b.n	6318 <__aeabi_dadd+0x198>
    61ba:	1a35      	subs	r5, r6, r0
    61bc:	2d00      	cmp	r5, #0
    61be:	dc00      	bgt.n	61c2 <__aeabi_dadd+0x42>
    61c0:	e0f6      	b.n	63b0 <__aeabi_dadd+0x230>
    61c2:	2800      	cmp	r0, #0
    61c4:	d10f      	bne.n	61e6 <__aeabi_dadd+0x66>
    61c6:	4313      	orrs	r3, r2
    61c8:	d100      	bne.n	61cc <__aeabi_dadd+0x4c>
    61ca:	e0db      	b.n	6384 <__aeabi_dadd+0x204>
    61cc:	1e6b      	subs	r3, r5, #1
    61ce:	2b00      	cmp	r3, #0
    61d0:	d000      	beq.n	61d4 <__aeabi_dadd+0x54>
    61d2:	e137      	b.n	6444 <__aeabi_dadd+0x2c4>
    61d4:	1aba      	subs	r2, r7, r2
    61d6:	4297      	cmp	r7, r2
    61d8:	41bf      	sbcs	r7, r7
    61da:	1a64      	subs	r4, r4, r1
    61dc:	427f      	negs	r7, r7
    61de:	1be4      	subs	r4, r4, r7
    61e0:	2601      	movs	r6, #1
    61e2:	0017      	movs	r7, r2
    61e4:	e024      	b.n	6230 <__aeabi_dadd+0xb0>
    61e6:	4bc6      	ldr	r3, [pc, #792]	; (6500 <__aeabi_dadd+0x380>)
    61e8:	429e      	cmp	r6, r3
    61ea:	d04d      	beq.n	6288 <__aeabi_dadd+0x108>
    61ec:	2380      	movs	r3, #128	; 0x80
    61ee:	041b      	lsls	r3, r3, #16
    61f0:	4319      	orrs	r1, r3
    61f2:	2d38      	cmp	r5, #56	; 0x38
    61f4:	dd00      	ble.n	61f8 <__aeabi_dadd+0x78>
    61f6:	e107      	b.n	6408 <__aeabi_dadd+0x288>
    61f8:	2d1f      	cmp	r5, #31
    61fa:	dd00      	ble.n	61fe <__aeabi_dadd+0x7e>
    61fc:	e138      	b.n	6470 <__aeabi_dadd+0x2f0>
    61fe:	2020      	movs	r0, #32
    6200:	1b43      	subs	r3, r0, r5
    6202:	469a      	mov	sl, r3
    6204:	000b      	movs	r3, r1
    6206:	4650      	mov	r0, sl
    6208:	4083      	lsls	r3, r0
    620a:	4699      	mov	r9, r3
    620c:	0013      	movs	r3, r2
    620e:	4648      	mov	r0, r9
    6210:	40eb      	lsrs	r3, r5
    6212:	4318      	orrs	r0, r3
    6214:	0003      	movs	r3, r0
    6216:	4650      	mov	r0, sl
    6218:	4082      	lsls	r2, r0
    621a:	1e50      	subs	r0, r2, #1
    621c:	4182      	sbcs	r2, r0
    621e:	40e9      	lsrs	r1, r5
    6220:	431a      	orrs	r2, r3
    6222:	1aba      	subs	r2, r7, r2
    6224:	1a61      	subs	r1, r4, r1
    6226:	4297      	cmp	r7, r2
    6228:	41a4      	sbcs	r4, r4
    622a:	0017      	movs	r7, r2
    622c:	4264      	negs	r4, r4
    622e:	1b0c      	subs	r4, r1, r4
    6230:	0223      	lsls	r3, r4, #8
    6232:	d562      	bpl.n	62fa <__aeabi_dadd+0x17a>
    6234:	0264      	lsls	r4, r4, #9
    6236:	0a65      	lsrs	r5, r4, #9
    6238:	2d00      	cmp	r5, #0
    623a:	d100      	bne.n	623e <__aeabi_dadd+0xbe>
    623c:	e0df      	b.n	63fe <__aeabi_dadd+0x27e>
    623e:	0028      	movs	r0, r5
    6240:	f001 fc64 	bl	7b0c <__clzsi2>
    6244:	0003      	movs	r3, r0
    6246:	3b08      	subs	r3, #8
    6248:	2b1f      	cmp	r3, #31
    624a:	dd00      	ble.n	624e <__aeabi_dadd+0xce>
    624c:	e0d2      	b.n	63f4 <__aeabi_dadd+0x274>
    624e:	2220      	movs	r2, #32
    6250:	003c      	movs	r4, r7
    6252:	1ad2      	subs	r2, r2, r3
    6254:	409d      	lsls	r5, r3
    6256:	40d4      	lsrs	r4, r2
    6258:	409f      	lsls	r7, r3
    625a:	4325      	orrs	r5, r4
    625c:	429e      	cmp	r6, r3
    625e:	dd00      	ble.n	6262 <__aeabi_dadd+0xe2>
    6260:	e0c4      	b.n	63ec <__aeabi_dadd+0x26c>
    6262:	1b9e      	subs	r6, r3, r6
    6264:	1c73      	adds	r3, r6, #1
    6266:	2b1f      	cmp	r3, #31
    6268:	dd00      	ble.n	626c <__aeabi_dadd+0xec>
    626a:	e0f1      	b.n	6450 <__aeabi_dadd+0x2d0>
    626c:	2220      	movs	r2, #32
    626e:	0038      	movs	r0, r7
    6270:	0029      	movs	r1, r5
    6272:	1ad2      	subs	r2, r2, r3
    6274:	40d8      	lsrs	r0, r3
    6276:	4091      	lsls	r1, r2
    6278:	4097      	lsls	r7, r2
    627a:	002c      	movs	r4, r5
    627c:	4301      	orrs	r1, r0
    627e:	1e78      	subs	r0, r7, #1
    6280:	4187      	sbcs	r7, r0
    6282:	40dc      	lsrs	r4, r3
    6284:	2600      	movs	r6, #0
    6286:	430f      	orrs	r7, r1
    6288:	077b      	lsls	r3, r7, #29
    628a:	d009      	beq.n	62a0 <__aeabi_dadd+0x120>
    628c:	230f      	movs	r3, #15
    628e:	403b      	ands	r3, r7
    6290:	2b04      	cmp	r3, #4
    6292:	d005      	beq.n	62a0 <__aeabi_dadd+0x120>
    6294:	1d3b      	adds	r3, r7, #4
    6296:	42bb      	cmp	r3, r7
    6298:	41bf      	sbcs	r7, r7
    629a:	427f      	negs	r7, r7
    629c:	19e4      	adds	r4, r4, r7
    629e:	001f      	movs	r7, r3
    62a0:	0223      	lsls	r3, r4, #8
    62a2:	d52c      	bpl.n	62fe <__aeabi_dadd+0x17e>
    62a4:	4b96      	ldr	r3, [pc, #600]	; (6500 <__aeabi_dadd+0x380>)
    62a6:	3601      	adds	r6, #1
    62a8:	429e      	cmp	r6, r3
    62aa:	d100      	bne.n	62ae <__aeabi_dadd+0x12e>
    62ac:	e09a      	b.n	63e4 <__aeabi_dadd+0x264>
    62ae:	4645      	mov	r5, r8
    62b0:	4b94      	ldr	r3, [pc, #592]	; (6504 <__aeabi_dadd+0x384>)
    62b2:	08ff      	lsrs	r7, r7, #3
    62b4:	401c      	ands	r4, r3
    62b6:	0760      	lsls	r0, r4, #29
    62b8:	0576      	lsls	r6, r6, #21
    62ba:	0264      	lsls	r4, r4, #9
    62bc:	4307      	orrs	r7, r0
    62be:	0b24      	lsrs	r4, r4, #12
    62c0:	0d76      	lsrs	r6, r6, #21
    62c2:	2100      	movs	r1, #0
    62c4:	0324      	lsls	r4, r4, #12
    62c6:	0b23      	lsrs	r3, r4, #12
    62c8:	0d0c      	lsrs	r4, r1, #20
    62ca:	4a8f      	ldr	r2, [pc, #572]	; (6508 <__aeabi_dadd+0x388>)
    62cc:	0524      	lsls	r4, r4, #20
    62ce:	431c      	orrs	r4, r3
    62d0:	4014      	ands	r4, r2
    62d2:	0533      	lsls	r3, r6, #20
    62d4:	4323      	orrs	r3, r4
    62d6:	005b      	lsls	r3, r3, #1
    62d8:	07ed      	lsls	r5, r5, #31
    62da:	085b      	lsrs	r3, r3, #1
    62dc:	432b      	orrs	r3, r5
    62de:	0038      	movs	r0, r7
    62e0:	0019      	movs	r1, r3
    62e2:	bc3c      	pop	{r2, r3, r4, r5}
    62e4:	4690      	mov	r8, r2
    62e6:	4699      	mov	r9, r3
    62e8:	46a2      	mov	sl, r4
    62ea:	46ab      	mov	fp, r5
    62ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    62ee:	4664      	mov	r4, ip
    62f0:	4304      	orrs	r4, r0
    62f2:	d100      	bne.n	62f6 <__aeabi_dadd+0x176>
    62f4:	e211      	b.n	671a <__aeabi_dadd+0x59a>
    62f6:	0004      	movs	r4, r0
    62f8:	4667      	mov	r7, ip
    62fa:	077b      	lsls	r3, r7, #29
    62fc:	d1c6      	bne.n	628c <__aeabi_dadd+0x10c>
    62fe:	4645      	mov	r5, r8
    6300:	0760      	lsls	r0, r4, #29
    6302:	08ff      	lsrs	r7, r7, #3
    6304:	4307      	orrs	r7, r0
    6306:	08e4      	lsrs	r4, r4, #3
    6308:	4b7d      	ldr	r3, [pc, #500]	; (6500 <__aeabi_dadd+0x380>)
    630a:	429e      	cmp	r6, r3
    630c:	d030      	beq.n	6370 <__aeabi_dadd+0x1f0>
    630e:	0324      	lsls	r4, r4, #12
    6310:	0576      	lsls	r6, r6, #21
    6312:	0b24      	lsrs	r4, r4, #12
    6314:	0d76      	lsrs	r6, r6, #21
    6316:	e7d4      	b.n	62c2 <__aeabi_dadd+0x142>
    6318:	1a33      	subs	r3, r6, r0
    631a:	469a      	mov	sl, r3
    631c:	2b00      	cmp	r3, #0
    631e:	dd78      	ble.n	6412 <__aeabi_dadd+0x292>
    6320:	2800      	cmp	r0, #0
    6322:	d031      	beq.n	6388 <__aeabi_dadd+0x208>
    6324:	4876      	ldr	r0, [pc, #472]	; (6500 <__aeabi_dadd+0x380>)
    6326:	4286      	cmp	r6, r0
    6328:	d0ae      	beq.n	6288 <__aeabi_dadd+0x108>
    632a:	2080      	movs	r0, #128	; 0x80
    632c:	0400      	lsls	r0, r0, #16
    632e:	4301      	orrs	r1, r0
    6330:	4653      	mov	r3, sl
    6332:	2b38      	cmp	r3, #56	; 0x38
    6334:	dc00      	bgt.n	6338 <__aeabi_dadd+0x1b8>
    6336:	e0e9      	b.n	650c <__aeabi_dadd+0x38c>
    6338:	430a      	orrs	r2, r1
    633a:	1e51      	subs	r1, r2, #1
    633c:	418a      	sbcs	r2, r1
    633e:	2100      	movs	r1, #0
    6340:	19d2      	adds	r2, r2, r7
    6342:	42ba      	cmp	r2, r7
    6344:	41bf      	sbcs	r7, r7
    6346:	1909      	adds	r1, r1, r4
    6348:	427c      	negs	r4, r7
    634a:	0017      	movs	r7, r2
    634c:	190c      	adds	r4, r1, r4
    634e:	0223      	lsls	r3, r4, #8
    6350:	d5d3      	bpl.n	62fa <__aeabi_dadd+0x17a>
    6352:	4b6b      	ldr	r3, [pc, #428]	; (6500 <__aeabi_dadd+0x380>)
    6354:	3601      	adds	r6, #1
    6356:	429e      	cmp	r6, r3
    6358:	d100      	bne.n	635c <__aeabi_dadd+0x1dc>
    635a:	e13a      	b.n	65d2 <__aeabi_dadd+0x452>
    635c:	2001      	movs	r0, #1
    635e:	4b69      	ldr	r3, [pc, #420]	; (6504 <__aeabi_dadd+0x384>)
    6360:	401c      	ands	r4, r3
    6362:	087b      	lsrs	r3, r7, #1
    6364:	4007      	ands	r7, r0
    6366:	431f      	orrs	r7, r3
    6368:	07e0      	lsls	r0, r4, #31
    636a:	4307      	orrs	r7, r0
    636c:	0864      	lsrs	r4, r4, #1
    636e:	e78b      	b.n	6288 <__aeabi_dadd+0x108>
    6370:	0023      	movs	r3, r4
    6372:	433b      	orrs	r3, r7
    6374:	d100      	bne.n	6378 <__aeabi_dadd+0x1f8>
    6376:	e1cb      	b.n	6710 <__aeabi_dadd+0x590>
    6378:	2280      	movs	r2, #128	; 0x80
    637a:	0312      	lsls	r2, r2, #12
    637c:	4314      	orrs	r4, r2
    637e:	0324      	lsls	r4, r4, #12
    6380:	0b24      	lsrs	r4, r4, #12
    6382:	e79e      	b.n	62c2 <__aeabi_dadd+0x142>
    6384:	002e      	movs	r6, r5
    6386:	e77f      	b.n	6288 <__aeabi_dadd+0x108>
    6388:	0008      	movs	r0, r1
    638a:	4310      	orrs	r0, r2
    638c:	d100      	bne.n	6390 <__aeabi_dadd+0x210>
    638e:	e0b4      	b.n	64fa <__aeabi_dadd+0x37a>
    6390:	1e58      	subs	r0, r3, #1
    6392:	2800      	cmp	r0, #0
    6394:	d000      	beq.n	6398 <__aeabi_dadd+0x218>
    6396:	e0de      	b.n	6556 <__aeabi_dadd+0x3d6>
    6398:	18ba      	adds	r2, r7, r2
    639a:	42ba      	cmp	r2, r7
    639c:	419b      	sbcs	r3, r3
    639e:	1864      	adds	r4, r4, r1
    63a0:	425b      	negs	r3, r3
    63a2:	18e4      	adds	r4, r4, r3
    63a4:	0017      	movs	r7, r2
    63a6:	2601      	movs	r6, #1
    63a8:	0223      	lsls	r3, r4, #8
    63aa:	d5a6      	bpl.n	62fa <__aeabi_dadd+0x17a>
    63ac:	2602      	movs	r6, #2
    63ae:	e7d5      	b.n	635c <__aeabi_dadd+0x1dc>
    63b0:	2d00      	cmp	r5, #0
    63b2:	d16e      	bne.n	6492 <__aeabi_dadd+0x312>
    63b4:	1c70      	adds	r0, r6, #1
    63b6:	0540      	lsls	r0, r0, #21
    63b8:	0d40      	lsrs	r0, r0, #21
    63ba:	2801      	cmp	r0, #1
    63bc:	dc00      	bgt.n	63c0 <__aeabi_dadd+0x240>
    63be:	e0f9      	b.n	65b4 <__aeabi_dadd+0x434>
    63c0:	1ab8      	subs	r0, r7, r2
    63c2:	4684      	mov	ip, r0
    63c4:	4287      	cmp	r7, r0
    63c6:	4180      	sbcs	r0, r0
    63c8:	1ae5      	subs	r5, r4, r3
    63ca:	4240      	negs	r0, r0
    63cc:	1a2d      	subs	r5, r5, r0
    63ce:	0228      	lsls	r0, r5, #8
    63d0:	d400      	bmi.n	63d4 <__aeabi_dadd+0x254>
    63d2:	e089      	b.n	64e8 <__aeabi_dadd+0x368>
    63d4:	1bd7      	subs	r7, r2, r7
    63d6:	42ba      	cmp	r2, r7
    63d8:	4192      	sbcs	r2, r2
    63da:	1b1c      	subs	r4, r3, r4
    63dc:	4252      	negs	r2, r2
    63de:	1aa5      	subs	r5, r4, r2
    63e0:	46d8      	mov	r8, fp
    63e2:	e729      	b.n	6238 <__aeabi_dadd+0xb8>
    63e4:	4645      	mov	r5, r8
    63e6:	2400      	movs	r4, #0
    63e8:	2700      	movs	r7, #0
    63ea:	e76a      	b.n	62c2 <__aeabi_dadd+0x142>
    63ec:	4c45      	ldr	r4, [pc, #276]	; (6504 <__aeabi_dadd+0x384>)
    63ee:	1af6      	subs	r6, r6, r3
    63f0:	402c      	ands	r4, r5
    63f2:	e749      	b.n	6288 <__aeabi_dadd+0x108>
    63f4:	003d      	movs	r5, r7
    63f6:	3828      	subs	r0, #40	; 0x28
    63f8:	4085      	lsls	r5, r0
    63fa:	2700      	movs	r7, #0
    63fc:	e72e      	b.n	625c <__aeabi_dadd+0xdc>
    63fe:	0038      	movs	r0, r7
    6400:	f001 fb84 	bl	7b0c <__clzsi2>
    6404:	3020      	adds	r0, #32
    6406:	e71d      	b.n	6244 <__aeabi_dadd+0xc4>
    6408:	430a      	orrs	r2, r1
    640a:	1e51      	subs	r1, r2, #1
    640c:	418a      	sbcs	r2, r1
    640e:	2100      	movs	r1, #0
    6410:	e707      	b.n	6222 <__aeabi_dadd+0xa2>
    6412:	2b00      	cmp	r3, #0
    6414:	d000      	beq.n	6418 <__aeabi_dadd+0x298>
    6416:	e0f3      	b.n	6600 <__aeabi_dadd+0x480>
    6418:	1c70      	adds	r0, r6, #1
    641a:	0543      	lsls	r3, r0, #21
    641c:	0d5b      	lsrs	r3, r3, #21
    641e:	2b01      	cmp	r3, #1
    6420:	dc00      	bgt.n	6424 <__aeabi_dadd+0x2a4>
    6422:	e0ad      	b.n	6580 <__aeabi_dadd+0x400>
    6424:	4b36      	ldr	r3, [pc, #216]	; (6500 <__aeabi_dadd+0x380>)
    6426:	4298      	cmp	r0, r3
    6428:	d100      	bne.n	642c <__aeabi_dadd+0x2ac>
    642a:	e0d1      	b.n	65d0 <__aeabi_dadd+0x450>
    642c:	18ba      	adds	r2, r7, r2
    642e:	42ba      	cmp	r2, r7
    6430:	41bf      	sbcs	r7, r7
    6432:	1864      	adds	r4, r4, r1
    6434:	427f      	negs	r7, r7
    6436:	19e4      	adds	r4, r4, r7
    6438:	07e7      	lsls	r7, r4, #31
    643a:	0852      	lsrs	r2, r2, #1
    643c:	4317      	orrs	r7, r2
    643e:	0864      	lsrs	r4, r4, #1
    6440:	0006      	movs	r6, r0
    6442:	e721      	b.n	6288 <__aeabi_dadd+0x108>
    6444:	482e      	ldr	r0, [pc, #184]	; (6500 <__aeabi_dadd+0x380>)
    6446:	4285      	cmp	r5, r0
    6448:	d100      	bne.n	644c <__aeabi_dadd+0x2cc>
    644a:	e093      	b.n	6574 <__aeabi_dadd+0x3f4>
    644c:	001d      	movs	r5, r3
    644e:	e6d0      	b.n	61f2 <__aeabi_dadd+0x72>
    6450:	0029      	movs	r1, r5
    6452:	3e1f      	subs	r6, #31
    6454:	40f1      	lsrs	r1, r6
    6456:	2b20      	cmp	r3, #32
    6458:	d100      	bne.n	645c <__aeabi_dadd+0x2dc>
    645a:	e08d      	b.n	6578 <__aeabi_dadd+0x3f8>
    645c:	2240      	movs	r2, #64	; 0x40
    645e:	1ad3      	subs	r3, r2, r3
    6460:	409d      	lsls	r5, r3
    6462:	432f      	orrs	r7, r5
    6464:	1e7d      	subs	r5, r7, #1
    6466:	41af      	sbcs	r7, r5
    6468:	2400      	movs	r4, #0
    646a:	430f      	orrs	r7, r1
    646c:	2600      	movs	r6, #0
    646e:	e744      	b.n	62fa <__aeabi_dadd+0x17a>
    6470:	002b      	movs	r3, r5
    6472:	0008      	movs	r0, r1
    6474:	3b20      	subs	r3, #32
    6476:	40d8      	lsrs	r0, r3
    6478:	0003      	movs	r3, r0
    647a:	2d20      	cmp	r5, #32
    647c:	d100      	bne.n	6480 <__aeabi_dadd+0x300>
    647e:	e07d      	b.n	657c <__aeabi_dadd+0x3fc>
    6480:	2040      	movs	r0, #64	; 0x40
    6482:	1b45      	subs	r5, r0, r5
    6484:	40a9      	lsls	r1, r5
    6486:	430a      	orrs	r2, r1
    6488:	1e51      	subs	r1, r2, #1
    648a:	418a      	sbcs	r2, r1
    648c:	2100      	movs	r1, #0
    648e:	431a      	orrs	r2, r3
    6490:	e6c7      	b.n	6222 <__aeabi_dadd+0xa2>
    6492:	2e00      	cmp	r6, #0
    6494:	d050      	beq.n	6538 <__aeabi_dadd+0x3b8>
    6496:	4e1a      	ldr	r6, [pc, #104]	; (6500 <__aeabi_dadd+0x380>)
    6498:	42b0      	cmp	r0, r6
    649a:	d057      	beq.n	654c <__aeabi_dadd+0x3cc>
    649c:	2680      	movs	r6, #128	; 0x80
    649e:	426b      	negs	r3, r5
    64a0:	4699      	mov	r9, r3
    64a2:	0436      	lsls	r6, r6, #16
    64a4:	4334      	orrs	r4, r6
    64a6:	464b      	mov	r3, r9
    64a8:	2b38      	cmp	r3, #56	; 0x38
    64aa:	dd00      	ble.n	64ae <__aeabi_dadd+0x32e>
    64ac:	e0d6      	b.n	665c <__aeabi_dadd+0x4dc>
    64ae:	2b1f      	cmp	r3, #31
    64b0:	dd00      	ble.n	64b4 <__aeabi_dadd+0x334>
    64b2:	e135      	b.n	6720 <__aeabi_dadd+0x5a0>
    64b4:	2620      	movs	r6, #32
    64b6:	1af5      	subs	r5, r6, r3
    64b8:	0026      	movs	r6, r4
    64ba:	40ae      	lsls	r6, r5
    64bc:	46b2      	mov	sl, r6
    64be:	003e      	movs	r6, r7
    64c0:	40de      	lsrs	r6, r3
    64c2:	46ac      	mov	ip, r5
    64c4:	0035      	movs	r5, r6
    64c6:	4656      	mov	r6, sl
    64c8:	432e      	orrs	r6, r5
    64ca:	4665      	mov	r5, ip
    64cc:	40af      	lsls	r7, r5
    64ce:	1e7d      	subs	r5, r7, #1
    64d0:	41af      	sbcs	r7, r5
    64d2:	40dc      	lsrs	r4, r3
    64d4:	4337      	orrs	r7, r6
    64d6:	1bd7      	subs	r7, r2, r7
    64d8:	42ba      	cmp	r2, r7
    64da:	4192      	sbcs	r2, r2
    64dc:	1b0c      	subs	r4, r1, r4
    64de:	4252      	negs	r2, r2
    64e0:	1aa4      	subs	r4, r4, r2
    64e2:	0006      	movs	r6, r0
    64e4:	46d8      	mov	r8, fp
    64e6:	e6a3      	b.n	6230 <__aeabi_dadd+0xb0>
    64e8:	4664      	mov	r4, ip
    64ea:	4667      	mov	r7, ip
    64ec:	432c      	orrs	r4, r5
    64ee:	d000      	beq.n	64f2 <__aeabi_dadd+0x372>
    64f0:	e6a2      	b.n	6238 <__aeabi_dadd+0xb8>
    64f2:	2500      	movs	r5, #0
    64f4:	2600      	movs	r6, #0
    64f6:	2700      	movs	r7, #0
    64f8:	e706      	b.n	6308 <__aeabi_dadd+0x188>
    64fa:	001e      	movs	r6, r3
    64fc:	e6c4      	b.n	6288 <__aeabi_dadd+0x108>
    64fe:	46c0      	nop			; (mov r8, r8)
    6500:	000007ff 	.word	0x000007ff
    6504:	ff7fffff 	.word	0xff7fffff
    6508:	800fffff 	.word	0x800fffff
    650c:	2b1f      	cmp	r3, #31
    650e:	dc63      	bgt.n	65d8 <__aeabi_dadd+0x458>
    6510:	2020      	movs	r0, #32
    6512:	1ac3      	subs	r3, r0, r3
    6514:	0008      	movs	r0, r1
    6516:	4098      	lsls	r0, r3
    6518:	469c      	mov	ip, r3
    651a:	4683      	mov	fp, r0
    651c:	4653      	mov	r3, sl
    651e:	0010      	movs	r0, r2
    6520:	40d8      	lsrs	r0, r3
    6522:	0003      	movs	r3, r0
    6524:	4658      	mov	r0, fp
    6526:	4318      	orrs	r0, r3
    6528:	4663      	mov	r3, ip
    652a:	409a      	lsls	r2, r3
    652c:	1e53      	subs	r3, r2, #1
    652e:	419a      	sbcs	r2, r3
    6530:	4653      	mov	r3, sl
    6532:	4302      	orrs	r2, r0
    6534:	40d9      	lsrs	r1, r3
    6536:	e703      	b.n	6340 <__aeabi_dadd+0x1c0>
    6538:	0026      	movs	r6, r4
    653a:	433e      	orrs	r6, r7
    653c:	d006      	beq.n	654c <__aeabi_dadd+0x3cc>
    653e:	43eb      	mvns	r3, r5
    6540:	4699      	mov	r9, r3
    6542:	2b00      	cmp	r3, #0
    6544:	d0c7      	beq.n	64d6 <__aeabi_dadd+0x356>
    6546:	4e94      	ldr	r6, [pc, #592]	; (6798 <__aeabi_dadd+0x618>)
    6548:	42b0      	cmp	r0, r6
    654a:	d1ac      	bne.n	64a6 <__aeabi_dadd+0x326>
    654c:	000c      	movs	r4, r1
    654e:	0017      	movs	r7, r2
    6550:	0006      	movs	r6, r0
    6552:	46d8      	mov	r8, fp
    6554:	e698      	b.n	6288 <__aeabi_dadd+0x108>
    6556:	4b90      	ldr	r3, [pc, #576]	; (6798 <__aeabi_dadd+0x618>)
    6558:	459a      	cmp	sl, r3
    655a:	d00b      	beq.n	6574 <__aeabi_dadd+0x3f4>
    655c:	4682      	mov	sl, r0
    655e:	e6e7      	b.n	6330 <__aeabi_dadd+0x1b0>
    6560:	2800      	cmp	r0, #0
    6562:	d000      	beq.n	6566 <__aeabi_dadd+0x3e6>
    6564:	e09e      	b.n	66a4 <__aeabi_dadd+0x524>
    6566:	0018      	movs	r0, r3
    6568:	4310      	orrs	r0, r2
    656a:	d100      	bne.n	656e <__aeabi_dadd+0x3ee>
    656c:	e0e9      	b.n	6742 <__aeabi_dadd+0x5c2>
    656e:	001c      	movs	r4, r3
    6570:	0017      	movs	r7, r2
    6572:	46d8      	mov	r8, fp
    6574:	4e88      	ldr	r6, [pc, #544]	; (6798 <__aeabi_dadd+0x618>)
    6576:	e687      	b.n	6288 <__aeabi_dadd+0x108>
    6578:	2500      	movs	r5, #0
    657a:	e772      	b.n	6462 <__aeabi_dadd+0x2e2>
    657c:	2100      	movs	r1, #0
    657e:	e782      	b.n	6486 <__aeabi_dadd+0x306>
    6580:	0023      	movs	r3, r4
    6582:	433b      	orrs	r3, r7
    6584:	2e00      	cmp	r6, #0
    6586:	d000      	beq.n	658a <__aeabi_dadd+0x40a>
    6588:	e0ab      	b.n	66e2 <__aeabi_dadd+0x562>
    658a:	2b00      	cmp	r3, #0
    658c:	d100      	bne.n	6590 <__aeabi_dadd+0x410>
    658e:	e0e7      	b.n	6760 <__aeabi_dadd+0x5e0>
    6590:	000b      	movs	r3, r1
    6592:	4313      	orrs	r3, r2
    6594:	d100      	bne.n	6598 <__aeabi_dadd+0x418>
    6596:	e677      	b.n	6288 <__aeabi_dadd+0x108>
    6598:	18ba      	adds	r2, r7, r2
    659a:	42ba      	cmp	r2, r7
    659c:	41bf      	sbcs	r7, r7
    659e:	1864      	adds	r4, r4, r1
    65a0:	427f      	negs	r7, r7
    65a2:	19e4      	adds	r4, r4, r7
    65a4:	0223      	lsls	r3, r4, #8
    65a6:	d400      	bmi.n	65aa <__aeabi_dadd+0x42a>
    65a8:	e0f2      	b.n	6790 <__aeabi_dadd+0x610>
    65aa:	4b7c      	ldr	r3, [pc, #496]	; (679c <__aeabi_dadd+0x61c>)
    65ac:	0017      	movs	r7, r2
    65ae:	401c      	ands	r4, r3
    65b0:	0006      	movs	r6, r0
    65b2:	e669      	b.n	6288 <__aeabi_dadd+0x108>
    65b4:	0020      	movs	r0, r4
    65b6:	4338      	orrs	r0, r7
    65b8:	2e00      	cmp	r6, #0
    65ba:	d1d1      	bne.n	6560 <__aeabi_dadd+0x3e0>
    65bc:	2800      	cmp	r0, #0
    65be:	d15b      	bne.n	6678 <__aeabi_dadd+0x4f8>
    65c0:	001c      	movs	r4, r3
    65c2:	4314      	orrs	r4, r2
    65c4:	d100      	bne.n	65c8 <__aeabi_dadd+0x448>
    65c6:	e0a8      	b.n	671a <__aeabi_dadd+0x59a>
    65c8:	001c      	movs	r4, r3
    65ca:	0017      	movs	r7, r2
    65cc:	46d8      	mov	r8, fp
    65ce:	e65b      	b.n	6288 <__aeabi_dadd+0x108>
    65d0:	0006      	movs	r6, r0
    65d2:	2400      	movs	r4, #0
    65d4:	2700      	movs	r7, #0
    65d6:	e697      	b.n	6308 <__aeabi_dadd+0x188>
    65d8:	4650      	mov	r0, sl
    65da:	000b      	movs	r3, r1
    65dc:	3820      	subs	r0, #32
    65de:	40c3      	lsrs	r3, r0
    65e0:	4699      	mov	r9, r3
    65e2:	4653      	mov	r3, sl
    65e4:	2b20      	cmp	r3, #32
    65e6:	d100      	bne.n	65ea <__aeabi_dadd+0x46a>
    65e8:	e095      	b.n	6716 <__aeabi_dadd+0x596>
    65ea:	2340      	movs	r3, #64	; 0x40
    65ec:	4650      	mov	r0, sl
    65ee:	1a1b      	subs	r3, r3, r0
    65f0:	4099      	lsls	r1, r3
    65f2:	430a      	orrs	r2, r1
    65f4:	1e51      	subs	r1, r2, #1
    65f6:	418a      	sbcs	r2, r1
    65f8:	464b      	mov	r3, r9
    65fa:	2100      	movs	r1, #0
    65fc:	431a      	orrs	r2, r3
    65fe:	e69f      	b.n	6340 <__aeabi_dadd+0x1c0>
    6600:	2e00      	cmp	r6, #0
    6602:	d130      	bne.n	6666 <__aeabi_dadd+0x4e6>
    6604:	0026      	movs	r6, r4
    6606:	433e      	orrs	r6, r7
    6608:	d067      	beq.n	66da <__aeabi_dadd+0x55a>
    660a:	43db      	mvns	r3, r3
    660c:	469a      	mov	sl, r3
    660e:	2b00      	cmp	r3, #0
    6610:	d01c      	beq.n	664c <__aeabi_dadd+0x4cc>
    6612:	4e61      	ldr	r6, [pc, #388]	; (6798 <__aeabi_dadd+0x618>)
    6614:	42b0      	cmp	r0, r6
    6616:	d060      	beq.n	66da <__aeabi_dadd+0x55a>
    6618:	4653      	mov	r3, sl
    661a:	2b38      	cmp	r3, #56	; 0x38
    661c:	dd00      	ble.n	6620 <__aeabi_dadd+0x4a0>
    661e:	e096      	b.n	674e <__aeabi_dadd+0x5ce>
    6620:	2b1f      	cmp	r3, #31
    6622:	dd00      	ble.n	6626 <__aeabi_dadd+0x4a6>
    6624:	e09f      	b.n	6766 <__aeabi_dadd+0x5e6>
    6626:	2620      	movs	r6, #32
    6628:	1af3      	subs	r3, r6, r3
    662a:	0026      	movs	r6, r4
    662c:	409e      	lsls	r6, r3
    662e:	469c      	mov	ip, r3
    6630:	46b3      	mov	fp, r6
    6632:	4653      	mov	r3, sl
    6634:	003e      	movs	r6, r7
    6636:	40de      	lsrs	r6, r3
    6638:	0033      	movs	r3, r6
    663a:	465e      	mov	r6, fp
    663c:	431e      	orrs	r6, r3
    663e:	4663      	mov	r3, ip
    6640:	409f      	lsls	r7, r3
    6642:	1e7b      	subs	r3, r7, #1
    6644:	419f      	sbcs	r7, r3
    6646:	4653      	mov	r3, sl
    6648:	40dc      	lsrs	r4, r3
    664a:	4337      	orrs	r7, r6
    664c:	18bf      	adds	r7, r7, r2
    664e:	4297      	cmp	r7, r2
    6650:	4192      	sbcs	r2, r2
    6652:	1864      	adds	r4, r4, r1
    6654:	4252      	negs	r2, r2
    6656:	18a4      	adds	r4, r4, r2
    6658:	0006      	movs	r6, r0
    665a:	e678      	b.n	634e <__aeabi_dadd+0x1ce>
    665c:	4327      	orrs	r7, r4
    665e:	1e7c      	subs	r4, r7, #1
    6660:	41a7      	sbcs	r7, r4
    6662:	2400      	movs	r4, #0
    6664:	e737      	b.n	64d6 <__aeabi_dadd+0x356>
    6666:	4e4c      	ldr	r6, [pc, #304]	; (6798 <__aeabi_dadd+0x618>)
    6668:	42b0      	cmp	r0, r6
    666a:	d036      	beq.n	66da <__aeabi_dadd+0x55a>
    666c:	2680      	movs	r6, #128	; 0x80
    666e:	425b      	negs	r3, r3
    6670:	0436      	lsls	r6, r6, #16
    6672:	469a      	mov	sl, r3
    6674:	4334      	orrs	r4, r6
    6676:	e7cf      	b.n	6618 <__aeabi_dadd+0x498>
    6678:	0018      	movs	r0, r3
    667a:	4310      	orrs	r0, r2
    667c:	d100      	bne.n	6680 <__aeabi_dadd+0x500>
    667e:	e603      	b.n	6288 <__aeabi_dadd+0x108>
    6680:	1ab8      	subs	r0, r7, r2
    6682:	4684      	mov	ip, r0
    6684:	4567      	cmp	r7, ip
    6686:	41ad      	sbcs	r5, r5
    6688:	1ae0      	subs	r0, r4, r3
    668a:	426d      	negs	r5, r5
    668c:	1b40      	subs	r0, r0, r5
    668e:	0205      	lsls	r5, r0, #8
    6690:	d400      	bmi.n	6694 <__aeabi_dadd+0x514>
    6692:	e62c      	b.n	62ee <__aeabi_dadd+0x16e>
    6694:	1bd7      	subs	r7, r2, r7
    6696:	42ba      	cmp	r2, r7
    6698:	4192      	sbcs	r2, r2
    669a:	1b1c      	subs	r4, r3, r4
    669c:	4252      	negs	r2, r2
    669e:	1aa4      	subs	r4, r4, r2
    66a0:	46d8      	mov	r8, fp
    66a2:	e5f1      	b.n	6288 <__aeabi_dadd+0x108>
    66a4:	0018      	movs	r0, r3
    66a6:	4310      	orrs	r0, r2
    66a8:	d100      	bne.n	66ac <__aeabi_dadd+0x52c>
    66aa:	e763      	b.n	6574 <__aeabi_dadd+0x3f4>
    66ac:	08f8      	lsrs	r0, r7, #3
    66ae:	0767      	lsls	r7, r4, #29
    66b0:	4307      	orrs	r7, r0
    66b2:	2080      	movs	r0, #128	; 0x80
    66b4:	08e4      	lsrs	r4, r4, #3
    66b6:	0300      	lsls	r0, r0, #12
    66b8:	4204      	tst	r4, r0
    66ba:	d008      	beq.n	66ce <__aeabi_dadd+0x54e>
    66bc:	08dd      	lsrs	r5, r3, #3
    66be:	4205      	tst	r5, r0
    66c0:	d105      	bne.n	66ce <__aeabi_dadd+0x54e>
    66c2:	08d2      	lsrs	r2, r2, #3
    66c4:	0759      	lsls	r1, r3, #29
    66c6:	4311      	orrs	r1, r2
    66c8:	000f      	movs	r7, r1
    66ca:	002c      	movs	r4, r5
    66cc:	46d8      	mov	r8, fp
    66ce:	0f7b      	lsrs	r3, r7, #29
    66d0:	00e4      	lsls	r4, r4, #3
    66d2:	431c      	orrs	r4, r3
    66d4:	00ff      	lsls	r7, r7, #3
    66d6:	4e30      	ldr	r6, [pc, #192]	; (6798 <__aeabi_dadd+0x618>)
    66d8:	e5d6      	b.n	6288 <__aeabi_dadd+0x108>
    66da:	000c      	movs	r4, r1
    66dc:	0017      	movs	r7, r2
    66de:	0006      	movs	r6, r0
    66e0:	e5d2      	b.n	6288 <__aeabi_dadd+0x108>
    66e2:	2b00      	cmp	r3, #0
    66e4:	d038      	beq.n	6758 <__aeabi_dadd+0x5d8>
    66e6:	000b      	movs	r3, r1
    66e8:	4313      	orrs	r3, r2
    66ea:	d100      	bne.n	66ee <__aeabi_dadd+0x56e>
    66ec:	e742      	b.n	6574 <__aeabi_dadd+0x3f4>
    66ee:	08f8      	lsrs	r0, r7, #3
    66f0:	0767      	lsls	r7, r4, #29
    66f2:	4307      	orrs	r7, r0
    66f4:	2080      	movs	r0, #128	; 0x80
    66f6:	08e4      	lsrs	r4, r4, #3
    66f8:	0300      	lsls	r0, r0, #12
    66fa:	4204      	tst	r4, r0
    66fc:	d0e7      	beq.n	66ce <__aeabi_dadd+0x54e>
    66fe:	08cb      	lsrs	r3, r1, #3
    6700:	4203      	tst	r3, r0
    6702:	d1e4      	bne.n	66ce <__aeabi_dadd+0x54e>
    6704:	08d2      	lsrs	r2, r2, #3
    6706:	0749      	lsls	r1, r1, #29
    6708:	4311      	orrs	r1, r2
    670a:	000f      	movs	r7, r1
    670c:	001c      	movs	r4, r3
    670e:	e7de      	b.n	66ce <__aeabi_dadd+0x54e>
    6710:	2700      	movs	r7, #0
    6712:	2400      	movs	r4, #0
    6714:	e5d5      	b.n	62c2 <__aeabi_dadd+0x142>
    6716:	2100      	movs	r1, #0
    6718:	e76b      	b.n	65f2 <__aeabi_dadd+0x472>
    671a:	2500      	movs	r5, #0
    671c:	2700      	movs	r7, #0
    671e:	e5f3      	b.n	6308 <__aeabi_dadd+0x188>
    6720:	464e      	mov	r6, r9
    6722:	0025      	movs	r5, r4
    6724:	3e20      	subs	r6, #32
    6726:	40f5      	lsrs	r5, r6
    6728:	464b      	mov	r3, r9
    672a:	002e      	movs	r6, r5
    672c:	2b20      	cmp	r3, #32
    672e:	d02d      	beq.n	678c <__aeabi_dadd+0x60c>
    6730:	2540      	movs	r5, #64	; 0x40
    6732:	1aed      	subs	r5, r5, r3
    6734:	40ac      	lsls	r4, r5
    6736:	4327      	orrs	r7, r4
    6738:	1e7c      	subs	r4, r7, #1
    673a:	41a7      	sbcs	r7, r4
    673c:	2400      	movs	r4, #0
    673e:	4337      	orrs	r7, r6
    6740:	e6c9      	b.n	64d6 <__aeabi_dadd+0x356>
    6742:	2480      	movs	r4, #128	; 0x80
    6744:	2500      	movs	r5, #0
    6746:	0324      	lsls	r4, r4, #12
    6748:	4e13      	ldr	r6, [pc, #76]	; (6798 <__aeabi_dadd+0x618>)
    674a:	2700      	movs	r7, #0
    674c:	e5dc      	b.n	6308 <__aeabi_dadd+0x188>
    674e:	4327      	orrs	r7, r4
    6750:	1e7c      	subs	r4, r7, #1
    6752:	41a7      	sbcs	r7, r4
    6754:	2400      	movs	r4, #0
    6756:	e779      	b.n	664c <__aeabi_dadd+0x4cc>
    6758:	000c      	movs	r4, r1
    675a:	0017      	movs	r7, r2
    675c:	4e0e      	ldr	r6, [pc, #56]	; (6798 <__aeabi_dadd+0x618>)
    675e:	e593      	b.n	6288 <__aeabi_dadd+0x108>
    6760:	000c      	movs	r4, r1
    6762:	0017      	movs	r7, r2
    6764:	e590      	b.n	6288 <__aeabi_dadd+0x108>
    6766:	4656      	mov	r6, sl
    6768:	0023      	movs	r3, r4
    676a:	3e20      	subs	r6, #32
    676c:	40f3      	lsrs	r3, r6
    676e:	4699      	mov	r9, r3
    6770:	4653      	mov	r3, sl
    6772:	2b20      	cmp	r3, #32
    6774:	d00e      	beq.n	6794 <__aeabi_dadd+0x614>
    6776:	2340      	movs	r3, #64	; 0x40
    6778:	4656      	mov	r6, sl
    677a:	1b9b      	subs	r3, r3, r6
    677c:	409c      	lsls	r4, r3
    677e:	4327      	orrs	r7, r4
    6780:	1e7c      	subs	r4, r7, #1
    6782:	41a7      	sbcs	r7, r4
    6784:	464b      	mov	r3, r9
    6786:	2400      	movs	r4, #0
    6788:	431f      	orrs	r7, r3
    678a:	e75f      	b.n	664c <__aeabi_dadd+0x4cc>
    678c:	2400      	movs	r4, #0
    678e:	e7d2      	b.n	6736 <__aeabi_dadd+0x5b6>
    6790:	0017      	movs	r7, r2
    6792:	e5b2      	b.n	62fa <__aeabi_dadd+0x17a>
    6794:	2400      	movs	r4, #0
    6796:	e7f2      	b.n	677e <__aeabi_dadd+0x5fe>
    6798:	000007ff 	.word	0x000007ff
    679c:	ff7fffff 	.word	0xff7fffff

000067a0 <__aeabi_ddiv>:
    67a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    67a2:	4657      	mov	r7, sl
    67a4:	4645      	mov	r5, r8
    67a6:	46de      	mov	lr, fp
    67a8:	464e      	mov	r6, r9
    67aa:	b5e0      	push	{r5, r6, r7, lr}
    67ac:	004c      	lsls	r4, r1, #1
    67ae:	030e      	lsls	r6, r1, #12
    67b0:	b087      	sub	sp, #28
    67b2:	4683      	mov	fp, r0
    67b4:	4692      	mov	sl, r2
    67b6:	001d      	movs	r5, r3
    67b8:	4680      	mov	r8, r0
    67ba:	0b36      	lsrs	r6, r6, #12
    67bc:	0d64      	lsrs	r4, r4, #21
    67be:	0fcf      	lsrs	r7, r1, #31
    67c0:	2c00      	cmp	r4, #0
    67c2:	d04f      	beq.n	6864 <__aeabi_ddiv+0xc4>
    67c4:	4b6f      	ldr	r3, [pc, #444]	; (6984 <__aeabi_ddiv+0x1e4>)
    67c6:	429c      	cmp	r4, r3
    67c8:	d035      	beq.n	6836 <__aeabi_ddiv+0x96>
    67ca:	2380      	movs	r3, #128	; 0x80
    67cc:	0f42      	lsrs	r2, r0, #29
    67ce:	041b      	lsls	r3, r3, #16
    67d0:	00f6      	lsls	r6, r6, #3
    67d2:	4313      	orrs	r3, r2
    67d4:	4333      	orrs	r3, r6
    67d6:	4699      	mov	r9, r3
    67d8:	00c3      	lsls	r3, r0, #3
    67da:	4698      	mov	r8, r3
    67dc:	4b6a      	ldr	r3, [pc, #424]	; (6988 <__aeabi_ddiv+0x1e8>)
    67de:	2600      	movs	r6, #0
    67e0:	469c      	mov	ip, r3
    67e2:	2300      	movs	r3, #0
    67e4:	4464      	add	r4, ip
    67e6:	9303      	str	r3, [sp, #12]
    67e8:	032b      	lsls	r3, r5, #12
    67ea:	0b1b      	lsrs	r3, r3, #12
    67ec:	469b      	mov	fp, r3
    67ee:	006b      	lsls	r3, r5, #1
    67f0:	0fed      	lsrs	r5, r5, #31
    67f2:	4650      	mov	r0, sl
    67f4:	0d5b      	lsrs	r3, r3, #21
    67f6:	9501      	str	r5, [sp, #4]
    67f8:	d05e      	beq.n	68b8 <__aeabi_ddiv+0x118>
    67fa:	4a62      	ldr	r2, [pc, #392]	; (6984 <__aeabi_ddiv+0x1e4>)
    67fc:	4293      	cmp	r3, r2
    67fe:	d053      	beq.n	68a8 <__aeabi_ddiv+0x108>
    6800:	465a      	mov	r2, fp
    6802:	00d1      	lsls	r1, r2, #3
    6804:	2280      	movs	r2, #128	; 0x80
    6806:	0f40      	lsrs	r0, r0, #29
    6808:	0412      	lsls	r2, r2, #16
    680a:	4302      	orrs	r2, r0
    680c:	430a      	orrs	r2, r1
    680e:	4693      	mov	fp, r2
    6810:	4652      	mov	r2, sl
    6812:	00d1      	lsls	r1, r2, #3
    6814:	4a5c      	ldr	r2, [pc, #368]	; (6988 <__aeabi_ddiv+0x1e8>)
    6816:	4694      	mov	ip, r2
    6818:	2200      	movs	r2, #0
    681a:	4463      	add	r3, ip
    681c:	0038      	movs	r0, r7
    681e:	4068      	eors	r0, r5
    6820:	4684      	mov	ip, r0
    6822:	9002      	str	r0, [sp, #8]
    6824:	1ae4      	subs	r4, r4, r3
    6826:	4316      	orrs	r6, r2
    6828:	2e0f      	cmp	r6, #15
    682a:	d900      	bls.n	682e <__aeabi_ddiv+0x8e>
    682c:	e0b4      	b.n	6998 <__aeabi_ddiv+0x1f8>
    682e:	4b57      	ldr	r3, [pc, #348]	; (698c <__aeabi_ddiv+0x1ec>)
    6830:	00b6      	lsls	r6, r6, #2
    6832:	599b      	ldr	r3, [r3, r6]
    6834:	469f      	mov	pc, r3
    6836:	0003      	movs	r3, r0
    6838:	4333      	orrs	r3, r6
    683a:	4699      	mov	r9, r3
    683c:	d16c      	bne.n	6918 <__aeabi_ddiv+0x178>
    683e:	2300      	movs	r3, #0
    6840:	4698      	mov	r8, r3
    6842:	3302      	adds	r3, #2
    6844:	2608      	movs	r6, #8
    6846:	9303      	str	r3, [sp, #12]
    6848:	e7ce      	b.n	67e8 <__aeabi_ddiv+0x48>
    684a:	46cb      	mov	fp, r9
    684c:	4641      	mov	r1, r8
    684e:	9a03      	ldr	r2, [sp, #12]
    6850:	9701      	str	r7, [sp, #4]
    6852:	2a02      	cmp	r2, #2
    6854:	d165      	bne.n	6922 <__aeabi_ddiv+0x182>
    6856:	9b01      	ldr	r3, [sp, #4]
    6858:	4c4a      	ldr	r4, [pc, #296]	; (6984 <__aeabi_ddiv+0x1e4>)
    685a:	469c      	mov	ip, r3
    685c:	2300      	movs	r3, #0
    685e:	2200      	movs	r2, #0
    6860:	4698      	mov	r8, r3
    6862:	e06b      	b.n	693c <__aeabi_ddiv+0x19c>
    6864:	0003      	movs	r3, r0
    6866:	4333      	orrs	r3, r6
    6868:	4699      	mov	r9, r3
    686a:	d04e      	beq.n	690a <__aeabi_ddiv+0x16a>
    686c:	2e00      	cmp	r6, #0
    686e:	d100      	bne.n	6872 <__aeabi_ddiv+0xd2>
    6870:	e1bc      	b.n	6bec <__aeabi_ddiv+0x44c>
    6872:	0030      	movs	r0, r6
    6874:	f001 f94a 	bl	7b0c <__clzsi2>
    6878:	0003      	movs	r3, r0
    687a:	3b0b      	subs	r3, #11
    687c:	2b1c      	cmp	r3, #28
    687e:	dd00      	ble.n	6882 <__aeabi_ddiv+0xe2>
    6880:	e1ac      	b.n	6bdc <__aeabi_ddiv+0x43c>
    6882:	221d      	movs	r2, #29
    6884:	1ad3      	subs	r3, r2, r3
    6886:	465a      	mov	r2, fp
    6888:	0001      	movs	r1, r0
    688a:	40da      	lsrs	r2, r3
    688c:	3908      	subs	r1, #8
    688e:	408e      	lsls	r6, r1
    6890:	0013      	movs	r3, r2
    6892:	4333      	orrs	r3, r6
    6894:	4699      	mov	r9, r3
    6896:	465b      	mov	r3, fp
    6898:	408b      	lsls	r3, r1
    689a:	4698      	mov	r8, r3
    689c:	2300      	movs	r3, #0
    689e:	4c3c      	ldr	r4, [pc, #240]	; (6990 <__aeabi_ddiv+0x1f0>)
    68a0:	2600      	movs	r6, #0
    68a2:	1a24      	subs	r4, r4, r0
    68a4:	9303      	str	r3, [sp, #12]
    68a6:	e79f      	b.n	67e8 <__aeabi_ddiv+0x48>
    68a8:	4651      	mov	r1, sl
    68aa:	465a      	mov	r2, fp
    68ac:	4311      	orrs	r1, r2
    68ae:	d129      	bne.n	6904 <__aeabi_ddiv+0x164>
    68b0:	2200      	movs	r2, #0
    68b2:	4693      	mov	fp, r2
    68b4:	3202      	adds	r2, #2
    68b6:	e7b1      	b.n	681c <__aeabi_ddiv+0x7c>
    68b8:	4659      	mov	r1, fp
    68ba:	4301      	orrs	r1, r0
    68bc:	d01e      	beq.n	68fc <__aeabi_ddiv+0x15c>
    68be:	465b      	mov	r3, fp
    68c0:	2b00      	cmp	r3, #0
    68c2:	d100      	bne.n	68c6 <__aeabi_ddiv+0x126>
    68c4:	e19e      	b.n	6c04 <__aeabi_ddiv+0x464>
    68c6:	4658      	mov	r0, fp
    68c8:	f001 f920 	bl	7b0c <__clzsi2>
    68cc:	0003      	movs	r3, r0
    68ce:	3b0b      	subs	r3, #11
    68d0:	2b1c      	cmp	r3, #28
    68d2:	dd00      	ble.n	68d6 <__aeabi_ddiv+0x136>
    68d4:	e18f      	b.n	6bf6 <__aeabi_ddiv+0x456>
    68d6:	0002      	movs	r2, r0
    68d8:	4659      	mov	r1, fp
    68da:	3a08      	subs	r2, #8
    68dc:	4091      	lsls	r1, r2
    68de:	468b      	mov	fp, r1
    68e0:	211d      	movs	r1, #29
    68e2:	1acb      	subs	r3, r1, r3
    68e4:	4651      	mov	r1, sl
    68e6:	40d9      	lsrs	r1, r3
    68e8:	000b      	movs	r3, r1
    68ea:	4659      	mov	r1, fp
    68ec:	430b      	orrs	r3, r1
    68ee:	4651      	mov	r1, sl
    68f0:	469b      	mov	fp, r3
    68f2:	4091      	lsls	r1, r2
    68f4:	4b26      	ldr	r3, [pc, #152]	; (6990 <__aeabi_ddiv+0x1f0>)
    68f6:	2200      	movs	r2, #0
    68f8:	1a1b      	subs	r3, r3, r0
    68fa:	e78f      	b.n	681c <__aeabi_ddiv+0x7c>
    68fc:	2300      	movs	r3, #0
    68fe:	2201      	movs	r2, #1
    6900:	469b      	mov	fp, r3
    6902:	e78b      	b.n	681c <__aeabi_ddiv+0x7c>
    6904:	4651      	mov	r1, sl
    6906:	2203      	movs	r2, #3
    6908:	e788      	b.n	681c <__aeabi_ddiv+0x7c>
    690a:	2300      	movs	r3, #0
    690c:	4698      	mov	r8, r3
    690e:	3301      	adds	r3, #1
    6910:	2604      	movs	r6, #4
    6912:	2400      	movs	r4, #0
    6914:	9303      	str	r3, [sp, #12]
    6916:	e767      	b.n	67e8 <__aeabi_ddiv+0x48>
    6918:	2303      	movs	r3, #3
    691a:	46b1      	mov	r9, r6
    691c:	9303      	str	r3, [sp, #12]
    691e:	260c      	movs	r6, #12
    6920:	e762      	b.n	67e8 <__aeabi_ddiv+0x48>
    6922:	2a03      	cmp	r2, #3
    6924:	d100      	bne.n	6928 <__aeabi_ddiv+0x188>
    6926:	e25c      	b.n	6de2 <__aeabi_ddiv+0x642>
    6928:	9b01      	ldr	r3, [sp, #4]
    692a:	2a01      	cmp	r2, #1
    692c:	d000      	beq.n	6930 <__aeabi_ddiv+0x190>
    692e:	e1e4      	b.n	6cfa <__aeabi_ddiv+0x55a>
    6930:	4013      	ands	r3, r2
    6932:	469c      	mov	ip, r3
    6934:	2300      	movs	r3, #0
    6936:	2400      	movs	r4, #0
    6938:	2200      	movs	r2, #0
    693a:	4698      	mov	r8, r3
    693c:	2100      	movs	r1, #0
    693e:	0312      	lsls	r2, r2, #12
    6940:	0b13      	lsrs	r3, r2, #12
    6942:	0d0a      	lsrs	r2, r1, #20
    6944:	0512      	lsls	r2, r2, #20
    6946:	431a      	orrs	r2, r3
    6948:	0523      	lsls	r3, r4, #20
    694a:	4c12      	ldr	r4, [pc, #72]	; (6994 <__aeabi_ddiv+0x1f4>)
    694c:	4640      	mov	r0, r8
    694e:	4022      	ands	r2, r4
    6950:	4313      	orrs	r3, r2
    6952:	4662      	mov	r2, ip
    6954:	005b      	lsls	r3, r3, #1
    6956:	07d2      	lsls	r2, r2, #31
    6958:	085b      	lsrs	r3, r3, #1
    695a:	4313      	orrs	r3, r2
    695c:	0019      	movs	r1, r3
    695e:	b007      	add	sp, #28
    6960:	bc3c      	pop	{r2, r3, r4, r5}
    6962:	4690      	mov	r8, r2
    6964:	4699      	mov	r9, r3
    6966:	46a2      	mov	sl, r4
    6968:	46ab      	mov	fp, r5
    696a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    696c:	2300      	movs	r3, #0
    696e:	2280      	movs	r2, #128	; 0x80
    6970:	469c      	mov	ip, r3
    6972:	0312      	lsls	r2, r2, #12
    6974:	4698      	mov	r8, r3
    6976:	4c03      	ldr	r4, [pc, #12]	; (6984 <__aeabi_ddiv+0x1e4>)
    6978:	e7e0      	b.n	693c <__aeabi_ddiv+0x19c>
    697a:	2300      	movs	r3, #0
    697c:	4c01      	ldr	r4, [pc, #4]	; (6984 <__aeabi_ddiv+0x1e4>)
    697e:	2200      	movs	r2, #0
    6980:	4698      	mov	r8, r3
    6982:	e7db      	b.n	693c <__aeabi_ddiv+0x19c>
    6984:	000007ff 	.word	0x000007ff
    6988:	fffffc01 	.word	0xfffffc01
    698c:	0000903c 	.word	0x0000903c
    6990:	fffffc0d 	.word	0xfffffc0d
    6994:	800fffff 	.word	0x800fffff
    6998:	45d9      	cmp	r9, fp
    699a:	d900      	bls.n	699e <__aeabi_ddiv+0x1fe>
    699c:	e139      	b.n	6c12 <__aeabi_ddiv+0x472>
    699e:	d100      	bne.n	69a2 <__aeabi_ddiv+0x202>
    69a0:	e134      	b.n	6c0c <__aeabi_ddiv+0x46c>
    69a2:	2300      	movs	r3, #0
    69a4:	4646      	mov	r6, r8
    69a6:	464d      	mov	r5, r9
    69a8:	469a      	mov	sl, r3
    69aa:	3c01      	subs	r4, #1
    69ac:	465b      	mov	r3, fp
    69ae:	0e0a      	lsrs	r2, r1, #24
    69b0:	021b      	lsls	r3, r3, #8
    69b2:	431a      	orrs	r2, r3
    69b4:	020b      	lsls	r3, r1, #8
    69b6:	0c17      	lsrs	r7, r2, #16
    69b8:	9303      	str	r3, [sp, #12]
    69ba:	0413      	lsls	r3, r2, #16
    69bc:	0c1b      	lsrs	r3, r3, #16
    69be:	0039      	movs	r1, r7
    69c0:	0028      	movs	r0, r5
    69c2:	4690      	mov	r8, r2
    69c4:	9301      	str	r3, [sp, #4]
    69c6:	f7ff fb07 	bl	5fd8 <__udivsi3>
    69ca:	0002      	movs	r2, r0
    69cc:	9b01      	ldr	r3, [sp, #4]
    69ce:	4683      	mov	fp, r0
    69d0:	435a      	muls	r2, r3
    69d2:	0028      	movs	r0, r5
    69d4:	0039      	movs	r1, r7
    69d6:	4691      	mov	r9, r2
    69d8:	f7ff fb84 	bl	60e4 <__aeabi_uidivmod>
    69dc:	0c35      	lsrs	r5, r6, #16
    69de:	0409      	lsls	r1, r1, #16
    69e0:	430d      	orrs	r5, r1
    69e2:	45a9      	cmp	r9, r5
    69e4:	d90d      	bls.n	6a02 <__aeabi_ddiv+0x262>
    69e6:	465b      	mov	r3, fp
    69e8:	4445      	add	r5, r8
    69ea:	3b01      	subs	r3, #1
    69ec:	45a8      	cmp	r8, r5
    69ee:	d900      	bls.n	69f2 <__aeabi_ddiv+0x252>
    69f0:	e13a      	b.n	6c68 <__aeabi_ddiv+0x4c8>
    69f2:	45a9      	cmp	r9, r5
    69f4:	d800      	bhi.n	69f8 <__aeabi_ddiv+0x258>
    69f6:	e137      	b.n	6c68 <__aeabi_ddiv+0x4c8>
    69f8:	2302      	movs	r3, #2
    69fa:	425b      	negs	r3, r3
    69fc:	469c      	mov	ip, r3
    69fe:	4445      	add	r5, r8
    6a00:	44e3      	add	fp, ip
    6a02:	464b      	mov	r3, r9
    6a04:	1aeb      	subs	r3, r5, r3
    6a06:	0039      	movs	r1, r7
    6a08:	0018      	movs	r0, r3
    6a0a:	9304      	str	r3, [sp, #16]
    6a0c:	f7ff fae4 	bl	5fd8 <__udivsi3>
    6a10:	9b01      	ldr	r3, [sp, #4]
    6a12:	0005      	movs	r5, r0
    6a14:	4343      	muls	r3, r0
    6a16:	0039      	movs	r1, r7
    6a18:	9804      	ldr	r0, [sp, #16]
    6a1a:	4699      	mov	r9, r3
    6a1c:	f7ff fb62 	bl	60e4 <__aeabi_uidivmod>
    6a20:	0433      	lsls	r3, r6, #16
    6a22:	0409      	lsls	r1, r1, #16
    6a24:	0c1b      	lsrs	r3, r3, #16
    6a26:	430b      	orrs	r3, r1
    6a28:	4599      	cmp	r9, r3
    6a2a:	d909      	bls.n	6a40 <__aeabi_ddiv+0x2a0>
    6a2c:	4443      	add	r3, r8
    6a2e:	1e6a      	subs	r2, r5, #1
    6a30:	4598      	cmp	r8, r3
    6a32:	d900      	bls.n	6a36 <__aeabi_ddiv+0x296>
    6a34:	e11a      	b.n	6c6c <__aeabi_ddiv+0x4cc>
    6a36:	4599      	cmp	r9, r3
    6a38:	d800      	bhi.n	6a3c <__aeabi_ddiv+0x29c>
    6a3a:	e117      	b.n	6c6c <__aeabi_ddiv+0x4cc>
    6a3c:	3d02      	subs	r5, #2
    6a3e:	4443      	add	r3, r8
    6a40:	464a      	mov	r2, r9
    6a42:	1a9b      	subs	r3, r3, r2
    6a44:	465a      	mov	r2, fp
    6a46:	0412      	lsls	r2, r2, #16
    6a48:	432a      	orrs	r2, r5
    6a4a:	9903      	ldr	r1, [sp, #12]
    6a4c:	4693      	mov	fp, r2
    6a4e:	0c10      	lsrs	r0, r2, #16
    6a50:	0c0a      	lsrs	r2, r1, #16
    6a52:	4691      	mov	r9, r2
    6a54:	0409      	lsls	r1, r1, #16
    6a56:	465a      	mov	r2, fp
    6a58:	0c09      	lsrs	r1, r1, #16
    6a5a:	464e      	mov	r6, r9
    6a5c:	000d      	movs	r5, r1
    6a5e:	0412      	lsls	r2, r2, #16
    6a60:	0c12      	lsrs	r2, r2, #16
    6a62:	4345      	muls	r5, r0
    6a64:	9105      	str	r1, [sp, #20]
    6a66:	4351      	muls	r1, r2
    6a68:	4372      	muls	r2, r6
    6a6a:	4370      	muls	r0, r6
    6a6c:	1952      	adds	r2, r2, r5
    6a6e:	0c0e      	lsrs	r6, r1, #16
    6a70:	18b2      	adds	r2, r6, r2
    6a72:	4295      	cmp	r5, r2
    6a74:	d903      	bls.n	6a7e <__aeabi_ddiv+0x2de>
    6a76:	2580      	movs	r5, #128	; 0x80
    6a78:	026d      	lsls	r5, r5, #9
    6a7a:	46ac      	mov	ip, r5
    6a7c:	4460      	add	r0, ip
    6a7e:	0c15      	lsrs	r5, r2, #16
    6a80:	0409      	lsls	r1, r1, #16
    6a82:	0412      	lsls	r2, r2, #16
    6a84:	0c09      	lsrs	r1, r1, #16
    6a86:	1828      	adds	r0, r5, r0
    6a88:	1852      	adds	r2, r2, r1
    6a8a:	4283      	cmp	r3, r0
    6a8c:	d200      	bcs.n	6a90 <__aeabi_ddiv+0x2f0>
    6a8e:	e0ce      	b.n	6c2e <__aeabi_ddiv+0x48e>
    6a90:	d100      	bne.n	6a94 <__aeabi_ddiv+0x2f4>
    6a92:	e0c8      	b.n	6c26 <__aeabi_ddiv+0x486>
    6a94:	1a1d      	subs	r5, r3, r0
    6a96:	4653      	mov	r3, sl
    6a98:	1a9e      	subs	r6, r3, r2
    6a9a:	45b2      	cmp	sl, r6
    6a9c:	4192      	sbcs	r2, r2
    6a9e:	4252      	negs	r2, r2
    6aa0:	1aab      	subs	r3, r5, r2
    6aa2:	469a      	mov	sl, r3
    6aa4:	4598      	cmp	r8, r3
    6aa6:	d100      	bne.n	6aaa <__aeabi_ddiv+0x30a>
    6aa8:	e117      	b.n	6cda <__aeabi_ddiv+0x53a>
    6aaa:	0039      	movs	r1, r7
    6aac:	0018      	movs	r0, r3
    6aae:	f7ff fa93 	bl	5fd8 <__udivsi3>
    6ab2:	9b01      	ldr	r3, [sp, #4]
    6ab4:	0005      	movs	r5, r0
    6ab6:	4343      	muls	r3, r0
    6ab8:	0039      	movs	r1, r7
    6aba:	4650      	mov	r0, sl
    6abc:	9304      	str	r3, [sp, #16]
    6abe:	f7ff fb11 	bl	60e4 <__aeabi_uidivmod>
    6ac2:	9804      	ldr	r0, [sp, #16]
    6ac4:	040b      	lsls	r3, r1, #16
    6ac6:	0c31      	lsrs	r1, r6, #16
    6ac8:	4319      	orrs	r1, r3
    6aca:	4288      	cmp	r0, r1
    6acc:	d909      	bls.n	6ae2 <__aeabi_ddiv+0x342>
    6ace:	4441      	add	r1, r8
    6ad0:	1e6b      	subs	r3, r5, #1
    6ad2:	4588      	cmp	r8, r1
    6ad4:	d900      	bls.n	6ad8 <__aeabi_ddiv+0x338>
    6ad6:	e107      	b.n	6ce8 <__aeabi_ddiv+0x548>
    6ad8:	4288      	cmp	r0, r1
    6ada:	d800      	bhi.n	6ade <__aeabi_ddiv+0x33e>
    6adc:	e104      	b.n	6ce8 <__aeabi_ddiv+0x548>
    6ade:	3d02      	subs	r5, #2
    6ae0:	4441      	add	r1, r8
    6ae2:	9b04      	ldr	r3, [sp, #16]
    6ae4:	1acb      	subs	r3, r1, r3
    6ae6:	0018      	movs	r0, r3
    6ae8:	0039      	movs	r1, r7
    6aea:	9304      	str	r3, [sp, #16]
    6aec:	f7ff fa74 	bl	5fd8 <__udivsi3>
    6af0:	9b01      	ldr	r3, [sp, #4]
    6af2:	4682      	mov	sl, r0
    6af4:	4343      	muls	r3, r0
    6af6:	0039      	movs	r1, r7
    6af8:	9804      	ldr	r0, [sp, #16]
    6afa:	9301      	str	r3, [sp, #4]
    6afc:	f7ff faf2 	bl	60e4 <__aeabi_uidivmod>
    6b00:	9801      	ldr	r0, [sp, #4]
    6b02:	040b      	lsls	r3, r1, #16
    6b04:	0431      	lsls	r1, r6, #16
    6b06:	0c09      	lsrs	r1, r1, #16
    6b08:	4319      	orrs	r1, r3
    6b0a:	4288      	cmp	r0, r1
    6b0c:	d90d      	bls.n	6b2a <__aeabi_ddiv+0x38a>
    6b0e:	4653      	mov	r3, sl
    6b10:	4441      	add	r1, r8
    6b12:	3b01      	subs	r3, #1
    6b14:	4588      	cmp	r8, r1
    6b16:	d900      	bls.n	6b1a <__aeabi_ddiv+0x37a>
    6b18:	e0e8      	b.n	6cec <__aeabi_ddiv+0x54c>
    6b1a:	4288      	cmp	r0, r1
    6b1c:	d800      	bhi.n	6b20 <__aeabi_ddiv+0x380>
    6b1e:	e0e5      	b.n	6cec <__aeabi_ddiv+0x54c>
    6b20:	2302      	movs	r3, #2
    6b22:	425b      	negs	r3, r3
    6b24:	469c      	mov	ip, r3
    6b26:	4441      	add	r1, r8
    6b28:	44e2      	add	sl, ip
    6b2a:	9b01      	ldr	r3, [sp, #4]
    6b2c:	042d      	lsls	r5, r5, #16
    6b2e:	1ace      	subs	r6, r1, r3
    6b30:	4651      	mov	r1, sl
    6b32:	4329      	orrs	r1, r5
    6b34:	9d05      	ldr	r5, [sp, #20]
    6b36:	464f      	mov	r7, r9
    6b38:	002a      	movs	r2, r5
    6b3a:	040b      	lsls	r3, r1, #16
    6b3c:	0c08      	lsrs	r0, r1, #16
    6b3e:	0c1b      	lsrs	r3, r3, #16
    6b40:	435a      	muls	r2, r3
    6b42:	4345      	muls	r5, r0
    6b44:	437b      	muls	r3, r7
    6b46:	4378      	muls	r0, r7
    6b48:	195b      	adds	r3, r3, r5
    6b4a:	0c17      	lsrs	r7, r2, #16
    6b4c:	18fb      	adds	r3, r7, r3
    6b4e:	429d      	cmp	r5, r3
    6b50:	d903      	bls.n	6b5a <__aeabi_ddiv+0x3ba>
    6b52:	2580      	movs	r5, #128	; 0x80
    6b54:	026d      	lsls	r5, r5, #9
    6b56:	46ac      	mov	ip, r5
    6b58:	4460      	add	r0, ip
    6b5a:	0c1d      	lsrs	r5, r3, #16
    6b5c:	0412      	lsls	r2, r2, #16
    6b5e:	041b      	lsls	r3, r3, #16
    6b60:	0c12      	lsrs	r2, r2, #16
    6b62:	1828      	adds	r0, r5, r0
    6b64:	189b      	adds	r3, r3, r2
    6b66:	4286      	cmp	r6, r0
    6b68:	d200      	bcs.n	6b6c <__aeabi_ddiv+0x3cc>
    6b6a:	e093      	b.n	6c94 <__aeabi_ddiv+0x4f4>
    6b6c:	d100      	bne.n	6b70 <__aeabi_ddiv+0x3d0>
    6b6e:	e08e      	b.n	6c8e <__aeabi_ddiv+0x4ee>
    6b70:	2301      	movs	r3, #1
    6b72:	4319      	orrs	r1, r3
    6b74:	4ba0      	ldr	r3, [pc, #640]	; (6df8 <__aeabi_ddiv+0x658>)
    6b76:	18e3      	adds	r3, r4, r3
    6b78:	2b00      	cmp	r3, #0
    6b7a:	dc00      	bgt.n	6b7e <__aeabi_ddiv+0x3de>
    6b7c:	e099      	b.n	6cb2 <__aeabi_ddiv+0x512>
    6b7e:	074a      	lsls	r2, r1, #29
    6b80:	d000      	beq.n	6b84 <__aeabi_ddiv+0x3e4>
    6b82:	e09e      	b.n	6cc2 <__aeabi_ddiv+0x522>
    6b84:	465a      	mov	r2, fp
    6b86:	01d2      	lsls	r2, r2, #7
    6b88:	d506      	bpl.n	6b98 <__aeabi_ddiv+0x3f8>
    6b8a:	465a      	mov	r2, fp
    6b8c:	4b9b      	ldr	r3, [pc, #620]	; (6dfc <__aeabi_ddiv+0x65c>)
    6b8e:	401a      	ands	r2, r3
    6b90:	2380      	movs	r3, #128	; 0x80
    6b92:	4693      	mov	fp, r2
    6b94:	00db      	lsls	r3, r3, #3
    6b96:	18e3      	adds	r3, r4, r3
    6b98:	4a99      	ldr	r2, [pc, #612]	; (6e00 <__aeabi_ddiv+0x660>)
    6b9a:	4293      	cmp	r3, r2
    6b9c:	dd68      	ble.n	6c70 <__aeabi_ddiv+0x4d0>
    6b9e:	2301      	movs	r3, #1
    6ba0:	9a02      	ldr	r2, [sp, #8]
    6ba2:	4c98      	ldr	r4, [pc, #608]	; (6e04 <__aeabi_ddiv+0x664>)
    6ba4:	401a      	ands	r2, r3
    6ba6:	2300      	movs	r3, #0
    6ba8:	4694      	mov	ip, r2
    6baa:	4698      	mov	r8, r3
    6bac:	2200      	movs	r2, #0
    6bae:	e6c5      	b.n	693c <__aeabi_ddiv+0x19c>
    6bb0:	2280      	movs	r2, #128	; 0x80
    6bb2:	464b      	mov	r3, r9
    6bb4:	0312      	lsls	r2, r2, #12
    6bb6:	4213      	tst	r3, r2
    6bb8:	d00a      	beq.n	6bd0 <__aeabi_ddiv+0x430>
    6bba:	465b      	mov	r3, fp
    6bbc:	4213      	tst	r3, r2
    6bbe:	d106      	bne.n	6bce <__aeabi_ddiv+0x42e>
    6bc0:	431a      	orrs	r2, r3
    6bc2:	0312      	lsls	r2, r2, #12
    6bc4:	0b12      	lsrs	r2, r2, #12
    6bc6:	46ac      	mov	ip, r5
    6bc8:	4688      	mov	r8, r1
    6bca:	4c8e      	ldr	r4, [pc, #568]	; (6e04 <__aeabi_ddiv+0x664>)
    6bcc:	e6b6      	b.n	693c <__aeabi_ddiv+0x19c>
    6bce:	464b      	mov	r3, r9
    6bd0:	431a      	orrs	r2, r3
    6bd2:	0312      	lsls	r2, r2, #12
    6bd4:	0b12      	lsrs	r2, r2, #12
    6bd6:	46bc      	mov	ip, r7
    6bd8:	4c8a      	ldr	r4, [pc, #552]	; (6e04 <__aeabi_ddiv+0x664>)
    6bda:	e6af      	b.n	693c <__aeabi_ddiv+0x19c>
    6bdc:	0003      	movs	r3, r0
    6bde:	465a      	mov	r2, fp
    6be0:	3b28      	subs	r3, #40	; 0x28
    6be2:	409a      	lsls	r2, r3
    6be4:	2300      	movs	r3, #0
    6be6:	4691      	mov	r9, r2
    6be8:	4698      	mov	r8, r3
    6bea:	e657      	b.n	689c <__aeabi_ddiv+0xfc>
    6bec:	4658      	mov	r0, fp
    6bee:	f000 ff8d 	bl	7b0c <__clzsi2>
    6bf2:	3020      	adds	r0, #32
    6bf4:	e640      	b.n	6878 <__aeabi_ddiv+0xd8>
    6bf6:	0003      	movs	r3, r0
    6bf8:	4652      	mov	r2, sl
    6bfa:	3b28      	subs	r3, #40	; 0x28
    6bfc:	409a      	lsls	r2, r3
    6bfe:	2100      	movs	r1, #0
    6c00:	4693      	mov	fp, r2
    6c02:	e677      	b.n	68f4 <__aeabi_ddiv+0x154>
    6c04:	f000 ff82 	bl	7b0c <__clzsi2>
    6c08:	3020      	adds	r0, #32
    6c0a:	e65f      	b.n	68cc <__aeabi_ddiv+0x12c>
    6c0c:	4588      	cmp	r8, r1
    6c0e:	d200      	bcs.n	6c12 <__aeabi_ddiv+0x472>
    6c10:	e6c7      	b.n	69a2 <__aeabi_ddiv+0x202>
    6c12:	464b      	mov	r3, r9
    6c14:	07de      	lsls	r6, r3, #31
    6c16:	085d      	lsrs	r5, r3, #1
    6c18:	4643      	mov	r3, r8
    6c1a:	085b      	lsrs	r3, r3, #1
    6c1c:	431e      	orrs	r6, r3
    6c1e:	4643      	mov	r3, r8
    6c20:	07db      	lsls	r3, r3, #31
    6c22:	469a      	mov	sl, r3
    6c24:	e6c2      	b.n	69ac <__aeabi_ddiv+0x20c>
    6c26:	2500      	movs	r5, #0
    6c28:	4592      	cmp	sl, r2
    6c2a:	d300      	bcc.n	6c2e <__aeabi_ddiv+0x48e>
    6c2c:	e733      	b.n	6a96 <__aeabi_ddiv+0x2f6>
    6c2e:	9e03      	ldr	r6, [sp, #12]
    6c30:	4659      	mov	r1, fp
    6c32:	46b4      	mov	ip, r6
    6c34:	44e2      	add	sl, ip
    6c36:	45b2      	cmp	sl, r6
    6c38:	41ad      	sbcs	r5, r5
    6c3a:	426d      	negs	r5, r5
    6c3c:	4445      	add	r5, r8
    6c3e:	18eb      	adds	r3, r5, r3
    6c40:	3901      	subs	r1, #1
    6c42:	4598      	cmp	r8, r3
    6c44:	d207      	bcs.n	6c56 <__aeabi_ddiv+0x4b6>
    6c46:	4298      	cmp	r0, r3
    6c48:	d900      	bls.n	6c4c <__aeabi_ddiv+0x4ac>
    6c4a:	e07f      	b.n	6d4c <__aeabi_ddiv+0x5ac>
    6c4c:	d100      	bne.n	6c50 <__aeabi_ddiv+0x4b0>
    6c4e:	e0bc      	b.n	6dca <__aeabi_ddiv+0x62a>
    6c50:	1a1d      	subs	r5, r3, r0
    6c52:	468b      	mov	fp, r1
    6c54:	e71f      	b.n	6a96 <__aeabi_ddiv+0x2f6>
    6c56:	4598      	cmp	r8, r3
    6c58:	d1fa      	bne.n	6c50 <__aeabi_ddiv+0x4b0>
    6c5a:	9d03      	ldr	r5, [sp, #12]
    6c5c:	4555      	cmp	r5, sl
    6c5e:	d9f2      	bls.n	6c46 <__aeabi_ddiv+0x4a6>
    6c60:	4643      	mov	r3, r8
    6c62:	468b      	mov	fp, r1
    6c64:	1a1d      	subs	r5, r3, r0
    6c66:	e716      	b.n	6a96 <__aeabi_ddiv+0x2f6>
    6c68:	469b      	mov	fp, r3
    6c6a:	e6ca      	b.n	6a02 <__aeabi_ddiv+0x262>
    6c6c:	0015      	movs	r5, r2
    6c6e:	e6e7      	b.n	6a40 <__aeabi_ddiv+0x2a0>
    6c70:	465a      	mov	r2, fp
    6c72:	08c9      	lsrs	r1, r1, #3
    6c74:	0752      	lsls	r2, r2, #29
    6c76:	430a      	orrs	r2, r1
    6c78:	055b      	lsls	r3, r3, #21
    6c7a:	4690      	mov	r8, r2
    6c7c:	0d5c      	lsrs	r4, r3, #21
    6c7e:	465a      	mov	r2, fp
    6c80:	2301      	movs	r3, #1
    6c82:	9902      	ldr	r1, [sp, #8]
    6c84:	0252      	lsls	r2, r2, #9
    6c86:	4019      	ands	r1, r3
    6c88:	0b12      	lsrs	r2, r2, #12
    6c8a:	468c      	mov	ip, r1
    6c8c:	e656      	b.n	693c <__aeabi_ddiv+0x19c>
    6c8e:	2b00      	cmp	r3, #0
    6c90:	d100      	bne.n	6c94 <__aeabi_ddiv+0x4f4>
    6c92:	e76f      	b.n	6b74 <__aeabi_ddiv+0x3d4>
    6c94:	4446      	add	r6, r8
    6c96:	1e4a      	subs	r2, r1, #1
    6c98:	45b0      	cmp	r8, r6
    6c9a:	d929      	bls.n	6cf0 <__aeabi_ddiv+0x550>
    6c9c:	0011      	movs	r1, r2
    6c9e:	4286      	cmp	r6, r0
    6ca0:	d000      	beq.n	6ca4 <__aeabi_ddiv+0x504>
    6ca2:	e765      	b.n	6b70 <__aeabi_ddiv+0x3d0>
    6ca4:	9a03      	ldr	r2, [sp, #12]
    6ca6:	4293      	cmp	r3, r2
    6ca8:	d000      	beq.n	6cac <__aeabi_ddiv+0x50c>
    6caa:	e761      	b.n	6b70 <__aeabi_ddiv+0x3d0>
    6cac:	e762      	b.n	6b74 <__aeabi_ddiv+0x3d4>
    6cae:	2101      	movs	r1, #1
    6cb0:	4249      	negs	r1, r1
    6cb2:	2001      	movs	r0, #1
    6cb4:	1ac2      	subs	r2, r0, r3
    6cb6:	2a38      	cmp	r2, #56	; 0x38
    6cb8:	dd21      	ble.n	6cfe <__aeabi_ddiv+0x55e>
    6cba:	9b02      	ldr	r3, [sp, #8]
    6cbc:	4003      	ands	r3, r0
    6cbe:	469c      	mov	ip, r3
    6cc0:	e638      	b.n	6934 <__aeabi_ddiv+0x194>
    6cc2:	220f      	movs	r2, #15
    6cc4:	400a      	ands	r2, r1
    6cc6:	2a04      	cmp	r2, #4
    6cc8:	d100      	bne.n	6ccc <__aeabi_ddiv+0x52c>
    6cca:	e75b      	b.n	6b84 <__aeabi_ddiv+0x3e4>
    6ccc:	000a      	movs	r2, r1
    6cce:	1d11      	adds	r1, r2, #4
    6cd0:	4291      	cmp	r1, r2
    6cd2:	4192      	sbcs	r2, r2
    6cd4:	4252      	negs	r2, r2
    6cd6:	4493      	add	fp, r2
    6cd8:	e754      	b.n	6b84 <__aeabi_ddiv+0x3e4>
    6cda:	4b47      	ldr	r3, [pc, #284]	; (6df8 <__aeabi_ddiv+0x658>)
    6cdc:	18e3      	adds	r3, r4, r3
    6cde:	2b00      	cmp	r3, #0
    6ce0:	dde5      	ble.n	6cae <__aeabi_ddiv+0x50e>
    6ce2:	2201      	movs	r2, #1
    6ce4:	4252      	negs	r2, r2
    6ce6:	e7f2      	b.n	6cce <__aeabi_ddiv+0x52e>
    6ce8:	001d      	movs	r5, r3
    6cea:	e6fa      	b.n	6ae2 <__aeabi_ddiv+0x342>
    6cec:	469a      	mov	sl, r3
    6cee:	e71c      	b.n	6b2a <__aeabi_ddiv+0x38a>
    6cf0:	42b0      	cmp	r0, r6
    6cf2:	d839      	bhi.n	6d68 <__aeabi_ddiv+0x5c8>
    6cf4:	d06e      	beq.n	6dd4 <__aeabi_ddiv+0x634>
    6cf6:	0011      	movs	r1, r2
    6cf8:	e73a      	b.n	6b70 <__aeabi_ddiv+0x3d0>
    6cfa:	9302      	str	r3, [sp, #8]
    6cfc:	e73a      	b.n	6b74 <__aeabi_ddiv+0x3d4>
    6cfe:	2a1f      	cmp	r2, #31
    6d00:	dc3c      	bgt.n	6d7c <__aeabi_ddiv+0x5dc>
    6d02:	2320      	movs	r3, #32
    6d04:	1a9b      	subs	r3, r3, r2
    6d06:	000c      	movs	r4, r1
    6d08:	4658      	mov	r0, fp
    6d0a:	4099      	lsls	r1, r3
    6d0c:	4098      	lsls	r0, r3
    6d0e:	1e4b      	subs	r3, r1, #1
    6d10:	4199      	sbcs	r1, r3
    6d12:	465b      	mov	r3, fp
    6d14:	40d4      	lsrs	r4, r2
    6d16:	40d3      	lsrs	r3, r2
    6d18:	4320      	orrs	r0, r4
    6d1a:	4308      	orrs	r0, r1
    6d1c:	001a      	movs	r2, r3
    6d1e:	0743      	lsls	r3, r0, #29
    6d20:	d009      	beq.n	6d36 <__aeabi_ddiv+0x596>
    6d22:	230f      	movs	r3, #15
    6d24:	4003      	ands	r3, r0
    6d26:	2b04      	cmp	r3, #4
    6d28:	d005      	beq.n	6d36 <__aeabi_ddiv+0x596>
    6d2a:	0001      	movs	r1, r0
    6d2c:	1d08      	adds	r0, r1, #4
    6d2e:	4288      	cmp	r0, r1
    6d30:	419b      	sbcs	r3, r3
    6d32:	425b      	negs	r3, r3
    6d34:	18d2      	adds	r2, r2, r3
    6d36:	0213      	lsls	r3, r2, #8
    6d38:	d53a      	bpl.n	6db0 <__aeabi_ddiv+0x610>
    6d3a:	2301      	movs	r3, #1
    6d3c:	9a02      	ldr	r2, [sp, #8]
    6d3e:	2401      	movs	r4, #1
    6d40:	401a      	ands	r2, r3
    6d42:	2300      	movs	r3, #0
    6d44:	4694      	mov	ip, r2
    6d46:	4698      	mov	r8, r3
    6d48:	2200      	movs	r2, #0
    6d4a:	e5f7      	b.n	693c <__aeabi_ddiv+0x19c>
    6d4c:	2102      	movs	r1, #2
    6d4e:	4249      	negs	r1, r1
    6d50:	468c      	mov	ip, r1
    6d52:	9d03      	ldr	r5, [sp, #12]
    6d54:	44e3      	add	fp, ip
    6d56:	46ac      	mov	ip, r5
    6d58:	44e2      	add	sl, ip
    6d5a:	45aa      	cmp	sl, r5
    6d5c:	41ad      	sbcs	r5, r5
    6d5e:	426d      	negs	r5, r5
    6d60:	4445      	add	r5, r8
    6d62:	18ed      	adds	r5, r5, r3
    6d64:	1a2d      	subs	r5, r5, r0
    6d66:	e696      	b.n	6a96 <__aeabi_ddiv+0x2f6>
    6d68:	1e8a      	subs	r2, r1, #2
    6d6a:	9903      	ldr	r1, [sp, #12]
    6d6c:	004d      	lsls	r5, r1, #1
    6d6e:	428d      	cmp	r5, r1
    6d70:	4189      	sbcs	r1, r1
    6d72:	4249      	negs	r1, r1
    6d74:	4441      	add	r1, r8
    6d76:	1876      	adds	r6, r6, r1
    6d78:	9503      	str	r5, [sp, #12]
    6d7a:	e78f      	b.n	6c9c <__aeabi_ddiv+0x4fc>
    6d7c:	201f      	movs	r0, #31
    6d7e:	4240      	negs	r0, r0
    6d80:	1ac3      	subs	r3, r0, r3
    6d82:	4658      	mov	r0, fp
    6d84:	40d8      	lsrs	r0, r3
    6d86:	0003      	movs	r3, r0
    6d88:	2a20      	cmp	r2, #32
    6d8a:	d028      	beq.n	6dde <__aeabi_ddiv+0x63e>
    6d8c:	2040      	movs	r0, #64	; 0x40
    6d8e:	465d      	mov	r5, fp
    6d90:	1a82      	subs	r2, r0, r2
    6d92:	4095      	lsls	r5, r2
    6d94:	4329      	orrs	r1, r5
    6d96:	1e4a      	subs	r2, r1, #1
    6d98:	4191      	sbcs	r1, r2
    6d9a:	4319      	orrs	r1, r3
    6d9c:	2307      	movs	r3, #7
    6d9e:	2200      	movs	r2, #0
    6da0:	400b      	ands	r3, r1
    6da2:	d009      	beq.n	6db8 <__aeabi_ddiv+0x618>
    6da4:	230f      	movs	r3, #15
    6da6:	2200      	movs	r2, #0
    6da8:	400b      	ands	r3, r1
    6daa:	0008      	movs	r0, r1
    6dac:	2b04      	cmp	r3, #4
    6dae:	d1bd      	bne.n	6d2c <__aeabi_ddiv+0x58c>
    6db0:	0001      	movs	r1, r0
    6db2:	0753      	lsls	r3, r2, #29
    6db4:	0252      	lsls	r2, r2, #9
    6db6:	0b12      	lsrs	r2, r2, #12
    6db8:	08c9      	lsrs	r1, r1, #3
    6dba:	4319      	orrs	r1, r3
    6dbc:	2301      	movs	r3, #1
    6dbe:	4688      	mov	r8, r1
    6dc0:	9902      	ldr	r1, [sp, #8]
    6dc2:	2400      	movs	r4, #0
    6dc4:	4019      	ands	r1, r3
    6dc6:	468c      	mov	ip, r1
    6dc8:	e5b8      	b.n	693c <__aeabi_ddiv+0x19c>
    6dca:	4552      	cmp	r2, sl
    6dcc:	d8be      	bhi.n	6d4c <__aeabi_ddiv+0x5ac>
    6dce:	468b      	mov	fp, r1
    6dd0:	2500      	movs	r5, #0
    6dd2:	e660      	b.n	6a96 <__aeabi_ddiv+0x2f6>
    6dd4:	9d03      	ldr	r5, [sp, #12]
    6dd6:	429d      	cmp	r5, r3
    6dd8:	d3c6      	bcc.n	6d68 <__aeabi_ddiv+0x5c8>
    6dda:	0011      	movs	r1, r2
    6ddc:	e762      	b.n	6ca4 <__aeabi_ddiv+0x504>
    6dde:	2500      	movs	r5, #0
    6de0:	e7d8      	b.n	6d94 <__aeabi_ddiv+0x5f4>
    6de2:	2280      	movs	r2, #128	; 0x80
    6de4:	465b      	mov	r3, fp
    6de6:	0312      	lsls	r2, r2, #12
    6de8:	431a      	orrs	r2, r3
    6dea:	9b01      	ldr	r3, [sp, #4]
    6dec:	0312      	lsls	r2, r2, #12
    6dee:	0b12      	lsrs	r2, r2, #12
    6df0:	469c      	mov	ip, r3
    6df2:	4688      	mov	r8, r1
    6df4:	4c03      	ldr	r4, [pc, #12]	; (6e04 <__aeabi_ddiv+0x664>)
    6df6:	e5a1      	b.n	693c <__aeabi_ddiv+0x19c>
    6df8:	000003ff 	.word	0x000003ff
    6dfc:	feffffff 	.word	0xfeffffff
    6e00:	000007fe 	.word	0x000007fe
    6e04:	000007ff 	.word	0x000007ff

00006e08 <__aeabi_dmul>:
    6e08:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e0a:	4657      	mov	r7, sl
    6e0c:	4645      	mov	r5, r8
    6e0e:	46de      	mov	lr, fp
    6e10:	464e      	mov	r6, r9
    6e12:	b5e0      	push	{r5, r6, r7, lr}
    6e14:	030c      	lsls	r4, r1, #12
    6e16:	4698      	mov	r8, r3
    6e18:	004e      	lsls	r6, r1, #1
    6e1a:	0b23      	lsrs	r3, r4, #12
    6e1c:	b087      	sub	sp, #28
    6e1e:	0007      	movs	r7, r0
    6e20:	4692      	mov	sl, r2
    6e22:	469b      	mov	fp, r3
    6e24:	0d76      	lsrs	r6, r6, #21
    6e26:	0fcd      	lsrs	r5, r1, #31
    6e28:	2e00      	cmp	r6, #0
    6e2a:	d06b      	beq.n	6f04 <__aeabi_dmul+0xfc>
    6e2c:	4b6d      	ldr	r3, [pc, #436]	; (6fe4 <__aeabi_dmul+0x1dc>)
    6e2e:	429e      	cmp	r6, r3
    6e30:	d035      	beq.n	6e9e <__aeabi_dmul+0x96>
    6e32:	2480      	movs	r4, #128	; 0x80
    6e34:	465b      	mov	r3, fp
    6e36:	0f42      	lsrs	r2, r0, #29
    6e38:	0424      	lsls	r4, r4, #16
    6e3a:	00db      	lsls	r3, r3, #3
    6e3c:	4314      	orrs	r4, r2
    6e3e:	431c      	orrs	r4, r3
    6e40:	00c3      	lsls	r3, r0, #3
    6e42:	4699      	mov	r9, r3
    6e44:	4b68      	ldr	r3, [pc, #416]	; (6fe8 <__aeabi_dmul+0x1e0>)
    6e46:	46a3      	mov	fp, r4
    6e48:	469c      	mov	ip, r3
    6e4a:	2300      	movs	r3, #0
    6e4c:	2700      	movs	r7, #0
    6e4e:	4466      	add	r6, ip
    6e50:	9302      	str	r3, [sp, #8]
    6e52:	4643      	mov	r3, r8
    6e54:	031c      	lsls	r4, r3, #12
    6e56:	005a      	lsls	r2, r3, #1
    6e58:	0fdb      	lsrs	r3, r3, #31
    6e5a:	4650      	mov	r0, sl
    6e5c:	0b24      	lsrs	r4, r4, #12
    6e5e:	0d52      	lsrs	r2, r2, #21
    6e60:	4698      	mov	r8, r3
    6e62:	d100      	bne.n	6e66 <__aeabi_dmul+0x5e>
    6e64:	e076      	b.n	6f54 <__aeabi_dmul+0x14c>
    6e66:	4b5f      	ldr	r3, [pc, #380]	; (6fe4 <__aeabi_dmul+0x1dc>)
    6e68:	429a      	cmp	r2, r3
    6e6a:	d06d      	beq.n	6f48 <__aeabi_dmul+0x140>
    6e6c:	2380      	movs	r3, #128	; 0x80
    6e6e:	0f41      	lsrs	r1, r0, #29
    6e70:	041b      	lsls	r3, r3, #16
    6e72:	430b      	orrs	r3, r1
    6e74:	495c      	ldr	r1, [pc, #368]	; (6fe8 <__aeabi_dmul+0x1e0>)
    6e76:	00e4      	lsls	r4, r4, #3
    6e78:	468c      	mov	ip, r1
    6e7a:	431c      	orrs	r4, r3
    6e7c:	00c3      	lsls	r3, r0, #3
    6e7e:	2000      	movs	r0, #0
    6e80:	4462      	add	r2, ip
    6e82:	4641      	mov	r1, r8
    6e84:	18b6      	adds	r6, r6, r2
    6e86:	4069      	eors	r1, r5
    6e88:	1c72      	adds	r2, r6, #1
    6e8a:	9101      	str	r1, [sp, #4]
    6e8c:	4694      	mov	ip, r2
    6e8e:	4307      	orrs	r7, r0
    6e90:	2f0f      	cmp	r7, #15
    6e92:	d900      	bls.n	6e96 <__aeabi_dmul+0x8e>
    6e94:	e0b0      	b.n	6ff8 <__aeabi_dmul+0x1f0>
    6e96:	4a55      	ldr	r2, [pc, #340]	; (6fec <__aeabi_dmul+0x1e4>)
    6e98:	00bf      	lsls	r7, r7, #2
    6e9a:	59d2      	ldr	r2, [r2, r7]
    6e9c:	4697      	mov	pc, r2
    6e9e:	465b      	mov	r3, fp
    6ea0:	4303      	orrs	r3, r0
    6ea2:	4699      	mov	r9, r3
    6ea4:	d000      	beq.n	6ea8 <__aeabi_dmul+0xa0>
    6ea6:	e087      	b.n	6fb8 <__aeabi_dmul+0x1b0>
    6ea8:	2300      	movs	r3, #0
    6eaa:	469b      	mov	fp, r3
    6eac:	3302      	adds	r3, #2
    6eae:	2708      	movs	r7, #8
    6eb0:	9302      	str	r3, [sp, #8]
    6eb2:	e7ce      	b.n	6e52 <__aeabi_dmul+0x4a>
    6eb4:	4642      	mov	r2, r8
    6eb6:	9201      	str	r2, [sp, #4]
    6eb8:	2802      	cmp	r0, #2
    6eba:	d067      	beq.n	6f8c <__aeabi_dmul+0x184>
    6ebc:	2803      	cmp	r0, #3
    6ebe:	d100      	bne.n	6ec2 <__aeabi_dmul+0xba>
    6ec0:	e20e      	b.n	72e0 <__aeabi_dmul+0x4d8>
    6ec2:	2801      	cmp	r0, #1
    6ec4:	d000      	beq.n	6ec8 <__aeabi_dmul+0xc0>
    6ec6:	e162      	b.n	718e <__aeabi_dmul+0x386>
    6ec8:	2300      	movs	r3, #0
    6eca:	2400      	movs	r4, #0
    6ecc:	2200      	movs	r2, #0
    6ece:	4699      	mov	r9, r3
    6ed0:	9901      	ldr	r1, [sp, #4]
    6ed2:	4001      	ands	r1, r0
    6ed4:	b2cd      	uxtb	r5, r1
    6ed6:	2100      	movs	r1, #0
    6ed8:	0312      	lsls	r2, r2, #12
    6eda:	0d0b      	lsrs	r3, r1, #20
    6edc:	0b12      	lsrs	r2, r2, #12
    6ede:	051b      	lsls	r3, r3, #20
    6ee0:	4313      	orrs	r3, r2
    6ee2:	4a43      	ldr	r2, [pc, #268]	; (6ff0 <__aeabi_dmul+0x1e8>)
    6ee4:	0524      	lsls	r4, r4, #20
    6ee6:	4013      	ands	r3, r2
    6ee8:	431c      	orrs	r4, r3
    6eea:	0064      	lsls	r4, r4, #1
    6eec:	07ed      	lsls	r5, r5, #31
    6eee:	0864      	lsrs	r4, r4, #1
    6ef0:	432c      	orrs	r4, r5
    6ef2:	4648      	mov	r0, r9
    6ef4:	0021      	movs	r1, r4
    6ef6:	b007      	add	sp, #28
    6ef8:	bc3c      	pop	{r2, r3, r4, r5}
    6efa:	4690      	mov	r8, r2
    6efc:	4699      	mov	r9, r3
    6efe:	46a2      	mov	sl, r4
    6f00:	46ab      	mov	fp, r5
    6f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6f04:	4303      	orrs	r3, r0
    6f06:	4699      	mov	r9, r3
    6f08:	d04f      	beq.n	6faa <__aeabi_dmul+0x1a2>
    6f0a:	465b      	mov	r3, fp
    6f0c:	2b00      	cmp	r3, #0
    6f0e:	d100      	bne.n	6f12 <__aeabi_dmul+0x10a>
    6f10:	e189      	b.n	7226 <__aeabi_dmul+0x41e>
    6f12:	4658      	mov	r0, fp
    6f14:	f000 fdfa 	bl	7b0c <__clzsi2>
    6f18:	0003      	movs	r3, r0
    6f1a:	3b0b      	subs	r3, #11
    6f1c:	2b1c      	cmp	r3, #28
    6f1e:	dd00      	ble.n	6f22 <__aeabi_dmul+0x11a>
    6f20:	e17a      	b.n	7218 <__aeabi_dmul+0x410>
    6f22:	221d      	movs	r2, #29
    6f24:	1ad3      	subs	r3, r2, r3
    6f26:	003a      	movs	r2, r7
    6f28:	0001      	movs	r1, r0
    6f2a:	465c      	mov	r4, fp
    6f2c:	40da      	lsrs	r2, r3
    6f2e:	3908      	subs	r1, #8
    6f30:	408c      	lsls	r4, r1
    6f32:	0013      	movs	r3, r2
    6f34:	408f      	lsls	r7, r1
    6f36:	4323      	orrs	r3, r4
    6f38:	469b      	mov	fp, r3
    6f3a:	46b9      	mov	r9, r7
    6f3c:	2300      	movs	r3, #0
    6f3e:	4e2d      	ldr	r6, [pc, #180]	; (6ff4 <__aeabi_dmul+0x1ec>)
    6f40:	2700      	movs	r7, #0
    6f42:	1a36      	subs	r6, r6, r0
    6f44:	9302      	str	r3, [sp, #8]
    6f46:	e784      	b.n	6e52 <__aeabi_dmul+0x4a>
    6f48:	4653      	mov	r3, sl
    6f4a:	4323      	orrs	r3, r4
    6f4c:	d12a      	bne.n	6fa4 <__aeabi_dmul+0x19c>
    6f4e:	2400      	movs	r4, #0
    6f50:	2002      	movs	r0, #2
    6f52:	e796      	b.n	6e82 <__aeabi_dmul+0x7a>
    6f54:	4653      	mov	r3, sl
    6f56:	4323      	orrs	r3, r4
    6f58:	d020      	beq.n	6f9c <__aeabi_dmul+0x194>
    6f5a:	2c00      	cmp	r4, #0
    6f5c:	d100      	bne.n	6f60 <__aeabi_dmul+0x158>
    6f5e:	e157      	b.n	7210 <__aeabi_dmul+0x408>
    6f60:	0020      	movs	r0, r4
    6f62:	f000 fdd3 	bl	7b0c <__clzsi2>
    6f66:	0003      	movs	r3, r0
    6f68:	3b0b      	subs	r3, #11
    6f6a:	2b1c      	cmp	r3, #28
    6f6c:	dd00      	ble.n	6f70 <__aeabi_dmul+0x168>
    6f6e:	e149      	b.n	7204 <__aeabi_dmul+0x3fc>
    6f70:	211d      	movs	r1, #29
    6f72:	1acb      	subs	r3, r1, r3
    6f74:	4651      	mov	r1, sl
    6f76:	0002      	movs	r2, r0
    6f78:	40d9      	lsrs	r1, r3
    6f7a:	4653      	mov	r3, sl
    6f7c:	3a08      	subs	r2, #8
    6f7e:	4094      	lsls	r4, r2
    6f80:	4093      	lsls	r3, r2
    6f82:	430c      	orrs	r4, r1
    6f84:	4a1b      	ldr	r2, [pc, #108]	; (6ff4 <__aeabi_dmul+0x1ec>)
    6f86:	1a12      	subs	r2, r2, r0
    6f88:	2000      	movs	r0, #0
    6f8a:	e77a      	b.n	6e82 <__aeabi_dmul+0x7a>
    6f8c:	2501      	movs	r5, #1
    6f8e:	9b01      	ldr	r3, [sp, #4]
    6f90:	4c14      	ldr	r4, [pc, #80]	; (6fe4 <__aeabi_dmul+0x1dc>)
    6f92:	401d      	ands	r5, r3
    6f94:	2300      	movs	r3, #0
    6f96:	2200      	movs	r2, #0
    6f98:	4699      	mov	r9, r3
    6f9a:	e79c      	b.n	6ed6 <__aeabi_dmul+0xce>
    6f9c:	2400      	movs	r4, #0
    6f9e:	2200      	movs	r2, #0
    6fa0:	2001      	movs	r0, #1
    6fa2:	e76e      	b.n	6e82 <__aeabi_dmul+0x7a>
    6fa4:	4653      	mov	r3, sl
    6fa6:	2003      	movs	r0, #3
    6fa8:	e76b      	b.n	6e82 <__aeabi_dmul+0x7a>
    6faa:	2300      	movs	r3, #0
    6fac:	469b      	mov	fp, r3
    6fae:	3301      	adds	r3, #1
    6fb0:	2704      	movs	r7, #4
    6fb2:	2600      	movs	r6, #0
    6fb4:	9302      	str	r3, [sp, #8]
    6fb6:	e74c      	b.n	6e52 <__aeabi_dmul+0x4a>
    6fb8:	2303      	movs	r3, #3
    6fba:	4681      	mov	r9, r0
    6fbc:	270c      	movs	r7, #12
    6fbe:	9302      	str	r3, [sp, #8]
    6fc0:	e747      	b.n	6e52 <__aeabi_dmul+0x4a>
    6fc2:	2280      	movs	r2, #128	; 0x80
    6fc4:	2300      	movs	r3, #0
    6fc6:	2500      	movs	r5, #0
    6fc8:	0312      	lsls	r2, r2, #12
    6fca:	4699      	mov	r9, r3
    6fcc:	4c05      	ldr	r4, [pc, #20]	; (6fe4 <__aeabi_dmul+0x1dc>)
    6fce:	e782      	b.n	6ed6 <__aeabi_dmul+0xce>
    6fd0:	465c      	mov	r4, fp
    6fd2:	464b      	mov	r3, r9
    6fd4:	9802      	ldr	r0, [sp, #8]
    6fd6:	e76f      	b.n	6eb8 <__aeabi_dmul+0xb0>
    6fd8:	465c      	mov	r4, fp
    6fda:	464b      	mov	r3, r9
    6fdc:	9501      	str	r5, [sp, #4]
    6fde:	9802      	ldr	r0, [sp, #8]
    6fe0:	e76a      	b.n	6eb8 <__aeabi_dmul+0xb0>
    6fe2:	46c0      	nop			; (mov r8, r8)
    6fe4:	000007ff 	.word	0x000007ff
    6fe8:	fffffc01 	.word	0xfffffc01
    6fec:	0000907c 	.word	0x0000907c
    6ff0:	800fffff 	.word	0x800fffff
    6ff4:	fffffc0d 	.word	0xfffffc0d
    6ff8:	464a      	mov	r2, r9
    6ffa:	4649      	mov	r1, r9
    6ffc:	0c17      	lsrs	r7, r2, #16
    6ffe:	0c1a      	lsrs	r2, r3, #16
    7000:	041b      	lsls	r3, r3, #16
    7002:	0c1b      	lsrs	r3, r3, #16
    7004:	0408      	lsls	r0, r1, #16
    7006:	0019      	movs	r1, r3
    7008:	0c00      	lsrs	r0, r0, #16
    700a:	4341      	muls	r1, r0
    700c:	0015      	movs	r5, r2
    700e:	4688      	mov	r8, r1
    7010:	0019      	movs	r1, r3
    7012:	437d      	muls	r5, r7
    7014:	4379      	muls	r1, r7
    7016:	9503      	str	r5, [sp, #12]
    7018:	4689      	mov	r9, r1
    701a:	0029      	movs	r1, r5
    701c:	0015      	movs	r5, r2
    701e:	4345      	muls	r5, r0
    7020:	444d      	add	r5, r9
    7022:	9502      	str	r5, [sp, #8]
    7024:	4645      	mov	r5, r8
    7026:	0c2d      	lsrs	r5, r5, #16
    7028:	46aa      	mov	sl, r5
    702a:	9d02      	ldr	r5, [sp, #8]
    702c:	4455      	add	r5, sl
    702e:	45a9      	cmp	r9, r5
    7030:	d906      	bls.n	7040 <__aeabi_dmul+0x238>
    7032:	468a      	mov	sl, r1
    7034:	2180      	movs	r1, #128	; 0x80
    7036:	0249      	lsls	r1, r1, #9
    7038:	4689      	mov	r9, r1
    703a:	44ca      	add	sl, r9
    703c:	4651      	mov	r1, sl
    703e:	9103      	str	r1, [sp, #12]
    7040:	0c29      	lsrs	r1, r5, #16
    7042:	9104      	str	r1, [sp, #16]
    7044:	4641      	mov	r1, r8
    7046:	0409      	lsls	r1, r1, #16
    7048:	042d      	lsls	r5, r5, #16
    704a:	0c09      	lsrs	r1, r1, #16
    704c:	4688      	mov	r8, r1
    704e:	0029      	movs	r1, r5
    7050:	0c25      	lsrs	r5, r4, #16
    7052:	0424      	lsls	r4, r4, #16
    7054:	4441      	add	r1, r8
    7056:	0c24      	lsrs	r4, r4, #16
    7058:	9105      	str	r1, [sp, #20]
    705a:	0021      	movs	r1, r4
    705c:	4341      	muls	r1, r0
    705e:	4688      	mov	r8, r1
    7060:	0021      	movs	r1, r4
    7062:	4379      	muls	r1, r7
    7064:	468a      	mov	sl, r1
    7066:	4368      	muls	r0, r5
    7068:	4641      	mov	r1, r8
    706a:	4450      	add	r0, sl
    706c:	4681      	mov	r9, r0
    706e:	0c08      	lsrs	r0, r1, #16
    7070:	4448      	add	r0, r9
    7072:	436f      	muls	r7, r5
    7074:	4582      	cmp	sl, r0
    7076:	d903      	bls.n	7080 <__aeabi_dmul+0x278>
    7078:	2180      	movs	r1, #128	; 0x80
    707a:	0249      	lsls	r1, r1, #9
    707c:	4689      	mov	r9, r1
    707e:	444f      	add	r7, r9
    7080:	0c01      	lsrs	r1, r0, #16
    7082:	4689      	mov	r9, r1
    7084:	0039      	movs	r1, r7
    7086:	4449      	add	r1, r9
    7088:	9102      	str	r1, [sp, #8]
    708a:	4641      	mov	r1, r8
    708c:	040f      	lsls	r7, r1, #16
    708e:	9904      	ldr	r1, [sp, #16]
    7090:	0c3f      	lsrs	r7, r7, #16
    7092:	4688      	mov	r8, r1
    7094:	0400      	lsls	r0, r0, #16
    7096:	19c0      	adds	r0, r0, r7
    7098:	4480      	add	r8, r0
    709a:	4641      	mov	r1, r8
    709c:	9104      	str	r1, [sp, #16]
    709e:	4659      	mov	r1, fp
    70a0:	0c0f      	lsrs	r7, r1, #16
    70a2:	0409      	lsls	r1, r1, #16
    70a4:	0c09      	lsrs	r1, r1, #16
    70a6:	4688      	mov	r8, r1
    70a8:	4359      	muls	r1, r3
    70aa:	468a      	mov	sl, r1
    70ac:	0039      	movs	r1, r7
    70ae:	4351      	muls	r1, r2
    70b0:	4689      	mov	r9, r1
    70b2:	4641      	mov	r1, r8
    70b4:	434a      	muls	r2, r1
    70b6:	4651      	mov	r1, sl
    70b8:	0c09      	lsrs	r1, r1, #16
    70ba:	468b      	mov	fp, r1
    70bc:	437b      	muls	r3, r7
    70be:	18d2      	adds	r2, r2, r3
    70c0:	445a      	add	r2, fp
    70c2:	4293      	cmp	r3, r2
    70c4:	d903      	bls.n	70ce <__aeabi_dmul+0x2c6>
    70c6:	2380      	movs	r3, #128	; 0x80
    70c8:	025b      	lsls	r3, r3, #9
    70ca:	469b      	mov	fp, r3
    70cc:	44d9      	add	r9, fp
    70ce:	4651      	mov	r1, sl
    70d0:	0409      	lsls	r1, r1, #16
    70d2:	0c09      	lsrs	r1, r1, #16
    70d4:	468a      	mov	sl, r1
    70d6:	4641      	mov	r1, r8
    70d8:	4361      	muls	r1, r4
    70da:	437c      	muls	r4, r7
    70dc:	0c13      	lsrs	r3, r2, #16
    70de:	0412      	lsls	r2, r2, #16
    70e0:	444b      	add	r3, r9
    70e2:	4452      	add	r2, sl
    70e4:	46a1      	mov	r9, r4
    70e6:	468a      	mov	sl, r1
    70e8:	003c      	movs	r4, r7
    70ea:	4641      	mov	r1, r8
    70ec:	436c      	muls	r4, r5
    70ee:	434d      	muls	r5, r1
    70f0:	4651      	mov	r1, sl
    70f2:	444d      	add	r5, r9
    70f4:	0c0f      	lsrs	r7, r1, #16
    70f6:	197d      	adds	r5, r7, r5
    70f8:	45a9      	cmp	r9, r5
    70fa:	d903      	bls.n	7104 <__aeabi_dmul+0x2fc>
    70fc:	2180      	movs	r1, #128	; 0x80
    70fe:	0249      	lsls	r1, r1, #9
    7100:	4688      	mov	r8, r1
    7102:	4444      	add	r4, r8
    7104:	9f04      	ldr	r7, [sp, #16]
    7106:	9903      	ldr	r1, [sp, #12]
    7108:	46b8      	mov	r8, r7
    710a:	4441      	add	r1, r8
    710c:	468b      	mov	fp, r1
    710e:	4583      	cmp	fp, r0
    7110:	4180      	sbcs	r0, r0
    7112:	4241      	negs	r1, r0
    7114:	4688      	mov	r8, r1
    7116:	4651      	mov	r1, sl
    7118:	0408      	lsls	r0, r1, #16
    711a:	042f      	lsls	r7, r5, #16
    711c:	0c00      	lsrs	r0, r0, #16
    711e:	183f      	adds	r7, r7, r0
    7120:	4658      	mov	r0, fp
    7122:	9902      	ldr	r1, [sp, #8]
    7124:	1810      	adds	r0, r2, r0
    7126:	4689      	mov	r9, r1
    7128:	4290      	cmp	r0, r2
    712a:	4192      	sbcs	r2, r2
    712c:	444f      	add	r7, r9
    712e:	46ba      	mov	sl, r7
    7130:	4252      	negs	r2, r2
    7132:	4699      	mov	r9, r3
    7134:	4693      	mov	fp, r2
    7136:	44c2      	add	sl, r8
    7138:	44d1      	add	r9, sl
    713a:	44cb      	add	fp, r9
    713c:	428f      	cmp	r7, r1
    713e:	41bf      	sbcs	r7, r7
    7140:	45c2      	cmp	sl, r8
    7142:	4189      	sbcs	r1, r1
    7144:	4599      	cmp	r9, r3
    7146:	419b      	sbcs	r3, r3
    7148:	4593      	cmp	fp, r2
    714a:	4192      	sbcs	r2, r2
    714c:	427f      	negs	r7, r7
    714e:	4249      	negs	r1, r1
    7150:	0c2d      	lsrs	r5, r5, #16
    7152:	4252      	negs	r2, r2
    7154:	430f      	orrs	r7, r1
    7156:	425b      	negs	r3, r3
    7158:	4313      	orrs	r3, r2
    715a:	197f      	adds	r7, r7, r5
    715c:	18ff      	adds	r7, r7, r3
    715e:	465b      	mov	r3, fp
    7160:	193c      	adds	r4, r7, r4
    7162:	0ddb      	lsrs	r3, r3, #23
    7164:	9a05      	ldr	r2, [sp, #20]
    7166:	0264      	lsls	r4, r4, #9
    7168:	431c      	orrs	r4, r3
    716a:	0243      	lsls	r3, r0, #9
    716c:	4313      	orrs	r3, r2
    716e:	1e5d      	subs	r5, r3, #1
    7170:	41ab      	sbcs	r3, r5
    7172:	465a      	mov	r2, fp
    7174:	0dc0      	lsrs	r0, r0, #23
    7176:	4303      	orrs	r3, r0
    7178:	0252      	lsls	r2, r2, #9
    717a:	4313      	orrs	r3, r2
    717c:	01e2      	lsls	r2, r4, #7
    717e:	d556      	bpl.n	722e <__aeabi_dmul+0x426>
    7180:	2001      	movs	r0, #1
    7182:	085a      	lsrs	r2, r3, #1
    7184:	4003      	ands	r3, r0
    7186:	4313      	orrs	r3, r2
    7188:	07e2      	lsls	r2, r4, #31
    718a:	4313      	orrs	r3, r2
    718c:	0864      	lsrs	r4, r4, #1
    718e:	485a      	ldr	r0, [pc, #360]	; (72f8 <__aeabi_dmul+0x4f0>)
    7190:	4460      	add	r0, ip
    7192:	2800      	cmp	r0, #0
    7194:	dd4d      	ble.n	7232 <__aeabi_dmul+0x42a>
    7196:	075a      	lsls	r2, r3, #29
    7198:	d009      	beq.n	71ae <__aeabi_dmul+0x3a6>
    719a:	220f      	movs	r2, #15
    719c:	401a      	ands	r2, r3
    719e:	2a04      	cmp	r2, #4
    71a0:	d005      	beq.n	71ae <__aeabi_dmul+0x3a6>
    71a2:	1d1a      	adds	r2, r3, #4
    71a4:	429a      	cmp	r2, r3
    71a6:	419b      	sbcs	r3, r3
    71a8:	425b      	negs	r3, r3
    71aa:	18e4      	adds	r4, r4, r3
    71ac:	0013      	movs	r3, r2
    71ae:	01e2      	lsls	r2, r4, #7
    71b0:	d504      	bpl.n	71bc <__aeabi_dmul+0x3b4>
    71b2:	2080      	movs	r0, #128	; 0x80
    71b4:	4a51      	ldr	r2, [pc, #324]	; (72fc <__aeabi_dmul+0x4f4>)
    71b6:	00c0      	lsls	r0, r0, #3
    71b8:	4014      	ands	r4, r2
    71ba:	4460      	add	r0, ip
    71bc:	4a50      	ldr	r2, [pc, #320]	; (7300 <__aeabi_dmul+0x4f8>)
    71be:	4290      	cmp	r0, r2
    71c0:	dd00      	ble.n	71c4 <__aeabi_dmul+0x3bc>
    71c2:	e6e3      	b.n	6f8c <__aeabi_dmul+0x184>
    71c4:	2501      	movs	r5, #1
    71c6:	08db      	lsrs	r3, r3, #3
    71c8:	0762      	lsls	r2, r4, #29
    71ca:	431a      	orrs	r2, r3
    71cc:	0264      	lsls	r4, r4, #9
    71ce:	9b01      	ldr	r3, [sp, #4]
    71d0:	4691      	mov	r9, r2
    71d2:	0b22      	lsrs	r2, r4, #12
    71d4:	0544      	lsls	r4, r0, #21
    71d6:	0d64      	lsrs	r4, r4, #21
    71d8:	401d      	ands	r5, r3
    71da:	e67c      	b.n	6ed6 <__aeabi_dmul+0xce>
    71dc:	2280      	movs	r2, #128	; 0x80
    71de:	4659      	mov	r1, fp
    71e0:	0312      	lsls	r2, r2, #12
    71e2:	4211      	tst	r1, r2
    71e4:	d008      	beq.n	71f8 <__aeabi_dmul+0x3f0>
    71e6:	4214      	tst	r4, r2
    71e8:	d106      	bne.n	71f8 <__aeabi_dmul+0x3f0>
    71ea:	4322      	orrs	r2, r4
    71ec:	0312      	lsls	r2, r2, #12
    71ee:	0b12      	lsrs	r2, r2, #12
    71f0:	4645      	mov	r5, r8
    71f2:	4699      	mov	r9, r3
    71f4:	4c43      	ldr	r4, [pc, #268]	; (7304 <__aeabi_dmul+0x4fc>)
    71f6:	e66e      	b.n	6ed6 <__aeabi_dmul+0xce>
    71f8:	465b      	mov	r3, fp
    71fa:	431a      	orrs	r2, r3
    71fc:	0312      	lsls	r2, r2, #12
    71fe:	0b12      	lsrs	r2, r2, #12
    7200:	4c40      	ldr	r4, [pc, #256]	; (7304 <__aeabi_dmul+0x4fc>)
    7202:	e668      	b.n	6ed6 <__aeabi_dmul+0xce>
    7204:	0003      	movs	r3, r0
    7206:	4654      	mov	r4, sl
    7208:	3b28      	subs	r3, #40	; 0x28
    720a:	409c      	lsls	r4, r3
    720c:	2300      	movs	r3, #0
    720e:	e6b9      	b.n	6f84 <__aeabi_dmul+0x17c>
    7210:	f000 fc7c 	bl	7b0c <__clzsi2>
    7214:	3020      	adds	r0, #32
    7216:	e6a6      	b.n	6f66 <__aeabi_dmul+0x15e>
    7218:	0003      	movs	r3, r0
    721a:	3b28      	subs	r3, #40	; 0x28
    721c:	409f      	lsls	r7, r3
    721e:	2300      	movs	r3, #0
    7220:	46bb      	mov	fp, r7
    7222:	4699      	mov	r9, r3
    7224:	e68a      	b.n	6f3c <__aeabi_dmul+0x134>
    7226:	f000 fc71 	bl	7b0c <__clzsi2>
    722a:	3020      	adds	r0, #32
    722c:	e674      	b.n	6f18 <__aeabi_dmul+0x110>
    722e:	46b4      	mov	ip, r6
    7230:	e7ad      	b.n	718e <__aeabi_dmul+0x386>
    7232:	2501      	movs	r5, #1
    7234:	1a2a      	subs	r2, r5, r0
    7236:	2a38      	cmp	r2, #56	; 0x38
    7238:	dd06      	ble.n	7248 <__aeabi_dmul+0x440>
    723a:	9b01      	ldr	r3, [sp, #4]
    723c:	2400      	movs	r4, #0
    723e:	401d      	ands	r5, r3
    7240:	2300      	movs	r3, #0
    7242:	2200      	movs	r2, #0
    7244:	4699      	mov	r9, r3
    7246:	e646      	b.n	6ed6 <__aeabi_dmul+0xce>
    7248:	2a1f      	cmp	r2, #31
    724a:	dc21      	bgt.n	7290 <__aeabi_dmul+0x488>
    724c:	2520      	movs	r5, #32
    724e:	0020      	movs	r0, r4
    7250:	1aad      	subs	r5, r5, r2
    7252:	001e      	movs	r6, r3
    7254:	40ab      	lsls	r3, r5
    7256:	40a8      	lsls	r0, r5
    7258:	40d6      	lsrs	r6, r2
    725a:	1e5d      	subs	r5, r3, #1
    725c:	41ab      	sbcs	r3, r5
    725e:	4330      	orrs	r0, r6
    7260:	4318      	orrs	r0, r3
    7262:	40d4      	lsrs	r4, r2
    7264:	0743      	lsls	r3, r0, #29
    7266:	d009      	beq.n	727c <__aeabi_dmul+0x474>
    7268:	230f      	movs	r3, #15
    726a:	4003      	ands	r3, r0
    726c:	2b04      	cmp	r3, #4
    726e:	d005      	beq.n	727c <__aeabi_dmul+0x474>
    7270:	0003      	movs	r3, r0
    7272:	1d18      	adds	r0, r3, #4
    7274:	4298      	cmp	r0, r3
    7276:	419b      	sbcs	r3, r3
    7278:	425b      	negs	r3, r3
    727a:	18e4      	adds	r4, r4, r3
    727c:	0223      	lsls	r3, r4, #8
    727e:	d521      	bpl.n	72c4 <__aeabi_dmul+0x4bc>
    7280:	2501      	movs	r5, #1
    7282:	9b01      	ldr	r3, [sp, #4]
    7284:	2401      	movs	r4, #1
    7286:	401d      	ands	r5, r3
    7288:	2300      	movs	r3, #0
    728a:	2200      	movs	r2, #0
    728c:	4699      	mov	r9, r3
    728e:	e622      	b.n	6ed6 <__aeabi_dmul+0xce>
    7290:	251f      	movs	r5, #31
    7292:	0021      	movs	r1, r4
    7294:	426d      	negs	r5, r5
    7296:	1a28      	subs	r0, r5, r0
    7298:	40c1      	lsrs	r1, r0
    729a:	0008      	movs	r0, r1
    729c:	2a20      	cmp	r2, #32
    729e:	d01d      	beq.n	72dc <__aeabi_dmul+0x4d4>
    72a0:	355f      	adds	r5, #95	; 0x5f
    72a2:	1aaa      	subs	r2, r5, r2
    72a4:	4094      	lsls	r4, r2
    72a6:	4323      	orrs	r3, r4
    72a8:	1e5c      	subs	r4, r3, #1
    72aa:	41a3      	sbcs	r3, r4
    72ac:	2507      	movs	r5, #7
    72ae:	4303      	orrs	r3, r0
    72b0:	401d      	ands	r5, r3
    72b2:	2200      	movs	r2, #0
    72b4:	2d00      	cmp	r5, #0
    72b6:	d009      	beq.n	72cc <__aeabi_dmul+0x4c4>
    72b8:	220f      	movs	r2, #15
    72ba:	2400      	movs	r4, #0
    72bc:	401a      	ands	r2, r3
    72be:	0018      	movs	r0, r3
    72c0:	2a04      	cmp	r2, #4
    72c2:	d1d6      	bne.n	7272 <__aeabi_dmul+0x46a>
    72c4:	0003      	movs	r3, r0
    72c6:	0765      	lsls	r5, r4, #29
    72c8:	0264      	lsls	r4, r4, #9
    72ca:	0b22      	lsrs	r2, r4, #12
    72cc:	08db      	lsrs	r3, r3, #3
    72ce:	432b      	orrs	r3, r5
    72d0:	2501      	movs	r5, #1
    72d2:	4699      	mov	r9, r3
    72d4:	9b01      	ldr	r3, [sp, #4]
    72d6:	2400      	movs	r4, #0
    72d8:	401d      	ands	r5, r3
    72da:	e5fc      	b.n	6ed6 <__aeabi_dmul+0xce>
    72dc:	2400      	movs	r4, #0
    72de:	e7e2      	b.n	72a6 <__aeabi_dmul+0x49e>
    72e0:	2280      	movs	r2, #128	; 0x80
    72e2:	2501      	movs	r5, #1
    72e4:	0312      	lsls	r2, r2, #12
    72e6:	4322      	orrs	r2, r4
    72e8:	9901      	ldr	r1, [sp, #4]
    72ea:	0312      	lsls	r2, r2, #12
    72ec:	0b12      	lsrs	r2, r2, #12
    72ee:	400d      	ands	r5, r1
    72f0:	4699      	mov	r9, r3
    72f2:	4c04      	ldr	r4, [pc, #16]	; (7304 <__aeabi_dmul+0x4fc>)
    72f4:	e5ef      	b.n	6ed6 <__aeabi_dmul+0xce>
    72f6:	46c0      	nop			; (mov r8, r8)
    72f8:	000003ff 	.word	0x000003ff
    72fc:	feffffff 	.word	0xfeffffff
    7300:	000007fe 	.word	0x000007fe
    7304:	000007ff 	.word	0x000007ff

00007308 <__aeabi_dsub>:
    7308:	b5f0      	push	{r4, r5, r6, r7, lr}
    730a:	4646      	mov	r6, r8
    730c:	46d6      	mov	lr, sl
    730e:	464f      	mov	r7, r9
    7310:	030c      	lsls	r4, r1, #12
    7312:	b5c0      	push	{r6, r7, lr}
    7314:	0fcd      	lsrs	r5, r1, #31
    7316:	004e      	lsls	r6, r1, #1
    7318:	0a61      	lsrs	r1, r4, #9
    731a:	0f44      	lsrs	r4, r0, #29
    731c:	430c      	orrs	r4, r1
    731e:	00c1      	lsls	r1, r0, #3
    7320:	0058      	lsls	r0, r3, #1
    7322:	0d40      	lsrs	r0, r0, #21
    7324:	4684      	mov	ip, r0
    7326:	468a      	mov	sl, r1
    7328:	000f      	movs	r7, r1
    732a:	0319      	lsls	r1, r3, #12
    732c:	0f50      	lsrs	r0, r2, #29
    732e:	0a49      	lsrs	r1, r1, #9
    7330:	4301      	orrs	r1, r0
    7332:	48c6      	ldr	r0, [pc, #792]	; (764c <__aeabi_dsub+0x344>)
    7334:	0d76      	lsrs	r6, r6, #21
    7336:	46a8      	mov	r8, r5
    7338:	0fdb      	lsrs	r3, r3, #31
    733a:	00d2      	lsls	r2, r2, #3
    733c:	4584      	cmp	ip, r0
    733e:	d100      	bne.n	7342 <__aeabi_dsub+0x3a>
    7340:	e0d8      	b.n	74f4 <__aeabi_dsub+0x1ec>
    7342:	2001      	movs	r0, #1
    7344:	4043      	eors	r3, r0
    7346:	42ab      	cmp	r3, r5
    7348:	d100      	bne.n	734c <__aeabi_dsub+0x44>
    734a:	e0a6      	b.n	749a <__aeabi_dsub+0x192>
    734c:	4660      	mov	r0, ip
    734e:	1a35      	subs	r5, r6, r0
    7350:	2d00      	cmp	r5, #0
    7352:	dc00      	bgt.n	7356 <__aeabi_dsub+0x4e>
    7354:	e105      	b.n	7562 <__aeabi_dsub+0x25a>
    7356:	2800      	cmp	r0, #0
    7358:	d110      	bne.n	737c <__aeabi_dsub+0x74>
    735a:	000b      	movs	r3, r1
    735c:	4313      	orrs	r3, r2
    735e:	d100      	bne.n	7362 <__aeabi_dsub+0x5a>
    7360:	e0d7      	b.n	7512 <__aeabi_dsub+0x20a>
    7362:	1e6b      	subs	r3, r5, #1
    7364:	2b00      	cmp	r3, #0
    7366:	d000      	beq.n	736a <__aeabi_dsub+0x62>
    7368:	e14b      	b.n	7602 <__aeabi_dsub+0x2fa>
    736a:	4653      	mov	r3, sl
    736c:	1a9f      	subs	r7, r3, r2
    736e:	45ba      	cmp	sl, r7
    7370:	4180      	sbcs	r0, r0
    7372:	1a64      	subs	r4, r4, r1
    7374:	4240      	negs	r0, r0
    7376:	1a24      	subs	r4, r4, r0
    7378:	2601      	movs	r6, #1
    737a:	e01e      	b.n	73ba <__aeabi_dsub+0xb2>
    737c:	4bb3      	ldr	r3, [pc, #716]	; (764c <__aeabi_dsub+0x344>)
    737e:	429e      	cmp	r6, r3
    7380:	d048      	beq.n	7414 <__aeabi_dsub+0x10c>
    7382:	2380      	movs	r3, #128	; 0x80
    7384:	041b      	lsls	r3, r3, #16
    7386:	4319      	orrs	r1, r3
    7388:	2d38      	cmp	r5, #56	; 0x38
    738a:	dd00      	ble.n	738e <__aeabi_dsub+0x86>
    738c:	e119      	b.n	75c2 <__aeabi_dsub+0x2ba>
    738e:	2d1f      	cmp	r5, #31
    7390:	dd00      	ble.n	7394 <__aeabi_dsub+0x8c>
    7392:	e14c      	b.n	762e <__aeabi_dsub+0x326>
    7394:	2320      	movs	r3, #32
    7396:	000f      	movs	r7, r1
    7398:	1b5b      	subs	r3, r3, r5
    739a:	0010      	movs	r0, r2
    739c:	409a      	lsls	r2, r3
    739e:	409f      	lsls	r7, r3
    73a0:	40e8      	lsrs	r0, r5
    73a2:	1e53      	subs	r3, r2, #1
    73a4:	419a      	sbcs	r2, r3
    73a6:	40e9      	lsrs	r1, r5
    73a8:	4307      	orrs	r7, r0
    73aa:	4317      	orrs	r7, r2
    73ac:	4653      	mov	r3, sl
    73ae:	1bdf      	subs	r7, r3, r7
    73b0:	1a61      	subs	r1, r4, r1
    73b2:	45ba      	cmp	sl, r7
    73b4:	41a4      	sbcs	r4, r4
    73b6:	4264      	negs	r4, r4
    73b8:	1b0c      	subs	r4, r1, r4
    73ba:	0223      	lsls	r3, r4, #8
    73bc:	d400      	bmi.n	73c0 <__aeabi_dsub+0xb8>
    73be:	e0c5      	b.n	754c <__aeabi_dsub+0x244>
    73c0:	0264      	lsls	r4, r4, #9
    73c2:	0a65      	lsrs	r5, r4, #9
    73c4:	2d00      	cmp	r5, #0
    73c6:	d100      	bne.n	73ca <__aeabi_dsub+0xc2>
    73c8:	e0f6      	b.n	75b8 <__aeabi_dsub+0x2b0>
    73ca:	0028      	movs	r0, r5
    73cc:	f000 fb9e 	bl	7b0c <__clzsi2>
    73d0:	0003      	movs	r3, r0
    73d2:	3b08      	subs	r3, #8
    73d4:	2b1f      	cmp	r3, #31
    73d6:	dd00      	ble.n	73da <__aeabi_dsub+0xd2>
    73d8:	e0e9      	b.n	75ae <__aeabi_dsub+0x2a6>
    73da:	2220      	movs	r2, #32
    73dc:	003c      	movs	r4, r7
    73de:	1ad2      	subs	r2, r2, r3
    73e0:	409d      	lsls	r5, r3
    73e2:	40d4      	lsrs	r4, r2
    73e4:	409f      	lsls	r7, r3
    73e6:	4325      	orrs	r5, r4
    73e8:	429e      	cmp	r6, r3
    73ea:	dd00      	ble.n	73ee <__aeabi_dsub+0xe6>
    73ec:	e0db      	b.n	75a6 <__aeabi_dsub+0x29e>
    73ee:	1b9e      	subs	r6, r3, r6
    73f0:	1c73      	adds	r3, r6, #1
    73f2:	2b1f      	cmp	r3, #31
    73f4:	dd00      	ble.n	73f8 <__aeabi_dsub+0xf0>
    73f6:	e10a      	b.n	760e <__aeabi_dsub+0x306>
    73f8:	2220      	movs	r2, #32
    73fa:	0038      	movs	r0, r7
    73fc:	1ad2      	subs	r2, r2, r3
    73fe:	0029      	movs	r1, r5
    7400:	4097      	lsls	r7, r2
    7402:	002c      	movs	r4, r5
    7404:	4091      	lsls	r1, r2
    7406:	40d8      	lsrs	r0, r3
    7408:	1e7a      	subs	r2, r7, #1
    740a:	4197      	sbcs	r7, r2
    740c:	40dc      	lsrs	r4, r3
    740e:	2600      	movs	r6, #0
    7410:	4301      	orrs	r1, r0
    7412:	430f      	orrs	r7, r1
    7414:	077b      	lsls	r3, r7, #29
    7416:	d009      	beq.n	742c <__aeabi_dsub+0x124>
    7418:	230f      	movs	r3, #15
    741a:	403b      	ands	r3, r7
    741c:	2b04      	cmp	r3, #4
    741e:	d005      	beq.n	742c <__aeabi_dsub+0x124>
    7420:	1d3b      	adds	r3, r7, #4
    7422:	42bb      	cmp	r3, r7
    7424:	41bf      	sbcs	r7, r7
    7426:	427f      	negs	r7, r7
    7428:	19e4      	adds	r4, r4, r7
    742a:	001f      	movs	r7, r3
    742c:	0223      	lsls	r3, r4, #8
    742e:	d525      	bpl.n	747c <__aeabi_dsub+0x174>
    7430:	4b86      	ldr	r3, [pc, #536]	; (764c <__aeabi_dsub+0x344>)
    7432:	3601      	adds	r6, #1
    7434:	429e      	cmp	r6, r3
    7436:	d100      	bne.n	743a <__aeabi_dsub+0x132>
    7438:	e0af      	b.n	759a <__aeabi_dsub+0x292>
    743a:	4b85      	ldr	r3, [pc, #532]	; (7650 <__aeabi_dsub+0x348>)
    743c:	2501      	movs	r5, #1
    743e:	401c      	ands	r4, r3
    7440:	4643      	mov	r3, r8
    7442:	0762      	lsls	r2, r4, #29
    7444:	08ff      	lsrs	r7, r7, #3
    7446:	0264      	lsls	r4, r4, #9
    7448:	0576      	lsls	r6, r6, #21
    744a:	4317      	orrs	r7, r2
    744c:	0b24      	lsrs	r4, r4, #12
    744e:	0d76      	lsrs	r6, r6, #21
    7450:	401d      	ands	r5, r3
    7452:	2100      	movs	r1, #0
    7454:	0324      	lsls	r4, r4, #12
    7456:	0b23      	lsrs	r3, r4, #12
    7458:	0d0c      	lsrs	r4, r1, #20
    745a:	4a7e      	ldr	r2, [pc, #504]	; (7654 <__aeabi_dsub+0x34c>)
    745c:	0524      	lsls	r4, r4, #20
    745e:	431c      	orrs	r4, r3
    7460:	4014      	ands	r4, r2
    7462:	0533      	lsls	r3, r6, #20
    7464:	4323      	orrs	r3, r4
    7466:	005b      	lsls	r3, r3, #1
    7468:	07ed      	lsls	r5, r5, #31
    746a:	085b      	lsrs	r3, r3, #1
    746c:	432b      	orrs	r3, r5
    746e:	0038      	movs	r0, r7
    7470:	0019      	movs	r1, r3
    7472:	bc1c      	pop	{r2, r3, r4}
    7474:	4690      	mov	r8, r2
    7476:	4699      	mov	r9, r3
    7478:	46a2      	mov	sl, r4
    747a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    747c:	2501      	movs	r5, #1
    747e:	4643      	mov	r3, r8
    7480:	0762      	lsls	r2, r4, #29
    7482:	08ff      	lsrs	r7, r7, #3
    7484:	4317      	orrs	r7, r2
    7486:	08e4      	lsrs	r4, r4, #3
    7488:	401d      	ands	r5, r3
    748a:	4b70      	ldr	r3, [pc, #448]	; (764c <__aeabi_dsub+0x344>)
    748c:	429e      	cmp	r6, r3
    748e:	d036      	beq.n	74fe <__aeabi_dsub+0x1f6>
    7490:	0324      	lsls	r4, r4, #12
    7492:	0576      	lsls	r6, r6, #21
    7494:	0b24      	lsrs	r4, r4, #12
    7496:	0d76      	lsrs	r6, r6, #21
    7498:	e7db      	b.n	7452 <__aeabi_dsub+0x14a>
    749a:	4663      	mov	r3, ip
    749c:	1af3      	subs	r3, r6, r3
    749e:	2b00      	cmp	r3, #0
    74a0:	dc00      	bgt.n	74a4 <__aeabi_dsub+0x19c>
    74a2:	e094      	b.n	75ce <__aeabi_dsub+0x2c6>
    74a4:	4660      	mov	r0, ip
    74a6:	2800      	cmp	r0, #0
    74a8:	d035      	beq.n	7516 <__aeabi_dsub+0x20e>
    74aa:	4868      	ldr	r0, [pc, #416]	; (764c <__aeabi_dsub+0x344>)
    74ac:	4286      	cmp	r6, r0
    74ae:	d0b1      	beq.n	7414 <__aeabi_dsub+0x10c>
    74b0:	2780      	movs	r7, #128	; 0x80
    74b2:	043f      	lsls	r7, r7, #16
    74b4:	4339      	orrs	r1, r7
    74b6:	2b38      	cmp	r3, #56	; 0x38
    74b8:	dc00      	bgt.n	74bc <__aeabi_dsub+0x1b4>
    74ba:	e0fd      	b.n	76b8 <__aeabi_dsub+0x3b0>
    74bc:	430a      	orrs	r2, r1
    74be:	0017      	movs	r7, r2
    74c0:	2100      	movs	r1, #0
    74c2:	1e7a      	subs	r2, r7, #1
    74c4:	4197      	sbcs	r7, r2
    74c6:	4457      	add	r7, sl
    74c8:	4557      	cmp	r7, sl
    74ca:	4180      	sbcs	r0, r0
    74cc:	1909      	adds	r1, r1, r4
    74ce:	4244      	negs	r4, r0
    74d0:	190c      	adds	r4, r1, r4
    74d2:	0223      	lsls	r3, r4, #8
    74d4:	d53a      	bpl.n	754c <__aeabi_dsub+0x244>
    74d6:	4b5d      	ldr	r3, [pc, #372]	; (764c <__aeabi_dsub+0x344>)
    74d8:	3601      	adds	r6, #1
    74da:	429e      	cmp	r6, r3
    74dc:	d100      	bne.n	74e0 <__aeabi_dsub+0x1d8>
    74de:	e14b      	b.n	7778 <__aeabi_dsub+0x470>
    74e0:	2201      	movs	r2, #1
    74e2:	4b5b      	ldr	r3, [pc, #364]	; (7650 <__aeabi_dsub+0x348>)
    74e4:	401c      	ands	r4, r3
    74e6:	087b      	lsrs	r3, r7, #1
    74e8:	4017      	ands	r7, r2
    74ea:	431f      	orrs	r7, r3
    74ec:	07e2      	lsls	r2, r4, #31
    74ee:	4317      	orrs	r7, r2
    74f0:	0864      	lsrs	r4, r4, #1
    74f2:	e78f      	b.n	7414 <__aeabi_dsub+0x10c>
    74f4:	0008      	movs	r0, r1
    74f6:	4310      	orrs	r0, r2
    74f8:	d000      	beq.n	74fc <__aeabi_dsub+0x1f4>
    74fa:	e724      	b.n	7346 <__aeabi_dsub+0x3e>
    74fc:	e721      	b.n	7342 <__aeabi_dsub+0x3a>
    74fe:	0023      	movs	r3, r4
    7500:	433b      	orrs	r3, r7
    7502:	d100      	bne.n	7506 <__aeabi_dsub+0x1fe>
    7504:	e1b9      	b.n	787a <__aeabi_dsub+0x572>
    7506:	2280      	movs	r2, #128	; 0x80
    7508:	0312      	lsls	r2, r2, #12
    750a:	4314      	orrs	r4, r2
    750c:	0324      	lsls	r4, r4, #12
    750e:	0b24      	lsrs	r4, r4, #12
    7510:	e79f      	b.n	7452 <__aeabi_dsub+0x14a>
    7512:	002e      	movs	r6, r5
    7514:	e77e      	b.n	7414 <__aeabi_dsub+0x10c>
    7516:	0008      	movs	r0, r1
    7518:	4310      	orrs	r0, r2
    751a:	d100      	bne.n	751e <__aeabi_dsub+0x216>
    751c:	e0ca      	b.n	76b4 <__aeabi_dsub+0x3ac>
    751e:	1e58      	subs	r0, r3, #1
    7520:	4684      	mov	ip, r0
    7522:	2800      	cmp	r0, #0
    7524:	d000      	beq.n	7528 <__aeabi_dsub+0x220>
    7526:	e0e7      	b.n	76f8 <__aeabi_dsub+0x3f0>
    7528:	4452      	add	r2, sl
    752a:	4552      	cmp	r2, sl
    752c:	4180      	sbcs	r0, r0
    752e:	1864      	adds	r4, r4, r1
    7530:	4240      	negs	r0, r0
    7532:	1824      	adds	r4, r4, r0
    7534:	0017      	movs	r7, r2
    7536:	2601      	movs	r6, #1
    7538:	0223      	lsls	r3, r4, #8
    753a:	d507      	bpl.n	754c <__aeabi_dsub+0x244>
    753c:	2602      	movs	r6, #2
    753e:	e7cf      	b.n	74e0 <__aeabi_dsub+0x1d8>
    7540:	4664      	mov	r4, ip
    7542:	432c      	orrs	r4, r5
    7544:	d100      	bne.n	7548 <__aeabi_dsub+0x240>
    7546:	e1b3      	b.n	78b0 <__aeabi_dsub+0x5a8>
    7548:	002c      	movs	r4, r5
    754a:	4667      	mov	r7, ip
    754c:	077b      	lsls	r3, r7, #29
    754e:	d000      	beq.n	7552 <__aeabi_dsub+0x24a>
    7550:	e762      	b.n	7418 <__aeabi_dsub+0x110>
    7552:	0763      	lsls	r3, r4, #29
    7554:	08ff      	lsrs	r7, r7, #3
    7556:	431f      	orrs	r7, r3
    7558:	2501      	movs	r5, #1
    755a:	4643      	mov	r3, r8
    755c:	08e4      	lsrs	r4, r4, #3
    755e:	401d      	ands	r5, r3
    7560:	e793      	b.n	748a <__aeabi_dsub+0x182>
    7562:	2d00      	cmp	r5, #0
    7564:	d178      	bne.n	7658 <__aeabi_dsub+0x350>
    7566:	1c75      	adds	r5, r6, #1
    7568:	056d      	lsls	r5, r5, #21
    756a:	0d6d      	lsrs	r5, r5, #21
    756c:	2d01      	cmp	r5, #1
    756e:	dc00      	bgt.n	7572 <__aeabi_dsub+0x26a>
    7570:	e0f2      	b.n	7758 <__aeabi_dsub+0x450>
    7572:	4650      	mov	r0, sl
    7574:	1a80      	subs	r0, r0, r2
    7576:	4582      	cmp	sl, r0
    7578:	41bf      	sbcs	r7, r7
    757a:	1a65      	subs	r5, r4, r1
    757c:	427f      	negs	r7, r7
    757e:	1bed      	subs	r5, r5, r7
    7580:	4684      	mov	ip, r0
    7582:	0228      	lsls	r0, r5, #8
    7584:	d400      	bmi.n	7588 <__aeabi_dsub+0x280>
    7586:	e08c      	b.n	76a2 <__aeabi_dsub+0x39a>
    7588:	4650      	mov	r0, sl
    758a:	1a17      	subs	r7, r2, r0
    758c:	42ba      	cmp	r2, r7
    758e:	4192      	sbcs	r2, r2
    7590:	1b0c      	subs	r4, r1, r4
    7592:	4255      	negs	r5, r2
    7594:	1b65      	subs	r5, r4, r5
    7596:	4698      	mov	r8, r3
    7598:	e714      	b.n	73c4 <__aeabi_dsub+0xbc>
    759a:	2501      	movs	r5, #1
    759c:	4643      	mov	r3, r8
    759e:	2400      	movs	r4, #0
    75a0:	401d      	ands	r5, r3
    75a2:	2700      	movs	r7, #0
    75a4:	e755      	b.n	7452 <__aeabi_dsub+0x14a>
    75a6:	4c2a      	ldr	r4, [pc, #168]	; (7650 <__aeabi_dsub+0x348>)
    75a8:	1af6      	subs	r6, r6, r3
    75aa:	402c      	ands	r4, r5
    75ac:	e732      	b.n	7414 <__aeabi_dsub+0x10c>
    75ae:	003d      	movs	r5, r7
    75b0:	3828      	subs	r0, #40	; 0x28
    75b2:	4085      	lsls	r5, r0
    75b4:	2700      	movs	r7, #0
    75b6:	e717      	b.n	73e8 <__aeabi_dsub+0xe0>
    75b8:	0038      	movs	r0, r7
    75ba:	f000 faa7 	bl	7b0c <__clzsi2>
    75be:	3020      	adds	r0, #32
    75c0:	e706      	b.n	73d0 <__aeabi_dsub+0xc8>
    75c2:	430a      	orrs	r2, r1
    75c4:	0017      	movs	r7, r2
    75c6:	2100      	movs	r1, #0
    75c8:	1e7a      	subs	r2, r7, #1
    75ca:	4197      	sbcs	r7, r2
    75cc:	e6ee      	b.n	73ac <__aeabi_dsub+0xa4>
    75ce:	2b00      	cmp	r3, #0
    75d0:	d000      	beq.n	75d4 <__aeabi_dsub+0x2cc>
    75d2:	e0e5      	b.n	77a0 <__aeabi_dsub+0x498>
    75d4:	1c73      	adds	r3, r6, #1
    75d6:	469c      	mov	ip, r3
    75d8:	055b      	lsls	r3, r3, #21
    75da:	0d5b      	lsrs	r3, r3, #21
    75dc:	2b01      	cmp	r3, #1
    75de:	dc00      	bgt.n	75e2 <__aeabi_dsub+0x2da>
    75e0:	e09f      	b.n	7722 <__aeabi_dsub+0x41a>
    75e2:	4b1a      	ldr	r3, [pc, #104]	; (764c <__aeabi_dsub+0x344>)
    75e4:	459c      	cmp	ip, r3
    75e6:	d100      	bne.n	75ea <__aeabi_dsub+0x2e2>
    75e8:	e0c5      	b.n	7776 <__aeabi_dsub+0x46e>
    75ea:	4452      	add	r2, sl
    75ec:	4552      	cmp	r2, sl
    75ee:	4180      	sbcs	r0, r0
    75f0:	1864      	adds	r4, r4, r1
    75f2:	4240      	negs	r0, r0
    75f4:	1824      	adds	r4, r4, r0
    75f6:	07e7      	lsls	r7, r4, #31
    75f8:	0852      	lsrs	r2, r2, #1
    75fa:	4317      	orrs	r7, r2
    75fc:	0864      	lsrs	r4, r4, #1
    75fe:	4666      	mov	r6, ip
    7600:	e708      	b.n	7414 <__aeabi_dsub+0x10c>
    7602:	4812      	ldr	r0, [pc, #72]	; (764c <__aeabi_dsub+0x344>)
    7604:	4285      	cmp	r5, r0
    7606:	d100      	bne.n	760a <__aeabi_dsub+0x302>
    7608:	e085      	b.n	7716 <__aeabi_dsub+0x40e>
    760a:	001d      	movs	r5, r3
    760c:	e6bc      	b.n	7388 <__aeabi_dsub+0x80>
    760e:	0029      	movs	r1, r5
    7610:	3e1f      	subs	r6, #31
    7612:	40f1      	lsrs	r1, r6
    7614:	2b20      	cmp	r3, #32
    7616:	d100      	bne.n	761a <__aeabi_dsub+0x312>
    7618:	e07f      	b.n	771a <__aeabi_dsub+0x412>
    761a:	2240      	movs	r2, #64	; 0x40
    761c:	1ad3      	subs	r3, r2, r3
    761e:	409d      	lsls	r5, r3
    7620:	432f      	orrs	r7, r5
    7622:	1e7d      	subs	r5, r7, #1
    7624:	41af      	sbcs	r7, r5
    7626:	2400      	movs	r4, #0
    7628:	430f      	orrs	r7, r1
    762a:	2600      	movs	r6, #0
    762c:	e78e      	b.n	754c <__aeabi_dsub+0x244>
    762e:	002b      	movs	r3, r5
    7630:	000f      	movs	r7, r1
    7632:	3b20      	subs	r3, #32
    7634:	40df      	lsrs	r7, r3
    7636:	2d20      	cmp	r5, #32
    7638:	d071      	beq.n	771e <__aeabi_dsub+0x416>
    763a:	2340      	movs	r3, #64	; 0x40
    763c:	1b5d      	subs	r5, r3, r5
    763e:	40a9      	lsls	r1, r5
    7640:	430a      	orrs	r2, r1
    7642:	1e51      	subs	r1, r2, #1
    7644:	418a      	sbcs	r2, r1
    7646:	2100      	movs	r1, #0
    7648:	4317      	orrs	r7, r2
    764a:	e6af      	b.n	73ac <__aeabi_dsub+0xa4>
    764c:	000007ff 	.word	0x000007ff
    7650:	ff7fffff 	.word	0xff7fffff
    7654:	800fffff 	.word	0x800fffff
    7658:	2e00      	cmp	r6, #0
    765a:	d03e      	beq.n	76da <__aeabi_dsub+0x3d2>
    765c:	4eb3      	ldr	r6, [pc, #716]	; (792c <__aeabi_dsub+0x624>)
    765e:	45b4      	cmp	ip, r6
    7660:	d045      	beq.n	76ee <__aeabi_dsub+0x3e6>
    7662:	2680      	movs	r6, #128	; 0x80
    7664:	0436      	lsls	r6, r6, #16
    7666:	426d      	negs	r5, r5
    7668:	4334      	orrs	r4, r6
    766a:	2d38      	cmp	r5, #56	; 0x38
    766c:	dd00      	ble.n	7670 <__aeabi_dsub+0x368>
    766e:	e0a8      	b.n	77c2 <__aeabi_dsub+0x4ba>
    7670:	2d1f      	cmp	r5, #31
    7672:	dd00      	ble.n	7676 <__aeabi_dsub+0x36e>
    7674:	e11f      	b.n	78b6 <__aeabi_dsub+0x5ae>
    7676:	2620      	movs	r6, #32
    7678:	0027      	movs	r7, r4
    767a:	4650      	mov	r0, sl
    767c:	1b76      	subs	r6, r6, r5
    767e:	40b7      	lsls	r7, r6
    7680:	40e8      	lsrs	r0, r5
    7682:	4307      	orrs	r7, r0
    7684:	4650      	mov	r0, sl
    7686:	40b0      	lsls	r0, r6
    7688:	1e46      	subs	r6, r0, #1
    768a:	41b0      	sbcs	r0, r6
    768c:	40ec      	lsrs	r4, r5
    768e:	4338      	orrs	r0, r7
    7690:	1a17      	subs	r7, r2, r0
    7692:	42ba      	cmp	r2, r7
    7694:	4192      	sbcs	r2, r2
    7696:	1b0c      	subs	r4, r1, r4
    7698:	4252      	negs	r2, r2
    769a:	1aa4      	subs	r4, r4, r2
    769c:	4666      	mov	r6, ip
    769e:	4698      	mov	r8, r3
    76a0:	e68b      	b.n	73ba <__aeabi_dsub+0xb2>
    76a2:	4664      	mov	r4, ip
    76a4:	4667      	mov	r7, ip
    76a6:	432c      	orrs	r4, r5
    76a8:	d000      	beq.n	76ac <__aeabi_dsub+0x3a4>
    76aa:	e68b      	b.n	73c4 <__aeabi_dsub+0xbc>
    76ac:	2500      	movs	r5, #0
    76ae:	2600      	movs	r6, #0
    76b0:	2700      	movs	r7, #0
    76b2:	e6ea      	b.n	748a <__aeabi_dsub+0x182>
    76b4:	001e      	movs	r6, r3
    76b6:	e6ad      	b.n	7414 <__aeabi_dsub+0x10c>
    76b8:	2b1f      	cmp	r3, #31
    76ba:	dc60      	bgt.n	777e <__aeabi_dsub+0x476>
    76bc:	2720      	movs	r7, #32
    76be:	1af8      	subs	r0, r7, r3
    76c0:	000f      	movs	r7, r1
    76c2:	4684      	mov	ip, r0
    76c4:	4087      	lsls	r7, r0
    76c6:	0010      	movs	r0, r2
    76c8:	40d8      	lsrs	r0, r3
    76ca:	4307      	orrs	r7, r0
    76cc:	4660      	mov	r0, ip
    76ce:	4082      	lsls	r2, r0
    76d0:	1e50      	subs	r0, r2, #1
    76d2:	4182      	sbcs	r2, r0
    76d4:	40d9      	lsrs	r1, r3
    76d6:	4317      	orrs	r7, r2
    76d8:	e6f5      	b.n	74c6 <__aeabi_dsub+0x1be>
    76da:	0026      	movs	r6, r4
    76dc:	4650      	mov	r0, sl
    76de:	4306      	orrs	r6, r0
    76e0:	d005      	beq.n	76ee <__aeabi_dsub+0x3e6>
    76e2:	43ed      	mvns	r5, r5
    76e4:	2d00      	cmp	r5, #0
    76e6:	d0d3      	beq.n	7690 <__aeabi_dsub+0x388>
    76e8:	4e90      	ldr	r6, [pc, #576]	; (792c <__aeabi_dsub+0x624>)
    76ea:	45b4      	cmp	ip, r6
    76ec:	d1bd      	bne.n	766a <__aeabi_dsub+0x362>
    76ee:	000c      	movs	r4, r1
    76f0:	0017      	movs	r7, r2
    76f2:	4666      	mov	r6, ip
    76f4:	4698      	mov	r8, r3
    76f6:	e68d      	b.n	7414 <__aeabi_dsub+0x10c>
    76f8:	488c      	ldr	r0, [pc, #560]	; (792c <__aeabi_dsub+0x624>)
    76fa:	4283      	cmp	r3, r0
    76fc:	d00b      	beq.n	7716 <__aeabi_dsub+0x40e>
    76fe:	4663      	mov	r3, ip
    7700:	e6d9      	b.n	74b6 <__aeabi_dsub+0x1ae>
    7702:	2d00      	cmp	r5, #0
    7704:	d000      	beq.n	7708 <__aeabi_dsub+0x400>
    7706:	e096      	b.n	7836 <__aeabi_dsub+0x52e>
    7708:	0008      	movs	r0, r1
    770a:	4310      	orrs	r0, r2
    770c:	d100      	bne.n	7710 <__aeabi_dsub+0x408>
    770e:	e0e2      	b.n	78d6 <__aeabi_dsub+0x5ce>
    7710:	000c      	movs	r4, r1
    7712:	0017      	movs	r7, r2
    7714:	4698      	mov	r8, r3
    7716:	4e85      	ldr	r6, [pc, #532]	; (792c <__aeabi_dsub+0x624>)
    7718:	e67c      	b.n	7414 <__aeabi_dsub+0x10c>
    771a:	2500      	movs	r5, #0
    771c:	e780      	b.n	7620 <__aeabi_dsub+0x318>
    771e:	2100      	movs	r1, #0
    7720:	e78e      	b.n	7640 <__aeabi_dsub+0x338>
    7722:	0023      	movs	r3, r4
    7724:	4650      	mov	r0, sl
    7726:	4303      	orrs	r3, r0
    7728:	2e00      	cmp	r6, #0
    772a:	d000      	beq.n	772e <__aeabi_dsub+0x426>
    772c:	e0a8      	b.n	7880 <__aeabi_dsub+0x578>
    772e:	2b00      	cmp	r3, #0
    7730:	d100      	bne.n	7734 <__aeabi_dsub+0x42c>
    7732:	e0de      	b.n	78f2 <__aeabi_dsub+0x5ea>
    7734:	000b      	movs	r3, r1
    7736:	4313      	orrs	r3, r2
    7738:	d100      	bne.n	773c <__aeabi_dsub+0x434>
    773a:	e66b      	b.n	7414 <__aeabi_dsub+0x10c>
    773c:	4452      	add	r2, sl
    773e:	4552      	cmp	r2, sl
    7740:	4180      	sbcs	r0, r0
    7742:	1864      	adds	r4, r4, r1
    7744:	4240      	negs	r0, r0
    7746:	1824      	adds	r4, r4, r0
    7748:	0017      	movs	r7, r2
    774a:	0223      	lsls	r3, r4, #8
    774c:	d400      	bmi.n	7750 <__aeabi_dsub+0x448>
    774e:	e6fd      	b.n	754c <__aeabi_dsub+0x244>
    7750:	4b77      	ldr	r3, [pc, #476]	; (7930 <__aeabi_dsub+0x628>)
    7752:	4666      	mov	r6, ip
    7754:	401c      	ands	r4, r3
    7756:	e65d      	b.n	7414 <__aeabi_dsub+0x10c>
    7758:	0025      	movs	r5, r4
    775a:	4650      	mov	r0, sl
    775c:	4305      	orrs	r5, r0
    775e:	2e00      	cmp	r6, #0
    7760:	d1cf      	bne.n	7702 <__aeabi_dsub+0x3fa>
    7762:	2d00      	cmp	r5, #0
    7764:	d14f      	bne.n	7806 <__aeabi_dsub+0x4fe>
    7766:	000c      	movs	r4, r1
    7768:	4314      	orrs	r4, r2
    776a:	d100      	bne.n	776e <__aeabi_dsub+0x466>
    776c:	e0a0      	b.n	78b0 <__aeabi_dsub+0x5a8>
    776e:	000c      	movs	r4, r1
    7770:	0017      	movs	r7, r2
    7772:	4698      	mov	r8, r3
    7774:	e64e      	b.n	7414 <__aeabi_dsub+0x10c>
    7776:	4666      	mov	r6, ip
    7778:	2400      	movs	r4, #0
    777a:	2700      	movs	r7, #0
    777c:	e685      	b.n	748a <__aeabi_dsub+0x182>
    777e:	001f      	movs	r7, r3
    7780:	0008      	movs	r0, r1
    7782:	3f20      	subs	r7, #32
    7784:	40f8      	lsrs	r0, r7
    7786:	0007      	movs	r7, r0
    7788:	2b20      	cmp	r3, #32
    778a:	d100      	bne.n	778e <__aeabi_dsub+0x486>
    778c:	e08e      	b.n	78ac <__aeabi_dsub+0x5a4>
    778e:	2040      	movs	r0, #64	; 0x40
    7790:	1ac3      	subs	r3, r0, r3
    7792:	4099      	lsls	r1, r3
    7794:	430a      	orrs	r2, r1
    7796:	1e51      	subs	r1, r2, #1
    7798:	418a      	sbcs	r2, r1
    779a:	2100      	movs	r1, #0
    779c:	4317      	orrs	r7, r2
    779e:	e692      	b.n	74c6 <__aeabi_dsub+0x1be>
    77a0:	2e00      	cmp	r6, #0
    77a2:	d114      	bne.n	77ce <__aeabi_dsub+0x4c6>
    77a4:	0026      	movs	r6, r4
    77a6:	4650      	mov	r0, sl
    77a8:	4306      	orrs	r6, r0
    77aa:	d062      	beq.n	7872 <__aeabi_dsub+0x56a>
    77ac:	43db      	mvns	r3, r3
    77ae:	2b00      	cmp	r3, #0
    77b0:	d15c      	bne.n	786c <__aeabi_dsub+0x564>
    77b2:	1887      	adds	r7, r0, r2
    77b4:	4297      	cmp	r7, r2
    77b6:	4192      	sbcs	r2, r2
    77b8:	1864      	adds	r4, r4, r1
    77ba:	4252      	negs	r2, r2
    77bc:	18a4      	adds	r4, r4, r2
    77be:	4666      	mov	r6, ip
    77c0:	e687      	b.n	74d2 <__aeabi_dsub+0x1ca>
    77c2:	4650      	mov	r0, sl
    77c4:	4320      	orrs	r0, r4
    77c6:	1e44      	subs	r4, r0, #1
    77c8:	41a0      	sbcs	r0, r4
    77ca:	2400      	movs	r4, #0
    77cc:	e760      	b.n	7690 <__aeabi_dsub+0x388>
    77ce:	4e57      	ldr	r6, [pc, #348]	; (792c <__aeabi_dsub+0x624>)
    77d0:	45b4      	cmp	ip, r6
    77d2:	d04e      	beq.n	7872 <__aeabi_dsub+0x56a>
    77d4:	2680      	movs	r6, #128	; 0x80
    77d6:	0436      	lsls	r6, r6, #16
    77d8:	425b      	negs	r3, r3
    77da:	4334      	orrs	r4, r6
    77dc:	2b38      	cmp	r3, #56	; 0x38
    77de:	dd00      	ble.n	77e2 <__aeabi_dsub+0x4da>
    77e0:	e07f      	b.n	78e2 <__aeabi_dsub+0x5da>
    77e2:	2b1f      	cmp	r3, #31
    77e4:	dd00      	ble.n	77e8 <__aeabi_dsub+0x4e0>
    77e6:	e08b      	b.n	7900 <__aeabi_dsub+0x5f8>
    77e8:	2620      	movs	r6, #32
    77ea:	0027      	movs	r7, r4
    77ec:	4650      	mov	r0, sl
    77ee:	1af6      	subs	r6, r6, r3
    77f0:	40b7      	lsls	r7, r6
    77f2:	40d8      	lsrs	r0, r3
    77f4:	4307      	orrs	r7, r0
    77f6:	4650      	mov	r0, sl
    77f8:	40b0      	lsls	r0, r6
    77fa:	1e46      	subs	r6, r0, #1
    77fc:	41b0      	sbcs	r0, r6
    77fe:	4307      	orrs	r7, r0
    7800:	40dc      	lsrs	r4, r3
    7802:	18bf      	adds	r7, r7, r2
    7804:	e7d6      	b.n	77b4 <__aeabi_dsub+0x4ac>
    7806:	000d      	movs	r5, r1
    7808:	4315      	orrs	r5, r2
    780a:	d100      	bne.n	780e <__aeabi_dsub+0x506>
    780c:	e602      	b.n	7414 <__aeabi_dsub+0x10c>
    780e:	4650      	mov	r0, sl
    7810:	1a80      	subs	r0, r0, r2
    7812:	4582      	cmp	sl, r0
    7814:	41bf      	sbcs	r7, r7
    7816:	1a65      	subs	r5, r4, r1
    7818:	427f      	negs	r7, r7
    781a:	1bed      	subs	r5, r5, r7
    781c:	4684      	mov	ip, r0
    781e:	0228      	lsls	r0, r5, #8
    7820:	d400      	bmi.n	7824 <__aeabi_dsub+0x51c>
    7822:	e68d      	b.n	7540 <__aeabi_dsub+0x238>
    7824:	4650      	mov	r0, sl
    7826:	1a17      	subs	r7, r2, r0
    7828:	42ba      	cmp	r2, r7
    782a:	4192      	sbcs	r2, r2
    782c:	1b0c      	subs	r4, r1, r4
    782e:	4252      	negs	r2, r2
    7830:	1aa4      	subs	r4, r4, r2
    7832:	4698      	mov	r8, r3
    7834:	e5ee      	b.n	7414 <__aeabi_dsub+0x10c>
    7836:	000d      	movs	r5, r1
    7838:	4315      	orrs	r5, r2
    783a:	d100      	bne.n	783e <__aeabi_dsub+0x536>
    783c:	e76b      	b.n	7716 <__aeabi_dsub+0x40e>
    783e:	4650      	mov	r0, sl
    7840:	0767      	lsls	r7, r4, #29
    7842:	08c0      	lsrs	r0, r0, #3
    7844:	4307      	orrs	r7, r0
    7846:	2080      	movs	r0, #128	; 0x80
    7848:	08e4      	lsrs	r4, r4, #3
    784a:	0300      	lsls	r0, r0, #12
    784c:	4204      	tst	r4, r0
    784e:	d007      	beq.n	7860 <__aeabi_dsub+0x558>
    7850:	08cd      	lsrs	r5, r1, #3
    7852:	4205      	tst	r5, r0
    7854:	d104      	bne.n	7860 <__aeabi_dsub+0x558>
    7856:	002c      	movs	r4, r5
    7858:	4698      	mov	r8, r3
    785a:	08d7      	lsrs	r7, r2, #3
    785c:	0749      	lsls	r1, r1, #29
    785e:	430f      	orrs	r7, r1
    7860:	0f7b      	lsrs	r3, r7, #29
    7862:	00e4      	lsls	r4, r4, #3
    7864:	431c      	orrs	r4, r3
    7866:	00ff      	lsls	r7, r7, #3
    7868:	4e30      	ldr	r6, [pc, #192]	; (792c <__aeabi_dsub+0x624>)
    786a:	e5d3      	b.n	7414 <__aeabi_dsub+0x10c>
    786c:	4e2f      	ldr	r6, [pc, #188]	; (792c <__aeabi_dsub+0x624>)
    786e:	45b4      	cmp	ip, r6
    7870:	d1b4      	bne.n	77dc <__aeabi_dsub+0x4d4>
    7872:	000c      	movs	r4, r1
    7874:	0017      	movs	r7, r2
    7876:	4666      	mov	r6, ip
    7878:	e5cc      	b.n	7414 <__aeabi_dsub+0x10c>
    787a:	2700      	movs	r7, #0
    787c:	2400      	movs	r4, #0
    787e:	e5e8      	b.n	7452 <__aeabi_dsub+0x14a>
    7880:	2b00      	cmp	r3, #0
    7882:	d039      	beq.n	78f8 <__aeabi_dsub+0x5f0>
    7884:	000b      	movs	r3, r1
    7886:	4313      	orrs	r3, r2
    7888:	d100      	bne.n	788c <__aeabi_dsub+0x584>
    788a:	e744      	b.n	7716 <__aeabi_dsub+0x40e>
    788c:	08c0      	lsrs	r0, r0, #3
    788e:	0767      	lsls	r7, r4, #29
    7890:	4307      	orrs	r7, r0
    7892:	2080      	movs	r0, #128	; 0x80
    7894:	08e4      	lsrs	r4, r4, #3
    7896:	0300      	lsls	r0, r0, #12
    7898:	4204      	tst	r4, r0
    789a:	d0e1      	beq.n	7860 <__aeabi_dsub+0x558>
    789c:	08cb      	lsrs	r3, r1, #3
    789e:	4203      	tst	r3, r0
    78a0:	d1de      	bne.n	7860 <__aeabi_dsub+0x558>
    78a2:	08d7      	lsrs	r7, r2, #3
    78a4:	0749      	lsls	r1, r1, #29
    78a6:	430f      	orrs	r7, r1
    78a8:	001c      	movs	r4, r3
    78aa:	e7d9      	b.n	7860 <__aeabi_dsub+0x558>
    78ac:	2100      	movs	r1, #0
    78ae:	e771      	b.n	7794 <__aeabi_dsub+0x48c>
    78b0:	2500      	movs	r5, #0
    78b2:	2700      	movs	r7, #0
    78b4:	e5e9      	b.n	748a <__aeabi_dsub+0x182>
    78b6:	002e      	movs	r6, r5
    78b8:	0027      	movs	r7, r4
    78ba:	3e20      	subs	r6, #32
    78bc:	40f7      	lsrs	r7, r6
    78be:	2d20      	cmp	r5, #32
    78c0:	d02f      	beq.n	7922 <__aeabi_dsub+0x61a>
    78c2:	2640      	movs	r6, #64	; 0x40
    78c4:	1b75      	subs	r5, r6, r5
    78c6:	40ac      	lsls	r4, r5
    78c8:	4650      	mov	r0, sl
    78ca:	4320      	orrs	r0, r4
    78cc:	1e44      	subs	r4, r0, #1
    78ce:	41a0      	sbcs	r0, r4
    78d0:	2400      	movs	r4, #0
    78d2:	4338      	orrs	r0, r7
    78d4:	e6dc      	b.n	7690 <__aeabi_dsub+0x388>
    78d6:	2480      	movs	r4, #128	; 0x80
    78d8:	2500      	movs	r5, #0
    78da:	0324      	lsls	r4, r4, #12
    78dc:	4e13      	ldr	r6, [pc, #76]	; (792c <__aeabi_dsub+0x624>)
    78de:	2700      	movs	r7, #0
    78e0:	e5d3      	b.n	748a <__aeabi_dsub+0x182>
    78e2:	4650      	mov	r0, sl
    78e4:	4320      	orrs	r0, r4
    78e6:	0007      	movs	r7, r0
    78e8:	1e78      	subs	r0, r7, #1
    78ea:	4187      	sbcs	r7, r0
    78ec:	2400      	movs	r4, #0
    78ee:	18bf      	adds	r7, r7, r2
    78f0:	e760      	b.n	77b4 <__aeabi_dsub+0x4ac>
    78f2:	000c      	movs	r4, r1
    78f4:	0017      	movs	r7, r2
    78f6:	e58d      	b.n	7414 <__aeabi_dsub+0x10c>
    78f8:	000c      	movs	r4, r1
    78fa:	0017      	movs	r7, r2
    78fc:	4e0b      	ldr	r6, [pc, #44]	; (792c <__aeabi_dsub+0x624>)
    78fe:	e589      	b.n	7414 <__aeabi_dsub+0x10c>
    7900:	001e      	movs	r6, r3
    7902:	0027      	movs	r7, r4
    7904:	3e20      	subs	r6, #32
    7906:	40f7      	lsrs	r7, r6
    7908:	2b20      	cmp	r3, #32
    790a:	d00c      	beq.n	7926 <__aeabi_dsub+0x61e>
    790c:	2640      	movs	r6, #64	; 0x40
    790e:	1af3      	subs	r3, r6, r3
    7910:	409c      	lsls	r4, r3
    7912:	4650      	mov	r0, sl
    7914:	4320      	orrs	r0, r4
    7916:	1e44      	subs	r4, r0, #1
    7918:	41a0      	sbcs	r0, r4
    791a:	4307      	orrs	r7, r0
    791c:	2400      	movs	r4, #0
    791e:	18bf      	adds	r7, r7, r2
    7920:	e748      	b.n	77b4 <__aeabi_dsub+0x4ac>
    7922:	2400      	movs	r4, #0
    7924:	e7d0      	b.n	78c8 <__aeabi_dsub+0x5c0>
    7926:	2400      	movs	r4, #0
    7928:	e7f3      	b.n	7912 <__aeabi_dsub+0x60a>
    792a:	46c0      	nop			; (mov r8, r8)
    792c:	000007ff 	.word	0x000007ff
    7930:	ff7fffff 	.word	0xff7fffff

00007934 <__aeabi_d2iz>:
    7934:	b530      	push	{r4, r5, lr}
    7936:	4d13      	ldr	r5, [pc, #76]	; (7984 <__aeabi_d2iz+0x50>)
    7938:	030a      	lsls	r2, r1, #12
    793a:	004b      	lsls	r3, r1, #1
    793c:	0b12      	lsrs	r2, r2, #12
    793e:	0d5b      	lsrs	r3, r3, #21
    7940:	0fc9      	lsrs	r1, r1, #31
    7942:	2400      	movs	r4, #0
    7944:	42ab      	cmp	r3, r5
    7946:	dd10      	ble.n	796a <__aeabi_d2iz+0x36>
    7948:	4c0f      	ldr	r4, [pc, #60]	; (7988 <__aeabi_d2iz+0x54>)
    794a:	42a3      	cmp	r3, r4
    794c:	dc0f      	bgt.n	796e <__aeabi_d2iz+0x3a>
    794e:	2480      	movs	r4, #128	; 0x80
    7950:	4d0e      	ldr	r5, [pc, #56]	; (798c <__aeabi_d2iz+0x58>)
    7952:	0364      	lsls	r4, r4, #13
    7954:	4322      	orrs	r2, r4
    7956:	1aed      	subs	r5, r5, r3
    7958:	2d1f      	cmp	r5, #31
    795a:	dd0b      	ble.n	7974 <__aeabi_d2iz+0x40>
    795c:	480c      	ldr	r0, [pc, #48]	; (7990 <__aeabi_d2iz+0x5c>)
    795e:	1ac3      	subs	r3, r0, r3
    7960:	40da      	lsrs	r2, r3
    7962:	4254      	negs	r4, r2
    7964:	2900      	cmp	r1, #0
    7966:	d100      	bne.n	796a <__aeabi_d2iz+0x36>
    7968:	0014      	movs	r4, r2
    796a:	0020      	movs	r0, r4
    796c:	bd30      	pop	{r4, r5, pc}
    796e:	4b09      	ldr	r3, [pc, #36]	; (7994 <__aeabi_d2iz+0x60>)
    7970:	18cc      	adds	r4, r1, r3
    7972:	e7fa      	b.n	796a <__aeabi_d2iz+0x36>
    7974:	4c08      	ldr	r4, [pc, #32]	; (7998 <__aeabi_d2iz+0x64>)
    7976:	40e8      	lsrs	r0, r5
    7978:	46a4      	mov	ip, r4
    797a:	4463      	add	r3, ip
    797c:	409a      	lsls	r2, r3
    797e:	4302      	orrs	r2, r0
    7980:	e7ef      	b.n	7962 <__aeabi_d2iz+0x2e>
    7982:	46c0      	nop			; (mov r8, r8)
    7984:	000003fe 	.word	0x000003fe
    7988:	0000041d 	.word	0x0000041d
    798c:	00000433 	.word	0x00000433
    7990:	00000413 	.word	0x00000413
    7994:	7fffffff 	.word	0x7fffffff
    7998:	fffffbed 	.word	0xfffffbed

0000799c <__aeabi_i2d>:
    799c:	b570      	push	{r4, r5, r6, lr}
    799e:	2800      	cmp	r0, #0
    79a0:	d030      	beq.n	7a04 <__aeabi_i2d+0x68>
    79a2:	17c3      	asrs	r3, r0, #31
    79a4:	18c4      	adds	r4, r0, r3
    79a6:	405c      	eors	r4, r3
    79a8:	0fc5      	lsrs	r5, r0, #31
    79aa:	0020      	movs	r0, r4
    79ac:	f000 f8ae 	bl	7b0c <__clzsi2>
    79b0:	4b17      	ldr	r3, [pc, #92]	; (7a10 <__aeabi_i2d+0x74>)
    79b2:	4a18      	ldr	r2, [pc, #96]	; (7a14 <__aeabi_i2d+0x78>)
    79b4:	1a1b      	subs	r3, r3, r0
    79b6:	1ad2      	subs	r2, r2, r3
    79b8:	2a1f      	cmp	r2, #31
    79ba:	dd18      	ble.n	79ee <__aeabi_i2d+0x52>
    79bc:	4a16      	ldr	r2, [pc, #88]	; (7a18 <__aeabi_i2d+0x7c>)
    79be:	1ad2      	subs	r2, r2, r3
    79c0:	4094      	lsls	r4, r2
    79c2:	2200      	movs	r2, #0
    79c4:	0324      	lsls	r4, r4, #12
    79c6:	055b      	lsls	r3, r3, #21
    79c8:	0b24      	lsrs	r4, r4, #12
    79ca:	0d5b      	lsrs	r3, r3, #21
    79cc:	2100      	movs	r1, #0
    79ce:	0010      	movs	r0, r2
    79d0:	0324      	lsls	r4, r4, #12
    79d2:	0d0a      	lsrs	r2, r1, #20
    79d4:	0b24      	lsrs	r4, r4, #12
    79d6:	0512      	lsls	r2, r2, #20
    79d8:	4322      	orrs	r2, r4
    79da:	4c10      	ldr	r4, [pc, #64]	; (7a1c <__aeabi_i2d+0x80>)
    79dc:	051b      	lsls	r3, r3, #20
    79de:	4022      	ands	r2, r4
    79e0:	4313      	orrs	r3, r2
    79e2:	005b      	lsls	r3, r3, #1
    79e4:	07ed      	lsls	r5, r5, #31
    79e6:	085b      	lsrs	r3, r3, #1
    79e8:	432b      	orrs	r3, r5
    79ea:	0019      	movs	r1, r3
    79ec:	bd70      	pop	{r4, r5, r6, pc}
    79ee:	0021      	movs	r1, r4
    79f0:	4091      	lsls	r1, r2
    79f2:	000a      	movs	r2, r1
    79f4:	210b      	movs	r1, #11
    79f6:	1a08      	subs	r0, r1, r0
    79f8:	40c4      	lsrs	r4, r0
    79fa:	055b      	lsls	r3, r3, #21
    79fc:	0324      	lsls	r4, r4, #12
    79fe:	0b24      	lsrs	r4, r4, #12
    7a00:	0d5b      	lsrs	r3, r3, #21
    7a02:	e7e3      	b.n	79cc <__aeabi_i2d+0x30>
    7a04:	2500      	movs	r5, #0
    7a06:	2300      	movs	r3, #0
    7a08:	2400      	movs	r4, #0
    7a0a:	2200      	movs	r2, #0
    7a0c:	e7de      	b.n	79cc <__aeabi_i2d+0x30>
    7a0e:	46c0      	nop			; (mov r8, r8)
    7a10:	0000041e 	.word	0x0000041e
    7a14:	00000433 	.word	0x00000433
    7a18:	00000413 	.word	0x00000413
    7a1c:	800fffff 	.word	0x800fffff

00007a20 <__aeabi_ui2d>:
    7a20:	b510      	push	{r4, lr}
    7a22:	1e04      	subs	r4, r0, #0
    7a24:	d028      	beq.n	7a78 <__aeabi_ui2d+0x58>
    7a26:	f000 f871 	bl	7b0c <__clzsi2>
    7a2a:	4b15      	ldr	r3, [pc, #84]	; (7a80 <__aeabi_ui2d+0x60>)
    7a2c:	4a15      	ldr	r2, [pc, #84]	; (7a84 <__aeabi_ui2d+0x64>)
    7a2e:	1a1b      	subs	r3, r3, r0
    7a30:	1ad2      	subs	r2, r2, r3
    7a32:	2a1f      	cmp	r2, #31
    7a34:	dd15      	ble.n	7a62 <__aeabi_ui2d+0x42>
    7a36:	4a14      	ldr	r2, [pc, #80]	; (7a88 <__aeabi_ui2d+0x68>)
    7a38:	1ad2      	subs	r2, r2, r3
    7a3a:	4094      	lsls	r4, r2
    7a3c:	2200      	movs	r2, #0
    7a3e:	0324      	lsls	r4, r4, #12
    7a40:	055b      	lsls	r3, r3, #21
    7a42:	0b24      	lsrs	r4, r4, #12
    7a44:	0d5b      	lsrs	r3, r3, #21
    7a46:	2100      	movs	r1, #0
    7a48:	0010      	movs	r0, r2
    7a4a:	0324      	lsls	r4, r4, #12
    7a4c:	0d0a      	lsrs	r2, r1, #20
    7a4e:	0b24      	lsrs	r4, r4, #12
    7a50:	0512      	lsls	r2, r2, #20
    7a52:	4322      	orrs	r2, r4
    7a54:	4c0d      	ldr	r4, [pc, #52]	; (7a8c <__aeabi_ui2d+0x6c>)
    7a56:	051b      	lsls	r3, r3, #20
    7a58:	4022      	ands	r2, r4
    7a5a:	4313      	orrs	r3, r2
    7a5c:	005b      	lsls	r3, r3, #1
    7a5e:	0859      	lsrs	r1, r3, #1
    7a60:	bd10      	pop	{r4, pc}
    7a62:	0021      	movs	r1, r4
    7a64:	4091      	lsls	r1, r2
    7a66:	000a      	movs	r2, r1
    7a68:	210b      	movs	r1, #11
    7a6a:	1a08      	subs	r0, r1, r0
    7a6c:	40c4      	lsrs	r4, r0
    7a6e:	055b      	lsls	r3, r3, #21
    7a70:	0324      	lsls	r4, r4, #12
    7a72:	0b24      	lsrs	r4, r4, #12
    7a74:	0d5b      	lsrs	r3, r3, #21
    7a76:	e7e6      	b.n	7a46 <__aeabi_ui2d+0x26>
    7a78:	2300      	movs	r3, #0
    7a7a:	2400      	movs	r4, #0
    7a7c:	2200      	movs	r2, #0
    7a7e:	e7e2      	b.n	7a46 <__aeabi_ui2d+0x26>
    7a80:	0000041e 	.word	0x0000041e
    7a84:	00000433 	.word	0x00000433
    7a88:	00000413 	.word	0x00000413
    7a8c:	800fffff 	.word	0x800fffff

00007a90 <__aeabi_cdrcmple>:
    7a90:	4684      	mov	ip, r0
    7a92:	1c10      	adds	r0, r2, #0
    7a94:	4662      	mov	r2, ip
    7a96:	468c      	mov	ip, r1
    7a98:	1c19      	adds	r1, r3, #0
    7a9a:	4663      	mov	r3, ip
    7a9c:	e000      	b.n	7aa0 <__aeabi_cdcmpeq>
    7a9e:	46c0      	nop			; (mov r8, r8)

00007aa0 <__aeabi_cdcmpeq>:
    7aa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    7aa2:	f000 f8ef 	bl	7c84 <__ledf2>
    7aa6:	2800      	cmp	r0, #0
    7aa8:	d401      	bmi.n	7aae <__aeabi_cdcmpeq+0xe>
    7aaa:	2100      	movs	r1, #0
    7aac:	42c8      	cmn	r0, r1
    7aae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00007ab0 <__aeabi_dcmpeq>:
    7ab0:	b510      	push	{r4, lr}
    7ab2:	f000 f849 	bl	7b48 <__eqdf2>
    7ab6:	4240      	negs	r0, r0
    7ab8:	3001      	adds	r0, #1
    7aba:	bd10      	pop	{r4, pc}

00007abc <__aeabi_dcmplt>:
    7abc:	b510      	push	{r4, lr}
    7abe:	f000 f8e1 	bl	7c84 <__ledf2>
    7ac2:	2800      	cmp	r0, #0
    7ac4:	db01      	blt.n	7aca <__aeabi_dcmplt+0xe>
    7ac6:	2000      	movs	r0, #0
    7ac8:	bd10      	pop	{r4, pc}
    7aca:	2001      	movs	r0, #1
    7acc:	bd10      	pop	{r4, pc}
    7ace:	46c0      	nop			; (mov r8, r8)

00007ad0 <__aeabi_dcmple>:
    7ad0:	b510      	push	{r4, lr}
    7ad2:	f000 f8d7 	bl	7c84 <__ledf2>
    7ad6:	2800      	cmp	r0, #0
    7ad8:	dd01      	ble.n	7ade <__aeabi_dcmple+0xe>
    7ada:	2000      	movs	r0, #0
    7adc:	bd10      	pop	{r4, pc}
    7ade:	2001      	movs	r0, #1
    7ae0:	bd10      	pop	{r4, pc}
    7ae2:	46c0      	nop			; (mov r8, r8)

00007ae4 <__aeabi_dcmpgt>:
    7ae4:	b510      	push	{r4, lr}
    7ae6:	f000 f869 	bl	7bbc <__gedf2>
    7aea:	2800      	cmp	r0, #0
    7aec:	dc01      	bgt.n	7af2 <__aeabi_dcmpgt+0xe>
    7aee:	2000      	movs	r0, #0
    7af0:	bd10      	pop	{r4, pc}
    7af2:	2001      	movs	r0, #1
    7af4:	bd10      	pop	{r4, pc}
    7af6:	46c0      	nop			; (mov r8, r8)

00007af8 <__aeabi_dcmpge>:
    7af8:	b510      	push	{r4, lr}
    7afa:	f000 f85f 	bl	7bbc <__gedf2>
    7afe:	2800      	cmp	r0, #0
    7b00:	da01      	bge.n	7b06 <__aeabi_dcmpge+0xe>
    7b02:	2000      	movs	r0, #0
    7b04:	bd10      	pop	{r4, pc}
    7b06:	2001      	movs	r0, #1
    7b08:	bd10      	pop	{r4, pc}
    7b0a:	46c0      	nop			; (mov r8, r8)

00007b0c <__clzsi2>:
    7b0c:	211c      	movs	r1, #28
    7b0e:	2301      	movs	r3, #1
    7b10:	041b      	lsls	r3, r3, #16
    7b12:	4298      	cmp	r0, r3
    7b14:	d301      	bcc.n	7b1a <__clzsi2+0xe>
    7b16:	0c00      	lsrs	r0, r0, #16
    7b18:	3910      	subs	r1, #16
    7b1a:	0a1b      	lsrs	r3, r3, #8
    7b1c:	4298      	cmp	r0, r3
    7b1e:	d301      	bcc.n	7b24 <__clzsi2+0x18>
    7b20:	0a00      	lsrs	r0, r0, #8
    7b22:	3908      	subs	r1, #8
    7b24:	091b      	lsrs	r3, r3, #4
    7b26:	4298      	cmp	r0, r3
    7b28:	d301      	bcc.n	7b2e <__clzsi2+0x22>
    7b2a:	0900      	lsrs	r0, r0, #4
    7b2c:	3904      	subs	r1, #4
    7b2e:	a202      	add	r2, pc, #8	; (adr r2, 7b38 <__clzsi2+0x2c>)
    7b30:	5c10      	ldrb	r0, [r2, r0]
    7b32:	1840      	adds	r0, r0, r1
    7b34:	4770      	bx	lr
    7b36:	46c0      	nop			; (mov r8, r8)
    7b38:	02020304 	.word	0x02020304
    7b3c:	01010101 	.word	0x01010101
	...

00007b48 <__eqdf2>:
    7b48:	b5f0      	push	{r4, r5, r6, r7, lr}
    7b4a:	464f      	mov	r7, r9
    7b4c:	4646      	mov	r6, r8
    7b4e:	46d6      	mov	lr, sl
    7b50:	005c      	lsls	r4, r3, #1
    7b52:	b5c0      	push	{r6, r7, lr}
    7b54:	031f      	lsls	r7, r3, #12
    7b56:	0fdb      	lsrs	r3, r3, #31
    7b58:	469a      	mov	sl, r3
    7b5a:	4b17      	ldr	r3, [pc, #92]	; (7bb8 <__eqdf2+0x70>)
    7b5c:	030e      	lsls	r6, r1, #12
    7b5e:	004d      	lsls	r5, r1, #1
    7b60:	4684      	mov	ip, r0
    7b62:	4680      	mov	r8, r0
    7b64:	0b36      	lsrs	r6, r6, #12
    7b66:	0d6d      	lsrs	r5, r5, #21
    7b68:	0fc9      	lsrs	r1, r1, #31
    7b6a:	4691      	mov	r9, r2
    7b6c:	0b3f      	lsrs	r7, r7, #12
    7b6e:	0d64      	lsrs	r4, r4, #21
    7b70:	2001      	movs	r0, #1
    7b72:	429d      	cmp	r5, r3
    7b74:	d008      	beq.n	7b88 <__eqdf2+0x40>
    7b76:	429c      	cmp	r4, r3
    7b78:	d001      	beq.n	7b7e <__eqdf2+0x36>
    7b7a:	42a5      	cmp	r5, r4
    7b7c:	d00b      	beq.n	7b96 <__eqdf2+0x4e>
    7b7e:	bc1c      	pop	{r2, r3, r4}
    7b80:	4690      	mov	r8, r2
    7b82:	4699      	mov	r9, r3
    7b84:	46a2      	mov	sl, r4
    7b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7b88:	4663      	mov	r3, ip
    7b8a:	4333      	orrs	r3, r6
    7b8c:	d1f7      	bne.n	7b7e <__eqdf2+0x36>
    7b8e:	42ac      	cmp	r4, r5
    7b90:	d1f5      	bne.n	7b7e <__eqdf2+0x36>
    7b92:	433a      	orrs	r2, r7
    7b94:	d1f3      	bne.n	7b7e <__eqdf2+0x36>
    7b96:	2001      	movs	r0, #1
    7b98:	42be      	cmp	r6, r7
    7b9a:	d1f0      	bne.n	7b7e <__eqdf2+0x36>
    7b9c:	45c8      	cmp	r8, r9
    7b9e:	d1ee      	bne.n	7b7e <__eqdf2+0x36>
    7ba0:	4551      	cmp	r1, sl
    7ba2:	d007      	beq.n	7bb4 <__eqdf2+0x6c>
    7ba4:	2d00      	cmp	r5, #0
    7ba6:	d1ea      	bne.n	7b7e <__eqdf2+0x36>
    7ba8:	4663      	mov	r3, ip
    7baa:	431e      	orrs	r6, r3
    7bac:	0030      	movs	r0, r6
    7bae:	1e46      	subs	r6, r0, #1
    7bb0:	41b0      	sbcs	r0, r6
    7bb2:	e7e4      	b.n	7b7e <__eqdf2+0x36>
    7bb4:	2000      	movs	r0, #0
    7bb6:	e7e2      	b.n	7b7e <__eqdf2+0x36>
    7bb8:	000007ff 	.word	0x000007ff

00007bbc <__gedf2>:
    7bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    7bbe:	4645      	mov	r5, r8
    7bc0:	46de      	mov	lr, fp
    7bc2:	4657      	mov	r7, sl
    7bc4:	464e      	mov	r6, r9
    7bc6:	b5e0      	push	{r5, r6, r7, lr}
    7bc8:	031f      	lsls	r7, r3, #12
    7bca:	0b3d      	lsrs	r5, r7, #12
    7bcc:	4f2c      	ldr	r7, [pc, #176]	; (7c80 <__gedf2+0xc4>)
    7bce:	030e      	lsls	r6, r1, #12
    7bd0:	004c      	lsls	r4, r1, #1
    7bd2:	46ab      	mov	fp, r5
    7bd4:	005d      	lsls	r5, r3, #1
    7bd6:	4684      	mov	ip, r0
    7bd8:	0b36      	lsrs	r6, r6, #12
    7bda:	0d64      	lsrs	r4, r4, #21
    7bdc:	0fc9      	lsrs	r1, r1, #31
    7bde:	4690      	mov	r8, r2
    7be0:	0d6d      	lsrs	r5, r5, #21
    7be2:	0fdb      	lsrs	r3, r3, #31
    7be4:	42bc      	cmp	r4, r7
    7be6:	d02a      	beq.n	7c3e <__gedf2+0x82>
    7be8:	4f25      	ldr	r7, [pc, #148]	; (7c80 <__gedf2+0xc4>)
    7bea:	42bd      	cmp	r5, r7
    7bec:	d02d      	beq.n	7c4a <__gedf2+0x8e>
    7bee:	2c00      	cmp	r4, #0
    7bf0:	d10f      	bne.n	7c12 <__gedf2+0x56>
    7bf2:	4330      	orrs	r0, r6
    7bf4:	0007      	movs	r7, r0
    7bf6:	4681      	mov	r9, r0
    7bf8:	4278      	negs	r0, r7
    7bfa:	4178      	adcs	r0, r7
    7bfc:	b2c0      	uxtb	r0, r0
    7bfe:	2d00      	cmp	r5, #0
    7c00:	d117      	bne.n	7c32 <__gedf2+0x76>
    7c02:	465f      	mov	r7, fp
    7c04:	433a      	orrs	r2, r7
    7c06:	d114      	bne.n	7c32 <__gedf2+0x76>
    7c08:	464b      	mov	r3, r9
    7c0a:	2000      	movs	r0, #0
    7c0c:	2b00      	cmp	r3, #0
    7c0e:	d00a      	beq.n	7c26 <__gedf2+0x6a>
    7c10:	e006      	b.n	7c20 <__gedf2+0x64>
    7c12:	2d00      	cmp	r5, #0
    7c14:	d102      	bne.n	7c1c <__gedf2+0x60>
    7c16:	4658      	mov	r0, fp
    7c18:	4302      	orrs	r2, r0
    7c1a:	d001      	beq.n	7c20 <__gedf2+0x64>
    7c1c:	4299      	cmp	r1, r3
    7c1e:	d018      	beq.n	7c52 <__gedf2+0x96>
    7c20:	4248      	negs	r0, r1
    7c22:	2101      	movs	r1, #1
    7c24:	4308      	orrs	r0, r1
    7c26:	bc3c      	pop	{r2, r3, r4, r5}
    7c28:	4690      	mov	r8, r2
    7c2a:	4699      	mov	r9, r3
    7c2c:	46a2      	mov	sl, r4
    7c2e:	46ab      	mov	fp, r5
    7c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7c32:	2800      	cmp	r0, #0
    7c34:	d0f2      	beq.n	7c1c <__gedf2+0x60>
    7c36:	2001      	movs	r0, #1
    7c38:	3b01      	subs	r3, #1
    7c3a:	4318      	orrs	r0, r3
    7c3c:	e7f3      	b.n	7c26 <__gedf2+0x6a>
    7c3e:	0037      	movs	r7, r6
    7c40:	4307      	orrs	r7, r0
    7c42:	d0d1      	beq.n	7be8 <__gedf2+0x2c>
    7c44:	2002      	movs	r0, #2
    7c46:	4240      	negs	r0, r0
    7c48:	e7ed      	b.n	7c26 <__gedf2+0x6a>
    7c4a:	465f      	mov	r7, fp
    7c4c:	4317      	orrs	r7, r2
    7c4e:	d0ce      	beq.n	7bee <__gedf2+0x32>
    7c50:	e7f8      	b.n	7c44 <__gedf2+0x88>
    7c52:	42ac      	cmp	r4, r5
    7c54:	dce4      	bgt.n	7c20 <__gedf2+0x64>
    7c56:	da03      	bge.n	7c60 <__gedf2+0xa4>
    7c58:	1e48      	subs	r0, r1, #1
    7c5a:	2101      	movs	r1, #1
    7c5c:	4308      	orrs	r0, r1
    7c5e:	e7e2      	b.n	7c26 <__gedf2+0x6a>
    7c60:	455e      	cmp	r6, fp
    7c62:	d8dd      	bhi.n	7c20 <__gedf2+0x64>
    7c64:	d006      	beq.n	7c74 <__gedf2+0xb8>
    7c66:	2000      	movs	r0, #0
    7c68:	455e      	cmp	r6, fp
    7c6a:	d2dc      	bcs.n	7c26 <__gedf2+0x6a>
    7c6c:	2301      	movs	r3, #1
    7c6e:	1e48      	subs	r0, r1, #1
    7c70:	4318      	orrs	r0, r3
    7c72:	e7d8      	b.n	7c26 <__gedf2+0x6a>
    7c74:	45c4      	cmp	ip, r8
    7c76:	d8d3      	bhi.n	7c20 <__gedf2+0x64>
    7c78:	2000      	movs	r0, #0
    7c7a:	45c4      	cmp	ip, r8
    7c7c:	d3f6      	bcc.n	7c6c <__gedf2+0xb0>
    7c7e:	e7d2      	b.n	7c26 <__gedf2+0x6a>
    7c80:	000007ff 	.word	0x000007ff

00007c84 <__ledf2>:
    7c84:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c86:	464e      	mov	r6, r9
    7c88:	4645      	mov	r5, r8
    7c8a:	46de      	mov	lr, fp
    7c8c:	4657      	mov	r7, sl
    7c8e:	005c      	lsls	r4, r3, #1
    7c90:	b5e0      	push	{r5, r6, r7, lr}
    7c92:	031f      	lsls	r7, r3, #12
    7c94:	0fdb      	lsrs	r3, r3, #31
    7c96:	4699      	mov	r9, r3
    7c98:	4b2a      	ldr	r3, [pc, #168]	; (7d44 <__ledf2+0xc0>)
    7c9a:	030e      	lsls	r6, r1, #12
    7c9c:	004d      	lsls	r5, r1, #1
    7c9e:	0fc9      	lsrs	r1, r1, #31
    7ca0:	4684      	mov	ip, r0
    7ca2:	0b36      	lsrs	r6, r6, #12
    7ca4:	0d6d      	lsrs	r5, r5, #21
    7ca6:	468b      	mov	fp, r1
    7ca8:	4690      	mov	r8, r2
    7caa:	0b3f      	lsrs	r7, r7, #12
    7cac:	0d64      	lsrs	r4, r4, #21
    7cae:	429d      	cmp	r5, r3
    7cb0:	d020      	beq.n	7cf4 <__ledf2+0x70>
    7cb2:	4b24      	ldr	r3, [pc, #144]	; (7d44 <__ledf2+0xc0>)
    7cb4:	429c      	cmp	r4, r3
    7cb6:	d022      	beq.n	7cfe <__ledf2+0x7a>
    7cb8:	2d00      	cmp	r5, #0
    7cba:	d112      	bne.n	7ce2 <__ledf2+0x5e>
    7cbc:	4330      	orrs	r0, r6
    7cbe:	4243      	negs	r3, r0
    7cc0:	4143      	adcs	r3, r0
    7cc2:	b2db      	uxtb	r3, r3
    7cc4:	2c00      	cmp	r4, #0
    7cc6:	d01f      	beq.n	7d08 <__ledf2+0x84>
    7cc8:	2b00      	cmp	r3, #0
    7cca:	d00c      	beq.n	7ce6 <__ledf2+0x62>
    7ccc:	464b      	mov	r3, r9
    7cce:	2001      	movs	r0, #1
    7cd0:	3b01      	subs	r3, #1
    7cd2:	4303      	orrs	r3, r0
    7cd4:	0018      	movs	r0, r3
    7cd6:	bc3c      	pop	{r2, r3, r4, r5}
    7cd8:	4690      	mov	r8, r2
    7cda:	4699      	mov	r9, r3
    7cdc:	46a2      	mov	sl, r4
    7cde:	46ab      	mov	fp, r5
    7ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7ce2:	2c00      	cmp	r4, #0
    7ce4:	d016      	beq.n	7d14 <__ledf2+0x90>
    7ce6:	45cb      	cmp	fp, r9
    7ce8:	d017      	beq.n	7d1a <__ledf2+0x96>
    7cea:	465b      	mov	r3, fp
    7cec:	4259      	negs	r1, r3
    7cee:	2301      	movs	r3, #1
    7cf0:	430b      	orrs	r3, r1
    7cf2:	e7ef      	b.n	7cd4 <__ledf2+0x50>
    7cf4:	0031      	movs	r1, r6
    7cf6:	2302      	movs	r3, #2
    7cf8:	4301      	orrs	r1, r0
    7cfa:	d1eb      	bne.n	7cd4 <__ledf2+0x50>
    7cfc:	e7d9      	b.n	7cb2 <__ledf2+0x2e>
    7cfe:	0039      	movs	r1, r7
    7d00:	2302      	movs	r3, #2
    7d02:	4311      	orrs	r1, r2
    7d04:	d1e6      	bne.n	7cd4 <__ledf2+0x50>
    7d06:	e7d7      	b.n	7cb8 <__ledf2+0x34>
    7d08:	433a      	orrs	r2, r7
    7d0a:	d1dd      	bne.n	7cc8 <__ledf2+0x44>
    7d0c:	2300      	movs	r3, #0
    7d0e:	2800      	cmp	r0, #0
    7d10:	d0e0      	beq.n	7cd4 <__ledf2+0x50>
    7d12:	e7ea      	b.n	7cea <__ledf2+0x66>
    7d14:	433a      	orrs	r2, r7
    7d16:	d1e6      	bne.n	7ce6 <__ledf2+0x62>
    7d18:	e7e7      	b.n	7cea <__ledf2+0x66>
    7d1a:	42a5      	cmp	r5, r4
    7d1c:	dce5      	bgt.n	7cea <__ledf2+0x66>
    7d1e:	db05      	blt.n	7d2c <__ledf2+0xa8>
    7d20:	42be      	cmp	r6, r7
    7d22:	d8e2      	bhi.n	7cea <__ledf2+0x66>
    7d24:	d007      	beq.n	7d36 <__ledf2+0xb2>
    7d26:	2300      	movs	r3, #0
    7d28:	42be      	cmp	r6, r7
    7d2a:	d2d3      	bcs.n	7cd4 <__ledf2+0x50>
    7d2c:	4659      	mov	r1, fp
    7d2e:	2301      	movs	r3, #1
    7d30:	3901      	subs	r1, #1
    7d32:	430b      	orrs	r3, r1
    7d34:	e7ce      	b.n	7cd4 <__ledf2+0x50>
    7d36:	45c4      	cmp	ip, r8
    7d38:	d8d7      	bhi.n	7cea <__ledf2+0x66>
    7d3a:	2300      	movs	r3, #0
    7d3c:	45c4      	cmp	ip, r8
    7d3e:	d3f5      	bcc.n	7d2c <__ledf2+0xa8>
    7d40:	e7c8      	b.n	7cd4 <__ledf2+0x50>
    7d42:	46c0      	nop			; (mov r8, r8)
    7d44:	000007ff 	.word	0x000007ff

00007d48 <__libc_init_array>:
    7d48:	b570      	push	{r4, r5, r6, lr}
    7d4a:	2600      	movs	r6, #0
    7d4c:	4d0c      	ldr	r5, [pc, #48]	; (7d80 <__libc_init_array+0x38>)
    7d4e:	4c0d      	ldr	r4, [pc, #52]	; (7d84 <__libc_init_array+0x3c>)
    7d50:	1b64      	subs	r4, r4, r5
    7d52:	10a4      	asrs	r4, r4, #2
    7d54:	42a6      	cmp	r6, r4
    7d56:	d109      	bne.n	7d6c <__libc_init_array+0x24>
    7d58:	2600      	movs	r6, #0
    7d5a:	f001 f9fb 	bl	9154 <_init>
    7d5e:	4d0a      	ldr	r5, [pc, #40]	; (7d88 <__libc_init_array+0x40>)
    7d60:	4c0a      	ldr	r4, [pc, #40]	; (7d8c <__libc_init_array+0x44>)
    7d62:	1b64      	subs	r4, r4, r5
    7d64:	10a4      	asrs	r4, r4, #2
    7d66:	42a6      	cmp	r6, r4
    7d68:	d105      	bne.n	7d76 <__libc_init_array+0x2e>
    7d6a:	bd70      	pop	{r4, r5, r6, pc}
    7d6c:	00b3      	lsls	r3, r6, #2
    7d6e:	58eb      	ldr	r3, [r5, r3]
    7d70:	4798      	blx	r3
    7d72:	3601      	adds	r6, #1
    7d74:	e7ee      	b.n	7d54 <__libc_init_array+0xc>
    7d76:	00b3      	lsls	r3, r6, #2
    7d78:	58eb      	ldr	r3, [r5, r3]
    7d7a:	4798      	blx	r3
    7d7c:	3601      	adds	r6, #1
    7d7e:	e7f2      	b.n	7d66 <__libc_init_array+0x1e>
    7d80:	00009160 	.word	0x00009160
    7d84:	00009160 	.word	0x00009160
    7d88:	00009160 	.word	0x00009160
    7d8c:	00009164 	.word	0x00009164

00007d90 <memcpy>:
    7d90:	2300      	movs	r3, #0
    7d92:	b510      	push	{r4, lr}
    7d94:	429a      	cmp	r2, r3
    7d96:	d100      	bne.n	7d9a <memcpy+0xa>
    7d98:	bd10      	pop	{r4, pc}
    7d9a:	5ccc      	ldrb	r4, [r1, r3]
    7d9c:	54c4      	strb	r4, [r0, r3]
    7d9e:	3301      	adds	r3, #1
    7da0:	e7f8      	b.n	7d94 <memcpy+0x4>

00007da2 <memset>:
    7da2:	0003      	movs	r3, r0
    7da4:	1882      	adds	r2, r0, r2
    7da6:	4293      	cmp	r3, r2
    7da8:	d100      	bne.n	7dac <memset+0xa>
    7daa:	4770      	bx	lr
    7dac:	7019      	strb	r1, [r3, #0]
    7dae:	3301      	adds	r3, #1
    7db0:	e7f9      	b.n	7da6 <memset+0x4>
	...

00007db4 <iprintf>:
    7db4:	b40f      	push	{r0, r1, r2, r3}
    7db6:	4b0b      	ldr	r3, [pc, #44]	; (7de4 <iprintf+0x30>)
    7db8:	b513      	push	{r0, r1, r4, lr}
    7dba:	681c      	ldr	r4, [r3, #0]
    7dbc:	2c00      	cmp	r4, #0
    7dbe:	d005      	beq.n	7dcc <iprintf+0x18>
    7dc0:	69a3      	ldr	r3, [r4, #24]
    7dc2:	2b00      	cmp	r3, #0
    7dc4:	d102      	bne.n	7dcc <iprintf+0x18>
    7dc6:	0020      	movs	r0, r4
    7dc8:	f000 faf2 	bl	83b0 <__sinit>
    7dcc:	ab05      	add	r3, sp, #20
    7dce:	9a04      	ldr	r2, [sp, #16]
    7dd0:	68a1      	ldr	r1, [r4, #8]
    7dd2:	0020      	movs	r0, r4
    7dd4:	9301      	str	r3, [sp, #4]
    7dd6:	f000 fcc7 	bl	8768 <_vfiprintf_r>
    7dda:	bc16      	pop	{r1, r2, r4}
    7ddc:	bc08      	pop	{r3}
    7dde:	b004      	add	sp, #16
    7de0:	4718      	bx	r3
    7de2:	46c0      	nop			; (mov r8, r8)
    7de4:	20000024 	.word	0x20000024

00007de8 <_puts_r>:
    7de8:	b570      	push	{r4, r5, r6, lr}
    7dea:	0005      	movs	r5, r0
    7dec:	000e      	movs	r6, r1
    7dee:	2800      	cmp	r0, #0
    7df0:	d004      	beq.n	7dfc <_puts_r+0x14>
    7df2:	6983      	ldr	r3, [r0, #24]
    7df4:	2b00      	cmp	r3, #0
    7df6:	d101      	bne.n	7dfc <_puts_r+0x14>
    7df8:	f000 fada 	bl	83b0 <__sinit>
    7dfc:	69ab      	ldr	r3, [r5, #24]
    7dfe:	68ac      	ldr	r4, [r5, #8]
    7e00:	2b00      	cmp	r3, #0
    7e02:	d102      	bne.n	7e0a <_puts_r+0x22>
    7e04:	0028      	movs	r0, r5
    7e06:	f000 fad3 	bl	83b0 <__sinit>
    7e0a:	4b24      	ldr	r3, [pc, #144]	; (7e9c <_puts_r+0xb4>)
    7e0c:	429c      	cmp	r4, r3
    7e0e:	d10f      	bne.n	7e30 <_puts_r+0x48>
    7e10:	686c      	ldr	r4, [r5, #4]
    7e12:	89a3      	ldrh	r3, [r4, #12]
    7e14:	071b      	lsls	r3, r3, #28
    7e16:	d502      	bpl.n	7e1e <_puts_r+0x36>
    7e18:	6923      	ldr	r3, [r4, #16]
    7e1a:	2b00      	cmp	r3, #0
    7e1c:	d120      	bne.n	7e60 <_puts_r+0x78>
    7e1e:	0021      	movs	r1, r4
    7e20:	0028      	movs	r0, r5
    7e22:	f000 f957 	bl	80d4 <__swsetup_r>
    7e26:	2800      	cmp	r0, #0
    7e28:	d01a      	beq.n	7e60 <_puts_r+0x78>
    7e2a:	2001      	movs	r0, #1
    7e2c:	4240      	negs	r0, r0
    7e2e:	bd70      	pop	{r4, r5, r6, pc}
    7e30:	4b1b      	ldr	r3, [pc, #108]	; (7ea0 <_puts_r+0xb8>)
    7e32:	429c      	cmp	r4, r3
    7e34:	d101      	bne.n	7e3a <_puts_r+0x52>
    7e36:	68ac      	ldr	r4, [r5, #8]
    7e38:	e7eb      	b.n	7e12 <_puts_r+0x2a>
    7e3a:	4b1a      	ldr	r3, [pc, #104]	; (7ea4 <_puts_r+0xbc>)
    7e3c:	429c      	cmp	r4, r3
    7e3e:	d1e8      	bne.n	7e12 <_puts_r+0x2a>
    7e40:	68ec      	ldr	r4, [r5, #12]
    7e42:	e7e6      	b.n	7e12 <_puts_r+0x2a>
    7e44:	3b01      	subs	r3, #1
    7e46:	3601      	adds	r6, #1
    7e48:	60a3      	str	r3, [r4, #8]
    7e4a:	2b00      	cmp	r3, #0
    7e4c:	da04      	bge.n	7e58 <_puts_r+0x70>
    7e4e:	69a2      	ldr	r2, [r4, #24]
    7e50:	4293      	cmp	r3, r2
    7e52:	db16      	blt.n	7e82 <_puts_r+0x9a>
    7e54:	290a      	cmp	r1, #10
    7e56:	d014      	beq.n	7e82 <_puts_r+0x9a>
    7e58:	6823      	ldr	r3, [r4, #0]
    7e5a:	1c5a      	adds	r2, r3, #1
    7e5c:	6022      	str	r2, [r4, #0]
    7e5e:	7019      	strb	r1, [r3, #0]
    7e60:	7831      	ldrb	r1, [r6, #0]
    7e62:	68a3      	ldr	r3, [r4, #8]
    7e64:	2900      	cmp	r1, #0
    7e66:	d1ed      	bne.n	7e44 <_puts_r+0x5c>
    7e68:	3b01      	subs	r3, #1
    7e6a:	60a3      	str	r3, [r4, #8]
    7e6c:	2b00      	cmp	r3, #0
    7e6e:	da0f      	bge.n	7e90 <_puts_r+0xa8>
    7e70:	0022      	movs	r2, r4
    7e72:	310a      	adds	r1, #10
    7e74:	0028      	movs	r0, r5
    7e76:	f000 f8d7 	bl	8028 <__swbuf_r>
    7e7a:	1c43      	adds	r3, r0, #1
    7e7c:	d0d5      	beq.n	7e2a <_puts_r+0x42>
    7e7e:	200a      	movs	r0, #10
    7e80:	e7d5      	b.n	7e2e <_puts_r+0x46>
    7e82:	0022      	movs	r2, r4
    7e84:	0028      	movs	r0, r5
    7e86:	f000 f8cf 	bl	8028 <__swbuf_r>
    7e8a:	1c43      	adds	r3, r0, #1
    7e8c:	d1e8      	bne.n	7e60 <_puts_r+0x78>
    7e8e:	e7cc      	b.n	7e2a <_puts_r+0x42>
    7e90:	200a      	movs	r0, #10
    7e92:	6823      	ldr	r3, [r4, #0]
    7e94:	1c5a      	adds	r2, r3, #1
    7e96:	6022      	str	r2, [r4, #0]
    7e98:	7018      	strb	r0, [r3, #0]
    7e9a:	e7c8      	b.n	7e2e <_puts_r+0x46>
    7e9c:	000090e0 	.word	0x000090e0
    7ea0:	00009100 	.word	0x00009100
    7ea4:	000090c0 	.word	0x000090c0

00007ea8 <puts>:
    7ea8:	b510      	push	{r4, lr}
    7eaa:	4b03      	ldr	r3, [pc, #12]	; (7eb8 <puts+0x10>)
    7eac:	0001      	movs	r1, r0
    7eae:	6818      	ldr	r0, [r3, #0]
    7eb0:	f7ff ff9a 	bl	7de8 <_puts_r>
    7eb4:	bd10      	pop	{r4, pc}
    7eb6:	46c0      	nop			; (mov r8, r8)
    7eb8:	20000024 	.word	0x20000024

00007ebc <setbuf>:
    7ebc:	424a      	negs	r2, r1
    7ebe:	414a      	adcs	r2, r1
    7ec0:	2380      	movs	r3, #128	; 0x80
    7ec2:	b510      	push	{r4, lr}
    7ec4:	0052      	lsls	r2, r2, #1
    7ec6:	00db      	lsls	r3, r3, #3
    7ec8:	f000 f802 	bl	7ed0 <setvbuf>
    7ecc:	bd10      	pop	{r4, pc}
	...

00007ed0 <setvbuf>:
    7ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7ed2:	001d      	movs	r5, r3
    7ed4:	4b4f      	ldr	r3, [pc, #316]	; (8014 <setvbuf+0x144>)
    7ed6:	b085      	sub	sp, #20
    7ed8:	681e      	ldr	r6, [r3, #0]
    7eda:	0004      	movs	r4, r0
    7edc:	000f      	movs	r7, r1
    7ede:	9200      	str	r2, [sp, #0]
    7ee0:	2e00      	cmp	r6, #0
    7ee2:	d005      	beq.n	7ef0 <setvbuf+0x20>
    7ee4:	69b3      	ldr	r3, [r6, #24]
    7ee6:	2b00      	cmp	r3, #0
    7ee8:	d102      	bne.n	7ef0 <setvbuf+0x20>
    7eea:	0030      	movs	r0, r6
    7eec:	f000 fa60 	bl	83b0 <__sinit>
    7ef0:	4b49      	ldr	r3, [pc, #292]	; (8018 <setvbuf+0x148>)
    7ef2:	429c      	cmp	r4, r3
    7ef4:	d150      	bne.n	7f98 <setvbuf+0xc8>
    7ef6:	6874      	ldr	r4, [r6, #4]
    7ef8:	9b00      	ldr	r3, [sp, #0]
    7efa:	2b02      	cmp	r3, #2
    7efc:	d005      	beq.n	7f0a <setvbuf+0x3a>
    7efe:	2b01      	cmp	r3, #1
    7f00:	d900      	bls.n	7f04 <setvbuf+0x34>
    7f02:	e084      	b.n	800e <setvbuf+0x13e>
    7f04:	2d00      	cmp	r5, #0
    7f06:	da00      	bge.n	7f0a <setvbuf+0x3a>
    7f08:	e081      	b.n	800e <setvbuf+0x13e>
    7f0a:	0021      	movs	r1, r4
    7f0c:	0030      	movs	r0, r6
    7f0e:	f000 f9e1 	bl	82d4 <_fflush_r>
    7f12:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7f14:	2900      	cmp	r1, #0
    7f16:	d008      	beq.n	7f2a <setvbuf+0x5a>
    7f18:	0023      	movs	r3, r4
    7f1a:	3344      	adds	r3, #68	; 0x44
    7f1c:	4299      	cmp	r1, r3
    7f1e:	d002      	beq.n	7f26 <setvbuf+0x56>
    7f20:	0030      	movs	r0, r6
    7f22:	f000 fb51 	bl	85c8 <_free_r>
    7f26:	2300      	movs	r3, #0
    7f28:	6363      	str	r3, [r4, #52]	; 0x34
    7f2a:	2300      	movs	r3, #0
    7f2c:	61a3      	str	r3, [r4, #24]
    7f2e:	6063      	str	r3, [r4, #4]
    7f30:	89a3      	ldrh	r3, [r4, #12]
    7f32:	061b      	lsls	r3, r3, #24
    7f34:	d503      	bpl.n	7f3e <setvbuf+0x6e>
    7f36:	6921      	ldr	r1, [r4, #16]
    7f38:	0030      	movs	r0, r6
    7f3a:	f000 fb45 	bl	85c8 <_free_r>
    7f3e:	89a3      	ldrh	r3, [r4, #12]
    7f40:	4a36      	ldr	r2, [pc, #216]	; (801c <setvbuf+0x14c>)
    7f42:	4013      	ands	r3, r2
    7f44:	81a3      	strh	r3, [r4, #12]
    7f46:	9b00      	ldr	r3, [sp, #0]
    7f48:	2b02      	cmp	r3, #2
    7f4a:	d05a      	beq.n	8002 <setvbuf+0x132>
    7f4c:	ab03      	add	r3, sp, #12
    7f4e:	aa02      	add	r2, sp, #8
    7f50:	0021      	movs	r1, r4
    7f52:	0030      	movs	r0, r6
    7f54:	f000 fac2 	bl	84dc <__swhatbuf_r>
    7f58:	89a3      	ldrh	r3, [r4, #12]
    7f5a:	4318      	orrs	r0, r3
    7f5c:	81a0      	strh	r0, [r4, #12]
    7f5e:	2d00      	cmp	r5, #0
    7f60:	d124      	bne.n	7fac <setvbuf+0xdc>
    7f62:	9d02      	ldr	r5, [sp, #8]
    7f64:	0028      	movs	r0, r5
    7f66:	f000 fb25 	bl	85b4 <malloc>
    7f6a:	9501      	str	r5, [sp, #4]
    7f6c:	1e07      	subs	r7, r0, #0
    7f6e:	d142      	bne.n	7ff6 <setvbuf+0x126>
    7f70:	9b02      	ldr	r3, [sp, #8]
    7f72:	9301      	str	r3, [sp, #4]
    7f74:	42ab      	cmp	r3, r5
    7f76:	d139      	bne.n	7fec <setvbuf+0x11c>
    7f78:	2001      	movs	r0, #1
    7f7a:	4240      	negs	r0, r0
    7f7c:	2302      	movs	r3, #2
    7f7e:	89a2      	ldrh	r2, [r4, #12]
    7f80:	4313      	orrs	r3, r2
    7f82:	81a3      	strh	r3, [r4, #12]
    7f84:	2300      	movs	r3, #0
    7f86:	60a3      	str	r3, [r4, #8]
    7f88:	0023      	movs	r3, r4
    7f8a:	3347      	adds	r3, #71	; 0x47
    7f8c:	6023      	str	r3, [r4, #0]
    7f8e:	6123      	str	r3, [r4, #16]
    7f90:	2301      	movs	r3, #1
    7f92:	6163      	str	r3, [r4, #20]
    7f94:	b005      	add	sp, #20
    7f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7f98:	4b21      	ldr	r3, [pc, #132]	; (8020 <setvbuf+0x150>)
    7f9a:	429c      	cmp	r4, r3
    7f9c:	d101      	bne.n	7fa2 <setvbuf+0xd2>
    7f9e:	68b4      	ldr	r4, [r6, #8]
    7fa0:	e7aa      	b.n	7ef8 <setvbuf+0x28>
    7fa2:	4b20      	ldr	r3, [pc, #128]	; (8024 <setvbuf+0x154>)
    7fa4:	429c      	cmp	r4, r3
    7fa6:	d1a7      	bne.n	7ef8 <setvbuf+0x28>
    7fa8:	68f4      	ldr	r4, [r6, #12]
    7faa:	e7a5      	b.n	7ef8 <setvbuf+0x28>
    7fac:	2f00      	cmp	r7, #0
    7fae:	d0d9      	beq.n	7f64 <setvbuf+0x94>
    7fb0:	69b3      	ldr	r3, [r6, #24]
    7fb2:	2b00      	cmp	r3, #0
    7fb4:	d102      	bne.n	7fbc <setvbuf+0xec>
    7fb6:	0030      	movs	r0, r6
    7fb8:	f000 f9fa 	bl	83b0 <__sinit>
    7fbc:	9b00      	ldr	r3, [sp, #0]
    7fbe:	2b01      	cmp	r3, #1
    7fc0:	d103      	bne.n	7fca <setvbuf+0xfa>
    7fc2:	89a3      	ldrh	r3, [r4, #12]
    7fc4:	9a00      	ldr	r2, [sp, #0]
    7fc6:	431a      	orrs	r2, r3
    7fc8:	81a2      	strh	r2, [r4, #12]
    7fca:	2008      	movs	r0, #8
    7fcc:	89a3      	ldrh	r3, [r4, #12]
    7fce:	6027      	str	r7, [r4, #0]
    7fd0:	6127      	str	r7, [r4, #16]
    7fd2:	6165      	str	r5, [r4, #20]
    7fd4:	4018      	ands	r0, r3
    7fd6:	d018      	beq.n	800a <setvbuf+0x13a>
    7fd8:	2001      	movs	r0, #1
    7fda:	4018      	ands	r0, r3
    7fdc:	2300      	movs	r3, #0
    7fde:	4298      	cmp	r0, r3
    7fe0:	d011      	beq.n	8006 <setvbuf+0x136>
    7fe2:	426d      	negs	r5, r5
    7fe4:	60a3      	str	r3, [r4, #8]
    7fe6:	61a5      	str	r5, [r4, #24]
    7fe8:	0018      	movs	r0, r3
    7fea:	e7d3      	b.n	7f94 <setvbuf+0xc4>
    7fec:	9801      	ldr	r0, [sp, #4]
    7fee:	f000 fae1 	bl	85b4 <malloc>
    7ff2:	1e07      	subs	r7, r0, #0
    7ff4:	d0c0      	beq.n	7f78 <setvbuf+0xa8>
    7ff6:	2380      	movs	r3, #128	; 0x80
    7ff8:	89a2      	ldrh	r2, [r4, #12]
    7ffa:	9d01      	ldr	r5, [sp, #4]
    7ffc:	4313      	orrs	r3, r2
    7ffe:	81a3      	strh	r3, [r4, #12]
    8000:	e7d6      	b.n	7fb0 <setvbuf+0xe0>
    8002:	2000      	movs	r0, #0
    8004:	e7ba      	b.n	7f7c <setvbuf+0xac>
    8006:	60a5      	str	r5, [r4, #8]
    8008:	e7c4      	b.n	7f94 <setvbuf+0xc4>
    800a:	60a0      	str	r0, [r4, #8]
    800c:	e7c2      	b.n	7f94 <setvbuf+0xc4>
    800e:	2001      	movs	r0, #1
    8010:	4240      	negs	r0, r0
    8012:	e7bf      	b.n	7f94 <setvbuf+0xc4>
    8014:	20000024 	.word	0x20000024
    8018:	000090e0 	.word	0x000090e0
    801c:	fffff35c 	.word	0xfffff35c
    8020:	00009100 	.word	0x00009100
    8024:	000090c0 	.word	0x000090c0

00008028 <__swbuf_r>:
    8028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    802a:	0005      	movs	r5, r0
    802c:	000e      	movs	r6, r1
    802e:	0014      	movs	r4, r2
    8030:	2800      	cmp	r0, #0
    8032:	d004      	beq.n	803e <__swbuf_r+0x16>
    8034:	6983      	ldr	r3, [r0, #24]
    8036:	2b00      	cmp	r3, #0
    8038:	d101      	bne.n	803e <__swbuf_r+0x16>
    803a:	f000 f9b9 	bl	83b0 <__sinit>
    803e:	4b22      	ldr	r3, [pc, #136]	; (80c8 <__swbuf_r+0xa0>)
    8040:	429c      	cmp	r4, r3
    8042:	d12d      	bne.n	80a0 <__swbuf_r+0x78>
    8044:	686c      	ldr	r4, [r5, #4]
    8046:	69a3      	ldr	r3, [r4, #24]
    8048:	60a3      	str	r3, [r4, #8]
    804a:	89a3      	ldrh	r3, [r4, #12]
    804c:	071b      	lsls	r3, r3, #28
    804e:	d531      	bpl.n	80b4 <__swbuf_r+0x8c>
    8050:	6923      	ldr	r3, [r4, #16]
    8052:	2b00      	cmp	r3, #0
    8054:	d02e      	beq.n	80b4 <__swbuf_r+0x8c>
    8056:	6823      	ldr	r3, [r4, #0]
    8058:	6922      	ldr	r2, [r4, #16]
    805a:	b2f7      	uxtb	r7, r6
    805c:	1a98      	subs	r0, r3, r2
    805e:	6963      	ldr	r3, [r4, #20]
    8060:	b2f6      	uxtb	r6, r6
    8062:	4298      	cmp	r0, r3
    8064:	db05      	blt.n	8072 <__swbuf_r+0x4a>
    8066:	0021      	movs	r1, r4
    8068:	0028      	movs	r0, r5
    806a:	f000 f933 	bl	82d4 <_fflush_r>
    806e:	2800      	cmp	r0, #0
    8070:	d126      	bne.n	80c0 <__swbuf_r+0x98>
    8072:	68a3      	ldr	r3, [r4, #8]
    8074:	3001      	adds	r0, #1
    8076:	3b01      	subs	r3, #1
    8078:	60a3      	str	r3, [r4, #8]
    807a:	6823      	ldr	r3, [r4, #0]
    807c:	1c5a      	adds	r2, r3, #1
    807e:	6022      	str	r2, [r4, #0]
    8080:	701f      	strb	r7, [r3, #0]
    8082:	6963      	ldr	r3, [r4, #20]
    8084:	4298      	cmp	r0, r3
    8086:	d004      	beq.n	8092 <__swbuf_r+0x6a>
    8088:	89a3      	ldrh	r3, [r4, #12]
    808a:	07db      	lsls	r3, r3, #31
    808c:	d51a      	bpl.n	80c4 <__swbuf_r+0x9c>
    808e:	2e0a      	cmp	r6, #10
    8090:	d118      	bne.n	80c4 <__swbuf_r+0x9c>
    8092:	0021      	movs	r1, r4
    8094:	0028      	movs	r0, r5
    8096:	f000 f91d 	bl	82d4 <_fflush_r>
    809a:	2800      	cmp	r0, #0
    809c:	d012      	beq.n	80c4 <__swbuf_r+0x9c>
    809e:	e00f      	b.n	80c0 <__swbuf_r+0x98>
    80a0:	4b0a      	ldr	r3, [pc, #40]	; (80cc <__swbuf_r+0xa4>)
    80a2:	429c      	cmp	r4, r3
    80a4:	d101      	bne.n	80aa <__swbuf_r+0x82>
    80a6:	68ac      	ldr	r4, [r5, #8]
    80a8:	e7cd      	b.n	8046 <__swbuf_r+0x1e>
    80aa:	4b09      	ldr	r3, [pc, #36]	; (80d0 <__swbuf_r+0xa8>)
    80ac:	429c      	cmp	r4, r3
    80ae:	d1ca      	bne.n	8046 <__swbuf_r+0x1e>
    80b0:	68ec      	ldr	r4, [r5, #12]
    80b2:	e7c8      	b.n	8046 <__swbuf_r+0x1e>
    80b4:	0021      	movs	r1, r4
    80b6:	0028      	movs	r0, r5
    80b8:	f000 f80c 	bl	80d4 <__swsetup_r>
    80bc:	2800      	cmp	r0, #0
    80be:	d0ca      	beq.n	8056 <__swbuf_r+0x2e>
    80c0:	2601      	movs	r6, #1
    80c2:	4276      	negs	r6, r6
    80c4:	0030      	movs	r0, r6
    80c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    80c8:	000090e0 	.word	0x000090e0
    80cc:	00009100 	.word	0x00009100
    80d0:	000090c0 	.word	0x000090c0

000080d4 <__swsetup_r>:
    80d4:	4b36      	ldr	r3, [pc, #216]	; (81b0 <__swsetup_r+0xdc>)
    80d6:	b570      	push	{r4, r5, r6, lr}
    80d8:	681d      	ldr	r5, [r3, #0]
    80da:	0006      	movs	r6, r0
    80dc:	000c      	movs	r4, r1
    80de:	2d00      	cmp	r5, #0
    80e0:	d005      	beq.n	80ee <__swsetup_r+0x1a>
    80e2:	69ab      	ldr	r3, [r5, #24]
    80e4:	2b00      	cmp	r3, #0
    80e6:	d102      	bne.n	80ee <__swsetup_r+0x1a>
    80e8:	0028      	movs	r0, r5
    80ea:	f000 f961 	bl	83b0 <__sinit>
    80ee:	4b31      	ldr	r3, [pc, #196]	; (81b4 <__swsetup_r+0xe0>)
    80f0:	429c      	cmp	r4, r3
    80f2:	d10f      	bne.n	8114 <__swsetup_r+0x40>
    80f4:	686c      	ldr	r4, [r5, #4]
    80f6:	230c      	movs	r3, #12
    80f8:	5ee2      	ldrsh	r2, [r4, r3]
    80fa:	b293      	uxth	r3, r2
    80fc:	0719      	lsls	r1, r3, #28
    80fe:	d42d      	bmi.n	815c <__swsetup_r+0x88>
    8100:	06d9      	lsls	r1, r3, #27
    8102:	d411      	bmi.n	8128 <__swsetup_r+0x54>
    8104:	2309      	movs	r3, #9
    8106:	2001      	movs	r0, #1
    8108:	6033      	str	r3, [r6, #0]
    810a:	3337      	adds	r3, #55	; 0x37
    810c:	4313      	orrs	r3, r2
    810e:	81a3      	strh	r3, [r4, #12]
    8110:	4240      	negs	r0, r0
    8112:	bd70      	pop	{r4, r5, r6, pc}
    8114:	4b28      	ldr	r3, [pc, #160]	; (81b8 <__swsetup_r+0xe4>)
    8116:	429c      	cmp	r4, r3
    8118:	d101      	bne.n	811e <__swsetup_r+0x4a>
    811a:	68ac      	ldr	r4, [r5, #8]
    811c:	e7eb      	b.n	80f6 <__swsetup_r+0x22>
    811e:	4b27      	ldr	r3, [pc, #156]	; (81bc <__swsetup_r+0xe8>)
    8120:	429c      	cmp	r4, r3
    8122:	d1e8      	bne.n	80f6 <__swsetup_r+0x22>
    8124:	68ec      	ldr	r4, [r5, #12]
    8126:	e7e6      	b.n	80f6 <__swsetup_r+0x22>
    8128:	075b      	lsls	r3, r3, #29
    812a:	d513      	bpl.n	8154 <__swsetup_r+0x80>
    812c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    812e:	2900      	cmp	r1, #0
    8130:	d008      	beq.n	8144 <__swsetup_r+0x70>
    8132:	0023      	movs	r3, r4
    8134:	3344      	adds	r3, #68	; 0x44
    8136:	4299      	cmp	r1, r3
    8138:	d002      	beq.n	8140 <__swsetup_r+0x6c>
    813a:	0030      	movs	r0, r6
    813c:	f000 fa44 	bl	85c8 <_free_r>
    8140:	2300      	movs	r3, #0
    8142:	6363      	str	r3, [r4, #52]	; 0x34
    8144:	2224      	movs	r2, #36	; 0x24
    8146:	89a3      	ldrh	r3, [r4, #12]
    8148:	4393      	bics	r3, r2
    814a:	81a3      	strh	r3, [r4, #12]
    814c:	2300      	movs	r3, #0
    814e:	6063      	str	r3, [r4, #4]
    8150:	6923      	ldr	r3, [r4, #16]
    8152:	6023      	str	r3, [r4, #0]
    8154:	2308      	movs	r3, #8
    8156:	89a2      	ldrh	r2, [r4, #12]
    8158:	4313      	orrs	r3, r2
    815a:	81a3      	strh	r3, [r4, #12]
    815c:	6923      	ldr	r3, [r4, #16]
    815e:	2b00      	cmp	r3, #0
    8160:	d10b      	bne.n	817a <__swsetup_r+0xa6>
    8162:	21a0      	movs	r1, #160	; 0xa0
    8164:	2280      	movs	r2, #128	; 0x80
    8166:	89a3      	ldrh	r3, [r4, #12]
    8168:	0089      	lsls	r1, r1, #2
    816a:	0092      	lsls	r2, r2, #2
    816c:	400b      	ands	r3, r1
    816e:	4293      	cmp	r3, r2
    8170:	d003      	beq.n	817a <__swsetup_r+0xa6>
    8172:	0021      	movs	r1, r4
    8174:	0030      	movs	r0, r6
    8176:	f000 f9d9 	bl	852c <__smakebuf_r>
    817a:	2301      	movs	r3, #1
    817c:	89a2      	ldrh	r2, [r4, #12]
    817e:	4013      	ands	r3, r2
    8180:	d011      	beq.n	81a6 <__swsetup_r+0xd2>
    8182:	2300      	movs	r3, #0
    8184:	60a3      	str	r3, [r4, #8]
    8186:	6963      	ldr	r3, [r4, #20]
    8188:	425b      	negs	r3, r3
    818a:	61a3      	str	r3, [r4, #24]
    818c:	2000      	movs	r0, #0
    818e:	6923      	ldr	r3, [r4, #16]
    8190:	4283      	cmp	r3, r0
    8192:	d1be      	bne.n	8112 <__swsetup_r+0x3e>
    8194:	230c      	movs	r3, #12
    8196:	5ee2      	ldrsh	r2, [r4, r3]
    8198:	0613      	lsls	r3, r2, #24
    819a:	d5ba      	bpl.n	8112 <__swsetup_r+0x3e>
    819c:	2340      	movs	r3, #64	; 0x40
    819e:	4313      	orrs	r3, r2
    81a0:	81a3      	strh	r3, [r4, #12]
    81a2:	3801      	subs	r0, #1
    81a4:	e7b5      	b.n	8112 <__swsetup_r+0x3e>
    81a6:	0792      	lsls	r2, r2, #30
    81a8:	d400      	bmi.n	81ac <__swsetup_r+0xd8>
    81aa:	6963      	ldr	r3, [r4, #20]
    81ac:	60a3      	str	r3, [r4, #8]
    81ae:	e7ed      	b.n	818c <__swsetup_r+0xb8>
    81b0:	20000024 	.word	0x20000024
    81b4:	000090e0 	.word	0x000090e0
    81b8:	00009100 	.word	0x00009100
    81bc:	000090c0 	.word	0x000090c0

000081c0 <__sflush_r>:
    81c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    81c2:	898a      	ldrh	r2, [r1, #12]
    81c4:	0005      	movs	r5, r0
    81c6:	000c      	movs	r4, r1
    81c8:	0713      	lsls	r3, r2, #28
    81ca:	d460      	bmi.n	828e <__sflush_r+0xce>
    81cc:	684b      	ldr	r3, [r1, #4]
    81ce:	2b00      	cmp	r3, #0
    81d0:	dc04      	bgt.n	81dc <__sflush_r+0x1c>
    81d2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    81d4:	2b00      	cmp	r3, #0
    81d6:	dc01      	bgt.n	81dc <__sflush_r+0x1c>
    81d8:	2000      	movs	r0, #0
    81da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    81dc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    81de:	2f00      	cmp	r7, #0
    81e0:	d0fa      	beq.n	81d8 <__sflush_r+0x18>
    81e2:	2300      	movs	r3, #0
    81e4:	682e      	ldr	r6, [r5, #0]
    81e6:	602b      	str	r3, [r5, #0]
    81e8:	2380      	movs	r3, #128	; 0x80
    81ea:	015b      	lsls	r3, r3, #5
    81ec:	401a      	ands	r2, r3
    81ee:	d034      	beq.n	825a <__sflush_r+0x9a>
    81f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
    81f2:	89a3      	ldrh	r3, [r4, #12]
    81f4:	075b      	lsls	r3, r3, #29
    81f6:	d506      	bpl.n	8206 <__sflush_r+0x46>
    81f8:	6863      	ldr	r3, [r4, #4]
    81fa:	1ac0      	subs	r0, r0, r3
    81fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    81fe:	2b00      	cmp	r3, #0
    8200:	d001      	beq.n	8206 <__sflush_r+0x46>
    8202:	6c23      	ldr	r3, [r4, #64]	; 0x40
    8204:	1ac0      	subs	r0, r0, r3
    8206:	0002      	movs	r2, r0
    8208:	6a21      	ldr	r1, [r4, #32]
    820a:	2300      	movs	r3, #0
    820c:	0028      	movs	r0, r5
    820e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    8210:	47b8      	blx	r7
    8212:	89a1      	ldrh	r1, [r4, #12]
    8214:	1c43      	adds	r3, r0, #1
    8216:	d106      	bne.n	8226 <__sflush_r+0x66>
    8218:	682b      	ldr	r3, [r5, #0]
    821a:	2b1d      	cmp	r3, #29
    821c:	d831      	bhi.n	8282 <__sflush_r+0xc2>
    821e:	4a2c      	ldr	r2, [pc, #176]	; (82d0 <__sflush_r+0x110>)
    8220:	40da      	lsrs	r2, r3
    8222:	07d3      	lsls	r3, r2, #31
    8224:	d52d      	bpl.n	8282 <__sflush_r+0xc2>
    8226:	2300      	movs	r3, #0
    8228:	6063      	str	r3, [r4, #4]
    822a:	6923      	ldr	r3, [r4, #16]
    822c:	6023      	str	r3, [r4, #0]
    822e:	04cb      	lsls	r3, r1, #19
    8230:	d505      	bpl.n	823e <__sflush_r+0x7e>
    8232:	1c43      	adds	r3, r0, #1
    8234:	d102      	bne.n	823c <__sflush_r+0x7c>
    8236:	682b      	ldr	r3, [r5, #0]
    8238:	2b00      	cmp	r3, #0
    823a:	d100      	bne.n	823e <__sflush_r+0x7e>
    823c:	6560      	str	r0, [r4, #84]	; 0x54
    823e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    8240:	602e      	str	r6, [r5, #0]
    8242:	2900      	cmp	r1, #0
    8244:	d0c8      	beq.n	81d8 <__sflush_r+0x18>
    8246:	0023      	movs	r3, r4
    8248:	3344      	adds	r3, #68	; 0x44
    824a:	4299      	cmp	r1, r3
    824c:	d002      	beq.n	8254 <__sflush_r+0x94>
    824e:	0028      	movs	r0, r5
    8250:	f000 f9ba 	bl	85c8 <_free_r>
    8254:	2000      	movs	r0, #0
    8256:	6360      	str	r0, [r4, #52]	; 0x34
    8258:	e7bf      	b.n	81da <__sflush_r+0x1a>
    825a:	2301      	movs	r3, #1
    825c:	6a21      	ldr	r1, [r4, #32]
    825e:	0028      	movs	r0, r5
    8260:	47b8      	blx	r7
    8262:	1c43      	adds	r3, r0, #1
    8264:	d1c5      	bne.n	81f2 <__sflush_r+0x32>
    8266:	682b      	ldr	r3, [r5, #0]
    8268:	2b00      	cmp	r3, #0
    826a:	d0c2      	beq.n	81f2 <__sflush_r+0x32>
    826c:	2b1d      	cmp	r3, #29
    826e:	d001      	beq.n	8274 <__sflush_r+0xb4>
    8270:	2b16      	cmp	r3, #22
    8272:	d101      	bne.n	8278 <__sflush_r+0xb8>
    8274:	602e      	str	r6, [r5, #0]
    8276:	e7af      	b.n	81d8 <__sflush_r+0x18>
    8278:	2340      	movs	r3, #64	; 0x40
    827a:	89a2      	ldrh	r2, [r4, #12]
    827c:	4313      	orrs	r3, r2
    827e:	81a3      	strh	r3, [r4, #12]
    8280:	e7ab      	b.n	81da <__sflush_r+0x1a>
    8282:	2340      	movs	r3, #64	; 0x40
    8284:	430b      	orrs	r3, r1
    8286:	2001      	movs	r0, #1
    8288:	81a3      	strh	r3, [r4, #12]
    828a:	4240      	negs	r0, r0
    828c:	e7a5      	b.n	81da <__sflush_r+0x1a>
    828e:	690f      	ldr	r7, [r1, #16]
    8290:	2f00      	cmp	r7, #0
    8292:	d0a1      	beq.n	81d8 <__sflush_r+0x18>
    8294:	680b      	ldr	r3, [r1, #0]
    8296:	600f      	str	r7, [r1, #0]
    8298:	1bdb      	subs	r3, r3, r7
    829a:	9301      	str	r3, [sp, #4]
    829c:	2300      	movs	r3, #0
    829e:	0792      	lsls	r2, r2, #30
    82a0:	d100      	bne.n	82a4 <__sflush_r+0xe4>
    82a2:	694b      	ldr	r3, [r1, #20]
    82a4:	60a3      	str	r3, [r4, #8]
    82a6:	9b01      	ldr	r3, [sp, #4]
    82a8:	2b00      	cmp	r3, #0
    82aa:	dc00      	bgt.n	82ae <__sflush_r+0xee>
    82ac:	e794      	b.n	81d8 <__sflush_r+0x18>
    82ae:	9b01      	ldr	r3, [sp, #4]
    82b0:	003a      	movs	r2, r7
    82b2:	6a21      	ldr	r1, [r4, #32]
    82b4:	0028      	movs	r0, r5
    82b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    82b8:	47b0      	blx	r6
    82ba:	2800      	cmp	r0, #0
    82bc:	dc03      	bgt.n	82c6 <__sflush_r+0x106>
    82be:	2340      	movs	r3, #64	; 0x40
    82c0:	89a2      	ldrh	r2, [r4, #12]
    82c2:	4313      	orrs	r3, r2
    82c4:	e7df      	b.n	8286 <__sflush_r+0xc6>
    82c6:	9b01      	ldr	r3, [sp, #4]
    82c8:	183f      	adds	r7, r7, r0
    82ca:	1a1b      	subs	r3, r3, r0
    82cc:	9301      	str	r3, [sp, #4]
    82ce:	e7ea      	b.n	82a6 <__sflush_r+0xe6>
    82d0:	20400001 	.word	0x20400001

000082d4 <_fflush_r>:
    82d4:	690b      	ldr	r3, [r1, #16]
    82d6:	b570      	push	{r4, r5, r6, lr}
    82d8:	0005      	movs	r5, r0
    82da:	000c      	movs	r4, r1
    82dc:	2b00      	cmp	r3, #0
    82de:	d101      	bne.n	82e4 <_fflush_r+0x10>
    82e0:	2000      	movs	r0, #0
    82e2:	bd70      	pop	{r4, r5, r6, pc}
    82e4:	2800      	cmp	r0, #0
    82e6:	d004      	beq.n	82f2 <_fflush_r+0x1e>
    82e8:	6983      	ldr	r3, [r0, #24]
    82ea:	2b00      	cmp	r3, #0
    82ec:	d101      	bne.n	82f2 <_fflush_r+0x1e>
    82ee:	f000 f85f 	bl	83b0 <__sinit>
    82f2:	4b0b      	ldr	r3, [pc, #44]	; (8320 <_fflush_r+0x4c>)
    82f4:	429c      	cmp	r4, r3
    82f6:	d109      	bne.n	830c <_fflush_r+0x38>
    82f8:	686c      	ldr	r4, [r5, #4]
    82fa:	220c      	movs	r2, #12
    82fc:	5ea3      	ldrsh	r3, [r4, r2]
    82fe:	2b00      	cmp	r3, #0
    8300:	d0ee      	beq.n	82e0 <_fflush_r+0xc>
    8302:	0021      	movs	r1, r4
    8304:	0028      	movs	r0, r5
    8306:	f7ff ff5b 	bl	81c0 <__sflush_r>
    830a:	e7ea      	b.n	82e2 <_fflush_r+0xe>
    830c:	4b05      	ldr	r3, [pc, #20]	; (8324 <_fflush_r+0x50>)
    830e:	429c      	cmp	r4, r3
    8310:	d101      	bne.n	8316 <_fflush_r+0x42>
    8312:	68ac      	ldr	r4, [r5, #8]
    8314:	e7f1      	b.n	82fa <_fflush_r+0x26>
    8316:	4b04      	ldr	r3, [pc, #16]	; (8328 <_fflush_r+0x54>)
    8318:	429c      	cmp	r4, r3
    831a:	d1ee      	bne.n	82fa <_fflush_r+0x26>
    831c:	68ec      	ldr	r4, [r5, #12]
    831e:	e7ec      	b.n	82fa <_fflush_r+0x26>
    8320:	000090e0 	.word	0x000090e0
    8324:	00009100 	.word	0x00009100
    8328:	000090c0 	.word	0x000090c0

0000832c <_cleanup_r>:
    832c:	b510      	push	{r4, lr}
    832e:	4902      	ldr	r1, [pc, #8]	; (8338 <_cleanup_r+0xc>)
    8330:	f000 f8b2 	bl	8498 <_fwalk_reent>
    8334:	bd10      	pop	{r4, pc}
    8336:	46c0      	nop			; (mov r8, r8)
    8338:	000082d5 	.word	0x000082d5

0000833c <std.isra.0>:
    833c:	2300      	movs	r3, #0
    833e:	b510      	push	{r4, lr}
    8340:	0004      	movs	r4, r0
    8342:	6003      	str	r3, [r0, #0]
    8344:	6043      	str	r3, [r0, #4]
    8346:	6083      	str	r3, [r0, #8]
    8348:	8181      	strh	r1, [r0, #12]
    834a:	6643      	str	r3, [r0, #100]	; 0x64
    834c:	81c2      	strh	r2, [r0, #14]
    834e:	6103      	str	r3, [r0, #16]
    8350:	6143      	str	r3, [r0, #20]
    8352:	6183      	str	r3, [r0, #24]
    8354:	0019      	movs	r1, r3
    8356:	2208      	movs	r2, #8
    8358:	305c      	adds	r0, #92	; 0x5c
    835a:	f7ff fd22 	bl	7da2 <memset>
    835e:	4b05      	ldr	r3, [pc, #20]	; (8374 <std.isra.0+0x38>)
    8360:	6224      	str	r4, [r4, #32]
    8362:	6263      	str	r3, [r4, #36]	; 0x24
    8364:	4b04      	ldr	r3, [pc, #16]	; (8378 <std.isra.0+0x3c>)
    8366:	62a3      	str	r3, [r4, #40]	; 0x28
    8368:	4b04      	ldr	r3, [pc, #16]	; (837c <std.isra.0+0x40>)
    836a:	62e3      	str	r3, [r4, #44]	; 0x2c
    836c:	4b04      	ldr	r3, [pc, #16]	; (8380 <std.isra.0+0x44>)
    836e:	6323      	str	r3, [r4, #48]	; 0x30
    8370:	bd10      	pop	{r4, pc}
    8372:	46c0      	nop			; (mov r8, r8)
    8374:	00008cd5 	.word	0x00008cd5
    8378:	00008cfd 	.word	0x00008cfd
    837c:	00008d35 	.word	0x00008d35
    8380:	00008d61 	.word	0x00008d61

00008384 <__sfmoreglue>:
    8384:	b570      	push	{r4, r5, r6, lr}
    8386:	2568      	movs	r5, #104	; 0x68
    8388:	1e4a      	subs	r2, r1, #1
    838a:	4355      	muls	r5, r2
    838c:	000e      	movs	r6, r1
    838e:	0029      	movs	r1, r5
    8390:	3174      	adds	r1, #116	; 0x74
    8392:	f000 f963 	bl	865c <_malloc_r>
    8396:	1e04      	subs	r4, r0, #0
    8398:	d008      	beq.n	83ac <__sfmoreglue+0x28>
    839a:	2100      	movs	r1, #0
    839c:	002a      	movs	r2, r5
    839e:	6001      	str	r1, [r0, #0]
    83a0:	6046      	str	r6, [r0, #4]
    83a2:	300c      	adds	r0, #12
    83a4:	60a0      	str	r0, [r4, #8]
    83a6:	3268      	adds	r2, #104	; 0x68
    83a8:	f7ff fcfb 	bl	7da2 <memset>
    83ac:	0020      	movs	r0, r4
    83ae:	bd70      	pop	{r4, r5, r6, pc}

000083b0 <__sinit>:
    83b0:	6983      	ldr	r3, [r0, #24]
    83b2:	b513      	push	{r0, r1, r4, lr}
    83b4:	0004      	movs	r4, r0
    83b6:	2b00      	cmp	r3, #0
    83b8:	d128      	bne.n	840c <__sinit+0x5c>
    83ba:	6483      	str	r3, [r0, #72]	; 0x48
    83bc:	64c3      	str	r3, [r0, #76]	; 0x4c
    83be:	6503      	str	r3, [r0, #80]	; 0x50
    83c0:	4b13      	ldr	r3, [pc, #76]	; (8410 <__sinit+0x60>)
    83c2:	4a14      	ldr	r2, [pc, #80]	; (8414 <__sinit+0x64>)
    83c4:	681b      	ldr	r3, [r3, #0]
    83c6:	6282      	str	r2, [r0, #40]	; 0x28
    83c8:	9301      	str	r3, [sp, #4]
    83ca:	4298      	cmp	r0, r3
    83cc:	d101      	bne.n	83d2 <__sinit+0x22>
    83ce:	2301      	movs	r3, #1
    83d0:	6183      	str	r3, [r0, #24]
    83d2:	0020      	movs	r0, r4
    83d4:	f000 f820 	bl	8418 <__sfp>
    83d8:	6060      	str	r0, [r4, #4]
    83da:	0020      	movs	r0, r4
    83dc:	f000 f81c 	bl	8418 <__sfp>
    83e0:	60a0      	str	r0, [r4, #8]
    83e2:	0020      	movs	r0, r4
    83e4:	f000 f818 	bl	8418 <__sfp>
    83e8:	2200      	movs	r2, #0
    83ea:	60e0      	str	r0, [r4, #12]
    83ec:	2104      	movs	r1, #4
    83ee:	6860      	ldr	r0, [r4, #4]
    83f0:	f7ff ffa4 	bl	833c <std.isra.0>
    83f4:	2201      	movs	r2, #1
    83f6:	2109      	movs	r1, #9
    83f8:	68a0      	ldr	r0, [r4, #8]
    83fa:	f7ff ff9f 	bl	833c <std.isra.0>
    83fe:	2202      	movs	r2, #2
    8400:	2112      	movs	r1, #18
    8402:	68e0      	ldr	r0, [r4, #12]
    8404:	f7ff ff9a 	bl	833c <std.isra.0>
    8408:	2301      	movs	r3, #1
    840a:	61a3      	str	r3, [r4, #24]
    840c:	bd13      	pop	{r0, r1, r4, pc}
    840e:	46c0      	nop			; (mov r8, r8)
    8410:	000090bc 	.word	0x000090bc
    8414:	0000832d 	.word	0x0000832d

00008418 <__sfp>:
    8418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    841a:	4b1e      	ldr	r3, [pc, #120]	; (8494 <__sfp+0x7c>)
    841c:	0007      	movs	r7, r0
    841e:	681e      	ldr	r6, [r3, #0]
    8420:	69b3      	ldr	r3, [r6, #24]
    8422:	2b00      	cmp	r3, #0
    8424:	d102      	bne.n	842c <__sfp+0x14>
    8426:	0030      	movs	r0, r6
    8428:	f7ff ffc2 	bl	83b0 <__sinit>
    842c:	3648      	adds	r6, #72	; 0x48
    842e:	68b4      	ldr	r4, [r6, #8]
    8430:	6873      	ldr	r3, [r6, #4]
    8432:	3b01      	subs	r3, #1
    8434:	d504      	bpl.n	8440 <__sfp+0x28>
    8436:	6833      	ldr	r3, [r6, #0]
    8438:	2b00      	cmp	r3, #0
    843a:	d007      	beq.n	844c <__sfp+0x34>
    843c:	6836      	ldr	r6, [r6, #0]
    843e:	e7f6      	b.n	842e <__sfp+0x16>
    8440:	220c      	movs	r2, #12
    8442:	5ea5      	ldrsh	r5, [r4, r2]
    8444:	2d00      	cmp	r5, #0
    8446:	d00d      	beq.n	8464 <__sfp+0x4c>
    8448:	3468      	adds	r4, #104	; 0x68
    844a:	e7f2      	b.n	8432 <__sfp+0x1a>
    844c:	2104      	movs	r1, #4
    844e:	0038      	movs	r0, r7
    8450:	f7ff ff98 	bl	8384 <__sfmoreglue>
    8454:	6030      	str	r0, [r6, #0]
    8456:	2800      	cmp	r0, #0
    8458:	d1f0      	bne.n	843c <__sfp+0x24>
    845a:	230c      	movs	r3, #12
    845c:	0004      	movs	r4, r0
    845e:	603b      	str	r3, [r7, #0]
    8460:	0020      	movs	r0, r4
    8462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8464:	2301      	movs	r3, #1
    8466:	0020      	movs	r0, r4
    8468:	425b      	negs	r3, r3
    846a:	81e3      	strh	r3, [r4, #14]
    846c:	3302      	adds	r3, #2
    846e:	81a3      	strh	r3, [r4, #12]
    8470:	6665      	str	r5, [r4, #100]	; 0x64
    8472:	6025      	str	r5, [r4, #0]
    8474:	60a5      	str	r5, [r4, #8]
    8476:	6065      	str	r5, [r4, #4]
    8478:	6125      	str	r5, [r4, #16]
    847a:	6165      	str	r5, [r4, #20]
    847c:	61a5      	str	r5, [r4, #24]
    847e:	2208      	movs	r2, #8
    8480:	0029      	movs	r1, r5
    8482:	305c      	adds	r0, #92	; 0x5c
    8484:	f7ff fc8d 	bl	7da2 <memset>
    8488:	6365      	str	r5, [r4, #52]	; 0x34
    848a:	63a5      	str	r5, [r4, #56]	; 0x38
    848c:	64a5      	str	r5, [r4, #72]	; 0x48
    848e:	64e5      	str	r5, [r4, #76]	; 0x4c
    8490:	e7e6      	b.n	8460 <__sfp+0x48>
    8492:	46c0      	nop			; (mov r8, r8)
    8494:	000090bc 	.word	0x000090bc

00008498 <_fwalk_reent>:
    8498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    849a:	0004      	movs	r4, r0
    849c:	0007      	movs	r7, r0
    849e:	2600      	movs	r6, #0
    84a0:	9101      	str	r1, [sp, #4]
    84a2:	3448      	adds	r4, #72	; 0x48
    84a4:	2c00      	cmp	r4, #0
    84a6:	d101      	bne.n	84ac <_fwalk_reent+0x14>
    84a8:	0030      	movs	r0, r6
    84aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    84ac:	6863      	ldr	r3, [r4, #4]
    84ae:	68a5      	ldr	r5, [r4, #8]
    84b0:	9300      	str	r3, [sp, #0]
    84b2:	9b00      	ldr	r3, [sp, #0]
    84b4:	3b01      	subs	r3, #1
    84b6:	9300      	str	r3, [sp, #0]
    84b8:	d501      	bpl.n	84be <_fwalk_reent+0x26>
    84ba:	6824      	ldr	r4, [r4, #0]
    84bc:	e7f2      	b.n	84a4 <_fwalk_reent+0xc>
    84be:	89ab      	ldrh	r3, [r5, #12]
    84c0:	2b01      	cmp	r3, #1
    84c2:	d908      	bls.n	84d6 <_fwalk_reent+0x3e>
    84c4:	220e      	movs	r2, #14
    84c6:	5eab      	ldrsh	r3, [r5, r2]
    84c8:	3301      	adds	r3, #1
    84ca:	d004      	beq.n	84d6 <_fwalk_reent+0x3e>
    84cc:	0029      	movs	r1, r5
    84ce:	0038      	movs	r0, r7
    84d0:	9b01      	ldr	r3, [sp, #4]
    84d2:	4798      	blx	r3
    84d4:	4306      	orrs	r6, r0
    84d6:	3568      	adds	r5, #104	; 0x68
    84d8:	e7eb      	b.n	84b2 <_fwalk_reent+0x1a>
	...

000084dc <__swhatbuf_r>:
    84dc:	b570      	push	{r4, r5, r6, lr}
    84de:	000e      	movs	r6, r1
    84e0:	001d      	movs	r5, r3
    84e2:	230e      	movs	r3, #14
    84e4:	5ec9      	ldrsh	r1, [r1, r3]
    84e6:	b090      	sub	sp, #64	; 0x40
    84e8:	0014      	movs	r4, r2
    84ea:	2900      	cmp	r1, #0
    84ec:	da07      	bge.n	84fe <__swhatbuf_r+0x22>
    84ee:	2300      	movs	r3, #0
    84f0:	602b      	str	r3, [r5, #0]
    84f2:	89b3      	ldrh	r3, [r6, #12]
    84f4:	061b      	lsls	r3, r3, #24
    84f6:	d411      	bmi.n	851c <__swhatbuf_r+0x40>
    84f8:	2380      	movs	r3, #128	; 0x80
    84fa:	00db      	lsls	r3, r3, #3
    84fc:	e00f      	b.n	851e <__swhatbuf_r+0x42>
    84fe:	aa01      	add	r2, sp, #4
    8500:	f000 fc5a 	bl	8db8 <_fstat_r>
    8504:	2800      	cmp	r0, #0
    8506:	dbf2      	blt.n	84ee <__swhatbuf_r+0x12>
    8508:	22f0      	movs	r2, #240	; 0xf0
    850a:	9b02      	ldr	r3, [sp, #8]
    850c:	0212      	lsls	r2, r2, #8
    850e:	4013      	ands	r3, r2
    8510:	4a05      	ldr	r2, [pc, #20]	; (8528 <__swhatbuf_r+0x4c>)
    8512:	189b      	adds	r3, r3, r2
    8514:	425a      	negs	r2, r3
    8516:	4153      	adcs	r3, r2
    8518:	602b      	str	r3, [r5, #0]
    851a:	e7ed      	b.n	84f8 <__swhatbuf_r+0x1c>
    851c:	2340      	movs	r3, #64	; 0x40
    851e:	2000      	movs	r0, #0
    8520:	6023      	str	r3, [r4, #0]
    8522:	b010      	add	sp, #64	; 0x40
    8524:	bd70      	pop	{r4, r5, r6, pc}
    8526:	46c0      	nop			; (mov r8, r8)
    8528:	ffffe000 	.word	0xffffe000

0000852c <__smakebuf_r>:
    852c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    852e:	2602      	movs	r6, #2
    8530:	898b      	ldrh	r3, [r1, #12]
    8532:	0005      	movs	r5, r0
    8534:	000c      	movs	r4, r1
    8536:	4233      	tst	r3, r6
    8538:	d006      	beq.n	8548 <__smakebuf_r+0x1c>
    853a:	0023      	movs	r3, r4
    853c:	3347      	adds	r3, #71	; 0x47
    853e:	6023      	str	r3, [r4, #0]
    8540:	6123      	str	r3, [r4, #16]
    8542:	2301      	movs	r3, #1
    8544:	6163      	str	r3, [r4, #20]
    8546:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    8548:	ab01      	add	r3, sp, #4
    854a:	466a      	mov	r2, sp
    854c:	f7ff ffc6 	bl	84dc <__swhatbuf_r>
    8550:	9900      	ldr	r1, [sp, #0]
    8552:	0007      	movs	r7, r0
    8554:	0028      	movs	r0, r5
    8556:	f000 f881 	bl	865c <_malloc_r>
    855a:	2800      	cmp	r0, #0
    855c:	d108      	bne.n	8570 <__smakebuf_r+0x44>
    855e:	220c      	movs	r2, #12
    8560:	5ea3      	ldrsh	r3, [r4, r2]
    8562:	059a      	lsls	r2, r3, #22
    8564:	d4ef      	bmi.n	8546 <__smakebuf_r+0x1a>
    8566:	2203      	movs	r2, #3
    8568:	4393      	bics	r3, r2
    856a:	431e      	orrs	r6, r3
    856c:	81a6      	strh	r6, [r4, #12]
    856e:	e7e4      	b.n	853a <__smakebuf_r+0xe>
    8570:	4b0f      	ldr	r3, [pc, #60]	; (85b0 <__smakebuf_r+0x84>)
    8572:	62ab      	str	r3, [r5, #40]	; 0x28
    8574:	2380      	movs	r3, #128	; 0x80
    8576:	89a2      	ldrh	r2, [r4, #12]
    8578:	6020      	str	r0, [r4, #0]
    857a:	4313      	orrs	r3, r2
    857c:	81a3      	strh	r3, [r4, #12]
    857e:	9b00      	ldr	r3, [sp, #0]
    8580:	6120      	str	r0, [r4, #16]
    8582:	6163      	str	r3, [r4, #20]
    8584:	9b01      	ldr	r3, [sp, #4]
    8586:	2b00      	cmp	r3, #0
    8588:	d00d      	beq.n	85a6 <__smakebuf_r+0x7a>
    858a:	230e      	movs	r3, #14
    858c:	5ee1      	ldrsh	r1, [r4, r3]
    858e:	0028      	movs	r0, r5
    8590:	f000 fc24 	bl	8ddc <_isatty_r>
    8594:	2800      	cmp	r0, #0
    8596:	d006      	beq.n	85a6 <__smakebuf_r+0x7a>
    8598:	2203      	movs	r2, #3
    859a:	89a3      	ldrh	r3, [r4, #12]
    859c:	4393      	bics	r3, r2
    859e:	001a      	movs	r2, r3
    85a0:	2301      	movs	r3, #1
    85a2:	4313      	orrs	r3, r2
    85a4:	81a3      	strh	r3, [r4, #12]
    85a6:	89a0      	ldrh	r0, [r4, #12]
    85a8:	4338      	orrs	r0, r7
    85aa:	81a0      	strh	r0, [r4, #12]
    85ac:	e7cb      	b.n	8546 <__smakebuf_r+0x1a>
    85ae:	46c0      	nop			; (mov r8, r8)
    85b0:	0000832d 	.word	0x0000832d

000085b4 <malloc>:
    85b4:	b510      	push	{r4, lr}
    85b6:	4b03      	ldr	r3, [pc, #12]	; (85c4 <malloc+0x10>)
    85b8:	0001      	movs	r1, r0
    85ba:	6818      	ldr	r0, [r3, #0]
    85bc:	f000 f84e 	bl	865c <_malloc_r>
    85c0:	bd10      	pop	{r4, pc}
    85c2:	46c0      	nop			; (mov r8, r8)
    85c4:	20000024 	.word	0x20000024

000085c8 <_free_r>:
    85c8:	b570      	push	{r4, r5, r6, lr}
    85ca:	0005      	movs	r5, r0
    85cc:	2900      	cmp	r1, #0
    85ce:	d010      	beq.n	85f2 <_free_r+0x2a>
    85d0:	1f0c      	subs	r4, r1, #4
    85d2:	6823      	ldr	r3, [r4, #0]
    85d4:	2b00      	cmp	r3, #0
    85d6:	da00      	bge.n	85da <_free_r+0x12>
    85d8:	18e4      	adds	r4, r4, r3
    85da:	0028      	movs	r0, r5
    85dc:	f000 fc2f 	bl	8e3e <__malloc_lock>
    85e0:	4a1d      	ldr	r2, [pc, #116]	; (8658 <_free_r+0x90>)
    85e2:	6813      	ldr	r3, [r2, #0]
    85e4:	2b00      	cmp	r3, #0
    85e6:	d105      	bne.n	85f4 <_free_r+0x2c>
    85e8:	6063      	str	r3, [r4, #4]
    85ea:	6014      	str	r4, [r2, #0]
    85ec:	0028      	movs	r0, r5
    85ee:	f000 fc27 	bl	8e40 <__malloc_unlock>
    85f2:	bd70      	pop	{r4, r5, r6, pc}
    85f4:	42a3      	cmp	r3, r4
    85f6:	d909      	bls.n	860c <_free_r+0x44>
    85f8:	6821      	ldr	r1, [r4, #0]
    85fa:	1860      	adds	r0, r4, r1
    85fc:	4283      	cmp	r3, r0
    85fe:	d1f3      	bne.n	85e8 <_free_r+0x20>
    8600:	6818      	ldr	r0, [r3, #0]
    8602:	685b      	ldr	r3, [r3, #4]
    8604:	1841      	adds	r1, r0, r1
    8606:	6021      	str	r1, [r4, #0]
    8608:	e7ee      	b.n	85e8 <_free_r+0x20>
    860a:	0013      	movs	r3, r2
    860c:	685a      	ldr	r2, [r3, #4]
    860e:	2a00      	cmp	r2, #0
    8610:	d001      	beq.n	8616 <_free_r+0x4e>
    8612:	42a2      	cmp	r2, r4
    8614:	d9f9      	bls.n	860a <_free_r+0x42>
    8616:	6819      	ldr	r1, [r3, #0]
    8618:	1858      	adds	r0, r3, r1
    861a:	42a0      	cmp	r0, r4
    861c:	d10b      	bne.n	8636 <_free_r+0x6e>
    861e:	6820      	ldr	r0, [r4, #0]
    8620:	1809      	adds	r1, r1, r0
    8622:	1858      	adds	r0, r3, r1
    8624:	6019      	str	r1, [r3, #0]
    8626:	4282      	cmp	r2, r0
    8628:	d1e0      	bne.n	85ec <_free_r+0x24>
    862a:	6810      	ldr	r0, [r2, #0]
    862c:	6852      	ldr	r2, [r2, #4]
    862e:	1841      	adds	r1, r0, r1
    8630:	6019      	str	r1, [r3, #0]
    8632:	605a      	str	r2, [r3, #4]
    8634:	e7da      	b.n	85ec <_free_r+0x24>
    8636:	42a0      	cmp	r0, r4
    8638:	d902      	bls.n	8640 <_free_r+0x78>
    863a:	230c      	movs	r3, #12
    863c:	602b      	str	r3, [r5, #0]
    863e:	e7d5      	b.n	85ec <_free_r+0x24>
    8640:	6821      	ldr	r1, [r4, #0]
    8642:	1860      	adds	r0, r4, r1
    8644:	4282      	cmp	r2, r0
    8646:	d103      	bne.n	8650 <_free_r+0x88>
    8648:	6810      	ldr	r0, [r2, #0]
    864a:	6852      	ldr	r2, [r2, #4]
    864c:	1841      	adds	r1, r0, r1
    864e:	6021      	str	r1, [r4, #0]
    8650:	6062      	str	r2, [r4, #4]
    8652:	605c      	str	r4, [r3, #4]
    8654:	e7ca      	b.n	85ec <_free_r+0x24>
    8656:	46c0      	nop			; (mov r8, r8)
    8658:	20000278 	.word	0x20000278

0000865c <_malloc_r>:
    865c:	2303      	movs	r3, #3
    865e:	b570      	push	{r4, r5, r6, lr}
    8660:	1ccd      	adds	r5, r1, #3
    8662:	439d      	bics	r5, r3
    8664:	3508      	adds	r5, #8
    8666:	0006      	movs	r6, r0
    8668:	2d0c      	cmp	r5, #12
    866a:	d21e      	bcs.n	86aa <_malloc_r+0x4e>
    866c:	250c      	movs	r5, #12
    866e:	42a9      	cmp	r1, r5
    8670:	d81d      	bhi.n	86ae <_malloc_r+0x52>
    8672:	0030      	movs	r0, r6
    8674:	f000 fbe3 	bl	8e3e <__malloc_lock>
    8678:	4a25      	ldr	r2, [pc, #148]	; (8710 <_malloc_r+0xb4>)
    867a:	6814      	ldr	r4, [r2, #0]
    867c:	0021      	movs	r1, r4
    867e:	2900      	cmp	r1, #0
    8680:	d119      	bne.n	86b6 <_malloc_r+0x5a>
    8682:	4c24      	ldr	r4, [pc, #144]	; (8714 <_malloc_r+0xb8>)
    8684:	6823      	ldr	r3, [r4, #0]
    8686:	2b00      	cmp	r3, #0
    8688:	d103      	bne.n	8692 <_malloc_r+0x36>
    868a:	0030      	movs	r0, r6
    868c:	f000 fb10 	bl	8cb0 <_sbrk_r>
    8690:	6020      	str	r0, [r4, #0]
    8692:	0029      	movs	r1, r5
    8694:	0030      	movs	r0, r6
    8696:	f000 fb0b 	bl	8cb0 <_sbrk_r>
    869a:	1c43      	adds	r3, r0, #1
    869c:	d12c      	bne.n	86f8 <_malloc_r+0x9c>
    869e:	230c      	movs	r3, #12
    86a0:	0030      	movs	r0, r6
    86a2:	6033      	str	r3, [r6, #0]
    86a4:	f000 fbcc 	bl	8e40 <__malloc_unlock>
    86a8:	e003      	b.n	86b2 <_malloc_r+0x56>
    86aa:	2d00      	cmp	r5, #0
    86ac:	dadf      	bge.n	866e <_malloc_r+0x12>
    86ae:	230c      	movs	r3, #12
    86b0:	6033      	str	r3, [r6, #0]
    86b2:	2000      	movs	r0, #0
    86b4:	bd70      	pop	{r4, r5, r6, pc}
    86b6:	680b      	ldr	r3, [r1, #0]
    86b8:	1b5b      	subs	r3, r3, r5
    86ba:	d41a      	bmi.n	86f2 <_malloc_r+0x96>
    86bc:	2b0b      	cmp	r3, #11
    86be:	d903      	bls.n	86c8 <_malloc_r+0x6c>
    86c0:	600b      	str	r3, [r1, #0]
    86c2:	18cc      	adds	r4, r1, r3
    86c4:	6025      	str	r5, [r4, #0]
    86c6:	e003      	b.n	86d0 <_malloc_r+0x74>
    86c8:	428c      	cmp	r4, r1
    86ca:	d10e      	bne.n	86ea <_malloc_r+0x8e>
    86cc:	6863      	ldr	r3, [r4, #4]
    86ce:	6013      	str	r3, [r2, #0]
    86d0:	0030      	movs	r0, r6
    86d2:	f000 fbb5 	bl	8e40 <__malloc_unlock>
    86d6:	0020      	movs	r0, r4
    86d8:	2207      	movs	r2, #7
    86da:	300b      	adds	r0, #11
    86dc:	1d23      	adds	r3, r4, #4
    86de:	4390      	bics	r0, r2
    86e0:	1ac3      	subs	r3, r0, r3
    86e2:	d0e7      	beq.n	86b4 <_malloc_r+0x58>
    86e4:	425a      	negs	r2, r3
    86e6:	50e2      	str	r2, [r4, r3]
    86e8:	e7e4      	b.n	86b4 <_malloc_r+0x58>
    86ea:	684b      	ldr	r3, [r1, #4]
    86ec:	6063      	str	r3, [r4, #4]
    86ee:	000c      	movs	r4, r1
    86f0:	e7ee      	b.n	86d0 <_malloc_r+0x74>
    86f2:	000c      	movs	r4, r1
    86f4:	6849      	ldr	r1, [r1, #4]
    86f6:	e7c2      	b.n	867e <_malloc_r+0x22>
    86f8:	2303      	movs	r3, #3
    86fa:	1cc4      	adds	r4, r0, #3
    86fc:	439c      	bics	r4, r3
    86fe:	42a0      	cmp	r0, r4
    8700:	d0e0      	beq.n	86c4 <_malloc_r+0x68>
    8702:	1a21      	subs	r1, r4, r0
    8704:	0030      	movs	r0, r6
    8706:	f000 fad3 	bl	8cb0 <_sbrk_r>
    870a:	1c43      	adds	r3, r0, #1
    870c:	d1da      	bne.n	86c4 <_malloc_r+0x68>
    870e:	e7c6      	b.n	869e <_malloc_r+0x42>
    8710:	20000278 	.word	0x20000278
    8714:	2000027c 	.word	0x2000027c

00008718 <__sfputc_r>:
    8718:	6893      	ldr	r3, [r2, #8]
    871a:	b510      	push	{r4, lr}
    871c:	3b01      	subs	r3, #1
    871e:	6093      	str	r3, [r2, #8]
    8720:	2b00      	cmp	r3, #0
    8722:	da05      	bge.n	8730 <__sfputc_r+0x18>
    8724:	6994      	ldr	r4, [r2, #24]
    8726:	42a3      	cmp	r3, r4
    8728:	db08      	blt.n	873c <__sfputc_r+0x24>
    872a:	b2cb      	uxtb	r3, r1
    872c:	2b0a      	cmp	r3, #10
    872e:	d005      	beq.n	873c <__sfputc_r+0x24>
    8730:	6813      	ldr	r3, [r2, #0]
    8732:	1c58      	adds	r0, r3, #1
    8734:	6010      	str	r0, [r2, #0]
    8736:	7019      	strb	r1, [r3, #0]
    8738:	b2c8      	uxtb	r0, r1
    873a:	bd10      	pop	{r4, pc}
    873c:	f7ff fc74 	bl	8028 <__swbuf_r>
    8740:	e7fb      	b.n	873a <__sfputc_r+0x22>

00008742 <__sfputs_r>:
    8742:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8744:	0006      	movs	r6, r0
    8746:	000f      	movs	r7, r1
    8748:	0014      	movs	r4, r2
    874a:	18d5      	adds	r5, r2, r3
    874c:	42ac      	cmp	r4, r5
    874e:	d101      	bne.n	8754 <__sfputs_r+0x12>
    8750:	2000      	movs	r0, #0
    8752:	e007      	b.n	8764 <__sfputs_r+0x22>
    8754:	7821      	ldrb	r1, [r4, #0]
    8756:	003a      	movs	r2, r7
    8758:	0030      	movs	r0, r6
    875a:	f7ff ffdd 	bl	8718 <__sfputc_r>
    875e:	3401      	adds	r4, #1
    8760:	1c43      	adds	r3, r0, #1
    8762:	d1f3      	bne.n	874c <__sfputs_r+0xa>
    8764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00008768 <_vfiprintf_r>:
    8768:	b5f0      	push	{r4, r5, r6, r7, lr}
    876a:	b09f      	sub	sp, #124	; 0x7c
    876c:	0006      	movs	r6, r0
    876e:	000f      	movs	r7, r1
    8770:	0014      	movs	r4, r2
    8772:	9305      	str	r3, [sp, #20]
    8774:	2800      	cmp	r0, #0
    8776:	d004      	beq.n	8782 <_vfiprintf_r+0x1a>
    8778:	6983      	ldr	r3, [r0, #24]
    877a:	2b00      	cmp	r3, #0
    877c:	d101      	bne.n	8782 <_vfiprintf_r+0x1a>
    877e:	f7ff fe17 	bl	83b0 <__sinit>
    8782:	4b7f      	ldr	r3, [pc, #508]	; (8980 <_vfiprintf_r+0x218>)
    8784:	429f      	cmp	r7, r3
    8786:	d15c      	bne.n	8842 <_vfiprintf_r+0xda>
    8788:	6877      	ldr	r7, [r6, #4]
    878a:	89bb      	ldrh	r3, [r7, #12]
    878c:	071b      	lsls	r3, r3, #28
    878e:	d562      	bpl.n	8856 <_vfiprintf_r+0xee>
    8790:	693b      	ldr	r3, [r7, #16]
    8792:	2b00      	cmp	r3, #0
    8794:	d05f      	beq.n	8856 <_vfiprintf_r+0xee>
    8796:	2300      	movs	r3, #0
    8798:	ad06      	add	r5, sp, #24
    879a:	616b      	str	r3, [r5, #20]
    879c:	3320      	adds	r3, #32
    879e:	766b      	strb	r3, [r5, #25]
    87a0:	3310      	adds	r3, #16
    87a2:	76ab      	strb	r3, [r5, #26]
    87a4:	9402      	str	r4, [sp, #8]
    87a6:	9c02      	ldr	r4, [sp, #8]
    87a8:	7823      	ldrb	r3, [r4, #0]
    87aa:	2b00      	cmp	r3, #0
    87ac:	d15d      	bne.n	886a <_vfiprintf_r+0x102>
    87ae:	9b02      	ldr	r3, [sp, #8]
    87b0:	1ae3      	subs	r3, r4, r3
    87b2:	9304      	str	r3, [sp, #16]
    87b4:	d00d      	beq.n	87d2 <_vfiprintf_r+0x6a>
    87b6:	9b04      	ldr	r3, [sp, #16]
    87b8:	9a02      	ldr	r2, [sp, #8]
    87ba:	0039      	movs	r1, r7
    87bc:	0030      	movs	r0, r6
    87be:	f7ff ffc0 	bl	8742 <__sfputs_r>
    87c2:	1c43      	adds	r3, r0, #1
    87c4:	d100      	bne.n	87c8 <_vfiprintf_r+0x60>
    87c6:	e0cc      	b.n	8962 <_vfiprintf_r+0x1fa>
    87c8:	696a      	ldr	r2, [r5, #20]
    87ca:	9b04      	ldr	r3, [sp, #16]
    87cc:	4694      	mov	ip, r2
    87ce:	4463      	add	r3, ip
    87d0:	616b      	str	r3, [r5, #20]
    87d2:	7823      	ldrb	r3, [r4, #0]
    87d4:	2b00      	cmp	r3, #0
    87d6:	d100      	bne.n	87da <_vfiprintf_r+0x72>
    87d8:	e0c3      	b.n	8962 <_vfiprintf_r+0x1fa>
    87da:	2201      	movs	r2, #1
    87dc:	2300      	movs	r3, #0
    87de:	4252      	negs	r2, r2
    87e0:	606a      	str	r2, [r5, #4]
    87e2:	a902      	add	r1, sp, #8
    87e4:	3254      	adds	r2, #84	; 0x54
    87e6:	1852      	adds	r2, r2, r1
    87e8:	3401      	adds	r4, #1
    87ea:	602b      	str	r3, [r5, #0]
    87ec:	60eb      	str	r3, [r5, #12]
    87ee:	60ab      	str	r3, [r5, #8]
    87f0:	7013      	strb	r3, [r2, #0]
    87f2:	65ab      	str	r3, [r5, #88]	; 0x58
    87f4:	7821      	ldrb	r1, [r4, #0]
    87f6:	2205      	movs	r2, #5
    87f8:	4862      	ldr	r0, [pc, #392]	; (8984 <_vfiprintf_r+0x21c>)
    87fa:	f000 fb15 	bl	8e28 <memchr>
    87fe:	1c63      	adds	r3, r4, #1
    8800:	469c      	mov	ip, r3
    8802:	2800      	cmp	r0, #0
    8804:	d135      	bne.n	8872 <_vfiprintf_r+0x10a>
    8806:	6829      	ldr	r1, [r5, #0]
    8808:	06cb      	lsls	r3, r1, #27
    880a:	d504      	bpl.n	8816 <_vfiprintf_r+0xae>
    880c:	2353      	movs	r3, #83	; 0x53
    880e:	aa02      	add	r2, sp, #8
    8810:	3020      	adds	r0, #32
    8812:	189b      	adds	r3, r3, r2
    8814:	7018      	strb	r0, [r3, #0]
    8816:	070b      	lsls	r3, r1, #28
    8818:	d504      	bpl.n	8824 <_vfiprintf_r+0xbc>
    881a:	2353      	movs	r3, #83	; 0x53
    881c:	202b      	movs	r0, #43	; 0x2b
    881e:	aa02      	add	r2, sp, #8
    8820:	189b      	adds	r3, r3, r2
    8822:	7018      	strb	r0, [r3, #0]
    8824:	7823      	ldrb	r3, [r4, #0]
    8826:	2b2a      	cmp	r3, #42	; 0x2a
    8828:	d02c      	beq.n	8884 <_vfiprintf_r+0x11c>
    882a:	2000      	movs	r0, #0
    882c:	210a      	movs	r1, #10
    882e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8830:	7822      	ldrb	r2, [r4, #0]
    8832:	3a30      	subs	r2, #48	; 0x30
    8834:	2a09      	cmp	r2, #9
    8836:	d800      	bhi.n	883a <_vfiprintf_r+0xd2>
    8838:	e06b      	b.n	8912 <_vfiprintf_r+0x1aa>
    883a:	2800      	cmp	r0, #0
    883c:	d02a      	beq.n	8894 <_vfiprintf_r+0x12c>
    883e:	9309      	str	r3, [sp, #36]	; 0x24
    8840:	e028      	b.n	8894 <_vfiprintf_r+0x12c>
    8842:	4b51      	ldr	r3, [pc, #324]	; (8988 <_vfiprintf_r+0x220>)
    8844:	429f      	cmp	r7, r3
    8846:	d101      	bne.n	884c <_vfiprintf_r+0xe4>
    8848:	68b7      	ldr	r7, [r6, #8]
    884a:	e79e      	b.n	878a <_vfiprintf_r+0x22>
    884c:	4b4f      	ldr	r3, [pc, #316]	; (898c <_vfiprintf_r+0x224>)
    884e:	429f      	cmp	r7, r3
    8850:	d19b      	bne.n	878a <_vfiprintf_r+0x22>
    8852:	68f7      	ldr	r7, [r6, #12]
    8854:	e799      	b.n	878a <_vfiprintf_r+0x22>
    8856:	0039      	movs	r1, r7
    8858:	0030      	movs	r0, r6
    885a:	f7ff fc3b 	bl	80d4 <__swsetup_r>
    885e:	2800      	cmp	r0, #0
    8860:	d099      	beq.n	8796 <_vfiprintf_r+0x2e>
    8862:	2001      	movs	r0, #1
    8864:	4240      	negs	r0, r0
    8866:	b01f      	add	sp, #124	; 0x7c
    8868:	bdf0      	pop	{r4, r5, r6, r7, pc}
    886a:	2b25      	cmp	r3, #37	; 0x25
    886c:	d09f      	beq.n	87ae <_vfiprintf_r+0x46>
    886e:	3401      	adds	r4, #1
    8870:	e79a      	b.n	87a8 <_vfiprintf_r+0x40>
    8872:	4b44      	ldr	r3, [pc, #272]	; (8984 <_vfiprintf_r+0x21c>)
    8874:	6829      	ldr	r1, [r5, #0]
    8876:	1ac0      	subs	r0, r0, r3
    8878:	2301      	movs	r3, #1
    887a:	4083      	lsls	r3, r0
    887c:	430b      	orrs	r3, r1
    887e:	602b      	str	r3, [r5, #0]
    8880:	4664      	mov	r4, ip
    8882:	e7b7      	b.n	87f4 <_vfiprintf_r+0x8c>
    8884:	9b05      	ldr	r3, [sp, #20]
    8886:	1d18      	adds	r0, r3, #4
    8888:	681b      	ldr	r3, [r3, #0]
    888a:	9005      	str	r0, [sp, #20]
    888c:	2b00      	cmp	r3, #0
    888e:	db3a      	blt.n	8906 <_vfiprintf_r+0x19e>
    8890:	9309      	str	r3, [sp, #36]	; 0x24
    8892:	4664      	mov	r4, ip
    8894:	7823      	ldrb	r3, [r4, #0]
    8896:	2b2e      	cmp	r3, #46	; 0x2e
    8898:	d10b      	bne.n	88b2 <_vfiprintf_r+0x14a>
    889a:	7863      	ldrb	r3, [r4, #1]
    889c:	1c62      	adds	r2, r4, #1
    889e:	2b2a      	cmp	r3, #42	; 0x2a
    88a0:	d13f      	bne.n	8922 <_vfiprintf_r+0x1ba>
    88a2:	9b05      	ldr	r3, [sp, #20]
    88a4:	3402      	adds	r4, #2
    88a6:	1d1a      	adds	r2, r3, #4
    88a8:	681b      	ldr	r3, [r3, #0]
    88aa:	9205      	str	r2, [sp, #20]
    88ac:	2b00      	cmp	r3, #0
    88ae:	db35      	blt.n	891c <_vfiprintf_r+0x1b4>
    88b0:	9307      	str	r3, [sp, #28]
    88b2:	7821      	ldrb	r1, [r4, #0]
    88b4:	2203      	movs	r2, #3
    88b6:	4836      	ldr	r0, [pc, #216]	; (8990 <_vfiprintf_r+0x228>)
    88b8:	f000 fab6 	bl	8e28 <memchr>
    88bc:	2800      	cmp	r0, #0
    88be:	d007      	beq.n	88d0 <_vfiprintf_r+0x168>
    88c0:	4b33      	ldr	r3, [pc, #204]	; (8990 <_vfiprintf_r+0x228>)
    88c2:	682a      	ldr	r2, [r5, #0]
    88c4:	1ac0      	subs	r0, r0, r3
    88c6:	2340      	movs	r3, #64	; 0x40
    88c8:	4083      	lsls	r3, r0
    88ca:	4313      	orrs	r3, r2
    88cc:	602b      	str	r3, [r5, #0]
    88ce:	3401      	adds	r4, #1
    88d0:	7821      	ldrb	r1, [r4, #0]
    88d2:	1c63      	adds	r3, r4, #1
    88d4:	2206      	movs	r2, #6
    88d6:	482f      	ldr	r0, [pc, #188]	; (8994 <_vfiprintf_r+0x22c>)
    88d8:	9302      	str	r3, [sp, #8]
    88da:	7629      	strb	r1, [r5, #24]
    88dc:	f000 faa4 	bl	8e28 <memchr>
    88e0:	2800      	cmp	r0, #0
    88e2:	d044      	beq.n	896e <_vfiprintf_r+0x206>
    88e4:	4b2c      	ldr	r3, [pc, #176]	; (8998 <_vfiprintf_r+0x230>)
    88e6:	2b00      	cmp	r3, #0
    88e8:	d12f      	bne.n	894a <_vfiprintf_r+0x1e2>
    88ea:	6829      	ldr	r1, [r5, #0]
    88ec:	9b05      	ldr	r3, [sp, #20]
    88ee:	2207      	movs	r2, #7
    88f0:	05c9      	lsls	r1, r1, #23
    88f2:	d528      	bpl.n	8946 <_vfiprintf_r+0x1de>
    88f4:	189b      	adds	r3, r3, r2
    88f6:	4393      	bics	r3, r2
    88f8:	3308      	adds	r3, #8
    88fa:	9305      	str	r3, [sp, #20]
    88fc:	696b      	ldr	r3, [r5, #20]
    88fe:	9a03      	ldr	r2, [sp, #12]
    8900:	189b      	adds	r3, r3, r2
    8902:	616b      	str	r3, [r5, #20]
    8904:	e74f      	b.n	87a6 <_vfiprintf_r+0x3e>
    8906:	425b      	negs	r3, r3
    8908:	60eb      	str	r3, [r5, #12]
    890a:	2302      	movs	r3, #2
    890c:	430b      	orrs	r3, r1
    890e:	602b      	str	r3, [r5, #0]
    8910:	e7bf      	b.n	8892 <_vfiprintf_r+0x12a>
    8912:	434b      	muls	r3, r1
    8914:	3401      	adds	r4, #1
    8916:	189b      	adds	r3, r3, r2
    8918:	2001      	movs	r0, #1
    891a:	e789      	b.n	8830 <_vfiprintf_r+0xc8>
    891c:	2301      	movs	r3, #1
    891e:	425b      	negs	r3, r3
    8920:	e7c6      	b.n	88b0 <_vfiprintf_r+0x148>
    8922:	2300      	movs	r3, #0
    8924:	0014      	movs	r4, r2
    8926:	200a      	movs	r0, #10
    8928:	001a      	movs	r2, r3
    892a:	606b      	str	r3, [r5, #4]
    892c:	7821      	ldrb	r1, [r4, #0]
    892e:	3930      	subs	r1, #48	; 0x30
    8930:	2909      	cmp	r1, #9
    8932:	d903      	bls.n	893c <_vfiprintf_r+0x1d4>
    8934:	2b00      	cmp	r3, #0
    8936:	d0bc      	beq.n	88b2 <_vfiprintf_r+0x14a>
    8938:	9207      	str	r2, [sp, #28]
    893a:	e7ba      	b.n	88b2 <_vfiprintf_r+0x14a>
    893c:	4342      	muls	r2, r0
    893e:	3401      	adds	r4, #1
    8940:	1852      	adds	r2, r2, r1
    8942:	2301      	movs	r3, #1
    8944:	e7f2      	b.n	892c <_vfiprintf_r+0x1c4>
    8946:	3307      	adds	r3, #7
    8948:	e7d5      	b.n	88f6 <_vfiprintf_r+0x18e>
    894a:	ab05      	add	r3, sp, #20
    894c:	9300      	str	r3, [sp, #0]
    894e:	003a      	movs	r2, r7
    8950:	4b12      	ldr	r3, [pc, #72]	; (899c <_vfiprintf_r+0x234>)
    8952:	0029      	movs	r1, r5
    8954:	0030      	movs	r0, r6
    8956:	e000      	b.n	895a <_vfiprintf_r+0x1f2>
    8958:	bf00      	nop
    895a:	9003      	str	r0, [sp, #12]
    895c:	9b03      	ldr	r3, [sp, #12]
    895e:	3301      	adds	r3, #1
    8960:	d1cc      	bne.n	88fc <_vfiprintf_r+0x194>
    8962:	89bb      	ldrh	r3, [r7, #12]
    8964:	065b      	lsls	r3, r3, #25
    8966:	d500      	bpl.n	896a <_vfiprintf_r+0x202>
    8968:	e77b      	b.n	8862 <_vfiprintf_r+0xfa>
    896a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    896c:	e77b      	b.n	8866 <_vfiprintf_r+0xfe>
    896e:	ab05      	add	r3, sp, #20
    8970:	9300      	str	r3, [sp, #0]
    8972:	003a      	movs	r2, r7
    8974:	4b09      	ldr	r3, [pc, #36]	; (899c <_vfiprintf_r+0x234>)
    8976:	0029      	movs	r1, r5
    8978:	0030      	movs	r0, r6
    897a:	f000 f87f 	bl	8a7c <_printf_i>
    897e:	e7ec      	b.n	895a <_vfiprintf_r+0x1f2>
    8980:	000090e0 	.word	0x000090e0
    8984:	00009120 	.word	0x00009120
    8988:	00009100 	.word	0x00009100
    898c:	000090c0 	.word	0x000090c0
    8990:	00009126 	.word	0x00009126
    8994:	0000912a 	.word	0x0000912a
    8998:	00000000 	.word	0x00000000
    899c:	00008743 	.word	0x00008743

000089a0 <_printf_common>:
    89a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    89a2:	0015      	movs	r5, r2
    89a4:	9301      	str	r3, [sp, #4]
    89a6:	688a      	ldr	r2, [r1, #8]
    89a8:	690b      	ldr	r3, [r1, #16]
    89aa:	9000      	str	r0, [sp, #0]
    89ac:	000c      	movs	r4, r1
    89ae:	4293      	cmp	r3, r2
    89b0:	da00      	bge.n	89b4 <_printf_common+0x14>
    89b2:	0013      	movs	r3, r2
    89b4:	0022      	movs	r2, r4
    89b6:	602b      	str	r3, [r5, #0]
    89b8:	3243      	adds	r2, #67	; 0x43
    89ba:	7812      	ldrb	r2, [r2, #0]
    89bc:	2a00      	cmp	r2, #0
    89be:	d001      	beq.n	89c4 <_printf_common+0x24>
    89c0:	3301      	adds	r3, #1
    89c2:	602b      	str	r3, [r5, #0]
    89c4:	6823      	ldr	r3, [r4, #0]
    89c6:	069b      	lsls	r3, r3, #26
    89c8:	d502      	bpl.n	89d0 <_printf_common+0x30>
    89ca:	682b      	ldr	r3, [r5, #0]
    89cc:	3302      	adds	r3, #2
    89ce:	602b      	str	r3, [r5, #0]
    89d0:	2706      	movs	r7, #6
    89d2:	6823      	ldr	r3, [r4, #0]
    89d4:	401f      	ands	r7, r3
    89d6:	d027      	beq.n	8a28 <_printf_common+0x88>
    89d8:	0023      	movs	r3, r4
    89da:	3343      	adds	r3, #67	; 0x43
    89dc:	781b      	ldrb	r3, [r3, #0]
    89de:	1e5a      	subs	r2, r3, #1
    89e0:	4193      	sbcs	r3, r2
    89e2:	6822      	ldr	r2, [r4, #0]
    89e4:	0692      	lsls	r2, r2, #26
    89e6:	d430      	bmi.n	8a4a <_printf_common+0xaa>
    89e8:	0022      	movs	r2, r4
    89ea:	9901      	ldr	r1, [sp, #4]
    89ec:	3243      	adds	r2, #67	; 0x43
    89ee:	9800      	ldr	r0, [sp, #0]
    89f0:	9e08      	ldr	r6, [sp, #32]
    89f2:	47b0      	blx	r6
    89f4:	1c43      	adds	r3, r0, #1
    89f6:	d025      	beq.n	8a44 <_printf_common+0xa4>
    89f8:	2306      	movs	r3, #6
    89fa:	6820      	ldr	r0, [r4, #0]
    89fc:	682a      	ldr	r2, [r5, #0]
    89fe:	68e1      	ldr	r1, [r4, #12]
    8a00:	4003      	ands	r3, r0
    8a02:	2500      	movs	r5, #0
    8a04:	2b04      	cmp	r3, #4
    8a06:	d103      	bne.n	8a10 <_printf_common+0x70>
    8a08:	1a8d      	subs	r5, r1, r2
    8a0a:	43eb      	mvns	r3, r5
    8a0c:	17db      	asrs	r3, r3, #31
    8a0e:	401d      	ands	r5, r3
    8a10:	68a3      	ldr	r3, [r4, #8]
    8a12:	6922      	ldr	r2, [r4, #16]
    8a14:	4293      	cmp	r3, r2
    8a16:	dd01      	ble.n	8a1c <_printf_common+0x7c>
    8a18:	1a9b      	subs	r3, r3, r2
    8a1a:	18ed      	adds	r5, r5, r3
    8a1c:	2700      	movs	r7, #0
    8a1e:	42bd      	cmp	r5, r7
    8a20:	d120      	bne.n	8a64 <_printf_common+0xc4>
    8a22:	2000      	movs	r0, #0
    8a24:	e010      	b.n	8a48 <_printf_common+0xa8>
    8a26:	3701      	adds	r7, #1
    8a28:	68e3      	ldr	r3, [r4, #12]
    8a2a:	682a      	ldr	r2, [r5, #0]
    8a2c:	1a9b      	subs	r3, r3, r2
    8a2e:	429f      	cmp	r7, r3
    8a30:	dad2      	bge.n	89d8 <_printf_common+0x38>
    8a32:	0022      	movs	r2, r4
    8a34:	2301      	movs	r3, #1
    8a36:	3219      	adds	r2, #25
    8a38:	9901      	ldr	r1, [sp, #4]
    8a3a:	9800      	ldr	r0, [sp, #0]
    8a3c:	9e08      	ldr	r6, [sp, #32]
    8a3e:	47b0      	blx	r6
    8a40:	1c43      	adds	r3, r0, #1
    8a42:	d1f0      	bne.n	8a26 <_printf_common+0x86>
    8a44:	2001      	movs	r0, #1
    8a46:	4240      	negs	r0, r0
    8a48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8a4a:	2030      	movs	r0, #48	; 0x30
    8a4c:	18e1      	adds	r1, r4, r3
    8a4e:	3143      	adds	r1, #67	; 0x43
    8a50:	7008      	strb	r0, [r1, #0]
    8a52:	0021      	movs	r1, r4
    8a54:	1c5a      	adds	r2, r3, #1
    8a56:	3145      	adds	r1, #69	; 0x45
    8a58:	7809      	ldrb	r1, [r1, #0]
    8a5a:	18a2      	adds	r2, r4, r2
    8a5c:	3243      	adds	r2, #67	; 0x43
    8a5e:	3302      	adds	r3, #2
    8a60:	7011      	strb	r1, [r2, #0]
    8a62:	e7c1      	b.n	89e8 <_printf_common+0x48>
    8a64:	0022      	movs	r2, r4
    8a66:	2301      	movs	r3, #1
    8a68:	321a      	adds	r2, #26
    8a6a:	9901      	ldr	r1, [sp, #4]
    8a6c:	9800      	ldr	r0, [sp, #0]
    8a6e:	9e08      	ldr	r6, [sp, #32]
    8a70:	47b0      	blx	r6
    8a72:	1c43      	adds	r3, r0, #1
    8a74:	d0e6      	beq.n	8a44 <_printf_common+0xa4>
    8a76:	3701      	adds	r7, #1
    8a78:	e7d1      	b.n	8a1e <_printf_common+0x7e>
	...

00008a7c <_printf_i>:
    8a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a7e:	b08b      	sub	sp, #44	; 0x2c
    8a80:	9206      	str	r2, [sp, #24]
    8a82:	000a      	movs	r2, r1
    8a84:	3243      	adds	r2, #67	; 0x43
    8a86:	9307      	str	r3, [sp, #28]
    8a88:	9005      	str	r0, [sp, #20]
    8a8a:	9204      	str	r2, [sp, #16]
    8a8c:	7e0a      	ldrb	r2, [r1, #24]
    8a8e:	000c      	movs	r4, r1
    8a90:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8a92:	2a6e      	cmp	r2, #110	; 0x6e
    8a94:	d100      	bne.n	8a98 <_printf_i+0x1c>
    8a96:	e08f      	b.n	8bb8 <_printf_i+0x13c>
    8a98:	d817      	bhi.n	8aca <_printf_i+0x4e>
    8a9a:	2a63      	cmp	r2, #99	; 0x63
    8a9c:	d02c      	beq.n	8af8 <_printf_i+0x7c>
    8a9e:	d808      	bhi.n	8ab2 <_printf_i+0x36>
    8aa0:	2a00      	cmp	r2, #0
    8aa2:	d100      	bne.n	8aa6 <_printf_i+0x2a>
    8aa4:	e099      	b.n	8bda <_printf_i+0x15e>
    8aa6:	2a58      	cmp	r2, #88	; 0x58
    8aa8:	d054      	beq.n	8b54 <_printf_i+0xd8>
    8aaa:	0026      	movs	r6, r4
    8aac:	3642      	adds	r6, #66	; 0x42
    8aae:	7032      	strb	r2, [r6, #0]
    8ab0:	e029      	b.n	8b06 <_printf_i+0x8a>
    8ab2:	2a64      	cmp	r2, #100	; 0x64
    8ab4:	d001      	beq.n	8aba <_printf_i+0x3e>
    8ab6:	2a69      	cmp	r2, #105	; 0x69
    8ab8:	d1f7      	bne.n	8aaa <_printf_i+0x2e>
    8aba:	6821      	ldr	r1, [r4, #0]
    8abc:	681a      	ldr	r2, [r3, #0]
    8abe:	0608      	lsls	r0, r1, #24
    8ac0:	d523      	bpl.n	8b0a <_printf_i+0x8e>
    8ac2:	1d11      	adds	r1, r2, #4
    8ac4:	6019      	str	r1, [r3, #0]
    8ac6:	6815      	ldr	r5, [r2, #0]
    8ac8:	e025      	b.n	8b16 <_printf_i+0x9a>
    8aca:	2a73      	cmp	r2, #115	; 0x73
    8acc:	d100      	bne.n	8ad0 <_printf_i+0x54>
    8ace:	e088      	b.n	8be2 <_printf_i+0x166>
    8ad0:	d808      	bhi.n	8ae4 <_printf_i+0x68>
    8ad2:	2a6f      	cmp	r2, #111	; 0x6f
    8ad4:	d029      	beq.n	8b2a <_printf_i+0xae>
    8ad6:	2a70      	cmp	r2, #112	; 0x70
    8ad8:	d1e7      	bne.n	8aaa <_printf_i+0x2e>
    8ada:	2220      	movs	r2, #32
    8adc:	6809      	ldr	r1, [r1, #0]
    8ade:	430a      	orrs	r2, r1
    8ae0:	6022      	str	r2, [r4, #0]
    8ae2:	e003      	b.n	8aec <_printf_i+0x70>
    8ae4:	2a75      	cmp	r2, #117	; 0x75
    8ae6:	d020      	beq.n	8b2a <_printf_i+0xae>
    8ae8:	2a78      	cmp	r2, #120	; 0x78
    8aea:	d1de      	bne.n	8aaa <_printf_i+0x2e>
    8aec:	0022      	movs	r2, r4
    8aee:	2178      	movs	r1, #120	; 0x78
    8af0:	3245      	adds	r2, #69	; 0x45
    8af2:	7011      	strb	r1, [r2, #0]
    8af4:	4a6c      	ldr	r2, [pc, #432]	; (8ca8 <_printf_i+0x22c>)
    8af6:	e030      	b.n	8b5a <_printf_i+0xde>
    8af8:	000e      	movs	r6, r1
    8afa:	681a      	ldr	r2, [r3, #0]
    8afc:	3642      	adds	r6, #66	; 0x42
    8afe:	1d11      	adds	r1, r2, #4
    8b00:	6019      	str	r1, [r3, #0]
    8b02:	6813      	ldr	r3, [r2, #0]
    8b04:	7033      	strb	r3, [r6, #0]
    8b06:	2301      	movs	r3, #1
    8b08:	e079      	b.n	8bfe <_printf_i+0x182>
    8b0a:	0649      	lsls	r1, r1, #25
    8b0c:	d5d9      	bpl.n	8ac2 <_printf_i+0x46>
    8b0e:	1d11      	adds	r1, r2, #4
    8b10:	6019      	str	r1, [r3, #0]
    8b12:	2300      	movs	r3, #0
    8b14:	5ed5      	ldrsh	r5, [r2, r3]
    8b16:	2d00      	cmp	r5, #0
    8b18:	da03      	bge.n	8b22 <_printf_i+0xa6>
    8b1a:	232d      	movs	r3, #45	; 0x2d
    8b1c:	9a04      	ldr	r2, [sp, #16]
    8b1e:	426d      	negs	r5, r5
    8b20:	7013      	strb	r3, [r2, #0]
    8b22:	4b62      	ldr	r3, [pc, #392]	; (8cac <_printf_i+0x230>)
    8b24:	270a      	movs	r7, #10
    8b26:	9303      	str	r3, [sp, #12]
    8b28:	e02f      	b.n	8b8a <_printf_i+0x10e>
    8b2a:	6820      	ldr	r0, [r4, #0]
    8b2c:	6819      	ldr	r1, [r3, #0]
    8b2e:	0605      	lsls	r5, r0, #24
    8b30:	d503      	bpl.n	8b3a <_printf_i+0xbe>
    8b32:	1d08      	adds	r0, r1, #4
    8b34:	6018      	str	r0, [r3, #0]
    8b36:	680d      	ldr	r5, [r1, #0]
    8b38:	e005      	b.n	8b46 <_printf_i+0xca>
    8b3a:	0640      	lsls	r0, r0, #25
    8b3c:	d5f9      	bpl.n	8b32 <_printf_i+0xb6>
    8b3e:	680d      	ldr	r5, [r1, #0]
    8b40:	1d08      	adds	r0, r1, #4
    8b42:	6018      	str	r0, [r3, #0]
    8b44:	b2ad      	uxth	r5, r5
    8b46:	4b59      	ldr	r3, [pc, #356]	; (8cac <_printf_i+0x230>)
    8b48:	2708      	movs	r7, #8
    8b4a:	9303      	str	r3, [sp, #12]
    8b4c:	2a6f      	cmp	r2, #111	; 0x6f
    8b4e:	d018      	beq.n	8b82 <_printf_i+0x106>
    8b50:	270a      	movs	r7, #10
    8b52:	e016      	b.n	8b82 <_printf_i+0x106>
    8b54:	3145      	adds	r1, #69	; 0x45
    8b56:	700a      	strb	r2, [r1, #0]
    8b58:	4a54      	ldr	r2, [pc, #336]	; (8cac <_printf_i+0x230>)
    8b5a:	9203      	str	r2, [sp, #12]
    8b5c:	681a      	ldr	r2, [r3, #0]
    8b5e:	6821      	ldr	r1, [r4, #0]
    8b60:	1d10      	adds	r0, r2, #4
    8b62:	6018      	str	r0, [r3, #0]
    8b64:	6815      	ldr	r5, [r2, #0]
    8b66:	0608      	lsls	r0, r1, #24
    8b68:	d522      	bpl.n	8bb0 <_printf_i+0x134>
    8b6a:	07cb      	lsls	r3, r1, #31
    8b6c:	d502      	bpl.n	8b74 <_printf_i+0xf8>
    8b6e:	2320      	movs	r3, #32
    8b70:	4319      	orrs	r1, r3
    8b72:	6021      	str	r1, [r4, #0]
    8b74:	2710      	movs	r7, #16
    8b76:	2d00      	cmp	r5, #0
    8b78:	d103      	bne.n	8b82 <_printf_i+0x106>
    8b7a:	2320      	movs	r3, #32
    8b7c:	6822      	ldr	r2, [r4, #0]
    8b7e:	439a      	bics	r2, r3
    8b80:	6022      	str	r2, [r4, #0]
    8b82:	0023      	movs	r3, r4
    8b84:	2200      	movs	r2, #0
    8b86:	3343      	adds	r3, #67	; 0x43
    8b88:	701a      	strb	r2, [r3, #0]
    8b8a:	6863      	ldr	r3, [r4, #4]
    8b8c:	60a3      	str	r3, [r4, #8]
    8b8e:	2b00      	cmp	r3, #0
    8b90:	db5c      	blt.n	8c4c <_printf_i+0x1d0>
    8b92:	2204      	movs	r2, #4
    8b94:	6821      	ldr	r1, [r4, #0]
    8b96:	4391      	bics	r1, r2
    8b98:	6021      	str	r1, [r4, #0]
    8b9a:	2d00      	cmp	r5, #0
    8b9c:	d158      	bne.n	8c50 <_printf_i+0x1d4>
    8b9e:	9e04      	ldr	r6, [sp, #16]
    8ba0:	2b00      	cmp	r3, #0
    8ba2:	d064      	beq.n	8c6e <_printf_i+0x1f2>
    8ba4:	0026      	movs	r6, r4
    8ba6:	9b03      	ldr	r3, [sp, #12]
    8ba8:	3642      	adds	r6, #66	; 0x42
    8baa:	781b      	ldrb	r3, [r3, #0]
    8bac:	7033      	strb	r3, [r6, #0]
    8bae:	e05e      	b.n	8c6e <_printf_i+0x1f2>
    8bb0:	0648      	lsls	r0, r1, #25
    8bb2:	d5da      	bpl.n	8b6a <_printf_i+0xee>
    8bb4:	b2ad      	uxth	r5, r5
    8bb6:	e7d8      	b.n	8b6a <_printf_i+0xee>
    8bb8:	6809      	ldr	r1, [r1, #0]
    8bba:	681a      	ldr	r2, [r3, #0]
    8bbc:	0608      	lsls	r0, r1, #24
    8bbe:	d505      	bpl.n	8bcc <_printf_i+0x150>
    8bc0:	1d11      	adds	r1, r2, #4
    8bc2:	6019      	str	r1, [r3, #0]
    8bc4:	6813      	ldr	r3, [r2, #0]
    8bc6:	6962      	ldr	r2, [r4, #20]
    8bc8:	601a      	str	r2, [r3, #0]
    8bca:	e006      	b.n	8bda <_printf_i+0x15e>
    8bcc:	0649      	lsls	r1, r1, #25
    8bce:	d5f7      	bpl.n	8bc0 <_printf_i+0x144>
    8bd0:	1d11      	adds	r1, r2, #4
    8bd2:	6019      	str	r1, [r3, #0]
    8bd4:	6813      	ldr	r3, [r2, #0]
    8bd6:	8aa2      	ldrh	r2, [r4, #20]
    8bd8:	801a      	strh	r2, [r3, #0]
    8bda:	2300      	movs	r3, #0
    8bdc:	9e04      	ldr	r6, [sp, #16]
    8bde:	6123      	str	r3, [r4, #16]
    8be0:	e054      	b.n	8c8c <_printf_i+0x210>
    8be2:	681a      	ldr	r2, [r3, #0]
    8be4:	1d11      	adds	r1, r2, #4
    8be6:	6019      	str	r1, [r3, #0]
    8be8:	6816      	ldr	r6, [r2, #0]
    8bea:	2100      	movs	r1, #0
    8bec:	6862      	ldr	r2, [r4, #4]
    8bee:	0030      	movs	r0, r6
    8bf0:	f000 f91a 	bl	8e28 <memchr>
    8bf4:	2800      	cmp	r0, #0
    8bf6:	d001      	beq.n	8bfc <_printf_i+0x180>
    8bf8:	1b80      	subs	r0, r0, r6
    8bfa:	6060      	str	r0, [r4, #4]
    8bfc:	6863      	ldr	r3, [r4, #4]
    8bfe:	6123      	str	r3, [r4, #16]
    8c00:	2300      	movs	r3, #0
    8c02:	9a04      	ldr	r2, [sp, #16]
    8c04:	7013      	strb	r3, [r2, #0]
    8c06:	e041      	b.n	8c8c <_printf_i+0x210>
    8c08:	6923      	ldr	r3, [r4, #16]
    8c0a:	0032      	movs	r2, r6
    8c0c:	9906      	ldr	r1, [sp, #24]
    8c0e:	9805      	ldr	r0, [sp, #20]
    8c10:	9d07      	ldr	r5, [sp, #28]
    8c12:	47a8      	blx	r5
    8c14:	1c43      	adds	r3, r0, #1
    8c16:	d043      	beq.n	8ca0 <_printf_i+0x224>
    8c18:	6823      	ldr	r3, [r4, #0]
    8c1a:	2500      	movs	r5, #0
    8c1c:	079b      	lsls	r3, r3, #30
    8c1e:	d40f      	bmi.n	8c40 <_printf_i+0x1c4>
    8c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8c22:	68e0      	ldr	r0, [r4, #12]
    8c24:	4298      	cmp	r0, r3
    8c26:	da3d      	bge.n	8ca4 <_printf_i+0x228>
    8c28:	0018      	movs	r0, r3
    8c2a:	e03b      	b.n	8ca4 <_printf_i+0x228>
    8c2c:	0022      	movs	r2, r4
    8c2e:	2301      	movs	r3, #1
    8c30:	3219      	adds	r2, #25
    8c32:	9906      	ldr	r1, [sp, #24]
    8c34:	9805      	ldr	r0, [sp, #20]
    8c36:	9e07      	ldr	r6, [sp, #28]
    8c38:	47b0      	blx	r6
    8c3a:	1c43      	adds	r3, r0, #1
    8c3c:	d030      	beq.n	8ca0 <_printf_i+0x224>
    8c3e:	3501      	adds	r5, #1
    8c40:	68e3      	ldr	r3, [r4, #12]
    8c42:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8c44:	1a9b      	subs	r3, r3, r2
    8c46:	429d      	cmp	r5, r3
    8c48:	dbf0      	blt.n	8c2c <_printf_i+0x1b0>
    8c4a:	e7e9      	b.n	8c20 <_printf_i+0x1a4>
    8c4c:	2d00      	cmp	r5, #0
    8c4e:	d0a9      	beq.n	8ba4 <_printf_i+0x128>
    8c50:	9e04      	ldr	r6, [sp, #16]
    8c52:	0028      	movs	r0, r5
    8c54:	0039      	movs	r1, r7
    8c56:	f7fd fa45 	bl	60e4 <__aeabi_uidivmod>
    8c5a:	9b03      	ldr	r3, [sp, #12]
    8c5c:	3e01      	subs	r6, #1
    8c5e:	5c5b      	ldrb	r3, [r3, r1]
    8c60:	0028      	movs	r0, r5
    8c62:	7033      	strb	r3, [r6, #0]
    8c64:	0039      	movs	r1, r7
    8c66:	f7fd f9b7 	bl	5fd8 <__udivsi3>
    8c6a:	1e05      	subs	r5, r0, #0
    8c6c:	d1f1      	bne.n	8c52 <_printf_i+0x1d6>
    8c6e:	2f08      	cmp	r7, #8
    8c70:	d109      	bne.n	8c86 <_printf_i+0x20a>
    8c72:	6823      	ldr	r3, [r4, #0]
    8c74:	07db      	lsls	r3, r3, #31
    8c76:	d506      	bpl.n	8c86 <_printf_i+0x20a>
    8c78:	6863      	ldr	r3, [r4, #4]
    8c7a:	6922      	ldr	r2, [r4, #16]
    8c7c:	4293      	cmp	r3, r2
    8c7e:	dc02      	bgt.n	8c86 <_printf_i+0x20a>
    8c80:	2330      	movs	r3, #48	; 0x30
    8c82:	3e01      	subs	r6, #1
    8c84:	7033      	strb	r3, [r6, #0]
    8c86:	9b04      	ldr	r3, [sp, #16]
    8c88:	1b9b      	subs	r3, r3, r6
    8c8a:	6123      	str	r3, [r4, #16]
    8c8c:	9b07      	ldr	r3, [sp, #28]
    8c8e:	aa09      	add	r2, sp, #36	; 0x24
    8c90:	9300      	str	r3, [sp, #0]
    8c92:	0021      	movs	r1, r4
    8c94:	9b06      	ldr	r3, [sp, #24]
    8c96:	9805      	ldr	r0, [sp, #20]
    8c98:	f7ff fe82 	bl	89a0 <_printf_common>
    8c9c:	1c43      	adds	r3, r0, #1
    8c9e:	d1b3      	bne.n	8c08 <_printf_i+0x18c>
    8ca0:	2001      	movs	r0, #1
    8ca2:	4240      	negs	r0, r0
    8ca4:	b00b      	add	sp, #44	; 0x2c
    8ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8ca8:	00009142 	.word	0x00009142
    8cac:	00009131 	.word	0x00009131

00008cb0 <_sbrk_r>:
    8cb0:	2300      	movs	r3, #0
    8cb2:	b570      	push	{r4, r5, r6, lr}
    8cb4:	4c06      	ldr	r4, [pc, #24]	; (8cd0 <_sbrk_r+0x20>)
    8cb6:	0005      	movs	r5, r0
    8cb8:	0008      	movs	r0, r1
    8cba:	6023      	str	r3, [r4, #0]
    8cbc:	f7fc f9da 	bl	5074 <_sbrk>
    8cc0:	1c43      	adds	r3, r0, #1
    8cc2:	d103      	bne.n	8ccc <_sbrk_r+0x1c>
    8cc4:	6823      	ldr	r3, [r4, #0]
    8cc6:	2b00      	cmp	r3, #0
    8cc8:	d000      	beq.n	8ccc <_sbrk_r+0x1c>
    8cca:	602b      	str	r3, [r5, #0]
    8ccc:	bd70      	pop	{r4, r5, r6, pc}
    8cce:	46c0      	nop			; (mov r8, r8)
    8cd0:	20000b3c 	.word	0x20000b3c

00008cd4 <__sread>:
    8cd4:	b570      	push	{r4, r5, r6, lr}
    8cd6:	000c      	movs	r4, r1
    8cd8:	250e      	movs	r5, #14
    8cda:	5f49      	ldrsh	r1, [r1, r5]
    8cdc:	f000 f8b2 	bl	8e44 <_read_r>
    8ce0:	2800      	cmp	r0, #0
    8ce2:	db03      	blt.n	8cec <__sread+0x18>
    8ce4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    8ce6:	181b      	adds	r3, r3, r0
    8ce8:	6563      	str	r3, [r4, #84]	; 0x54
    8cea:	bd70      	pop	{r4, r5, r6, pc}
    8cec:	89a3      	ldrh	r3, [r4, #12]
    8cee:	4a02      	ldr	r2, [pc, #8]	; (8cf8 <__sread+0x24>)
    8cf0:	4013      	ands	r3, r2
    8cf2:	81a3      	strh	r3, [r4, #12]
    8cf4:	e7f9      	b.n	8cea <__sread+0x16>
    8cf6:	46c0      	nop			; (mov r8, r8)
    8cf8:	ffffefff 	.word	0xffffefff

00008cfc <__swrite>:
    8cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8cfe:	001f      	movs	r7, r3
    8d00:	898b      	ldrh	r3, [r1, #12]
    8d02:	0005      	movs	r5, r0
    8d04:	000c      	movs	r4, r1
    8d06:	0016      	movs	r6, r2
    8d08:	05db      	lsls	r3, r3, #23
    8d0a:	d505      	bpl.n	8d18 <__swrite+0x1c>
    8d0c:	230e      	movs	r3, #14
    8d0e:	5ec9      	ldrsh	r1, [r1, r3]
    8d10:	2200      	movs	r2, #0
    8d12:	2302      	movs	r3, #2
    8d14:	f000 f874 	bl	8e00 <_lseek_r>
    8d18:	89a3      	ldrh	r3, [r4, #12]
    8d1a:	4a05      	ldr	r2, [pc, #20]	; (8d30 <__swrite+0x34>)
    8d1c:	0028      	movs	r0, r5
    8d1e:	4013      	ands	r3, r2
    8d20:	81a3      	strh	r3, [r4, #12]
    8d22:	0032      	movs	r2, r6
    8d24:	230e      	movs	r3, #14
    8d26:	5ee1      	ldrsh	r1, [r4, r3]
    8d28:	003b      	movs	r3, r7
    8d2a:	f000 f81f 	bl	8d6c <_write_r>
    8d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8d30:	ffffefff 	.word	0xffffefff

00008d34 <__sseek>:
    8d34:	b570      	push	{r4, r5, r6, lr}
    8d36:	000c      	movs	r4, r1
    8d38:	250e      	movs	r5, #14
    8d3a:	5f49      	ldrsh	r1, [r1, r5]
    8d3c:	f000 f860 	bl	8e00 <_lseek_r>
    8d40:	89a3      	ldrh	r3, [r4, #12]
    8d42:	1c42      	adds	r2, r0, #1
    8d44:	d103      	bne.n	8d4e <__sseek+0x1a>
    8d46:	4a05      	ldr	r2, [pc, #20]	; (8d5c <__sseek+0x28>)
    8d48:	4013      	ands	r3, r2
    8d4a:	81a3      	strh	r3, [r4, #12]
    8d4c:	bd70      	pop	{r4, r5, r6, pc}
    8d4e:	2280      	movs	r2, #128	; 0x80
    8d50:	0152      	lsls	r2, r2, #5
    8d52:	4313      	orrs	r3, r2
    8d54:	81a3      	strh	r3, [r4, #12]
    8d56:	6560      	str	r0, [r4, #84]	; 0x54
    8d58:	e7f8      	b.n	8d4c <__sseek+0x18>
    8d5a:	46c0      	nop			; (mov r8, r8)
    8d5c:	ffffefff 	.word	0xffffefff

00008d60 <__sclose>:
    8d60:	b510      	push	{r4, lr}
    8d62:	230e      	movs	r3, #14
    8d64:	5ec9      	ldrsh	r1, [r1, r3]
    8d66:	f000 f815 	bl	8d94 <_close_r>
    8d6a:	bd10      	pop	{r4, pc}

00008d6c <_write_r>:
    8d6c:	b570      	push	{r4, r5, r6, lr}
    8d6e:	0005      	movs	r5, r0
    8d70:	0008      	movs	r0, r1
    8d72:	0011      	movs	r1, r2
    8d74:	2200      	movs	r2, #0
    8d76:	4c06      	ldr	r4, [pc, #24]	; (8d90 <_write_r+0x24>)
    8d78:	6022      	str	r2, [r4, #0]
    8d7a:	001a      	movs	r2, r3
    8d7c:	f7fc f956 	bl	502c <_write>
    8d80:	1c43      	adds	r3, r0, #1
    8d82:	d103      	bne.n	8d8c <_write_r+0x20>
    8d84:	6823      	ldr	r3, [r4, #0]
    8d86:	2b00      	cmp	r3, #0
    8d88:	d000      	beq.n	8d8c <_write_r+0x20>
    8d8a:	602b      	str	r3, [r5, #0]
    8d8c:	bd70      	pop	{r4, r5, r6, pc}
    8d8e:	46c0      	nop			; (mov r8, r8)
    8d90:	20000b3c 	.word	0x20000b3c

00008d94 <_close_r>:
    8d94:	2300      	movs	r3, #0
    8d96:	b570      	push	{r4, r5, r6, lr}
    8d98:	4c06      	ldr	r4, [pc, #24]	; (8db4 <_close_r+0x20>)
    8d9a:	0005      	movs	r5, r0
    8d9c:	0008      	movs	r0, r1
    8d9e:	6023      	str	r3, [r4, #0]
    8da0:	f7fc f976 	bl	5090 <_close>
    8da4:	1c43      	adds	r3, r0, #1
    8da6:	d103      	bne.n	8db0 <_close_r+0x1c>
    8da8:	6823      	ldr	r3, [r4, #0]
    8daa:	2b00      	cmp	r3, #0
    8dac:	d000      	beq.n	8db0 <_close_r+0x1c>
    8dae:	602b      	str	r3, [r5, #0]
    8db0:	bd70      	pop	{r4, r5, r6, pc}
    8db2:	46c0      	nop			; (mov r8, r8)
    8db4:	20000b3c 	.word	0x20000b3c

00008db8 <_fstat_r>:
    8db8:	2300      	movs	r3, #0
    8dba:	b570      	push	{r4, r5, r6, lr}
    8dbc:	4c06      	ldr	r4, [pc, #24]	; (8dd8 <_fstat_r+0x20>)
    8dbe:	0005      	movs	r5, r0
    8dc0:	0008      	movs	r0, r1
    8dc2:	0011      	movs	r1, r2
    8dc4:	6023      	str	r3, [r4, #0]
    8dc6:	f7fc f967 	bl	5098 <_fstat>
    8dca:	1c43      	adds	r3, r0, #1
    8dcc:	d103      	bne.n	8dd6 <_fstat_r+0x1e>
    8dce:	6823      	ldr	r3, [r4, #0]
    8dd0:	2b00      	cmp	r3, #0
    8dd2:	d000      	beq.n	8dd6 <_fstat_r+0x1e>
    8dd4:	602b      	str	r3, [r5, #0]
    8dd6:	bd70      	pop	{r4, r5, r6, pc}
    8dd8:	20000b3c 	.word	0x20000b3c

00008ddc <_isatty_r>:
    8ddc:	2300      	movs	r3, #0
    8dde:	b570      	push	{r4, r5, r6, lr}
    8de0:	4c06      	ldr	r4, [pc, #24]	; (8dfc <_isatty_r+0x20>)
    8de2:	0005      	movs	r5, r0
    8de4:	0008      	movs	r0, r1
    8de6:	6023      	str	r3, [r4, #0]
    8de8:	f7fc f95c 	bl	50a4 <_isatty>
    8dec:	1c43      	adds	r3, r0, #1
    8dee:	d103      	bne.n	8df8 <_isatty_r+0x1c>
    8df0:	6823      	ldr	r3, [r4, #0]
    8df2:	2b00      	cmp	r3, #0
    8df4:	d000      	beq.n	8df8 <_isatty_r+0x1c>
    8df6:	602b      	str	r3, [r5, #0]
    8df8:	bd70      	pop	{r4, r5, r6, pc}
    8dfa:	46c0      	nop			; (mov r8, r8)
    8dfc:	20000b3c 	.word	0x20000b3c

00008e00 <_lseek_r>:
    8e00:	b570      	push	{r4, r5, r6, lr}
    8e02:	0005      	movs	r5, r0
    8e04:	0008      	movs	r0, r1
    8e06:	0011      	movs	r1, r2
    8e08:	2200      	movs	r2, #0
    8e0a:	4c06      	ldr	r4, [pc, #24]	; (8e24 <_lseek_r+0x24>)
    8e0c:	6022      	str	r2, [r4, #0]
    8e0e:	001a      	movs	r2, r3
    8e10:	f7fc f94a 	bl	50a8 <_lseek>
    8e14:	1c43      	adds	r3, r0, #1
    8e16:	d103      	bne.n	8e20 <_lseek_r+0x20>
    8e18:	6823      	ldr	r3, [r4, #0]
    8e1a:	2b00      	cmp	r3, #0
    8e1c:	d000      	beq.n	8e20 <_lseek_r+0x20>
    8e1e:	602b      	str	r3, [r5, #0]
    8e20:	bd70      	pop	{r4, r5, r6, pc}
    8e22:	46c0      	nop			; (mov r8, r8)
    8e24:	20000b3c 	.word	0x20000b3c

00008e28 <memchr>:
    8e28:	b2c9      	uxtb	r1, r1
    8e2a:	1882      	adds	r2, r0, r2
    8e2c:	4290      	cmp	r0, r2
    8e2e:	d101      	bne.n	8e34 <memchr+0xc>
    8e30:	2000      	movs	r0, #0
    8e32:	4770      	bx	lr
    8e34:	7803      	ldrb	r3, [r0, #0]
    8e36:	428b      	cmp	r3, r1
    8e38:	d0fb      	beq.n	8e32 <memchr+0xa>
    8e3a:	3001      	adds	r0, #1
    8e3c:	e7f6      	b.n	8e2c <memchr+0x4>

00008e3e <__malloc_lock>:
    8e3e:	4770      	bx	lr

00008e40 <__malloc_unlock>:
    8e40:	4770      	bx	lr
	...

00008e44 <_read_r>:
    8e44:	b570      	push	{r4, r5, r6, lr}
    8e46:	0005      	movs	r5, r0
    8e48:	0008      	movs	r0, r1
    8e4a:	0011      	movs	r1, r2
    8e4c:	2200      	movs	r2, #0
    8e4e:	4c06      	ldr	r4, [pc, #24]	; (8e68 <_read_r+0x24>)
    8e50:	6022      	str	r2, [r4, #0]
    8e52:	001a      	movs	r2, r3
    8e54:	f7fc f8c8 	bl	4fe8 <_read>
    8e58:	1c43      	adds	r3, r0, #1
    8e5a:	d103      	bne.n	8e64 <_read_r+0x20>
    8e5c:	6823      	ldr	r3, [r4, #0]
    8e5e:	2b00      	cmp	r3, #0
    8e60:	d000      	beq.n	8e64 <_read_r+0x20>
    8e62:	602b      	str	r3, [r5, #0]
    8e64:	bd70      	pop	{r4, r5, r6, pc}
    8e66:	46c0      	nop			; (mov r8, r8)
    8e68:	20000b3c 	.word	0x20000b3c
    8e6c:	00002a38 	.word	0x00002a38
    8e70:	000028fa 	.word	0x000028fa
    8e74:	000028fa 	.word	0x000028fa
    8e78:	000028fa 	.word	0x000028fa
    8e7c:	000028fa 	.word	0x000028fa
    8e80:	000029c6 	.word	0x000029c6
    8e84:	000028fa 	.word	0x000028fa
    8e88:	000028fa 	.word	0x000028fa
    8e8c:	000028fa 	.word	0x000028fa
    8e90:	000028fa 	.word	0x000028fa
    8e94:	000028fa 	.word	0x000028fa
    8e98:	000028fa 	.word	0x000028fa
    8e9c:	000028fa 	.word	0x000028fa
    8ea0:	000028fa 	.word	0x000028fa
    8ea4:	000028fa 	.word	0x000028fa
    8ea8:	00002a22 	.word	0x00002a22
    8eac:	0000294a 	.word	0x0000294a
    8eb0:	000028fa 	.word	0x000028fa
    8eb4:	000028fa 	.word	0x000028fa
    8eb8:	000028fa 	.word	0x000028fa
    8ebc:	000028fa 	.word	0x000028fa
    8ec0:	00002932 	.word	0x00002932
    8ec4:	42000000 	.word	0x42000000
    8ec8:	42000400 	.word	0x42000400
    8ecc:	42000800 	.word	0x42000800
    8ed0:	42000c00 	.word	0x42000c00
    8ed4:	42001000 	.word	0x42001000
    8ed8:	43000400 	.word	0x43000400
    8edc:	000044fe 	.word	0x000044fe
    8ee0:	00004516 	.word	0x00004516
    8ee4:	00004516 	.word	0x00004516
    8ee8:	000044c2 	.word	0x000044c2
    8eec:	000044c2 	.word	0x000044c2
    8ef0:	000044c8 	.word	0x000044c8
    8ef4:	000044ce 	.word	0x000044ce
    8ef8:	000044de 	.word	0x000044de
    8efc:	00004504 	.word	0x00004504
    8f00:	00004dca 	.word	0x00004dca
    8f04:	00004dc0 	.word	0x00004dc0
    8f08:	00004db6 	.word	0x00004db6
    8f0c:	00004c32 	.word	0x00004c32
    8f10:	00004dd4 	.word	0x00004dd4
    8f14:	00004ea0 	.word	0x00004ea0
    8f18:	00004e74 	.word	0x00004e74
    8f1c:	00004e6a 	.word	0x00004e6a
    8f20:	00004e60 	.word	0x00004e60
    8f24:	00004e56 	.word	0x00004e56
    8f28:	42002000 	.word	0x42002000
    8f2c:	42002400 	.word	0x42002400
    8f30:	43000800 	.word	0x43000800
    8f34:	00000002 	.word	0x00000002
    8f38:	00000100 	.word	0x00000100
    8f3c:	00000002 	.word	0x00000002
    8f40:	00000200 	.word	0x00000200
    8f44:	00000003 	.word	0x00000003
    8f48:	00000004 	.word	0x00000004
    8f4c:	4a325b1b 	.word	0x4a325b1b
    8f50:	00200a0d 	.word	0x00200a0d
    8f54:	614c0a0d 	.word	0x614c0a0d
    8f58:	72207473 	.word	0x72207473
    8f5c:	74657365 	.word	0x74657365
    8f60:	75616320 	.word	0x75616320
    8f64:	203a6573 	.word	0x203a6573
    8f68:	00000000 	.word	0x00000000
    8f6c:	74737953 	.word	0x74737953
    8f70:	52206d65 	.word	0x52206d65
    8f74:	74657365 	.word	0x74657365
    8f78:	71655220 	.word	0x71655220
    8f7c:	74736575 	.word	0x74736575
    8f80:	0000000d 	.word	0x0000000d
    8f84:	63746157 	.word	0x63746157
    8f88:	676f6468 	.word	0x676f6468
    8f8c:	73655220 	.word	0x73655220
    8f90:	000d7465 	.word	0x000d7465
    8f94:	65747845 	.word	0x65747845
    8f98:	6c616e72 	.word	0x6c616e72
    8f9c:	73655220 	.word	0x73655220
    8fa0:	000d7465 	.word	0x000d7465
    8fa4:	776f7242 	.word	0x776f7242
    8fa8:	754f206e 	.word	0x754f206e
    8fac:	33332074 	.word	0x33332074
    8fb0:	74654420 	.word	0x74654420
    8fb4:	6f746365 	.word	0x6f746365
    8fb8:	65522072 	.word	0x65522072
    8fbc:	0d746573 	.word	0x0d746573
    8fc0:	00000000 	.word	0x00000000
    8fc4:	776f7242 	.word	0x776f7242
    8fc8:	754f206e 	.word	0x754f206e
    8fcc:	32312074 	.word	0x32312074
    8fd0:	74654420 	.word	0x74654420
    8fd4:	6f746365 	.word	0x6f746365
    8fd8:	65522072 	.word	0x65522072
    8fdc:	0d746573 	.word	0x0d746573
    8fe0:	00000000 	.word	0x00000000
    8fe4:	65776f50 	.word	0x65776f50
    8fe8:	6e4f2d72 	.word	0x6e4f2d72
    8fec:	73655220 	.word	0x73655220
    8ff0:	000d7465 	.word	0x000d7465
    8ff4:	74696157 	.word	0x74696157
    8ff8:	20676e69 	.word	0x20676e69
    8ffc:	4a206f74 	.word	0x4a206f74
    9000:	0d6e696f 	.word	0x0d6e696f
    9004:	00000000 	.word	0x00000000
    9008:	61746f54 	.word	0x61746f54
    900c:	6f43206c 	.word	0x6f43206c
    9010:	63656e6e 	.word	0x63656e6e
    9014:	6e6f6974 	.word	0x6e6f6974
    9018:	64253a73 	.word	0x64253a73
    901c:	00000a0d 	.word	0x00000a0d
    9020:	6e696f6a 	.word	0x6e696f6a
    9024:	61206465 	.word	0x61206465
    9028:	20612073 	.word	0x20612073
    902c:	20646e45 	.word	0x20646e45
    9030:	69766544 	.word	0x69766544
    9034:	2e2e6563 	.word	0x2e2e6563
    9038:	000d2e2e 	.word	0x000d2e2e
    903c:	00006998 	.word	0x00006998
    9040:	0000697a 	.word	0x0000697a
    9044:	00006934 	.word	0x00006934
    9048:	00006852 	.word	0x00006852
    904c:	00006934 	.word	0x00006934
    9050:	0000696c 	.word	0x0000696c
    9054:	00006934 	.word	0x00006934
    9058:	00006852 	.word	0x00006852
    905c:	0000697a 	.word	0x0000697a
    9060:	0000697a 	.word	0x0000697a
    9064:	0000696c 	.word	0x0000696c
    9068:	00006852 	.word	0x00006852
    906c:	0000684a 	.word	0x0000684a
    9070:	0000684a 	.word	0x0000684a
    9074:	0000684a 	.word	0x0000684a
    9078:	00006bb0 	.word	0x00006bb0
    907c:	00006ff8 	.word	0x00006ff8
    9080:	00006eb8 	.word	0x00006eb8
    9084:	00006eb8 	.word	0x00006eb8
    9088:	00006eb4 	.word	0x00006eb4
    908c:	00006fd0 	.word	0x00006fd0
    9090:	00006fd0 	.word	0x00006fd0
    9094:	00006fc2 	.word	0x00006fc2
    9098:	00006eb4 	.word	0x00006eb4
    909c:	00006fd0 	.word	0x00006fd0
    90a0:	00006fc2 	.word	0x00006fc2
    90a4:	00006fd0 	.word	0x00006fd0
    90a8:	00006eb4 	.word	0x00006eb4
    90ac:	00006fd8 	.word	0x00006fd8
    90b0:	00006fd8 	.word	0x00006fd8
    90b4:	00006fd8 	.word	0x00006fd8
    90b8:	000071dc 	.word	0x000071dc

000090bc <_global_impure_ptr>:
    90bc:	20000028                                (.. 

000090c0 <__sf_fake_stderr>:
	...

000090e0 <__sf_fake_stdin>:
	...

00009100 <__sf_fake_stdout>:
	...
    9120:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    9130:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    9140:	31300046 35343332 39383736 64636261     F.0123456789abcd
    9150:	00006665                                ef..

00009154 <_init>:
    9154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9156:	46c0      	nop			; (mov r8, r8)
    9158:	bcf8      	pop	{r3, r4, r5, r6, r7}
    915a:	bc08      	pop	{r3}
    915c:	469e      	mov	lr, r3
    915e:	4770      	bx	lr

00009160 <__init_array_start>:
    9160:	000000dd 	.word	0x000000dd

00009164 <_fini>:
    9164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9166:	46c0      	nop			; (mov r8, r8)
    9168:	bcf8      	pop	{r3, r4, r5, r6, r7}
    916a:	bc08      	pop	{r3}
    916c:	469e      	mov	lr, r3
    916e:	4770      	bx	lr

00009170 <__fini_array_start>:
    9170:	000000b5 	.word	0x000000b5
