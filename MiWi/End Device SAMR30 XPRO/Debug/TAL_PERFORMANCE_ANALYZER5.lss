
TAL_PERFORMANCE_ANALYZER5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000073a8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000009c  20000000  000073a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  0002009c  2**0
                  CONTENTS
  3 .bss          00000830  2000009c  00007444  0002009c  2**2
                  ALLOC
  4 .stack        00002004  200008cc  00007c74  0002009c  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
  7 .debug_info   0003f01e  00000000  00000000  0002011d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000689c  00000000  00000000  0005f13b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00010cef  00000000  00000000  000659d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b88  00000000  00000000  000766c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000fb0  00000000  00000000  0007724e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00027c7a  00000000  00000000  000781fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000211f0  00000000  00000000  0009fe78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009e29d  00000000  00000000  000c1068  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002588  00000000  00000000  0015f308  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200028d0 	.word	0x200028d0
       4:	000049a5 	.word	0x000049a5
       8:	000049a1 	.word	0x000049a1
       c:	000049a1 	.word	0x000049a1
	...
      2c:	000049a1 	.word	0x000049a1
	...
      38:	000049a1 	.word	0x000049a1
      3c:	000049a1 	.word	0x000049a1
      40:	000049a1 	.word	0x000049a1
      44:	000049a1 	.word	0x000049a1
      48:	000049a1 	.word	0x000049a1
      4c:	00002c21 	.word	0x00002c21
      50:	000049a1 	.word	0x000049a1
      54:	000049a1 	.word	0x000049a1
      58:	000049a1 	.word	0x000049a1
      5c:	000049a1 	.word	0x000049a1
      60:	00003259 	.word	0x00003259
      64:	00003269 	.word	0x00003269
      68:	00003279 	.word	0x00003279
      6c:	00003289 	.word	0x00003289
      70:	00003299 	.word	0x00003299
      74:	000032a9 	.word	0x000032a9
      78:	000049a1 	.word	0x000049a1
      7c:	000049a1 	.word	0x000049a1
      80:	000049a1 	.word	0x000049a1
      84:	000045b1 	.word	0x000045b1
      88:	000045c1 	.word	0x000045c1
	...
      94:	000045d1 	.word	0x000045d1
      98:	000049a1 	.word	0x000049a1
      9c:	000049a1 	.word	0x000049a1
      a0:	00000000 	.word	0x00000000
      a4:	000049a1 	.word	0x000049a1
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000009c 	.word	0x2000009c
      d4:	00000000 	.word	0x00000000
      d8:	000073a8 	.word	0x000073a8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000a0 	.word	0x200000a0
     108:	000073a8 	.word	0x000073a8
     10c:	000073a8 	.word	0x000073a8
     110:	00000000 	.word	0x00000000

00000114 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	b083      	sub	sp, #12
     118:	466b      	mov	r3, sp
     11a:	1ddf      	adds	r7, r3, #7
     11c:	71d8      	strb	r0, [r3, #7]
	spi_select_slave(&ssd1306_master, &ssd1306_slave, true);
     11e:	4e0b      	ldr	r6, [pc, #44]	; (14c <ssd1306_write_command+0x38>)
     120:	4c0b      	ldr	r4, [pc, #44]	; (150 <ssd1306_write_command+0x3c>)
     122:	2201      	movs	r2, #1
     124:	0031      	movs	r1, r6
     126:	0020      	movs	r0, r4
     128:	4d0a      	ldr	r5, [pc, #40]	; (154 <ssd1306_write_command+0x40>)
     12a:	47a8      	blx	r5

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     12c:	2280      	movs	r2, #128	; 0x80
     12e:	0192      	lsls	r2, r2, #6
     130:	4b09      	ldr	r3, [pc, #36]	; (158 <ssd1306_write_command+0x44>)
     132:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(SSD1306_DC_PIN, false);
	spi_write_buffer_wait(&ssd1306_master, &command, 1);
     134:	2201      	movs	r2, #1
     136:	0039      	movs	r1, r7
     138:	0020      	movs	r0, r4
     13a:	4b08      	ldr	r3, [pc, #32]	; (15c <ssd1306_write_command+0x48>)
     13c:	4798      	blx	r3
	spi_select_slave(&ssd1306_master, &ssd1306_slave, false);
     13e:	2200      	movs	r2, #0
     140:	0031      	movs	r1, r6
     142:	0020      	movs	r0, r4
     144:	47a8      	blx	r5
}
     146:	b003      	add	sp, #12
     148:	bdf0      	pop	{r4, r5, r6, r7, pc}
     14a:	46c0      	nop			; (mov r8, r8)
     14c:	200004a4 	.word	0x200004a4
     150:	20000498 	.word	0x20000498
     154:	00003581 	.word	0x00003581
     158:	40002800 	.word	0x40002800
     15c:	00003671 	.word	0x00003671

00000160 <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
     160:	b530      	push	{r4, r5, lr}
     162:	b091      	sub	sp, #68	; 0x44
	// Initialize delay routine
	delay_init();
     164:	4b5d      	ldr	r3, [pc, #372]	; (2dc <ssd1306_init+0x17c>)
     166:	4798      	blx	r3
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     168:	4c5d      	ldr	r4, [pc, #372]	; (2e0 <ssd1306_init+0x180>)
     16a:	2323      	movs	r3, #35	; 0x23
     16c:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     16e:	2300      	movs	r3, #0
     170:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     172:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     174:	a902      	add	r1, sp, #8
     176:	2201      	movs	r2, #1
     178:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     17a:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     17c:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     17e:	2023      	movs	r0, #35	; 0x23
     180:	4b58      	ldr	r3, [pc, #352]	; (2e4 <ssd1306_init+0x184>)
     182:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     184:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     186:	09da      	lsrs	r2, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     188:	2100      	movs	r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     18a:	2a00      	cmp	r2, #0
     18c:	d104      	bne.n	198 <ssd1306_init+0x38>
		return &(ports[port_index]->Group[group_index]);
     18e:	0959      	lsrs	r1, r3, #5
     190:	01c9      	lsls	r1, r1, #7
     192:	4a55      	ldr	r2, [pc, #340]	; (2e8 <ssd1306_init+0x188>)
     194:	4694      	mov	ip, r2
     196:	4461      	add	r1, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     198:	221f      	movs	r2, #31
     19a:	4013      	ands	r3, r2
     19c:	3a1e      	subs	r2, #30
     19e:	0010      	movs	r0, r2
     1a0:	4098      	lsls	r0, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     1a2:	6188      	str	r0, [r1, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     1a4:	ac02      	add	r4, sp, #8
     1a6:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     1a8:	2300      	movs	r3, #0
     1aa:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     1ac:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     1ae:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
     1b0:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
     1b2:	74a2      	strb	r2, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     1b4:	74e2      	strb	r2, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     1b6:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     1b8:	3223      	adds	r2, #35	; 0x23
     1ba:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     1bc:	3a18      	subs	r2, #24
     1be:	2100      	movs	r1, #0
     1c0:	a808      	add	r0, sp, #32
     1c2:	4b4a      	ldr	r3, [pc, #296]	; (2ec <ssd1306_init+0x18c>)
     1c4:	4798      	blx	r3
	slave_config.ss_pin = SSD1306_CS_PIN;
	spi_attach_slave(&ssd1306_slave, &slave_config);

	spi_get_config_defaults(&config);

	config.mux_setting = SSD1306_SPI_PINMUX_SETTING;
     1c6:	2380      	movs	r3, #128	; 0x80
     1c8:	025b      	lsls	r3, r3, #9
     1ca:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SSD1306_SPI_PINMUX_PAD0;
     1cc:	4b48      	ldr	r3, [pc, #288]	; (2f0 <ssd1306_init+0x190>)
     1ce:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SSD1306_SPI_PINMUX_PAD1;
     1d0:	2301      	movs	r3, #1
     1d2:	425b      	negs	r3, r3
     1d4:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SSD1306_SPI_PINMUX_PAD2;
     1d6:	4b47      	ldr	r3, [pc, #284]	; (2f4 <ssd1306_init+0x194>)
     1d8:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SSD1306_SPI_PINMUX_PAD3;
     1da:	4b47      	ldr	r3, [pc, #284]	; (2f8 <ssd1306_init+0x198>)
     1dc:	6363      	str	r3, [r4, #52]	; 0x34
	config.mode_specific.master.baudrate = SSD1306_CLOCK_SPEED;
     1de:	4b47      	ldr	r3, [pc, #284]	; (2fc <ssd1306_init+0x19c>)
     1e0:	61a3      	str	r3, [r4, #24]

	spi_init(&ssd1306_master, SSD1306_SPI, &config);
     1e2:	4d47      	ldr	r5, [pc, #284]	; (300 <ssd1306_init+0x1a0>)
     1e4:	0022      	movs	r2, r4
     1e6:	4947      	ldr	r1, [pc, #284]	; (304 <ssd1306_init+0x1a4>)
     1e8:	0028      	movs	r0, r5
     1ea:	4b47      	ldr	r3, [pc, #284]	; (308 <ssd1306_init+0x1a8>)
     1ec:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     1ee:	682a      	ldr	r2, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     1f0:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     1f2:	2b00      	cmp	r3, #0
     1f4:	d1fc      	bne.n	1f0 <ssd1306_init+0x90>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     1f6:	6811      	ldr	r1, [r2, #0]
     1f8:	3302      	adds	r3, #2
     1fa:	430b      	orrs	r3, r1
     1fc:	6013      	str	r3, [r2, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1fe:	ac01      	add	r4, sp, #4
     200:	2301      	movs	r3, #1
     202:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
     204:	2200      	movs	r2, #0
     206:	70a2      	strb	r2, [r4, #2]
	spi_enable(&ssd1306_master);

	struct port_config pin;
	port_get_config_defaults(&pin);
	pin.direction = PORT_PIN_DIR_OUTPUT;
     208:	7023      	strb	r3, [r4, #0]

	port_pin_set_config(SSD1306_DC_PIN, &pin);
     20a:	0021      	movs	r1, r4
     20c:	200d      	movs	r0, #13
     20e:	4d35      	ldr	r5, [pc, #212]	; (2e4 <ssd1306_init+0x184>)
     210:	47a8      	blx	r5
	port_pin_set_config(SSD1306_RES_PIN, &pin);
     212:	0021      	movs	r1, r4
     214:	2017      	movs	r0, #23
     216:	47a8      	blx	r5
 *
 * This functions will reset the OLED controller by setting the reset pin low.
 */
static inline void ssd1306_hard_reset(void)
{
	uint32_t delay_10us = 10 * (system_gclk_gen_get_hz(0)/1000000);
     218:	2000      	movs	r0, #0
     21a:	4b3c      	ldr	r3, [pc, #240]	; (30c <ssd1306_init+0x1ac>)
     21c:	4798      	blx	r3
     21e:	4937      	ldr	r1, [pc, #220]	; (2fc <ssd1306_init+0x19c>)
     220:	4b3b      	ldr	r3, [pc, #236]	; (310 <ssd1306_init+0x1b0>)
     222:	4798      	blx	r3
     224:	0083      	lsls	r3, r0, #2
     226:	1818      	adds	r0, r3, r0
     228:	0040      	lsls	r0, r0, #1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     22a:	2280      	movs	r2, #128	; 0x80
     22c:	0412      	lsls	r2, r2, #16
     22e:	4b2e      	ldr	r3, [pc, #184]	; (2e8 <ssd1306_init+0x188>)
     230:	615a      	str	r2, [r3, #20]
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     232:	2800      	cmp	r0, #0
     234:	d04b      	beq.n	2ce <ssd1306_init+0x16e>
		SysTick->LOAD = n;
     236:	4b37      	ldr	r3, [pc, #220]	; (314 <ssd1306_init+0x1b4>)
     238:	6058      	str	r0, [r3, #4]
		SysTick->VAL = 0;
     23a:	2200      	movs	r2, #0
     23c:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     23e:	0019      	movs	r1, r3
     240:	2280      	movs	r2, #128	; 0x80
     242:	0252      	lsls	r2, r2, #9
     244:	680b      	ldr	r3, [r1, #0]
     246:	4213      	tst	r3, r2
     248:	d0fc      	beq.n	244 <ssd1306_init+0xe4>
     24a:	e034      	b.n	2b6 <ssd1306_init+0x156>
     24c:	680b      	ldr	r3, [r1, #0]
     24e:	4213      	tst	r3, r2
     250:	d0fc      	beq.n	24c <ssd1306_init+0xec>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     252:	2280      	movs	r2, #128	; 0x80
     254:	0412      	lsls	r2, r2, #16
     256:	4b24      	ldr	r3, [pc, #144]	; (2e8 <ssd1306_init+0x188>)
     258:	619a      	str	r2, [r3, #24]

	// Set the reset pin to the default state
	port_pin_set_output_level(SSD1306_RES_PIN, true);

	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
     25a:	20a8      	movs	r0, #168	; 0xa8
     25c:	4c2e      	ldr	r4, [pc, #184]	; (318 <ssd1306_init+0x1b8>)
     25e:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
     260:	201f      	movs	r0, #31
     262:	47a0      	blx	r4

	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
     264:	20d3      	movs	r0, #211	; 0xd3
     266:	47a0      	blx	r4
	ssd1306_write_command(0x00);
     268:	2000      	movs	r0, #0
     26a:	47a0      	blx	r4

	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
     26c:	2040      	movs	r0, #64	; 0x40
     26e:	47a0      	blx	r4

	// Set Column Address 0 Mapped to SEG0
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
     270:	20a1      	movs	r0, #161	; 0xa1
     272:	47a0      	blx	r4

	// Set COM/Row Scan Scan from COM63 to 0
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
     274:	20c8      	movs	r0, #200	; 0xc8
     276:	47a0      	blx	r4

	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
     278:	20da      	movs	r0, #218	; 0xda
     27a:	47a0      	blx	r4
	ssd1306_write_command(0x02);
     27c:	2002      	movs	r0, #2
     27e:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
     280:	2081      	movs	r0, #129	; 0x81
     282:	47a0      	blx	r4
	ssd1306_write_command(contrast);
     284:	208f      	movs	r0, #143	; 0x8f
     286:	47a0      	blx	r4

	ssd1306_set_contrast(0x8F);

	// Disable Entire display On
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
     288:	20a4      	movs	r0, #164	; 0xa4
     28a:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
     28c:	20a6      	movs	r0, #166	; 0xa6
     28e:	47a0      	blx	r4

	ssd1306_display_invert_disable();

	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
     290:	20d5      	movs	r0, #213	; 0xd5
     292:	47a0      	blx	r4
	ssd1306_write_command(0x80);
     294:	2080      	movs	r0, #128	; 0x80
     296:	47a0      	blx	r4

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
     298:	208d      	movs	r0, #141	; 0x8d
     29a:	47a0      	blx	r4
	ssd1306_write_command(0x14);
     29c:	2014      	movs	r0, #20
     29e:	47a0      	blx	r4

	// Set VCOMH Deselect Level
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
     2a0:	20db      	movs	r0, #219	; 0xdb
     2a2:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
     2a4:	2040      	movs	r0, #64	; 0x40
     2a6:	47a0      	blx	r4

	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
     2a8:	20d9      	movs	r0, #217	; 0xd9
     2aa:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
     2ac:	20f1      	movs	r0, #241	; 0xf1
     2ae:	47a0      	blx	r4
 *
 * This function will turn on the OLED.
 */
static inline void ssd1306_display_on(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
     2b0:	20af      	movs	r0, #175	; 0xaf
     2b2:	47a0      	blx	r4

	ssd1306_display_on();
}
     2b4:	e010      	b.n	2d8 <ssd1306_init+0x178>
     2b6:	2280      	movs	r2, #128	; 0x80
     2b8:	0412      	lsls	r2, r2, #16
     2ba:	4b0b      	ldr	r3, [pc, #44]	; (2e8 <ssd1306_init+0x188>)
     2bc:	619a      	str	r2, [r3, #24]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     2be:	4b15      	ldr	r3, [pc, #84]	; (314 <ssd1306_init+0x1b4>)
     2c0:	6058      	str	r0, [r3, #4]
		SysTick->VAL = 0;
     2c2:	2200      	movs	r2, #0
     2c4:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     2c6:	0019      	movs	r1, r3
     2c8:	2280      	movs	r2, #128	; 0x80
     2ca:	0252      	lsls	r2, r2, #9
     2cc:	e7be      	b.n	24c <ssd1306_init+0xec>
     2ce:	2280      	movs	r2, #128	; 0x80
     2d0:	0412      	lsls	r2, r2, #16
     2d2:	4b05      	ldr	r3, [pc, #20]	; (2e8 <ssd1306_init+0x188>)
     2d4:	619a      	str	r2, [r3, #24]
     2d6:	e7bc      	b.n	252 <ssd1306_init+0xf2>
     2d8:	b011      	add	sp, #68	; 0x44
     2da:	bd30      	pop	{r4, r5, pc}
     2dc:	00002975 	.word	0x00002975
     2e0:	200004a4 	.word	0x200004a4
     2e4:	00002dcd 	.word	0x00002dcd
     2e8:	40002800 	.word	0x40002800
     2ec:	00005e57 	.word	0x00005e57
     2f0:	00220003 	.word	0x00220003
     2f4:	00360003 	.word	0x00360003
     2f8:	00370003 	.word	0x00370003
     2fc:	000f4240 	.word	0x000f4240
     300:	20000498 	.word	0x20000498
     304:	43000400 	.word	0x43000400
     308:	000032b9 	.word	0x000032b9
     30c:	0000431d 	.word	0x0000431d
     310:	00005ab5 	.word	0x00005ab5
     314:	e000e010 	.word	0xe000e010
     318:	00000115 	.word	0x00000115

0000031c <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
     31c:	b5f0      	push	{r4, r5, r6, r7, lr}
     31e:	b083      	sub	sp, #12
     320:	466b      	mov	r3, sp
     322:	1ddf      	adds	r7, r3, #7
     324:	71d8      	strb	r0, [r3, #7]
	spi_select_slave(&ssd1306_master, &ssd1306_slave, true);
     326:	4e0b      	ldr	r6, [pc, #44]	; (354 <ssd1306_write_data+0x38>)
     328:	4c0b      	ldr	r4, [pc, #44]	; (358 <ssd1306_write_data+0x3c>)
     32a:	2201      	movs	r2, #1
     32c:	0031      	movs	r1, r6
     32e:	0020      	movs	r0, r4
     330:	4d0a      	ldr	r5, [pc, #40]	; (35c <ssd1306_write_data+0x40>)
     332:	47a8      	blx	r5
     334:	2280      	movs	r2, #128	; 0x80
     336:	0192      	lsls	r2, r2, #6
     338:	4b09      	ldr	r3, [pc, #36]	; (360 <ssd1306_write_data+0x44>)
     33a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(SSD1306_DC_PIN, true);
	spi_write_buffer_wait(&ssd1306_master, &data, 1);
     33c:	2201      	movs	r2, #1
     33e:	0039      	movs	r1, r7
     340:	0020      	movs	r0, r4
     342:	4b08      	ldr	r3, [pc, #32]	; (364 <ssd1306_write_data+0x48>)
     344:	4798      	blx	r3
	spi_select_slave(&ssd1306_master, &ssd1306_slave, false);
     346:	2200      	movs	r2, #0
     348:	0031      	movs	r1, r6
     34a:	0020      	movs	r0, r4
     34c:	47a8      	blx	r5
}
     34e:	b003      	add	sp, #12
     350:	bdf0      	pop	{r4, r5, r6, r7, pc}
     352:	46c0      	nop			; (mov r8, r8)
     354:	200004a4 	.word	0x200004a4
     358:	20000498 	.word	0x20000498
     35c:	00003581 	.word	0x00003581
     360:	40002800 	.word	0x40002800
     364:	00003671 	.word	0x00003671

00000368 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
     368:	4b01      	ldr	r3, [pc, #4]	; (370 <gfx_mono_set_framebuffer+0x8>)
     36a:	6018      	str	r0, [r3, #0]
}
     36c:	4770      	bx	lr
     36e:	46c0      	nop			; (mov r8, r8)
     370:	200000b8 	.word	0x200000b8

00000374 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
     374:	4b02      	ldr	r3, [pc, #8]	; (380 <gfx_mono_framebuffer_put_byte+0xc>)
     376:	681b      	ldr	r3, [r3, #0]
     378:	01c0      	lsls	r0, r0, #7
     37a:	1818      	adds	r0, r3, r0
     37c:	5442      	strb	r2, [r0, r1]
}
     37e:	4770      	bx	lr
     380:	200000b8 	.word	0x200000b8

00000384 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
     384:	4b02      	ldr	r3, [pc, #8]	; (390 <gfx_mono_framebuffer_get_byte+0xc>)
     386:	681b      	ldr	r3, [r3, #0]
     388:	01c0      	lsls	r0, r0, #7
     38a:	1818      	adds	r0, r3, r0
     38c:	5c40      	ldrb	r0, [r0, r1]
}
     38e:	4770      	bx	lr
     390:	200000b8 	.word	0x200000b8

00000394 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
     394:	b5f0      	push	{r4, r5, r6, r7, lr}
     396:	4657      	mov	r7, sl
     398:	464e      	mov	r6, r9
     39a:	4645      	mov	r5, r8
     39c:	b4e0      	push	{r5, r6, r7}
     39e:	b082      	sub	sp, #8
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
     3a0:	1884      	adds	r4, r0, r2
     3a2:	2c80      	cmp	r4, #128	; 0x80
     3a4:	dd03      	ble.n	3ae <gfx_mono_generic_draw_horizontal_line+0x1a>
		length = GFX_MONO_LCD_WIDTH - x;
     3a6:	2480      	movs	r4, #128	; 0x80
     3a8:	4264      	negs	r4, r4
     3aa:	1a24      	subs	r4, r4, r0
     3ac:	b2e2      	uxtb	r2, r4
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
     3ae:	2a00      	cmp	r2, #0
     3b0:	d055      	beq.n	45e <gfx_mono_generic_draw_horizontal_line+0xca>
	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
		length = GFX_MONO_LCD_WIDTH - x;
	}

	page = y / 8;
     3b2:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
     3b4:	00ec      	lsls	r4, r5, #3
     3b6:	1b09      	subs	r1, r1, r4
     3b8:	2401      	movs	r4, #1
     3ba:	408c      	lsls	r4, r1
     3bc:	46a1      	mov	r9, r4
     3be:	1c21      	adds	r1, r4, #0
     3c0:	466c      	mov	r4, sp
     3c2:	71e1      	strb	r1, [r4, #7]
     3c4:	79e1      	ldrb	r1, [r4, #7]
     3c6:	4688      	mov	r8, r1
	if (length == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
     3c8:	2b01      	cmp	r3, #1
     3ca:	d004      	beq.n	3d6 <gfx_mono_generic_draw_horizontal_line+0x42>
     3cc:	2b00      	cmp	r3, #0
     3ce:	d019      	beq.n	404 <gfx_mono_generic_draw_horizontal_line+0x70>
     3d0:	2b02      	cmp	r3, #2
     3d2:	d02e      	beq.n	432 <gfx_mono_generic_draw_horizontal_line+0x9e>
     3d4:	e043      	b.n	45e <gfx_mono_generic_draw_horizontal_line+0xca>
     3d6:	0014      	movs	r4, r2
     3d8:	1e47      	subs	r7, r0, #1
	case GFX_PIXEL_SET:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     3da:	4b24      	ldr	r3, [pc, #144]	; (46c <gfx_mono_generic_draw_horizontal_line+0xd8>)
     3dc:	469a      	mov	sl, r3
			temp |= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
     3de:	4b24      	ldr	r3, [pc, #144]	; (470 <gfx_mono_generic_draw_horizontal_line+0xdc>)
     3e0:	4699      	mov	r9, r3
     3e2:	19e6      	adds	r6, r4, r7
     3e4:	b2f6      	uxtb	r6, r6
	}

	switch (color) {
	case GFX_PIXEL_SET:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     3e6:	0031      	movs	r1, r6
     3e8:	0028      	movs	r0, r5
     3ea:	47d0      	blx	sl
			temp |= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
     3ec:	4643      	mov	r3, r8
     3ee:	4318      	orrs	r0, r3
     3f0:	b2c2      	uxtb	r2, r0
     3f2:	2300      	movs	r3, #0
     3f4:	0031      	movs	r1, r6
     3f6:	0028      	movs	r0, r5
     3f8:	47c8      	blx	r9
     3fa:	3c01      	subs	r4, #1
     3fc:	b2e4      	uxtb	r4, r4
		return;
	}

	switch (color) {
	case GFX_PIXEL_SET:
		while (length-- > 0) {
     3fe:	2c00      	cmp	r4, #0
     400:	d1ef      	bne.n	3e2 <gfx_mono_generic_draw_horizontal_line+0x4e>
     402:	e02c      	b.n	45e <gfx_mono_generic_draw_horizontal_line+0xca>
	if (length == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
     404:	0014      	movs	r4, r2
     406:	1e47      	subs	r7, r0, #1
		}
		break;

	case GFX_PIXEL_CLR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     408:	4b18      	ldr	r3, [pc, #96]	; (46c <gfx_mono_generic_draw_horizontal_line+0xd8>)
     40a:	469a      	mov	sl, r3
			temp &= ~pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
     40c:	4b18      	ldr	r3, [pc, #96]	; (470 <gfx_mono_generic_draw_horizontal_line+0xdc>)
     40e:	4698      	mov	r8, r3
     410:	19e6      	adds	r6, r4, r7
     412:	b2f6      	uxtb	r6, r6
		}
		break;

	case GFX_PIXEL_CLR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     414:	0031      	movs	r1, r6
     416:	0028      	movs	r0, r5
     418:	47d0      	blx	sl
			temp &= ~pixelmask;
     41a:	464b      	mov	r3, r9
     41c:	4398      	bics	r0, r3
			gfx_mono_put_byte(page, x + length, temp);
     41e:	b2c2      	uxtb	r2, r0
     420:	2300      	movs	r3, #0
     422:	0031      	movs	r1, r6
     424:	0028      	movs	r0, r5
     426:	47c0      	blx	r8
     428:	3c01      	subs	r4, #1
     42a:	b2e4      	uxtb	r4, r4
			gfx_mono_put_byte(page, x + length, temp);
		}
		break;

	case GFX_PIXEL_CLR:
		while (length-- > 0) {
     42c:	2c00      	cmp	r4, #0
     42e:	d1ef      	bne.n	410 <gfx_mono_generic_draw_horizontal_line+0x7c>
     430:	e015      	b.n	45e <gfx_mono_generic_draw_horizontal_line+0xca>
	if (length == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
     432:	0014      	movs	r4, r2
     434:	1e47      	subs	r7, r0, #1
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     436:	4b0d      	ldr	r3, [pc, #52]	; (46c <gfx_mono_generic_draw_horizontal_line+0xd8>)
     438:	469a      	mov	sl, r3
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
     43a:	4b0d      	ldr	r3, [pc, #52]	; (470 <gfx_mono_generic_draw_horizontal_line+0xdc>)
     43c:	4699      	mov	r9, r3
     43e:	19e6      	adds	r6, r4, r7
     440:	b2f6      	uxtb	r6, r6
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     442:	0031      	movs	r1, r6
     444:	0028      	movs	r0, r5
     446:	47d0      	blx	sl
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
     448:	4643      	mov	r3, r8
     44a:	4058      	eors	r0, r3
     44c:	b2c2      	uxtb	r2, r0
     44e:	2300      	movs	r3, #0
     450:	0031      	movs	r1, r6
     452:	0028      	movs	r0, r5
     454:	47c8      	blx	r9
     456:	3c01      	subs	r4, #1
     458:	b2e4      	uxtb	r4, r4
			gfx_mono_put_byte(page, x + length, temp);
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
     45a:	2c00      	cmp	r4, #0
     45c:	d1ef      	bne.n	43e <gfx_mono_generic_draw_horizontal_line+0xaa>
		break;

	default:
		break;
	}
}
     45e:	b002      	add	sp, #8
     460:	bc1c      	pop	{r2, r3, r4}
     462:	4690      	mov	r8, r2
     464:	4699      	mov	r9, r3
     466:	46a2      	mov	sl, r4
     468:	bdf0      	pop	{r4, r5, r6, r7, pc}
     46a:	46c0      	nop			; (mov r8, r8)
     46c:	000006c9 	.word	0x000006c9
     470:	000005bd 	.word	0x000005bd

00000474 <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     474:	b5f0      	push	{r4, r5, r6, r7, lr}
     476:	b083      	sub	sp, #12
     478:	9000      	str	r0, [sp, #0]
     47a:	9201      	str	r2, [sp, #4]
     47c:	aa08      	add	r2, sp, #32
     47e:	7817      	ldrb	r7, [r2, #0]
	if (height == 0) {
     480:	2b00      	cmp	r3, #0
     482:	d00c      	beq.n	49e <gfx_mono_generic_draw_filled_rect+0x2a>
     484:	001c      	movs	r4, r3
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
     486:	1e4e      	subs	r6, r1, #1
     488:	4d06      	ldr	r5, [pc, #24]	; (4a4 <gfx_mono_generic_draw_filled_rect+0x30>)
     48a:	19a1      	adds	r1, r4, r6
     48c:	b2c9      	uxtb	r1, r1
     48e:	003b      	movs	r3, r7
     490:	9a01      	ldr	r2, [sp, #4]
     492:	9800      	ldr	r0, [sp, #0]
     494:	47a8      	blx	r5
     496:	3c01      	subs	r4, #1
     498:	b2e4      	uxtb	r4, r4
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
     49a:	2c00      	cmp	r4, #0
     49c:	d1f5      	bne.n	48a <gfx_mono_generic_draw_filled_rect+0x16>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
     49e:	b003      	add	sp, #12
     4a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4a2:	46c0      	nop			; (mov r8, r8)
     4a4:	00000395 	.word	0x00000395

000004a8 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
     4a8:	b5f0      	push	{r4, r5, r6, r7, lr}
     4aa:	465f      	mov	r7, fp
     4ac:	4656      	mov	r6, sl
     4ae:	464d      	mov	r5, r9
     4b0:	4644      	mov	r4, r8
     4b2:	b4f0      	push	{r4, r5, r6, r7}
     4b4:	b085      	sub	sp, #20
     4b6:	0004      	movs	r4, r0
     4b8:	4688      	mov	r8, r1
     4ba:	0015      	movs	r5, r2
     4bc:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
     4be:	7a5b      	ldrb	r3, [r3, #9]
     4c0:	465a      	mov	r2, fp
     4c2:	7a12      	ldrb	r2, [r2, #8]
     4c4:	2100      	movs	r1, #0
     4c6:	9100      	str	r1, [sp, #0]
     4c8:	0029      	movs	r1, r5
     4ca:	4640      	mov	r0, r8
     4cc:	4e25      	ldr	r6, [pc, #148]	; (564 <gfx_mono_draw_char+0xbc>)
     4ce:	47b0      	blx	r6
			GFX_PIXEL_CLR);

	switch (font->type) {
     4d0:	465b      	mov	r3, fp
     4d2:	781b      	ldrb	r3, [r3, #0]
     4d4:	2b00      	cmp	r3, #0
     4d6:	d13d      	bne.n	554 <gfx_mono_draw_char+0xac>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
     4d8:	465b      	mov	r3, fp
     4da:	7a1b      	ldrb	r3, [r3, #8]
     4dc:	08de      	lsrs	r6, r3, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
     4de:	075b      	lsls	r3, r3, #29
     4e0:	d000      	beq.n	4e4 <gfx_mono_draw_char+0x3c>
		char_row_size++;
     4e2:	3601      	adds	r6, #1
	}

	glyph_data_offset = char_row_size * font->height *
     4e4:	465b      	mov	r3, fp
     4e6:	7a5b      	ldrb	r3, [r3, #9]
     4e8:	469a      	mov	sl, r3
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
     4ea:	465b      	mov	r3, fp
     4ec:	7a9b      	ldrb	r3, [r3, #10]
     4ee:	1ae4      	subs	r4, r4, r3
     4f0:	4653      	mov	r3, sl
     4f2:	435c      	muls	r4, r3
     4f4:	4366      	muls	r6, r4
     4f6:	b2b6      	uxth	r6, r6
     4f8:	465b      	mov	r3, fp
     4fa:	685b      	ldr	r3, [r3, #4]
     4fc:	469c      	mov	ip, r3
     4fe:	4466      	add	r6, ip

	/* Sanity check on parameters, assert if font is NULL. */
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;
     500:	9503      	str	r5, [sp, #12]
	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
     502:	2307      	movs	r3, #7
     504:	4699      	mov	r9, r3
	glyph_data = font->data.progmem + glyph_data_offset;
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
     506:	465b      	mov	r3, fp
     508:	7a1f      	ldrb	r7, [r3, #8]

		for (i = 0; i < pixelsToDraw; i++) {
     50a:	2f00      	cmp	r7, #0
     50c:	d018      	beq.n	540 <gfx_mono_draw_char+0x98>
     50e:	4447      	add	r7, r8
     510:	b2ff      	uxtb	r7, r7
     512:	4644      	mov	r4, r8
     514:	2500      	movs	r5, #0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
     516:	4643      	mov	r3, r8
     518:	1ae3      	subs	r3, r4, r3
     51a:	464a      	mov	r2, r9
     51c:	421a      	tst	r2, r3
     51e:	d101      	bne.n	524 <gfx_mono_draw_char+0x7c>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
     520:	7835      	ldrb	r5, [r6, #0]
				glyph_data++;
     522:	3601      	adds	r6, #1
			}

			if ((glyph_byte & 0x80)) {
     524:	b26b      	sxtb	r3, r5
     526:	2b00      	cmp	r3, #0
     528:	da04      	bge.n	534 <gfx_mono_draw_char+0x8c>
				gfx_mono_draw_pixel(inc_x, inc_y,
     52a:	2201      	movs	r2, #1
     52c:	9903      	ldr	r1, [sp, #12]
     52e:	0020      	movs	r0, r4
     530:	4b0d      	ldr	r3, [pc, #52]	; (568 <gfx_mono_draw_char+0xc0>)
     532:	4798      	blx	r3
						GFX_PIXEL_SET);
			}

			inc_x += 1;
     534:	3401      	adds	r4, #1
     536:	b2e4      	uxtb	r4, r4
			glyph_byte <<= 1;
     538:	006d      	lsls	r5, r5, #1
     53a:	b2ed      	uxtb	r5, r5

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     53c:	42a7      	cmp	r7, r4
     53e:	d1ea      	bne.n	516 <gfx_mono_draw_char+0x6e>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
     540:	9b03      	ldr	r3, [sp, #12]
     542:	3301      	adds	r3, #1
     544:	b2db      	uxtb	r3, r3
     546:	9303      	str	r3, [sp, #12]
		inc_x = x;
		rows_left--;
     548:	4653      	mov	r3, sl
     54a:	3b01      	subs	r3, #1
     54c:	b2db      	uxtb	r3, r3
     54e:	469a      	mov	sl, r3
	} while (rows_left > 0);
     550:	2b00      	cmp	r3, #0
     552:	d1d8      	bne.n	506 <gfx_mono_draw_char+0x5e>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
     554:	b005      	add	sp, #20
     556:	bc3c      	pop	{r2, r3, r4, r5}
     558:	4690      	mov	r8, r2
     55a:	4699      	mov	r9, r3
     55c:	46a2      	mov	sl, r4
     55e:	46ab      	mov	fp, r5
     560:	bdf0      	pop	{r4, r5, r6, r7, pc}
     562:	46c0      	nop			; (mov r8, r8)
     564:	00000475 	.word	0x00000475
     568:	00000661 	.word	0x00000661

0000056c <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
     56c:	b5f0      	push	{r4, r5, r6, r7, lr}
     56e:	4647      	mov	r7, r8
     570:	b480      	push	{r7}
     572:	b082      	sub	sp, #8
     574:	0004      	movs	r4, r0
     576:	9101      	str	r1, [sp, #4]
     578:	4690      	mov	r8, r2
     57a:	001f      	movs	r7, r3
     57c:	000d      	movs	r5, r1
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
     57e:	7820      	ldrb	r0, [r4, #0]
     580:	280a      	cmp	r0, #10
     582:	d106      	bne.n	592 <gfx_mono_draw_string+0x26>
			x = start_of_string_position_x;
			y += font->height + 1;
     584:	7a7a      	ldrb	r2, [r7, #9]
     586:	3201      	adds	r2, #1
     588:	4442      	add	r2, r8
     58a:	b2d3      	uxtb	r3, r2
     58c:	4698      	mov	r8, r3

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
     58e:	9d01      	ldr	r5, [sp, #4]
     590:	e009      	b.n	5a6 <gfx_mono_draw_string+0x3a>
			y += font->height + 1;
		} else if (*str == '\r') {
     592:	280d      	cmp	r0, #13
     594:	d007      	beq.n	5a6 <gfx_mono_draw_string+0x3a>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
     596:	003b      	movs	r3, r7
     598:	4642      	mov	r2, r8
     59a:	0029      	movs	r1, r5
     59c:	4e06      	ldr	r6, [pc, #24]	; (5b8 <gfx_mono_draw_string+0x4c>)
     59e:	47b0      	blx	r6
			x += font->width;
     5a0:	7a3b      	ldrb	r3, [r7, #8]
     5a2:	18eb      	adds	r3, r5, r3
     5a4:	b2dd      	uxtb	r5, r3
		}
	} while (*(++str));
     5a6:	3401      	adds	r4, #1
     5a8:	7823      	ldrb	r3, [r4, #0]
     5aa:	2b00      	cmp	r3, #0
     5ac:	d1e7      	bne.n	57e <gfx_mono_draw_string+0x12>
}
     5ae:	b002      	add	sp, #8
     5b0:	bc04      	pop	{r2}
     5b2:	4690      	mov	r8, r2
     5b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5b6:	46c0      	nop			; (mov r8, r8)
     5b8:	000004a9 	.word	0x000004a9

000005bc <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
     5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     5be:	0005      	movs	r5, r0
     5c0:	000c      	movs	r4, r1
     5c2:	0016      	movs	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
     5c4:	2b00      	cmp	r3, #0
     5c6:	d103      	bne.n	5d0 <gfx_mono_ssd1306_put_byte+0x14>
     5c8:	4b0d      	ldr	r3, [pc, #52]	; (600 <gfx_mono_ssd1306_put_byte+0x44>)
     5ca:	4798      	blx	r3
     5cc:	42b0      	cmp	r0, r6
     5ce:	d015      	beq.n	5fc <gfx_mono_ssd1306_put_byte+0x40>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
     5d0:	0032      	movs	r2, r6
     5d2:	0021      	movs	r1, r4
     5d4:	0028      	movs	r0, r5
     5d6:	4b0b      	ldr	r3, [pc, #44]	; (604 <gfx_mono_ssd1306_put_byte+0x48>)
     5d8:	4798      	blx	r3
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
     5da:	270f      	movs	r7, #15
     5dc:	403d      	ands	r5, r7
     5de:	20b0      	movs	r0, #176	; 0xb0
     5e0:	4328      	orrs	r0, r5
     5e2:	4d09      	ldr	r5, [pc, #36]	; (608 <gfx_mono_ssd1306_put_byte+0x4c>)
     5e4:	47a8      	blx	r5
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
     5e6:	0660      	lsls	r0, r4, #25
     5e8:	0f40      	lsrs	r0, r0, #29
     5ea:	2310      	movs	r3, #16
     5ec:	4318      	orrs	r0, r3
     5ee:	47a8      	blx	r5
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
     5f0:	0038      	movs	r0, r7
     5f2:	4020      	ands	r0, r4
     5f4:	47a8      	blx	r5
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
     5f6:	0030      	movs	r0, r6
     5f8:	4b04      	ldr	r3, [pc, #16]	; (60c <gfx_mono_ssd1306_put_byte+0x50>)
     5fa:	4798      	blx	r3
}
     5fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     5fe:	46c0      	nop			; (mov r8, r8)
     600:	00000385 	.word	0x00000385
     604:	00000375 	.word	0x00000375
     608:	00000115 	.word	0x00000115
     60c:	0000031d 	.word	0x0000031d

00000610 <gfx_mono_ssd1306_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_ssd1306_init(void)
{
     610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_SSD1306_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     612:	480e      	ldr	r0, [pc, #56]	; (64c <gfx_mono_ssd1306_init+0x3c>)
     614:	4b0e      	ldr	r3, [pc, #56]	; (650 <gfx_mono_ssd1306_init+0x40>)
     616:	4798      	blx	r3
#endif

	/* Initialize the low-level display controller. */
	ssd1306_init();
     618:	4b0e      	ldr	r3, [pc, #56]	; (654 <gfx_mono_ssd1306_init+0x44>)
     61a:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
     61c:	2040      	movs	r0, #64	; 0x40
     61e:	4b0e      	ldr	r3, [pc, #56]	; (658 <gfx_mono_ssd1306_init+0x48>)
     620:	4798      	blx	r3

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     622:	2500      	movs	r5, #0
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_ssd1306_init(void)
{
     624:	2600      	movs	r6, #0
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
     626:	4f0d      	ldr	r7, [pc, #52]	; (65c <gfx_mono_ssd1306_init+0x4c>)
     628:	e00c      	b.n	644 <gfx_mono_ssd1306_init+0x34>
     62a:	2301      	movs	r3, #1
     62c:	0032      	movs	r2, r6
     62e:	0021      	movs	r1, r4
     630:	0028      	movs	r0, r5
     632:	47b8      	blx	r7
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     634:	3401      	adds	r4, #1
     636:	b2e4      	uxtb	r4, r4
     638:	2c80      	cmp	r4, #128	; 0x80
     63a:	d1f6      	bne.n	62a <gfx_mono_ssd1306_init+0x1a>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     63c:	3501      	adds	r5, #1
     63e:	b2ed      	uxtb	r5, r5
     640:	2d04      	cmp	r5, #4
     642:	d001      	beq.n	648 <gfx_mono_ssd1306_init+0x38>
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_ssd1306_init(void)
{
     644:	0034      	movs	r4, r6
     646:	e7f0      	b.n	62a <gfx_mono_ssd1306_init+0x1a>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
		}
	}
}
     648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     64a:	46c0      	nop			; (mov r8, r8)
     64c:	200000bc 	.word	0x200000bc
     650:	00000369 	.word	0x00000369
     654:	00000161 	.word	0x00000161
     658:	00000115 	.word	0x00000115
     65c:	000005bd 	.word	0x000005bd

00000660 <gfx_mono_ssd1306_draw_pixel>:
	gfx_mono_ssd1306_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     660:	b5f0      	push	{r4, r5, r6, r7, lr}
     662:	4647      	mov	r7, r8
     664:	b480      	push	{r7}
     666:	0004      	movs	r4, r0
     668:	0015      	movs	r5, r2
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     66a:	b243      	sxtb	r3, r0
     66c:	2b00      	cmp	r3, #0
     66e:	db23      	blt.n	6b8 <gfx_mono_ssd1306_draw_pixel+0x58>
     670:	291f      	cmp	r1, #31
     672:	d821      	bhi.n	6b8 <gfx_mono_ssd1306_draw_pixel+0x58>
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     674:	08cf      	lsrs	r7, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
     676:	00fb      	lsls	r3, r7, #3
     678:	1ac9      	subs	r1, r1, r3
     67a:	2601      	movs	r6, #1
     67c:	408e      	lsls	r6, r1
     67e:	b2f3      	uxtb	r3, r6
     680:	4698      	mov	r8, r3
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     682:	0001      	movs	r1, r0
     684:	0038      	movs	r0, r7
     686:	4b0e      	ldr	r3, [pc, #56]	; (6c0 <gfx_mono_ssd1306_draw_pixel+0x60>)
     688:	4798      	blx	r3
     68a:	0002      	movs	r2, r0
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
     68c:	2d01      	cmp	r5, #1
     68e:	d004      	beq.n	69a <gfx_mono_ssd1306_draw_pixel+0x3a>
     690:	2d00      	cmp	r5, #0
     692:	d006      	beq.n	6a2 <gfx_mono_ssd1306_draw_pixel+0x42>
     694:	2d02      	cmp	r5, #2
     696:	d007      	beq.n	6a8 <gfx_mono_ssd1306_draw_pixel+0x48>
     698:	e009      	b.n	6ae <gfx_mono_ssd1306_draw_pixel+0x4e>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     69a:	4643      	mov	r3, r8
     69c:	4303      	orrs	r3, r0
     69e:	b2da      	uxtb	r2, r3
		break;
     6a0:	e005      	b.n	6ae <gfx_mono_ssd1306_draw_pixel+0x4e>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     6a2:	43b0      	bics	r0, r6
     6a4:	b2c2      	uxtb	r2, r0
		break;
     6a6:	e002      	b.n	6ae <gfx_mono_ssd1306_draw_pixel+0x4e>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     6a8:	4643      	mov	r3, r8
     6aa:	4043      	eors	r3, r0
     6ac:	b2da      	uxtb	r2, r3

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     6ae:	2300      	movs	r3, #0
     6b0:	0021      	movs	r1, r4
     6b2:	0038      	movs	r0, r7
     6b4:	4c03      	ldr	r4, [pc, #12]	; (6c4 <gfx_mono_ssd1306_draw_pixel+0x64>)
     6b6:	47a0      	blx	r4
}
     6b8:	bc04      	pop	{r2}
     6ba:	4690      	mov	r8, r2
     6bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6be:	46c0      	nop			; (mov r8, r8)
     6c0:	00000385 	.word	0x00000385
     6c4:	000005bd 	.word	0x000005bd

000006c8 <gfx_mono_ssd1306_get_byte>:
 * \code
	data = gfx_mono_ssd1306_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
     6c8:	b510      	push	{r4, lr}
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     6ca:	4b01      	ldr	r3, [pc, #4]	; (6d0 <gfx_mono_ssd1306_get_byte+0x8>)
     6cc:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
     6ce:	bd10      	pop	{r4, pc}
     6d0:	00000385 	.word	0x00000385

000006d4 <ButtonPressed>:
*
* Output: Buttons State
*
********************************************************************/
uint8_t ButtonPressed(void)
{
     6d4:	b570      	push	{r4, r5, r6, lr}
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     6d6:	4a3a      	ldr	r2, [pc, #232]	; (7c0 <ButtonPressed+0xec>)
     6d8:	6a11      	ldr	r1, [r2, #32]
     6da:	2380      	movs	r3, #128	; 0x80
     6dc:	055b      	lsls	r3, r3, #21
     6de:	400b      	ands	r3, r1
	MIWI_TICK tickDifference;
	
	PUSH_BUTTON_SW0 = port_pin_get_input_level(BUTTON_0_PIN);
     6e0:	0018      	movs	r0, r3
     6e2:	1e41      	subs	r1, r0, #1
     6e4:	4188      	sbcs	r0, r1
     6e6:	4937      	ldr	r1, [pc, #220]	; (7c4 <ButtonPressed+0xf0>)
     6e8:	7008      	strb	r0, [r1, #0]
     6ea:	6a10      	ldr	r0, [r2, #32]
     6ec:	2180      	movs	r1, #128	; 0x80
     6ee:	03c9      	lsls	r1, r1, #15
     6f0:	4001      	ands	r1, r0
	PUSH_OLED_BUTTON_1 = port_pin_get_input_level(PIN_PA22);
     6f2:	000c      	movs	r4, r1
     6f4:	1e60      	subs	r0, r4, #1
     6f6:	4184      	sbcs	r4, r0
     6f8:	4833      	ldr	r0, [pc, #204]	; (7c8 <ButtonPressed+0xf4>)
     6fa:	7004      	strb	r4, [r0, #0]
     6fc:	6a10      	ldr	r0, [r2, #32]
     6fe:	2440      	movs	r4, #64	; 0x40
     700:	4020      	ands	r0, r4
	PUSH_OLED_BUTTON_2 = port_pin_get_input_level(PIN_PA06);
     702:	0005      	movs	r5, r0
     704:	1e6c      	subs	r4, r5, #1
     706:	41a5      	sbcs	r5, r4
     708:	4c30      	ldr	r4, [pc, #192]	; (7cc <ButtonPressed+0xf8>)
     70a:	7025      	strb	r5, [r4, #0]
     70c:	6a12      	ldr	r2, [r2, #32]
     70e:	2480      	movs	r4, #128	; 0x80
     710:	4022      	ands	r2, r4
	PUSH_OLED_BUTTON_3 = port_pin_get_input_level(PIN_PA07);
     712:	0015      	movs	r5, r2
     714:	1e6c      	subs	r4, r5, #1
     716:	41a5      	sbcs	r5, r4
     718:	4c2d      	ldr	r4, [pc, #180]	; (7d0 <ButtonPressed+0xfc>)
     71a:	7025      	strb	r5, [r4, #0]
	if(PUSH_BUTTON_SW0 == 0)
     71c:	2b00      	cmp	r3, #0
     71e:	d10c      	bne.n	73a <ButtonPressed+0x66>
	{
		//if the button was previously not pressed
		if(PUSH_BUTTON_pressed == false)
     720:	4b2c      	ldr	r3, [pc, #176]	; (7d4 <ButtonPressed+0x100>)
     722:	781b      	ldrb	r3, [r3, #0]
     724:	2b00      	cmp	r3, #0
     726:	d108      	bne.n	73a <ButtonPressed+0x66>
		{
			PUSH_BUTTON_pressed = true;
     728:	2201      	movs	r2, #1
     72a:	4b2a      	ldr	r3, [pc, #168]	; (7d4 <ButtonPressed+0x100>)
     72c:	701a      	strb	r2, [r3, #0]
			PUSH_BUTTON_press_time = MiWi_TickGet();
     72e:	4b2a      	ldr	r3, [pc, #168]	; (7d8 <ButtonPressed+0x104>)
     730:	4798      	blx	r3
     732:	4b2a      	ldr	r3, [pc, #168]	; (7dc <ButtonPressed+0x108>)
     734:	6018      	str	r0, [r3, #0]
			return 1;
     736:	2001      	movs	r0, #1
     738:	e041      	b.n	7be <ButtonPressed+0xea>
		}
	}
	if(PUSH_OLED_BUTTON_1 == 0)
     73a:	2900      	cmp	r1, #0
     73c:	d10c      	bne.n	758 <ButtonPressed+0x84>
	{
		//if the button was previously not pressed
		if(PUSH_BUTTON_pressed == false)
     73e:	4b25      	ldr	r3, [pc, #148]	; (7d4 <ButtonPressed+0x100>)
     740:	781b      	ldrb	r3, [r3, #0]
     742:	2b00      	cmp	r3, #0
     744:	d138      	bne.n	7b8 <ButtonPressed+0xe4>
		{
			PUSH_BUTTON_pressed = true;
     746:	2201      	movs	r2, #1
     748:	4b22      	ldr	r3, [pc, #136]	; (7d4 <ButtonPressed+0x100>)
     74a:	701a      	strb	r2, [r3, #0]
			PUSH_BUTTON_press_time = MiWi_TickGet();
     74c:	4b22      	ldr	r3, [pc, #136]	; (7d8 <ButtonPressed+0x104>)
     74e:	4798      	blx	r3
     750:	4b22      	ldr	r3, [pc, #136]	; (7dc <ButtonPressed+0x108>)
     752:	6018      	str	r0, [r3, #0]
			return 2;
     754:	2002      	movs	r0, #2
     756:	e032      	b.n	7be <ButtonPressed+0xea>
		}
	}
	if(PUSH_OLED_BUTTON_2 == 0)
     758:	2800      	cmp	r0, #0
     75a:	d10c      	bne.n	776 <ButtonPressed+0xa2>
	{
		//if the button was previously not pressed
		if(PUSH_BUTTON_pressed == false)
     75c:	4b1d      	ldr	r3, [pc, #116]	; (7d4 <ButtonPressed+0x100>)
     75e:	781b      	ldrb	r3, [r3, #0]
     760:	2b00      	cmp	r3, #0
     762:	d125      	bne.n	7b0 <ButtonPressed+0xdc>
		{
			PUSH_BUTTON_pressed = true;
     764:	2201      	movs	r2, #1
     766:	4b1b      	ldr	r3, [pc, #108]	; (7d4 <ButtonPressed+0x100>)
     768:	701a      	strb	r2, [r3, #0]
			PUSH_BUTTON_press_time = MiWi_TickGet();
     76a:	4b1b      	ldr	r3, [pc, #108]	; (7d8 <ButtonPressed+0x104>)
     76c:	4798      	blx	r3
     76e:	4b1b      	ldr	r3, [pc, #108]	; (7dc <ButtonPressed+0x108>)
     770:	6018      	str	r0, [r3, #0]
			return 3;
     772:	2003      	movs	r0, #3
     774:	e023      	b.n	7be <ButtonPressed+0xea>
		}
	}
	if(PUSH_OLED_BUTTON_3 == 0)
     776:	2a00      	cmp	r2, #0
     778:	d10c      	bne.n	794 <ButtonPressed+0xc0>
	{
		//if the button was previously not pressed
		if(PUSH_BUTTON_pressed == false)
     77a:	4b16      	ldr	r3, [pc, #88]	; (7d4 <ButtonPressed+0x100>)
     77c:	781b      	ldrb	r3, [r3, #0]
     77e:	2b00      	cmp	r3, #0
     780:	d114      	bne.n	7ac <ButtonPressed+0xd8>
		{
			PUSH_BUTTON_pressed = true;
     782:	3201      	adds	r2, #1
     784:	4b13      	ldr	r3, [pc, #76]	; (7d4 <ButtonPressed+0x100>)
     786:	701a      	strb	r2, [r3, #0]
			PUSH_BUTTON_press_time = MiWi_TickGet();
     788:	4b13      	ldr	r3, [pc, #76]	; (7d8 <ButtonPressed+0x104>)
     78a:	4798      	blx	r3
     78c:	4b13      	ldr	r3, [pc, #76]	; (7dc <ButtonPressed+0x108>)
     78e:	6018      	str	r0, [r3, #0]
			return 4;
     790:	2004      	movs	r0, #4
     792:	e014      	b.n	7be <ButtonPressed+0xea>
		}
	}
	else
	{
		//get the current time
		MIWI_TICK t = MiWi_TickGet();
     794:	4b10      	ldr	r3, [pc, #64]	; (7d8 <ButtonPressed+0x104>)
     796:	4798      	blx	r3

		//if the button has been released long enough
		tickDifference.Val = MiWi_TickGetDiff(t,PUSH_BUTTON_press_time);
     798:	4b10      	ldr	r3, [pc, #64]	; (7dc <ButtonPressed+0x108>)

		//then we can mark it as not pressed
		if(tickDifference.Val > 1) // Debounce time of 30 ms 
     79a:	681b      	ldr	r3, [r3, #0]
     79c:	1ac0      	subs	r0, r0, r3
     79e:	2801      	cmp	r0, #1
     7a0:	d902      	bls.n	7a8 <ButtonPressed+0xd4>
		{
			PUSH_BUTTON_pressed = false;
     7a2:	2200      	movs	r2, #0
     7a4:	4b0b      	ldr	r3, [pc, #44]	; (7d4 <ButtonPressed+0x100>)
     7a6:	701a      	strb	r2, [r3, #0]
		}
	}

	return 0;
     7a8:	2000      	movs	r0, #0
     7aa:	e008      	b.n	7be <ButtonPressed+0xea>
     7ac:	2000      	movs	r0, #0
     7ae:	e006      	b.n	7be <ButtonPressed+0xea>
     7b0:	2000      	movs	r0, #0
			PUSH_BUTTON_pressed = true;
			PUSH_BUTTON_press_time = MiWi_TickGet();
			return 3;
		}
	}
	if(PUSH_OLED_BUTTON_3 == 0)
     7b2:	2a00      	cmp	r2, #0
     7b4:	d003      	beq.n	7be <ButtonPressed+0xea>
     7b6:	e7ed      	b.n	794 <ButtonPressed+0xc0>
			PUSH_BUTTON_pressed = true;
			PUSH_BUTTON_press_time = MiWi_TickGet();
			return 2;
		}
	}
	if(PUSH_OLED_BUTTON_2 == 0)
     7b8:	2800      	cmp	r0, #0
     7ba:	d0f9      	beq.n	7b0 <ButtonPressed+0xdc>
     7bc:	e7db      	b.n	776 <ButtonPressed+0xa2>
		}
	}

	return 0;
	
     7be:	bd70      	pop	{r4, r5, r6, pc}
     7c0:	40002800 	.word	0x40002800
     7c4:	200004b0 	.word	0x200004b0
     7c8:	200004a9 	.word	0x200004a9
     7cc:	200004aa 	.word	0x200004aa
     7d0:	200004b1 	.word	0x200004b1
     7d4:	200004a8 	.word	0x200004a8
     7d8:	00002961 	.word	0x00002961
     7dc:	200004b4 	.word	0x200004b4

000007e0 <CONSOLE_PutString>:
* Note:             Do not power down the microcontroller until
*                   the transmission is complete or the last
*                   transmission of the string can be corrupted.
********************************************************************/
void CONSOLE_PutString(char* str)
{
     7e0:	b570      	push	{r4, r5, r6, lr}
	uint8_t c;

	while( c = *str++ )
     7e2:	1c44      	adds	r4, r0, #1
     7e4:	7800      	ldrb	r0, [r0, #0]
     7e6:	2800      	cmp	r0, #0
     7e8:	d006      	beq.n	7f8 <CONSOLE_PutString+0x18>
	sio2host_putchar(c);
     7ea:	4d04      	ldr	r5, [pc, #16]	; (7fc <CONSOLE_PutString+0x1c>)
     7ec:	47a8      	blx	r5
     7ee:	3401      	adds	r4, #1
********************************************************************/
void CONSOLE_PutString(char* str)
{
	uint8_t c;

	while( c = *str++ )
     7f0:	1e63      	subs	r3, r4, #1
     7f2:	7818      	ldrb	r0, [r3, #0]
     7f4:	2800      	cmp	r0, #0
     7f6:	d1f9      	bne.n	7ec <CONSOLE_PutString+0xc>
	sio2host_putchar(c);
}
     7f8:	bd70      	pop	{r4, r5, r6, pc}
     7fa:	46c0      	nop			; (mov r8, r8)
     7fc:	00004d39 	.word	0x00004d39

00000800 <CONSOLE_PrintHex>:
* Note:             Do not power down the microcontroller until
*                   the transmission is complete or the last
*                   transmission of the string can be corrupted.
********************************************************************/
void CONSOLE_PrintHex(uint8_t toPrint)
{
     800:	b570      	push	{r4, r5, r6, lr}
     802:	0004      	movs	r4, r0
	uint8_t PRINT_VAR;
	PRINT_VAR = toPrint;
	toPrint = (toPrint>>4)&0x0F;
	sio2host_putchar(CharacterArray[toPrint]);
     804:	4e04      	ldr	r6, [pc, #16]	; (818 <CONSOLE_PrintHex+0x18>)
     806:	0903      	lsrs	r3, r0, #4
     808:	5cf0      	ldrb	r0, [r6, r3]
     80a:	4d04      	ldr	r5, [pc, #16]	; (81c <CONSOLE_PrintHex+0x1c>)
     80c:	47a8      	blx	r5
	toPrint = (PRINT_VAR)&0x0F;
	sio2host_putchar(CharacterArray[toPrint]);
     80e:	230f      	movs	r3, #15
     810:	401c      	ands	r4, r3
     812:	5d30      	ldrb	r0, [r6, r4]
     814:	47a8      	blx	r5
	return;
}
     816:	bd70      	pop	{r4, r5, r6, pc}
     818:	2000000c 	.word	0x2000000c
     81c:	00004d39 	.word	0x00004d39

00000820 <print_rx_message>:
	sio2host_putchar(CharacterArray[(toPrint%100)/10]);
	sio2host_putchar(CharacterArray[toPrint%10]);
}

void print_rx_message(void)
{
     820:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;

	if( rxMessage.flags.bits.secEn )
     822:	4b21      	ldr	r3, [pc, #132]	; (8a8 <print_rx_message+0x88>)
     824:	781b      	ldrb	r3, [r3, #0]
     826:	071b      	lsls	r3, r3, #28
     828:	d502      	bpl.n	830 <print_rx_message+0x10>
	{
	CONSOLE_PutString((char *)"Secured ");
     82a:	4820      	ldr	r0, [pc, #128]	; (8ac <print_rx_message+0x8c>)
     82c:	4b20      	ldr	r3, [pc, #128]	; (8b0 <print_rx_message+0x90>)
     82e:	4798      	blx	r3
	}

	if( rxMessage.flags.bits.broadcast )
     830:	4b1d      	ldr	r3, [pc, #116]	; (8a8 <print_rx_message+0x88>)
     832:	781b      	ldrb	r3, [r3, #0]
     834:	079b      	lsls	r3, r3, #30
     836:	d003      	beq.n	840 <print_rx_message+0x20>
	{
	CONSOLE_PutString((char *)"Broadcast Packet ");
     838:	481e      	ldr	r0, [pc, #120]	; (8b4 <print_rx_message+0x94>)
     83a:	4b1d      	ldr	r3, [pc, #116]	; (8b0 <print_rx_message+0x90>)
     83c:	4798      	blx	r3
     83e:	e002      	b.n	846 <print_rx_message+0x26>
	}
	else
	{
	CONSOLE_PutString((char *)"Unicast Packet ");
     840:	481d      	ldr	r0, [pc, #116]	; (8b8 <print_rx_message+0x98>)
     842:	4b1b      	ldr	r3, [pc, #108]	; (8b0 <print_rx_message+0x90>)
     844:	4798      	blx	r3
	}
	//CONSOLE_PrintHex(rxMessage.PacketRSSI);
	if( rxMessage.flags.bits.srcPrsnt )
     846:	4b18      	ldr	r3, [pc, #96]	; (8a8 <print_rx_message+0x88>)
     848:	781b      	ldrb	r3, [r3, #0]
     84a:	065b      	lsls	r3, r3, #25
     84c:	d518      	bpl.n	880 <print_rx_message+0x60>
	{
	CONSOLE_PutString((char *)" from ");
     84e:	481b      	ldr	r0, [pc, #108]	; (8bc <print_rx_message+0x9c>)
     850:	4b17      	ldr	r3, [pc, #92]	; (8b0 <print_rx_message+0x90>)
     852:	4798      	blx	r3
	if( rxMessage.flags.bits.altSrcAddr )
     854:	4b14      	ldr	r3, [pc, #80]	; (8a8 <print_rx_message+0x88>)
     856:	781b      	ldrb	r3, [r3, #0]
     858:	09db      	lsrs	r3, r3, #7
     85a:	2407      	movs	r4, #7
     85c:	2b00      	cmp	r3, #0
     85e:	d008      	beq.n	872 <print_rx_message+0x52>
	{
	CONSOLE_PrintHex( rxMessage.SourceAddress[1]);
     860:	4d11      	ldr	r5, [pc, #68]	; (8a8 <print_rx_message+0x88>)
     862:	686b      	ldr	r3, [r5, #4]
     864:	7858      	ldrb	r0, [r3, #1]
     866:	4c16      	ldr	r4, [pc, #88]	; (8c0 <print_rx_message+0xa0>)
     868:	47a0      	blx	r4
	CONSOLE_PrintHex( rxMessage.SourceAddress[0]);
     86a:	686b      	ldr	r3, [r5, #4]
     86c:	7818      	ldrb	r0, [r3, #0]
     86e:	47a0      	blx	r4
     870:	e006      	b.n	880 <print_rx_message+0x60>
	}
	else
	{
	for(i = 0; i < MY_ADDRESS_LENGTH; i++)
	{
	CONSOLE_PrintHex(rxMessage.SourceAddress[MY_ADDRESS_LENGTH-1-i]);
     872:	4e0d      	ldr	r6, [pc, #52]	; (8a8 <print_rx_message+0x88>)
     874:	4d12      	ldr	r5, [pc, #72]	; (8c0 <print_rx_message+0xa0>)
     876:	6873      	ldr	r3, [r6, #4]
     878:	5d18      	ldrb	r0, [r3, r4]
     87a:	47a8      	blx	r5
	CONSOLE_PrintHex( rxMessage.SourceAddress[1]);
	CONSOLE_PrintHex( rxMessage.SourceAddress[0]);
	}
	else
	{
	for(i = 0; i < MY_ADDRESS_LENGTH; i++)
     87c:	3c01      	subs	r4, #1
     87e:	d2fa      	bcs.n	876 <print_rx_message+0x56>
	{
	CONSOLE_PrintHex(rxMessage.SourceAddress[MY_ADDRESS_LENGTH-1-i]);
	}
	}
	}
	CONSOLE_PutString((char *)": ");
     880:	4810      	ldr	r0, [pc, #64]	; (8c4 <print_rx_message+0xa4>)
     882:	4b0b      	ldr	r3, [pc, #44]	; (8b0 <print_rx_message+0x90>)
     884:	4798      	blx	r3

	for(i = 0; i < rxMessage.PayloadSize; i++)
     886:	4b08      	ldr	r3, [pc, #32]	; (8a8 <print_rx_message+0x88>)
     888:	7b1b      	ldrb	r3, [r3, #12]
     88a:	2b00      	cmp	r3, #0
     88c:	d00a      	beq.n	8a4 <print_rx_message+0x84>
     88e:	2400      	movs	r4, #0
	{
		sio2host_putchar(rxMessage.Payload[i]);
     890:	4d05      	ldr	r5, [pc, #20]	; (8a8 <print_rx_message+0x88>)
     892:	4e0d      	ldr	r6, [pc, #52]	; (8c8 <print_rx_message+0xa8>)
     894:	68ab      	ldr	r3, [r5, #8]
     896:	5d18      	ldrb	r0, [r3, r4]
     898:	47b0      	blx	r6
	}
	}
	}
	CONSOLE_PutString((char *)": ");

	for(i = 0; i < rxMessage.PayloadSize; i++)
     89a:	3401      	adds	r4, #1
     89c:	b2e4      	uxtb	r4, r4
     89e:	7b2b      	ldrb	r3, [r5, #12]
     8a0:	42a3      	cmp	r3, r4
     8a2:	d8f7      	bhi.n	894 <print_rx_message+0x74>
	{
		sio2host_putchar(rxMessage.Payload[i]);
	}
     8a4:	bd70      	pop	{r4, r5, r6, pc}
     8a6:	46c0      	nop			; (mov r8, r8)
     8a8:	200007d8 	.word	0x200007d8
     8ac:	000070c4 	.word	0x000070c4
     8b0:	000007e1 	.word	0x000007e1
     8b4:	000070d0 	.word	0x000070d0
     8b8:	000070e4 	.word	0x000070e4
     8bc:	000070f4 	.word	0x000070f4
     8c0:	00000801 	.word	0x00000801
     8c4:	000070fc 	.word	0x000070fc
     8c8:	00004d39 	.word	0x00004d39

000008cc <Start_LED_Demo>:
#include "framework/miwi/miwi_api.h"

uint8_t LED_packet[1] =  {0xA1};

void Start_LED_Demo(uint8_t node_index)
{
     8cc:	b510      	push	{r4, lr}
	MiApp_FlushTx();
	MiApp_WriteData(0xA1);
     8ce:	2201      	movs	r2, #1
     8d0:	4b04      	ldr	r3, [pc, #16]	; (8e4 <Start_LED_Demo+0x18>)
     8d2:	701a      	strb	r2, [r3, #0]
     8d4:	32a0      	adds	r2, #160	; 0xa0
     8d6:	4b04      	ldr	r3, [pc, #16]	; (8e8 <Start_LED_Demo+0x1c>)
     8d8:	701a      	strb	r2, [r3, #0]
	MiApp_UnicastConnection(node_index , false);
     8da:	2100      	movs	r1, #0
     8dc:	4b03      	ldr	r3, [pc, #12]	; (8ec <Start_LED_Demo+0x20>)
     8de:	4798      	blx	r3
}
     8e0:	bd10      	pop	{r4, pc}
     8e2:	46c0      	nop			; (mov r8, r8)
     8e4:	20000755 	.word	0x20000755
     8e8:	200007b0 	.word	0x200007b0
     8ec:	00001b69 	.word	0x00001b69

000008f0 <Start_LED_Blink>:

void Start_LED_Blink(void)
{
     8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     8f2:	4e0e      	ldr	r6, [pc, #56]	; (92c <Start_LED_Blink+0x3c>)
     8f4:	2780      	movs	r7, #128	; 0x80
     8f6:	02ff      	lsls	r7, r7, #11
     8f8:	6177      	str	r7, [r6, #20]
	port_pin_set_output_level(PIN_PA18, false);
	delay_cycles_ms(500);
     8fa:	25fa      	movs	r5, #250	; 0xfa
     8fc:	006d      	lsls	r5, r5, #1
     8fe:	0028      	movs	r0, r5
     900:	4c0b      	ldr	r4, [pc, #44]	; (930 <Start_LED_Blink+0x40>)
     902:	47a0      	blx	r4
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     904:	61b7      	str	r7, [r6, #24]
	port_pin_set_output_level(PIN_PA18, true);
	delay_cycles_ms(500);
     906:	0028      	movs	r0, r5
     908:	47a0      	blx	r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
     90a:	2780      	movs	r7, #128	; 0x80
     90c:	033f      	lsls	r7, r7, #12
     90e:	6177      	str	r7, [r6, #20]
	port_pin_set_output_level(PIN_PA19, false);
	delay_cycles_ms(500);
     910:	0028      	movs	r0, r5
     912:	47a0      	blx	r4
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     914:	61b7      	str	r7, [r6, #24]
	port_pin_set_output_level(PIN_PA19, true);
	delay_cycles_ms(500);
     916:	0028      	movs	r0, r5
     918:	47a0      	blx	r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
     91a:	2780      	movs	r7, #128	; 0x80
     91c:	057f      	lsls	r7, r7, #21
     91e:	6177      	str	r7, [r6, #20]
	port_pin_set_output_level(PIN_PA28, false);
	delay_cycles_ms(500);
     920:	0028      	movs	r0, r5
     922:	47a0      	blx	r4
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     924:	61b7      	str	r7, [r6, #24]
	port_pin_set_output_level(PIN_PA28, true);
	delay_cycles_ms(500);
     926:	0028      	movs	r0, r5
     928:	47a0      	blx	r4
     92a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     92c:	40002800 	.word	0x40002800
     930:	000029e1 	.word	0x000029e1

00000934 <Start_Per>:
#include "framework/miwi/miwi_api.h"

uint8_t per_packet[2] =  {0x00 , 0x01};

uint8_t Start_Per(uint8_t index , uint8_t no_of_packets)
{
     934:	b5f0      	push	{r4, r5, r6, r7, lr}
     936:	465f      	mov	r7, fp
     938:	464e      	mov	r6, r9
     93a:	4645      	mov	r5, r8
     93c:	b4e0      	push	{r5, r6, r7}
     93e:	b082      	sub	sp, #8
     940:	9001      	str	r0, [sp, #4]
     942:	4689      	mov	r9, r1
	uint8_t i , fail_count = 0;
	bool status;
	for (i = 0; i< no_of_packets; i++)
     944:	2900      	cmp	r1, #0
     946:	d01b      	beq.n	980 <Start_Per+0x4c>
     948:	2500      	movs	r5, #0
     94a:	2400      	movs	r4, #0
	{
		MiApp_FlushTx();
		MiApp_WriteData(per_packet[0]);
     94c:	4b10      	ldr	r3, [pc, #64]	; (990 <Start_Per+0x5c>)
     94e:	4698      	mov	r8, r3
     950:	4e10      	ldr	r6, [pc, #64]	; (994 <Start_Per+0x60>)
		MiApp_WriteData(per_packet[1]);
     952:	4b11      	ldr	r3, [pc, #68]	; (998 <Start_Per+0x64>)
     954:	469b      	mov	fp, r3
     956:	2702      	movs	r7, #2
	uint8_t i , fail_count = 0;
	bool status;
	for (i = 0; i< no_of_packets; i++)
	{
		MiApp_FlushTx();
		MiApp_WriteData(per_packet[0]);
     958:	7833      	ldrb	r3, [r6, #0]
     95a:	4642      	mov	r2, r8
     95c:	7013      	strb	r3, [r2, #0]
		MiApp_WriteData(per_packet[1]);
     95e:	465b      	mov	r3, fp
     960:	701f      	strb	r7, [r3, #0]
     962:	7873      	ldrb	r3, [r6, #1]
     964:	7053      	strb	r3, [r2, #1]
		status = MiApp_UnicastConnection(index , false);
     966:	2100      	movs	r1, #0
     968:	9801      	ldr	r0, [sp, #4]
     96a:	4b0c      	ldr	r3, [pc, #48]	; (99c <Start_Per+0x68>)
     96c:	4798      	blx	r3
		if (!status)
     96e:	2800      	cmp	r0, #0
     970:	d101      	bne.n	976 <Start_Per+0x42>
		{
			fail_count++;
     972:	3501      	adds	r5, #1
     974:	b2ed      	uxtb	r5, r5

uint8_t Start_Per(uint8_t index , uint8_t no_of_packets)
{
	uint8_t i , fail_count = 0;
	bool status;
	for (i = 0; i< no_of_packets; i++)
     976:	3401      	adds	r4, #1
     978:	b2e4      	uxtb	r4, r4
     97a:	45a1      	cmp	r9, r4
     97c:	d1ec      	bne.n	958 <Start_Per+0x24>
     97e:	e000      	b.n	982 <Start_Per+0x4e>

uint8_t per_packet[2] =  {0x00 , 0x01};

uint8_t Start_Per(uint8_t index , uint8_t no_of_packets)
{
	uint8_t i , fail_count = 0;
     980:	2500      	movs	r5, #0
		{
			fail_count++;
		}
	}
	return fail_count;
}
     982:	0028      	movs	r0, r5
     984:	b002      	add	sp, #8
     986:	bc1c      	pop	{r2, r3, r4}
     988:	4690      	mov	r8, r2
     98a:	4699      	mov	r9, r3
     98c:	46a3      	mov	fp, r4
     98e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     990:	200007b0 	.word	0x200007b0
     994:	2000001c 	.word	0x2000001c
     998:	20000755 	.word	0x20000755
     99c:	00001b69 	.word	0x00001b69

000009a0 <phyTrxSetState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
     9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     9a2:	0004      	movs	r4, r0

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
     9a4:	4f0b      	ldr	r7, [pc, #44]	; (9d4 <phyTrxSetState+0x34>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
     9a6:	4e0c      	ldr	r6, [pc, #48]	; (9d8 <phyTrxSetState+0x38>)
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
	do { phyWriteRegister(RG_TRX_STATE, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
     9a8:	251f      	movs	r5, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
     9aa:	2103      	movs	r1, #3
     9ac:	2002      	movs	r0, #2
     9ae:	47b8      	blx	r7
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
     9b0:	2001      	movs	r0, #1
     9b2:	47b0      	blx	r6
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
	do { phyWriteRegister(RG_TRX_STATE, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
     9b4:	4028      	ands	r0, r5
     9b6:	2808      	cmp	r0, #8
     9b8:	d1f7      	bne.n	9aa <phyTrxSetState+0xa>

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
     9ba:	4f06      	ldr	r7, [pc, #24]	; (9d4 <phyTrxSetState+0x34>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
     9bc:	4e06      	ldr	r6, [pc, #24]	; (9d8 <phyTrxSetState+0x38>)
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));

	do { phyWriteRegister(RG_TRX_STATE,
			     state); } while (state !=
			(phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
     9be:	251f      	movs	r5, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
     9c0:	0021      	movs	r1, r4
     9c2:	2002      	movs	r0, #2
     9c4:	47b8      	blx	r7
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
     9c6:	2001      	movs	r0, #1
     9c8:	47b0      	blx	r6
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));

	do { phyWriteRegister(RG_TRX_STATE,
			     state); } while (state !=
			(phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
     9ca:	4028      	ands	r0, r5
     9cc:	4284      	cmp	r4, r0
     9ce:	d1f7      	bne.n	9c0 <phyTrxSetState+0x20>
}
     9d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     9d2:	46c0      	nop			; (mov r8, r8)
     9d4:	00004fb5 	.word	0x00004fb5
     9d8:	00004eb9 	.word	0x00004eb9

000009dc <phySetRxState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phySetRxState(void)
{
     9dc:	b510      	push	{r4, lr}
	phyTrxSetState(TRX_CMD_TRX_OFF);
     9de:	2008      	movs	r0, #8
     9e0:	4b06      	ldr	r3, [pc, #24]	; (9fc <phySetRxState+0x20>)
     9e2:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
     9e4:	200f      	movs	r0, #15
     9e6:	4b06      	ldr	r3, [pc, #24]	; (a00 <phySetRxState+0x24>)
     9e8:	4798      	blx	r3
{
	phyTrxSetState(TRX_CMD_TRX_OFF);

	phyReadRegister(RG_IRQ_STATUS);

	if (phyRxState) {
     9ea:	4b06      	ldr	r3, [pc, #24]	; (a04 <phySetRxState+0x28>)
     9ec:	781b      	ldrb	r3, [r3, #0]
     9ee:	2b00      	cmp	r3, #0
     9f0:	d002      	beq.n	9f8 <phySetRxState+0x1c>
		phyTrxSetState(TRX_CMD_RX_AACK_ON);
     9f2:	2016      	movs	r0, #22
     9f4:	4b01      	ldr	r3, [pc, #4]	; (9fc <phySetRxState+0x20>)
     9f6:	4798      	blx	r3
	}
}
     9f8:	bd10      	pop	{r4, pc}
     9fa:	46c0      	nop			; (mov r8, r8)
     9fc:	000009a1 	.word	0x000009a1
     a00:	00004eb9 	.word	0x00004eb9
     a04:	20000340 	.word	0x20000340

00000a08 <PHY_DataReq>:

/*************************************************************************//**
*****************************************************************************/
// Trigger to Transmit Packet 
void PHY_DataReq(uint8_t *data)
{
     a08:	b510      	push	{r4, lr}
     a0a:	0004      	movs	r4, r0
	phyTrxSetState(TRX_CMD_TX_ARET_ON);
     a0c:	2019      	movs	r0, #25
     a0e:	4b0c      	ldr	r3, [pc, #48]	; (a40 <PHY_DataReq+0x38>)
     a10:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
     a12:	200f      	movs	r0, #15
     a14:	4b0b      	ldr	r3, [pc, #44]	; (a44 <PHY_DataReq+0x3c>)
     a16:	4798      	blx	r3
	phyReadRegister(RG_IRQ_STATUS);

	/* size of the buffer is sent as first byte of the data
	 * and data starts from second byte.
	 */
	data[1] += 2;// 2
     a18:	7861      	ldrb	r1, [r4, #1]
     a1a:	1c8b      	adds	r3, r1, #2
     a1c:	7063      	strb	r3, [r4, #1]
	trx_frame_write(&data[1], (data[1]-1 ) /* length value*/);
     a1e:	3101      	adds	r1, #1
     a20:	b2c9      	uxtb	r1, r1
     a22:	1c60      	adds	r0, r4, #1
     a24:	4b08      	ldr	r3, [pc, #32]	; (a48 <PHY_DataReq+0x40>)
     a26:	4798      	blx	r3
	phyState = PHY_STATE_TX_WAIT_END;
     a28:	2203      	movs	r2, #3
     a2a:	4b08      	ldr	r3, [pc, #32]	; (a4c <PHY_DataReq+0x44>)
     a2c:	701a      	strb	r2, [r3, #0]
     a2e:	4b08      	ldr	r3, [pc, #32]	; (a50 <PHY_DataReq+0x48>)
     a30:	2280      	movs	r2, #128	; 0x80
     a32:	0352      	lsls	r2, r2, #13
     a34:	619a      	str	r2, [r3, #24]

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
     a36:	46c0      	nop			; (mov r8, r8)
     a38:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
     a3a:	615a      	str	r2, [r3, #20]

	TRX_SLP_TR_HIGH();
	TRX_TRIG_DELAY();
	TRX_SLP_TR_LOW();
}
     a3c:	bd10      	pop	{r4, pc}
     a3e:	46c0      	nop			; (mov r8, r8)
     a40:	000009a1 	.word	0x000009a1
     a44:	00004eb9 	.word	0x00004eb9
     a48:	000051e5 	.word	0x000051e5
     a4c:	2000033c 	.word	0x2000033c
     a50:	40002800 	.word	0x40002800

00000a54 <PHY_RandomReq>:

/*************************************************************************//**
*****************************************************************************/
// Random Number Generator 
uint16_t PHY_RandomReq(void)
{
     a54:	b5f0      	push	{r4, r5, r6, r7, lr}
     a56:	4647      	mov	r7, r8
     a58:	b480      	push	{r7}
	uint16_t rnd = 0;
	uint8_t rndValue;

	phyTrxSetState(TRX_CMD_RX_ON);
     a5a:	2006      	movs	r0, #6
     a5c:	4b0d      	ldr	r3, [pc, #52]	; (a94 <PHY_RandomReq+0x40>)
     a5e:	4798      	blx	r3
     a60:	2400      	movs	r4, #0
/*************************************************************************//**
*****************************************************************************/
// Random Number Generator 
uint16_t PHY_RandomReq(void)
{
	uint16_t rnd = 0;
     a62:	2500      	movs	r5, #0
	uint8_t rndValue;

	phyTrxSetState(TRX_CMD_RX_ON);

	for (uint8_t i = 0; i < 16; i += 2) {
		delay_cycles_us(1);
     a64:	4f0c      	ldr	r7, [pc, #48]	; (a98 <PHY_RandomReq+0x44>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
     a66:	4e0d      	ldr	r6, [pc, #52]	; (a9c <PHY_RandomReq+0x48>)
	phyTrxSetState(TRX_CMD_RX_ON);

	for (uint8_t i = 0; i < 16; i += 2) {
		delay_cycles_us(1);
		rndValue = (phyReadRegister(RG_PHY_RSSI) >> RND_VALUE) & 3;
		rnd |= rndValue << i;
     a68:	2303      	movs	r3, #3
     a6a:	4698      	mov	r8, r3
	uint8_t rndValue;

	phyTrxSetState(TRX_CMD_RX_ON);

	for (uint8_t i = 0; i < 16; i += 2) {
		delay_cycles_us(1);
     a6c:	2001      	movs	r0, #1
     a6e:	47b8      	blx	r7
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
     a70:	2006      	movs	r0, #6
     a72:	47b0      	blx	r6
	phyTrxSetState(TRX_CMD_RX_ON);

	for (uint8_t i = 0; i < 16; i += 2) {
		delay_cycles_us(1);
		rndValue = (phyReadRegister(RG_PHY_RSSI) >> RND_VALUE) & 3;
		rnd |= rndValue << i;
     a74:	0940      	lsrs	r0, r0, #5
     a76:	4643      	mov	r3, r8
     a78:	4018      	ands	r0, r3
     a7a:	40a0      	lsls	r0, r4
     a7c:	4328      	orrs	r0, r5
     a7e:	b285      	uxth	r5, r0
     a80:	3402      	adds	r4, #2
	uint16_t rnd = 0;
	uint8_t rndValue;

	phyTrxSetState(TRX_CMD_RX_ON);

	for (uint8_t i = 0; i < 16; i += 2) {
     a82:	2c10      	cmp	r4, #16
     a84:	d1f2      	bne.n	a6c <PHY_RandomReq+0x18>
		delay_cycles_us(1);
		rndValue = (phyReadRegister(RG_PHY_RSSI) >> RND_VALUE) & 3;
		rnd |= rndValue << i;
	}
	phySetRxState();
     a86:	4b06      	ldr	r3, [pc, #24]	; (aa0 <PHY_RandomReq+0x4c>)
     a88:	4798      	blx	r3

	return rnd;
}
     a8a:	0028      	movs	r0, r5
     a8c:	bc04      	pop	{r2}
     a8e:	4690      	mov	r8, r2
     a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a92:	46c0      	nop			; (mov r8, r8)
     a94:	000009a1 	.word	0x000009a1
     a98:	000029b5 	.word	0x000029b5
     a9c:	00004eb9 	.word	0x00004eb9
     aa0:	000009dd 	.word	0x000009dd

00000aa4 <PHY_Init>:

/*************************************************************************//**
*****************************************************************************/
// Radio Initialization
void PHY_Init(void)
{
     aa4:	b570      	push	{r4, r5, r6, lr}
	trx_spi_init();
     aa6:	4b0f      	ldr	r3, [pc, #60]	; (ae4 <PHY_Init+0x40>)
     aa8:	4798      	blx	r3
	PhyReset();
     aaa:	4b0f      	ldr	r3, [pc, #60]	; (ae8 <PHY_Init+0x44>)
     aac:	4798      	blx	r3
	phyRxState = false;
     aae:	2200      	movs	r2, #0
     ab0:	4b0e      	ldr	r3, [pc, #56]	; (aec <PHY_Init+0x48>)
     ab2:	701a      	strb	r2, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
     ab4:	21ff      	movs	r1, #255	; 0xff
     ab6:	200e      	movs	r0, #14
     ab8:	4b0d      	ldr	r3, [pc, #52]	; (af0 <PHY_Init+0x4c>)
     aba:	4798      	blx	r3
     abc:	4e0c      	ldr	r6, [pc, #48]	; (af0 <PHY_Init+0x4c>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
     abe:	4d0d      	ldr	r5, [pc, #52]	; (af4 <PHY_Init+0x50>)
	phyRxState = false;

	phyWriteRegister(RG_IRQ_MASK , 0xFF);
	do {phyWriteRegister(RG_TRX_STATE, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
	(phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
     ac0:	241f      	movs	r4, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
     ac2:	2108      	movs	r1, #8
     ac4:	2002      	movs	r0, #2
     ac6:	47b0      	blx	r6
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
     ac8:	2001      	movs	r0, #1
     aca:	47a8      	blx	r5
	phyRxState = false;

	phyWriteRegister(RG_IRQ_MASK , 0xFF);
	do {phyWriteRegister(RG_TRX_STATE, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
	(phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
     acc:	4020      	ands	r0, r4
     ace:	2808      	cmp	r0, #8
     ad0:	d1f7      	bne.n	ac2 <PHY_Init+0x1e>

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
     ad2:	212e      	movs	r1, #46	; 0x2e
     ad4:	3804      	subs	r0, #4
     ad6:	4c06      	ldr	r4, [pc, #24]	; (af0 <PHY_Init+0x4c>)
     ad8:	47a0      	blx	r4
     ada:	21a0      	movs	r1, #160	; 0xa0
     adc:	200c      	movs	r0, #12
     ade:	47a0      	blx	r4
	(1 << TX_AUTO_CRC_ON) | (3 << SPI_CMD_MODE) |
	(1 << IRQ_MASK_MODE));

	phyWriteRegister(RG_TRX_CTRL_2,
	(1 << RX_SAFE_MODE) | (1 << OQPSK_SCRAM_EN));
}
     ae0:	bd70      	pop	{r4, r5, r6, pc}
     ae2:	46c0      	nop			; (mov r8, r8)
     ae4:	00004d6d 	.word	0x00004d6d
     ae8:	00004e89 	.word	0x00004e89
     aec:	20000340 	.word	0x20000340
     af0:	00004fb5 	.word	0x00004fb5
     af4:	00004eb9 	.word	0x00004eb9

00000af8 <PHY_SetChannel>:

/*************************************************************************//**
*****************************************************************************/
// Set Channel
void PHY_SetChannel(uint8_t channel)
{
     af8:	b510      	push	{r4, lr}
     afa:	0004      	movs	r4, r0
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
     afc:	2008      	movs	r0, #8
     afe:	4b06      	ldr	r3, [pc, #24]	; (b18 <PHY_SetChannel+0x20>)
     b00:	4798      	blx	r3

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
     b02:	231f      	movs	r3, #31
     b04:	0001      	movs	r1, r0
     b06:	4399      	bics	r1, r3
     b08:	0020      	movs	r0, r4
     b0a:	4308      	orrs	r0, r1
     b0c:	b2c1      	uxtb	r1, r0
     b0e:	2008      	movs	r0, #8
     b10:	4b02      	ldr	r3, [pc, #8]	; (b1c <PHY_SetChannel+0x24>)
     b12:	4798      	blx	r3
{
	uint8_t reg;

	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
}
     b14:	bd10      	pop	{r4, pc}
     b16:	46c0      	nop			; (mov r8, r8)
     b18:	00004eb9 	.word	0x00004eb9
     b1c:	00004fb5 	.word	0x00004fb5

00000b20 <PHY_SetPanId>:

/*************************************************************************//**
*****************************************************************************/
// Set Pan ID
void PHY_SetPanId(uint16_t panId)
{
     b20:	b530      	push	{r4, r5, lr}
     b22:	b083      	sub	sp, #12
     b24:	466b      	mov	r3, sp
     b26:	1d9d      	adds	r5, r3, #6
     b28:	80d8      	strh	r0, [r3, #6]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
     b2a:	b2c1      	uxtb	r1, r0
     b2c:	2022      	movs	r0, #34	; 0x22
     b2e:	4c03      	ldr	r4, [pc, #12]	; (b3c <PHY_SetPanId+0x1c>)
     b30:	47a0      	blx	r4
     b32:	7869      	ldrb	r1, [r5, #1]
     b34:	2023      	movs	r0, #35	; 0x23
     b36:	47a0      	blx	r4
void PHY_SetPanId(uint16_t panId)
{
	uint8_t *d = (uint8_t *)&panId;
	phyWriteRegister(RG_PAN_ID_0, d[0]);
	phyWriteRegister(RG_PAN_ID_1, d[1]);
}
     b38:	b003      	add	sp, #12
     b3a:	bd30      	pop	{r4, r5, pc}
     b3c:	00004fb5 	.word	0x00004fb5

00000b40 <PHY_SetShortAddr>:

/*************************************************************************//**
*****************************************************************************/
// Set Short Address 
void PHY_SetShortAddr(uint16_t addr)
{
     b40:	b570      	push	{r4, r5, r6, lr}
     b42:	b082      	sub	sp, #8
     b44:	466b      	mov	r3, sp
     b46:	1d9c      	adds	r4, r3, #6
     b48:	80d8      	strh	r0, [r3, #6]
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(RG_SHORT_ADDR_0, d[0]);
     b4a:	b2c5      	uxtb	r5, r0

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
     b4c:	0029      	movs	r1, r5
     b4e:	2020      	movs	r0, #32
     b50:	4e05      	ldr	r6, [pc, #20]	; (b68 <PHY_SetShortAddr+0x28>)
     b52:	47b0      	blx	r6
void PHY_SetShortAddr(uint16_t addr)
{
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(RG_SHORT_ADDR_0, d[0]);
	phyWriteRegister(RG_SHORT_ADDR_1, d[1]);
     b54:	7864      	ldrb	r4, [r4, #1]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
     b56:	0021      	movs	r1, r4
     b58:	2021      	movs	r0, #33	; 0x21
     b5a:	47b0      	blx	r6
     b5c:	192c      	adds	r4, r5, r4
     b5e:	b2e1      	uxtb	r1, r4
     b60:	202d      	movs	r0, #45	; 0x2d
     b62:	47b0      	blx	r6
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(RG_SHORT_ADDR_0, d[0]);
	phyWriteRegister(RG_SHORT_ADDR_1, d[1]);
	phyWriteRegister(RG_CSMA_SEED_0, d[0] + d[1]);
}
     b64:	b002      	add	sp, #8
     b66:	bd70      	pop	{r4, r5, r6, pc}
     b68:	00004fb5 	.word	0x00004fb5

00000b6c <PHY_EncryptReq>:

/*************************************************************************//**
*****************************************************************************/
// Encrypt Block
void PHY_EncryptReq(uint8_t *text, uint8_t *key)
{
     b6c:	b510      	push	{r4, lr}
     b6e:	0004      	movs	r4, r0
     b70:	0008      	movs	r0, r1
	sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
     b72:	2200      	movs	r2, #0
     b74:	2100      	movs	r1, #0
     b76:	4b05      	ldr	r3, [pc, #20]	; (b8c <PHY_EncryptReq+0x20>)
     b78:	4798      	blx	r3
	#if (SAL_TYPE == AT86RF2xx)
	sal_aes_wrrd(text, NULL);
     b7a:	2100      	movs	r1, #0
     b7c:	0020      	movs	r0, r4
     b7e:	4b04      	ldr	r3, [pc, #16]	; (b90 <PHY_EncryptReq+0x24>)
     b80:	4798      	blx	r3
	#else
	sal_aes_exec(text);
	#endif
	sal_aes_read(text);
     b82:	0020      	movs	r0, r4
     b84:	4b03      	ldr	r3, [pc, #12]	; (b94 <PHY_EncryptReq+0x28>)
     b86:	4798      	blx	r3
}
     b88:	bd10      	pop	{r4, pc}
     b8a:	46c0      	nop			; (mov r8, r8)
     b8c:	00002765 	.word	0x00002765
     b90:	000026f9 	.word	0x000026f9
     b94:	0000289d 	.word	0x0000289d

00000b98 <MiMAC_SetAltAddress>:
 *      None
 *
 *****************************************************************************************/

bool MiMAC_SetAltAddress( uint8_t *Address,  uint8_t *PANID)
{
     b98:	b510      	push	{r4, lr}
	myNetworkAddress.v[0] = Address[0];
     b9a:	7802      	ldrb	r2, [r0, #0]
     b9c:	4b08      	ldr	r3, [pc, #32]	; (bc0 <MiMAC_SetAltAddress+0x28>)
     b9e:	701a      	strb	r2, [r3, #0]
	myNetworkAddress.v[1] = Address[1];
     ba0:	7842      	ldrb	r2, [r0, #1]
     ba2:	705a      	strb	r2, [r3, #1]
	MAC_PANID.v[0] = PANID[0];
     ba4:	780a      	ldrb	r2, [r1, #0]
     ba6:	4b07      	ldr	r3, [pc, #28]	; (bc4 <MiMAC_SetAltAddress+0x2c>)
     ba8:	701a      	strb	r2, [r3, #0]
	MAC_PANID.v[1] = PANID[1];
     baa:	784a      	ldrb	r2, [r1, #1]
     bac:	705a      	strb	r2, [r3, #1]
	PHY_SetShortAddr(APP_ADDR);
     bae:	2001      	movs	r0, #1
     bb0:	4b05      	ldr	r3, [pc, #20]	; (bc8 <MiMAC_SetAltAddress+0x30>)
     bb2:	4798      	blx	r3
	PHY_SetPanId(MY_PAN_ID);
     bb4:	4805      	ldr	r0, [pc, #20]	; (bcc <MiMAC_SetAltAddress+0x34>)
     bb6:	4b06      	ldr	r3, [pc, #24]	; (bd0 <MiMAC_SetAltAddress+0x38>)
     bb8:	4798      	blx	r3
	return true;
}
     bba:	2001      	movs	r0, #1
     bbc:	bd10      	pop	{r4, pc}
     bbe:	46c0      	nop			; (mov r8, r8)
     bc0:	200004bc 	.word	0x200004bc
     bc4:	200005b0 	.word	0x200005b0
     bc8:	00000b41 	.word	0x00000b41
     bcc:	00001234 	.word	0x00001234
     bd0:	00000b21 	.word	0x00000b21

00000bd4 <mic_generator>:

#if defined (ENABLE_SECURITY)
uint8_t addr[8] = {0xda , 0x98 , 0x22 , 0xfe , 0xff , 0xa3 , 0x04 , 0x00};
void mic_generator (uint8_t *Payloadinfo, uint8_t len , uint8_t frame_control ,  API_UINT32_UNION FrameCounter ,  uint8_t *SourceIEEEAddress)
{
     bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
     bd6:	4647      	mov	r7, r8
     bd8:	b480      	push	{r7}
     bda:	b0a6      	sub	sp, #152	; 0x98
     bdc:	0006      	movs	r6, r0
     bde:	000c      	movs	r4, r1
     be0:	469c      	mov	ip, r3
     be2:	992c      	ldr	r1, [sp, #176]	; 0xb0
	uint8_t i , j , iterations  , copy_packet1[128] , cbc_header_with_padding[16] , InitVect_out[16] , block[16];
	// Calculating No of blocks in the packet (1 block = 16 bytes of data)
	iterations = len/16;
     be4:	0925      	lsrs	r5, r4, #4
	if (len % 16 != 0) iterations++;
     be6:	0723      	lsls	r3, r4, #28
     be8:	d000      	beq.n	bec <mic_generator+0x18>
     bea:	3501      	adds	r5, #1
	InitVect_in[0] = 0x49;//frame_control;
     bec:	2049      	movs	r0, #73	; 0x49
     bee:	4b42      	ldr	r3, [pc, #264]	; (cf8 <mic_generator+0x124>)
     bf0:	7018      	strb	r0, [r3, #0]
	cbc_header_with_padding[0] = 0x00;  // l(a)
     bf2:	2300      	movs	r3, #0
     bf4:	a802      	add	r0, sp, #8
     bf6:	7003      	strb	r3, [r0, #0]
	cbc_header_with_padding[1] = 0x0d;  // l(a)Header Length
     bf8:	330d      	adds	r3, #13
     bfa:	7043      	strb	r3, [r0, #1]
	cbc_header_with_padding[2] = frame_control;  //frame_control;  //byte 1
     bfc:	7082      	strb	r2, [r0, #2]
     bfe:	2200      	movs	r2, #0
	for (i=0;i<8;i++)
	{
		InitVect_in[i+1] =  SourceIEEEAddress[i];
     c00:	4b3d      	ldr	r3, [pc, #244]	; (cf8 <mic_generator+0x124>)
     c02:	5c8f      	ldrb	r7, [r1, r2]
     c04:	18d0      	adds	r0, r2, r3
     c06:	7047      	strb	r7, [r0, #1]
		cbc_header_with_padding[i+7] = SourceIEEEAddress[i];
     c08:	0010      	movs	r0, r2
     c0a:	af02      	add	r7, sp, #8
     c0c:	46b8      	mov	r8, r7
     c0e:	4440      	add	r0, r8
     c10:	5c8f      	ldrb	r7, [r1, r2]
     c12:	71c7      	strb	r7, [r0, #7]
     c14:	3201      	adds	r2, #1
	if (len % 16 != 0) iterations++;
	InitVect_in[0] = 0x49;//frame_control;
	cbc_header_with_padding[0] = 0x00;  // l(a)
	cbc_header_with_padding[1] = 0x0d;  // l(a)Header Length
	cbc_header_with_padding[2] = frame_control;  //frame_control;  //byte 1
	for (i=0;i<8;i++)
     c16:	2a08      	cmp	r2, #8
     c18:	d1f3      	bne.n	c02 <mic_generator+0x2e>
		InitVect_in[i+1] =  SourceIEEEAddress[i];
		cbc_header_with_padding[i+7] = SourceIEEEAddress[i];
	}
	for (i=0;i<4;i++)
	{
		InitVect_in[i+9] = FrameCounter.v[i];
     c1a:	4663      	mov	r3, ip
     c1c:	466a      	mov	r2, sp
     c1e:	71d3      	strb	r3, [r2, #7]
     c20:	79d3      	ldrb	r3, [r2, #7]
     c22:	4835      	ldr	r0, [pc, #212]	; (cf8 <mic_generator+0x124>)
     c24:	7243      	strb	r3, [r0, #9]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
     c26:	4642      	mov	r2, r8
     c28:	70d3      	strb	r3, [r2, #3]
		InitVect_in[i+1] =  SourceIEEEAddress[i];
		cbc_header_with_padding[i+7] = SourceIEEEAddress[i];
	}
	for (i=0;i<4;i++)
	{
		InitVect_in[i+9] = FrameCounter.v[i];
     c2a:	4663      	mov	r3, ip
     c2c:	041b      	lsls	r3, r3, #16
     c2e:	0e1b      	lsrs	r3, r3, #24
     c30:	7283      	strb	r3, [r0, #10]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
     c32:	7113      	strb	r3, [r2, #4]
		InitVect_in[i+1] =  SourceIEEEAddress[i];
		cbc_header_with_padding[i+7] = SourceIEEEAddress[i];
	}
	for (i=0;i<4;i++)
	{
		InitVect_in[i+9] = FrameCounter.v[i];
     c34:	4663      	mov	r3, ip
     c36:	021b      	lsls	r3, r3, #8
     c38:	0e1b      	lsrs	r3, r3, #24
     c3a:	72c3      	strb	r3, [r0, #11]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
     c3c:	7153      	strb	r3, [r2, #5]
		InitVect_in[i+1] =  SourceIEEEAddress[i];
		cbc_header_with_padding[i+7] = SourceIEEEAddress[i];
	}
	for (i=0;i<4;i++)
	{
		InitVect_in[i+9] = FrameCounter.v[i];
     c3e:	4663      	mov	r3, ip
     c40:	0e1b      	lsrs	r3, r3, #24
     c42:	7303      	strb	r3, [r0, #12]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
     c44:	7193      	strb	r3, [r2, #6]
	}
	//cbc_header_with_padding[14] = 0x00;  // Padding
	cbc_header_with_padding[15] = 0x00;   // Padding 
     c46:	2300      	movs	r3, #0
     c48:	73d3      	strb	r3, [r2, #15]
	InitVect_in[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
     c4a:	2204      	movs	r2, #4
     c4c:	7342      	strb	r2, [r0, #13]
	InitVect_in[14] = 0x00; // 15 th byte padded to zero
     c4e:	7383      	strb	r3, [r0, #14]
	InitVect_in[15] = len; // For MIC calculation All preceding blocks will be incremented by 1
     c50:	73c4      	strb	r4, [r0, #15]
	PHY_EncryptReq(&InitVect_in[0] , mySecurityKey);
     c52:	492a      	ldr	r1, [pc, #168]	; (cfc <mic_generator+0x128>)
     c54:	4b2a      	ldr	r3, [pc, #168]	; (d00 <mic_generator+0x12c>)
     c56:	4798      	blx	r3
     c58:	2300      	movs	r3, #0
	for (i=0;i<16;i++)
	{
		InitVect_out[i] = InitVect_in[i];
		copy_packet1[i] = cbc_header_with_padding[i];
     c5a:	aa02      	add	r2, sp, #8
     c5c:	5c99      	ldrb	r1, [r3, r2]
     c5e:	aa06      	add	r2, sp, #24
     c60:	5499      	strb	r1, [r3, r2]
     c62:	3301      	adds	r3, #1
	cbc_header_with_padding[15] = 0x00;   // Padding 
	InitVect_in[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
	InitVect_in[14] = 0x00; // 15 th byte padded to zero
	InitVect_in[15] = len; // For MIC calculation All preceding blocks will be incremented by 1
	PHY_EncryptReq(&InitVect_in[0] , mySecurityKey);
	for (i=0;i<16;i++)
     c64:	2b10      	cmp	r3, #16
     c66:	d1f8      	bne.n	c5a <mic_generator+0x86>
	{
		InitVect_out[i] = InitVect_in[i];
		copy_packet1[i] = cbc_header_with_padding[i];
	}
	// Copy the Payload and Do the padding
	for (i=16;i<len+16;i++)
     c68:	0027      	movs	r7, r4
     c6a:	3710      	adds	r7, #16
     c6c:	2f10      	cmp	r7, #16
     c6e:	dd0a      	ble.n	c86 <mic_generator+0xb2>
     c70:	2110      	movs	r1, #16
	{
		copy_packet1[i]	= Payloadinfo[i-16];  // Copying the Payload
     c72:	18f2      	adds	r2, r6, r3
     c74:	3a10      	subs	r2, #16
     c76:	7810      	ldrb	r0, [r2, #0]
     c78:	aa06      	add	r2, sp, #24
     c7a:	5450      	strb	r0, [r2, r1]
	{
		InitVect_out[i] = InitVect_in[i];
		copy_packet1[i] = cbc_header_with_padding[i];
	}
	// Copy the Payload and Do the padding
	for (i=16;i<len+16;i++)
     c7c:	3301      	adds	r3, #1
     c7e:	b2db      	uxtb	r3, r3
     c80:	1e19      	subs	r1, r3, #0
     c82:	42b9      	cmp	r1, r7
     c84:	dbf5      	blt.n	c72 <mic_generator+0x9e>
	{
		copy_packet1[i]	= Payloadinfo[i-16];  // Copying the Payload
	}
	for (i=len+16;i<(iterations *16) + 16 ; i++ )
     c86:	0023      	movs	r3, r4
     c88:	3310      	adds	r3, #16
     c8a:	b2db      	uxtb	r3, r3
     c8c:	001a      	movs	r2, r3
     c8e:	3501      	adds	r5, #1
     c90:	0128      	lsls	r0, r5, #4
     c92:	4283      	cmp	r3, r0
     c94:	da07      	bge.n	ca6 <mic_generator+0xd2>
	{
		copy_packet1[i] = 0; // Padding
     c96:	2400      	movs	r4, #0
     c98:	a906      	add	r1, sp, #24
     c9a:	548c      	strb	r4, [r1, r2]
	// Copy the Payload and Do the padding
	for (i=16;i<len+16;i++)
	{
		copy_packet1[i]	= Payloadinfo[i-16];  // Copying the Payload
	}
	for (i=len+16;i<(iterations *16) + 16 ; i++ )
     c9c:	3301      	adds	r3, #1
     c9e:	b2db      	uxtb	r3, r3
     ca0:	1e1a      	subs	r2, r3, #0
     ca2:	4282      	cmp	r2, r0
     ca4:	dbf8      	blt.n	c98 <mic_generator+0xc4>
	{
		copy_packet1[i] = 0; // Padding
	}
	for (i=0;i<iterations+1;i++)
     ca6:	2300      	movs	r3, #0
     ca8:	2700      	movs	r7, #0
     caa:	2d00      	cmp	r5, #0
     cac:	dc14      	bgt.n	cd8 <mic_generator+0x104>
     cae:	e017      	b.n	ce0 <mic_generator+0x10c>
	{
			for (j=0;j<16;j++)
			{
				InitVect_in[j]	= InitVect_in[j] ^ copy_packet1[j+(i*16)];
     cb0:	1999      	adds	r1, r3, r6
     cb2:	aa06      	add	r2, sp, #24
     cb4:	1912      	adds	r2, r2, r4
     cb6:	5cd0      	ldrb	r0, [r2, r3]
     cb8:	780a      	ldrb	r2, [r1, #0]
     cba:	4042      	eors	r2, r0
     cbc:	700a      	strb	r2, [r1, #0]
     cbe:	3301      	adds	r3, #1
	{
		copy_packet1[i] = 0; // Padding
	}
	for (i=0;i<iterations+1;i++)
	{
			for (j=0;j<16;j++)
     cc0:	2b10      	cmp	r3, #16
     cc2:	d1f5      	bne.n	cb0 <mic_generator+0xdc>
			{
				InitVect_in[j]	= InitVect_in[j] ^ copy_packet1[j+(i*16)];
			}
		PHY_EncryptReq(&InitVect_in[0] , mySecurityKey);
     cc4:	490d      	ldr	r1, [pc, #52]	; (cfc <mic_generator+0x128>)
     cc6:	480c      	ldr	r0, [pc, #48]	; (cf8 <mic_generator+0x124>)
     cc8:	4b0d      	ldr	r3, [pc, #52]	; (d00 <mic_generator+0x12c>)
     cca:	4798      	blx	r3
	}
	for (i=len+16;i<(iterations *16) + 16 ; i++ )
	{
		copy_packet1[i] = 0; // Padding
	}
	for (i=0;i<iterations+1;i++)
     ccc:	3701      	adds	r7, #1
     cce:	b2ff      	uxtb	r7, r7
     cd0:	1e3b      	subs	r3, r7, #0
     cd2:	42ab      	cmp	r3, r5
     cd4:	db01      	blt.n	cda <mic_generator+0x106>
     cd6:	e003      	b.n	ce0 <mic_generator+0x10c>
	{
			for (j=0;j<16;j++)
			{
				InitVect_in[j]	= InitVect_in[j] ^ copy_packet1[j+(i*16)];
     cd8:	4e07      	ldr	r6, [pc, #28]	; (cf8 <mic_generator+0x124>)
     cda:	011c      	lsls	r4, r3, #4
     cdc:	2300      	movs	r3, #0
     cde:	e7e7      	b.n	cb0 <mic_generator+0xdc>
	}
	for (i=len+16;i<(iterations *16) + 16 ; i++ )
	{
		copy_packet1[i] = 0; // Padding
	}
	for (i=0;i<iterations+1;i++)
     ce0:	2300      	movs	r3, #0
		PHY_EncryptReq(&InitVect_in[0] , mySecurityKey);
		
	}
	for (i=0;i<16;i++)
	{
		CBC_mic[i] = InitVect_in[i];
     ce2:	4808      	ldr	r0, [pc, #32]	; (d04 <mic_generator+0x130>)
     ce4:	4904      	ldr	r1, [pc, #16]	; (cf8 <mic_generator+0x124>)
     ce6:	5cca      	ldrb	r2, [r1, r3]
     ce8:	54c2      	strb	r2, [r0, r3]
     cea:	3301      	adds	r3, #1
				InitVect_in[j]	= InitVect_in[j] ^ copy_packet1[j+(i*16)];
			}
		PHY_EncryptReq(&InitVect_in[0] , mySecurityKey);
		
	}
	for (i=0;i<16;i++)
     cec:	2b10      	cmp	r3, #16
     cee:	d1fa      	bne.n	ce6 <mic_generator+0x112>
	{
		CBC_mic[i] = InitVect_in[i];
	}

}
     cf0:	b026      	add	sp, #152	; 0x98
     cf2:	bc04      	pop	{r2}
     cf4:	4690      	mov	r8, r2
     cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     cf8:	200004cc 	.word	0x200004cc
     cfc:	00007100 	.word	0x00007100
     d00:	00000b6d 	.word	0x00000b6d
     d04:	2000059c 	.word	0x2000059c

00000d08 <DataEncrypt>:
 *
 *****************************************************************************************/

bool DataEncrypt(uint8_t *Payloadinfo, uint8_t *Payload_len, API_UINT32_UNION FrameCounter,
uint8_t FrameControl)
{
     d08:	b5f0      	push	{r4, r5, r6, r7, lr}
     d0a:	465f      	mov	r7, fp
     d0c:	4656      	mov	r6, sl
     d0e:	464d      	mov	r5, r9
     d10:	4644      	mov	r4, r8
     d12:	b4f0      	push	{r4, r5, r6, r7}
     d14:	b08b      	sub	sp, #44	; 0x2c
     d16:	0004      	movs	r4, r0
     d18:	4689      	mov	r9, r1
     d1a:	0015      	movs	r5, r2
     d1c:	001a      	movs	r2, r3
	uint8_t i , iterations , block[16] , j , copy_packet[128] , CTR_Nonce_and_Counter[16];
	// Calculating No of blocks in the packet (1 block = 16 bytes of data)
	iterations = *Payload_len/16;
     d1e:	7809      	ldrb	r1, [r1, #0]
     d20:	090e      	lsrs	r6, r1, #4
	if (*Payload_len % 16 != 0) iterations++;
     d22:	070b      	lsls	r3, r1, #28
     d24:	d000      	beq.n	d28 <DataEncrypt+0x20>
     d26:	3601      	adds	r6, #1

	mic_generator(&Payloadinfo[0] , *Payload_len, FrameControl  , FrameCounter ,  MACInitParams.PAddress);
     d28:	4b38      	ldr	r3, [pc, #224]	; (e0c <DataEncrypt+0x104>)
     d2a:	685b      	ldr	r3, [r3, #4]
     d2c:	9300      	str	r3, [sp, #0]
     d2e:	002b      	movs	r3, r5
     d30:	0020      	movs	r0, r4
     d32:	4f37      	ldr	r7, [pc, #220]	; (e10 <DataEncrypt+0x108>)
     d34:	47b8      	blx	r7

	for (i=*Payload_len;i<iterations *16 ; i++ )
     d36:	464b      	mov	r3, r9
     d38:	781b      	ldrb	r3, [r3, #0]
     d3a:	0037      	movs	r7, r6
     d3c:	0132      	lsls	r2, r6, #4
     d3e:	4293      	cmp	r3, r2
     d40:	da05      	bge.n	d4e <DataEncrypt+0x46>
	{
		Payloadinfo[i] = 0; // Padding
     d42:	2100      	movs	r1, #0
     d44:	54e1      	strb	r1, [r4, r3]
	iterations = *Payload_len/16;
	if (*Payload_len % 16 != 0) iterations++;

	mic_generator(&Payloadinfo[0] , *Payload_len, FrameControl  , FrameCounter ,  MACInitParams.PAddress);

	for (i=*Payload_len;i<iterations *16 ; i++ )
     d46:	3301      	adds	r3, #1
     d48:	b2db      	uxtb	r3, r3
     d4a:	4293      	cmp	r3, r2
     d4c:	dbfa      	blt.n	d44 <DataEncrypt+0x3c>
	{
		Payloadinfo[i] = 0; // Padding
	}
	CTR_Nonce_and_Counter[0] = 0x01;  // L
     d4e:	2201      	movs	r2, #1
     d50:	ab02      	add	r3, sp, #8
     d52:	701a      	strb	r2, [r3, #0]
	for (i=0;i<8;i++)
	{
		CTR_Nonce_and_Counter[i+1] = MACInitParams.PAddress[i];
     d54:	4b2d      	ldr	r3, [pc, #180]	; (e0c <DataEncrypt+0x104>)
     d56:	6858      	ldr	r0, [r3, #4]
     d58:	2300      	movs	r3, #0
     d5a:	aa02      	add	r2, sp, #8
     d5c:	18d2      	adds	r2, r2, r3
     d5e:	5cc1      	ldrb	r1, [r0, r3]
     d60:	7051      	strb	r1, [r2, #1]
     d62:	3301      	adds	r3, #1
	for (i=*Payload_len;i<iterations *16 ; i++ )
	{
		Payloadinfo[i] = 0; // Padding
	}
	CTR_Nonce_and_Counter[0] = 0x01;  // L
	for (i=0;i<8;i++)
     d64:	2b08      	cmp	r3, #8
     d66:	d1f8      	bne.n	d5a <DataEncrypt+0x52>
	{
		CTR_Nonce_and_Counter[i+1] = MACInitParams.PAddress[i];
	}
	for (i=0;i<4;i++)
	{
		CTR_Nonce_and_Counter[i+9] = FrameCounter.v[i];
     d68:	ab02      	add	r3, sp, #8
     d6a:	725d      	strb	r5, [r3, #9]
     d6c:	0a2a      	lsrs	r2, r5, #8
     d6e:	729a      	strb	r2, [r3, #10]
     d70:	0c2a      	lsrs	r2, r5, #16
     d72:	72da      	strb	r2, [r3, #11]
     d74:	0e2d      	lsrs	r5, r5, #24
     d76:	731d      	strb	r5, [r3, #12]
	}
	CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
     d78:	2204      	movs	r2, #4
     d7a:	735a      	strb	r2, [r3, #13]
	CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
     d7c:	2200      	movs	r2, #0
     d7e:	739a      	strb	r2, [r3, #14]
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
     d80:	73da      	strb	r2, [r3, #15]

	for (i=0;i<iterations+1;i++)
     d82:	1c7b      	adds	r3, r7, #1
     d84:	4698      	mov	r8, r3
     d86:	2300      	movs	r3, #0
     d88:	469a      	mov	sl, r3
     d8a:	469b      	mov	fp, r3
     d8c:	4643      	mov	r3, r8
     d8e:	2b00      	cmp	r3, #0
     d90:	dc2f      	bgt.n	df2 <DataEncrypt+0xea>
     d92:	e033      	b.n	dfc <DataEncrypt+0xf4>
	{
		for (j=0;j<16;j++)
		{
			block[j] = CTR_Nonce_and_Counter[j];
     d94:	aa02      	add	r2, sp, #8
     d96:	5c99      	ldrb	r1, [r3, r2]
     d98:	aa06      	add	r2, sp, #24
     d9a:	5499      	strb	r1, [r3, r2]
     d9c:	3301      	adds	r3, #1
	CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1

	for (i=0;i<iterations+1;i++)
	{
		for (j=0;j<16;j++)
     d9e:	2b10      	cmp	r3, #16
     da0:	d1f8      	bne.n	d94 <DataEncrypt+0x8c>
		{
			block[j] = CTR_Nonce_and_Counter[j];
		}
		PHY_EncryptReq(&block[0] , mySecurityKey);
     da2:	491c      	ldr	r1, [pc, #112]	; (e14 <DataEncrypt+0x10c>)
     da4:	0010      	movs	r0, r2
     da6:	47c8      	blx	r9
		for (j=0;j<16;j++)
		{
			if (CTR_Nonce_and_Counter[15] == 0)
     da8:	ab02      	add	r3, sp, #8
     daa:	7bd8      	ldrb	r0, [r3, #15]
			{
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
			}
			else
			{
				Payloadinfo[j+(i-1)*16] = block[j] ^ Payloadinfo[j+(i-1)*16];
     dac:	4653      	mov	r3, sl
     dae:	3b01      	subs	r3, #1
     db0:	011f      	lsls	r7, r3, #4
     db2:	2300      	movs	r3, #0
		PHY_EncryptReq(&block[0] , mySecurityKey);
		for (j=0;j<16;j++)
		{
			if (CTR_Nonce_and_Counter[15] == 0)
			{
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
     db4:	4a18      	ldr	r2, [pc, #96]	; (e18 <DataEncrypt+0x110>)
     db6:	4694      	mov	ip, r2
			block[j] = CTR_Nonce_and_Counter[j];
		}
		PHY_EncryptReq(&block[0] , mySecurityKey);
		for (j=0;j<16;j++)
		{
			if (CTR_Nonce_and_Counter[15] == 0)
     db8:	2800      	cmp	r0, #0
     dba:	d106      	bne.n	dca <DataEncrypt+0xc2>
			{
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
     dbc:	aa06      	add	r2, sp, #24
     dbe:	5c99      	ldrb	r1, [r3, r2]
     dc0:	4662      	mov	r2, ip
     dc2:	5cd2      	ldrb	r2, [r2, r3]
     dc4:	404a      	eors	r2, r1
     dc6:	54f2      	strb	r2, [r6, r3]
     dc8:	e005      	b.n	dd6 <DataEncrypt+0xce>
     dca:	19e1      	adds	r1, r4, r7
			}
			else
			{
				Payloadinfo[j+(i-1)*16] = block[j] ^ Payloadinfo[j+(i-1)*16];
     dcc:	aa06      	add	r2, sp, #24
     dce:	5c9a      	ldrb	r2, [r3, r2]
     dd0:	5ccd      	ldrb	r5, [r1, r3]
     dd2:	406a      	eors	r2, r5
     dd4:	54ca      	strb	r2, [r1, r3]
     dd6:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
		{
			block[j] = CTR_Nonce_and_Counter[j];
		}
		PHY_EncryptReq(&block[0] , mySecurityKey);
		for (j=0;j<16;j++)
     dd8:	2b10      	cmp	r3, #16
     dda:	d1ed      	bne.n	db8 <DataEncrypt+0xb0>
			else
			{
				Payloadinfo[j+(i-1)*16] = block[j] ^ Payloadinfo[j+(i-1)*16];
			}
		}
		CTR_Nonce_and_Counter[15]++; // Increment Counter for next opration
     ddc:	3001      	adds	r0, #1
     dde:	ab02      	add	r3, sp, #8
     de0:	73d8      	strb	r0, [r3, #15]
	}
	CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
	CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1

	for (i=0;i<iterations+1;i++)
     de2:	465f      	mov	r7, fp
     de4:	3701      	adds	r7, #1
     de6:	b2fb      	uxtb	r3, r7
     de8:	469b      	mov	fp, r3
     dea:	469a      	mov	sl, r3
     dec:	4543      	cmp	r3, r8
     dee:	db03      	blt.n	df8 <DataEncrypt+0xf0>
     df0:	e004      	b.n	dfc <DataEncrypt+0xf4>
	{
		for (j=0;j<16;j++)
		{
			block[j] = CTR_Nonce_and_Counter[j];
		}
		PHY_EncryptReq(&block[0] , mySecurityKey);
     df2:	4b0a      	ldr	r3, [pc, #40]	; (e1c <DataEncrypt+0x114>)
     df4:	4699      	mov	r9, r3
		for (j=0;j<16;j++)
		{
			if (CTR_Nonce_and_Counter[15] == 0)
			{
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
     df6:	4e0a      	ldr	r6, [pc, #40]	; (e20 <DataEncrypt+0x118>)
		Payloadinfo[i] = 0; // Padding
	}
	CTR_Nonce_and_Counter[0] = 0x01;  // L
	for (i=0;i<8;i++)
	{
		CTR_Nonce_and_Counter[i+1] = MACInitParams.PAddress[i];
     df8:	2300      	movs	r3, #0
     dfa:	e7cb      	b.n	d94 <DataEncrypt+0x8c>

	

	return true;

}
     dfc:	2001      	movs	r0, #1
     dfe:	b00b      	add	sp, #44	; 0x2c
     e00:	bc3c      	pop	{r2, r3, r4, r5}
     e02:	4690      	mov	r8, r2
     e04:	4699      	mov	r9, r3
     e06:	46a2      	mov	sl, r4
     e08:	46ab      	mov	fp, r5
     e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e0c:	200004c4 	.word	0x200004c4
     e10:	00000bd5 	.word	0x00000bd5
     e14:	00007100 	.word	0x00007100
     e18:	2000059c 	.word	0x2000059c
     e1c:	00000b6d 	.word	0x00000b6d
     e20:	200004ec 	.word	0x200004ec

00000e24 <validate_mic>:
// Validates the Received mic with the mic computed from data packet decryption.
bool validate_mic(void)
{
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1])
     e24:	4b07      	ldr	r3, [pc, #28]	; (e44 <validate_mic+0x20>)
     e26:	781a      	ldrb	r2, [r3, #0]
     e28:	4b07      	ldr	r3, [pc, #28]	; (e48 <validate_mic+0x24>)
     e2a:	781b      	ldrb	r3, [r3, #0]
	{
		return false;
     e2c:	2000      	movs	r0, #0

}
// Validates the Received mic with the mic computed from data packet decryption.
bool validate_mic(void)
{
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1])
     e2e:	429a      	cmp	r2, r3
     e30:	d107      	bne.n	e42 <validate_mic+0x1e>
     e32:	4b04      	ldr	r3, [pc, #16]	; (e44 <validate_mic+0x20>)
     e34:	785b      	ldrb	r3, [r3, #1]
     e36:	4a04      	ldr	r2, [pc, #16]	; (e48 <validate_mic+0x24>)
     e38:	7850      	ldrb	r0, [r2, #1]
     e3a:	1a18      	subs	r0, r3, r0
     e3c:	4243      	negs	r3, r0
     e3e:	4158      	adcs	r0, r3
     e40:	b2c0      	uxtb	r0, r0
	}
	else
	{
		return true;
	}	
}
     e42:	4770      	bx	lr
     e44:	200004ec 	.word	0x200004ec
     e48:	200005ac 	.word	0x200005ac

00000e4c <DataDecrypt>:
 *      None
 *
 *****************************************************************************************/
bool DataDecrypt(uint8_t *Payload, uint8_t *PayloadLen, uint8_t *SourceIEEEAddress,
API_UINT32_UNION FrameCounter, uint8_t FrameControl)
{
     e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
     e4e:	465f      	mov	r7, fp
     e50:	4656      	mov	r6, sl
     e52:	464d      	mov	r5, r9
     e54:	4644      	mov	r4, r8
     e56:	b4f0      	push	{r4, r5, r6, r7}
     e58:	b08f      	sub	sp, #60	; 0x3c
     e5a:	0004      	movs	r4, r0
     e5c:	9104      	str	r1, [sp, #16]
     e5e:	4691      	mov	r9, r2
     e60:	469a      	mov	sl, r3
     e62:	ab18      	add	r3, sp, #96	; 0x60
     e64:	781b      	ldrb	r3, [r3, #0]
     e66:	9305      	str	r3, [sp, #20]
	uint8_t i , iterations , block[16] , j , copy_packet[128] , CTR_Nonce_and_Counter[16];
	// Calculating No of blocks in the packet (1 block = 16 bytes of data)
	iterations = *PayloadLen/16;
     e68:	780b      	ldrb	r3, [r1, #0]
     e6a:	091a      	lsrs	r2, r3, #4
	if (*PayloadLen % 16 != 0) iterations++;
     e6c:	0719      	lsls	r1, r3, #28
     e6e:	d000      	beq.n	e72 <DataDecrypt+0x26>
     e70:	3201      	adds	r2, #1

	//mic_generator(&Payloadinfo[0] , *Payload_len);

	for (i=*PayloadLen;i<iterations *16 ; i++ )
     e72:	0017      	movs	r7, r2
     e74:	0112      	lsls	r2, r2, #4
     e76:	4293      	cmp	r3, r2
     e78:	da05      	bge.n	e86 <DataDecrypt+0x3a>
	{
		Payload[i] = 0; // Padding
     e7a:	2100      	movs	r1, #0
     e7c:	54e1      	strb	r1, [r4, r3]
	iterations = *PayloadLen/16;
	if (*PayloadLen % 16 != 0) iterations++;

	//mic_generator(&Payloadinfo[0] , *Payload_len);

	for (i=*PayloadLen;i<iterations *16 ; i++ )
     e7e:	3301      	adds	r3, #1
     e80:	b2db      	uxtb	r3, r3
     e82:	4293      	cmp	r3, r2
     e84:	dbfa      	blt.n	e7c <DataDecrypt+0x30>
	{
		Payload[i] = 0; // Padding
	}
	CTR_Nonce_and_Counter[0] = 0x01;  // L
     e86:	2201      	movs	r2, #1
     e88:	ab06      	add	r3, sp, #24
     e8a:	701a      	strb	r2, [r3, #0]
     e8c:	2300      	movs	r3, #0
	for (i=0;i<8;i++)
	{
		CTR_Nonce_and_Counter[i+1] = SourceIEEEAddress[i];
     e8e:	4648      	mov	r0, r9
     e90:	aa06      	add	r2, sp, #24
     e92:	18d2      	adds	r2, r2, r3
     e94:	5cc1      	ldrb	r1, [r0, r3]
     e96:	7051      	strb	r1, [r2, #1]
     e98:	3301      	adds	r3, #1
	for (i=*PayloadLen;i<iterations *16 ; i++ )
	{
		Payload[i] = 0; // Padding
	}
	CTR_Nonce_and_Counter[0] = 0x01;  // L
	for (i=0;i<8;i++)
     e9a:	2b08      	cmp	r3, #8
     e9c:	d1f8      	bne.n	e90 <DataDecrypt+0x44>
     e9e:	4681      	mov	r9, r0
	{
		CTR_Nonce_and_Counter[i+1] = SourceIEEEAddress[i];
	}
	for (i=0;i<4;i++)
	{
		CTR_Nonce_and_Counter[i+9] = FrameCounter.v[i];
     ea0:	ab06      	add	r3, sp, #24
     ea2:	4652      	mov	r2, sl
     ea4:	725a      	strb	r2, [r3, #9]
     ea6:	4652      	mov	r2, sl
     ea8:	0a12      	lsrs	r2, r2, #8
     eaa:	729a      	strb	r2, [r3, #10]
     eac:	4652      	mov	r2, sl
     eae:	0c12      	lsrs	r2, r2, #16
     eb0:	72da      	strb	r2, [r3, #11]
     eb2:	4652      	mov	r2, sl
     eb4:	0e12      	lsrs	r2, r2, #24
     eb6:	731a      	strb	r2, [r3, #12]
	}
	CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode
     eb8:	2204      	movs	r2, #4
     eba:	735a      	strb	r2, [r3, #13]
	CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
     ebc:	2200      	movs	r2, #0
     ebe:	739a      	strb	r2, [r3, #14]
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
     ec0:	73da      	strb	r2, [r3, #15]


	for (i=0;i<iterations+1;i++)
     ec2:	1c7b      	adds	r3, r7, #1
     ec4:	1e19      	subs	r1, r3, #0
     ec6:	9203      	str	r2, [sp, #12]
     ec8:	dc29      	bgt.n	f1e <DataDecrypt+0xd2>
     eca:	e02f      	b.n	f2c <DataDecrypt+0xe0>
	{
		for (j=0;j<16;j++)
		{
			block[j] = CTR_Nonce_and_Counter[j];
     ecc:	aa06      	add	r2, sp, #24
     ece:	5c99      	ldrb	r1, [r3, r2]
     ed0:	aa0a      	add	r2, sp, #40	; 0x28
     ed2:	5499      	strb	r1, [r3, r2]
     ed4:	3301      	adds	r3, #1
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1


	for (i=0;i<iterations+1;i++)
	{
		for (j=0;j<16;j++)
     ed6:	2b10      	cmp	r3, #16
     ed8:	d1f8      	bne.n	ecc <DataDecrypt+0x80>
		{
			block[j] = CTR_Nonce_and_Counter[j];
		}
		PHY_EncryptReq(&block[0] , mySecurityKey);
     eda:	4924      	ldr	r1, [pc, #144]	; (f6c <DataDecrypt+0x120>)
     edc:	0010      	movs	r0, r2
     ede:	47c0      	blx	r8
		for (j=0;j<16;j++)
		{
			if (CTR_Nonce_and_Counter[15] == 0)
     ee0:	ab06      	add	r3, sp, #24
     ee2:	7bd8      	ldrb	r0, [r3, #15]
			{
				CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
			}
			else
			{
				Payload[j+(i-1)*16] = block[j] ^ Payload[j+(i-1)*16];
     ee4:	1e7b      	subs	r3, r7, #1
     ee6:	011f      	lsls	r7, r3, #4
     ee8:	2300      	movs	r3, #0
			block[j] = CTR_Nonce_and_Counter[j];
		}
		PHY_EncryptReq(&block[0] , mySecurityKey);
		for (j=0;j<16;j++)
		{
			if (CTR_Nonce_and_Counter[15] == 0)
     eea:	2800      	cmp	r0, #0
     eec:	d103      	bne.n	ef6 <DataDecrypt+0xaa>
			{
				CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
     eee:	aa0a      	add	r2, sp, #40	; 0x28
     ef0:	5c9a      	ldrb	r2, [r3, r2]
     ef2:	54ea      	strb	r2, [r5, r3]
     ef4:	e005      	b.n	f02 <DataDecrypt+0xb6>
     ef6:	19e2      	adds	r2, r4, r7
			}
			else
			{
				Payload[j+(i-1)*16] = block[j] ^ Payload[j+(i-1)*16];
     ef8:	a90a      	add	r1, sp, #40	; 0x28
     efa:	5c5e      	ldrb	r6, [r3, r1]
     efc:	5cd1      	ldrb	r1, [r2, r3]
     efe:	4071      	eors	r1, r6
     f00:	54d1      	strb	r1, [r2, r3]
     f02:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
		{
			block[j] = CTR_Nonce_and_Counter[j];
		}
		PHY_EncryptReq(&block[0] , mySecurityKey);
		for (j=0;j<16;j++)
     f04:	2b10      	cmp	r3, #16
     f06:	d1f0      	bne.n	eea <DataDecrypt+0x9e>
			else
			{
				Payload[j+(i-1)*16] = block[j] ^ Payload[j+(i-1)*16];
			}
		}
		CTR_Nonce_and_Counter[15]++; // Increment Counter for next opration
     f08:	3001      	adds	r0, #1
     f0a:	ab06      	add	r3, sp, #24
     f0c:	73d8      	strb	r0, [r3, #15]
	CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode
	CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1


	for (i=0;i<iterations+1;i++)
     f0e:	9e03      	ldr	r6, [sp, #12]
     f10:	3601      	adds	r6, #1
     f12:	b2f3      	uxtb	r3, r6
     f14:	9303      	str	r3, [sp, #12]
     f16:	1e1f      	subs	r7, r3, #0
     f18:	455f      	cmp	r7, fp
     f1a:	db05      	blt.n	f28 <DataDecrypt+0xdc>
     f1c:	e006      	b.n	f2c <DataDecrypt+0xe0>
	{
		for (j=0;j<16;j++)
		{
			block[j] = CTR_Nonce_and_Counter[j];
		}
		PHY_EncryptReq(&block[0] , mySecurityKey);
     f1e:	4b14      	ldr	r3, [pc, #80]	; (f70 <DataDecrypt+0x124>)
     f20:	4698      	mov	r8, r3
		for (j=0;j<16;j++)
		{
			if (CTR_Nonce_and_Counter[15] == 0)
			{
				CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
     f22:	4d14      	ldr	r5, [pc, #80]	; (f74 <DataDecrypt+0x128>)
     f24:	0017      	movs	r7, r2
     f26:	468b      	mov	fp, r1

	for (i=*PayloadLen;i<iterations *16 ; i++ )
	{
		Payload[i] = 0; // Padding
	}
	CTR_Nonce_and_Counter[0] = 0x01;  // L
     f28:	2300      	movs	r3, #0
     f2a:	e7cf      	b.n	ecc <DataDecrypt+0x80>
				Payload[j+(i-1)*16] = block[j] ^ Payload[j+(i-1)*16];
			}
		}
		CTR_Nonce_and_Counter[15]++; // Increment Counter for next opration
	}
	*PayloadLen = *PayloadLen-4;
     f2c:	9b04      	ldr	r3, [sp, #16]
     f2e:	7819      	ldrb	r1, [r3, #0]
     f30:	3904      	subs	r1, #4
     f32:	b2c9      	uxtb	r1, r1
     f34:	7019      	strb	r1, [r3, #0]
	mic_generator(&Payload[0] , *PayloadLen , FrameControl  , FrameCounter , SourceIEEEAddress);
     f36:	464b      	mov	r3, r9
     f38:	9300      	str	r3, [sp, #0]
     f3a:	4653      	mov	r3, sl
     f3c:	9a05      	ldr	r2, [sp, #20]
     f3e:	0020      	movs	r0, r4
     f40:	4c0d      	ldr	r4, [pc, #52]	; (f78 <DataDecrypt+0x12c>)
     f42:	47a0      	blx	r4
     f44:	2300      	movs	r3, #0
	for (i=0;i<16;i++)
	{
		final_mic_value[i] = CTR_mic[i] ^ CBC_mic[i];
     f46:	4d0d      	ldr	r5, [pc, #52]	; (f7c <DataDecrypt+0x130>)
     f48:	4c0a      	ldr	r4, [pc, #40]	; (f74 <DataDecrypt+0x128>)
     f4a:	480d      	ldr	r0, [pc, #52]	; (f80 <DataDecrypt+0x134>)
     f4c:	5ce1      	ldrb	r1, [r4, r3]
     f4e:	5cc2      	ldrb	r2, [r0, r3]
     f50:	404a      	eors	r2, r1
     f52:	54ea      	strb	r2, [r5, r3]
     f54:	3301      	adds	r3, #1
		}
		CTR_Nonce_and_Counter[15]++; // Increment Counter for next opration
	}
	*PayloadLen = *PayloadLen-4;
	mic_generator(&Payload[0] , *PayloadLen , FrameControl  , FrameCounter , SourceIEEEAddress);
	for (i=0;i<16;i++)
     f56:	2b10      	cmp	r3, #16
     f58:	d1f8      	bne.n	f4c <DataDecrypt+0x100>
	{
		final_mic_value[i] = CTR_mic[i] ^ CBC_mic[i];
	}
	return validate_mic();
     f5a:	4b0a      	ldr	r3, [pc, #40]	; (f84 <DataDecrypt+0x138>)
     f5c:	4798      	blx	r3

}
     f5e:	b00f      	add	sp, #60	; 0x3c
     f60:	bc3c      	pop	{r2, r3, r4, r5}
     f62:	4690      	mov	r8, r2
     f64:	4699      	mov	r9, r3
     f66:	46a2      	mov	sl, r4
     f68:	46ab      	mov	fp, r5
     f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f6c:	00007100 	.word	0x00007100
     f70:	00000b6d 	.word	0x00000b6d
     f74:	200004dc 	.word	0x200004dc
     f78:	00000bd5 	.word	0x00000bd5
     f7c:	200004ec 	.word	0x200004ec
     f80:	2000059c 	.word	0x2000059c
     f84:	00000e25 	.word	0x00000e25

00000f88 <MiMAC_SetChannel>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_SetChannel(uint8_t channel, uint8_t offsetFreq)
{
     f88:	b510      	push	{r4, lr}
	if (channel < 11 || channel > 26)
     f8a:	0002      	movs	r2, r0
     f8c:	3a0b      	subs	r2, #11
	{
		return false;
     f8e:	2300      	movs	r3, #0
 *      None
 *
 *****************************************************************************************/
bool MiMAC_SetChannel(uint8_t channel, uint8_t offsetFreq)
{
	if (channel < 11 || channel > 26)
     f90:	2a0f      	cmp	r2, #15
     f92:	d804      	bhi.n	f9e <MiMAC_SetChannel+0x16>
	{
		return false;
	}
	MACCurrentChannel = channel;
     f94:	4b03      	ldr	r3, [pc, #12]	; (fa4 <MiMAC_SetChannel+0x1c>)
     f96:	7018      	strb	r0, [r3, #0]
	PHY_SetChannel(channel);
     f98:	4b03      	ldr	r3, [pc, #12]	; (fa8 <MiMAC_SetChannel+0x20>)
     f9a:	4798      	blx	r3
	return true;
     f9c:	2301      	movs	r3, #1
}
     f9e:	0018      	movs	r0, r3
     fa0:	bd10      	pop	{r4, pc}
     fa2:	46c0      	nop			; (mov r8, r8)
     fa4:	200005b2 	.word	0x200005b2
     fa8:	00000af9 	.word	0x00000af9

00000fac <MiMAC_SendPacket>:
 *
 *****************************************************************************************/
bool MiMAC_SendPacket( MAC_TRANS_PARAM transParam,
         uint8_t *MACPayload,
         uint8_t MACPayloadLen)
{
     fac:	b5f0      	push	{r4, r5, r6, r7, lr}
     fae:	465f      	mov	r7, fp
     fb0:	4656      	mov	r6, sl
     fb2:	464d      	mov	r5, r9
     fb4:	4644      	mov	r4, r8
     fb6:	b4f0      	push	{r4, r5, r6, r7}
     fb8:	b0a7      	sub	sp, #156	; 0x9c
     fba:	1c04      	adds	r4, r0, #0
     fbc:	9003      	str	r0, [sp, #12]
     fbe:	0008      	movs	r0, r1
     fc0:	9104      	str	r1, [sp, #16]
     fc2:	0016      	movs	r6, r2
     fc4:	0a36      	lsrs	r6, r6, #8
     fc6:	9205      	str	r2, [sp, #20]
     fc8:	9302      	str	r3, [sp, #8]
     fca:	b2e3      	uxtb	r3, r4
     fcc:	069c      	lsls	r4, r3, #26
     fce:	0fe4      	lsrs	r4, r4, #31
     fd0:	4681      	mov	r9, r0
     fd2:	b2d1      	uxtb	r1, r2
     fd4:	b2f6      	uxtb	r6, r6
	#endif
	
    MIWI_TICK t1, t2;


    if (transParam.flags.bits.broadcast)
     fd6:	075a      	lsls	r2, r3, #29
     fd8:	d500      	bpl.n	fdc <MiMAC_SendPacket+0x30>
    {
        transParam.altDestAddr = true;
     fda:	2101      	movs	r1, #1
    }

    if (transParam.flags.bits.secEn)
     fdc:	2208      	movs	r2, #8
     fde:	401a      	ands	r2, r3
     fe0:	0010      	movs	r0, r2
    {
        transParam.altSrcAddr = false;
     fe2:	4242      	negs	r2, r0
     fe4:	4142      	adcs	r2, r0
     fe6:	4252      	negs	r2, r2
     fe8:	4016      	ands	r6, r2
	    }
    }
    #endif

    // set the frame control in variable i
    if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND)
     fea:	2203      	movs	r2, #3
     fec:	401a      	ands	r2, r3
     fee:	2a01      	cmp	r2, #1
     ff0:	d004      	beq.n	ffc <MiMAC_SendPacket+0x50>
    {
        frameControl = 0x03;
    } else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA)
     ff2:	2a00      	cmp	r2, #0
     ff4:	d104      	bne.n	1000 <MiMAC_SendPacket+0x54>
    {
        frameControl = 0x01;
     ff6:	2001      	movs	r0, #1
     ff8:	4682      	mov	sl, r0
     ffa:	e001      	b.n	1000 <MiMAC_SendPacket+0x54>
    #endif

    // set the frame control in variable i
    if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND)
    {
        frameControl = 0x03;
     ffc:	2003      	movs	r0, #3
     ffe:	4682      	mov	sl, r0
        frameControl = 0x01;
    }

    // decide the header length for different addressing mode
#ifndef TARGET_SMALL
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    1000:	a803      	add	r0, sp, #12
    1002:	8940      	ldrh	r0, [r0, #10]
    1004:	4db2      	ldr	r5, [pc, #712]	; (12d0 <MiMAC_SendPacket+0x324>)
    1006:	882d      	ldrh	r5, [r5, #0]
    1008:	4285      	cmp	r5, r0
    100a:	d10b      	bne.n	1024 <MiMAC_SendPacket+0x78>
    100c:	4db1      	ldr	r5, [pc, #708]	; (12d4 <MiMAC_SendPacket+0x328>)
    100e:	42a8      	cmp	r0, r5
    1010:	d00c      	beq.n	102c <MiMAC_SendPacket+0x80>
#endif
    {
        headerLength = 5;
        frameControl |= 0x40;
    1012:	2040      	movs	r0, #64	; 0x40
    1014:	4655      	mov	r5, sl
    1016:	4305      	orrs	r5, r0
    1018:	b2e8      	uxtb	r0, r5
    101a:	4682      	mov	sl, r0
#ifndef TARGET_SMALL
        IntraPAN = true;
    101c:	2001      	movs	r0, #1
    101e:	4683      	mov	fp, r0
    // decide the header length for different addressing mode
#ifndef TARGET_SMALL
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
#endif
    {
        headerLength = 5;
    1020:	3004      	adds	r0, #4
        frameControl |= 0x40;
#ifndef TARGET_SMALL
        IntraPAN = true;
    1022:	e006      	b.n	1032 <MiMAC_SendPacket+0x86>
    }
#ifndef TARGET_SMALL
    else
    {
        headerLength = 7;
        IntraPAN = false;
    1024:	2000      	movs	r0, #0
    1026:	4683      	mov	fp, r0
#endif
    }
#ifndef TARGET_SMALL
    else
    {
        headerLength = 7;
    1028:	3007      	adds	r0, #7
    102a:	e002      	b.n	1032 <MiMAC_SendPacket+0x86>
        IntraPAN = false;
    102c:	2000      	movs	r0, #0
    102e:	4683      	mov	fp, r0
#endif
    }
#ifndef TARGET_SMALL
    else
    {
        headerLength = 7;
    1030:	3007      	adds	r0, #7
        IntraPAN = false;
    }
#endif

    if (transParam.altDestAddr)
    1032:	4688      	mov	r8, r1
    {
        headerLength += 2;
    } else
    {
        headerLength += 8;
    1034:	0007      	movs	r7, r0
    1036:	3708      	adds	r7, #8
        headerLength = 7;
        IntraPAN = false;
    }
#endif

    if (transParam.altDestAddr)
    1038:	2900      	cmp	r1, #0
    103a:	d000      	beq.n	103e <MiMAC_SendPacket+0x92>
    {
        headerLength += 2;
    103c:	1c87      	adds	r7, r0, #2
    } else
    {
        headerLength += 8;
    }

    if (transParam.altSrcAddr)
    103e:	2e00      	cmp	r6, #0
    1040:	d003      	beq.n	104a <MiMAC_SendPacket+0x9e>
    {
        headerLength += 2;
    1042:	3702      	adds	r7, #2
    1044:	b2f9      	uxtb	r1, r7
    1046:	9101      	str	r1, [sp, #4]
    1048:	e002      	b.n	1050 <MiMAC_SendPacket+0xa4>
    } else
    {
        headerLength += 8;
    104a:	3708      	adds	r7, #8
    104c:	b2f9      	uxtb	r1, r7
    104e:	9101      	str	r1, [sp, #4]
    }

    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false)
    1050:	2124      	movs	r1, #36	; 0x24
    1052:	400b      	ands	r3, r1
    1054:	2b20      	cmp	r3, #32
    1056:	d103      	bne.n	1060 <MiMAC_SendPacket+0xb4>
    {
        frameControl |= 0x20;
    1058:	4651      	mov	r1, sl
    105a:	4319      	orrs	r1, r3
    105c:	b2cb      	uxtb	r3, r1
    105e:	469a      	mov	sl, r3
    }

    // use PACKET_TYPE_RESERVE to represent beacon. Fixed format for beacon packet
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    1060:	2a03      	cmp	r2, #3
    1062:	d106      	bne.n	1072 <MiMAC_SendPacket+0xc6>
        frameControl = 0x00;
        headerLength = 7;
#if !defined(TARGET_SMALL)
        IntraPAN = false;
#endif
        transParam.altSrcAddr = true;
    1064:	2601      	movs	r6, #1
        transParam.flags.bits.ackReq = false;
    1066:	2400      	movs	r4, #0
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    {
        frameControl = 0x00;
        headerLength = 7;
#if !defined(TARGET_SMALL)
        IntraPAN = false;
    1068:	2300      	movs	r3, #0
    106a:	469b      	mov	fp, r3
    }

    // use PACKET_TYPE_RESERVE to represent beacon. Fixed format for beacon packet
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    {
        frameControl = 0x00;
    106c:	469a      	mov	sl, r3
        headerLength = 7;
    106e:	3307      	adds	r3, #7
    1070:	9301      	str	r3, [sp, #4]
        transParam.altSrcAddr = true;
        transParam.flags.bits.ackReq = false;
    }

#ifdef ENABLE_SECURITY
    if (transParam.flags.bits.secEn)
    1072:	aa03      	add	r2, sp, #12
    1074:	0163      	lsls	r3, r4, #5
    1076:	7815      	ldrb	r5, [r2, #0]
    1078:	2120      	movs	r1, #32
    107a:	438d      	bics	r5, r1
    107c:	431d      	orrs	r5, r3
    107e:	7015      	strb	r5, [r2, #0]
    1080:	072b      	lsls	r3, r5, #28
    1082:	d400      	bmi.n	1086 <MiMAC_SendPacket+0xda>
    1084:	e105      	b.n	1292 <MiMAC_SendPacket+0x2e6>
    {
        frameControl |= 0x08;
    1086:	2308      	movs	r3, #8
    1088:	4652      	mov	r2, sl
    108a:	431a      	orrs	r2, r3
    108c:	b2d3      	uxtb	r3, r2
    108e:	469a      	mov	sl, r3
		//DataEncrypt(MACPayload, &MACPayloadLen , 0 , 0 , 0);
		  DataEncrypt(MACPayload, &MACPayloadLen, OutgoingFrameCounter, frameControl);
    1090:	4b91      	ldr	r3, [pc, #580]	; (12d8 <MiMAC_SendPacket+0x32c>)
    1092:	681a      	ldr	r2, [r3, #0]
    1094:	4653      	mov	r3, sl
    1096:	a930      	add	r1, sp, #192	; 0xc0
    1098:	9802      	ldr	r0, [sp, #8]
    109a:	4f90      	ldr	r7, [pc, #576]	; (12dc <MiMAC_SendPacket+0x330>)
    109c:	47b8      	blx	r7
    }
#endif

    // set header length
	packet[loc++] = headerLength;
    109e:	aa06      	add	r2, sp, #24
    10a0:	9901      	ldr	r1, [sp, #4]
    10a2:	7011      	strb	r1, [r2, #0]
    // set packet length
#ifdef ENABLE_SECURITY
    if (transParam.flags.bits.secEn)
    {
		// 4 byte mic and 5 byte outgoing frame counter 
		packet[loc++] = MACPayloadLen+headerLength+9;
    10a4:	ab30      	add	r3, sp, #192	; 0xc0
    10a6:	781b      	ldrb	r3, [r3, #0]
    10a8:	3309      	adds	r3, #9
    10aa:	18cf      	adds	r7, r1, r3
    10ac:	7057      	strb	r7, [r2, #1]
    {
		packet[loc++] = MACPayloadLen+headerLength;
    }

    // set frame control LSB
	packet[loc++] = frameControl;
    10ae:	ab06      	add	r3, sp, #24
    10b0:	4652      	mov	r2, sl
    10b2:	709a      	strb	r2, [r3, #2]

    // set frame control MSB
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    10b4:	43eb      	mvns	r3, r5
    10b6:	079b      	lsls	r3, r3, #30
    10b8:	d109      	bne.n	10ce <MiMAC_SendPacket+0x122>
    {
		packet[loc++] = 0x80; 
    10ba:	ab06      	add	r3, sp, #24
    10bc:	2280      	movs	r2, #128	; 0x80
    10be:	70da      	strb	r2, [r3, #3]
        // sequence number
		packet[loc++] = IEEESeqNum++;
    10c0:	4987      	ldr	r1, [pc, #540]	; (12e0 <MiMAC_SendPacket+0x334>)
    10c2:	780a      	ldrb	r2, [r1, #0]
    10c4:	1c50      	adds	r0, r2, #1
    10c6:	7008      	strb	r0, [r1, #0]
    10c8:	711a      	strb	r2, [r3, #4]
    10ca:	2205      	movs	r2, #5
    10cc:	e040      	b.n	1150 <MiMAC_SendPacket+0x1a4>
    } else
    {
        if (transParam.altDestAddr && transParam.altSrcAddr)
    10ce:	4643      	mov	r3, r8
    10d0:	2b00      	cmp	r3, #0
    10d2:	d00b      	beq.n	10ec <MiMAC_SendPacket+0x140>
    10d4:	2e00      	cmp	r6, #0
    10d6:	d003      	beq.n	10e0 <MiMAC_SendPacket+0x134>
        {
			packet[loc++] = 0x88;
    10d8:	2288      	movs	r2, #136	; 0x88
    10da:	ab06      	add	r3, sp, #24
    10dc:	70da      	strb	r2, [r3, #3]
    10de:	e0e0      	b.n	12a2 <MiMAC_SendPacket+0x2f6>
			
        } else if (transParam.altDestAddr && transParam.altSrcAddr == 0)
    10e0:	2e00      	cmp	r6, #0
    10e2:	d109      	bne.n	10f8 <MiMAC_SendPacket+0x14c>
        {
			packet[loc++] = 0xC8;
    10e4:	22c8      	movs	r2, #200	; 0xc8
    10e6:	ab06      	add	r3, sp, #24
    10e8:	70da      	strb	r2, [r3, #3]
    10ea:	e0da      	b.n	12a2 <MiMAC_SendPacket+0x2f6>
        } else if (transParam.altDestAddr == 0 && transParam.altSrcAddr == 1)
    10ec:	2e00      	cmp	r6, #0
    10ee:	d003      	beq.n	10f8 <MiMAC_SendPacket+0x14c>
        {
			packet[loc++] = 0x8C;
    10f0:	228c      	movs	r2, #140	; 0x8c
    10f2:	ab06      	add	r3, sp, #24
    10f4:	70da      	strb	r2, [r3, #3]
    10f6:	e002      	b.n	10fe <MiMAC_SendPacket+0x152>
        } else
        {
			packet[loc++] = 0xCC;
    10f8:	22cc      	movs	r2, #204	; 0xcc
    10fa:	ab06      	add	r3, sp, #24
    10fc:	70da      	strb	r2, [r3, #3]
        }

        // sequence number
		packet[loc++] = IEEESeqNum++;
    10fe:	4b78      	ldr	r3, [pc, #480]	; (12e0 <MiMAC_SendPacket+0x334>)
    1100:	781a      	ldrb	r2, [r3, #0]
    1102:	1c51      	adds	r1, r2, #1
    1104:	7019      	strb	r1, [r3, #0]
    1106:	ab06      	add	r3, sp, #24
    1108:	711a      	strb	r2, [r3, #4]

        // destination PANID
		packet[loc++] = transParam.DestPANID.v[0];
    110a:	aa03      	add	r2, sp, #12
    110c:	7a91      	ldrb	r1, [r2, #10]
    110e:	7159      	strb	r1, [r3, #5]
		packet[loc++] = transParam.DestPANID.v[1];
    1110:	7ad2      	ldrb	r2, [r2, #11]
    1112:	719a      	strb	r2, [r3, #6]

        // destination address
        if (transParam.flags.bits.broadcast)
    1114:	076b      	lsls	r3, r5, #29
    1116:	d505      	bpl.n	1124 <MiMAC_SendPacket+0x178>
        {
			packet[loc++] = 0xFF;
    1118:	ab06      	add	r3, sp, #24
    111a:	22ff      	movs	r2, #255	; 0xff
    111c:	71da      	strb	r2, [r3, #7]
			packet[loc++] = 0xFF;
    111e:	721a      	strb	r2, [r3, #8]
    1120:	3af6      	subs	r2, #246	; 0xf6
    1122:	e015      	b.n	1150 <MiMAC_SendPacket+0x1a4>
    1124:	2300      	movs	r3, #0
        } else
        {
            if (transParam.altDestAddr)
    1126:	4642      	mov	r2, r8
    1128:	4648      	mov	r0, r9
    112a:	2a00      	cmp	r2, #0
    112c:	d008      	beq.n	1140 <MiMAC_SendPacket+0x194>
            {
				packet[loc++] = transParam.DestAddress[0];
    112e:	ab06      	add	r3, sp, #24
    1130:	464a      	mov	r2, r9
    1132:	7812      	ldrb	r2, [r2, #0]
    1134:	71da      	strb	r2, [r3, #7]
				packet[loc++] = transParam.DestAddress[1];
    1136:	464a      	mov	r2, r9
    1138:	7852      	ldrb	r2, [r2, #1]
    113a:	721a      	strb	r2, [r3, #8]
    113c:	2209      	movs	r2, #9
    113e:	e007      	b.n	1150 <MiMAC_SendPacket+0x1a4>
            } else
            {
                for (i = 0; i < 8; i++)
                {
					packet[loc++] = transParam.DestAddress[i];
    1140:	aa06      	add	r2, sp, #24
    1142:	18d2      	adds	r2, r2, r3
    1144:	5cc1      	ldrb	r1, [r0, r3]
    1146:	71d1      	strb	r1, [r2, #7]
    1148:	3301      	adds	r3, #1
            {
				packet[loc++] = transParam.DestAddress[0];
				packet[loc++] = transParam.DestAddress[1];
            } else
            {
                for (i = 0; i < 8; i++)
    114a:	2b08      	cmp	r3, #8
    114c:	d1f8      	bne.n	1140 <MiMAC_SendPacket+0x194>
                {
					packet[loc++] = transParam.DestAddress[i];
    114e:	220f      	movs	r2, #15
        }
    }

#ifndef TARGET_SMALL
    // source PANID if necessary
    if (IntraPAN == false)
    1150:	465b      	mov	r3, fp
    1152:	2b00      	cmp	r3, #0
    1154:	d109      	bne.n	116a <MiMAC_SendPacket+0x1be>
    {
		packet[loc++] = MAC_PANID.v[0];
    1156:	1c53      	adds	r3, r2, #1
    1158:	b2db      	uxtb	r3, r3
    115a:	a906      	add	r1, sp, #24
    115c:	485c      	ldr	r0, [pc, #368]	; (12d0 <MiMAC_SendPacket+0x324>)
    115e:	7805      	ldrb	r5, [r0, #0]
    1160:	548d      	strb	r5, [r1, r2]
		packet[loc++] = MAC_PANID.v[1];
    1162:	3202      	adds	r2, #2
    1164:	b2d2      	uxtb	r2, r2
    1166:	7840      	ldrb	r0, [r0, #1]
    1168:	54c8      	strb	r0, [r1, r3]
    }
#endif

    // source address
    if (transParam.altSrcAddr)
    116a:	2e00      	cmp	r6, #0
    116c:	d00a      	beq.n	1184 <MiMAC_SendPacket+0x1d8>
    {
		packet[loc++] = myNetworkAddress.v[0];
    116e:	a906      	add	r1, sp, #24
    1170:	485c      	ldr	r0, [pc, #368]	; (12e4 <MiMAC_SendPacket+0x338>)
    1172:	7803      	ldrb	r3, [r0, #0]
    1174:	548b      	strb	r3, [r1, r2]
		packet[loc++] = myNetworkAddress.v[1];
    1176:	1c93      	adds	r3, r2, #2
    1178:	b2db      	uxtb	r3, r3
    117a:	3201      	adds	r2, #1
    117c:	b2d2      	uxtb	r2, r2
    117e:	7840      	ldrb	r0, [r0, #1]
    1180:	5488      	strb	r0, [r1, r2]
    1182:	e00c      	b.n	119e <MiMAC_SendPacket+0x1f2>
    } else
    {
        for (i = 0; i < 8; i++)
        {
			packet[loc++] = MACInitParams.PAddress[i];
    1184:	4b58      	ldr	r3, [pc, #352]	; (12e8 <MiMAC_SendPacket+0x33c>)
    1186:	6859      	ldr	r1, [r3, #4]
    1188:	0013      	movs	r3, r2
    118a:	3308      	adds	r3, #8
    118c:	b2db      	uxtb	r3, r3
    118e:	1c50      	adds	r0, r2, #1
    1190:	780e      	ldrb	r6, [r1, #0]
    1192:	ad06      	add	r5, sp, #24
    1194:	54ae      	strb	r6, [r5, r2]
    1196:	3101      	adds	r1, #1
    1198:	b2c2      	uxtb	r2, r0
    {
		packet[loc++] = myNetworkAddress.v[0];
		packet[loc++] = myNetworkAddress.v[1];
    } else
    {
        for (i = 0; i < 8; i++)
    119a:	4293      	cmp	r3, r2
    119c:	d1f7      	bne.n	118e <MiMAC_SendPacket+0x1e2>
        {
			packet[loc++] = MACInitParams.PAddress[i];
        }
    }
#ifdef ENABLE_SECURITY
if (transParam.flags.bits.secEn)
    119e:	a903      	add	r1, sp, #12
    11a0:	0162      	lsls	r2, r4, #5
    11a2:	780c      	ldrb	r4, [r1, #0]
    11a4:	2020      	movs	r0, #32
    11a6:	4384      	bics	r4, r0
    11a8:	4314      	orrs	r4, r2
    11aa:	700c      	strb	r4, [r1, #0]
    11ac:	0722      	lsls	r2, r4, #28
    11ae:	d514      	bpl.n	11da <MiMAC_SendPacket+0x22e>
    11b0:	0019      	movs	r1, r3
    11b2:	2200      	movs	r2, #0
{
	// fill the additional security aux header
	for (i = 0; i < 4; i++)
	{
		packet[loc++] = OutgoingFrameCounter.v[i];
    11b4:	4f48      	ldr	r7, [pc, #288]	; (12d8 <MiMAC_SendPacket+0x32c>)
    11b6:	1c48      	adds	r0, r1, #1
    11b8:	5cbe      	ldrb	r6, [r7, r2]
    11ba:	ad06      	add	r5, sp, #24
    11bc:	546e      	strb	r6, [r5, r1]
    11be:	3201      	adds	r2, #1
    11c0:	b2c1      	uxtb	r1, r0
    }
#ifdef ENABLE_SECURITY
if (transParam.flags.bits.secEn)
{
	// fill the additional security aux header
	for (i = 0; i < 4; i++)
    11c2:	2a04      	cmp	r2, #4
    11c4:	d1f7      	bne.n	11b6 <MiMAC_SendPacket+0x20a>
    11c6:	1d1a      	adds	r2, r3, #4
    11c8:	b2d2      	uxtb	r2, r2
	{
		packet[loc++] = OutgoingFrameCounter.v[i];
	}
	OutgoingFrameCounter.Val++;
    11ca:	4843      	ldr	r0, [pc, #268]	; (12d8 <MiMAC_SendPacket+0x32c>)
    11cc:	6801      	ldr	r1, [r0, #0]
    11ce:	3101      	adds	r1, #1
    11d0:	6001      	str	r1, [r0, #0]
	{
		nvmPutOutFrameCounter(OutgoingFrameCounter.v);
	}
	#endif
	//copy myKeySequenceNumber
	packet[loc++] = myKeySequenceNumber;
    11d2:	3305      	adds	r3, #5
    11d4:	b2db      	uxtb	r3, r3
    11d6:	2000      	movs	r0, #0
    11d8:	54a8      	strb	r0, [r5, r2]
    {
		packet[loc++] = MACPayload[i];
    }
#else
    // write the payload
    for (i = 0; i < MACPayloadLen; i++) // MIC added 
    11da:	aa30      	add	r2, sp, #192	; 0xc0
    11dc:	7811      	ldrb	r1, [r2, #0]
    11de:	2900      	cmp	r1, #0
    11e0:	d00b      	beq.n	11fa <MiMAC_SendPacket+0x24e>
    11e2:	9a02      	ldr	r2, [sp, #8]
    11e4:	1859      	adds	r1, r3, r1
    11e6:	b2c9      	uxtb	r1, r1
    {
	    packet[loc++] = MACPayload[i];
    11e8:	1c58      	adds	r0, r3, #1
    11ea:	7816      	ldrb	r6, [r2, #0]
    11ec:	ad06      	add	r5, sp, #24
    11ee:	54ee      	strb	r6, [r5, r3]
    11f0:	3201      	adds	r2, #1
    11f2:	b2c3      	uxtb	r3, r0
    {
		packet[loc++] = MACPayload[i];
    }
#else
    // write the payload
    for (i = 0; i < MACPayloadLen; i++) // MIC added 
    11f4:	4299      	cmp	r1, r3
    11f6:	d1f7      	bne.n	11e8 <MiMAC_SendPacket+0x23c>
    11f8:	e000      	b.n	11fc <MiMAC_SendPacket+0x250>
    11fa:	0019      	movs	r1, r3
    {
	    packet[loc++] = MACPayload[i];
    }
	packet[loc++] = final_mic_value[0];
    11fc:	aa06      	add	r2, sp, #24
    11fe:	4b3b      	ldr	r3, [pc, #236]	; (12ec <MiMAC_SendPacket+0x340>)
    1200:	7818      	ldrb	r0, [r3, #0]
    1202:	5450      	strb	r0, [r2, r1]
	packet[loc++] = final_mic_value[1];
    1204:	1c48      	adds	r0, r1, #1
    1206:	b2c0      	uxtb	r0, r0
    1208:	785d      	ldrb	r5, [r3, #1]
    120a:	5415      	strb	r5, [r2, r0]
	packet[loc++] = final_mic_value[2];
    120c:	1c88      	adds	r0, r1, #2
    120e:	b2c0      	uxtb	r0, r0
    1210:	789d      	ldrb	r5, [r3, #2]
    1212:	5415      	strb	r5, [r2, r0]
	packet[loc++] = final_mic_value[3];
    1214:	3103      	adds	r1, #3
    1216:	b2c9      	uxtb	r1, r1
    1218:	78db      	ldrb	r3, [r3, #3]
    121a:	5453      	strb	r3, [r2, r1]
	#endif

    trx_status.bits.TX_BUSY = 1;
    121c:	4a34      	ldr	r2, [pc, #208]	; (12f0 <MiMAC_SendPacket+0x344>)
    121e:	7811      	ldrb	r1, [r2, #0]
    1220:	2301      	movs	r3, #1
    1222:	430b      	orrs	r3, r1
    1224:	7013      	strb	r3, [r2, #0]

    // set the trigger value
    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false)
    1226:	2324      	movs	r3, #36	; 0x24
    1228:	401c      	ands	r4, r3
    122a:	2c20      	cmp	r4, #32
    122c:	d104      	bne.n	1238 <MiMAC_SendPacket+0x28c>
    {
        i = 0x05;
#ifndef TARGET_SMALL
        trx_status.bits.TX_PENDING_ACK = 1;
    122e:	7811      	ldrb	r1, [r2, #0]
    1230:	2302      	movs	r3, #2
    1232:	430b      	orrs	r3, r1
    1234:	7013      	strb	r3, [r2, #0]
    1236:	e004      	b.n	1242 <MiMAC_SendPacket+0x296>
#endif
    } else
    {
        i = 0x01;
#ifndef TARGET_SMALL
        trx_status.bits.TX_PENDING_ACK = 0;
    1238:	4a2d      	ldr	r2, [pc, #180]	; (12f0 <MiMAC_SendPacket+0x344>)
    123a:	7813      	ldrb	r3, [r2, #0]
    123c:	2102      	movs	r1, #2
    123e:	438b      	bics	r3, r1
    1240:	7013      	strb	r3, [r2, #0]
#endif
    }
	// Now Trigger the Transmission of packet
	PHY_DataReq(&packet);
    1242:	a806      	add	r0, sp, #24
    1244:	4b2b      	ldr	r3, [pc, #172]	; (12f4 <MiMAC_SendPacket+0x348>)
    1246:	4798      	blx	r3
	#if defined (VERIFY_TRANSMIT)
	t1 = MiWi_TickGet();
    1248:	4b2b      	ldr	r3, [pc, #172]	; (12f8 <MiMAC_SendPacket+0x34c>)
    124a:	4798      	blx	r3
    124c:	0006      	movs	r6, r0
	while (1)
	{
		if (trx_status.bits.TX_BUSY == 0)
    124e:	4c28      	ldr	r4, [pc, #160]	; (12f0 <MiMAC_SendPacket+0x344>)
				trx_status.bits.TX_FAIL = 0;
				return false;
			}
			break;
		}
		t2 = MiWi_TickGet();
    1250:	4d29      	ldr	r5, [pc, #164]	; (12f8 <MiMAC_SendPacket+0x34c>)
	PHY_DataReq(&packet);
	#if defined (VERIFY_TRANSMIT)
	t1 = MiWi_TickGet();
	while (1)
	{
		if (trx_status.bits.TX_BUSY == 0)
    1252:	7823      	ldrb	r3, [r4, #0]
    1254:	07db      	lsls	r3, r3, #31
    1256:	d40b      	bmi.n	1270 <MiMAC_SendPacket+0x2c4>
		{
			if (trx_status.bits.TX_FAIL)
    1258:	4b25      	ldr	r3, [pc, #148]	; (12f0 <MiMAC_SendPacket+0x344>)
    125a:	781b      	ldrb	r3, [r3, #0]
		}
	}
	#endif


    return true;
    125c:	2001      	movs	r0, #1
	t1 = MiWi_TickGet();
	while (1)
	{
		if (trx_status.bits.TX_BUSY == 0)
		{
			if (trx_status.bits.TX_FAIL)
    125e:	075b      	lsls	r3, r3, #29
    1260:	d52e      	bpl.n	12c0 <MiMAC_SendPacket+0x314>
			{
				trx_status.bits.TX_FAIL = 0;
    1262:	4a23      	ldr	r2, [pc, #140]	; (12f0 <MiMAC_SendPacket+0x344>)
    1264:	7813      	ldrb	r3, [r2, #0]
    1266:	2104      	movs	r1, #4
    1268:	438b      	bics	r3, r1
    126a:	7013      	strb	r3, [r2, #0]
				return false;
    126c:	2000      	movs	r0, #0
    126e:	e027      	b.n	12c0 <MiMAC_SendPacket+0x314>
			}
			break;
		}
		t2 = MiWi_TickGet();
    1270:	47a8      	blx	r5
		if (MiWi_TickGetDiff(t2, t1) > FORTY_MILI_SECOND * 5)
    1272:	1b80      	subs	r0, r0, r6
    1274:	2805      	cmp	r0, #5
    1276:	d9ec      	bls.n	1252 <MiMAC_SendPacket+0x2a6>
		{
			PHY_Init();
    1278:	4b20      	ldr	r3, [pc, #128]	; (12fc <MiMAC_SendPacket+0x350>)
    127a:	4798      	blx	r3
			MiMAC_SetAltAddress(myNetworkAddress.v, MAC_PANID.v);
    127c:	4914      	ldr	r1, [pc, #80]	; (12d0 <MiMAC_SendPacket+0x324>)
    127e:	4819      	ldr	r0, [pc, #100]	; (12e4 <MiMAC_SendPacket+0x338>)
    1280:	4b1f      	ldr	r3, [pc, #124]	; (1300 <MiMAC_SendPacket+0x354>)
    1282:	4798      	blx	r3
			trx_status.bits.TX_BUSY = 0;
    1284:	4a1a      	ldr	r2, [pc, #104]	; (12f0 <MiMAC_SendPacket+0x344>)
    1286:	7813      	ldrb	r3, [r2, #0]
    1288:	2101      	movs	r1, #1
    128a:	438b      	bics	r3, r1
    128c:	7013      	strb	r3, [r2, #0]
			return false;
    128e:	2000      	movs	r0, #0
    1290:	e016      	b.n	12c0 <MiMAC_SendPacket+0x314>
		  DataEncrypt(MACPayload, &MACPayloadLen, OutgoingFrameCounter, frameControl);
    }
#endif

    // set header length
	packet[loc++] = headerLength;
    1292:	aa06      	add	r2, sp, #24
    1294:	9901      	ldr	r1, [sp, #4]
    1296:	7011      	strb	r1, [r2, #0]
		// 4 byte mic and 5 byte outgoing frame counter 
		packet[loc++] = MACPayloadLen+headerLength+9;
    } else
#endif
    {
		packet[loc++] = MACPayloadLen+headerLength;
    1298:	ab30      	add	r3, sp, #192	; 0xc0
    129a:	781b      	ldrb	r3, [r3, #0]
    129c:	18cf      	adds	r7, r1, r3
    129e:	7057      	strb	r7, [r2, #1]
    12a0:	e705      	b.n	10ae <MiMAC_SendPacket+0x102>
        {
			packet[loc++] = 0xCC;
        }

        // sequence number
		packet[loc++] = IEEESeqNum++;
    12a2:	4b0f      	ldr	r3, [pc, #60]	; (12e0 <MiMAC_SendPacket+0x334>)
    12a4:	781a      	ldrb	r2, [r3, #0]
    12a6:	1c51      	adds	r1, r2, #1
    12a8:	7019      	strb	r1, [r3, #0]
    12aa:	ab06      	add	r3, sp, #24
    12ac:	711a      	strb	r2, [r3, #4]

        // destination PANID
		packet[loc++] = transParam.DestPANID.v[0];
    12ae:	aa03      	add	r2, sp, #12
    12b0:	7a91      	ldrb	r1, [r2, #10]
    12b2:	7159      	strb	r1, [r3, #5]
		packet[loc++] = transParam.DestPANID.v[1];
    12b4:	7ad2      	ldrb	r2, [r2, #11]
    12b6:	719a      	strb	r2, [r3, #6]

        // destination address
        if (transParam.flags.bits.broadcast)
    12b8:	076b      	lsls	r3, r5, #29
    12ba:	d500      	bpl.n	12be <MiMAC_SendPacket+0x312>
    12bc:	e72c      	b.n	1118 <MiMAC_SendPacket+0x16c>
    12be:	e736      	b.n	112e <MiMAC_SendPacket+0x182>
	#endif


    return true;

}
    12c0:	b027      	add	sp, #156	; 0x9c
    12c2:	bc3c      	pop	{r2, r3, r4, r5}
    12c4:	4690      	mov	r8, r2
    12c6:	4699      	mov	r9, r3
    12c8:	46a2      	mov	sl, r4
    12ca:	46ab      	mov	fp, r5
    12cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12ce:	46c0      	nop			; (mov r8, r8)
    12d0:	200005b0 	.word	0x200005b0
    12d4:	0000ffff 	.word	0x0000ffff
    12d8:	20000598 	.word	0x20000598
    12dc:	00000d09 	.word	0x00000d09
    12e0:	200004b8 	.word	0x200004b8
    12e4:	200004bc 	.word	0x200004bc
    12e8:	200004c4 	.word	0x200004c4
    12ec:	200004ec 	.word	0x200004ec
    12f0:	200005b4 	.word	0x200005b4
    12f4:	00000a09 	.word	0x00000a09
    12f8:	00002961 	.word	0x00002961
    12fc:	00000aa5 	.word	0x00000aa5
    1300:	00000b99 	.word	0x00000b99

00001304 <PHY_SetIEEEAddr>:

/*************************************************************************//**
*****************************************************************************/
// Setting the IEEE address
void PHY_SetIEEEAddr(uint8_t *ieee_addr)
{
    1304:	b570      	push	{r4, r5, r6, lr}
    1306:	0005      	movs	r5, r0
    1308:	2424      	movs	r4, #36	; 0x24
	uint8_t *ptr_to_reg = ieee_addr;
	for (uint8_t i = 0; i < 8; i++) {
		trx_reg_write((RG_IEEE_ADDR_0 + i), *ptr_to_reg);
    130a:	4e05      	ldr	r6, [pc, #20]	; (1320 <PHY_SetIEEEAddr+0x1c>)
    130c:	7829      	ldrb	r1, [r5, #0]
    130e:	0020      	movs	r0, r4
    1310:	47b0      	blx	r6
		ptr_to_reg++;
    1312:	3501      	adds	r5, #1
    1314:	3401      	adds	r4, #1
    1316:	b2e4      	uxtb	r4, r4
*****************************************************************************/
// Setting the IEEE address
void PHY_SetIEEEAddr(uint8_t *ieee_addr)
{
	uint8_t *ptr_to_reg = ieee_addr;
	for (uint8_t i = 0; i < 8; i++) {
    1318:	2c2c      	cmp	r4, #44	; 0x2c
    131a:	d1f7      	bne.n	130c <PHY_SetIEEEAddr+0x8>
		trx_reg_write((RG_IEEE_ADDR_0 + i), *ptr_to_reg);
		ptr_to_reg++;
	}
}
    131c:	bd70      	pop	{r4, r5, r6, pc}
    131e:	46c0      	nop			; (mov r8, r8)
    1320:	00004fb5 	.word	0x00004fb5

00001324 <MiMAC_Init>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_Init(MACINIT_PARAM initValue)
{
    1324:	b530      	push	{r4, r5, lr}
    1326:	b083      	sub	sp, #12
    1328:	466c      	mov	r4, sp
    132a:	9000      	str	r0, [sp, #0]
    132c:	9101      	str	r1, [sp, #4]
	uint8_t i;

	PHY_Init();
    132e:	4b10      	ldr	r3, [pc, #64]	; (1370 <MiMAC_Init+0x4c>)
    1330:	4798      	blx	r3
	MACInitParams = initValue;
    1332:	4b10      	ldr	r3, [pc, #64]	; (1374 <MiMAC_Init+0x50>)
    1334:	cc06      	ldmia	r4!, {r1, r2}
    1336:	c306      	stmia	r3!, {r1, r2}
	uint16_t x =  PHY_RandomReq();
    1338:	4b0f      	ldr	r3, [pc, #60]	; (1378 <MiMAC_Init+0x54>)
    133a:	4798      	blx	r3
    133c:	0005      	movs	r5, r0
/*************************************************************************//**
*****************************************************************************/
// Set Radio to Receive State 
void PHY_SetRxState(bool rx)
{
	phyRxState = rx;
    133e:	2401      	movs	r4, #1
    1340:	4b0e      	ldr	r3, [pc, #56]	; (137c <MiMAC_Init+0x58>)
    1342:	701c      	strb	r4, [r3, #0]
	phySetRxState();
    1344:	4b0e      	ldr	r3, [pc, #56]	; (1380 <MiMAC_Init+0x5c>)
    1346:	4798      	blx	r3
	PHY_Init();
	MACInitParams = initValue;
	uint16_t x =  PHY_RandomReq();
	// Set RF mode
	PHY_SetRxState(true);
	IEEESeqNum =   x & 0xff;
    1348:	4b0e      	ldr	r3, [pc, #56]	; (1384 <MiMAC_Init+0x60>)
    134a:	701d      	strb	r5, [r3, #0]
	
	MACCurrentChannel = 11;
    134c:	220b      	movs	r2, #11
    134e:	4b0e      	ldr	r3, [pc, #56]	; (1388 <MiMAC_Init+0x64>)
    1350:	701a      	strb	r2, [r3, #0]
	
	// Set Node Address
	PHY_SetIEEEAddr(myLongAddress);
    1352:	480e      	ldr	r0, [pc, #56]	; (138c <MiMAC_Init+0x68>)
    1354:	4b0e      	ldr	r3, [pc, #56]	; (1390 <MiMAC_Init+0x6c>)
    1356:	4798      	blx	r3

	trx_status.Val = 0;
    1358:	2300      	movs	r3, #0
    135a:	4a0e      	ldr	r2, [pc, #56]	; (1394 <MiMAC_Init+0x70>)
    135c:	7013      	strb	r3, [r2, #0]

	for (i = 0; i < BANK_SIZE; i++)
	{
		RxBuffer[i].PayloadLen = 0;
    135e:	4a0e      	ldr	r2, [pc, #56]	; (1398 <MiMAC_Init+0x74>)
    1360:	7013      	strb	r3, [r2, #0]
    1362:	214e      	movs	r1, #78	; 0x4e
    1364:	5453      	strb	r3, [r2, r1]
				OutgoingFrameCounter.Val = 0;
				nvmPutOutFrameCounter(OutgoingFrameCounter.v);
				OutgoingFrameCounter.Val = 1;
			}
		#else
			OutgoingFrameCounter.Val = 1;
    1366:	4b0d      	ldr	r3, [pc, #52]	; (139c <MiMAC_Init+0x78>)
    1368:	601c      	str	r4, [r3, #0]
		#endif
	#endif

	return true;
}
    136a:	2001      	movs	r0, #1
    136c:	b003      	add	sp, #12
    136e:	bd30      	pop	{r4, r5, pc}
    1370:	00000aa5 	.word	0x00000aa5
    1374:	200004c4 	.word	0x200004c4
    1378:	00000a55 	.word	0x00000a55
    137c:	20000340 	.word	0x20000340
    1380:	000009dd 	.word	0x000009dd
    1384:	200004b8 	.word	0x200004b8
    1388:	200005b2 	.word	0x200005b2
    138c:	20000020 	.word	0x20000020
    1390:	00001305 	.word	0x00001305
    1394:	200005b4 	.word	0x200005b4
    1398:	200004fc 	.word	0x200004fc
    139c:	20000598 	.word	0x20000598

000013a0 <MiMAC_DiscardPacket>:
 *
 *****************************************************************************************/
void MiMAC_DiscardPacket(void)
{
	//re-enable the ACKS
	if (BankIndex < BANK_SIZE)
    13a0:	4b04      	ldr	r3, [pc, #16]	; (13b4 <MiMAC_DiscardPacket+0x14>)
    13a2:	781b      	ldrb	r3, [r3, #0]
    13a4:	2b01      	cmp	r3, #1
    13a6:	d804      	bhi.n	13b2 <MiMAC_DiscardPacket+0x12>
	{
		RxBuffer[BankIndex].PayloadLen = 0;
    13a8:	224e      	movs	r2, #78	; 0x4e
    13aa:	4353      	muls	r3, r2
    13ac:	2100      	movs	r1, #0
    13ae:	4a02      	ldr	r2, [pc, #8]	; (13b8 <MiMAC_DiscardPacket+0x18>)
    13b0:	5499      	strb	r1, [r3, r2]
	}
}
    13b2:	4770      	bx	lr
    13b4:	2000001e 	.word	0x2000001e
    13b8:	200004fc 	.word	0x200004fc

000013bc <MiMAC_ReceivedPacket>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_ReceivedPacket(void)
{
    13bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    13be:	4657      	mov	r7, sl
    13c0:	4646      	mov	r6, r8
    13c2:	b4c0      	push	{r6, r7}
    13c4:	b083      	sub	sp, #12
	uint8_t i;

	//If the stack TX has been busy for a long time then
	//time out the TX because we may have missed the interrupt
	//and don't want to lock up the stack forever
	if (trx_status.bits.TX_BUSY)
    13c6:	4bd2      	ldr	r3, [pc, #840]	; (1710 <MiMAC_ReceivedPacket+0x354>)
    13c8:	781b      	ldrb	r3, [r3, #0]
    13ca:	07db      	lsls	r3, r3, #31
    13cc:	d512      	bpl.n	13f4 <MiMAC_ReceivedPacket+0x38>
	{
		if (failureCounter >= FAILURE_COUNTER)
    13ce:	4bd1      	ldr	r3, [pc, #836]	; (1714 <MiMAC_ReceivedPacket+0x358>)
    13d0:	881b      	ldrh	r3, [r3, #0]
    13d2:	b29b      	uxth	r3, r3
    13d4:	2b05      	cmp	r3, #5
    13d6:	d908      	bls.n	13ea <MiMAC_ReceivedPacket+0x2e>
		{
			failureCounter = 0;
    13d8:	2200      	movs	r2, #0
    13da:	4bce      	ldr	r3, [pc, #824]	; (1714 <MiMAC_ReceivedPacket+0x358>)
    13dc:	801a      	strh	r2, [r3, #0]
			trx_status.bits.TX_BUSY = 0;
    13de:	4acc      	ldr	r2, [pc, #816]	; (1710 <MiMAC_ReceivedPacket+0x354>)
    13e0:	7813      	ldrb	r3, [r2, #0]
    13e2:	2101      	movs	r1, #1
    13e4:	438b      	bics	r3, r1
    13e6:	7013      	strb	r3, [r2, #0]
    13e8:	e004      	b.n	13f4 <MiMAC_ReceivedPacket+0x38>
		} else
		{
			failureCounter++;
    13ea:	4aca      	ldr	r2, [pc, #808]	; (1714 <MiMAC_ReceivedPacket+0x358>)
    13ec:	8813      	ldrh	r3, [r2, #0]
    13ee:	3301      	adds	r3, #1
    13f0:	b29b      	uxth	r3, r3
    13f2:	8013      	strh	r3, [r2, #0]
		}
	}

	BankIndex = 0xFF;
    13f4:	22ff      	movs	r2, #255	; 0xff
    13f6:	4bc8      	ldr	r3, [pc, #800]	; (1718 <MiMAC_ReceivedPacket+0x35c>)
    13f8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < BANK_SIZE; i++)
	{
		if (RxBuffer[i].PayloadLen > 0)
    13fa:	4bc8      	ldr	r3, [pc, #800]	; (171c <MiMAC_ReceivedPacket+0x360>)
    13fc:	781b      	ldrb	r3, [r3, #0]
    13fe:	2b00      	cmp	r3, #0
    1400:	d000      	beq.n	1404 <MiMAC_ReceivedPacket+0x48>
    1402:	e219      	b.n	1838 <MiMAC_ReceivedPacket+0x47c>
    1404:	334e      	adds	r3, #78	; 0x4e
    1406:	4ac5      	ldr	r2, [pc, #788]	; (171c <MiMAC_ReceivedPacket+0x360>)
    1408:	5cd3      	ldrb	r3, [r2, r3]
		MACRxPacket.RSSIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 1];
		#endif

		return true;
	}
	return false;
    140a:	2000      	movs	r0, #0
	}

	BankIndex = 0xFF;
	for (i = 0; i < BANK_SIZE; i++)
	{
		if (RxBuffer[i].PayloadLen > 0)
    140c:	2b00      	cmp	r3, #0
    140e:	d100      	bne.n	1412 <MiMAC_ReceivedPacket+0x56>
    1410:	e217      	b.n	1842 <MiMAC_ReceivedPacket+0x486>
		{
			BankIndex = i;
    1412:	2201      	movs	r2, #1
    1414:	4bc0      	ldr	r3, [pc, #768]	; (1718 <MiMAC_ReceivedPacket+0x35c>)
    1416:	701a      	strb	r2, [r3, #0]
    1418:	2501      	movs	r5, #1
	{
		uint8_t addrMode;
		#ifndef TARGET_SMALL
		bool bIntraPAN = true;

		if ((RxBuffer[BankIndex].Payload[0] & 0x40) == 0)
    141a:	0028      	movs	r0, r5
    141c:	234e      	movs	r3, #78	; 0x4e
    141e:	436b      	muls	r3, r5
    1420:	4abe      	ldr	r2, [pc, #760]	; (171c <MiMAC_ReceivedPacket+0x360>)
    1422:	18d3      	adds	r3, r2, r3
    1424:	785a      	ldrb	r2, [r3, #1]
    1426:	2440      	movs	r4, #64	; 0x40
    1428:	4014      	ands	r4, r2
		{
			bIntraPAN = false;
		}
		#endif
		MACRxPacket.flags.Val = 0;
    142a:	4abd      	ldr	r2, [pc, #756]	; (1720 <MiMAC_ReceivedPacket+0x364>)
    142c:	2100      	movs	r1, #0
    142e:	7011      	strb	r1, [r2, #0]
		MACRxPacket.altSourceAddress = false;
    1430:	73d1      	strb	r1, [r2, #15]

		//Determine the start of the MAC payload
		addrMode = RxBuffer[BankIndex].Payload[1] & 0xCC;
		switch (addrMode)
    1432:	789b      	ldrb	r3, [r3, #2]
    1434:	2233      	movs	r2, #51	; 0x33
    1436:	4393      	bics	r3, r2
    1438:	b2da      	uxtb	r2, r3
    143a:	2a88      	cmp	r2, #136	; 0x88
    143c:	d100      	bne.n	1440 <MiMAC_ReceivedPacket+0x84>
    143e:	e097      	b.n	1570 <MiMAC_ReceivedPacket+0x1b4>
    1440:	d805      	bhi.n	144e <MiMAC_ReceivedPacket+0x92>
    1442:	2b08      	cmp	r3, #8
    1444:	d100      	bne.n	1448 <MiMAC_ReceivedPacket+0x8c>
    1446:	e106      	b.n	1656 <MiMAC_ReceivedPacket+0x29a>
    1448:	2a80      	cmp	r2, #128	; 0x80
    144a:	d075      	beq.n	1538 <MiMAC_ReceivedPacket+0x17c>
    144c:	e120      	b.n	1690 <MiMAC_ReceivedPacket+0x2d4>
    144e:	b2da      	uxtb	r2, r3
    1450:	2ac8      	cmp	r2, #200	; 0xc8
    1452:	d005      	beq.n	1460 <MiMAC_ReceivedPacket+0xa4>
    1454:	2acc      	cmp	r2, #204	; 0xcc
    1456:	d042      	beq.n	14de <MiMAC_ReceivedPacket+0x122>
    1458:	2a8c      	cmp	r2, #140	; 0x8c
    145a:	d000      	beq.n	145e <MiMAC_ReceivedPacket+0xa2>
    145c:	e118      	b.n	1690 <MiMAC_ReceivedPacket+0x2d4>
    145e:	e0ca      	b.n	15f6 <MiMAC_ReceivedPacket+0x23a>
		{
			case 0xC8: //short dest, long source
			// for P2P only broadcast allows short destination address
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    1460:	234e      	movs	r3, #78	; 0x4e
    1462:	436b      	muls	r3, r5
    1464:	4aad      	ldr	r2, [pc, #692]	; (171c <MiMAC_ReceivedPacket+0x360>)
    1466:	18d3      	adds	r3, r2, r3
    1468:	799b      	ldrb	r3, [r3, #6]
    146a:	2bff      	cmp	r3, #255	; 0xff
    146c:	d10a      	bne.n	1484 <MiMAC_ReceivedPacket+0xc8>
    146e:	3bb1      	subs	r3, #177	; 0xb1
    1470:	436b      	muls	r3, r5
    1472:	18d3      	adds	r3, r2, r3
    1474:	79db      	ldrb	r3, [r3, #7]
    1476:	2bff      	cmp	r3, #255	; 0xff
    1478:	d104      	bne.n	1484 <MiMAC_ReceivedPacket+0xc8>
			{
				MACRxPacket.flags.bits.broadcast = 1;
    147a:	4aa9      	ldr	r2, [pc, #676]	; (1720 <MiMAC_ReceivedPacket+0x364>)
    147c:	7811      	ldrb	r1, [r2, #0]
    147e:	2304      	movs	r3, #4
    1480:	430b      	orrs	r3, r1
    1482:	7013      	strb	r3, [r2, #0]
			}
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    1484:	4aa6      	ldr	r2, [pc, #664]	; (1720 <MiMAC_ReceivedPacket+0x364>)
    1486:	7813      	ldrb	r3, [r2, #0]
    1488:	2180      	movs	r1, #128	; 0x80
    148a:	4249      	negs	r1, r1
    148c:	430b      	orrs	r3, r1
    148e:	7013      	strb	r3, [r2, #0]

			#ifndef TARGET_SMALL
			if (bIntraPAN) // check if it is intraPAN
    1490:	2c00      	cmp	r4, #0
    1492:	d011      	beq.n	14b8 <MiMAC_ReceivedPacket+0xfc>
			#endif
			{
				#ifndef TARGET_SMALL
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    1494:	49a1      	ldr	r1, [pc, #644]	; (171c <MiMAC_ReceivedPacket+0x360>)
    1496:	234e      	movs	r3, #78	; 0x4e
    1498:	4358      	muls	r0, r3
    149a:	180b      	adds	r3, r1, r0
    149c:	791c      	ldrb	r4, [r3, #4]
    149e:	7414      	strb	r4, [r2, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    14a0:	795b      	ldrb	r3, [r3, #5]
    14a2:	7453      	strb	r3, [r2, #17]
				#endif
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    14a4:	180b      	adds	r3, r1, r0
    14a6:	3308      	adds	r3, #8
    14a8:	6053      	str	r3, [r2, #4]

				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    14aa:	5c43      	ldrb	r3, [r0, r1]
    14ac:	3b13      	subs	r3, #19
    14ae:	7313      	strb	r3, [r2, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    14b0:	1808      	adds	r0, r1, r0
    14b2:	3010      	adds	r0, #16
    14b4:	6090      	str	r0, [r2, #8]
    14b6:	e1b4      	b.n	1822 <MiMAC_ReceivedPacket+0x466>
			}
			#ifndef TARGET_SMALL
			else
			{
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    14b8:	4a99      	ldr	r2, [pc, #612]	; (1720 <MiMAC_ReceivedPacket+0x364>)
    14ba:	4998      	ldr	r1, [pc, #608]	; (171c <MiMAC_ReceivedPacket+0x360>)
    14bc:	234e      	movs	r3, #78	; 0x4e
    14be:	4358      	muls	r0, r3
    14c0:	180b      	adds	r3, r1, r0
    14c2:	7a1c      	ldrb	r4, [r3, #8]
    14c4:	7414      	strb	r4, [r2, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    14c6:	7a5b      	ldrb	r3, [r3, #9]
    14c8:	7453      	strb	r3, [r2, #17]
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    14ca:	180b      	adds	r3, r1, r0
    14cc:	330a      	adds	r3, #10
    14ce:	6053      	str	r3, [r2, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    14d0:	5c43      	ldrb	r3, [r0, r1]
    14d2:	3b15      	subs	r3, #21
    14d4:	7313      	strb	r3, [r2, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    14d6:	1808      	adds	r0, r1, r0
    14d8:	3012      	adds	r0, #18
    14da:	6090      	str	r0, [r2, #8]
    14dc:	e1a1      	b.n	1822 <MiMAC_ReceivedPacket+0x466>
			#endif

			break;

			case 0xCC: // long dest, long source
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    14de:	4a90      	ldr	r2, [pc, #576]	; (1720 <MiMAC_ReceivedPacket+0x364>)
    14e0:	7813      	ldrb	r3, [r2, #0]
    14e2:	2180      	movs	r1, #128	; 0x80
    14e4:	4249      	negs	r1, r1
    14e6:	430b      	orrs	r3, r1
    14e8:	7013      	strb	r3, [r2, #0]
			#ifndef TARGET_SMALL
			if (bIntraPAN) // check if it is intraPAN
    14ea:	2c00      	cmp	r4, #0
    14ec:	d011      	beq.n	1512 <MiMAC_ReceivedPacket+0x156>
			#endif
			{
				//rxFrame.flags.bits.intraPAN = 1;
				#ifndef TARGET_SMALL
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    14ee:	498b      	ldr	r1, [pc, #556]	; (171c <MiMAC_ReceivedPacket+0x360>)
    14f0:	234e      	movs	r3, #78	; 0x4e
    14f2:	4358      	muls	r0, r3
    14f4:	180b      	adds	r3, r1, r0
    14f6:	791c      	ldrb	r4, [r3, #4]
    14f8:	7414      	strb	r4, [r2, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    14fa:	795b      	ldrb	r3, [r3, #5]
    14fc:	7453      	strb	r3, [r2, #17]
				#endif
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
    14fe:	180b      	adds	r3, r1, r0
    1500:	330e      	adds	r3, #14
    1502:	6053      	str	r3, [r2, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 25;
    1504:	5c43      	ldrb	r3, [r0, r1]
    1506:	3b19      	subs	r3, #25
    1508:	7313      	strb	r3, [r2, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[21]);
    150a:	1808      	adds	r0, r1, r0
    150c:	3016      	adds	r0, #22
    150e:	6090      	str	r0, [r2, #8]
    1510:	e187      	b.n	1822 <MiMAC_ReceivedPacket+0x466>
			}
			#ifndef TARGET_SMALL
			else
			{
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[13];
    1512:	4a83      	ldr	r2, [pc, #524]	; (1720 <MiMAC_ReceivedPacket+0x364>)
    1514:	4981      	ldr	r1, [pc, #516]	; (171c <MiMAC_ReceivedPacket+0x360>)
    1516:	234e      	movs	r3, #78	; 0x4e
    1518:	4358      	muls	r0, r3
    151a:	180b      	adds	r3, r1, r0
    151c:	7b9c      	ldrb	r4, [r3, #14]
    151e:	7414      	strb	r4, [r2, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[14];
    1520:	7bdb      	ldrb	r3, [r3, #15]
    1522:	7453      	strb	r3, [r2, #17]
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[15]);
    1524:	180b      	adds	r3, r1, r0
    1526:	3310      	adds	r3, #16
    1528:	6053      	str	r3, [r2, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 27;
    152a:	5c43      	ldrb	r3, [r0, r1]
    152c:	3b1b      	subs	r3, #27
    152e:	7313      	strb	r3, [r2, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[23]);
    1530:	1808      	adds	r0, r1, r0
    1532:	3018      	adds	r0, #24
    1534:	6090      	str	r0, [r2, #8]
    1536:	e174      	b.n	1822 <MiMAC_ReceivedPacket+0x466>
			#endif
			break;

			case 0x80: // short source only. used in beacon
			{
				MACRxPacket.flags.bits.broadcast = 1;
    1538:	4a79      	ldr	r2, [pc, #484]	; (1720 <MiMAC_ReceivedPacket+0x364>)
    153a:	7811      	ldrb	r1, [r2, #0]
    153c:	2304      	movs	r3, #4
    153e:	430b      	orrs	r3, r1
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    1540:	2180      	movs	r1, #128	; 0x80
    1542:	4249      	negs	r1, r1
    1544:	430b      	orrs	r3, r1
    1546:	7013      	strb	r3, [r2, #0]
				MACRxPacket.altSourceAddress = true;
    1548:	2301      	movs	r3, #1
    154a:	73d3      	strb	r3, [r2, #15]
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    154c:	4973      	ldr	r1, [pc, #460]	; (171c <MiMAC_ReceivedPacket+0x360>)
    154e:	334d      	adds	r3, #77	; 0x4d
    1550:	4358      	muls	r0, r3
    1552:	180b      	adds	r3, r1, r0
    1554:	791c      	ldrb	r4, [r3, #4]
    1556:	7414      	strb	r4, [r2, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    1558:	795b      	ldrb	r3, [r3, #5]
    155a:	7453      	strb	r3, [r2, #17]
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[5]);
    155c:	180b      	adds	r3, r1, r0
    155e:	3306      	adds	r3, #6
    1560:	6053      	str	r3, [r2, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 11;
    1562:	5c43      	ldrb	r3, [r0, r1]
    1564:	3b0b      	subs	r3, #11
    1566:	7313      	strb	r3, [r2, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    1568:	1808      	adds	r0, r1, r0
    156a:	3008      	adds	r0, #8
    156c:	6090      	str	r0, [r2, #8]
			}
			break;
    156e:	e14e      	b.n	180e <MiMAC_ReceivedPacket+0x452>

			case 0x88: // short dest, short source
			{
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    1570:	234e      	movs	r3, #78	; 0x4e
    1572:	435d      	muls	r5, r3
    1574:	4b69      	ldr	r3, [pc, #420]	; (171c <MiMAC_ReceivedPacket+0x360>)
    1576:	195d      	adds	r5, r3, r5
    1578:	79ab      	ldrb	r3, [r5, #6]
    157a:	2bff      	cmp	r3, #255	; 0xff
    157c:	d10b      	bne.n	1596 <MiMAC_ReceivedPacket+0x1da>
    157e:	3bb1      	subs	r3, #177	; 0xb1
    1580:	4343      	muls	r3, r0
    1582:	4a66      	ldr	r2, [pc, #408]	; (171c <MiMAC_ReceivedPacket+0x360>)
    1584:	18d3      	adds	r3, r2, r3
    1586:	79db      	ldrb	r3, [r3, #7]
    1588:	2bff      	cmp	r3, #255	; 0xff
    158a:	d104      	bne.n	1596 <MiMAC_ReceivedPacket+0x1da>
				{
					MACRxPacket.flags.bits.broadcast = 1;
    158c:	4a64      	ldr	r2, [pc, #400]	; (1720 <MiMAC_ReceivedPacket+0x364>)
    158e:	7811      	ldrb	r1, [r2, #0]
    1590:	2304      	movs	r3, #4
    1592:	430b      	orrs	r3, r1
    1594:	7013      	strb	r3, [r2, #0]
				}
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    1596:	4b62      	ldr	r3, [pc, #392]	; (1720 <MiMAC_ReceivedPacket+0x364>)
    1598:	781a      	ldrb	r2, [r3, #0]
    159a:	2180      	movs	r1, #128	; 0x80
    159c:	4249      	negs	r1, r1
    159e:	430a      	orrs	r2, r1
    15a0:	701a      	strb	r2, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    15a2:	2201      	movs	r2, #1
    15a4:	73da      	strb	r2, [r3, #15]
				#ifndef TARGET_SMALL
				if (bIntraPAN == false)
    15a6:	2c00      	cmp	r4, #0
    15a8:	d112      	bne.n	15d0 <MiMAC_ReceivedPacket+0x214>
				{
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    15aa:	001a      	movs	r2, r3
    15ac:	495b      	ldr	r1, [pc, #364]	; (171c <MiMAC_ReceivedPacket+0x360>)
    15ae:	234e      	movs	r3, #78	; 0x4e
    15b0:	4358      	muls	r0, r3
    15b2:	180b      	adds	r3, r1, r0
    15b4:	7a1c      	ldrb	r4, [r3, #8]
    15b6:	7414      	strb	r4, [r2, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    15b8:	7a5b      	ldrb	r3, [r3, #9]
    15ba:	7453      	strb	r3, [r2, #17]
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    15bc:	180b      	adds	r3, r1, r0
    15be:	330a      	adds	r3, #10
    15c0:	6053      	str	r3, [r2, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 15;
    15c2:	5c43      	ldrb	r3, [r0, r1]
    15c4:	3b0f      	subs	r3, #15
    15c6:	7313      	strb	r3, [r2, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[11]);
    15c8:	1808      	adds	r0, r1, r0
    15ca:	300c      	adds	r0, #12
    15cc:	6090      	str	r0, [r2, #8]
    15ce:	e11e      	b.n	180e <MiMAC_ReceivedPacket+0x452>
				} else
				#endif
				{
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    15d0:	4a53      	ldr	r2, [pc, #332]	; (1720 <MiMAC_ReceivedPacket+0x364>)
    15d2:	4952      	ldr	r1, [pc, #328]	; (171c <MiMAC_ReceivedPacket+0x360>)
    15d4:	234e      	movs	r3, #78	; 0x4e
    15d6:	4358      	muls	r0, r3
    15d8:	180b      	adds	r3, r1, r0
    15da:	791c      	ldrb	r4, [r3, #4]
    15dc:	7414      	strb	r4, [r2, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    15de:	795b      	ldrb	r3, [r3, #5]
    15e0:	7453      	strb	r3, [r2, #17]
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    15e2:	180b      	adds	r3, r1, r0
    15e4:	3308      	adds	r3, #8
    15e6:	6053      	str	r3, [r2, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 13;
    15e8:	5c43      	ldrb	r3, [r0, r1]
    15ea:	3b0d      	subs	r3, #13
    15ec:	7313      	strb	r3, [r2, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[9]);
    15ee:	1808      	adds	r0, r1, r0
    15f0:	300a      	adds	r0, #10
    15f2:	6090      	str	r0, [r2, #8]
    15f4:	e10b      	b.n	180e <MiMAC_ReceivedPacket+0x452>
			}
			break;

			case 0x8C: // long dest, short source
			{
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    15f6:	4b4a      	ldr	r3, [pc, #296]	; (1720 <MiMAC_ReceivedPacket+0x364>)
    15f8:	781a      	ldrb	r2, [r3, #0]
    15fa:	2180      	movs	r1, #128	; 0x80
    15fc:	4249      	negs	r1, r1
    15fe:	430a      	orrs	r2, r1
    1600:	701a      	strb	r2, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    1602:	2201      	movs	r2, #1
    1604:	73da      	strb	r2, [r3, #15]
				#ifndef TARGET_SMALL
				if (bIntraPAN) // check if it is intraPAN
    1606:	2c00      	cmp	r4, #0
    1608:	d012      	beq.n	1630 <MiMAC_ReceivedPacket+0x274>
				#endif
				{
					#ifndef TARGET_SMALL
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    160a:	001a      	movs	r2, r3
    160c:	4943      	ldr	r1, [pc, #268]	; (171c <MiMAC_ReceivedPacket+0x360>)
    160e:	234e      	movs	r3, #78	; 0x4e
    1610:	4358      	muls	r0, r3
    1612:	180b      	adds	r3, r1, r0
    1614:	791c      	ldrb	r4, [r3, #4]
    1616:	7414      	strb	r4, [r2, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    1618:	795b      	ldrb	r3, [r3, #5]
    161a:	7453      	strb	r3, [r2, #17]
					#endif
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[12]);
    161c:	180b      	adds	r3, r1, r0
    161e:	330d      	adds	r3, #13
    1620:	6053      	str	r3, [r2, #4]

					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    1622:	5c43      	ldrb	r3, [r0, r1]
    1624:	3b13      	subs	r3, #19
    1626:	7313      	strb	r3, [r2, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    1628:	1808      	adds	r0, r1, r0
    162a:	3010      	adds	r0, #16
    162c:	6090      	str	r0, [r2, #8]
    162e:	e0ee      	b.n	180e <MiMAC_ReceivedPacket+0x452>
				}
				#ifndef TARGET_SMALL
				else
				{
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[12];
    1630:	4a3b      	ldr	r2, [pc, #236]	; (1720 <MiMAC_ReceivedPacket+0x364>)
    1632:	493a      	ldr	r1, [pc, #232]	; (171c <MiMAC_ReceivedPacket+0x360>)
    1634:	234e      	movs	r3, #78	; 0x4e
    1636:	4358      	muls	r0, r3
    1638:	180b      	adds	r3, r1, r0
    163a:	7b5c      	ldrb	r4, [r3, #13]
    163c:	7414      	strb	r4, [r2, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[13];
    163e:	7b9b      	ldrb	r3, [r3, #14]
    1640:	7453      	strb	r3, [r2, #17]
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[14]);
    1642:	180b      	adds	r3, r1, r0
    1644:	330f      	adds	r3, #15
    1646:	6053      	str	r3, [r2, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    1648:	5c43      	ldrb	r3, [r0, r1]
    164a:	3b15      	subs	r3, #21
    164c:	7313      	strb	r3, [r2, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    164e:	1808      	adds	r0, r1, r0
    1650:	3012      	adds	r0, #18
    1652:	6090      	str	r0, [r2, #8]
    1654:	e0db      	b.n	180e <MiMAC_ReceivedPacket+0x452>
			break;


			case 0x08: //dest-short, source-none
			{
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    1656:	234e      	movs	r3, #78	; 0x4e
    1658:	436b      	muls	r3, r5
    165a:	4a30      	ldr	r2, [pc, #192]	; (171c <MiMAC_ReceivedPacket+0x360>)
    165c:	18d3      	adds	r3, r2, r3
    165e:	799b      	ldrb	r3, [r3, #6]
    1660:	2bff      	cmp	r3, #255	; 0xff
    1662:	d10a      	bne.n	167a <MiMAC_ReceivedPacket+0x2be>
    1664:	3bb1      	subs	r3, #177	; 0xb1
    1666:	436b      	muls	r3, r5
    1668:	18d3      	adds	r3, r2, r3
    166a:	79db      	ldrb	r3, [r3, #7]
    166c:	2bff      	cmp	r3, #255	; 0xff
    166e:	d104      	bne.n	167a <MiMAC_ReceivedPacket+0x2be>
				{
					MACRxPacket.flags.bits.broadcast = 1;
    1670:	4a2b      	ldr	r2, [pc, #172]	; (1720 <MiMAC_ReceivedPacket+0x364>)
    1672:	7811      	ldrb	r1, [r2, #0]
    1674:	2304      	movs	r3, #4
    1676:	430b      	orrs	r3, r1
    1678:	7013      	strb	r3, [r2, #0]
				}
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 10;
    167a:	4a29      	ldr	r2, [pc, #164]	; (1720 <MiMAC_ReceivedPacket+0x364>)
    167c:	4927      	ldr	r1, [pc, #156]	; (171c <MiMAC_ReceivedPacket+0x360>)
    167e:	234e      	movs	r3, #78	; 0x4e
    1680:	4358      	muls	r0, r3
    1682:	5c43      	ldrb	r3, [r0, r1]
    1684:	3b0a      	subs	r3, #10
    1686:	7313      	strb	r3, [r2, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    1688:	1808      	adds	r0, r1, r0
    168a:	3008      	adds	r0, #8
    168c:	6090      	str	r0, [r2, #8]
			}
			break;
    168e:	e0be      	b.n	180e <MiMAC_ReceivedPacket+0x452>

			// all other addressing mode will not be supported in P2P
			default:
			// not valid addressing mode or no addressing info
			MiMAC_DiscardPacket();
    1690:	4b24      	ldr	r3, [pc, #144]	; (1724 <MiMAC_ReceivedPacket+0x368>)
    1692:	4798      	blx	r3
			return false;
    1694:	2000      	movs	r0, #0
    1696:	e0d4      	b.n	1842 <MiMAC_ReceivedPacket+0x486>
		{
			API_UINT32_UNION FrameCounter;

			if (addrMode < 0xC0)
			{
				MiMAC_DiscardPacket();
    1698:	4b22      	ldr	r3, [pc, #136]	; (1724 <MiMAC_ReceivedPacket+0x368>)
    169a:	4798      	blx	r3
				return false;
    169c:	e07e      	b.n	179c <MiMAC_ReceivedPacket+0x3e0>
			}

			FrameCounter.v[0] = MACRxPacket.Payload[0];
    169e:	4b20      	ldr	r3, [pc, #128]	; (1720 <MiMAC_ReceivedPacket+0x364>)
    16a0:	689b      	ldr	r3, [r3, #8]
			FrameCounter.v[1] = MACRxPacket.Payload[1];
    16a2:	785a      	ldrb	r2, [r3, #1]
    16a4:	0212      	lsls	r2, r2, #8
    16a6:	7819      	ldrb	r1, [r3, #0]
    16a8:	4311      	orrs	r1, r2
    16aa:	4688      	mov	r8, r1
			FrameCounter.v[2] = MACRxPacket.Payload[2];
    16ac:	789a      	ldrb	r2, [r3, #2]
    16ae:	0412      	lsls	r2, r2, #16
    16b0:	491d      	ldr	r1, [pc, #116]	; (1728 <MiMAC_ReceivedPacket+0x36c>)
    16b2:	4640      	mov	r0, r8
    16b4:	4001      	ands	r1, r0
    16b6:	4311      	orrs	r1, r2
			FrameCounter.v[3] = MACRxPacket.Payload[3];
    16b8:	78db      	ldrb	r3, [r3, #3]
    16ba:	061b      	lsls	r3, r3, #24
    16bc:	020a      	lsls	r2, r1, #8
    16be:	0a12      	lsrs	r2, r2, #8
    16c0:	431a      	orrs	r2, r3
    16c2:	4690      	mov	r8, r2
    16c4:	4d19      	ldr	r5, [pc, #100]	; (172c <MiMAC_ReceivedPacket+0x370>)
    16c6:	2400      	movs	r4, #0

			for (i = 0; i < CONNECTION_SIZE; i++)
			{
				if ((ConnectionTable[i].status.bits.isValid) &&
    16c8:	4f19      	ldr	r7, [pc, #100]	; (1730 <MiMAC_ReceivedPacket+0x374>)
				isSameAddress(ConnectionTable[i].Address, MACRxPacket.SourceAddress))
    16ca:	4b15      	ldr	r3, [pc, #84]	; (1720 <MiMAC_ReceivedPacket+0x364>)
    16cc:	469a      	mov	sl, r3
    16ce:	b2e6      	uxtb	r6, r4
			FrameCounter.v[2] = MACRxPacket.Payload[2];
			FrameCounter.v[3] = MACRxPacket.Payload[3];

			for (i = 0; i < CONNECTION_SIZE; i++)
			{
				if ((ConnectionTable[i].status.bits.isValid) &&
    16d0:	00e3      	lsls	r3, r4, #3
    16d2:	1b1b      	subs	r3, r3, r4
    16d4:	005b      	lsls	r3, r3, #1
    16d6:	18fb      	adds	r3, r7, r3
    16d8:	7b1b      	ldrb	r3, [r3, #12]
    16da:	09db      	lsrs	r3, r3, #7
    16dc:	d006      	beq.n	16ec <MiMAC_ReceivedPacket+0x330>
				isSameAddress(ConnectionTable[i].Address, MACRxPacket.SourceAddress))
    16de:	4653      	mov	r3, sl
    16e0:	6859      	ldr	r1, [r3, #4]
    16e2:	0028      	movs	r0, r5
    16e4:	4b13      	ldr	r3, [pc, #76]	; (1734 <MiMAC_ReceivedPacket+0x378>)
    16e6:	4798      	blx	r3
			FrameCounter.v[2] = MACRxPacket.Payload[2];
			FrameCounter.v[3] = MACRxPacket.Payload[3];

			for (i = 0; i < CONNECTION_SIZE; i++)
			{
				if ((ConnectionTable[i].status.bits.isValid) &&
    16e8:	2800      	cmp	r0, #0
    16ea:	d104      	bne.n	16f6 <MiMAC_ReceivedPacket+0x33a>
    16ec:	3401      	adds	r4, #1
    16ee:	350e      	adds	r5, #14
			FrameCounter.v[0] = MACRxPacket.Payload[0];
			FrameCounter.v[1] = MACRxPacket.Payload[1];
			FrameCounter.v[2] = MACRxPacket.Payload[2];
			FrameCounter.v[3] = MACRxPacket.Payload[3];

			for (i = 0; i < CONNECTION_SIZE; i++)
    16f0:	2c14      	cmp	r4, #20
    16f2:	d1ec      	bne.n	16ce <MiMAC_ReceivedPacket+0x312>
    16f4:	e026      	b.n	1744 <MiMAC_ReceivedPacket+0x388>
				{
					break;
				}
			}

			if (i < CONNECTION_SIZE)
    16f6:	2e13      	cmp	r6, #19
    16f8:	d824      	bhi.n	1744 <MiMAC_ReceivedPacket+0x388>
			{
				if (IncomingFrameCounter[i].Val > FrameCounter.Val)
    16fa:	23ff      	movs	r3, #255	; 0xff
    16fc:	401c      	ands	r4, r3
    16fe:	00a2      	lsls	r2, r4, #2
    1700:	4b0d      	ldr	r3, [pc, #52]	; (1738 <MiMAC_ReceivedPacket+0x37c>)
    1702:	58d3      	ldr	r3, [r2, r3]
    1704:	4543      	cmp	r3, r8
    1706:	d919      	bls.n	173c <MiMAC_ReceivedPacket+0x380>
				{
					MiMAC_DiscardPacket();
    1708:	4b06      	ldr	r3, [pc, #24]	; (1724 <MiMAC_ReceivedPacket+0x368>)
    170a:	4798      	blx	r3
					return false;
    170c:	e046      	b.n	179c <MiMAC_ReceivedPacket+0x3e0>
    170e:	46c0      	nop			; (mov r8, r8)
    1710:	200005b4 	.word	0x200005b4
    1714:	2000033e 	.word	0x2000033e
    1718:	2000001e 	.word	0x2000001e
    171c:	200004fc 	.word	0x200004fc
    1720:	200006e0 	.word	0x200006e0
    1724:	000013a1 	.word	0x000013a1
    1728:	ff00ffff 	.word	0xff00ffff
    172c:	200005c4 	.word	0x200005c4
    1730:	200005c0 	.word	0x200005c0
    1734:	00001df1 	.word	0x00001df1
    1738:	20000700 	.word	0x20000700
				} else
				{
					IncomingFrameCounter[i].Val = FrameCounter.Val;
    173c:	00a4      	lsls	r4, r4, #2
    173e:	4b43      	ldr	r3, [pc, #268]	; (184c <MiMAC_ReceivedPacket+0x490>)
    1740:	4642      	mov	r2, r8
    1742:	50e2      	str	r2, [r4, r3]
				}
			}


			MACRxPacket.PayloadLen -= 5;  // used to 5 for frame counter now -4 also added for MIC integrity
    1744:	4942      	ldr	r1, [pc, #264]	; (1850 <MiMAC_ReceivedPacket+0x494>)
    1746:	7b0b      	ldrb	r3, [r1, #12]
    1748:	3b05      	subs	r3, #5
    174a:	b2db      	uxtb	r3, r3
    174c:	730b      	strb	r3, [r1, #12]

			received_mic_values[0] = MACRxPacket.Payload[MACRxPacket.PayloadLen+1];
    174e:	6888      	ldr	r0, [r1, #8]
    1750:	18c3      	adds	r3, r0, r3
    1752:	785c      	ldrb	r4, [r3, #1]
    1754:	4a3f      	ldr	r2, [pc, #252]	; (1854 <MiMAC_ReceivedPacket+0x498>)
    1756:	7014      	strb	r4, [r2, #0]
			received_mic_values[1] = MACRxPacket.Payload[MACRxPacket.PayloadLen+2];
    1758:	789c      	ldrb	r4, [r3, #2]
    175a:	7054      	strb	r4, [r2, #1]
			received_mic_values[2] = MACRxPacket.Payload[MACRxPacket.PayloadLen+3];
    175c:	78dc      	ldrb	r4, [r3, #3]
    175e:	7094      	strb	r4, [r2, #2]
			received_mic_values[3] = MACRxPacket.Payload[MACRxPacket.PayloadLen+4];
    1760:	791b      	ldrb	r3, [r3, #4]
    1762:	70d3      	strb	r3, [r2, #3]
 					//MACRxPacket.PayloadLen -= 4; 
			if (false == DataDecrypt(&(MACRxPacket.Payload[5]), &(MACRxPacket.PayloadLen), MACRxPacket.SourceAddress, FrameCounter, RxBuffer[BankIndex].Payload[0]))
    1764:	684a      	ldr	r2, [r1, #4]
    1766:	310c      	adds	r1, #12
    1768:	3005      	adds	r0, #5
    176a:	4b3b      	ldr	r3, [pc, #236]	; (1858 <MiMAC_ReceivedPacket+0x49c>)
    176c:	781c      	ldrb	r4, [r3, #0]
    176e:	234e      	movs	r3, #78	; 0x4e
    1770:	4363      	muls	r3, r4
    1772:	4c3a      	ldr	r4, [pc, #232]	; (185c <MiMAC_ReceivedPacket+0x4a0>)
    1774:	18e3      	adds	r3, r4, r3
    1776:	785b      	ldrb	r3, [r3, #1]
    1778:	9300      	str	r3, [sp, #0]
    177a:	4643      	mov	r3, r8
    177c:	4c38      	ldr	r4, [pc, #224]	; (1860 <MiMAC_ReceivedPacket+0x4a4>)
    177e:	47a0      	blx	r4
    1780:	2800      	cmp	r0, #0
    1782:	d102      	bne.n	178a <MiMAC_ReceivedPacket+0x3ce>
			{
				MiMAC_DiscardPacket();
    1784:	4b37      	ldr	r3, [pc, #220]	; (1864 <MiMAC_ReceivedPacket+0x4a8>)
    1786:	4798      	blx	r3
				return false;
    1788:	e008      	b.n	179c <MiMAC_ReceivedPacket+0x3e0>
			}

			// remove the security header from the payload
			MACRxPacket.Payload = &(MACRxPacket.Payload[5]);
    178a:	4b31      	ldr	r3, [pc, #196]	; (1850 <MiMAC_ReceivedPacket+0x494>)
    178c:	689a      	ldr	r2, [r3, #8]
    178e:	3205      	adds	r2, #5
    1790:	609a      	str	r2, [r3, #8]
			MACRxPacket.flags.bits.secEn = 1;
    1792:	7819      	ldrb	r1, [r3, #0]
    1794:	2208      	movs	r2, #8
    1796:	430a      	orrs	r2, r1
    1798:	701a      	strb	r2, [r3, #0]
    179a:	e001      	b.n	17a0 <MiMAC_ReceivedPacket+0x3e4>
			API_UINT32_UNION FrameCounter;

			if (addrMode < 0xC0)
			{
				MiMAC_DiscardPacket();
				return false;
    179c:	2000      	movs	r0, #0
    179e:	e050      	b.n	1842 <MiMAC_ReceivedPacket+0x486>
		#endif

		// check the frame type. Only the data and command frame type
		// are supported. Acknowledgement frame type is handled in
		// AT96RF233 transceiver hardware.
		switch (RxBuffer[BankIndex].Payload[0] & 0x07) // check frame type
    17a0:	4b2d      	ldr	r3, [pc, #180]	; (1858 <MiMAC_ReceivedPacket+0x49c>)
    17a2:	7819      	ldrb	r1, [r3, #0]
    17a4:	234e      	movs	r3, #78	; 0x4e
    17a6:	434b      	muls	r3, r1
    17a8:	4a2c      	ldr	r2, [pc, #176]	; (185c <MiMAC_ReceivedPacket+0x4a0>)
    17aa:	18d3      	adds	r3, r2, r3
    17ac:	785a      	ldrb	r2, [r3, #1]
    17ae:	2307      	movs	r3, #7
    17b0:	401a      	ands	r2, r3
    17b2:	2a01      	cmp	r2, #1
    17b4:	d004      	beq.n	17c0 <MiMAC_ReceivedPacket+0x404>
    17b6:	2a00      	cmp	r2, #0
    17b8:	d010      	beq.n	17dc <MiMAC_ReceivedPacket+0x420>
    17ba:	2a03      	cmp	r2, #3
    17bc:	d006      	beq.n	17cc <MiMAC_ReceivedPacket+0x410>
    17be:	e013      	b.n	17e8 <MiMAC_ReceivedPacket+0x42c>
		{
			case 0x01: // data frame
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_DATA;
    17c0:	4a23      	ldr	r2, [pc, #140]	; (1850 <MiMAC_ReceivedPacket+0x494>)
    17c2:	7813      	ldrb	r3, [r2, #0]
    17c4:	2003      	movs	r0, #3
    17c6:	4383      	bics	r3, r0
    17c8:	7013      	strb	r3, [r2, #0]
			break;
    17ca:	e011      	b.n	17f0 <MiMAC_ReceivedPacket+0x434>
			case 0x03: // command frame
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_COMMAND;
    17cc:	4820      	ldr	r0, [pc, #128]	; (1850 <MiMAC_ReceivedPacket+0x494>)
    17ce:	7803      	ldrb	r3, [r0, #0]
    17d0:	2203      	movs	r2, #3
    17d2:	4393      	bics	r3, r2
    17d4:	2201      	movs	r2, #1
    17d6:	4313      	orrs	r3, r2
    17d8:	7003      	strb	r3, [r0, #0]
			break;
    17da:	e009      	b.n	17f0 <MiMAC_ReceivedPacket+0x434>
			case 0x00:
			// use reserved packet type to represent beacon packet
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_RESERVE;
    17dc:	4a1c      	ldr	r2, [pc, #112]	; (1850 <MiMAC_ReceivedPacket+0x494>)
    17de:	7810      	ldrb	r0, [r2, #0]
    17e0:	2303      	movs	r3, #3
    17e2:	4303      	orrs	r3, r0
    17e4:	7013      	strb	r3, [r2, #0]
			break;
    17e6:	e003      	b.n	17f0 <MiMAC_ReceivedPacket+0x434>
			default: // not support frame type
			MiMAC_DiscardPacket();
    17e8:	4b1e      	ldr	r3, [pc, #120]	; (1864 <MiMAC_ReceivedPacket+0x4a8>)
    17ea:	4798      	blx	r3
			return false;
    17ec:	2000      	movs	r0, #0
    17ee:	e028      	b.n	1842 <MiMAC_ReceivedPacket+0x486>
		}
		#ifndef TARGET_SMALL
		MACRxPacket.LQIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 2];
    17f0:	4c1a      	ldr	r4, [pc, #104]	; (185c <MiMAC_ReceivedPacket+0x4a0>)
    17f2:	224e      	movs	r2, #78	; 0x4e
    17f4:	0013      	movs	r3, r2
    17f6:	434b      	muls	r3, r1
    17f8:	5d18      	ldrb	r0, [r3, r4]
    17fa:	4915      	ldr	r1, [pc, #84]	; (1850 <MiMAC_ReceivedPacket+0x494>)
    17fc:	18e3      	adds	r3, r4, r3
    17fe:	181a      	adds	r2, r3, r0
    1800:	3a01      	subs	r2, #1
    1802:	7812      	ldrb	r2, [r2, #0]
    1804:	738a      	strb	r2, [r1, #14]
		MACRxPacket.RSSIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 1];
    1806:	5c1b      	ldrb	r3, [r3, r0]
    1808:	734b      	strb	r3, [r1, #13]
		#endif

		return true;
    180a:	2001      	movs	r0, #1
    180c:	e019      	b.n	1842 <MiMAC_ReceivedPacket+0x486>
			MiMAC_DiscardPacket();
			return false;
		}

		#ifdef ENABLE_SECURITY
		if (RxBuffer[BankIndex].Payload[0] & 0x08)
    180e:	4b12      	ldr	r3, [pc, #72]	; (1858 <MiMAC_ReceivedPacket+0x49c>)
    1810:	781a      	ldrb	r2, [r3, #0]
    1812:	234e      	movs	r3, #78	; 0x4e
    1814:	4353      	muls	r3, r2
    1816:	4a11      	ldr	r2, [pc, #68]	; (185c <MiMAC_ReceivedPacket+0x4a0>)
    1818:	18d3      	adds	r3, r2, r3
    181a:	785b      	ldrb	r3, [r3, #1]
    181c:	071b      	lsls	r3, r3, #28
    181e:	d5bf      	bpl.n	17a0 <MiMAC_ReceivedPacket+0x3e4>
    1820:	e73a      	b.n	1698 <MiMAC_ReceivedPacket+0x2dc>
    1822:	4b0d      	ldr	r3, [pc, #52]	; (1858 <MiMAC_ReceivedPacket+0x49c>)
    1824:	781a      	ldrb	r2, [r3, #0]
    1826:	234e      	movs	r3, #78	; 0x4e
    1828:	4353      	muls	r3, r2
    182a:	4a0c      	ldr	r2, [pc, #48]	; (185c <MiMAC_ReceivedPacket+0x4a0>)
    182c:	18d3      	adds	r3, r2, r3
    182e:	785b      	ldrb	r3, [r3, #1]
    1830:	071b      	lsls	r3, r3, #28
    1832:	d500      	bpl.n	1836 <MiMAC_ReceivedPacket+0x47a>
    1834:	e733      	b.n	169e <MiMAC_ReceivedPacket+0x2e2>
    1836:	e7b3      	b.n	17a0 <MiMAC_ReceivedPacket+0x3e4>
	BankIndex = 0xFF;
	for (i = 0; i < BANK_SIZE; i++)
	{
		if (RxBuffer[i].PayloadLen > 0)
		{
			BankIndex = i;
    1838:	2200      	movs	r2, #0
    183a:	4b07      	ldr	r3, [pc, #28]	; (1858 <MiMAC_ReceivedPacket+0x49c>)
    183c:	701a      	strb	r2, [r3, #0]
			failureCounter++;
		}
	}

	BankIndex = 0xFF;
	for (i = 0; i < BANK_SIZE; i++)
    183e:	2500      	movs	r5, #0
    1840:	e5eb      	b.n	141a <MiMAC_ReceivedPacket+0x5e>
		#endif

		return true;
	}
	return false;
}
    1842:	b003      	add	sp, #12
    1844:	bc0c      	pop	{r2, r3}
    1846:	4690      	mov	r8, r2
    1848:	469a      	mov	sl, r3
    184a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    184c:	20000700 	.word	0x20000700
    1850:	200006e0 	.word	0x200006e0
    1854:	200005ac 	.word	0x200005ac
    1858:	2000001e 	.word	0x2000001e
    185c:	200004fc 	.word	0x200004fc
    1860:	00000e4d 	.word	0x00000e4d
    1864:	000013a1 	.word	0x000013a1

00001868 <PHY_PacketReceieved>:

/*************************************************************************//**
*****************************************************************************/
// Handle Packet Received // ISR calls this routine
void PHY_PacketReceieved(void)
{
    1868:	b570      	push	{r4, r5, r6, lr}
    186a:	b082      	sub	sp, #8
if (PHY_STATE_SLEEP == phyState) {
    186c:	4b39      	ldr	r3, [pc, #228]	; (1954 <PHY_PacketReceieved+0xec>)
    186e:	781b      	ldrb	r3, [r3, #0]
    1870:	2b02      	cmp	r3, #2
    1872:	d06d      	beq.n	1950 <PHY_PacketReceieved+0xe8>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1874:	200f      	movs	r0, #15
    1876:	4b38      	ldr	r3, [pc, #224]	; (1958 <PHY_PacketReceieved+0xf0>)
    1878:	4798      	blx	r3
{
if (PHY_STATE_SLEEP == phyState) {
return;
}

if (phyReadRegister(RG_IRQ_STATUS) & (1 << TRX_END)) {
    187a:	0703      	lsls	r3, r0, #28
    187c:	d568      	bpl.n	1950 <PHY_PacketReceieved+0xe8>
if (PHY_STATE_IDLE == phyState) {
    187e:	4b35      	ldr	r3, [pc, #212]	; (1954 <PHY_PacketReceieved+0xec>)
    1880:	781b      	ldrb	r3, [r3, #0]
    1882:	2b01      	cmp	r3, #1
    1884:	d141      	bne.n	190a <PHY_PacketReceieved+0xa2>
int8_t rssi;


for (i = 0; i < BANK_SIZE; i++)
{
if (RxBuffer[i].PayloadLen == 0)
    1886:	4b35      	ldr	r3, [pc, #212]	; (195c <PHY_PacketReceieved+0xf4>)
    1888:	781b      	ldrb	r3, [r3, #0]
    188a:	2b00      	cmp	r3, #0
    188c:	d006      	beq.n	189c <PHY_PacketReceieved+0x34>
    188e:	234e      	movs	r3, #78	; 0x4e
    1890:	4a32      	ldr	r2, [pc, #200]	; (195c <PHY_PacketReceieved+0xf4>)
    1892:	5cd3      	ldrb	r3, [r2, r3]
    1894:	2b00      	cmp	r3, #0
    1896:	d003      	beq.n	18a0 <PHY_PacketReceieved+0x38>
return;
}

if (phyReadRegister(RG_IRQ_STATUS) & (1 << TRX_END)) {
if (PHY_STATE_IDLE == phyState) {
uint8_t size,i,RxBank=0xFF;
    1898:	24ff      	movs	r4, #255	; 0xff
    189a:	e002      	b.n	18a2 <PHY_PacketReceieved+0x3a>
int8_t rssi;


for (i = 0; i < BANK_SIZE; i++)
{
if (RxBuffer[i].PayloadLen == 0)
    189c:	2400      	movs	r4, #0
    189e:	e000      	b.n	18a2 <PHY_PacketReceieved+0x3a>
    18a0:	2401      	movs	r4, #1
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    18a2:	2007      	movs	r0, #7
    18a4:	4b2c      	ldr	r3, [pc, #176]	; (1958 <PHY_PacketReceieved+0xf0>)
    18a6:	4798      	blx	r3
break;
}
}
rssi = (uint8_t)phyReadRegister(RG_PHY_ED_LEVEL);

trx_frame_read(&size, 1);
    18a8:	466b      	mov	r3, sp
    18aa:	1ddd      	adds	r5, r3, #7
    18ac:	2101      	movs	r1, #1
    18ae:	0028      	movs	r0, r5
    18b0:	4e2b      	ldr	r6, [pc, #172]	; (1960 <PHY_PacketReceieved+0xf8>)
    18b2:	47b0      	blx	r6

trx_frame_read(phyRxBuffer, size + 2);
    18b4:	7829      	ldrb	r1, [r5, #0]
    18b6:	3102      	adds	r1, #2
    18b8:	b2c9      	uxtb	r1, r1
    18ba:	482a      	ldr	r0, [pc, #168]	; (1964 <PHY_PacketReceieved+0xfc>)
    18bc:	47b0      	blx	r6
RxBuffer[RxBank].PayloadLen = size+2;
    18be:	0021      	movs	r1, r4
    18c0:	7828      	ldrb	r0, [r5, #0]
    18c2:	1c83      	adds	r3, r0, #2
    18c4:	b2db      	uxtb	r3, r3
    18c6:	224e      	movs	r2, #78	; 0x4e
    18c8:	4354      	muls	r4, r2
    18ca:	4a24      	ldr	r2, [pc, #144]	; (195c <PHY_PacketReceieved+0xf4>)
    18cc:	54a3      	strb	r3, [r4, r2]
if (RxBuffer[RxBank].PayloadLen < RX_PACKET_SIZE)
    18ce:	2b4c      	cmp	r3, #76	; 0x4c
    18d0:	d813      	bhi.n	18fa <PHY_PacketReceieved+0x92>
{
//indicate that data is now stored in the buffer
trx_status.bits.RX_BUFFERED = 1;
    18d2:	4a25      	ldr	r2, [pc, #148]	; (1968 <PHY_PacketReceieved+0x100>)
    18d4:	7814      	ldrb	r4, [r2, #0]
    18d6:	2320      	movs	r3, #32
    18d8:	4323      	orrs	r3, r4
    18da:	7013      	strb	r3, [r2, #0]

//copy all of the data from the FIFO into the TxBuffer, plus RSSI and LQI
for (i = 1; i <= size+2; i++)
    18dc:	3002      	adds	r0, #2
    18de:	2201      	movs	r2, #1
    18e0:	2301      	movs	r3, #1
{
RxBuffer[RxBank].Payload[i-1] = phyRxBuffer[i];
    18e2:	244e      	movs	r4, #78	; 0x4e
    18e4:	434c      	muls	r4, r1
    18e6:	491d      	ldr	r1, [pc, #116]	; (195c <PHY_PacketReceieved+0xf4>)
    18e8:	190c      	adds	r4, r1, r4
    18ea:	4d1e      	ldr	r5, [pc, #120]	; (1964 <PHY_PacketReceieved+0xfc>)
    18ec:	5ca9      	ldrb	r1, [r5, r2]
    18ee:	54a1      	strb	r1, [r4, r2]
{
//indicate that data is now stored in the buffer
trx_status.bits.RX_BUFFERED = 1;

//copy all of the data from the FIFO into the TxBuffer, plus RSSI and LQI
for (i = 1; i <= size+2; i++)
    18f0:	3301      	adds	r3, #1
    18f2:	b2db      	uxtb	r3, r3
    18f4:	1e1a      	subs	r2, r3, #0
    18f6:	4282      	cmp	r2, r0
    18f8:	ddf8      	ble.n	18ec <PHY_PacketReceieved+0x84>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    18fa:	4d17      	ldr	r5, [pc, #92]	; (1958 <PHY_PacketReceieved+0xf0>)

/*************************************************************************//**
*****************************************************************************/
static void phyWaitState(uint8_t state)
{
	while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK)) {
    18fc:	241f      	movs	r4, #31
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    18fe:	2001      	movs	r0, #1
    1900:	47a8      	blx	r5

/*************************************************************************//**
*****************************************************************************/
static void phyWaitState(uint8_t state)
{
	while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK)) {
    1902:	4020      	ands	r0, r4
    1904:	2816      	cmp	r0, #22
    1906:	d1fa      	bne.n	18fe <PHY_PacketReceieved+0x96>
    1908:	e022      	b.n	1950 <PHY_PacketReceieved+0xe8>
RxBuffer[RxBank].Payload[i-1] = phyRxBuffer[i];
}
}

phyWaitState(TRX_STATUS_RX_AACK_ON);
} else if (PHY_STATE_TX_WAIT_END == phyState) {
    190a:	2b03      	cmp	r3, #3
    190c:	d120      	bne.n	1950 <PHY_PacketReceieved+0xe8>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    190e:	2002      	movs	r0, #2
    1910:	4b11      	ldr	r3, [pc, #68]	; (1958 <PHY_PacketReceieved+0xf0>)
    1912:	4798      	blx	r3
}
}

phyWaitState(TRX_STATUS_RX_AACK_ON);
} else if (PHY_STATE_TX_WAIT_END == phyState) {
uint8_t status
    1914:	0940      	lsrs	r0, r0, #5
    1916:	b2c0      	uxtb	r0, r0
= (phyReadRegister(RG_TRX_STATE) >>
TRAC_STATUS) & 7;


if (TRAC_STATUS_SUCCESS == status) {
    1918:	2800      	cmp	r0, #0
    191a:	d109      	bne.n	1930 <PHY_PacketReceieved+0xc8>
status = PHY_STATUS_SUCCESS;
trx_status.bits.TX_BUSY = 0;
    191c:	4b12      	ldr	r3, [pc, #72]	; (1968 <PHY_PacketReceieved+0x100>)
    191e:	781a      	ldrb	r2, [r3, #0]
    1920:	2101      	movs	r1, #1
    1922:	438a      	bics	r2, r1
    1924:	701a      	strb	r2, [r3, #0]
trx_status.bits.TX_FAIL = 0;
    1926:	781a      	ldrb	r2, [r3, #0]
    1928:	3103      	adds	r1, #3
    192a:	438a      	bics	r2, r1
    192c:	701a      	strb	r2, [r3, #0]
    192e:	e00a      	b.n	1946 <PHY_PacketReceieved+0xde>

} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
status) {
status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
} else if (TRAC_STATUS_NO_ACK == status) {
    1930:	2805      	cmp	r0, #5
    1932:	d108      	bne.n	1946 <PHY_PacketReceieved+0xde>
status = PHY_STATUS_NO_ACK;
trx_status.bits.TX_BUSY = 0;
    1934:	4b0c      	ldr	r3, [pc, #48]	; (1968 <PHY_PacketReceieved+0x100>)
    1936:	781a      	ldrb	r2, [r3, #0]
    1938:	2101      	movs	r1, #1
    193a:	438a      	bics	r2, r1
    193c:	701a      	strb	r2, [r3, #0]
trx_status.bits.TX_FAIL = 1;
    193e:	7819      	ldrb	r1, [r3, #0]
    1940:	2204      	movs	r2, #4
    1942:	430a      	orrs	r2, r1
    1944:	701a      	strb	r2, [r3, #0]
} else {
status = PHY_STATUS_ERROR;
}

phySetRxState();
    1946:	4b09      	ldr	r3, [pc, #36]	; (196c <PHY_PacketReceieved+0x104>)
    1948:	4798      	blx	r3
phyState = PHY_STATE_IDLE;
    194a:	2201      	movs	r2, #1
    194c:	4b01      	ldr	r3, [pc, #4]	; (1954 <PHY_PacketReceieved+0xec>)
    194e:	701a      	strb	r2, [r3, #0]
}
}
}
    1950:	b002      	add	sp, #8
    1952:	bd70      	pop	{r4, r5, r6, pc}
    1954:	2000033c 	.word	0x2000033c
    1958:	00004eb9 	.word	0x00004eb9
    195c:	200004fc 	.word	0x200004fc
    1960:	000050b5 	.word	0x000050b5
    1964:	200002bc 	.word	0x200002bc
    1968:	200005b4 	.word	0x200005b4
    196c:	000009dd 	.word	0x000009dd

00001970 <Total_Connections>:
    uint8_t myLongAddress[MY_ADDRESS_LENGTH] = {EUI_0,EUI_1};
#endif

// Evaluate Total No of Peer Connection on a Node
uint8_t Total_Connections(void)
{
    1970:	b510      	push	{r4, lr}
    1972:	4b0a      	ldr	r3, [pc, #40]	; (199c <Total_Connections+0x2c>)
    1974:	001c      	movs	r4, r3
    1976:	3419      	adds	r4, #25
    1978:	34ff      	adds	r4, #255	; 0xff
    uint8_t count=0 , i;
    197a:	2000      	movs	r0, #0
    for (i=0;i<CONNECTION_SIZE;i++)
    {
    #if defined(PROTOCOL_STAR)
        if (ConnectionTable[i].Address[0] != 0x00 || ConnectionTable[i].Address[1] != 0x00 || ConnectionTable[i].Address[2] != 0x00)
    197c:	781a      	ldrb	r2, [r3, #0]
    197e:	2a00      	cmp	r2, #0
    1980:	d105      	bne.n	198e <Total_Connections+0x1e>
    1982:	785a      	ldrb	r2, [r3, #1]
    1984:	2a00      	cmp	r2, #0
    1986:	d102      	bne.n	198e <Total_Connections+0x1e>
    1988:	789a      	ldrb	r2, [r3, #2]
    198a:	2a00      	cmp	r2, #0
    198c:	d001      	beq.n	1992 <Total_Connections+0x22>
        {
            count++;
    198e:	3001      	adds	r0, #1
    1990:	b2c0      	uxtb	r0, r0
    1992:	330e      	adds	r3, #14

// Evaluate Total No of Peer Connection on a Node
uint8_t Total_Connections(void)
{
    uint8_t count=0 , i;
    for (i=0;i<CONNECTION_SIZE;i++)
    1994:	42a3      	cmp	r3, r4
    1996:	d1f1      	bne.n	197c <Total_Connections+0xc>
            count++;
        }
    #endif      
    }
    return count;
}
    1998:	bd10      	pop	{r4, pc}
    199a:	46c0      	nop			; (mov r8, r8)
    199c:	200005c4 	.word	0x200005c4

000019a0 <Find_Index>:
    // All connections (FFD || RFD)are stored in Connection Table of PAN CO
    // Each Connection is identified by its index no.
    // In case of Data TX , EDx --> PAN CO --> EDy
    // PAN CO will forward the data to EDy , In order to know 
    uint8_t Find_Index (uint8_t *DestAddr)
    {
    19a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    19a2:	b083      	sub	sp, #12
    19a4:	0006      	movs	r6, r0
        uint8_t i;
        uint8_t return_val;
        for (i=0;i<conn_size;i++)
    19a6:	4b16      	ldr	r3, [pc, #88]	; (1a00 <Find_Index+0x60>)
    19a8:	781c      	ldrb	r4, [r3, #0]
    19aa:	2c00      	cmp	r4, #0
    19ac:	d024      	beq.n	19f8 <Find_Index+0x58>
    19ae:	4915      	ldr	r1, [pc, #84]	; (1a04 <Find_Index+0x64>)
    19b0:	2200      	movs	r2, #0
    19b2:	2000      	movs	r0, #0
        {
            if (ConnectionTable[i].status.bits.isValid)
    19b4:	4d14      	ldr	r5, [pc, #80]	; (1a08 <Find_Index+0x68>)
    19b6:	00d3      	lsls	r3, r2, #3
    19b8:	1a9b      	subs	r3, r3, r2
    19ba:	005b      	lsls	r3, r3, #1
    19bc:	18eb      	adds	r3, r5, r3
    19be:	7b1b      	ldrb	r3, [r3, #12]
    19c0:	09db      	lsrs	r3, r3, #7
    19c2:	d00d      	beq.n	19e0 <Find_Index+0x40>
    19c4:	9101      	str	r1, [sp, #4]
            {
                if (DestAddr[1] == ConnectionTable[i].Address[0] && DestAddr[2] == ConnectionTable[i].Address[1] && DestAddr[3] == ConnectionTable[i].Address[2] )
    19c6:	7877      	ldrb	r7, [r6, #1]
    19c8:	780b      	ldrb	r3, [r1, #0]
    19ca:	429f      	cmp	r7, r3
    19cc:	d108      	bne.n	19e0 <Find_Index+0x40>
    19ce:	78b7      	ldrb	r7, [r6, #2]
    19d0:	784b      	ldrb	r3, [r1, #1]
    19d2:	429f      	cmp	r7, r3
    19d4:	d104      	bne.n	19e0 <Find_Index+0x40>
    19d6:	78f3      	ldrb	r3, [r6, #3]
    19d8:	469c      	mov	ip, r3
    19da:	788b      	ldrb	r3, [r1, #2]
    19dc:	459c      	cmp	ip, r3
    19de:	d007      	beq.n	19f0 <Find_Index+0x50>
    // PAN CO will forward the data to EDy , In order to know 
    uint8_t Find_Index (uint8_t *DestAddr)
    {
        uint8_t i;
        uint8_t return_val;
        for (i=0;i<conn_size;i++)
    19e0:	3001      	adds	r0, #1
    19e2:	b2c0      	uxtb	r0, r0
    19e4:	3201      	adds	r2, #1
    19e6:	310e      	adds	r1, #14
    19e8:	42a0      	cmp	r0, r4
    19ea:	d1e4      	bne.n	19b6 <Find_Index+0x16>
                
            }
        }
        if (i==conn_size)
            {
                return_val = 0xff;
    19ec:	20ff      	movs	r0, #255	; 0xff
    19ee:	e004      	b.n	19fa <Find_Index+0x5a>
                    break;
                }
                
            }
        }
        if (i==conn_size)
    19f0:	4284      	cmp	r4, r0
    19f2:	d102      	bne.n	19fa <Find_Index+0x5a>
            {
                return_val = 0xff;
    19f4:	20ff      	movs	r0, #255	; 0xff
    19f6:	e000      	b.n	19fa <Find_Index+0x5a>
    19f8:	20ff      	movs	r0, #255	; 0xff
            }
        return return_val;
    }
    19fa:	b003      	add	sp, #12
    19fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19fe:	46c0      	nop			; (mov r8, r8)
    1a00:	200006fb 	.word	0x200006fb
    1a04:	200005c4 	.word	0x200005c4
    1a08:	200005c0 	.word	0x200005c0

00001a0c <handle_lost_connection>:
     
    
    void handle_lost_connection(void)
    {
    1a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
        uint8_t i ;
        bool stat = false;
        if (role == EndDevice)
    1a0e:	4b12      	ldr	r3, [pc, #72]	; (1a58 <handle_lost_connection+0x4c>)
    1a10:	781b      	ldrb	r3, [r3, #0]
    1a12:	2b01      	cmp	r3, #1
    1a14:	d11f      	bne.n	1a56 <handle_lost_connection+0x4a>
        {
            for (i=0;i<end_nodes+1;i++)
    1a16:	4b11      	ldr	r3, [pc, #68]	; (1a5c <handle_lost_connection+0x50>)
    1a18:	781d      	ldrb	r5, [r3, #0]
    1a1a:	3501      	adds	r5, #1
            {
                if (myLongAddress[0] == END_DEVICES_Short_Address[i].Address[0] && myLongAddress[1] == END_DEVICES_Short_Address[i].Address[1])
    1a1c:	4b10      	ldr	r3, [pc, #64]	; (1a60 <handle_lost_connection+0x54>)
    1a1e:	781f      	ldrb	r7, [r3, #0]
    1a20:	7858      	ldrb	r0, [r3, #1]
    1a22:	2200      	movs	r2, #0
    1a24:	2400      	movs	r4, #0
    1a26:	2300      	movs	r3, #0
    1a28:	4e0e      	ldr	r6, [pc, #56]	; (1a64 <handle_lost_connection+0x58>)
    1a2a:	0091      	lsls	r1, r2, #2
    1a2c:	5d89      	ldrb	r1, [r1, r6]
    1a2e:	42b9      	cmp	r1, r7
    1a30:	d107      	bne.n	1a42 <handle_lost_connection+0x36>
    1a32:	0092      	lsls	r2, r2, #2
    1a34:	490b      	ldr	r1, [pc, #44]	; (1a64 <handle_lost_connection+0x58>)
    1a36:	468c      	mov	ip, r1
    1a38:	4462      	add	r2, ip
    1a3a:	7852      	ldrb	r2, [r2, #1]
    1a3c:	4282      	cmp	r2, r0
    1a3e:	d100      	bne.n	1a42 <handle_lost_connection+0x36>
                {
                    stat = true;
    1a40:	2401      	movs	r4, #1
    {
        uint8_t i ;
        bool stat = false;
        if (role == EndDevice)
        {
            for (i=0;i<end_nodes+1;i++)
    1a42:	3301      	adds	r3, #1
    1a44:	b2db      	uxtb	r3, r3
    1a46:	1e1a      	subs	r2, r3, #0
    1a48:	42aa      	cmp	r2, r5
    1a4a:	dbee      	blt.n	1a2a <handle_lost_connection+0x1e>
                if (myLongAddress[0] == END_DEVICES_Short_Address[i].Address[0] && myLongAddress[1] == END_DEVICES_Short_Address[i].Address[1])
                {
                    stat = true;
                }
            }
            if (!stat)
    1a4c:	2c00      	cmp	r4, #0
    1a4e:	d102      	bne.n	1a56 <handle_lost_connection+0x4a>
            {
                lost_connection = true;
    1a50:	2201      	movs	r2, #1
    1a52:	4b05      	ldr	r3, [pc, #20]	; (1a68 <handle_lost_connection+0x5c>)
    1a54:	701a      	strb	r2, [r3, #0]
            }
        }
        
    }
    1a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a58:	200007a8 	.word	0x200007a8
    1a5c:	20000342 	.word	0x20000342
    1a60:	20000020 	.word	0x20000020
    1a64:	20000758 	.word	0x20000758
    1a68:	20000343 	.word	0x20000343

00001a6c <store_connection_tb>:
     
    // Function to store the Connection Table Information which is Broadcasted by PAN CO
    // Used by END_DEVICES (FFD || RFD) only
    void store_connection_tb(uint8_t *payload)
    { 
    1a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a6e:	1d02      	adds	r2, r0, #4
        uint8_t i , j ;
        for (i=4; i < RX_BUFFER_SIZE; i++)
    1a70:	2304      	movs	r3, #4
        {
            if (i % 4 == 0 && (i+3) < RX_BUFFER_SIZE)
    1a72:	2603      	movs	r6, #3
    1a74:	1a30      	subs	r0, r6, r0
            {
                j = payload[i+3];
                END_DEVICES_Short_Address[j].connection_slot = j;
    1a76:	4f0c      	ldr	r7, [pc, #48]	; (1aa8 <store_connection_tb+0x3c>)
    void store_connection_tb(uint8_t *payload)
    { 
        uint8_t i , j ;
        for (i=4; i < RX_BUFFER_SIZE; i++)
        {
            if (i % 4 == 0 && (i+3) < RX_BUFFER_SIZE)
    1a78:	421e      	tst	r6, r3
    1a7a:	d10c      	bne.n	1a96 <store_connection_tb+0x2a>
    1a7c:	1881      	adds	r1, r0, r2
    1a7e:	2927      	cmp	r1, #39	; 0x27
    1a80:	dc09      	bgt.n	1a96 <store_connection_tb+0x2a>
            {
                j = payload[i+3];
    1a82:	78d5      	ldrb	r5, [r2, #3]
                END_DEVICES_Short_Address[j].connection_slot = j;
    1a84:	00ac      	lsls	r4, r5, #2
    1a86:	1939      	adds	r1, r7, r4
    1a88:	70cd      	strb	r5, [r1, #3]
                END_DEVICES_Short_Address[j].Address[0] = payload[i];
    1a8a:	7815      	ldrb	r5, [r2, #0]
    1a8c:	55e5      	strb	r5, [r4, r7]
                END_DEVICES_Short_Address[j].Address[1] = payload[i+1];
    1a8e:	7854      	ldrb	r4, [r2, #1]
    1a90:	704c      	strb	r4, [r1, #1]
                END_DEVICES_Short_Address[j].Address[2] = payload[i+2];
    1a92:	7894      	ldrb	r4, [r2, #2]
    1a94:	708c      	strb	r4, [r1, #2]
    // Function to store the Connection Table Information which is Broadcasted by PAN CO
    // Used by END_DEVICES (FFD || RFD) only
    void store_connection_tb(uint8_t *payload)
    { 
        uint8_t i , j ;
        for (i=4; i < RX_BUFFER_SIZE; i++)
    1a96:	3301      	adds	r3, #1
    1a98:	b2db      	uxtb	r3, r3
    1a9a:	3201      	adds	r2, #1
    1a9c:	2b28      	cmp	r3, #40	; 0x28
    1a9e:	d1eb      	bne.n	1a78 <store_connection_tb+0xc>
                
            }
            
            
        }
        handle_lost_connection();
    1aa0:	4b02      	ldr	r3, [pc, #8]	; (1aac <store_connection_tb+0x40>)
    1aa2:	4798      	blx	r3
        
      
    }
    1aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1aa6:	46c0      	nop			; (mov r8, r8)
    1aa8:	20000758 	.word	0x20000758
    1aac:	00001a0d 	.word	0x00001a0d

00001ab0 <SendPacket>:
    bool SendPacket(INPUT bool Broadcast,
                    INPUT uint8_t *DestinationAddress,
                    INPUT bool isCommand,
                    INPUT bool SecurityEnabled)
#endif                                        
{ 
    1ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ab2:	464f      	mov	r7, r9
    1ab4:	4646      	mov	r6, r8
    1ab6:	b4c0      	push	{r6, r7}
    1ab8:	b089      	sub	sp, #36	; 0x24
    1aba:	9203      	str	r2, [sp, #12]
    1abc:	ac10      	add	r4, sp, #64	; 0x40
    1abe:	7827      	ldrb	r7, [r4, #0]
    MAC_TRANS_PARAM tParam;
    bool status;

    tParam.flags.Val = 0;
    1ac0:	ad05      	add	r5, sp, #20
    1ac2:	2400      	movs	r4, #0
    1ac4:	46a0      	mov	r8, r4
    tParam.flags.bits.packetType = (isCommand) ? PACKET_TYPE_COMMAND : PACKET_TYPE_DATA;
    tParam.flags.bits.ackReq = (Broadcast) ? 0 : 1;
    1ac6:	3401      	adds	r4, #1
    1ac8:	4044      	eors	r4, r0
    1aca:	2601      	movs	r6, #1
    1acc:	46b1      	mov	r9, r6
    1ace:	4034      	ands	r4, r6
    1ad0:	0162      	lsls	r2, r4, #5
    1ad2:	3602      	adds	r6, #2
    1ad4:	401e      	ands	r6, r3
    tParam.flags.bits.broadcast = Broadcast;
    1ad6:	464b      	mov	r3, r9
    1ad8:	4003      	ands	r3, r0
    1ada:	009b      	lsls	r3, r3, #2
    1adc:	4332      	orrs	r2, r6
    tParam.flags.bits.secEn = SecurityEnabled;
    1ade:	464e      	mov	r6, r9
    1ae0:	4037      	ands	r7, r6
    1ae2:	00ff      	lsls	r7, r7, #3
    1ae4:	4313      	orrs	r3, r2
    #if defined(IEEE_802_15_4)
        tParam.altSrcAddr = 0;
    1ae6:	4646      	mov	r6, r8
    1ae8:	726e      	strb	r6, [r5, #9]
        tParam.altDestAddr = (Broadcast) ? true : false;
    1aea:	7228      	strb	r0, [r5, #8]
    #endif
    
    #if defined(INFER_DEST_ADDRESS)
        tParam.flags.bits.destPrsnt = 0;
    #else
        tParam.flags.bits.destPrsnt = (Broadcast) ? 0:1;
    1aec:	01a0      	lsls	r0, r4, #6
    1aee:	433b      	orrs	r3, r7
    1af0:	001c      	movs	r4, r3
        else
        {
            tParam.flags.bits.sourcePrsnt = 0;
        }
    #else
        tParam.flags.bits.sourcePrsnt = 1;
    1af2:	4304      	orrs	r4, r0
    1af4:	2380      	movs	r3, #128	; 0x80
    1af6:	425b      	negs	r3, r3
    1af8:	431c      	orrs	r4, r3
    1afa:	702c      	strb	r4, [r5, #0]
    #endif
    
    tParam.DestAddress = DestinationAddress;

    #if defined(IEEE_802_15_4)
        tParam.DestPANID.Val = DestinationPANID.Val;
    1afc:	8169      	strh	r1, [r5, #10]
    #endif

    status = MiMAC_SendPacket(tParam, TxBuffer, TxData); 
    1afe:	4c07      	ldr	r4, [pc, #28]	; (1b1c <SendPacket+0x6c>)
    1b00:	7823      	ldrb	r3, [r4, #0]
    1b02:	9300      	str	r3, [sp, #0]
    1b04:	4b06      	ldr	r3, [pc, #24]	; (1b20 <SendPacket+0x70>)
    1b06:	9805      	ldr	r0, [sp, #20]
    1b08:	9903      	ldr	r1, [sp, #12]
    1b0a:	9a07      	ldr	r2, [sp, #28]
    1b0c:	4d05      	ldr	r5, [pc, #20]	; (1b24 <SendPacket+0x74>)
    1b0e:	47a8      	blx	r5
    TxData = 0;
    1b10:	7026      	strb	r6, [r4, #0]
    
    return status;
}
    1b12:	b009      	add	sp, #36	; 0x24
    1b14:	bc0c      	pop	{r2, r3}
    1b16:	4690      	mov	r8, r2
    1b18:	4699      	mov	r9, r3
    1b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b1c:	20000755 	.word	0x20000755
    1b20:	200007b0 	.word	0x200007b0
    1b24:	00000fad 	.word	0x00000fad

00001b28 <MiApp_BroadcastPacket>:
 * Remarks:    
 *      None
 *
 *****************************************************************************************/ 
bool MiApp_BroadcastPacket( INPUT bool SecEn )
{
    1b28:	b510      	push	{r4, lr}
    1b2a:	b082      	sub	sp, #8
            return true;
        }    
    #endif
    
    #if defined(IEEE_802_15_4)
        return SendPacket(true, myPANID, NULL, false, SecEn);
    1b2c:	4b04      	ldr	r3, [pc, #16]	; (1b40 <MiApp_BroadcastPacket+0x18>)
    1b2e:	8819      	ldrh	r1, [r3, #0]
    1b30:	9000      	str	r0, [sp, #0]
    1b32:	2300      	movs	r3, #0
    1b34:	2200      	movs	r2, #0
    1b36:	2001      	movs	r0, #1
    1b38:	4c02      	ldr	r4, [pc, #8]	; (1b44 <MiApp_BroadcastPacket+0x1c>)
    1b3a:	47a0      	blx	r4
    #else
        return SendPacket(true, NULL, false, SecEn);
    #endif
}
    1b3c:	b002      	add	sp, #8
    1b3e:	bd10      	pop	{r4, pc}
    1b40:	200006f8 	.word	0x200006f8
    1b44:	00001ab1 	.word	0x00001ab1

00001b48 <MiApp_UnicastAddress>:
 *
 *****************************************************************************************/    
bool MiApp_UnicastAddress(INPUT uint8_t *DestinationAddress,
                    INPUT bool PermanentAddr,
                    INPUT bool SecEn)
{
    1b48:	b510      	push	{r4, lr}
    1b4a:	b082      	sub	sp, #8
            return true;
        }    
    #endif
    
    #if defined(IEEE_802_15_4)
        return SendPacket(false, myPANID, DestinationAddress, false, SecEn);
    1b4c:	4b04      	ldr	r3, [pc, #16]	; (1b60 <MiApp_UnicastAddress+0x18>)
    1b4e:	8819      	ldrh	r1, [r3, #0]
    1b50:	9200      	str	r2, [sp, #0]
    1b52:	2300      	movs	r3, #0
    1b54:	0002      	movs	r2, r0
    1b56:	2000      	movs	r0, #0
    1b58:	4c02      	ldr	r4, [pc, #8]	; (1b64 <MiApp_UnicastAddress+0x1c>)
    1b5a:	47a0      	blx	r4
    #else
        return SendPacket(false, DestinationAddress, false, SecEn);
    #endif
}
    1b5c:	b002      	add	sp, #8
    1b5e:	bd10      	pop	{r4, pc}
    1b60:	200006f8 	.word	0x200006f8
    1b64:	00001ab1 	.word	0x00001ab1

00001b68 <MiApp_UnicastConnection>:
 *      None
 *
 *****************************************************************************************/  
bool MiApp_UnicastConnection( INPUT uint8_t ConnectionIndex,
                        INPUT bool SecEn)
{
    1b68:	b510      	push	{r4, lr}
    if( ConnectionTable[ConnectionIndex].status.bits.isValid )
    1b6a:	00c3      	lsls	r3, r0, #3
    1b6c:	1a1b      	subs	r3, r3, r0
    1b6e:	005b      	lsls	r3, r3, #1
    1b70:	4a09      	ldr	r2, [pc, #36]	; (1b98 <MiApp_UnicastConnection+0x30>)
    1b72:	18d3      	adds	r3, r2, r3
    1b74:	7b1b      	ldrb	r3, [r3, #12]
    1b76:	09db      	lsrs	r3, r3, #7
            }    
        #endif
        
        return MiApp_UnicastAddress(ConnectionTable[ConnectionIndex].Address, true, SecEn);
    }
    return false;
    1b78:	2200      	movs	r2, #0
 *
 *****************************************************************************************/  
bool MiApp_UnicastConnection( INPUT uint8_t ConnectionIndex,
                        INPUT bool SecEn)
{
    if( ConnectionTable[ConnectionIndex].status.bits.isValid )
    1b7a:	2b00      	cmp	r3, #0
    1b7c:	d00a      	beq.n	1b94 <MiApp_UnicastConnection+0x2c>
                P2PStatus.bits.Enhanced_DR_SecEn = SecEn;
                return true;
            }    
        #endif
        
        return MiApp_UnicastAddress(ConnectionTable[ConnectionIndex].Address, true, SecEn);
    1b7e:	00c3      	lsls	r3, r0, #3
    1b80:	1a18      	subs	r0, r3, r0
    1b82:	0040      	lsls	r0, r0, #1
    1b84:	4b04      	ldr	r3, [pc, #16]	; (1b98 <MiApp_UnicastConnection+0x30>)
    1b86:	18c0      	adds	r0, r0, r3
    1b88:	3004      	adds	r0, #4
    1b8a:	000a      	movs	r2, r1
    1b8c:	2101      	movs	r1, #1
    1b8e:	4b03      	ldr	r3, [pc, #12]	; (1b9c <MiApp_UnicastConnection+0x34>)
    1b90:	4798      	blx	r3
    1b92:	0002      	movs	r2, r0
    }
    return false;
}
    1b94:	0010      	movs	r0, r2
    1b96:	bd10      	pop	{r4, pc}
    1b98:	200005c0 	.word	0x200005c0
    1b9c:	00001b49 	.word	0x00001b49

00001ba0 <Forward_Packet_PANCr_to_EDy>:
    


    /// This function will only be called by Pan co ordinator to forward the packet to the destination end device
    bool Forward_Packet_PANCr_to_EDy(uint8_t *fw_payload ,uint8_t index , uint8_t *EDxAddress)
    {
    1ba0:	b570      	push	{r4, r5, r6, lr}
    1ba2:	000d      	movs	r5, r1
        uint8_t i;
        bool status;
        MiApp_FlushTx();
        MiApp_WriteData(EDxAddress[0]);    // Unique address of EDy (DEST ED) 
    1ba4:	490d      	ldr	r1, [pc, #52]	; (1bdc <Forward_Packet_PANCr_to_EDy+0x3c>)
    1ba6:	2301      	movs	r3, #1
    1ba8:	700b      	strb	r3, [r1, #0]
    1baa:	7814      	ldrb	r4, [r2, #0]
    1bac:	4b0c      	ldr	r3, [pc, #48]	; (1be0 <Forward_Packet_PANCr_to_EDy+0x40>)
    1bae:	701c      	strb	r4, [r3, #0]
        MiApp_WriteData(EDxAddress[1]);    // Unique address of EDy (DEST ED) 
    1bb0:	7854      	ldrb	r4, [r2, #1]
    1bb2:	705c      	strb	r4, [r3, #1]
        MiApp_WriteData(EDxAddress[2]);    // Unique address of EDy (DEST ED) 
    1bb4:	2403      	movs	r4, #3
    1bb6:	700c      	strb	r4, [r1, #0]
    1bb8:	7892      	ldrb	r2, [r2, #2]
    1bba:	709a      	strb	r2, [r3, #2]
    1bbc:	1cc3      	adds	r3, r0, #3
    1bbe:	3028      	adds	r0, #40	; 0x28
        for(i = 3; i < TX_BUFFER_SIZE; i++)
        {
            MiApp_WriteData(fw_payload[i]);
    1bc0:	4e07      	ldr	r6, [pc, #28]	; (1be0 <Forward_Packet_PANCr_to_EDy+0x40>)
    1bc2:	780a      	ldrb	r2, [r1, #0]
    1bc4:	1c54      	adds	r4, r2, #1
    1bc6:	700c      	strb	r4, [r1, #0]
    1bc8:	781c      	ldrb	r4, [r3, #0]
    1bca:	54b4      	strb	r4, [r6, r2]
    1bcc:	3301      	adds	r3, #1
        bool status;
        MiApp_FlushTx();
        MiApp_WriteData(EDxAddress[0]);    // Unique address of EDy (DEST ED) 
        MiApp_WriteData(EDxAddress[1]);    // Unique address of EDy (DEST ED) 
        MiApp_WriteData(EDxAddress[2]);    // Unique address of EDy (DEST ED) 
        for(i = 3; i < TX_BUFFER_SIZE; i++)
    1bce:	4283      	cmp	r3, r0
    1bd0:	d1f7      	bne.n	1bc2 <Forward_Packet_PANCr_to_EDy+0x22>
        {
            MiApp_WriteData(fw_payload[i]);
        }
        #if defined(ENABLE_SECURITY)
                status = MiApp_UnicastConnection (index,true) ;
    1bd2:	2101      	movs	r1, #1
    1bd4:	0028      	movs	r0, r5
    1bd6:	4b03      	ldr	r3, [pc, #12]	; (1be4 <Forward_Packet_PANCr_to_EDy+0x44>)
    1bd8:	4798      	blx	r3
                status = MiApp_UnicastConnection (index,false) ;
        #endif
        
        return status;
                    
    }
    1bda:	bd70      	pop	{r4, r5, r6, pc}
    1bdc:	20000755 	.word	0x20000755
    1be0:	200007b0 	.word	0x200007b0
    1be4:	00001b69 	.word	0x00001b69

00001be8 <MiApp_BroadcastConnectionTable>:
    * Remarks:    
    *      None
    *
    *****************************************************************************************/    
    void MiApp_BroadcastConnectionTable(void)
    {
    1be8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bea:	465f      	mov	r7, fp
    1bec:	4656      	mov	r6, sl
    1bee:	464d      	mov	r5, r9
    1bf0:	4644      	mov	r4, r8
    1bf2:	b4f0      	push	{r4, r5, r6, r7}
    1bf4:	b089      	sub	sp, #36	; 0x24
        uint8_t i,j , k , count;
        // Based on Connection Size in Network braodcast the connection details Multiple Times 
        // so that all the END_DEVICES in Star Network Receive the packet 
        uint8_t broadcast_count = 0;

        if ((conn_size  * 4 ) + 4 < TX_BUFFER_SIZE)
    1bf6:	4b68      	ldr	r3, [pc, #416]	; (1d98 <MiApp_BroadcastConnectionTable+0x1b0>)
    1bf8:	781c      	ldrb	r4, [r3, #0]
    1bfa:	3401      	adds	r4, #1
    1bfc:	00a4      	lsls	r4, r4, #2
    1bfe:	2c27      	cmp	r4, #39	; 0x27
    1c00:	dd14      	ble.n	1c2c <MiApp_BroadcastConnectionTable+0x44>
        {
            broadcast_count = 1;
        }
        else
        {
            broadcast_count = ((conn_size * 4) + 4 )/ TX_BUFFER_SIZE;
    1c02:	2128      	movs	r1, #40	; 0x28
    1c04:	0020      	movs	r0, r4
    1c06:	4b65      	ldr	r3, [pc, #404]	; (1d9c <MiApp_BroadcastConnectionTable+0x1b4>)
    1c08:	4798      	blx	r3
    1c0a:	b2c3      	uxtb	r3, r0
    1c0c:	001d      	movs	r5, r3
    1c0e:	9306      	str	r3, [sp, #24]
            if ((conn_size *4) + 4 % TX_BUFFER_SIZE != 0)
    1c10:	2c00      	cmp	r4, #0
    1c12:	d007      	beq.n	1c24 <MiApp_BroadcastConnectionTable+0x3c>
            {
                broadcast_count = broadcast_count + ((conn_size *4) + 4 )% TX_BUFFER_SIZE;
    1c14:	2128      	movs	r1, #40	; 0x28
    1c16:	0020      	movs	r0, r4
    1c18:	4b61      	ldr	r3, [pc, #388]	; (1da0 <MiApp_BroadcastConnectionTable+0x1b8>)
    1c1a:	4798      	blx	r3
    1c1c:	46ac      	mov	ip, r5
    1c1e:	4461      	add	r1, ip
    1c20:	b2cb      	uxtb	r3, r1
    1c22:	9306      	str	r3, [sp, #24]
            }
            
        }
        
        for (i = 0 ; i < broadcast_count ; i++)
    1c24:	9b06      	ldr	r3, [sp, #24]
    1c26:	2b00      	cmp	r3, #0
    1c28:	d102      	bne.n	1c30 <MiApp_BroadcastConnectionTable+0x48>
    1c2a:	e0ad      	b.n	1d88 <MiApp_BroadcastConnectionTable+0x1a0>
        // so that all the END_DEVICES in Star Network Receive the packet 
        uint8_t broadcast_count = 0;

        if ((conn_size  * 4 ) + 4 < TX_BUFFER_SIZE)
        {
            broadcast_count = 1;
    1c2c:	2301      	movs	r3, #1
    1c2e:	9306      	str	r3, [sp, #24]
    1c30:	2309      	movs	r3, #9
    1c32:	9304      	str	r3, [sp, #16]
    1c34:	2300      	movs	r3, #0
    1c36:	469a      	mov	sl, r3
        {
            MiApp_FlushTx();
            MiApp_WriteData(CMD_SHARE_CONNECTION_TABLE);
            MiApp_WriteData(conn_size); // No of end devices in network
            MiApp_WriteData(((TX_BUFFER_SIZE-4)/4)*i);
            MiApp_WriteData(((TX_BUFFER_SIZE-4)/4)*(i+1));
    1c38:	2304      	movs	r3, #4
    1c3a:	466a      	mov	r2, sp
    1c3c:	77d3      	strb	r3, [r2, #31]
                        MiApp_WriteData(0xff);
                        MiApp_WriteData(0xff);
                        MiApp_WriteData(0xff);
                        MiApp_WriteData(j);             
                    }
                    count = count + 4;
    1c3e:	4653      	mov	r3, sl
    1c40:	9305      	str	r3, [sp, #20]
        }
        
        for (i = 0 ; i < broadcast_count ; i++)
        {
            MiApp_FlushTx();
            MiApp_WriteData(CMD_SHARE_CONNECTION_TABLE);
    1c42:	4b58      	ldr	r3, [pc, #352]	; (1da4 <MiApp_BroadcastConnectionTable+0x1bc>)
    1c44:	2277      	movs	r2, #119	; 0x77
    1c46:	701a      	strb	r2, [r3, #0]
            MiApp_WriteData(conn_size); // No of end devices in network
    1c48:	4b53      	ldr	r3, [pc, #332]	; (1d98 <MiApp_BroadcastConnectionTable+0x1b0>)
    1c4a:	781e      	ldrb	r6, [r3, #0]
    1c4c:	4b55      	ldr	r3, [pc, #340]	; (1da4 <MiApp_BroadcastConnectionTable+0x1bc>)
    1c4e:	705e      	strb	r6, [r3, #1]
            MiApp_WriteData(((TX_BUFFER_SIZE-4)/4)*i);
    1c50:	9a05      	ldr	r2, [sp, #20]
    1c52:	00d3      	lsls	r3, r2, #3
    1c54:	4694      	mov	ip, r2
    1c56:	4463      	add	r3, ip
    1c58:	b2db      	uxtb	r3, r3
    1c5a:	4a52      	ldr	r2, [pc, #328]	; (1da4 <MiApp_BroadcastConnectionTable+0x1bc>)
    1c5c:	7093      	strb	r3, [r2, #2]
            MiApp_WriteData(((TX_BUFFER_SIZE-4)/4)*(i+1));
    1c5e:	4a52      	ldr	r2, [pc, #328]	; (1da8 <MiApp_BroadcastConnectionTable+0x1c0>)
    1c60:	4669      	mov	r1, sp
    1c62:	7fc9      	ldrb	r1, [r1, #31]
    1c64:	7011      	strb	r1, [r2, #0]
    1c66:	4a4f      	ldr	r2, [pc, #316]	; (1da4 <MiApp_BroadcastConnectionTable+0x1bc>)
    1c68:	9804      	ldr	r0, [sp, #16]
    1c6a:	70d0      	strb	r0, [r2, #3]
            count = 4;
            for (j= ((TX_BUFFER_SIZE-4)/4)*i ;j<((TX_BUFFER_SIZE-4)/4)*(i+1);j++)
    1c6c:	1e1a      	subs	r2, r3, #0
    1c6e:	4684      	mov	ip, r0
    1c70:	4282      	cmp	r2, r0
    1c72:	da63      	bge.n	1d3c <MiApp_BroadcastConnectionTable+0x154>
    1c74:	2400      	movs	r4, #0
    1c76:	2104      	movs	r1, #4
    1c78:	2004      	movs	r0, #4
            {
                if (j < conn_size)
                {
                    if (ConnectionTable[j].status.bits.isValid)
    1c7a:	4d4c      	ldr	r5, [pc, #304]	; (1dac <MiApp_BroadcastConnectionTable+0x1c4>)
    1c7c:	46a8      	mov	r8, r5
                    }

                    else
                    {

                        MiApp_WriteData(0xff);
    1c7e:	4d49      	ldr	r5, [pc, #292]	; (1da4 <MiApp_BroadcastConnectionTable+0x1bc>)
    1c80:	46a9      	mov	r9, r5
    1c82:	25ff      	movs	r5, #255	; 0xff
    1c84:	46aa      	mov	sl, r5
                if (j < conn_size)
                {
                    if (ConnectionTable[j].status.bits.isValid)
                    {

                        MiApp_WriteData(ConnectionTable[j].Address[0]);
    1c86:	4665      	mov	r5, ip
    1c88:	9502      	str	r5, [sp, #8]
            MiApp_WriteData(((TX_BUFFER_SIZE-4)/4)*i);
            MiApp_WriteData(((TX_BUFFER_SIZE-4)/4)*(i+1));
            count = 4;
            for (j= ((TX_BUFFER_SIZE-4)/4)*i ;j<((TX_BUFFER_SIZE-4)/4)*(i+1);j++)
            {
                if (j < conn_size)
    1c8a:	429e      	cmp	r6, r3
    1c8c:	d949      	bls.n	1d22 <MiApp_BroadcastConnectionTable+0x13a>
                {
                    if (ConnectionTable[j].status.bits.isValid)
    1c8e:	00d4      	lsls	r4, r2, #3
    1c90:	1aa4      	subs	r4, r4, r2
    1c92:	0064      	lsls	r4, r4, #1
    1c94:	4444      	add	r4, r8
    1c96:	7b24      	ldrb	r4, [r4, #12]
    1c98:	09e4      	lsrs	r4, r4, #7
    1c9a:	d02b      	beq.n	1cf4 <MiApp_BroadcastConnectionTable+0x10c>
                    {

                        MiApp_WriteData(ConnectionTable[j].Address[0]);
    1c9c:	00d4      	lsls	r4, r2, #3
    1c9e:	9403      	str	r4, [sp, #12]
    1ca0:	1aa7      	subs	r7, r4, r2
    1ca2:	007f      	lsls	r7, r7, #1
    1ca4:	46bc      	mov	ip, r7
    1ca6:	4f41      	ldr	r7, [pc, #260]	; (1dac <MiApp_BroadcastConnectionTable+0x1c4>)
    1ca8:	46bb      	mov	fp, r7
    1caa:	44dc      	add	ip, fp
    1cac:	4667      	mov	r7, ip
    1cae:	793f      	ldrb	r7, [r7, #4]
    1cb0:	4d3c      	ldr	r5, [pc, #240]	; (1da4 <MiApp_BroadcastConnectionTable+0x1bc>)
    1cb2:	546f      	strb	r7, [r5, r1]
                        MiApp_WriteData(ConnectionTable[j].Address[1]);
    1cb4:	1c4f      	adds	r7, r1, #1
    1cb6:	b2ff      	uxtb	r7, r7
    1cb8:	46bb      	mov	fp, r7
    1cba:	4667      	mov	r7, ip
    1cbc:	797f      	ldrb	r7, [r7, #5]
    1cbe:	46bc      	mov	ip, r7
    1cc0:	465f      	mov	r7, fp
    1cc2:	4664      	mov	r4, ip
    1cc4:	55ec      	strb	r4, [r5, r7]
                        MiApp_WriteData(ConnectionTable[j].Address[2]);
    1cc6:	1ccc      	adds	r4, r1, #3
    1cc8:	466d      	mov	r5, sp
    1cca:	77ac      	strb	r4, [r5, #30]
    1ccc:	7fac      	ldrb	r4, [r5, #30]
    1cce:	0027      	movs	r7, r4
    1cd0:	1c8c      	adds	r4, r1, #2
    1cd2:	77ac      	strb	r4, [r5, #30]
    1cd4:	7fac      	ldrb	r4, [r5, #30]
    1cd6:	46a3      	mov	fp, r4
    1cd8:	9c03      	ldr	r4, [sp, #12]
    1cda:	1aa2      	subs	r2, r4, r2
    1cdc:	0052      	lsls	r2, r2, #1
    1cde:	4c33      	ldr	r4, [pc, #204]	; (1dac <MiApp_BroadcastConnectionTable+0x1c4>)
    1ce0:	46a4      	mov	ip, r4
    1ce2:	4462      	add	r2, ip
    1ce4:	7992      	ldrb	r2, [r2, #6]
    1ce6:	465c      	mov	r4, fp
    1ce8:	4d2e      	ldr	r5, [pc, #184]	; (1da4 <MiApp_BroadcastConnectionTable+0x1bc>)
    1cea:	552a      	strb	r2, [r5, r4]
                        MiApp_WriteData(j);
    1cec:	3104      	adds	r1, #4
    1cee:	b2c9      	uxtb	r1, r1
    1cf0:	55eb      	strb	r3, [r5, r7]
    1cf2:	e013      	b.n	1d1c <MiApp_BroadcastConnectionTable+0x134>
                    }

                    else
                    {

                        MiApp_WriteData(0xff);
    1cf4:	464a      	mov	r2, r9
    1cf6:	4654      	mov	r4, sl
    1cf8:	5454      	strb	r4, [r2, r1]
                        MiApp_WriteData(0xff);
    1cfa:	1c4a      	adds	r2, r1, #1
    1cfc:	b2d2      	uxtb	r2, r2
    1cfe:	464c      	mov	r4, r9
    1d00:	4657      	mov	r7, sl
    1d02:	54a7      	strb	r7, [r4, r2]
                        MiApp_WriteData(0xff);
    1d04:	1cca      	adds	r2, r1, #3
    1d06:	b2d2      	uxtb	r2, r2
    1d08:	4694      	mov	ip, r2
    1d0a:	1c8c      	adds	r4, r1, #2
    1d0c:	b2e4      	uxtb	r4, r4
    1d0e:	464f      	mov	r7, r9
    1d10:	4652      	mov	r2, sl
    1d12:	553a      	strb	r2, [r7, r4]
                        MiApp_WriteData(j);             
    1d14:	3104      	adds	r1, #4
    1d16:	b2c9      	uxtb	r1, r1
    1d18:	4664      	mov	r4, ip
    1d1a:	553b      	strb	r3, [r7, r4]
                    }
                    count = count + 4;
    1d1c:	3004      	adds	r0, #4
    1d1e:	b2c0      	uxtb	r0, r0
    1d20:	2401      	movs	r4, #1
            MiApp_WriteData(CMD_SHARE_CONNECTION_TABLE);
            MiApp_WriteData(conn_size); // No of end devices in network
            MiApp_WriteData(((TX_BUFFER_SIZE-4)/4)*i);
            MiApp_WriteData(((TX_BUFFER_SIZE-4)/4)*(i+1));
            count = 4;
            for (j= ((TX_BUFFER_SIZE-4)/4)*i ;j<((TX_BUFFER_SIZE-4)/4)*(i+1);j++)
    1d22:	3301      	adds	r3, #1
    1d24:	b2db      	uxtb	r3, r3
    1d26:	1e1a      	subs	r2, r3, #0
    1d28:	9d02      	ldr	r5, [sp, #8]
    1d2a:	42aa      	cmp	r2, r5
    1d2c:	dbad      	blt.n	1c8a <MiApp_BroadcastConnectionTable+0xa2>
    1d2e:	2c00      	cmp	r4, #0
    1d30:	d001      	beq.n	1d36 <MiApp_BroadcastConnectionTable+0x14e>
    1d32:	4b1d      	ldr	r3, [pc, #116]	; (1da8 <MiApp_BroadcastConnectionTable+0x1c0>)
    1d34:	7019      	strb	r1, [r3, #0]
                    }
                    count = count + 4;
                }
            }
            // Fill the remaining buffer with garbage value
            for (k=count;k<TX_BUFFER_SIZE;k++)
    1d36:	2827      	cmp	r0, #39	; 0x27
    1d38:	d901      	bls.n	1d3e <MiApp_BroadcastConnectionTable+0x156>
    1d3a:	e011      	b.n	1d60 <MiApp_BroadcastConnectionTable+0x178>
            MiApp_FlushTx();
            MiApp_WriteData(CMD_SHARE_CONNECTION_TABLE);
            MiApp_WriteData(conn_size); // No of end devices in network
            MiApp_WriteData(((TX_BUFFER_SIZE-4)/4)*i);
            MiApp_WriteData(((TX_BUFFER_SIZE-4)/4)*(i+1));
            count = 4;
    1d3c:	2004      	movs	r0, #4
    1d3e:	4b1a      	ldr	r3, [pc, #104]	; (1da8 <MiApp_BroadcastConnectionTable+0x1c0>)
    1d40:	781b      	ldrb	r3, [r3, #0]
    1d42:	0019      	movs	r1, r3
                }
            }
            // Fill the remaining buffer with garbage value
            for (k=count;k<TX_BUFFER_SIZE;k++)
            {
                MiApp_WriteData(0x11);   // Garbage Value 
    1d44:	4d17      	ldr	r5, [pc, #92]	; (1da4 <MiApp_BroadcastConnectionTable+0x1bc>)
    1d46:	2411      	movs	r4, #17
    1d48:	1ac0      	subs	r0, r0, r3
    1d4a:	b2c0      	uxtb	r0, r0
    1d4c:	1c4b      	adds	r3, r1, #1
    1d4e:	b2db      	uxtb	r3, r3
    1d50:	546c      	strb	r4, [r5, r1]
    1d52:	0019      	movs	r1, r3
                    }
                    count = count + 4;
                }
            }
            // Fill the remaining buffer with garbage value
            for (k=count;k<TX_BUFFER_SIZE;k++)
    1d54:	18c2      	adds	r2, r0, r3
    1d56:	b2d2      	uxtb	r2, r2
    1d58:	2a27      	cmp	r2, #39	; 0x27
    1d5a:	d9f7      	bls.n	1d4c <MiApp_BroadcastConnectionTable+0x164>
    1d5c:	4a12      	ldr	r2, [pc, #72]	; (1da8 <MiApp_BroadcastConnectionTable+0x1c0>)
    1d5e:	7013      	strb	r3, [r2, #0]



            #if defined(IEEE_802_15_4)

                SendPacket(true, myPANID, NULL, true, false);
    1d60:	4b13      	ldr	r3, [pc, #76]	; (1db0 <MiApp_BroadcastConnectionTable+0x1c8>)
    1d62:	8819      	ldrh	r1, [r3, #0]
    1d64:	2300      	movs	r3, #0
    1d66:	9300      	str	r3, [sp, #0]
    1d68:	3301      	adds	r3, #1
    1d6a:	2200      	movs	r2, #0
    1d6c:	2001      	movs	r0, #1
    1d6e:	4c11      	ldr	r4, [pc, #68]	; (1db4 <MiApp_BroadcastConnectionTable+0x1cc>)
    1d70:	47a0      	blx	r4
                broadcast_count = broadcast_count + ((conn_size *4) + 4 )% TX_BUFFER_SIZE;
            }
            
        }
        
        for (i = 0 ; i < broadcast_count ; i++)
    1d72:	9f05      	ldr	r7, [sp, #20]
    1d74:	3701      	adds	r7, #1
    1d76:	b2fb      	uxtb	r3, r7
    1d78:	9305      	str	r3, [sp, #20]
    1d7a:	9a04      	ldr	r2, [sp, #16]
    1d7c:	3209      	adds	r2, #9
    1d7e:	9204      	str	r2, [sp, #16]
    1d80:	9a06      	ldr	r2, [sp, #24]
    1d82:	4293      	cmp	r3, r2
    1d84:	d200      	bcs.n	1d88 <MiApp_BroadcastConnectionTable+0x1a0>
    1d86:	e75c      	b.n	1c42 <MiApp_BroadcastConnectionTable+0x5a>
                SendPacket(true, NULL, true, false);
            #endif

 
        }
    }
    1d88:	b009      	add	sp, #36	; 0x24
    1d8a:	bc3c      	pop	{r2, r3, r4, r5}
    1d8c:	4690      	mov	r8, r2
    1d8e:	4699      	mov	r9, r3
    1d90:	46a2      	mov	sl, r4
    1d92:	46ab      	mov	fp, r5
    1d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d96:	46c0      	nop			; (mov r8, r8)
    1d98:	200006fb 	.word	0x200006fb
    1d9c:	00005bc9 	.word	0x00005bc9
    1da0:	00005d95 	.word	0x00005d95
    1da4:	200007b0 	.word	0x200007b0
    1da8:	20000755 	.word	0x20000755
    1dac:	200005c0 	.word	0x200005c0
    1db0:	200006f8 	.word	0x200006f8
    1db4:	00001ab1 	.word	0x00001ab1

00001db8 <SW_Ack_SrED>:
      * Remarks:    
      *      None
      *
      *****************************************************************************************/ 
        bool SW_Ack_SrED(uint8_t * Dest_Addr )
        {
    1db8:	b510      	push	{r4, lr}
    1dba:	b082      	sub	sp, #8
    1dbc:	0002      	movs	r2, r0
            MiApp_FlushTx();
            MiApp_WriteData(CMD_DATA_TO_ENDDEV_SUCCESS); 
    1dbe:	2101      	movs	r1, #1
    1dc0:	4b07      	ldr	r3, [pc, #28]	; (1de0 <SW_Ack_SrED+0x28>)
    1dc2:	7019      	strb	r1, [r3, #0]
    1dc4:	31d9      	adds	r1, #217	; 0xd9
    1dc6:	4b07      	ldr	r3, [pc, #28]	; (1de4 <SW_Ack_SrED+0x2c>)
    1dc8:	7019      	strb	r1, [r3, #0]
            #if defined(IEEE_802_15_4)
                return SendPacket(false, myPANID, Dest_Addr, true, false);
    1dca:	4b07      	ldr	r3, [pc, #28]	; (1de8 <SW_Ack_SrED+0x30>)
    1dcc:	8819      	ldrh	r1, [r3, #0]
    1dce:	2300      	movs	r3, #0
    1dd0:	9300      	str	r3, [sp, #0]
    1dd2:	3301      	adds	r3, #1
    1dd4:	2000      	movs	r0, #0
    1dd6:	4c05      	ldr	r4, [pc, #20]	; (1dec <SW_Ack_SrED+0x34>)
    1dd8:	47a0      	blx	r4
            #else
                return SendPacket(false, Dest_Addr, true, false);
            #endif           
        }
    1dda:	b002      	add	sp, #8
    1ddc:	bd10      	pop	{r4, pc}
    1dde:	46c0      	nop			; (mov r8, r8)
    1de0:	20000755 	.word	0x20000755
    1de4:	200007b0 	.word	0x200007b0
    1de8:	200006f8 	.word	0x200006f8
    1dec:	00001ab1 	.word	0x00001ab1

00001df0 <isSameAddress>:
 *
 * Side Effects:    
 *
 ********************************************************************/
bool    isSameAddress(INPUT uint8_t *Address1, INPUT uint8_t *Address2)
{
    1df0:	b510      	push	{r4, lr}
    uint8_t i;
    
    for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    {
        if( Address1[i] != Address2[i] )
    1df2:	7802      	ldrb	r2, [r0, #0]
    1df4:	780b      	ldrb	r3, [r1, #0]
    1df6:	429a      	cmp	r2, r3
    1df8:	d10c      	bne.n	1e14 <isSameAddress+0x24>
    1dfa:	1c43      	adds	r3, r0, #1
    1dfc:	3101      	adds	r1, #1
    1dfe:	3008      	adds	r0, #8
    1e00:	781c      	ldrb	r4, [r3, #0]
    1e02:	780a      	ldrb	r2, [r1, #0]
    1e04:	4294      	cmp	r4, r2
    1e06:	d107      	bne.n	1e18 <isSameAddress+0x28>
    1e08:	3301      	adds	r3, #1
    1e0a:	3101      	adds	r1, #1
 ********************************************************************/
bool    isSameAddress(INPUT uint8_t *Address1, INPUT uint8_t *Address2)
{
    uint8_t i;
    
    for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    1e0c:	4283      	cmp	r3, r0
    1e0e:	d1f7      	bne.n	1e00 <isSameAddress+0x10>
        if( Address1[i] != Address2[i] )
        {
            return false;
        }
    }
    return true;
    1e10:	2001      	movs	r0, #1
    1e12:	e002      	b.n	1e1a <isSameAddress+0x2a>
    
    for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    {
        if( Address1[i] != Address2[i] )
        {
            return false;
    1e14:	2000      	movs	r0, #0
    1e16:	e000      	b.n	1e1a <isSameAddress+0x2a>
    1e18:	2000      	movs	r0, #0
        }
    }
    return true;
}
    1e1a:	bd10      	pop	{r4, pc}

00001e1c <MiApp_StartConnection>:

#if defined(ENABLE_HAND_SHAKE)
     
    bool MiApp_StartConnection(uint8_t Mode, uint8_t ScanDuration, uint32_t ChannelMap)
    {
    1e1c:	b510      	push	{r4, lr}
    1e1e:	b082      	sub	sp, #8
		
		role = PanCoordinator;
    1e20:	2200      	movs	r2, #0
    1e22:	4b0d      	ldr	r3, [pc, #52]	; (1e58 <MiApp_StartConnection+0x3c>)
    1e24:	701a      	strb	r2, [r3, #0]
        switch(Mode)
    1e26:	2800      	cmp	r0, #0
    1e28:	d112      	bne.n	1e50 <MiApp_StartConnection+0x34>
                #if defined(IEEE_802_15_4)
                    #if MY_PAN_ID == 0xFFFF
                        myPANID.v[0] = TMRL;
                        myPANID.v[1] = TMRL+0x51;
                    #else
                        myPANID.Val = MY_PAN_ID;
    1e2a:	490c      	ldr	r1, [pc, #48]	; (1e5c <MiApp_StartConnection+0x40>)
    1e2c:	4b0c      	ldr	r3, [pc, #48]	; (1e60 <MiApp_StartConnection+0x44>)
    1e2e:	800b      	strh	r3, [r1, #0]
                    #endif
                    {
                        uint16_t tmp = 0xFFFF;
    1e30:	466b      	mov	r3, sp
    1e32:	1d98      	adds	r0, r3, #6
    1e34:	2301      	movs	r3, #1
    1e36:	425b      	negs	r3, r3
    1e38:	8003      	strh	r3, [r0, #0]
                        MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    1e3a:	4b0a      	ldr	r3, [pc, #40]	; (1e64 <MiApp_StartConnection+0x48>)
    1e3c:	4798      	blx	r3
                #endif
                #if defined(ENABLE_TIME_SYNC) && !defined(ENABLE_SLEEP) && defined(ENABLE_INDIRECT_MESSAGE)
                    TimeSyncTick = MiWi_TickGet();
                #endif
            #if defined(PROTOCOL_STAR)
                tick1 = MiWi_TickGet();
    1e3e:	4c0a      	ldr	r4, [pc, #40]	; (1e68 <MiApp_StartConnection+0x4c>)
    1e40:	47a0      	blx	r4
    1e42:	4b0a      	ldr	r3, [pc, #40]	; (1e6c <MiApp_StartConnection+0x50>)
    1e44:	6018      	str	r0, [r3, #0]
                tick4 = MiWi_TickGet();
    1e46:	47a0      	blx	r4
    1e48:	4b09      	ldr	r3, [pc, #36]	; (1e70 <MiApp_StartConnection+0x54>)
    1e4a:	6018      	str	r0, [r3, #0]
            #endif
                return true;
    1e4c:	2001      	movs	r0, #1
    1e4e:	e000      	b.n	1e52 <MiApp_StartConnection+0x36>
                        TimeSyncTick = MiWi_TickGet();
                    #endif
                    return true;
                }
                #else
                    return false;
    1e50:	2000      	movs	r0, #0
            
            default:
                break;
        }    
        return false;
    }
    1e52:	b002      	add	sp, #8
    1e54:	bd10      	pop	{r4, pc}
    1e56:	46c0      	nop			; (mov r8, r8)
    1e58:	200007a8 	.word	0x200007a8
    1e5c:	200006f8 	.word	0x200006f8
    1e60:	00001234 	.word	0x00001234
    1e64:	00000b99 	.word	0x00000b99
    1e68:	00002961 	.word	0x00002961
    1e6c:	200007ac 	.word	0x200007ac
    1e70:	200006d8 	.word	0x200006d8

00001e74 <MiApp_DiscardMessage>:



 
void MiApp_DiscardMessage(void)
{
    1e74:	b510      	push	{r4, lr}
    P2PStatus.bits.RxHasUserData = 0;
    1e76:	4a04      	ldr	r2, [pc, #16]	; (1e88 <MiApp_DiscardMessage+0x14>)
    1e78:	7813      	ldrb	r3, [r2, #0]
    1e7a:	2108      	movs	r1, #8
    1e7c:	438b      	bics	r3, r1
    1e7e:	7013      	strb	r3, [r2, #0]
    MiMAC_DiscardPacket();
    1e80:	4b02      	ldr	r3, [pc, #8]	; (1e8c <MiApp_DiscardMessage+0x18>)
    1e82:	4798      	blx	r3
}
    1e84:	bd10      	pop	{r4, pc}
    1e86:	46c0      	nop			; (mov r8, r8)
    1e88:	20000754 	.word	0x20000754
    1e8c:	000013a1 	.word	0x000013a1

00001e90 <MiApp_SetChannel>:


 
bool MiApp_SetChannel(uint8_t channel)
{
    1e90:	b510      	push	{r4, lr}
    1e92:	0004      	movs	r4, r0
    if( MiMAC_SetChannel(channel, 0) )
    1e94:	2100      	movs	r1, #0
    1e96:	4b03      	ldr	r3, [pc, #12]	; (1ea4 <MiApp_SetChannel+0x14>)
    1e98:	4798      	blx	r3
    1e9a:	2800      	cmp	r0, #0
    1e9c:	d001      	beq.n	1ea2 <MiApp_SetChannel+0x12>
    {
        currentChannel = channel;
    1e9e:	4b02      	ldr	r3, [pc, #8]	; (1ea8 <MiApp_SetChannel+0x18>)
    1ea0:	701c      	strb	r4, [r3, #0]
            nvmPutCurrentChannel(&currentChannel);
        #endif
        return true;
    }
    return false;
}
    1ea2:	bd10      	pop	{r4, pc}
    1ea4:	00000f89 	.word	0x00000f89
    1ea8:	20000341 	.word	0x20000341

00001eac <MiApp_ProtocolInit>:


uint32_t addr1 =  0x0080A00C;

bool MiApp_ProtocolInit(bool bNetworkFreezer)
{
    1eac:	b570      	push	{r4, r5, r6, lr}
    1eae:	b084      	sub	sp, #16
	#if defined(ENABLE_NETWORK_FREEZER)
	NVMInit();
	#endif
	
	//clear all status bits
	P2PStatus.Val = 0;
    1eb0:	2200      	movs	r2, #0
    1eb2:	4b36      	ldr	r3, [pc, #216]	; (1f8c <MiApp_ProtocolInit+0xe0>)
    1eb4:	701a      	strb	r2, [r3, #0]
	
	#if defined (USE_MAC_ADDRESS)
	// Each SAM MCU has a unique address stored in Flash Memory
	uint32_t val_1, val_2, val_3, val_4;
	uint32_t *ptr1 = (volatile uint32_t *)0x0080A00C;
	val_1 = *ptr1;
    1eb6:	4b36      	ldr	r3, [pc, #216]	; (1f90 <MiApp_ProtocolInit+0xe4>)
    1eb8:	681d      	ldr	r5, [r3, #0]
	uint32_t *ptr = (volatile uint32_t *)0x0080A040;
	val_2 = *ptr;
    1eba:	4b36      	ldr	r3, [pc, #216]	; (1f94 <MiApp_ProtocolInit+0xe8>)
    1ebc:	681c      	ldr	r4, [r3, #0]
	ptr++;
	val_3 = *ptr;
    1ebe:	4b36      	ldr	r3, [pc, #216]	; (1f98 <MiApp_ProtocolInit+0xec>)
    1ec0:	6819      	ldr	r1, [r3, #0]
	ptr++;
	val_4 = *ptr;
    1ec2:	4b36      	ldr	r3, [pc, #216]	; (1f9c <MiApp_ProtocolInit+0xf0>)
    1ec4:	681a      	ldr	r2, [r3, #0]
	myLongAddress[0] = (val_1 & 0xFF) + ((val_1>>8) & 0xFF);
    1ec6:	4b36      	ldr	r3, [pc, #216]	; (1fa0 <MiApp_ProtocolInit+0xf4>)
    1ec8:	0a2e      	lsrs	r6, r5, #8
    1eca:	1976      	adds	r6, r6, r5
    1ecc:	701e      	strb	r6, [r3, #0]
	myLongAddress[1] = ((val_1>>16) & 0xFF) + ((val_1)>>24 & 0xFF);
    1ece:	0c2e      	lsrs	r6, r5, #16
    1ed0:	0e2d      	lsrs	r5, r5, #24
    1ed2:	1975      	adds	r5, r6, r5
    1ed4:	705d      	strb	r5, [r3, #1]
	myLongAddress[2] = (val_2 & 0xFF) + ((val_2>>8) & 0xFF);
    1ed6:	0a25      	lsrs	r5, r4, #8
    1ed8:	192d      	adds	r5, r5, r4
    1eda:	709d      	strb	r5, [r3, #2]
	myLongAddress[3] = ((val_2>>16) & 0xFF) + ((val_2)>>24 & 0xFF);
    1edc:	0c25      	lsrs	r5, r4, #16
    1ede:	0e24      	lsrs	r4, r4, #24
    1ee0:	192c      	adds	r4, r5, r4
    1ee2:	70dc      	strb	r4, [r3, #3]
	myLongAddress[4] = (val_3 & 0xFF) + ((val_3>>8) & 0xFF);
    1ee4:	0a0c      	lsrs	r4, r1, #8
    1ee6:	1864      	adds	r4, r4, r1
    1ee8:	711c      	strb	r4, [r3, #4]
	myLongAddress[5] = ((val_3>>16) & 0xFF) + ((val_3)>>24 & 0xFF);
    1eea:	0c0c      	lsrs	r4, r1, #16
    1eec:	0e09      	lsrs	r1, r1, #24
    1eee:	1861      	adds	r1, r4, r1
    1ef0:	7159      	strb	r1, [r3, #5]
	myLongAddress[6] = (val_4 & 0xFF) + ((val_4>>8) & 0xFF);
    1ef2:	0a11      	lsrs	r1, r2, #8
    1ef4:	1889      	adds	r1, r1, r2
    1ef6:	7199      	strb	r1, [r3, #6]
	myLongAddress[7] = ((val_4>>16) & 0xFF) + ((val_4)>>24 & 0xFF);
    1ef8:	0c11      	lsrs	r1, r2, #16
    1efa:	0e12      	lsrs	r2, r2, #24
    1efc:	188a      	adds	r2, r1, r2
    1efe:	71da      	strb	r2, [r3, #7]
	myLongAddress[6] = EUI_6;
	myLongAddress[7] = EUI_7;
	#endif

	
	if (!bNetworkFreezer)
    1f00:	2800      	cmp	r0, #0
    1f02:	d10b      	bne.n	1f1c <MiApp_ProtocolInit+0x70>
    1f04:	4b27      	ldr	r3, [pc, #156]	; (1fa4 <MiApp_ProtocolInit+0xf8>)
    1f06:	0019      	movs	r1, r3
    1f08:	3119      	adds	r1, #25
    1f0a:	31ff      	adds	r1, #255	; 0xff
	{
		for(i = 0; i < CONNECTION_SIZE; i++)
		{
			ConnectionTable[i].status.Val = 0;
    1f0c:	2200      	movs	r2, #0
    1f0e:	721a      	strb	r2, [r3, #8]
			ConnectionTable[i].Address[0] = 0x00;
    1f10:	701a      	strb	r2, [r3, #0]
			ConnectionTable[i].Address[1] = 0x00;
    1f12:	705a      	strb	r2, [r3, #1]
			ConnectionTable[i].Address[2] = 0x00;
    1f14:	709a      	strb	r2, [r3, #2]
    1f16:	330e      	adds	r3, #14
	#endif

	
	if (!bNetworkFreezer)
	{
		for(i = 0; i < CONNECTION_SIZE; i++)
    1f18:	428b      	cmp	r3, r1
    1f1a:	d1f8      	bne.n	1f0e <MiApp_ProtocolInit+0x62>
			permanent_connections[i] = 0x00;
			#endif
		}
	}
	
	TxData = 0;
    1f1c:	2200      	movs	r2, #0
    1f1e:	4b22      	ldr	r3, [pc, #136]	; (1fa8 <MiApp_ProtocolInit+0xfc>)
    1f20:	701a      	strb	r2, [r3, #0]
    1f22:	4b22      	ldr	r3, [pc, #136]	; (1fac <MiApp_ProtocolInit+0x100>)
    1f24:	0019      	movs	r1, r3
    1f26:	3150      	adds	r1, #80	; 0x50
	#endif
	
	#if defined(ENABLE_SECURITY)
	for(i = 0; i < CONNECTION_SIZE; i++)
	{
		IncomingFrameCounter[i].Val = 0;
    1f28:	c304      	stmia	r3!, {r2}
		indirectMessages[i].flags.Val = 0;
	}
	#endif
	
	#if defined(ENABLE_SECURITY)
	for(i = 0; i < CONNECTION_SIZE; i++)
    1f2a:	4299      	cmp	r1, r3
    1f2c:	d1fc      	bne.n	1f28 <MiApp_ProtocolInit+0x7c>
	}
	#endif
	

	#if defined(IEEE_802_15_4)
	myPANID.Val = MY_PAN_ID;
    1f2e:	4c20      	ldr	r4, [pc, #128]	; (1fb0 <MiApp_ProtocolInit+0x104>)
    1f30:	4b20      	ldr	r3, [pc, #128]	; (1fb4 <MiApp_ProtocolInit+0x108>)
    1f32:	8023      	strh	r3, [r4, #0]
	#endif

	
	initValue.PAddress = myLongAddress;
    1f34:	aa02      	add	r2, sp, #8
	initValue.actionFlags.bits.CCAEnable = 1;
    1f36:	7815      	ldrb	r5, [r2, #0]
    1f38:	2302      	movs	r3, #2
    1f3a:	431d      	orrs	r5, r3
	initValue.actionFlags.bits.PAddrLength = MY_ADDRESS_LENGTH;
    1f3c:	2387      	movs	r3, #135	; 0x87
    1f3e:	401d      	ands	r5, r3
    1f40:	2340      	movs	r3, #64	; 0x40
    1f42:	431d      	orrs	r5, r3
	initValue.actionFlags.bits.NetworkFreezer = bNetworkFreezer;
    1f44:	2301      	movs	r3, #1
    1f46:	4018      	ands	r0, r3
    1f48:	0083      	lsls	r3, r0, #2
    1f4a:	21c3      	movs	r1, #195	; 0xc3
    1f4c:	0028      	movs	r0, r5
    1f4e:	4008      	ands	r0, r1
	initValue.actionFlags.bits.RepeaterMode = 0;
    1f50:	4318      	orrs	r0, r3
    1f52:	2301      	movs	r3, #1
    1f54:	4398      	bics	r0, r3
    1f56:	7010      	strb	r0, [r2, #0]

	MiMAC_Init(initValue);
    1f58:	9802      	ldr	r0, [sp, #8]
    1f5a:	4911      	ldr	r1, [pc, #68]	; (1fa0 <MiApp_ProtocolInit+0xf4>)
    1f5c:	4b16      	ldr	r3, [pc, #88]	; (1fb8 <MiApp_ProtocolInit+0x10c>)
    1f5e:	4798      	blx	r3
	

	
	#if defined(IEEE_802_15_4)
	{
		uint16_t tmp = 0xFFFF;
    1f60:	466b      	mov	r3, sp
    1f62:	1d98      	adds	r0, r3, #6
    1f64:	2301      	movs	r3, #1
    1f66:	425b      	negs	r3, r3
    1f68:	8003      	strh	r3, [r0, #0]
		MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    1f6a:	0021      	movs	r1, r4
    1f6c:	4b13      	ldr	r3, [pc, #76]	; (1fbc <MiApp_ProtocolInit+0x110>)
    1f6e:	4798      	blx	r3
	}
	#endif
	
	MiApp_SetChannel(currentChannel);
    1f70:	4b13      	ldr	r3, [pc, #76]	; (1fc0 <MiApp_ProtocolInit+0x114>)
    1f72:	7818      	ldrb	r0, [r3, #0]
    1f74:	4b13      	ldr	r3, [pc, #76]	; (1fc4 <MiApp_ProtocolInit+0x118>)
    1f76:	4798      	blx	r3
	P2PCapacityInfo |= 0x01;
	#endif
	#if defined(ENABLE_SECURITY)
	P2PCapacityInfo |= 0x08;
	#endif
	P2PCapacityInfo |= (ConnMode << 4);
    1f78:	4b13      	ldr	r3, [pc, #76]	; (1fc8 <MiApp_ProtocolInit+0x11c>)
    1f7a:	781b      	ldrb	r3, [r3, #0]
    1f7c:	011b      	lsls	r3, r3, #4
    1f7e:	2209      	movs	r2, #9
    1f80:	4313      	orrs	r3, r2
    1f82:	4a12      	ldr	r2, [pc, #72]	; (1fcc <MiApp_ProtocolInit+0x120>)
    1f84:	7013      	strb	r3, [r2, #0]
	//ENABLE_TRX_IRQ();
	return true;
}
    1f86:	2001      	movs	r0, #1
    1f88:	b004      	add	sp, #16
    1f8a:	bd70      	pop	{r4, r5, r6, pc}
    1f8c:	20000754 	.word	0x20000754
    1f90:	0080a00c 	.word	0x0080a00c
    1f94:	0080a040 	.word	0x0080a040
    1f98:	0080a044 	.word	0x0080a044
    1f9c:	0080a048 	.word	0x0080a048
    1fa0:	20000020 	.word	0x20000020
    1fa4:	200005c4 	.word	0x200005c4
    1fa8:	20000755 	.word	0x20000755
    1fac:	20000700 	.word	0x20000700
    1fb0:	200006f8 	.word	0x200006f8
    1fb4:	00001234 	.word	0x00001234
    1fb8:	00001325 	.word	0x00001325
    1fbc:	00000b99 	.word	0x00000b99
    1fc0:	20000341 	.word	0x20000341
    1fc4:	00001e91 	.word	0x00001e91
    1fc8:	2000001f 	.word	0x2000001f
    1fcc:	200006f5 	.word	0x200006f5

00001fd0 <AddConnection>:
     *                  connection operation ends if an entry is added 
     *                  successfully
     *
     ********************************************************************/
    uint8_t AddConnection(void)
    {
    1fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fd2:	4657      	mov	r7, sl
    1fd4:	464e      	mov	r6, r9
    1fd6:	b4c0      	push	{r6, r7}
    1fd8:	b083      	sub	sp, #12
        {
            // check if the entry is valid
            if( ConnectionTable[i].status.bits.isValid )
            {
                // check if the entry address matches source address of current received packet
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    1fda:	4b32      	ldr	r3, [pc, #200]	; (20a4 <STACK_SIZE+0xa4>)
    1fdc:	685b      	ldr	r3, [r3, #4]
    1fde:	9301      	str	r3, [sp, #4]
    1fe0:	4d31      	ldr	r5, [pc, #196]	; (20a8 <STACK_SIZE+0xa8>)
    1fe2:	2400      	movs	r4, #0
     ********************************************************************/
    uint8_t AddConnection(void)
    {
        uint8_t i;
        uint8_t status = STATUS_SUCCESS;
        uint8_t connectionSlot = 0xFF;
    1fe4:	26ff      	movs	r6, #255	; 0xff
        
        // loop through all entry and locate an proper slot
        for(i = 0; i < CONNECTION_SIZE; i++)
        {
            // check if the entry is valid
            if( ConnectionTable[i].status.bits.isValid )
    1fe6:	4b31      	ldr	r3, [pc, #196]	; (20ac <STACK_SIZE+0xac>)
    1fe8:	4699      	mov	r9, r3
            {
                // check if the entry address matches source address of current received packet
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    1fea:	4b31      	ldr	r3, [pc, #196]	; (20b0 <STACK_SIZE+0xb0>)
    1fec:	469a      	mov	sl, r3
    1fee:	b2e7      	uxtb	r7, r4
        
        // loop through all entry and locate an proper slot
        for(i = 0; i < CONNECTION_SIZE; i++)
        {
            // check if the entry is valid
            if( ConnectionTable[i].status.bits.isValid )
    1ff0:	00e3      	lsls	r3, r4, #3
    1ff2:	1b1b      	subs	r3, r3, r4
    1ff4:	005b      	lsls	r3, r3, #1
    1ff6:	444b      	add	r3, r9
    1ff8:	7b1b      	ldrb	r3, [r3, #12]
    1ffa:	09db      	lsrs	r3, r3, #7
    1ffc:	d005      	beq.n	200a <STACK_SIZE+0xa>
            {
                // check if the entry address matches source address of current received packet
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    1ffe:	0029      	movs	r1, r5
    2000:	9801      	ldr	r0, [sp, #4]
    2002:	47d0      	blx	sl
    2004:	2800      	cmp	r0, #0
    2006:	d003      	beq.n	2010 <STACK_SIZE+0x10>
    2008:	e008      	b.n	201c <STACK_SIZE+0x1c>
                    connectionSlot = i;
                    status = STATUS_EXISTS;
                    break;
                }
            }
            else if( connectionSlot == 0xFF )
    200a:	2eff      	cmp	r6, #255	; 0xff
    200c:	d100      	bne.n	2010 <STACK_SIZE+0x10>
    200e:	003e      	movs	r6, r7
    2010:	3401      	adds	r4, #1
    2012:	350e      	adds	r5, #14
                return STATUS_ACTIVE_SCAN;
            }
        #endif
        
        // loop through all entry and locate an proper slot
        for(i = 0; i < CONNECTION_SIZE; i++)
    2014:	2c14      	cmp	r4, #20
    2016:	d1ea      	bne.n	1fee <AddConnection+0x1e>
     *
     ********************************************************************/
    uint8_t AddConnection(void)
    {
        uint8_t i;
        uint8_t status = STATUS_SUCCESS;
    2018:	2400      	movs	r4, #0
    201a:	e001      	b.n	2020 <STACK_SIZE+0x20>
    201c:	003e      	movs	r6, r7
            {
                // check if the entry address matches source address of current received packet
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
                {
                    connectionSlot = i;
                    status = STATUS_EXISTS;
    201e:	2401      	movs	r4, #1
            }  
        }
            
        if( connectionSlot == 0xFF )
        {
            return STATUS_NOT_ENOUGH_SPACE;
    2020:	20f1      	movs	r0, #241	; 0xf1
                // store the first empty slot
                connectionSlot = i;
            }  
        }
            
        if( connectionSlot == 0xFF )
    2022:	2eff      	cmp	r6, #255	; 0xff
    2024:	d039      	beq.n	209a <STACK_SIZE+0x9a>
        {
            return STATUS_NOT_ENOUGH_SPACE;
        }
        else 
        {
            if( ConnMode >= ENABLE_PREV_CONN )
    2026:	4b23      	ldr	r3, [pc, #140]	; (20b4 <STACK_SIZE+0xb4>)
    2028:	781b      	ldrb	r3, [r3, #0]
            {
                return status;
    202a:	0020      	movs	r0, r4
        {
            return STATUS_NOT_ENOUGH_SPACE;
        }
        else 
        {
            if( ConnMode >= ENABLE_PREV_CONN )
    202c:	2b00      	cmp	r3, #0
    202e:	d134      	bne.n	209a <STACK_SIZE+0x9a>
            {
                return status;
            }
            MyindexinPC = connectionSlot;    
    2030:	4b21      	ldr	r3, [pc, #132]	; (20b8 <STACK_SIZE+0xb8>)
    2032:	701e      	strb	r6, [r3, #0]
    2034:	9d01      	ldr	r5, [sp, #4]
    2036:	002b      	movs	r3, r5
    2038:	00f2      	lsls	r2, r6, #3
    203a:	1b92      	subs	r2, r2, r6
    203c:	0052      	lsls	r2, r2, #1
    203e:	1d11      	adds	r1, r2, #4
    2040:	4a1a      	ldr	r2, [pc, #104]	; (20ac <STACK_SIZE+0xac>)
    2042:	188a      	adds	r2, r1, r2
    2044:	3508      	adds	r5, #8
            // store the source address
            for(i = 0; i < 8; i++)
            {
                ConnectionTable[connectionSlot].Address[i] = rxMessage.SourceAddress[i];
    2046:	7819      	ldrb	r1, [r3, #0]
    2048:	7011      	strb	r1, [r2, #0]
    204a:	3301      	adds	r3, #1
    204c:	3201      	adds	r2, #1
            {
                return status;
            }
            MyindexinPC = connectionSlot;    
            // store the source address
            for(i = 0; i < 8; i++)
    204e:	42ab      	cmp	r3, r5
    2050:	d1f9      	bne.n	2046 <STACK_SIZE+0x46>
            {
                ConnectionTable[connectionSlot].Address[i] = rxMessage.SourceAddress[i];
            }
            
            // store the capacity info and validate the entry
            ConnectionTable[connectionSlot].status.bits.isValid = 1;
    2052:	00f3      	lsls	r3, r6, #3
    2054:	1b9b      	subs	r3, r3, r6
    2056:	005b      	lsls	r3, r3, #1
    2058:	4a14      	ldr	r2, [pc, #80]	; (20ac <STACK_SIZE+0xac>)
    205a:	18d3      	adds	r3, r2, r3
    205c:	7b1a      	ldrb	r2, [r3, #12]
    205e:	2180      	movs	r1, #128	; 0x80
    2060:	4249      	negs	r1, r1
    2062:	430a      	orrs	r2, r1
    2064:	731a      	strb	r2, [r3, #12]
            ConnectionTable[connectionSlot].status.bits.RXOnWhenIdle = (rxMessage.Payload[2] & 0x01);
    2066:	4a0f      	ldr	r2, [pc, #60]	; (20a4 <STACK_SIZE+0xa4>)
    2068:	6892      	ldr	r2, [r2, #8]
    206a:	7892      	ldrb	r2, [r2, #2]
    206c:	3181      	adds	r1, #129	; 0x81
    206e:	4011      	ands	r1, r2
    2070:	7b1a      	ldrb	r2, [r3, #12]
    2072:	2501      	movs	r5, #1
    2074:	43aa      	bics	r2, r5
    2076:	430a      	orrs	r2, r1
    2078:	731a      	strb	r2, [r3, #12]
                }
            #endif
    
            #ifdef ENABLE_SECURITY
                // if security is enabled, clear the incoming frame control
                IncomingFrameCounter[connectionSlot].Val = 0;
    207a:	00b0      	lsls	r0, r6, #2
    207c:	2200      	movs	r2, #0
    207e:	4b0f      	ldr	r3, [pc, #60]	; (20bc <STACK_SIZE+0xbc>)
    2080:	50c2      	str	r2, [r0, r3]
            #endif
            LatestConnection = connectionSlot;
    2082:	4b0f      	ldr	r3, [pc, #60]	; (20c0 <STACK_SIZE+0xc0>)
    2084:	701e      	strb	r6, [r3, #0]
            P2PStatus.bits.SearchConnection = 0;   
    2086:	4a0f      	ldr	r2, [pc, #60]	; (20c4 <STACK_SIZE+0xc4>)
    2088:	7813      	ldrb	r3, [r2, #0]
    208a:	2110      	movs	r1, #16
    208c:	438b      	bics	r3, r1
    208e:	7013      	strb	r3, [r2, #0]
        }
        conn_size = Total_Connections();
    2090:	4b0d      	ldr	r3, [pc, #52]	; (20c8 <STACK_SIZE+0xc8>)
    2092:	4798      	blx	r3
    2094:	4b0d      	ldr	r3, [pc, #52]	; (20cc <STACK_SIZE+0xcc>)
    2096:	7018      	strb	r0, [r3, #0]
    #if defined (ENABLE_NETWORK_FREEZER)
        nvmPutMyDC(&conn_size);
    #endif

        return status;
    2098:	0020      	movs	r0, r4
    }
    209a:	b003      	add	sp, #12
    209c:	bc0c      	pop	{r2, r3}
    209e:	4691      	mov	r9, r2
    20a0:	469a      	mov	sl, r3
    20a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20a4:	200007d8 	.word	0x200007d8
    20a8:	200005c4 	.word	0x200005c4
    20ac:	200005c0 	.word	0x200005c0
    20b0:	00001df1 	.word	0x00001df1
    20b4:	2000001f 	.word	0x2000001f
    20b8:	20000750 	.word	0x20000750
    20bc:	20000700 	.word	0x20000700
    20c0:	200005bd 	.word	0x200005bd
    20c4:	20000754 	.word	0x20000754
    20c8:	00001971 	.word	0x00001971
    20cc:	200006fb 	.word	0x200006fb

000020d0 <P2PTasks>:
 * Side Effects:    The stack receives, handles, buffers, and transmits 
 *                  packets.  It also handles all of the joining 
 * 
 ********************************************************************/
void P2PTasks(void)
{
    20d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    20d2:	4647      	mov	r7, r8
    20d4:	b480      	push	{r7}
    20d6:	b086      	sub	sp, #24
    MIWI_TICK   tmpTick;
            


    #if defined(PROTOCOL_STAR) 
        tick2 = MiWi_TickGet();
    20d8:	4cc8      	ldr	r4, [pc, #800]	; (23fc <P2PTasks+0x32c>)
    20da:	47a0      	blx	r4
    20dc:	4bc8      	ldr	r3, [pc, #800]	; (2400 <P2PTasks+0x330>)
    20de:	6018      	str	r0, [r3, #0]
        tick3 = MiWi_TickGet();
    20e0:	47a0      	blx	r4
    20e2:	4bc8      	ldr	r3, [pc, #800]	; (2404 <P2PTasks+0x334>)
    20e4:	6018      	str	r0, [r3, #0]
            TimeSyncSlot = 0;
        }    
    #endif

  // Check if transceiver receive any message.
    if( P2PStatus.bits.RxHasUserData == 0 && MiMAC_ReceivedPacket() )
    20e6:	4bc8      	ldr	r3, [pc, #800]	; (2408 <P2PTasks+0x338>)
    20e8:	781b      	ldrb	r3, [r3, #0]
    20ea:	071b      	lsls	r3, r3, #28
    20ec:	d500      	bpl.n	20f0 <P2PTasks+0x20>
    20ee:	e212      	b.n	2516 <P2PTasks+0x446>
    20f0:	4bc6      	ldr	r3, [pc, #792]	; (240c <P2PTasks+0x33c>)
    20f2:	4798      	blx	r3
    20f4:	2800      	cmp	r0, #0
    20f6:	d100      	bne.n	20fa <P2PTasks+0x2a>
    20f8:	e20d      	b.n	2516 <P2PTasks+0x446>
    {
        rxMessage.flags.Val = 0;
        //rxMessage.flags.bits.broadcast = MACRxPacket.flags.bits.broadcast;
        
            temp_bit = MACRxPacket.flags.bits.broadcast;
    20fa:	4bc5      	ldr	r3, [pc, #788]	; (2410 <P2PTasks+0x340>)
    20fc:	7819      	ldrb	r1, [r3, #0]
    20fe:	074a      	lsls	r2, r1, #29
    2100:	0fd2      	lsrs	r2, r2, #31
    2102:	4bc4      	ldr	r3, [pc, #784]	; (2414 <P2PTasks+0x344>)
    2104:	701a      	strb	r2, [r3, #0]
            rxMessage.flags.bits.broadcast = temp_bit;
    2106:	2303      	movs	r3, #3

        rxMessage.flags.bits.secEn = MACRxPacket.flags.bits.secEn;
    2108:	08cc      	lsrs	r4, r1, #3
    210a:	2501      	movs	r5, #1
    210c:	402c      	ands	r4, r5
    210e:	00e4      	lsls	r4, r4, #3
    2110:	0010      	movs	r0, r2
    2112:	4018      	ands	r0, r3
        rxMessage.flags.bits.command = (MACRxPacket.flags.bits.packetType == PACKET_TYPE_COMMAND) ? 1:0;
    2114:	400b      	ands	r3, r1
    2116:	001a      	movs	r2, r3
    2118:	3a01      	subs	r2, #1
    211a:	4253      	negs	r3, r2
    211c:	415a      	adcs	r2, r3
    211e:	402a      	ands	r2, r5
    2120:	0152      	lsls	r2, r2, #5
    2122:	0003      	movs	r3, r0
    2124:	4323      	orrs	r3, r4
        rxMessage.flags.bits.srcPrsnt = MACRxPacket.flags.bits.sourcePrsnt;
    2126:	09c8      	lsrs	r0, r1, #7
    2128:	4028      	ands	r0, r5
    212a:	0180      	lsls	r0, r0, #6
    212c:	4313      	orrs	r3, r2
    212e:	4303      	orrs	r3, r0
    2130:	4ab9      	ldr	r2, [pc, #740]	; (2418 <P2PTasks+0x348>)
    2132:	7013      	strb	r3, [r2, #0]
        if( MACRxPacket.flags.bits.sourcePrsnt )
    2134:	09c9      	lsrs	r1, r1, #7
    2136:	d003      	beq.n	2140 <P2PTasks+0x70>
        {
            rxMessage.SourceAddress = MACRxPacket.SourceAddress;
    2138:	4bb5      	ldr	r3, [pc, #724]	; (2410 <P2PTasks+0x340>)
    213a:	685a      	ldr	r2, [r3, #4]
    213c:	4bb6      	ldr	r3, [pc, #728]	; (2418 <P2PTasks+0x348>)
    213e:	605a      	str	r2, [r3, #4]
        }
        #if defined(IEEE_802_15_4) && !defined(TARGET_SMALL)
            rxMessage.SourcePANID.Val = MACRxPacket.SourcePANID.Val;
    2140:	4ab3      	ldr	r2, [pc, #716]	; (2410 <P2PTasks+0x340>)
    2142:	8a10      	ldrh	r0, [r2, #16]
    2144:	4bb4      	ldr	r3, [pc, #720]	; (2418 <P2PTasks+0x348>)
    2146:	8058      	strh	r0, [r3, #2]
        #endif

        rxMessage.PayloadSize = MACRxPacket.PayloadLen;
    2148:	7b11      	ldrb	r1, [r2, #12]
    214a:	7319      	strb	r1, [r3, #12]
        rxMessage.Payload = MACRxPacket.Payload;
    214c:	6894      	ldr	r4, [r2, #8]
    214e:	609c      	str	r4, [r3, #8]
               
        
        /************************/
      
        #ifndef TARGET_SMALL
            rxMessage.PacketLQI = MACRxPacket.LQIValue;
    2150:	7b95      	ldrb	r5, [r2, #14]
    2152:	739d      	strb	r5, [r3, #14]
            rxMessage.PacketRSSI = MACRxPacket.RSSIValue;
    2154:	7b52      	ldrb	r2, [r2, #13]
    2156:	735a      	strb	r2, [r3, #13]
        #endif

        if( rxMessage.flags.bits.command )
    2158:	781b      	ldrb	r3, [r3, #0]
    215a:	069b      	lsls	r3, r3, #26
    215c:	d400      	bmi.n	2160 <P2PTasks+0x90>
    215e:	e1ac      	b.n	24ba <P2PTasks+0x3ea>
        {
            // if comes here, we know it is a command frame
            switch( rxMessage.Payload[0] )
    2160:	7823      	ldrb	r3, [r4, #0]
    2162:	b2da      	uxtb	r2, r3
    2164:	2a91      	cmp	r2, #145	; 0x91
    2166:	d100      	bne.n	216a <P2PTasks+0x9a>
    2168:	e0da      	b.n	2320 <P2PTasks+0x250>
    216a:	d80d      	bhi.n	2188 <P2PTasks+0xb8>
    216c:	2a81      	cmp	r2, #129	; 0x81
    216e:	d01c      	beq.n	21aa <P2PTasks+0xda>
    2170:	d803      	bhi.n	217a <P2PTasks+0xaa>
    2172:	2b77      	cmp	r3, #119	; 0x77
    2174:	d100      	bne.n	2178 <P2PTasks+0xa8>
    2176:	e130      	b.n	23da <P2PTasks+0x30a>
    2178:	e199      	b.n	24ae <P2PTasks+0x3de>
    217a:	b2da      	uxtb	r2, r3
    217c:	2a82      	cmp	r2, #130	; 0x82
    217e:	d100      	bne.n	2182 <P2PTasks+0xb2>
    2180:	e086      	b.n	2290 <P2PTasks+0x1c0>
    2182:	2a87      	cmp	r2, #135	; 0x87
    2184:	d05e      	beq.n	2244 <P2PTasks+0x174>
    2186:	e192      	b.n	24ae <P2PTasks+0x3de>
    2188:	b2da      	uxtb	r2, r3
    218a:	2a97      	cmp	r2, #151	; 0x97
    218c:	d100      	bne.n	2190 <P2PTasks+0xc0>
    218e:	e0e4      	b.n	235a <P2PTasks+0x28a>
    2190:	d803      	bhi.n	219a <P2PTasks+0xca>
    2192:	2a92      	cmp	r2, #146	; 0x92
    2194:	d100      	bne.n	2198 <P2PTasks+0xc8>
    2196:	e0ec      	b.n	2372 <P2PTasks+0x2a2>
    2198:	e189      	b.n	24ae <P2PTasks+0x3de>
    219a:	b2da      	uxtb	r2, r3
    219c:	2acc      	cmp	r2, #204	; 0xcc
    219e:	d100      	bne.n	21a2 <P2PTasks+0xd2>
    21a0:	e166      	b.n	2470 <P2PTasks+0x3a0>
    21a2:	2ada      	cmp	r2, #218	; 0xda
    21a4:	d100      	bne.n	21a8 <P2PTasks+0xd8>
    21a6:	e10b      	b.n	23c0 <P2PTasks+0x2f0>
    21a8:	e181      	b.n	24ae <P2PTasks+0x3de>
                #if defined(ENABLE_HAND_SHAKE)
              
					 case CMD_P2P_CONNECTION_REQUEST:
					 {
						 #if defined(PROTOCOL_STAR)
						 if(role == PanCoordinator)   // Important if implementing a star network
    21aa:	4b9c      	ldr	r3, [pc, #624]	; (241c <P2PTasks+0x34c>)
    21ac:	781b      	ldrb	r3, [r3, #0]
    21ae:	2b00      	cmp	r3, #0
    21b0:	d000      	beq.n	21b4 <P2PTasks+0xe4>
    21b2:	e187      	b.n	24c4 <P2PTasks+0x3f4>
		 
							 uint8_t status = STATUS_SUCCESS;
		 
							 // if channel does not math, it may be a
							 // sub-harmonics signal, ignore the request
							 if( currentChannel != rxMessage.Payload[1] )
    21b4:	7862      	ldrb	r2, [r4, #1]
    21b6:	4b9a      	ldr	r3, [pc, #616]	; (2420 <P2PTasks+0x350>)
    21b8:	781b      	ldrb	r3, [r3, #0]
    21ba:	429a      	cmp	r2, r3
    21bc:	d002      	beq.n	21c4 <P2PTasks+0xf4>
							 {
								 MiMAC_DiscardPacket();
    21be:	4b99      	ldr	r3, [pc, #612]	; (2424 <P2PTasks+0x354>)
    21c0:	4798      	blx	r3
								 break;
    21c2:	e17f      	b.n	24c4 <P2PTasks+0x3f4>
							 }
		 
							 // if new connection is not allowed, ignore
							 // the request
							 if( ConnMode == DISABLE_ALL_CONN )
    21c4:	4b98      	ldr	r3, [pc, #608]	; (2428 <P2PTasks+0x358>)
    21c6:	781b      	ldrb	r3, [r3, #0]
    21c8:	2b03      	cmp	r3, #3
    21ca:	d102      	bne.n	21d2 <P2PTasks+0x102>
							 {
								 MiMAC_DiscardPacket();
    21cc:	4b95      	ldr	r3, [pc, #596]	; (2424 <P2PTasks+0x354>)
    21ce:	4798      	blx	r3
								 break;
    21d0:	e178      	b.n	24c4 <P2PTasks+0x3f4>
							 }
		 
							 #if !defined(TARGET_SMALL) && defined(IEEE_802_15_4)
							 // if PANID does not match, ignore the request
							 if( rxMessage.SourcePANID.Val != 0xFFFF &&
    21d2:	4b96      	ldr	r3, [pc, #600]	; (242c <P2PTasks+0x35c>)
    21d4:	4298      	cmp	r0, r3
    21d6:	d006      	beq.n	21e6 <P2PTasks+0x116>
							 rxMessage.SourcePANID.Val != myPANID.Val &&
    21d8:	4b95      	ldr	r3, [pc, #596]	; (2430 <P2PTasks+0x360>)
								 break;
							 }
		 
							 #if !defined(TARGET_SMALL) && defined(IEEE_802_15_4)
							 // if PANID does not match, ignore the request
							 if( rxMessage.SourcePANID.Val != 0xFFFF &&
    21da:	881b      	ldrh	r3, [r3, #0]
    21dc:	4283      	cmp	r3, r0
    21de:	d002      	beq.n	21e6 <P2PTasks+0x116>
							 rxMessage.SourcePANID.Val != myPANID.Val &&
    21e0:	2902      	cmp	r1, #2
    21e2:	d900      	bls.n	21e6 <P2PTasks+0x116>
    21e4:	e18e      	b.n	2504 <P2PTasks+0x434>
							 else
							 #endif
							 {
								 // request accepted, try to add the requesting
								 // device into P2P Connection Entry
								 status = AddConnection();
    21e6:	4b93      	ldr	r3, [pc, #588]	; (2434 <P2PTasks+0x364>)
    21e8:	4798      	blx	r3
    21ea:	0002      	movs	r2, r0
									 }

								 }
							 }
							 #endif
							 if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    21ec:	4b8e      	ldr	r3, [pc, #568]	; (2428 <P2PTasks+0x358>)
    21ee:	781b      	ldrb	r3, [r3, #0]
    21f0:	2b01      	cmp	r3, #1
    21f2:	d104      	bne.n	21fe <P2PTasks+0x12e>
    21f4:	3801      	subs	r0, #1
    21f6:	b2c0      	uxtb	r0, r0
    21f8:	2801      	cmp	r0, #1
    21fa:	d900      	bls.n	21fe <P2PTasks+0x12e>
    21fc:	e176      	b.n	24ec <P2PTasks+0x41c>
							 }
		 
		 
							 // prepare the P2P_CONNECTION_RESPONSE command
							 MiApp_FlushTx();
							 MiApp_WriteData(CMD_P2P_CONNECTION_RESPONSE);
    21fe:	4b8e      	ldr	r3, [pc, #568]	; (2438 <P2PTasks+0x368>)
    2200:	2191      	movs	r1, #145	; 0x91
    2202:	7019      	strb	r1, [r3, #0]
							 MiApp_WriteData(status);
    2204:	705a      	strb	r2, [r3, #1]
							 MiApp_WriteData(MyindexinPC);
    2206:	2003      	movs	r0, #3
    2208:	498c      	ldr	r1, [pc, #560]	; (243c <P2PTasks+0x36c>)
    220a:	7008      	strb	r0, [r1, #0]
    220c:	498c      	ldr	r1, [pc, #560]	; (2440 <P2PTasks+0x370>)
    220e:	7809      	ldrb	r1, [r1, #0]
    2210:	7099      	strb	r1, [r3, #2]
							 if( status == STATUS_SUCCESS ||
    2212:	2a01      	cmp	r2, #1
    2214:	d806      	bhi.n	2224 <P2PTasks+0x154>
							 status == STATUS_EXISTS )
							 {
								 MiApp_WriteData(P2PCapacityInfo);
    2216:	2204      	movs	r2, #4
    2218:	4b88      	ldr	r3, [pc, #544]	; (243c <P2PTasks+0x36c>)
    221a:	701a      	strb	r2, [r3, #0]
    221c:	4b89      	ldr	r3, [pc, #548]	; (2444 <P2PTasks+0x374>)
    221e:	781a      	ldrb	r2, [r3, #0]
    2220:	4b85      	ldr	r3, [pc, #532]	; (2438 <P2PTasks+0x368>)
    2222:	70da      	strb	r2, [r3, #3]
									 MiApp_WriteData(0x00);
								 }
								 #endif
							 }
		 
							 MiMAC_DiscardPacket();
    2224:	4b7f      	ldr	r3, [pc, #508]	; (2424 <P2PTasks+0x354>)
    2226:	4798      	blx	r3
							 SendPacket(false, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
							 #endif
							 #else
		 
							 #if defined(IEEE_802_15_4)
							 SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
    2228:	4b7b      	ldr	r3, [pc, #492]	; (2418 <P2PTasks+0x348>)
    222a:	685a      	ldr	r2, [r3, #4]
    222c:	8859      	ldrh	r1, [r3, #2]
    222e:	781b      	ldrb	r3, [r3, #0]
    2230:	071b      	lsls	r3, r3, #28
    2232:	0fdb      	lsrs	r3, r3, #31
    2234:	9300      	str	r3, [sp, #0]
    2236:	2301      	movs	r3, #1
    2238:	2000      	movs	r0, #0
    223a:	4c83      	ldr	r4, [pc, #524]	; (2448 <P2PTasks+0x378>)
    223c:	47a0      	blx	r4
							 SendPacket(false, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
							 #endif
							 #endif

							 #if defined(PROTOCOL_STAR)
							 MiApp_BroadcastConnectionTable ();  // Broad Cast the CT on join
    223e:	4b83      	ldr	r3, [pc, #524]	; (244c <P2PTasks+0x37c>)
    2240:	4798      	blx	r3
    2242:	e13f      	b.n	24c4 <P2PTasks+0x3f4>
					 }
					 break;
               
                    case CMD_P2P_ACTIVE_SCAN_REQUEST:
                        {
                            if(ConnMode > ENABLE_ACTIVE_SCAN_RSP)
    2244:	4b78      	ldr	r3, [pc, #480]	; (2428 <P2PTasks+0x358>)
    2246:	781b      	ldrb	r3, [r3, #0]
    2248:	2b02      	cmp	r3, #2
    224a:	d902      	bls.n	2252 <P2PTasks+0x182>
                            {
                                MiMAC_DiscardPacket();
    224c:	4b75      	ldr	r3, [pc, #468]	; (2424 <P2PTasks+0x354>)
    224e:	4798      	blx	r3
                                break;
    2250:	e138      	b.n	24c4 <P2PTasks+0x3f4>
                            }
                            if( currentChannel != rxMessage.Payload[1] )
    2252:	7862      	ldrb	r2, [r4, #1]
    2254:	4b72      	ldr	r3, [pc, #456]	; (2420 <P2PTasks+0x350>)
    2256:	781b      	ldrb	r3, [r3, #0]
    2258:	429a      	cmp	r2, r3
    225a:	d002      	beq.n	2262 <P2PTasks+0x192>
                            {
                                MiMAC_DiscardPacket();
    225c:	4b71      	ldr	r3, [pc, #452]	; (2424 <P2PTasks+0x354>)
    225e:	4798      	blx	r3
                                break;
    2260:	e130      	b.n	24c4 <P2PTasks+0x3f4>
                            }
                            
                            MiApp_FlushTx();
                            MiApp_WriteData(CMD_P2P_ACTIVE_SCAN_RESPONSE);
    2262:	4b75      	ldr	r3, [pc, #468]	; (2438 <P2PTasks+0x368>)
    2264:	2297      	movs	r2, #151	; 0x97
    2266:	701a      	strb	r2, [r3, #0]
                            MiApp_WriteData(P2PCapacityInfo);
    2268:	2102      	movs	r1, #2
    226a:	4a74      	ldr	r2, [pc, #464]	; (243c <P2PTasks+0x36c>)
    226c:	7011      	strb	r1, [r2, #0]
    226e:	4a75      	ldr	r2, [pc, #468]	; (2444 <P2PTasks+0x374>)
    2270:	7812      	ldrb	r2, [r2, #0]
    2272:	705a      	strb	r2, [r3, #1]
                                for(i = 0; i < ADDITIONAL_NODE_ID_SIZE; i++)
                                {
                                    MiApp_WriteData(AdditionalNodeID[i]);
                                }
                            #endif
                            MiMAC_DiscardPacket();
    2274:	4b6b      	ldr	r3, [pc, #428]	; (2424 <P2PTasks+0x354>)
    2276:	4798      	blx	r3
                                #else
                                    SendPacket(false, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
                                #endif
                            #else
                                #if defined(IEEE_802_15_4)
                                    SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
    2278:	4b67      	ldr	r3, [pc, #412]	; (2418 <P2PTasks+0x348>)
    227a:	685a      	ldr	r2, [r3, #4]
    227c:	8859      	ldrh	r1, [r3, #2]
    227e:	781b      	ldrb	r3, [r3, #0]
    2280:	071b      	lsls	r3, r3, #28
    2282:	0fdb      	lsrs	r3, r3, #31
    2284:	9300      	str	r3, [sp, #0]
    2286:	2301      	movs	r3, #1
    2288:	2000      	movs	r0, #0
    228a:	4c6f      	ldr	r4, [pc, #444]	; (2448 <P2PTasks+0x378>)
    228c:	47a0      	blx	r4
                                #else
                                    SendPacket(false, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
                                #endif
                            #endif
                        }
                        break;
    228e:	e119      	b.n	24c4 <P2PTasks+0x3f4>
                    
                    #ifndef TARGET_SMALL    
                    case CMD_P2P_CONNECTION_REMOVAL_REQUEST:
                        {         
                            MiApp_FlushTx();
                            MiApp_WriteData(CMD_P2P_CONNECTION_REMOVAL_RESPONSE);
    2290:	2201      	movs	r2, #1
    2292:	4b6a      	ldr	r3, [pc, #424]	; (243c <P2PTasks+0x36c>)
    2294:	701a      	strb	r2, [r3, #0]
    2296:	3291      	adds	r2, #145	; 0x91
    2298:	4b67      	ldr	r3, [pc, #412]	; (2438 <P2PTasks+0x368>)
    229a:	701a      	strb	r2, [r3, #0]
                            {
                                // if the record is valid
                                if( ConnectionTable[i].status.bits.isValid )
                                {
                                    // if the record is the same as the requesting device
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    229c:	4b5e      	ldr	r3, [pc, #376]	; (2418 <P2PTasks+0x348>)
    229e:	685b      	ldr	r3, [r3, #4]
    22a0:	9303      	str	r3, [sp, #12]
    22a2:	4e6b      	ldr	r6, [pc, #428]	; (2450 <P2PTasks+0x380>)
    22a4:	2400      	movs	r4, #0
                    case CMD_P2P_CONNECTION_REMOVAL_REQUEST:
                        {         
                            MiApp_FlushTx();
                            MiApp_WriteData(CMD_P2P_CONNECTION_REMOVAL_RESPONSE);

                            for(i = 0; i < CONNECTION_SIZE; i++)
    22a6:	2700      	movs	r7, #0
                            {
                                // if the record is valid
                                if( ConnectionTable[i].status.bits.isValid )
    22a8:	4d6a      	ldr	r5, [pc, #424]	; (2454 <P2PTasks+0x384>)
                                {
                                    // if the record is the same as the requesting device
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    22aa:	4b6b      	ldr	r3, [pc, #428]	; (2458 <P2PTasks+0x388>)
    22ac:	4698      	mov	r8, r3
                            MiApp_WriteData(CMD_P2P_CONNECTION_REMOVAL_RESPONSE);

                            for(i = 0; i < CONNECTION_SIZE; i++)
                            {
                                // if the record is valid
                                if( ConnectionTable[i].status.bits.isValid )
    22ae:	9402      	str	r4, [sp, #8]
    22b0:	00e3      	lsls	r3, r4, #3
    22b2:	1b1b      	subs	r3, r3, r4
    22b4:	005b      	lsls	r3, r3, #1
    22b6:	18eb      	adds	r3, r5, r3
    22b8:	7b1b      	ldrb	r3, [r3, #12]
    22ba:	09db      	lsrs	r3, r3, #7
    22bc:	d016      	beq.n	22ec <P2PTasks+0x21c>
                                {
                                    // if the record is the same as the requesting device
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    22be:	0031      	movs	r1, r6
    22c0:	9803      	ldr	r0, [sp, #12]
    22c2:	47c0      	blx	r8
    22c4:	2800      	cmp	r0, #0
    22c6:	d011      	beq.n	22ec <P2PTasks+0x21c>
                                    {
                                        // find the record. disable the record and
                                        // set status to be SUCCESS
                                        ConnectionTable[i].status.Val = 0;
    22c8:	9a02      	ldr	r2, [sp, #8]
    22ca:	00d3      	lsls	r3, r2, #3
    22cc:	1a9d      	subs	r5, r3, r2
    22ce:	006d      	lsls	r5, r5, #1
    22d0:	4b60      	ldr	r3, [pc, #384]	; (2454 <P2PTasks+0x384>)
    22d2:	195d      	adds	r5, r3, r5
    22d4:	2300      	movs	r3, #0
    22d6:	732b      	strb	r3, [r5, #12]
                                        #if defined(ENABLE_NETWORK_FREEZER)
                                            nvmPutConnectionTableIndex(&(ConnectionTable[i]), i);
                                        #endif
                                        MiApp_WriteData(STATUS_SUCCESS);
    22d8:	2102      	movs	r1, #2
    22da:	4a58      	ldr	r2, [pc, #352]	; (243c <P2PTasks+0x36c>)
    22dc:	7011      	strb	r1, [r2, #0]
    22de:	4a56      	ldr	r2, [pc, #344]	; (2438 <P2PTasks+0x368>)
    22e0:	7053      	strb	r3, [r2, #1]
                                        break;
                                    }
                                } 
                            }

                            MiMAC_DiscardPacket();
    22e2:	4b50      	ldr	r3, [pc, #320]	; (2424 <P2PTasks+0x354>)
    22e4:	4798      	blx	r3

                            if( i == CONNECTION_SIZE ) 
    22e6:	2f14      	cmp	r7, #20
    22e8:	d10e      	bne.n	2308 <P2PTasks+0x238>
    22ea:	e006      	b.n	22fa <P2PTasks+0x22a>
                    case CMD_P2P_CONNECTION_REMOVAL_REQUEST:
                        {         
                            MiApp_FlushTx();
                            MiApp_WriteData(CMD_P2P_CONNECTION_REMOVAL_RESPONSE);

                            for(i = 0; i < CONNECTION_SIZE; i++)
    22ec:	3701      	adds	r7, #1
    22ee:	b2ff      	uxtb	r7, r7
    22f0:	3401      	adds	r4, #1
    22f2:	360e      	adds	r6, #14
    22f4:	2f14      	cmp	r7, #20
    22f6:	d1da      	bne.n	22ae <P2PTasks+0x1de>
    22f8:	e10a      	b.n	2510 <P2PTasks+0x440>
                            MiMAC_DiscardPacket();

                            if( i == CONNECTION_SIZE ) 
                            {
                                // not found, the requesting device is not my peer
                                MiApp_WriteData(STATUS_ENTRY_NOT_EXIST);
    22fa:	4a50      	ldr	r2, [pc, #320]	; (243c <P2PTasks+0x36c>)
    22fc:	7813      	ldrb	r3, [r2, #0]
    22fe:	1c59      	adds	r1, r3, #1
    2300:	7011      	strb	r1, [r2, #0]
    2302:	21f0      	movs	r1, #240	; 0xf0
    2304:	4a4c      	ldr	r2, [pc, #304]	; (2438 <P2PTasks+0x368>)
    2306:	54d1      	strb	r1, [r2, r3]
                                #else
                                    SendPacket(false, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
                                #endif
                            #else
                                #if defined(IEEE_802_15_4)
                                    SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
    2308:	4b43      	ldr	r3, [pc, #268]	; (2418 <P2PTasks+0x348>)
    230a:	685a      	ldr	r2, [r3, #4]
    230c:	8859      	ldrh	r1, [r3, #2]
    230e:	781b      	ldrb	r3, [r3, #0]
    2310:	071b      	lsls	r3, r3, #28
    2312:	0fdb      	lsrs	r3, r3, #31
    2314:	9300      	str	r3, [sp, #0]
    2316:	2301      	movs	r3, #1
    2318:	2000      	movs	r0, #0
    231a:	4c4b      	ldr	r4, [pc, #300]	; (2448 <P2PTasks+0x378>)
    231c:	47a0      	blx	r4
                                    SendPacket(false, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
                                #endif
                            #endif

                        }
                            break;
    231e:	e0d1      	b.n	24c4 <P2PTasks+0x3f4>
                    #endif
                    
                    case CMD_P2P_CONNECTION_RESPONSE:
                        {
                            switch( rxMessage.Payload[1] )
    2320:	7863      	ldrb	r3, [r4, #1]
    2322:	2b01      	cmp	r3, #1
    2324:	d816      	bhi.n	2354 <P2PTasks+0x284>
                            {              
                                case STATUS_SUCCESS:
                                case STATUS_EXISTS:
                                    #if defined(IEEE_802_15_4)
                                        if( myPANID.Val == 0xFFFF )
    2326:	4b42      	ldr	r3, [pc, #264]	; (2430 <P2PTasks+0x360>)
    2328:	881a      	ldrh	r2, [r3, #0]
    232a:	4b40      	ldr	r3, [pc, #256]	; (242c <P2PTasks+0x35c>)
    232c:	429a      	cmp	r2, r3
    232e:	d10a      	bne.n	2346 <P2PTasks+0x276>
                                        {
                                            myPANID.Val = rxMessage.SourcePANID.Val;
    2330:	493f      	ldr	r1, [pc, #252]	; (2430 <P2PTasks+0x360>)
    2332:	8008      	strh	r0, [r1, #0]
                                            {
                                                uint16_t tmp = 0xFFFF;
    2334:	200e      	movs	r0, #14
    2336:	ab02      	add	r3, sp, #8
    2338:	469c      	mov	ip, r3
    233a:	4460      	add	r0, ip
    233c:	2301      	movs	r3, #1
    233e:	425b      	negs	r3, r3
    2340:	8003      	strh	r3, [r0, #0]
                                                MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    2342:	4b46      	ldr	r3, [pc, #280]	; (245c <P2PTasks+0x38c>)
    2344:	4798      	blx	r3
                                            #if defined(ENABLE_NETWORK_FREEZER)
                                                nvmPutMyPANID(myPANID.v);
                                            #endif
                                        }
                                    #endif
                                    AddConnection();
    2346:	4b3b      	ldr	r3, [pc, #236]	; (2434 <P2PTasks+0x364>)
    2348:	4798      	blx	r3
                                    #if defined(PROTOCOL_STAR)
                                        myConnectionIndex_in_PanCo = rxMessage.Payload[2];
    234a:	4b33      	ldr	r3, [pc, #204]	; (2418 <P2PTasks+0x348>)
    234c:	689b      	ldr	r3, [r3, #8]
    234e:	789a      	ldrb	r2, [r3, #2]
    2350:	4b43      	ldr	r3, [pc, #268]	; (2460 <P2PTasks+0x390>)
    2352:	701a      	strb	r2, [r3, #0]
                                    break;
                                default:
                                    break;
                            }                        
                        }
                        MiMAC_DiscardPacket();
    2354:	4b33      	ldr	r3, [pc, #204]	; (2424 <P2PTasks+0x354>)
    2356:	4798      	blx	r3
                        break; 
    2358:	e0b4      	b.n	24c4 <P2PTasks+0x3f4>
                    
                    
                    case CMD_P2P_ACTIVE_SCAN_RESPONSE:
                        {
                            if( P2PStatus.bits.Resync )
    235a:	4b2b      	ldr	r3, [pc, #172]	; (2408 <P2PTasks+0x338>)
    235c:	781b      	ldrb	r3, [r3, #0]
    235e:	069b      	lsls	r3, r3, #26
    2360:	d504      	bpl.n	236c <P2PTasks+0x29c>
                            {
                                P2PStatus.bits.Resync = 0;   
    2362:	4a29      	ldr	r2, [pc, #164]	; (2408 <P2PTasks+0x338>)
    2364:	7813      	ldrb	r3, [r2, #0]
    2366:	2120      	movs	r1, #32
    2368:	438b      	bics	r3, r1
    236a:	7013      	strb	r3, [r2, #0]
                                        ActiveScanResultIndex++;
                                    }
                                }
                            #endif

                            MiMAC_DiscardPacket(); 
    236c:	4b2d      	ldr	r3, [pc, #180]	; (2424 <P2PTasks+0x354>)
    236e:	4798      	blx	r3
                        }
                        break;                
    2370:	e0a8      	b.n	24c4 <P2PTasks+0x3f4>
                    
                    #ifndef TARGET_SMALL
                    case CMD_P2P_CONNECTION_REMOVAL_RESPONSE:
                        {
                            if( rxMessage.Payload[1] == STATUS_SUCCESS )
    2372:	7863      	ldrb	r3, [r4, #1]
    2374:	2b00      	cmp	r3, #0
    2376:	d120      	bne.n	23ba <P2PTasks+0x2ea>
                                {
                                    // if the record is valid
                                    if( ConnectionTable[i].status.bits.isValid )
                                    {
                                        // if the record address is the same as the requesting device
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    2378:	4b27      	ldr	r3, [pc, #156]	; (2418 <P2PTasks+0x348>)
    237a:	685b      	ldr	r3, [r3, #4]
    237c:	9303      	str	r3, [sp, #12]
    237e:	4f34      	ldr	r7, [pc, #208]	; (2450 <P2PTasks+0x380>)
    2380:	2600      	movs	r6, #0
                            if( rxMessage.Payload[1] == STATUS_SUCCESS )
                            {
                                for(i = 0; i < CONNECTION_SIZE; i++)
                                {
                                    // if the record is valid
                                    if( ConnectionTable[i].status.bits.isValid )
    2382:	4c34      	ldr	r4, [pc, #208]	; (2454 <P2PTasks+0x384>)
                                    {
                                        // if the record address is the same as the requesting device
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    2384:	4d34      	ldr	r5, [pc, #208]	; (2458 <P2PTasks+0x388>)
                            if( rxMessage.Payload[1] == STATUS_SUCCESS )
                            {
                                for(i = 0; i < CONNECTION_SIZE; i++)
                                {
                                    // if the record is valid
                                    if( ConnectionTable[i].status.bits.isValid )
    2386:	9602      	str	r6, [sp, #8]
    2388:	00f3      	lsls	r3, r6, #3
    238a:	1b9b      	subs	r3, r3, r6
    238c:	005b      	lsls	r3, r3, #1
    238e:	18e3      	adds	r3, r4, r3
    2390:	7b1b      	ldrb	r3, [r3, #12]
    2392:	09db      	lsrs	r3, r3, #7
    2394:	d00d      	beq.n	23b2 <P2PTasks+0x2e2>
                                    {
                                        // if the record address is the same as the requesting device
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    2396:	0039      	movs	r1, r7
    2398:	9803      	ldr	r0, [sp, #12]
    239a:	47a8      	blx	r5
    239c:	2800      	cmp	r0, #0
    239e:	d008      	beq.n	23b2 <P2PTasks+0x2e2>
                                        {
                                            // invalidate the record
                                            ConnectionTable[i].status.Val = 0;
    23a0:	9a02      	ldr	r2, [sp, #8]
    23a2:	00d3      	lsls	r3, r2, #3
    23a4:	1a9c      	subs	r4, r3, r2
    23a6:	0064      	lsls	r4, r4, #1
    23a8:	4b2a      	ldr	r3, [pc, #168]	; (2454 <P2PTasks+0x384>)
    23aa:	191b      	adds	r3, r3, r4
    23ac:	2200      	movs	r2, #0
    23ae:	731a      	strb	r2, [r3, #12]
                                            #if defined(ENABLE_NETWORK_FREEZER)
                                                nvmPutConnectionTableIndex(&(ConnectionTable[i]), i);
                                            #endif
                                            break;
    23b0:	e003      	b.n	23ba <P2PTasks+0x2ea>
    23b2:	3601      	adds	r6, #1
    23b4:	370e      	adds	r7, #14
                    #ifndef TARGET_SMALL
                    case CMD_P2P_CONNECTION_REMOVAL_RESPONSE:
                        {
                            if( rxMessage.Payload[1] == STATUS_SUCCESS )
                            {
                                for(i = 0; i < CONNECTION_SIZE; i++)
    23b6:	2e14      	cmp	r6, #20
    23b8:	d1e5      	bne.n	2386 <P2PTasks+0x2b6>
                                        }
                                    } 
                                }
                            }
                        }
                        MiMAC_DiscardPacket();
    23ba:	4b1a      	ldr	r3, [pc, #104]	; (2424 <P2PTasks+0x354>)
    23bc:	4798      	blx	r3
                        break;
    23be:	e081      	b.n	24c4 <P2PTasks+0x3f4>
                #endif

                #if defined (PROTOCOL_STAR)
                    case CMD_DATA_TO_ENDDEV_SUCCESS:
                        {
                            if (role == EndDevice)
    23c0:	4b16      	ldr	r3, [pc, #88]	; (241c <P2PTasks+0x34c>)
    23c2:	781b      	ldrb	r3, [r3, #0]
    23c4:	2b01      	cmp	r3, #1
    23c6:	d105      	bne.n	23d4 <P2PTasks+0x304>
                            {
                                rec_ack = true;
    23c8:	2201      	movs	r2, #1
    23ca:	4b26      	ldr	r3, [pc, #152]	; (2464 <P2PTasks+0x394>)
    23cc:	701a      	strb	r2, [r3, #0]
                                MiMAC_DiscardPacket();
    23ce:	4b15      	ldr	r3, [pc, #84]	; (2424 <P2PTasks+0x354>)
    23d0:	4798      	blx	r3
    23d2:	e077      	b.n	24c4 <P2PTasks+0x3f4>
                            }
                            else
                            {
                                MiMAC_DiscardPacket();
    23d4:	4b13      	ldr	r3, [pc, #76]	; (2424 <P2PTasks+0x354>)
    23d6:	4798      	blx	r3
    23d8:	e074      	b.n	24c4 <P2PTasks+0x3f4>
                            }
                        }
                        break;
                    case CMD_SHARE_CONNECTION_TABLE:
                        {
                          if (role == EndDevice)
    23da:	4b10      	ldr	r3, [pc, #64]	; (241c <P2PTasks+0x34c>)
    23dc:	781b      	ldrb	r3, [r3, #0]
    23de:	2b01      	cmp	r3, #1
    23e0:	d109      	bne.n	23f6 <P2PTasks+0x326>
                            {
                                // END_devices FFD|| RFD process this Packet
                                end_nodes = rxMessage.Payload[1]-1; 
    23e2:	7863      	ldrb	r3, [r4, #1]
    23e4:	3b01      	subs	r3, #1
    23e6:	4a20      	ldr	r2, [pc, #128]	; (2468 <P2PTasks+0x398>)
    23e8:	7013      	strb	r3, [r2, #0]
                                store_connection_tb(rxMessage.Payload);
    23ea:	0020      	movs	r0, r4
    23ec:	4b1f      	ldr	r3, [pc, #124]	; (246c <P2PTasks+0x39c>)
    23ee:	4798      	blx	r3
                                MiMAC_DiscardPacket();
    23f0:	4b0c      	ldr	r3, [pc, #48]	; (2424 <P2PTasks+0x354>)
    23f2:	4798      	blx	r3
    23f4:	e066      	b.n	24c4 <P2PTasks+0x3f4>
                            }
                          else
                              MiMAC_DiscardPacket();
    23f6:	4b0b      	ldr	r3, [pc, #44]	; (2424 <P2PTasks+0x354>)
    23f8:	4798      	blx	r3
    23fa:	e063      	b.n	24c4 <P2PTasks+0x3f4>
    23fc:	00002961 	.word	0x00002961
    2400:	200006dc 	.word	0x200006dc
    2404:	200005b8 	.word	0x200005b8
    2408:	20000754 	.word	0x20000754
    240c:	000013bd 	.word	0x000013bd
    2410:	200006e0 	.word	0x200006e0
    2414:	200006fa 	.word	0x200006fa
    2418:	200007d8 	.word	0x200007d8
    241c:	200007a8 	.word	0x200007a8
    2420:	20000341 	.word	0x20000341
    2424:	000013a1 	.word	0x000013a1
    2428:	2000001f 	.word	0x2000001f
    242c:	0000ffff 	.word	0x0000ffff
    2430:	200006f8 	.word	0x200006f8
    2434:	00001fd1 	.word	0x00001fd1
    2438:	200007b0 	.word	0x200007b0
    243c:	20000755 	.word	0x20000755
    2440:	20000750 	.word	0x20000750
    2444:	200006f5 	.word	0x200006f5
    2448:	00001ab1 	.word	0x00001ab1
    244c:	00001be9 	.word	0x00001be9
    2450:	200005c4 	.word	0x200005c4
    2454:	200005c0 	.word	0x200005c0
    2458:	00001df1 	.word	0x00001df1
    245c:	00000b99 	.word	0x00000b99
    2460:	200006f4 	.word	0x200006f4
    2464:	200005bc 	.word	0x200005bc
    2468:	20000342 	.word	0x20000342
    246c:	00001a6d 	.word	0x00001a6d
                        }
                        break;

                    case CMD_FORWRD_PACKET:
                        {
                            if (role == PanCoordinator)
    2470:	4b2b      	ldr	r3, [pc, #172]	; (2520 <P2PTasks+0x450>)
    2472:	781b      	ldrb	r3, [r3, #0]
    2474:	2b00      	cmp	r3, #0
    2476:	d117      	bne.n	24a8 <P2PTasks+0x3d8>
                            {
                                // PAN CO handles the Packet Forwards 
                                uint8_t final_index; // EDy Index which is the destination address
                                final_index = Find_Index(rxMessage.Payload); 
    2478:	0020      	movs	r0, r4
    247a:	4b2a      	ldr	r3, [pc, #168]	; (2524 <P2PTasks+0x454>)
    247c:	4798      	blx	r3
                                if (final_index != 0xFF)
    247e:	28ff      	cmp	r0, #255	; 0xff
    2480:	d007      	beq.n	2492 <P2PTasks+0x3c2>
                                {
                                    FW_Stat = Forward_Packet_PANCr_to_EDy (rxMessage.Payload , final_index , rxMessage.SourceAddress);
    2482:	4b29      	ldr	r3, [pc, #164]	; (2528 <P2PTasks+0x458>)
    2484:	685a      	ldr	r2, [r3, #4]
    2486:	0001      	movs	r1, r0
    2488:	0020      	movs	r0, r4
    248a:	4b28      	ldr	r3, [pc, #160]	; (252c <P2PTasks+0x45c>)
    248c:	4798      	blx	r3
    248e:	4b28      	ldr	r3, [pc, #160]	; (2530 <P2PTasks+0x460>)
    2490:	7018      	strb	r0, [r3, #0]
                                }
                                #if defined(ENABLE_APP_LAYER_ACK)
                                    if (FW_Stat)
    2492:	4b27      	ldr	r3, [pc, #156]	; (2530 <P2PTasks+0x460>)
    2494:	781b      	ldrb	r3, [r3, #0]
    2496:	2b00      	cmp	r3, #0
    2498:	d003      	beq.n	24a2 <P2PTasks+0x3d2>
                                    {
                                            SW_Ack_SrED (rxMessage.SourceAddress);
    249a:	4b23      	ldr	r3, [pc, #140]	; (2528 <P2PTasks+0x458>)
    249c:	6858      	ldr	r0, [r3, #4]
    249e:	4b25      	ldr	r3, [pc, #148]	; (2534 <P2PTasks+0x464>)
    24a0:	4798      	blx	r3
                                    }
                                #endif
                                        MiMAC_DiscardPacket();
    24a2:	4b25      	ldr	r3, [pc, #148]	; (2538 <P2PTasks+0x468>)
    24a4:	4798      	blx	r3
    24a6:	e00d      	b.n	24c4 <P2PTasks+0x3f4>
                           }
                            
                            else
                                MiMAC_DiscardPacket();          
    24a8:	4b23      	ldr	r3, [pc, #140]	; (2538 <P2PTasks+0x468>)
    24aa:	4798      	blx	r3
    24ac:	e00a      	b.n	24c4 <P2PTasks+0x3f4>
                #endif
                
                        
                default:
                    // let upper application layer to handle undefined command frame
                    P2PStatus.bits.RxHasUserData = 1;
    24ae:	4a23      	ldr	r2, [pc, #140]	; (253c <P2PTasks+0x46c>)
    24b0:	7811      	ldrb	r1, [r2, #0]
    24b2:	2308      	movs	r3, #8
    24b4:	430b      	orrs	r3, r1
    24b6:	7013      	strb	r3, [r2, #0]
                    break;
    24b8:	e004      	b.n	24c4 <P2PTasks+0x3f4>
            }
        }
        else
        {
            P2PStatus.bits.RxHasUserData = 1;
    24ba:	4a20      	ldr	r2, [pc, #128]	; (253c <P2PTasks+0x46c>)
    24bc:	7811      	ldrb	r1, [r2, #0]
    24be:	2308      	movs	r3, #8
    24c0:	430b      	orrs	r3, r1
    24c2:	7013      	strb	r3, [r2, #0]
            if( P2PStatus.bits.DataRequesting && P2PStatus.bits.RxHasUserData )
            {
                P2PStatus.bits.DataRequesting = 0;
            }
        #endif       
        if( rxMessage.PayloadSize == 0  || P2PStatus.bits.SearchConnection || P2PStatus.bits.Resync )
    24c4:	4b18      	ldr	r3, [pc, #96]	; (2528 <P2PTasks+0x458>)
    24c6:	7b1b      	ldrb	r3, [r3, #12]
    24c8:	2b00      	cmp	r3, #0
    24ca:	d007      	beq.n	24dc <P2PTasks+0x40c>
    24cc:	4b1b      	ldr	r3, [pc, #108]	; (253c <P2PTasks+0x46c>)
    24ce:	781b      	ldrb	r3, [r3, #0]
    24d0:	06db      	lsls	r3, r3, #27
    24d2:	d403      	bmi.n	24dc <P2PTasks+0x40c>
    24d4:	4b19      	ldr	r3, [pc, #100]	; (253c <P2PTasks+0x46c>)
    24d6:	781b      	ldrb	r3, [r3, #0]
    24d8:	069b      	lsls	r3, r3, #26
    24da:	d51c      	bpl.n	2516 <P2PTasks+0x446>
        {
            P2PStatus.bits.RxHasUserData = 0;
    24dc:	4a17      	ldr	r2, [pc, #92]	; (253c <P2PTasks+0x46c>)
    24de:	7813      	ldrb	r3, [r2, #0]
    24e0:	2108      	movs	r1, #8
    24e2:	438b      	bics	r3, r1
    24e4:	7013      	strb	r3, [r2, #0]
            MiMAC_DiscardPacket();
    24e6:	4b14      	ldr	r3, [pc, #80]	; (2538 <P2PTasks+0x468>)
    24e8:	4798      	blx	r3
        }   
            
    }   
}
    24ea:	e014      	b.n	2516 <P2PTasks+0x446>
							 }
		 
		 
							 // prepare the P2P_CONNECTION_RESPONSE command
							 MiApp_FlushTx();
							 MiApp_WriteData(CMD_P2P_CONNECTION_RESPONSE);
    24ec:	4b14      	ldr	r3, [pc, #80]	; (2540 <P2PTasks+0x470>)
    24ee:	2291      	movs	r2, #145	; 0x91
    24f0:	701a      	strb	r2, [r3, #0]
							 MiApp_WriteData(status);
    24f2:	3262      	adds	r2, #98	; 0x62
    24f4:	705a      	strb	r2, [r3, #1]
							 MiApp_WriteData(MyindexinPC);
    24f6:	2103      	movs	r1, #3
    24f8:	4a12      	ldr	r2, [pc, #72]	; (2544 <P2PTasks+0x474>)
    24fa:	7011      	strb	r1, [r2, #0]
    24fc:	4a12      	ldr	r2, [pc, #72]	; (2548 <P2PTasks+0x478>)
    24fe:	7812      	ldrb	r2, [r2, #0]
    2500:	709a      	strb	r2, [r3, #2]
    2502:	e68f      	b.n	2224 <P2PTasks+0x154>
									 }

								 }
							 }
							 #endif
							 if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    2504:	4b11      	ldr	r3, [pc, #68]	; (254c <P2PTasks+0x47c>)
    2506:	781b      	ldrb	r3, [r3, #0]
    2508:	2b01      	cmp	r3, #1
    250a:	d0ef      	beq.n	24ec <P2PTasks+0x41c>
							 // if PANID does not match, ignore the request
							 if( rxMessage.SourcePANID.Val != 0xFFFF &&
							 rxMessage.SourcePANID.Val != myPANID.Val &&
							 rxMessage.PayloadSize > 2)
							 {
								 status = STATUS_NOT_SAME_PAN;
    250c:	22f2      	movs	r2, #242	; 0xf2
    250e:	e676      	b.n	21fe <P2PTasks+0x12e>
                                        break;
                                    }
                                } 
                            }

                            MiMAC_DiscardPacket();
    2510:	4b09      	ldr	r3, [pc, #36]	; (2538 <P2PTasks+0x468>)
    2512:	4798      	blx	r3
    2514:	e6f1      	b.n	22fa <P2PTasks+0x22a>
            P2PStatus.bits.RxHasUserData = 0;
            MiMAC_DiscardPacket();
        }   
            
    }   
}
    2516:	b006      	add	sp, #24
    2518:	bc04      	pop	{r2}
    251a:	4690      	mov	r8, r2
    251c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    251e:	46c0      	nop			; (mov r8, r8)
    2520:	200007a8 	.word	0x200007a8
    2524:	000019a1 	.word	0x000019a1
    2528:	200007d8 	.word	0x200007d8
    252c:	00001ba1 	.word	0x00001ba1
    2530:	200006fc 	.word	0x200006fc
    2534:	00001db9 	.word	0x00001db9
    2538:	000013a1 	.word	0x000013a1
    253c:	20000754 	.word	0x20000754
    2540:	200007b0 	.word	0x200007b0
    2544:	20000755 	.word	0x20000755
    2548:	20000750 	.word	0x20000750
    254c:	2000001f 	.word	0x2000001f

00002550 <MiApp_MessageAvailable>:
    return false;
}


bool MiApp_MessageAvailable(void)
{ 
    2550:	b510      	push	{r4, lr}
    P2PTasks(); 
    2552:	4b03      	ldr	r3, [pc, #12]	; (2560 <MiApp_MessageAvailable+0x10>)
    2554:	4798      	blx	r3
    
    return P2PStatus.bits.RxHasUserData;
    2556:	4b03      	ldr	r3, [pc, #12]	; (2564 <MiApp_MessageAvailable+0x14>)
    2558:	7818      	ldrb	r0, [r3, #0]
    255a:	0700      	lsls	r0, r0, #28
    255c:	0fc0      	lsrs	r0, r0, #31
}
    255e:	bd10      	pop	{r4, pc}
    2560:	000020d1 	.word	0x000020d1
    2564:	20000754 	.word	0x20000754

00002568 <MiApp_EstablishConnection>:
     *      If more than one connections have been established through this function call, the
     *      return value points to the index of one of the peer devices.
     *
     *****************************************************************************************/  
    uint8_t MiApp_EstablishConnection(INPUT uint8_t ActiveScanIndex, INPUT uint8_t Mode)
    {
    2568:	b5f0      	push	{r4, r5, r6, r7, lr}
    256a:	465f      	mov	r7, fp
    256c:	4656      	mov	r6, sl
    256e:	464d      	mov	r5, r9
    2570:	4644      	mov	r4, r8
    2572:	b4f0      	push	{r4, r5, r6, r7}
    2574:	b083      	sub	sp, #12
    2576:	000c      	movs	r4, r1
        uint8_t    tmpConnectionMode = ConnMode;
    2578:	4b34      	ldr	r3, [pc, #208]	; (264c <MiApp_EstablishConnection+0xe4>)
    257a:	781b      	ldrb	r3, [r3, #0]
    257c:	469b      	mov	fp, r3
        uint8_t    retry = CONNECTION_RETRY_TIMES;
        uint8_t    connectionInterval = 0;
        MIWI_TICK    t1, t2;
        #if defined(PROTOCOL_STAR)
            tick1 = MiWi_TickGet();
    257e:	4b34      	ldr	r3, [pc, #208]	; (2650 <MiApp_EstablishConnection+0xe8>)
    2580:	4798      	blx	r3
    2582:	4b34      	ldr	r3, [pc, #208]	; (2654 <MiApp_EstablishConnection+0xec>)
    2584:	6018      	str	r0, [r3, #0]
        #endif
        if( Mode == CONN_MODE_INDIRECT )
        {
            return 0xFF;
    2586:	20ff      	movs	r0, #255	; 0xff
        uint8_t    connectionInterval = 0;
        MIWI_TICK    t1, t2;
        #if defined(PROTOCOL_STAR)
            tick1 = MiWi_TickGet();
        #endif
        if( Mode == CONN_MODE_INDIRECT )
    2588:	2c01      	cmp	r4, #1
    258a:	d058      	beq.n	263e <MiApp_EstablishConnection+0xd6>
        {
            return 0xFF;
        }
       
        t1 = MiWi_TickGet();
    258c:	4b30      	ldr	r3, [pc, #192]	; (2650 <MiApp_EstablishConnection+0xe8>)
    258e:	4798      	blx	r3

        t1.Val -= (ONE_SECOND);
    2590:	381f      	subs	r0, #31
    2592:	0006      	movs	r6, r0
        ConnMode = ENABLE_ALL_CONN;
    2594:	2200      	movs	r2, #0
    2596:	4b2d      	ldr	r3, [pc, #180]	; (264c <MiApp_EstablishConnection+0xe4>)
    2598:	701a      	strb	r2, [r3, #0]
        P2PStatus.bits.SearchConnection = 1;
    259a:	4a2f      	ldr	r2, [pc, #188]	; (2658 <MiApp_EstablishConnection+0xf0>)
    259c:	7811      	ldrb	r1, [r2, #0]
    259e:	2310      	movs	r3, #16
    25a0:	430b      	orrs	r3, r1
    25a2:	7013      	strb	r3, [r2, #0]
     *****************************************************************************************/  
    uint8_t MiApp_EstablishConnection(INPUT uint8_t ActiveScanIndex, INPUT uint8_t Mode)
    {
        uint8_t    tmpConnectionMode = ConnMode;
        uint8_t    retry = CONNECTION_RETRY_TIMES;
        uint8_t    connectionInterval = 0;
    25a4:	2500      	movs	r5, #0
     *
     *****************************************************************************************/  
    uint8_t MiApp_EstablishConnection(INPUT uint8_t ActiveScanIndex, INPUT uint8_t Mode)
    {
        uint8_t    tmpConnectionMode = ConnMode;
        uint8_t    retry = CONNECTION_RETRY_TIMES;
    25a6:	2703      	movs	r7, #3
        t1 = MiWi_TickGet();

        t1.Val -= (ONE_SECOND);
        ConnMode = ENABLE_ALL_CONN;
        P2PStatus.bits.SearchConnection = 1;
        while( P2PStatus.bits.SearchConnection )
    25a8:	4690      	mov	r8, r2
        {
            t2 = MiWi_TickGet();
    25aa:	4b29      	ldr	r3, [pc, #164]	; (2650 <MiApp_EstablishConnection+0xe8>)
    25ac:	4699      	mov	r9, r3
                        SendPacket(true, NULL, true, false);
                    #endif
                #endif
            }
    
            if( MiApp_MessageAvailable())
    25ae:	4b2b      	ldr	r3, [pc, #172]	; (265c <MiApp_EstablishConnection+0xf4>)
    25b0:	469a      	mov	sl, r3
        t1 = MiWi_TickGet();

        t1.Val -= (ONE_SECOND);
        ConnMode = ENABLE_ALL_CONN;
        P2PStatus.bits.SearchConnection = 1;
        while( P2PStatus.bits.SearchConnection )
    25b2:	e032      	b.n	261a <MiApp_EstablishConnection+0xb2>
        {
            t2 = MiWi_TickGet();
    25b4:	47c8      	blx	r9
    25b6:	0004      	movs	r4, r0
            if( MiWi_TickGetDiff(t2, t1) > (ONE_SECOND) )
    25b8:	1b83      	subs	r3, r0, r6
    25ba:	2b1f      	cmp	r3, #31
    25bc:	d928      	bls.n	2610 <MiApp_EstablishConnection+0xa8>
            {   
                t1.Val = t2.Val;

                if( connectionInterval-- > 0 )
    25be:	2d00      	cmp	r5, #0
    25c0:	d003      	beq.n	25ca <MiApp_EstablishConnection+0x62>
    25c2:	3d01      	subs	r5, #1
    25c4:	b2ed      	uxtb	r5, r5
        while( P2PStatus.bits.SearchConnection )
        {
            t2 = MiWi_TickGet();
            if( MiWi_TickGetDiff(t2, t1) > (ONE_SECOND) )
            {   
                t1.Val = t2.Val;
    25c6:	0006      	movs	r6, r0
    25c8:	e027      	b.n	261a <MiApp_EstablishConnection+0xb2>
                if( connectionInterval-- > 0 )
                {
                    continue;
                }
                connectionInterval = CONNECTION_INTERVAL-1;
                if( retry-- == 0 )
    25ca:	1e7d      	subs	r5, r7, #1
    25cc:	b2ed      	uxtb	r5, r5
    25ce:	2f00      	cmp	r7, #0
    25d0:	d106      	bne.n	25e0 <MiApp_EstablishConnection+0x78>
                {

                    P2PStatus.bits.SearchConnection = 0;
    25d2:	4a21      	ldr	r2, [pc, #132]	; (2658 <MiApp_EstablishConnection+0xf0>)
    25d4:	7813      	ldrb	r3, [r2, #0]
    25d6:	2110      	movs	r1, #16
    25d8:	438b      	bics	r3, r1
    25da:	7013      	strb	r3, [r2, #0]
                    return 0xFF;
    25dc:	20ff      	movs	r0, #255	; 0xff
    25de:	e02e      	b.n	263e <MiApp_EstablishConnection+0xd6>
                }
                MiApp_FlushTx();
                MiApp_WriteData(CMD_P2P_CONNECTION_REQUEST);
    25e0:	4b1f      	ldr	r3, [pc, #124]	; (2660 <MiApp_EstablishConnection+0xf8>)
    25e2:	2281      	movs	r2, #129	; 0x81
    25e4:	701a      	strb	r2, [r3, #0]
                MiApp_WriteData(currentChannel);
    25e6:	4a1f      	ldr	r2, [pc, #124]	; (2664 <MiApp_EstablishConnection+0xfc>)
    25e8:	7812      	ldrb	r2, [r2, #0]
    25ea:	705a      	strb	r2, [r3, #1]
                MiApp_WriteData(P2PCapacityInfo);
    25ec:	2103      	movs	r1, #3
    25ee:	4a1e      	ldr	r2, [pc, #120]	; (2668 <MiApp_EstablishConnection+0x100>)
    25f0:	7011      	strb	r1, [r2, #0]
    25f2:	4a1e      	ldr	r2, [pc, #120]	; (266c <MiApp_EstablishConnection+0x104>)
    25f4:	7812      	ldrb	r2, [r2, #0]
    25f6:	709a      	strb	r2, [r3, #2]
                        {
                            MiApp_SetChannel( ActiveScanResults[ActiveScanIndex].Channel );
                            SendPacket(false, ActiveScanResults[ActiveScanIndex].PANID, ActiveScanResults[ActiveScanIndex].Address, true, false);
                        }
                    #else
                        SendPacket(true, myPANID, NULL, true, false);
    25f8:	4b1d      	ldr	r3, [pc, #116]	; (2670 <MiApp_EstablishConnection+0x108>)
    25fa:	8819      	ldrh	r1, [r3, #0]
    25fc:	2300      	movs	r3, #0
    25fe:	9300      	str	r3, [sp, #0]
    2600:	3301      	adds	r3, #1
    2602:	2200      	movs	r2, #0
    2604:	2001      	movs	r0, #1
    2606:	4e1b      	ldr	r6, [pc, #108]	; (2674 <MiApp_EstablishConnection+0x10c>)
    2608:	47b0      	blx	r6
        while( P2PStatus.bits.SearchConnection )
        {
            t2 = MiWi_TickGet();
            if( MiWi_TickGetDiff(t2, t1) > (ONE_SECOND) )
            {   
                t1.Val = t2.Val;
    260a:	0026      	movs	r6, r4
                if( connectionInterval-- > 0 )
                {
                    continue;
                }
                connectionInterval = CONNECTION_INTERVAL-1;
                if( retry-- == 0 )
    260c:	002f      	movs	r7, r5

                if( connectionInterval-- > 0 )
                {
                    continue;
                }
                connectionInterval = CONNECTION_INTERVAL-1;
    260e:	2501      	movs	r5, #1
                        SendPacket(true, NULL, true, false);
                    #endif
                #endif
            }
    
            if( MiApp_MessageAvailable())
    2610:	47d0      	blx	sl
    2612:	2800      	cmp	r0, #0
    2614:	d001      	beq.n	261a <MiApp_EstablishConnection+0xb2>
            {
                MiApp_DiscardMessage();
    2616:	4b18      	ldr	r3, [pc, #96]	; (2678 <MiApp_EstablishConnection+0x110>)
    2618:	4798      	blx	r3
        t1 = MiWi_TickGet();

        t1.Val -= (ONE_SECOND);
        ConnMode = ENABLE_ALL_CONN;
        P2PStatus.bits.SearchConnection = 1;
        while( P2PStatus.bits.SearchConnection )
    261a:	4643      	mov	r3, r8
    261c:	781b      	ldrb	r3, [r3, #0]
    261e:	06db      	lsls	r3, r3, #27
    2620:	d4c8      	bmi.n	25b4 <MiApp_EstablishConnection+0x4c>
                MiApp_DiscardMessage();
            }     
            //P2PTasks();
        }
      
        ConnMode = tmpConnectionMode;
    2622:	4b0a      	ldr	r3, [pc, #40]	; (264c <MiApp_EstablishConnection+0xe4>)
    2624:	465a      	mov	r2, fp
    2626:	701a      	strb	r2, [r3, #0]
        
        #if defined(ENABLE_TIME_SYNC) && !defined(ENABLE_SLEEP) && defined(ENABLE_INDIRECT_MESSAGE)
            TimeSyncTick = MiWi_TickGet();
        #endif
        #if defined(PROTOCOL_STAR)
            if (LatestConnection != 0xFF)
    2628:	4b14      	ldr	r3, [pc, #80]	; (267c <MiApp_EstablishConnection+0x114>)
    262a:	7818      	ldrb	r0, [r3, #0]
    262c:	28ff      	cmp	r0, #255	; 0xff
    262e:	d003      	beq.n	2638 <MiApp_EstablishConnection+0xd0>
            {
                role = EndDevice;
    2630:	2201      	movs	r2, #1
    2632:	4b13      	ldr	r3, [pc, #76]	; (2680 <MiApp_EstablishConnection+0x118>)
    2634:	701a      	strb	r2, [r3, #0]
    2636:	e002      	b.n	263e <MiApp_EstablishConnection+0xd6>
            }
            else
            {
                role = PanCoordinator;
    2638:	2200      	movs	r2, #0
    263a:	4b11      	ldr	r3, [pc, #68]	; (2680 <MiApp_EstablishConnection+0x118>)
    263c:	701a      	strb	r2, [r3, #0]
            #endif  
        #endif
  
        return LatestConnection;
        
    }
    263e:	b003      	add	sp, #12
    2640:	bc3c      	pop	{r2, r3, r4, r5}
    2642:	4690      	mov	r8, r2
    2644:	4699      	mov	r9, r3
    2646:	46a2      	mov	sl, r4
    2648:	46ab      	mov	fp, r5
    264a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    264c:	2000001f 	.word	0x2000001f
    2650:	00002961 	.word	0x00002961
    2654:	200007ac 	.word	0x200007ac
    2658:	20000754 	.word	0x20000754
    265c:	00002551 	.word	0x00002551
    2660:	200007b0 	.word	0x200007b0
    2664:	20000341 	.word	0x20000341
    2668:	20000755 	.word	0x20000755
    266c:	200006f5 	.word	0x200006f5
    2670:	200006f8 	.word	0x200006f8
    2674:	00001ab1 	.word	0x00001ab1
    2678:	00001e75 	.word	0x00001e75
    267c:	200005bd 	.word	0x200005bd
    2680:	200007a8 	.word	0x200007a8

00002684 <MiApp_ConnectionMode>:
 *      None
 *
 *****************************************************************************************/ 
void MiApp_ConnectionMode(INPUT uint8_t Mode)
{
    if( Mode > 3 )
    2684:	2803      	cmp	r0, #3
    2686:	d808      	bhi.n	269a <MiApp_ConnectionMode+0x16>
    {
        return;
    }
    ConnMode = Mode;
    2688:	4b04      	ldr	r3, [pc, #16]	; (269c <MiApp_ConnectionMode+0x18>)
    268a:	7018      	strb	r0, [r3, #0]
    P2PCapacityInfo = (P2PCapacityInfo & 0x0F) | (ConnMode << 4);
    268c:	4a04      	ldr	r2, [pc, #16]	; (26a0 <MiApp_ConnectionMode+0x1c>)
    268e:	7813      	ldrb	r3, [r2, #0]
    2690:	210f      	movs	r1, #15
    2692:	400b      	ands	r3, r1
    2694:	0100      	lsls	r0, r0, #4
    2696:	4318      	orrs	r0, r3
    2698:	7010      	strb	r0, [r2, #0]
    
    #if defined(ENABLE_NETWORK_FREEZER)
        nvmPutConnMode(&ConnMode);
    #endif
    269a:	4770      	bx	lr
    269c:	2000001f 	.word	0x2000001f
    26a0:	200006f5 	.word	0x200006f5

000026a4 <Display_Startup_Message>:

const char LED_Demo_Res[30] = "LED Demo \n Response ";


void Display_Startup_Message(void)
{
    26a4:	b510      	push	{r4, lr}
	
	gfx_mono_draw_string(&greeting[0], 10, 5, &sysfont);
    26a6:	4b03      	ldr	r3, [pc, #12]	; (26b4 <Display_Startup_Message+0x10>)
    26a8:	2205      	movs	r2, #5
    26aa:	210a      	movs	r1, #10
    26ac:	4802      	ldr	r0, [pc, #8]	; (26b8 <Display_Startup_Message+0x14>)
    26ae:	4c03      	ldr	r4, [pc, #12]	; (26bc <Display_Startup_Message+0x18>)
    26b0:	47a0      	blx	r4
}
    26b2:	bd10      	pop	{r4, pc}
    26b4:	20000000 	.word	0x20000000
    26b8:	00007110 	.word	0x00007110
    26bc:	0000056d 	.word	0x0000056d

000026c0 <LED_Demo_Display>:

void LED_Demo_Display (uint8_t type)
{
    26c0:	b510      	push	{r4, lr}
	if (type == 1)
    26c2:	2801      	cmp	r0, #1
    26c4:	d106      	bne.n	26d4 <LED_Demo_Display+0x14>
	{
		gfx_mono_draw_string(&LED_Demo_Req[0], 10, 5, &sysfont);
    26c6:	4b08      	ldr	r3, [pc, #32]	; (26e8 <LED_Demo_Display+0x28>)
    26c8:	2205      	movs	r2, #5
    26ca:	210a      	movs	r1, #10
    26cc:	4807      	ldr	r0, [pc, #28]	; (26ec <LED_Demo_Display+0x2c>)
    26ce:	4c08      	ldr	r4, [pc, #32]	; (26f0 <LED_Demo_Display+0x30>)
    26d0:	47a0      	blx	r4
    26d2:	e007      	b.n	26e4 <LED_Demo_Display+0x24>
	}
	else if (type == 2)
    26d4:	2802      	cmp	r0, #2
    26d6:	d105      	bne.n	26e4 <LED_Demo_Display+0x24>
	{
		gfx_mono_draw_string(&LED_Demo_Res[0], 10, 5, &sysfont);
    26d8:	4b03      	ldr	r3, [pc, #12]	; (26e8 <LED_Demo_Display+0x28>)
    26da:	2205      	movs	r2, #5
    26dc:	210a      	movs	r1, #10
    26de:	4805      	ldr	r0, [pc, #20]	; (26f4 <LED_Demo_Display+0x34>)
    26e0:	4c03      	ldr	r4, [pc, #12]	; (26f0 <LED_Demo_Display+0x30>)
    26e2:	47a0      	blx	r4
	}
}
    26e4:	bd10      	pop	{r4, pc}
    26e6:	46c0      	nop			; (mov r8, r8)
    26e8:	20000000 	.word	0x20000000
    26ec:	00007130 	.word	0x00007130
    26f0:	0000056d 	.word	0x0000056d
    26f4:	00007150 	.word	0x00007150

000026f8 <sal_aes_wrrd>:
 * @param[in]  idata  AES block to be en/decrypted
 * @param[out] odata  Result of previous operation
 *                    (odata may be NULL or equal to idata)
 */
void sal_aes_wrrd(uint8_t *idata, uint8_t *odata)
{
    26f8:	b570      	push	{r4, r5, r6, lr}
    26fa:	0003      	movs	r3, r0
    26fc:	000d      	movs	r5, r1
	 * Write data and start the operation.
	 * AES_MODE in aes_buf[0] and aes_buf[AES_BLOCKSIZE+1] as well as
	 * AES_REQUEST in aes_buf[AES_BLOCKSIZE+1]
	 * were set before in sal_aes_setup()
	 */
	memcpy(aes_buf + 1, idata, AES_BLOCKSIZE);
    26fe:	4c14      	ldr	r4, [pc, #80]	; (2750 <sal_aes_wrrd+0x58>)
    2700:	1c60      	adds	r0, r4, #1
    2702:	2210      	movs	r2, #16
    2704:	0019      	movs	r1, r3
    2706:	4b13      	ldr	r3, [pc, #76]	; (2754 <sal_aes_wrrd+0x5c>)
    2708:	4798      	blx	r3

	/* trx_aes_wrrd() overwrites aes_buf, the last byte must be saved.
	**/
	save_cmd = aes_buf[AES_BLOCKSIZE + 1];
    270a:	7c64      	ldrb	r4, [r4, #17]

	if (setup_flag) {
    270c:	4b12      	ldr	r3, [pc, #72]	; (2758 <sal_aes_wrrd+0x60>)
    270e:	781b      	ldrb	r3, [r3, #0]
    2710:	2b00      	cmp	r3, #0
    2712:	d008      	beq.n	2726 <sal_aes_wrrd+0x2e>
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    2714:	2212      	movs	r2, #18
    2716:	490e      	ldr	r1, [pc, #56]	; (2750 <sal_aes_wrrd+0x58>)
    2718:	2083      	movs	r0, #131	; 0x83
    271a:	4b10      	ldr	r3, [pc, #64]	; (275c <sal_aes_wrrd+0x64>)
    271c:	4798      	blx	r3
				AES_BLOCKSIZE + 2);

		setup_flag = false;
    271e:	2200      	movs	r2, #0
    2720:	4b0d      	ldr	r3, [pc, #52]	; (2758 <sal_aes_wrrd+0x60>)
    2722:	701a      	strb	r2, [r3, #0]
    2724:	e005      	b.n	2732 <sal_aes_wrrd+0x3a>
	} else {
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
    2726:	2211      	movs	r2, #17
    2728:	4909      	ldr	r1, [pc, #36]	; (2750 <sal_aes_wrrd+0x58>)
    272a:	3101      	adds	r1, #1
    272c:	2084      	movs	r0, #132	; 0x84
    272e:	4b0b      	ldr	r3, [pc, #44]	; (275c <sal_aes_wrrd+0x64>)
    2730:	4798      	blx	r3
				aes_buf + 1, AES_BLOCKSIZE + 1);
	}

	/* Restore the result. */
	if (odata != NULL) {
    2732:	2d00      	cmp	r5, #0
    2734:	d005      	beq.n	2742 <sal_aes_wrrd+0x4a>
		memcpy(odata, aes_buf + 1, AES_BLOCKSIZE);
    2736:	2210      	movs	r2, #16
    2738:	4905      	ldr	r1, [pc, #20]	; (2750 <sal_aes_wrrd+0x58>)
    273a:	3101      	adds	r1, #1
    273c:	0028      	movs	r0, r5
    273e:	4b05      	ldr	r3, [pc, #20]	; (2754 <sal_aes_wrrd+0x5c>)
    2740:	4798      	blx	r3
	}

	aes_buf[AES_BLOCKSIZE + 1] = save_cmd;
    2742:	4b03      	ldr	r3, [pc, #12]	; (2750 <sal_aes_wrrd+0x58>)
    2744:	745c      	strb	r4, [r3, #17]

	/* Wait for the operation to finish for 24 us. */
	delay_us(24);
    2746:	2018      	movs	r0, #24
    2748:	4b05      	ldr	r3, [pc, #20]	; (2760 <sal_aes_wrrd+0x68>)
    274a:	4798      	blx	r3
}
    274c:	bd70      	pop	{r4, r5, r6, pc}
    274e:	46c0      	nop			; (mov r8, r8)
    2750:	20000368 	.word	0x20000368
    2754:	00005e45 	.word	0x00005e45
    2758:	2000037a 	.word	0x2000037a
    275c:	000055f1 	.word	0x000055f1
    2760:	000029b5 	.word	0x000029b5

00002764 <sal_aes_setup>:
 * @return  False if some parameter was illegal, true else
 */
bool sal_aes_setup(uint8_t *key,
		uint8_t enc_mode,
		uint8_t dir)
{
    2764:	b5f0      	push	{r4, r5, r6, r7, lr}
    2766:	4647      	mov	r7, r8
    2768:	b480      	push	{r7}
    276a:	b084      	sub	sp, #16
    276c:	0006      	movs	r6, r0
    276e:	000d      	movs	r5, r1
    2770:	0014      	movs	r4, r2
	if (key != NULL) {
    2772:	2800      	cmp	r0, #0
    2774:	d017      	beq.n	27a6 <sal_aes_setup+0x42>
		/* Setup key. */
		dec_initialized = false;
    2776:	2200      	movs	r2, #0
    2778:	4b3e      	ldr	r3, [pc, #248]	; (2874 <sal_aes_setup+0x110>)
    277a:	701a      	strb	r2, [r3, #0]

		last_dir = AES_DIR_VOID;
    277c:	3202      	adds	r2, #2
    277e:	4b3e      	ldr	r3, [pc, #248]	; (2878 <sal_aes_setup+0x114>)
    2780:	701a      	strb	r2, [r3, #0]

		/* Save key for later use after decryption or sleep. */
		memcpy(enc_key, key, AES_KEYSIZE);
    2782:	320e      	adds	r2, #14
    2784:	0001      	movs	r1, r0
    2786:	483d      	ldr	r0, [pc, #244]	; (287c <sal_aes_setup+0x118>)
    2788:	4b3d      	ldr	r3, [pc, #244]	; (2880 <sal_aes_setup+0x11c>)
    278a:	4698      	mov	r8, r3
    278c:	4798      	blx	r3

		/* Set subregister AES_MODE (Bits 4:6 in AES_CON) to 1: KEY
		 * SETUP. */
		aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    278e:	4f3d      	ldr	r7, [pc, #244]	; (2884 <sal_aes_setup+0x120>)
    2790:	2310      	movs	r3, #16
    2792:	703b      	strb	r3, [r7, #0]

		/* Fill in key. */
		memcpy(aes_buf + 1, key, AES_KEYSIZE);
    2794:	1c78      	adds	r0, r7, #1
    2796:	2210      	movs	r2, #16
    2798:	0031      	movs	r1, r6
    279a:	47c0      	blx	r8

		/* Write to SRAM in one step. */
		trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    279c:	2211      	movs	r2, #17
    279e:	0039      	movs	r1, r7
    27a0:	2083      	movs	r0, #131	; 0x83
    27a2:	4b39      	ldr	r3, [pc, #228]	; (2888 <sal_aes_setup+0x124>)
    27a4:	4798      	blx	r3
				AES_BLOCKSIZE + 1);
	}

	/* Set encryption direction. */
	switch (dir) {
    27a6:	2c00      	cmp	r4, #0
    27a8:	d002      	beq.n	27b0 <sal_aes_setup+0x4c>
    27aa:	2c01      	cmp	r4, #1
    27ac:	d012      	beq.n	27d4 <sal_aes_setup+0x70>
    27ae:	e05a      	b.n	2866 <sal_aes_setup+0x102>
	case AES_DIR_ENCRYPT:
		if (last_dir == AES_DIR_DECRYPT) {
    27b0:	4b31      	ldr	r3, [pc, #196]	; (2878 <sal_aes_setup+0x114>)
    27b2:	781b      	ldrb	r3, [r3, #0]
    27b4:	2b01      	cmp	r3, #1
    27b6:	d13d      	bne.n	2834 <sal_aes_setup+0xd0>
			/*
			 * If the last operation was decryption, the encryption
			 * key must be stored in enc_key, so re-initialize it.
			 */
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    27b8:	4e32      	ldr	r6, [pc, #200]	; (2884 <sal_aes_setup+0x120>)
    27ba:	330f      	adds	r3, #15
    27bc:	7033      	strb	r3, [r6, #0]

			/* Fill in key. */
			memcpy(aes_buf + 1, enc_key, AES_KEYSIZE);
    27be:	1c70      	adds	r0, r6, #1
    27c0:	2210      	movs	r2, #16
    27c2:	492e      	ldr	r1, [pc, #184]	; (287c <sal_aes_setup+0x118>)
    27c4:	4b2e      	ldr	r3, [pc, #184]	; (2880 <sal_aes_setup+0x11c>)
    27c6:	4798      	blx	r3

			/* Write to SRAM in one step. */
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    27c8:	2211      	movs	r2, #17
    27ca:	0031      	movs	r1, r6
    27cc:	2083      	movs	r0, #131	; 0x83
    27ce:	4b2e      	ldr	r3, [pc, #184]	; (2888 <sal_aes_setup+0x124>)
    27d0:	4798      	blx	r3
    27d2:	e02f      	b.n	2834 <sal_aes_setup+0xd0>
		}

		break;

	case AES_DIR_DECRYPT:
		if (last_dir != AES_DIR_DECRYPT) {
    27d4:	4b28      	ldr	r3, [pc, #160]	; (2878 <sal_aes_setup+0x114>)
    27d6:	781b      	ldrb	r3, [r3, #0]
    27d8:	2b01      	cmp	r3, #1
    27da:	d02b      	beq.n	2834 <sal_aes_setup+0xd0>
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    27dc:	2210      	movs	r2, #16
    27de:	4b29      	ldr	r3, [pc, #164]	; (2884 <sal_aes_setup+0x120>)
    27e0:	701a      	strb	r2, [r3, #0]

			if (!dec_initialized) {
    27e2:	4b24      	ldr	r3, [pc, #144]	; (2874 <sal_aes_setup+0x110>)
    27e4:	781b      	ldrb	r3, [r3, #0]
    27e6:	2b00      	cmp	r3, #0
    27e8:	d116      	bne.n	2818 <sal_aes_setup+0xb4>

				/* Compute decryption key and initialize unit
				 * with it. */

				/* Dummy ECB encryption. */
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_ECB);
    27ea:	4e26      	ldr	r6, [pc, #152]	; (2884 <sal_aes_setup+0x120>)
    27ec:	7033      	strb	r3, [r6, #0]
				aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(
    27ee:	3380      	adds	r3, #128	; 0x80
    27f0:	7473      	strb	r3, [r6, #17]
						SR_AES_MODE, AES_MODE_ECB) |
						SR_MASK(SR_AES_REQUEST,
						AES_REQUEST);

				setup_flag = true; /* Needed in sal_aes_wrrd().
    27f2:	3a0f      	subs	r2, #15
    27f4:	4b25      	ldr	r3, [pc, #148]	; (288c <sal_aes_setup+0x128>)
    27f6:	701a      	strb	r2, [r3, #0]
				                   **/
				sal_aes_wrrd(dummy, NULL);
    27f8:	2100      	movs	r1, #0
    27fa:	4668      	mov	r0, sp
    27fc:	4b24      	ldr	r3, [pc, #144]	; (2890 <sal_aes_setup+0x12c>)
    27fe:	4798      	blx	r3

				/* Read last round key: */

				/* Set to key mode. */
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    2800:	2310      	movs	r3, #16
    2802:	7033      	strb	r3, [r6, #0]
				trx_sram_write(
    2804:	2201      	movs	r2, #1
    2806:	0031      	movs	r1, r6
    2808:	2083      	movs	r0, #131	; 0x83
    280a:	4b1f      	ldr	r3, [pc, #124]	; (2888 <sal_aes_setup+0x124>)
    280c:	4798      	blx	r3
						(AES_BASE_ADDR + RG_AES_CTRL),
						aes_buf, 1);

				/* Read the key. */
				trx_sram_read((AES_BASE_ADDR +
    280e:	2210      	movs	r2, #16
    2810:	4920      	ldr	r1, [pc, #128]	; (2894 <sal_aes_setup+0x130>)
    2812:	2084      	movs	r0, #132	; 0x84
    2814:	4b20      	ldr	r3, [pc, #128]	; (2898 <sal_aes_setup+0x134>)
    2816:	4798      	blx	r3
			 * simply re-initialize the unit;
			 * aes_buf[0] is AES_MODE_KEY
			 */

			/* Fill in key. */
			memcpy(aes_buf + 1, dec_key, AES_KEYSIZE);
    2818:	4e1a      	ldr	r6, [pc, #104]	; (2884 <sal_aes_setup+0x120>)
    281a:	1c70      	adds	r0, r6, #1
    281c:	2210      	movs	r2, #16
    281e:	491d      	ldr	r1, [pc, #116]	; (2894 <sal_aes_setup+0x130>)
    2820:	4b17      	ldr	r3, [pc, #92]	; (2880 <sal_aes_setup+0x11c>)
    2822:	4798      	blx	r3

			/* Write to SRAM in one step. */
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    2824:	2211      	movs	r2, #17
    2826:	0031      	movs	r1, r6
    2828:	2083      	movs	r0, #131	; 0x83
    282a:	4b17      	ldr	r3, [pc, #92]	; (2888 <sal_aes_setup+0x124>)
    282c:	4798      	blx	r3
					aes_buf, AES_BLOCKSIZE + 1);

			dec_initialized = true;
    282e:	4b11      	ldr	r3, [pc, #68]	; (2874 <sal_aes_setup+0x110>)
    2830:	2201      	movs	r2, #1
    2832:	701a      	strb	r2, [r3, #0]

	default:
		return false;
	}

	last_dir = dir;
    2834:	4b10      	ldr	r3, [pc, #64]	; (2878 <sal_aes_setup+0x114>)
    2836:	701c      	strb	r4, [r3, #0]

	/* Set encryption mode. */
	switch (enc_mode) {
    2838:	2d00      	cmp	r5, #0
    283a:	d002      	beq.n	2842 <sal_aes_setup+0xde>
				SR_MASK(SR_AES_REQUEST, AES_REQUEST);
	}
	break;

	default:
		return (false);
    283c:	2000      	movs	r0, #0
	}

	last_dir = dir;

	/* Set encryption mode. */
	switch (enc_mode) {
    283e:	2d02      	cmp	r5, #2
    2840:	d113      	bne.n	286a <sal_aes_setup+0x106>
	case AES_MODE_ECB:
	case AES_MODE_CBC:
	{
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    2842:	012d      	lsls	r5, r5, #4
    2844:	2370      	movs	r3, #112	; 0x70
    2846:	401d      	ands	r5, r3
    2848:	00e3      	lsls	r3, r4, #3
    284a:	2408      	movs	r4, #8
    284c:	401c      	ands	r4, r3
    284e:	432c      	orrs	r4, r5
    2850:	4b0c      	ldr	r3, [pc, #48]	; (2884 <sal_aes_setup+0x120>)
    2852:	701c      	strb	r4, [r3, #0]
				SR_MASK(SR_AES_DIR, dir);
		aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(SR_AES_MODE, enc_mode) |
    2854:	2280      	movs	r2, #128	; 0x80
    2856:	4252      	negs	r2, r2
    2858:	4314      	orrs	r4, r2
    285a:	745c      	strb	r4, [r3, #17]

	default:
		return (false);
	}

	setup_flag = true;
    285c:	3281      	adds	r2, #129	; 0x81
    285e:	4b0b      	ldr	r3, [pc, #44]	; (288c <sal_aes_setup+0x128>)
    2860:	701a      	strb	r2, [r3, #0]

	return (true);
    2862:	2001      	movs	r0, #1
    2864:	e001      	b.n	286a <sal_aes_setup+0x106>
		}

		break;

	default:
		return false;
    2866:	2000      	movs	r0, #0
    2868:	e7ff      	b.n	286a <sal_aes_setup+0x106>
	}

	setup_flag = true;

	return (true);
}
    286a:	b004      	add	sp, #16
    286c:	bc04      	pop	{r2}
    286e:	4690      	mov	r8, r2
    2870:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2872:	46c0      	nop			; (mov r8, r8)
    2874:	20000344 	.word	0x20000344
    2878:	20000028 	.word	0x20000028
    287c:	20000358 	.word	0x20000358
    2880:	00005e45 	.word	0x00005e45
    2884:	20000368 	.word	0x20000368
    2888:	00005301 	.word	0x00005301
    288c:	2000037a 	.word	0x2000037a
    2890:	000026f9 	.word	0x000026f9
    2894:	20000348 	.word	0x20000348
    2898:	00005469 	.word	0x00005469

0000289c <sal_aes_read>:
 * of a series of sal_aes_wrrd() calls.
 *
 * @param[out] data     - result of previous operation
 */
void sal_aes_read(uint8_t *data)
{
    289c:	b510      	push	{r4, lr}
    289e:	0001      	movs	r1, r0
	trx_sram_read((AES_BASE_ADDR + RG_AES_STATE_KEY_0), data,
    28a0:	2210      	movs	r2, #16
    28a2:	2084      	movs	r0, #132	; 0x84
    28a4:	4b01      	ldr	r3, [pc, #4]	; (28ac <sal_aes_read+0x10>)
    28a6:	4798      	blx	r3
			AES_BLOCKSIZE);
}
    28a8:	bd10      	pop	{r4, pc}
    28aa:	46c0      	nop			; (mov r8, r8)
    28ac:	00005469 	.word	0x00005469

000028b0 <configure_tc>:
}
//! [callback_funcs]

//! [setup]
void configure_tc(void)
{
    28b0:	b510      	push	{r4, lr}
    28b2:	b08e      	sub	sp, #56	; 0x38
	//! [setup_config]
	struct tc_config config_tc;
	//! [setup_config]
	//! [setup_config_defaults]
	tc_reset(&tc_instance);
    28b4:	4c25      	ldr	r4, [pc, #148]	; (294c <configure_tc+0x9c>)
    28b6:	0020      	movs	r0, r4
    28b8:	4b25      	ldr	r3, [pc, #148]	; (2950 <configure_tc+0xa0>)
    28ba:	4798      	blx	r3

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    28bc:	2300      	movs	r3, #0
    28be:	466a      	mov	r2, sp
    28c0:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    28c2:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = false;
    28c4:	7053      	strb	r3, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
    28c6:	7093      	strb	r3, [r2, #2]
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    28c8:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    28ca:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    28cc:	7293      	strb	r3, [r2, #10]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    28ce:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    28d0:	7313      	strb	r3, [r2, #12]
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    28d2:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    28d4:	7353      	strb	r3, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    28d6:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    28d8:	9305      	str	r3, [sp, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    28da:	9306      	str	r3, [sp, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    28dc:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    28de:	9308      	str	r3, [sp, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    28e0:	9309      	str	r3, [sp, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    28e2:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    28e4:	8593      	strh	r3, [r2, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
    28e6:	3334      	adds	r3, #52	; 0x34
    28e8:	2200      	movs	r2, #0
    28ea:	4669      	mov	r1, sp
    28ec:	54ca      	strb	r2, [r1, r3]
	tc_get_config_defaults(&config_tc);
	//! [setup_config_defaults]

	//! [setup_change_config]  // 32 bit Timer 
	config_tc.counter_size = TC_COUNTER_SIZE_32BIT;
    28ee:	3b2c      	subs	r3, #44	; 0x2c
    28f0:	70cb      	strb	r3, [r1, #3]
	config_tc.clock_source = GCLK_GENERATOR_1;
    28f2:	3b07      	subs	r3, #7
    28f4:	700b      	strb	r3, [r1, #0]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV1024;
    28f6:	23e0      	movs	r3, #224	; 0xe0
    28f8:	00db      	lsls	r3, r3, #3
    28fa:	808b      	strh	r3, [r1, #4]
	config_tc.counter_8_bit.period = 0xFF;
    28fc:	22ff      	movs	r2, #255	; 0xff
    28fe:	2329      	movs	r3, #41	; 0x29
    2900:	54ca      	strb	r2, [r1, r3]
	config_tc.counter_8_bit.compare_capture_channel[0] = 50;
    2902:	3acd      	subs	r2, #205	; 0xcd
    2904:	3301      	adds	r3, #1
    2906:	54ca      	strb	r2, [r1, r3]
	config_tc.counter_8_bit.compare_capture_channel[1] = 54;
    2908:	3204      	adds	r2, #4
    290a:	3301      	adds	r3, #1
    290c:	54ca      	strb	r2, [r1, r3]
	//! [setup_change_config]

	//! [setup_set_config]
	tc_init(&tc_instance, CONF_TC_MODULE, &config_tc);
    290e:	466a      	mov	r2, sp
    2910:	4910      	ldr	r1, [pc, #64]	; (2954 <configure_tc+0xa4>)
    2912:	0020      	movs	r0, r4
    2914:	4b10      	ldr	r3, [pc, #64]	; (2958 <configure_tc+0xa8>)
    2916:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2918:	6822      	ldr	r2, [r4, #0]

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    291a:	6913      	ldr	r3, [r2, #16]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    291c:	2b00      	cmp	r3, #0
    291e:	d1fc      	bne.n	291a <configure_tc+0x6a>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    2920:	6811      	ldr	r1, [r2, #0]
    2922:	3302      	adds	r3, #2
    2924:	430b      	orrs	r3, r1
    2926:	6013      	str	r3, [r2, #0]

	//! [setup_enable]
	tc_enable(&tc_instance);
	//! [setup_enable]
	// Set the Timer Counter value to Zero 
	tc_set_count_value(&tc_instance, 0);
    2928:	4c08      	ldr	r4, [pc, #32]	; (294c <configure_tc+0x9c>)
    292a:	2100      	movs	r1, #0
    292c:	0020      	movs	r0, r4
    292e:	4b0b      	ldr	r3, [pc, #44]	; (295c <configure_tc+0xac>)
    2930:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2932:	6823      	ldr	r3, [r4, #0]

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    2934:	691a      	ldr	r2, [r3, #16]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    2936:	2a00      	cmp	r2, #0
    2938:	d1fc      	bne.n	2934 <configure_tc+0x84>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    293a:	711a      	strb	r2, [r3, #4]

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    293c:	691a      	ldr	r2, [r3, #16]
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;

	while (tc_is_syncing(module_inst)) {
    293e:	2a00      	cmp	r2, #0
    2940:	d1fc      	bne.n	293c <configure_tc+0x8c>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
    2942:	3220      	adds	r2, #32
    2944:	715a      	strb	r2, [r3, #5]
		
	/* Start timer */
	tc_start_counter(&tc_instance);
}
    2946:	b00e      	add	sp, #56	; 0x38
    2948:	bd10      	pop	{r4, pc}
    294a:	46c0      	nop			; (mov r8, r8)
    294c:	200007e8 	.word	0x200007e8
    2950:	00004965 	.word	0x00004965
    2954:	43000800 	.word	0x43000800
    2958:	00004619 	.word	0x00004619
    295c:	000048f1 	.word	0x000048f1

00002960 <MiWi_TickGet>:
{
	return tc_get_count_value(&tc_instance);
}

MIWI_TICK MiWi_TickGet(void)
{
    2960:	b510      	push	{r4, lr}
	MIWI_TICK count;
	count.Val = tc_get_count_value(&tc_instance);
    2962:	4802      	ldr	r0, [pc, #8]	; (296c <MiWi_TickGet+0xc>)
    2964:	4b02      	ldr	r3, [pc, #8]	; (2970 <MiWi_TickGet+0x10>)
    2966:	4798      	blx	r3
	return count;
}
    2968:	bd10      	pop	{r4, pc}
    296a:	46c0      	nop			; (mov r8, r8)
    296c:	200007e8 	.word	0x200007e8
    2970:	00004925 	.word	0x00004925

00002974 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    2974:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    2976:	2000      	movs	r0, #0
    2978:	4b08      	ldr	r3, [pc, #32]	; (299c <delay_init+0x28>)
    297a:	4798      	blx	r3
    297c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    297e:	4c08      	ldr	r4, [pc, #32]	; (29a0 <delay_init+0x2c>)
    2980:	21fa      	movs	r1, #250	; 0xfa
    2982:	0089      	lsls	r1, r1, #2
    2984:	47a0      	blx	r4
    2986:	4b07      	ldr	r3, [pc, #28]	; (29a4 <delay_init+0x30>)
    2988:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    298a:	4907      	ldr	r1, [pc, #28]	; (29a8 <delay_init+0x34>)
    298c:	0028      	movs	r0, r5
    298e:	47a0      	blx	r4
    2990:	4b06      	ldr	r3, [pc, #24]	; (29ac <delay_init+0x38>)
    2992:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    2994:	2205      	movs	r2, #5
    2996:	4b06      	ldr	r3, [pc, #24]	; (29b0 <delay_init+0x3c>)
    2998:	601a      	str	r2, [r3, #0]
}
    299a:	bd70      	pop	{r4, r5, r6, pc}
    299c:	0000431d 	.word	0x0000431d
    29a0:	00005ab5 	.word	0x00005ab5
    29a4:	20000030 	.word	0x20000030
    29a8:	000f4240 	.word	0x000f4240
    29ac:	2000002c 	.word	0x2000002c
    29b0:	e000e010 	.word	0xe000e010

000029b4 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    29b4:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    29b6:	4b08      	ldr	r3, [pc, #32]	; (29d8 <delay_cycles_us+0x24>)
    29b8:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    29ba:	4a08      	ldr	r2, [pc, #32]	; (29dc <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    29bc:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    29be:	2180      	movs	r1, #128	; 0x80
    29c0:	0249      	lsls	r1, r1, #9
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
	while (n--) {
    29c2:	e006      	b.n	29d2 <delay_cycles_us+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
    29c4:	2c00      	cmp	r4, #0
    29c6:	d004      	beq.n	29d2 <delay_cycles_us+0x1e>
		SysTick->LOAD = n;
    29c8:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    29ca:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    29cc:	6813      	ldr	r3, [r2, #0]
    29ce:	420b      	tst	r3, r1
    29d0:	d0fc      	beq.n	29cc <delay_cycles_us+0x18>
    29d2:	3801      	subs	r0, #1
    29d4:	d2f6      	bcs.n	29c4 <delay_cycles_us+0x10>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
	}
}
    29d6:	bd30      	pop	{r4, r5, pc}
    29d8:	2000002c 	.word	0x2000002c
    29dc:	e000e010 	.word	0xe000e010

000029e0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    29e0:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    29e2:	4b08      	ldr	r3, [pc, #32]	; (2a04 <delay_cycles_ms+0x24>)
    29e4:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    29e6:	4a08      	ldr	r2, [pc, #32]	; (2a08 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    29e8:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    29ea:	2180      	movs	r1, #128	; 0x80
    29ec:	0249      	lsls	r1, r1, #9
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
    29ee:	e006      	b.n	29fe <delay_cycles_ms+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
    29f0:	2c00      	cmp	r4, #0
    29f2:	d004      	beq.n	29fe <delay_cycles_ms+0x1e>
		SysTick->LOAD = n;
    29f4:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    29f6:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    29f8:	6813      	ldr	r3, [r2, #0]
    29fa:	420b      	tst	r3, r1
    29fc:	d0fc      	beq.n	29f8 <delay_cycles_ms+0x18>
    29fe:	3801      	subs	r0, #1
    2a00:	d2f6      	bcs.n	29f0 <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
    2a02:	bd30      	pop	{r4, r5, pc}
    2a04:	20000030 	.word	0x20000030
    2a08:	e000e010 	.word	0xe000e010

00002a0c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    2a0c:	4b0c      	ldr	r3, [pc, #48]	; (2a40 <cpu_irq_enter_critical+0x34>)
    2a0e:	681b      	ldr	r3, [r3, #0]
    2a10:	2b00      	cmp	r3, #0
    2a12:	d110      	bne.n	2a36 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2a14:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    2a18:	2b00      	cmp	r3, #0
    2a1a:	d109      	bne.n	2a30 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2a1c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2a1e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2a22:	2200      	movs	r2, #0
    2a24:	4b07      	ldr	r3, [pc, #28]	; (2a44 <cpu_irq_enter_critical+0x38>)
    2a26:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2a28:	3201      	adds	r2, #1
    2a2a:	4b07      	ldr	r3, [pc, #28]	; (2a48 <cpu_irq_enter_critical+0x3c>)
    2a2c:	701a      	strb	r2, [r3, #0]
    2a2e:	e002      	b.n	2a36 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2a30:	2200      	movs	r2, #0
    2a32:	4b05      	ldr	r3, [pc, #20]	; (2a48 <cpu_irq_enter_critical+0x3c>)
    2a34:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2a36:	4a02      	ldr	r2, [pc, #8]	; (2a40 <cpu_irq_enter_critical+0x34>)
    2a38:	6813      	ldr	r3, [r2, #0]
    2a3a:	3301      	adds	r3, #1
    2a3c:	6013      	str	r3, [r2, #0]
}
    2a3e:	4770      	bx	lr
    2a40:	2000037c 	.word	0x2000037c
    2a44:	20000034 	.word	0x20000034
    2a48:	20000380 	.word	0x20000380

00002a4c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2a4c:	4b08      	ldr	r3, [pc, #32]	; (2a70 <cpu_irq_leave_critical+0x24>)
    2a4e:	681a      	ldr	r2, [r3, #0]
    2a50:	3a01      	subs	r2, #1
    2a52:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2a54:	681b      	ldr	r3, [r3, #0]
    2a56:	2b00      	cmp	r3, #0
    2a58:	d109      	bne.n	2a6e <cpu_irq_leave_critical+0x22>
    2a5a:	4b06      	ldr	r3, [pc, #24]	; (2a74 <cpu_irq_leave_critical+0x28>)
    2a5c:	781b      	ldrb	r3, [r3, #0]
    2a5e:	2b00      	cmp	r3, #0
    2a60:	d005      	beq.n	2a6e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    2a62:	2201      	movs	r2, #1
    2a64:	4b04      	ldr	r3, [pc, #16]	; (2a78 <cpu_irq_leave_critical+0x2c>)
    2a66:	701a      	strb	r2, [r3, #0]
    2a68:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2a6c:	b662      	cpsie	i
	}
}
    2a6e:	4770      	bx	lr
    2a70:	2000037c 	.word	0x2000037c
    2a74:	20000380 	.word	0x20000380
    2a78:	20000034 	.word	0x20000034

00002a7c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    2a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a7e:	4657      	mov	r7, sl
    2a80:	464e      	mov	r6, r9
    2a82:	4645      	mov	r5, r8
    2a84:	b4e0      	push	{r5, r6, r7}
    2a86:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    2a88:	ac01      	add	r4, sp, #4
    2a8a:	2601      	movs	r6, #1
    2a8c:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    2a8e:	2700      	movs	r7, #0
    2a90:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2a92:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    2a94:	0021      	movs	r1, r4
    2a96:	2013      	movs	r0, #19
    2a98:	4d40      	ldr	r5, [pc, #256]	; (2b9c <system_board_init+0x120>)
    2a9a:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2a9c:	4b40      	ldr	r3, [pc, #256]	; (2ba0 <system_board_init+0x124>)
    2a9e:	4698      	mov	r8, r3
    2aa0:	2380      	movs	r3, #128	; 0x80
    2aa2:	031b      	lsls	r3, r3, #12
    2aa4:	469a      	mov	sl, r3
    2aa6:	4643      	mov	r3, r8
    2aa8:	4652      	mov	r2, sl
    2aaa:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2aac:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_1_PIN, &pin_conf);
    2aae:	0021      	movs	r1, r4
    2ab0:	2012      	movs	r0, #18
    2ab2:	47a8      	blx	r5
    2ab4:	2380      	movs	r3, #128	; 0x80
    2ab6:	02db      	lsls	r3, r3, #11
    2ab8:	4699      	mov	r9, r3
    2aba:	4643      	mov	r3, r8
    2abc:	464a      	mov	r2, r9
    2abe:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);
	
	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2ac0:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(PIN_PA18, &pin_conf);
    2ac2:	0021      	movs	r1, r4
    2ac4:	2012      	movs	r0, #18
    2ac6:	47a8      	blx	r5
    2ac8:	4643      	mov	r3, r8
    2aca:	464a      	mov	r2, r9
    2acc:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(PIN_PA18, LED_1_INACTIVE);
	
	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2ace:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(PIN_PA19, &pin_conf);
    2ad0:	0021      	movs	r1, r4
    2ad2:	2013      	movs	r0, #19
    2ad4:	47a8      	blx	r5
    2ad6:	4643      	mov	r3, r8
    2ad8:	4652      	mov	r2, sl
    2ada:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(PIN_PA19, LED_1_INACTIVE);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2adc:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(PIN_PA28, &pin_conf);
    2ade:	0021      	movs	r1, r4
    2ae0:	201c      	movs	r0, #28
    2ae2:	47a8      	blx	r5
    2ae4:	2380      	movs	r3, #128	; 0x80
    2ae6:	055b      	lsls	r3, r3, #21
    2ae8:	4642      	mov	r2, r8
    2aea:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(PIN_PA28, LED_1_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    2aec:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    2aee:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    2af0:	0021      	movs	r1, r4
    2af2:	201c      	movs	r0, #28
    2af4:	47a8      	blx	r5


	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    2af6:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    2af8:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(PIN_PA22, &pin_conf);
    2afa:	0021      	movs	r1, r4
    2afc:	2016      	movs	r0, #22
    2afe:	47a8      	blx	r5
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    2b00:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    2b02:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(PIN_PA06, &pin_conf);
    2b04:	0021      	movs	r1, r4
    2b06:	2006      	movs	r0, #6
    2b08:	47a8      	blx	r5
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    2b0a:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    2b0c:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(PIN_PA07, &pin_conf);
    2b0e:	0021      	movs	r1, r4
    2b10:	2007      	movs	r0, #7
    2b12:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    2b14:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    2b16:	70a7      	strb	r7, [r4, #2]
	
#ifdef CONF_BOARD_AT86RFX
	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2b18:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
    2b1a:	0021      	movs	r1, r4
    2b1c:	2052      	movs	r0, #82	; 0x52
    2b1e:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
    2b20:	0021      	movs	r1, r4
    2b22:	203e      	movs	r0, #62	; 0x3e
    2b24:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
    2b26:	0021      	movs	r1, r4
    2b28:	203f      	movs	r0, #63	; 0x3f
    2b2a:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
    2b2c:	0021      	movs	r1, r4
    2b2e:	202f      	movs	r0, #47	; 0x2f
    2b30:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
    2b32:	0021      	movs	r1, r4
    2b34:	2014      	movs	r0, #20
    2b36:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2b38:	4b1a      	ldr	r3, [pc, #104]	; (2ba4 <system_board_init+0x128>)
    2b3a:	464a      	mov	r2, r9
    2b3c:	619a      	str	r2, [r3, #24]
    2b3e:	3b80      	subs	r3, #128	; 0x80
    2b40:	2280      	movs	r2, #128	; 0x80
    2b42:	05d2      	lsls	r2, r2, #23
    2b44:	619a      	str	r2, [r3, #24]
    2b46:	2280      	movs	r2, #128	; 0x80
    2b48:	0612      	lsls	r2, r2, #24
    2b4a:	619a      	str	r2, [r3, #24]
    2b4c:	2280      	movs	r2, #128	; 0x80
    2b4e:	0212      	lsls	r2, r2, #8
    2b50:	4691      	mov	r9, r2
    2b52:	619a      	str	r2, [r3, #24]
    2b54:	2380      	movs	r3, #128	; 0x80
    2b56:	035b      	lsls	r3, r3, #13
    2b58:	4642      	mov	r2, r8
    2b5a:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(AT86RFX_SPI_SCK, true);
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    2b5c:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
    2b5e:	0021      	movs	r1, r4
    2b60:	2053      	movs	r0, #83	; 0x53
    2b62:	47a8      	blx	r5
	
	/* SAMR30 Antenna Diversity Configuration */

	MCLK->APBCMASK.reg |= (1<<MCLK_APBCMASK_RFCTRL_Pos);
    2b64:	4a10      	ldr	r2, [pc, #64]	; (2ba8 <system_board_init+0x12c>)
    2b66:	69d3      	ldr	r3, [r2, #28]
    2b68:	4649      	mov	r1, r9
    2b6a:	430b      	orrs	r3, r1
    2b6c:	61d3      	str	r3, [r2, #28]
		
	/*Pins  PA12/RFCTRL2 and PA09/RFCTRL1 are used as DIG1 and DIG2 pins respectively in SAMR30 Xplained Pro*/	
	
	/* FECTRL register is Written with value 4 => F2CFG = 00 and F1CFG = 01 */	
	REG_RFCTRL_FECFG = RFCTRL_CFG_ANT_DIV;
    2b6e:	2204      	movs	r2, #4
    2b70:	4b0e      	ldr	r3, [pc, #56]	; (2bac <system_board_init+0x130>)
    2b72:	801a      	strh	r2, [r3, #0]
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2b74:	466b      	mov	r3, sp
    2b76:	709e      	strb	r6, [r3, #2]
	config->powersave    = false;
    2b78:	70df      	strb	r7, [r3, #3]
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	
	/*MUX Position is 'F' i.e 5 for FECTRL Function and is same for all  FECTRL supported pins
	 * as provided in the data sheet */
	config_pinmux.mux_position = MUX_PA09F_RFCTRL_FECTRL1 ;
    2b7a:	2305      	movs	r3, #5
    2b7c:	466a      	mov	r2, sp
    2b7e:	7013      	strb	r3, [r2, #0]
	
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
    2b80:	7056      	strb	r6, [r2, #1]
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
    2b82:	4669      	mov	r1, sp
    2b84:	2009      	movs	r0, #9
    2b86:	4c0a      	ldr	r4, [pc, #40]	; (2bb0 <system_board_init+0x134>)
    2b88:	47a0      	blx	r4
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
    2b8a:	4669      	mov	r1, sp
    2b8c:	200c      	movs	r0, #12
    2b8e:	47a0      	blx	r4
#endif	
}
    2b90:	b002      	add	sp, #8
    2b92:	bc1c      	pop	{r2, r3, r4}
    2b94:	4690      	mov	r8, r2
    2b96:	4699      	mov	r9, r3
    2b98:	46a2      	mov	sl, r4
    2b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b9c:	00002dcd 	.word	0x00002dcd
    2ba0:	40002800 	.word	0x40002800
    2ba4:	40002900 	.word	0x40002900
    2ba8:	40000400 	.word	0x40000400
    2bac:	42003c00 	.word	0x42003c00
    2bb0:	000044f5 	.word	0x000044f5

00002bb4 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2bb4:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    2bb6:	2a00      	cmp	r2, #0
    2bb8:	d10d      	bne.n	2bd6 <extint_register_callback+0x22>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    2bba:	008b      	lsls	r3, r1, #2
    2bbc:	4a07      	ldr	r2, [pc, #28]	; (2bdc <extint_register_callback+0x28>)
    2bbe:	589b      	ldr	r3, [r3, r2]
    2bc0:	2b00      	cmp	r3, #0
    2bc2:	d103      	bne.n	2bcc <extint_register_callback+0x18>
		_extint_dev.callbacks[channel] = callback;
    2bc4:	0089      	lsls	r1, r1, #2
    2bc6:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    2bc8:	2300      	movs	r3, #0
    2bca:	e004      	b.n	2bd6 <extint_register_callback+0x22>
	} else if (_extint_dev.callbacks[channel] == callback) {
    2bcc:	4283      	cmp	r3, r0
    2bce:	d001      	beq.n	2bd4 <extint_register_callback+0x20>
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    2bd0:	231d      	movs	r3, #29
    2bd2:	e000      	b.n	2bd6 <extint_register_callback+0x22>

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
    2bd4:	2300      	movs	r3, #0
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    2bd6:	0018      	movs	r0, r3
    2bd8:	4770      	bx	lr
    2bda:	46c0      	nop			; (mov r8, r8)
    2bdc:	20000808 	.word	0x20000808

00002be0 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2be0:	2317      	movs	r3, #23
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    2be2:	2900      	cmp	r1, #0
    2be4:	d107      	bne.n	2bf6 <extint_chan_enable_callback+0x16>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    2be6:	2200      	movs	r2, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    2be8:	281f      	cmp	r0, #31
    2bea:	d800      	bhi.n	2bee <extint_chan_enable_callback+0xe>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    2bec:	4a03      	ldr	r2, [pc, #12]	; (2bfc <extint_chan_enable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENSET.reg = (1UL << channel);
    2bee:	2301      	movs	r3, #1
    2bf0:	4083      	lsls	r3, r0
    2bf2:	6113      	str	r3, [r2, #16]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    2bf4:	2300      	movs	r3, #0
}
    2bf6:	0018      	movs	r0, r3
    2bf8:	4770      	bx	lr
    2bfa:	46c0      	nop			; (mov r8, r8)
    2bfc:	40002400 	.word	0x40002400

00002c00 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2c00:	2317      	movs	r3, #23
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    2c02:	2900      	cmp	r1, #0
    2c04:	d107      	bne.n	2c16 <extint_chan_disable_callback+0x16>
	} else {
		Assert(false);
		return NULL;
    2c06:	2200      	movs	r2, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    2c08:	281f      	cmp	r0, #31
    2c0a:	d800      	bhi.n	2c0e <extint_chan_disable_callback+0xe>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    2c0c:	4a03      	ldr	r2, [pc, #12]	; (2c1c <extint_chan_disable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENCLR.reg = (1UL << channel);
    2c0e:	2301      	movs	r3, #1
    2c10:	4083      	lsls	r3, r0
    2c12:	60d3      	str	r3, [r2, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    2c14:	2300      	movs	r3, #0
}
    2c16:	0018      	movs	r0, r3
    2c18:	4770      	bx	lr
    2c1a:	46c0      	nop			; (mov r8, r8)
    2c1c:	40002400 	.word	0x40002400

00002c20 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    2c20:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    2c22:	2200      	movs	r2, #0
    2c24:	4b15      	ldr	r3, [pc, #84]	; (2c7c <EIC_Handler+0x5c>)
    2c26:	701a      	strb	r2, [r3, #0]
    2c28:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    2c2a:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    2c2c:	4e14      	ldr	r6, [pc, #80]	; (2c80 <EIC_Handler+0x60>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    2c2e:	4c13      	ldr	r4, [pc, #76]	; (2c7c <EIC_Handler+0x5c>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    2c30:	2b1f      	cmp	r3, #31
    2c32:	d919      	bls.n	2c68 <EIC_Handler+0x48>
    2c34:	e00f      	b.n	2c56 <EIC_Handler+0x36>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    2c36:	2100      	movs	r1, #0
    2c38:	e000      	b.n	2c3c <EIC_Handler+0x1c>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    2c3a:	4912      	ldr	r1, [pc, #72]	; (2c84 <EIC_Handler+0x64>)
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    2c3c:	614a      	str	r2, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    2c3e:	009b      	lsls	r3, r3, #2
    2c40:	599b      	ldr	r3, [r3, r6]
    2c42:	2b00      	cmp	r3, #0
    2c44:	d000      	beq.n	2c48 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    2c46:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    2c48:	7823      	ldrb	r3, [r4, #0]
    2c4a:	3301      	adds	r3, #1
    2c4c:	b2db      	uxtb	r3, r3
    2c4e:	7023      	strb	r3, [r4, #0]
    2c50:	2b0f      	cmp	r3, #15
    2c52:	d9ed      	bls.n	2c30 <EIC_Handler+0x10>
    2c54:	e011      	b.n	2c7a <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    2c56:	0029      	movs	r1, r5
    2c58:	4019      	ands	r1, r3
    2c5a:	2201      	movs	r2, #1
    2c5c:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
    2c5e:	2100      	movs	r1, #0
    2c60:	6949      	ldr	r1, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
    2c62:	4211      	tst	r1, r2
    2c64:	d1e7      	bne.n	2c36 <EIC_Handler+0x16>
    2c66:	e7ef      	b.n	2c48 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    2c68:	0029      	movs	r1, r5
    2c6a:	4019      	ands	r1, r3
    2c6c:	2201      	movs	r2, #1
    2c6e:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
    2c70:	4904      	ldr	r1, [pc, #16]	; (2c84 <EIC_Handler+0x64>)
    2c72:	6949      	ldr	r1, [r1, #20]
    2c74:	4211      	tst	r1, r2
    2c76:	d1e0      	bne.n	2c3a <EIC_Handler+0x1a>
    2c78:	e7e6      	b.n	2c48 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    2c7a:	bd70      	pop	{r4, r5, r6, pc}
    2c7c:	20000804 	.word	0x20000804
    2c80:	20000808 	.word	0x20000808
    2c84:	40002400 	.word	0x40002400

00002c88 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    2c88:	4a06      	ldr	r2, [pc, #24]	; (2ca4 <_extint_enable+0x1c>)
    2c8a:	7811      	ldrb	r1, [r2, #0]
    2c8c:	2302      	movs	r3, #2
    2c8e:	430b      	orrs	r3, r1
    2c90:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    2c92:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    2c94:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    2c96:	6853      	ldr	r3, [r2, #4]
    2c98:	4219      	tst	r1, r3
    2c9a:	d1fc      	bne.n	2c96 <_extint_enable+0xe>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    2c9c:	6853      	ldr	r3, [r2, #4]
    2c9e:	4218      	tst	r0, r3
    2ca0:	d1f9      	bne.n	2c96 <_extint_enable+0xe>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    2ca2:	4770      	bx	lr
    2ca4:	40002400 	.word	0x40002400

00002ca8 <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    2ca8:	4a06      	ldr	r2, [pc, #24]	; (2cc4 <_extint_disable+0x1c>)
    2caa:	7813      	ldrb	r3, [r2, #0]
    2cac:	2102      	movs	r1, #2
    2cae:	438b      	bics	r3, r1
    2cb0:	7013      	strb	r3, [r2, #0]
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    2cb2:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    2cb4:	6853      	ldr	r3, [r2, #4]
    2cb6:	4219      	tst	r1, r3
    2cb8:	d1fc      	bne.n	2cb4 <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    2cba:	6853      	ldr	r3, [r2, #4]
    2cbc:	4218      	tst	r0, r3
    2cbe:	d1f9      	bne.n	2cb4 <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    2cc0:	4770      	bx	lr
    2cc2:	46c0      	nop			; (mov r8, r8)
    2cc4:	40002400 	.word	0x40002400

00002cc8 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    2cc8:	b510      	push	{r4, lr}
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    2cca:	4a14      	ldr	r2, [pc, #80]	; (2d1c <_system_extint_init+0x54>)
    2ccc:	6953      	ldr	r3, [r2, #20]
    2cce:	2180      	movs	r1, #128	; 0x80
    2cd0:	0089      	lsls	r1, r1, #2
    2cd2:	430b      	orrs	r3, r1
    2cd4:	6153      	str	r3, [r2, #20]
	system_gclk_chan_enable(EIC_GCLK_ID);
#endif

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
    2cd6:	4a12      	ldr	r2, [pc, #72]	; (2d20 <_system_extint_init+0x58>)
    2cd8:	7811      	ldrb	r1, [r2, #0]
    2cda:	2301      	movs	r3, #1
    2cdc:	430b      	orrs	r3, r1
    2cde:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    2ce0:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    2ce2:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    2ce4:	6853      	ldr	r3, [r2, #4]
    2ce6:	4219      	tst	r1, r3
    2ce8:	d1fc      	bne.n	2ce4 <_system_extint_init+0x1c>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    2cea:	6853      	ldr	r3, [r2, #4]
    2cec:	4218      	tst	r0, r3
    2cee:	d009      	beq.n	2d04 <_system_extint_init+0x3c>
    2cf0:	e7f8      	b.n	2ce4 <_system_extint_init+0x1c>

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
    2cf2:	c304      	stmia	r3!, {r2}
#endif

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    2cf4:	428b      	cmp	r3, r1
    2cf6:	d1fc      	bne.n	2cf2 <_system_extint_init+0x2a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2cf8:	2208      	movs	r2, #8
    2cfa:	4b0a      	ldr	r3, [pc, #40]	; (2d24 <_system_extint_init+0x5c>)
    2cfc:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
    2cfe:	4b0a      	ldr	r3, [pc, #40]	; (2d28 <_system_extint_init+0x60>)
    2d00:	4798      	blx	r3
}
    2d02:	e009      	b.n	2d18 <_system_extint_init+0x50>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
	}
#else
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_ULP32K;
    2d04:	4a06      	ldr	r2, [pc, #24]	; (2d20 <_system_extint_init+0x58>)
    2d06:	7811      	ldrb	r1, [r2, #0]
    2d08:	2310      	movs	r3, #16
    2d0a:	430b      	orrs	r3, r1
    2d0c:	7013      	strb	r3, [r2, #0]
    2d0e:	4b07      	ldr	r3, [pc, #28]	; (2d2c <_system_extint_init+0x64>)
    2d10:	0019      	movs	r1, r3
    2d12:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
    2d14:	2200      	movs	r2, #0
    2d16:	e7ec      	b.n	2cf2 <_system_extint_init+0x2a>
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
}
    2d18:	bd10      	pop	{r4, pc}
    2d1a:	46c0      	nop			; (mov r8, r8)
    2d1c:	40000400 	.word	0x40000400
    2d20:	40002400 	.word	0x40002400
    2d24:	e000e100 	.word	0xe000e100
    2d28:	00002c89 	.word	0x00002c89
    2d2c:	20000808 	.word	0x20000808

00002d30 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    2d30:	2300      	movs	r3, #0
    2d32:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    2d34:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    2d36:	2201      	movs	r2, #1
    2d38:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
    2d3a:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    2d3c:	3201      	adds	r2, #1
    2d3e:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
    2d40:	7243      	strb	r3, [r0, #9]
}
    2d42:	4770      	bx	lr

00002d44 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    2d44:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d46:	b083      	sub	sp, #12
    2d48:	0005      	movs	r5, r0
    2d4a:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
    2d4c:	4b1b      	ldr	r3, [pc, #108]	; (2dbc <extint_chan_set_config+0x78>)
    2d4e:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2d50:	a901      	add	r1, sp, #4
    2d52:	2300      	movs	r3, #0
    2d54:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    2d56:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    2d58:	7923      	ldrb	r3, [r4, #4]
    2d5a:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    2d5c:	7a23      	ldrb	r3, [r4, #8]
    2d5e:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    2d60:	7820      	ldrb	r0, [r4, #0]
    2d62:	4b17      	ldr	r3, [pc, #92]	; (2dc0 <extint_chan_set_config+0x7c>)
    2d64:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    2d66:	2000      	movs	r0, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    2d68:	2d1f      	cmp	r5, #31
    2d6a:	d800      	bhi.n	2d6e <extint_chan_set_config+0x2a>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    2d6c:	4815      	ldr	r0, [pc, #84]	; (2dc4 <extint_chan_set_config+0x80>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    2d6e:	2107      	movs	r1, #7
    2d70:	4029      	ands	r1, r5
    2d72:	0089      	lsls	r1, r1, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    2d74:	7ae2      	ldrb	r2, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    2d76:	7aa3      	ldrb	r3, [r4, #10]
    2d78:	2b00      	cmp	r3, #0
    2d7a:	d001      	beq.n	2d80 <extint_chan_set_config+0x3c>
		new_config |= EIC_CONFIG_FILTEN0;
    2d7c:	2308      	movs	r3, #8
    2d7e:	431a      	orrs	r2, r3
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    2d80:	08eb      	lsrs	r3, r5, #3
    2d82:	009b      	lsls	r3, r3, #2
    2d84:	18c3      	adds	r3, r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    2d86:	69de      	ldr	r6, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    2d88:	270f      	movs	r7, #15
    2d8a:	408f      	lsls	r7, r1
    2d8c:	43be      	bics	r6, r7
    2d8e:	408a      	lsls	r2, r1
    2d90:	4332      	orrs	r2, r6
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    2d92:	61da      	str	r2, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
    2d94:	7a63      	ldrb	r3, [r4, #9]
    2d96:	2b00      	cmp	r3, #0
    2d98:	d005      	beq.n	2da6 <extint_chan_set_config+0x62>
		EIC_module->ASYNCH.reg |= (1UL << channel);
    2d9a:	6982      	ldr	r2, [r0, #24]
    2d9c:	2301      	movs	r3, #1
    2d9e:	40ab      	lsls	r3, r5
    2da0:	4313      	orrs	r3, r2
    2da2:	6183      	str	r3, [r0, #24]
    2da4:	e006      	b.n	2db4 <extint_chan_set_config+0x70>
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
    2da6:	6983      	ldr	r3, [r0, #24]
    2da8:	2201      	movs	r2, #1
    2daa:	40aa      	lsls	r2, r5
    2dac:	041b      	lsls	r3, r3, #16
    2dae:	0c1b      	lsrs	r3, r3, #16
    2db0:	4393      	bics	r3, r2
    2db2:	6183      	str	r3, [r0, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
    2db4:	4b04      	ldr	r3, [pc, #16]	; (2dc8 <extint_chan_set_config+0x84>)
    2db6:	4798      	blx	r3
}
    2db8:	b003      	add	sp, #12
    2dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2dbc:	00002ca9 	.word	0x00002ca9
    2dc0:	000044f5 	.word	0x000044f5
    2dc4:	40002400 	.word	0x40002400
    2dc8:	00002c89 	.word	0x00002c89

00002dcc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    2dcc:	b500      	push	{lr}
    2dce:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2dd0:	ab01      	add	r3, sp, #4
    2dd2:	2280      	movs	r2, #128	; 0x80
    2dd4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    2dd6:	780a      	ldrb	r2, [r1, #0]
    2dd8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    2dda:	784a      	ldrb	r2, [r1, #1]
    2ddc:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    2dde:	788a      	ldrb	r2, [r1, #2]
    2de0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    2de2:	0019      	movs	r1, r3
    2de4:	4b01      	ldr	r3, [pc, #4]	; (2dec <port_pin_set_config+0x20>)
    2de6:	4798      	blx	r3
}
    2de8:	b003      	add	sp, #12
    2dea:	bd00      	pop	{pc}
    2dec:	000044f5 	.word	0x000044f5

00002df0 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    2df0:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    2df2:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2df4:	2340      	movs	r3, #64	; 0x40
    2df6:	2400      	movs	r4, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    2df8:	4281      	cmp	r1, r0
    2dfa:	d201      	bcs.n	2e00 <_sercom_get_sync_baud_val+0x10>
    2dfc:	e00a      	b.n	2e14 <_sercom_get_sync_baud_val+0x24>

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
		baud_calculated++;
    2dfe:	001c      	movs	r4, r3
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
    2e00:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    2e02:	1c63      	adds	r3, r4, #1
    2e04:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    2e06:	4288      	cmp	r0, r1
    2e08:	d9f9      	bls.n	2dfe <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2e0a:	2340      	movs	r3, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    2e0c:	2cff      	cmp	r4, #255	; 0xff
    2e0e:	d801      	bhi.n	2e14 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
    2e10:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    2e12:	2300      	movs	r3, #0
	}
}
    2e14:	0018      	movs	r0, r3
    2e16:	bd10      	pop	{r4, pc}

00002e18 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    2e18:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e1a:	465f      	mov	r7, fp
    2e1c:	4656      	mov	r6, sl
    2e1e:	464d      	mov	r5, r9
    2e20:	4644      	mov	r4, r8
    2e22:	b4f0      	push	{r4, r5, r6, r7}
    2e24:	b089      	sub	sp, #36	; 0x24
    2e26:	000c      	movs	r4, r1
    2e28:	9205      	str	r2, [sp, #20]
    2e2a:	aa12      	add	r2, sp, #72	; 0x48
    2e2c:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    2e2e:	0002      	movs	r2, r0
    2e30:	434a      	muls	r2, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2e32:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    2e34:	42a2      	cmp	r2, r4
    2e36:	d900      	bls.n	2e3a <_sercom_get_async_baud_val+0x22>
    2e38:	e0c6      	b.n	2fc8 <_sercom_get_async_baud_val+0x1b0>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    2e3a:	2b00      	cmp	r3, #0
    2e3c:	d151      	bne.n	2ee2 <_sercom_get_async_baud_val+0xca>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    2e3e:	0002      	movs	r2, r0
    2e40:	0008      	movs	r0, r1
    2e42:	2100      	movs	r1, #0
    2e44:	4d64      	ldr	r5, [pc, #400]	; (2fd8 <_sercom_get_async_baud_val+0x1c0>)
    2e46:	47a8      	blx	r5
    2e48:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
    2e4a:	0026      	movs	r6, r4
    2e4c:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    2e4e:	2300      	movs	r3, #0
    2e50:	2400      	movs	r4, #0
    2e52:	9300      	str	r3, [sp, #0]
    2e54:	9401      	str	r4, [sp, #4]
    2e56:	2200      	movs	r2, #0
    2e58:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    2e5a:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    2e5c:	2120      	movs	r1, #32
    2e5e:	468c      	mov	ip, r1
    2e60:	391f      	subs	r1, #31
    2e62:	9602      	str	r6, [sp, #8]
    2e64:	9703      	str	r7, [sp, #12]
    2e66:	2420      	movs	r4, #32
    2e68:	4264      	negs	r4, r4
    2e6a:	1904      	adds	r4, r0, r4
    2e6c:	d403      	bmi.n	2e76 <_sercom_get_async_baud_val+0x5e>
    2e6e:	000d      	movs	r5, r1
    2e70:	40a5      	lsls	r5, r4
    2e72:	46a8      	mov	r8, r5
    2e74:	e004      	b.n	2e80 <_sercom_get_async_baud_val+0x68>
    2e76:	4664      	mov	r4, ip
    2e78:	1a24      	subs	r4, r4, r0
    2e7a:	000d      	movs	r5, r1
    2e7c:	40e5      	lsrs	r5, r4
    2e7e:	46a8      	mov	r8, r5
    2e80:	000c      	movs	r4, r1
    2e82:	4084      	lsls	r4, r0
    2e84:	46a1      	mov	r9, r4

		r = r << 1;
    2e86:	0014      	movs	r4, r2
    2e88:	001d      	movs	r5, r3
    2e8a:	18a4      	adds	r4, r4, r2
    2e8c:	415d      	adcs	r5, r3
    2e8e:	0022      	movs	r2, r4
    2e90:	002b      	movs	r3, r5

		if (n & bit_shift) {
    2e92:	4646      	mov	r6, r8
    2e94:	465f      	mov	r7, fp
    2e96:	423e      	tst	r6, r7
    2e98:	d003      	beq.n	2ea2 <_sercom_get_async_baud_val+0x8a>
			r |= 0x01;
    2e9a:	000e      	movs	r6, r1
    2e9c:	4326      	orrs	r6, r4
    2e9e:	0032      	movs	r2, r6
    2ea0:	002b      	movs	r3, r5
		}

		if (r >= d) {
    2ea2:	9c02      	ldr	r4, [sp, #8]
    2ea4:	9d03      	ldr	r5, [sp, #12]
    2ea6:	429d      	cmp	r5, r3
    2ea8:	d80f      	bhi.n	2eca <_sercom_get_async_baud_val+0xb2>
    2eaa:	d101      	bne.n	2eb0 <_sercom_get_async_baud_val+0x98>
    2eac:	4294      	cmp	r4, r2
    2eae:	d80c      	bhi.n	2eca <_sercom_get_async_baud_val+0xb2>
			r = r - d;
    2eb0:	9c02      	ldr	r4, [sp, #8]
    2eb2:	9d03      	ldr	r5, [sp, #12]
    2eb4:	1b12      	subs	r2, r2, r4
    2eb6:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    2eb8:	464d      	mov	r5, r9
    2eba:	9e00      	ldr	r6, [sp, #0]
    2ebc:	9f01      	ldr	r7, [sp, #4]
    2ebe:	4335      	orrs	r5, r6
    2ec0:	003c      	movs	r4, r7
    2ec2:	4646      	mov	r6, r8
    2ec4:	4334      	orrs	r4, r6
    2ec6:	9500      	str	r5, [sp, #0]
    2ec8:	9401      	str	r4, [sp, #4]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    2eca:	3801      	subs	r0, #1
    2ecc:	d2cb      	bcs.n	2e66 <_sercom_get_async_baud_val+0x4e>
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
    2ece:	2200      	movs	r2, #0
    2ed0:	2301      	movs	r3, #1
    2ed2:	9800      	ldr	r0, [sp, #0]
    2ed4:	9901      	ldr	r1, [sp, #4]
    2ed6:	1a12      	subs	r2, r2, r0
    2ed8:	418b      	sbcs	r3, r1
    2eda:	0c12      	lsrs	r2, r2, #16
    2edc:	041b      	lsls	r3, r3, #16
    2ede:	431a      	orrs	r2, r3
    2ee0:	e06f      	b.n	2fc2 <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
    2ee2:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    2ee4:	2b01      	cmp	r3, #1
    2ee6:	d16c      	bne.n	2fc2 <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    2ee8:	0f63      	lsrs	r3, r4, #29
    2eea:	9304      	str	r3, [sp, #16]
    2eec:	00e3      	lsls	r3, r4, #3
    2eee:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
    2ef0:	000a      	movs	r2, r1
    2ef2:	2300      	movs	r3, #0
    2ef4:	2100      	movs	r1, #0
    2ef6:	4c38      	ldr	r4, [pc, #224]	; (2fd8 <_sercom_get_async_baud_val+0x1c0>)
    2ef8:	47a0      	blx	r4
    2efa:	0004      	movs	r4, r0
    2efc:	000d      	movs	r5, r1
    2efe:	2300      	movs	r3, #0
    2f00:	469c      	mov	ip, r3
    2f02:	9306      	str	r3, [sp, #24]
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
    2f04:	3320      	adds	r3, #32
    2f06:	469b      	mov	fp, r3
    2f08:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
    2f0a:	4663      	mov	r3, ip
    2f0c:	9307      	str	r3, [sp, #28]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    2f0e:	2300      	movs	r3, #0
    2f10:	9302      	str	r3, [sp, #8]
    2f12:	2200      	movs	r2, #0
    2f14:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    2f16:	213f      	movs	r1, #63	; 0x3f
    2f18:	9400      	str	r4, [sp, #0]
    2f1a:	9501      	str	r5, [sp, #4]
    2f1c:	000f      	movs	r7, r1
		bit_shift = (uint64_t)1 << i;
    2f1e:	2120      	movs	r1, #32
    2f20:	4249      	negs	r1, r1
    2f22:	1879      	adds	r1, r7, r1
    2f24:	d403      	bmi.n	2f2e <_sercom_get_async_baud_val+0x116>
    2f26:	0030      	movs	r0, r6
    2f28:	4088      	lsls	r0, r1
    2f2a:	4684      	mov	ip, r0
    2f2c:	e004      	b.n	2f38 <_sercom_get_async_baud_val+0x120>
    2f2e:	4659      	mov	r1, fp
    2f30:	1bc9      	subs	r1, r1, r7
    2f32:	0030      	movs	r0, r6
    2f34:	40c8      	lsrs	r0, r1
    2f36:	4684      	mov	ip, r0
    2f38:	0031      	movs	r1, r6
    2f3a:	40b9      	lsls	r1, r7
    2f3c:	4689      	mov	r9, r1

		r = r << 1;
    2f3e:	0010      	movs	r0, r2
    2f40:	0019      	movs	r1, r3
    2f42:	1880      	adds	r0, r0, r2
    2f44:	4159      	adcs	r1, r3
    2f46:	0002      	movs	r2, r0
    2f48:	000b      	movs	r3, r1

		if (n & bit_shift) {
    2f4a:	4644      	mov	r4, r8
    2f4c:	464d      	mov	r5, r9
    2f4e:	402c      	ands	r4, r5
    2f50:	46a2      	mov	sl, r4
    2f52:	4664      	mov	r4, ip
    2f54:	9d04      	ldr	r5, [sp, #16]
    2f56:	402c      	ands	r4, r5
    2f58:	46a4      	mov	ip, r4
    2f5a:	4654      	mov	r4, sl
    2f5c:	4665      	mov	r5, ip
    2f5e:	432c      	orrs	r4, r5
    2f60:	d003      	beq.n	2f6a <_sercom_get_async_baud_val+0x152>
			r |= 0x01;
    2f62:	0034      	movs	r4, r6
    2f64:	4304      	orrs	r4, r0
    2f66:	0022      	movs	r2, r4
    2f68:	000b      	movs	r3, r1
		}

		if (r >= d) {
    2f6a:	9800      	ldr	r0, [sp, #0]
    2f6c:	9901      	ldr	r1, [sp, #4]
    2f6e:	4299      	cmp	r1, r3
    2f70:	d80a      	bhi.n	2f88 <_sercom_get_async_baud_val+0x170>
    2f72:	d101      	bne.n	2f78 <_sercom_get_async_baud_val+0x160>
    2f74:	4290      	cmp	r0, r2
    2f76:	d807      	bhi.n	2f88 <_sercom_get_async_baud_val+0x170>
			r = r - d;
    2f78:	9800      	ldr	r0, [sp, #0]
    2f7a:	9901      	ldr	r1, [sp, #4]
    2f7c:	1a12      	subs	r2, r2, r0
    2f7e:	418b      	sbcs	r3, r1
			q |= bit_shift;
    2f80:	9902      	ldr	r1, [sp, #8]
    2f82:	4648      	mov	r0, r9
    2f84:	4301      	orrs	r1, r0
    2f86:	9102      	str	r1, [sp, #8]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    2f88:	3f01      	subs	r7, #1
    2f8a:	d2c8      	bcs.n	2f1e <_sercom_get_async_baud_val+0x106>
    2f8c:	9c00      	ldr	r4, [sp, #0]
    2f8e:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
    2f90:	9902      	ldr	r1, [sp, #8]
    2f92:	9a07      	ldr	r2, [sp, #28]
    2f94:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
    2f96:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
    2f98:	4910      	ldr	r1, [pc, #64]	; (2fdc <_sercom_get_async_baud_val+0x1c4>)
    2f9a:	428b      	cmp	r3, r1
    2f9c:	d90b      	bls.n	2fb6 <_sercom_get_async_baud_val+0x19e>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    2f9e:	9b06      	ldr	r3, [sp, #24]
    2fa0:	3301      	adds	r3, #1
    2fa2:	b2db      	uxtb	r3, r3
    2fa4:	0019      	movs	r1, r3
    2fa6:	9306      	str	r3, [sp, #24]
    2fa8:	0013      	movs	r3, r2
    2faa:	3301      	adds	r3, #1
    2fac:	9307      	str	r3, [sp, #28]
    2fae:	2908      	cmp	r1, #8
    2fb0:	d1ad      	bne.n	2f0e <_sercom_get_async_baud_val+0xf6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2fb2:	2540      	movs	r5, #64	; 0x40
    2fb4:	e008      	b.n	2fc8 <_sercom_get_async_baud_val+0x1b0>
    2fb6:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    2fb8:	9a06      	ldr	r2, [sp, #24]
    2fba:	2a08      	cmp	r2, #8
    2fbc:	d004      	beq.n	2fc8 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
    2fbe:	0352      	lsls	r2, r2, #13
    2fc0:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
    2fc2:	9b05      	ldr	r3, [sp, #20]
    2fc4:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    2fc6:	2500      	movs	r5, #0
}
    2fc8:	0028      	movs	r0, r5
    2fca:	b009      	add	sp, #36	; 0x24
    2fcc:	bc3c      	pop	{r2, r3, r4, r5}
    2fce:	4690      	mov	r8, r2
    2fd0:	4699      	mov	r9, r3
    2fd2:	46a2      	mov	sl, r4
    2fd4:	46ab      	mov	fp, r5
    2fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2fd8:	00005da1 	.word	0x00005da1
    2fdc:	00001fff 	.word	0x00001fff

00002fe0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    2fe0:	b510      	push	{r4, lr}
    2fe2:	b082      	sub	sp, #8
    2fe4:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    2fe6:	4b0e      	ldr	r3, [pc, #56]	; (3020 <sercom_set_gclk_generator+0x40>)
    2fe8:	781b      	ldrb	r3, [r3, #0]
    2fea:	2b00      	cmp	r3, #0
    2fec:	d001      	beq.n	2ff2 <sercom_set_gclk_generator+0x12>
    2fee:	2900      	cmp	r1, #0
    2ff0:	d00d      	beq.n	300e <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
    2ff2:	a901      	add	r1, sp, #4
    2ff4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    2ff6:	2011      	movs	r0, #17
    2ff8:	4b0a      	ldr	r3, [pc, #40]	; (3024 <sercom_set_gclk_generator+0x44>)
    2ffa:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    2ffc:	2011      	movs	r0, #17
    2ffe:	4b0a      	ldr	r3, [pc, #40]	; (3028 <sercom_set_gclk_generator+0x48>)
    3000:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    3002:	4b07      	ldr	r3, [pc, #28]	; (3020 <sercom_set_gclk_generator+0x40>)
    3004:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    3006:	2201      	movs	r2, #1
    3008:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    300a:	2000      	movs	r0, #0
    300c:	e006      	b.n	301c <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
    300e:	4b04      	ldr	r3, [pc, #16]	; (3020 <sercom_set_gclk_generator+0x40>)
    3010:	785b      	ldrb	r3, [r3, #1]
    3012:	4283      	cmp	r3, r0
    3014:	d001      	beq.n	301a <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    3016:	201d      	movs	r0, #29
    3018:	e000      	b.n	301c <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
    301a:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
    301c:	b002      	add	sp, #8
    301e:	bd10      	pop	{r4, pc}
    3020:	20000384 	.word	0x20000384
    3024:	000043f9 	.word	0x000043f9
    3028:	00004389 	.word	0x00004389

0000302c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    302c:	4b44      	ldr	r3, [pc, #272]	; (3140 <_sercom_get_default_pad+0x114>)
    302e:	4298      	cmp	r0, r3
    3030:	d034      	beq.n	309c <_sercom_get_default_pad+0x70>
    3032:	d807      	bhi.n	3044 <_sercom_get_default_pad+0x18>
    3034:	2384      	movs	r3, #132	; 0x84
    3036:	05db      	lsls	r3, r3, #23
    3038:	4298      	cmp	r0, r3
    303a:	d00d      	beq.n	3058 <_sercom_get_default_pad+0x2c>
    303c:	4b41      	ldr	r3, [pc, #260]	; (3144 <_sercom_get_default_pad+0x118>)
    303e:	4298      	cmp	r0, r3
    3040:	d01b      	beq.n	307a <_sercom_get_default_pad+0x4e>
    3042:	e06f      	b.n	3124 <_sercom_get_default_pad+0xf8>
    3044:	4b40      	ldr	r3, [pc, #256]	; (3148 <_sercom_get_default_pad+0x11c>)
    3046:	4298      	cmp	r0, r3
    3048:	d04a      	beq.n	30e0 <_sercom_get_default_pad+0xb4>
    304a:	4b40      	ldr	r3, [pc, #256]	; (314c <_sercom_get_default_pad+0x120>)
    304c:	4298      	cmp	r0, r3
    304e:	d058      	beq.n	3102 <_sercom_get_default_pad+0xd6>
    3050:	4b3f      	ldr	r3, [pc, #252]	; (3150 <_sercom_get_default_pad+0x124>)
    3052:	4298      	cmp	r0, r3
    3054:	d166      	bne.n	3124 <_sercom_get_default_pad+0xf8>
    3056:	e032      	b.n	30be <_sercom_get_default_pad+0x92>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3058:	2901      	cmp	r1, #1
    305a:	d006      	beq.n	306a <_sercom_get_default_pad+0x3e>
    305c:	2900      	cmp	r1, #0
    305e:	d063      	beq.n	3128 <_sercom_get_default_pad+0xfc>
    3060:	2902      	cmp	r1, #2
    3062:	d006      	beq.n	3072 <_sercom_get_default_pad+0x46>
    3064:	2903      	cmp	r1, #3
    3066:	d006      	beq.n	3076 <_sercom_get_default_pad+0x4a>
    3068:	e001      	b.n	306e <_sercom_get_default_pad+0x42>
    306a:	483a      	ldr	r0, [pc, #232]	; (3154 <_sercom_get_default_pad+0x128>)
    306c:	e067      	b.n	313e <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
    306e:	2000      	movs	r0, #0
    3070:	e065      	b.n	313e <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3072:	4839      	ldr	r0, [pc, #228]	; (3158 <_sercom_get_default_pad+0x12c>)
    3074:	e063      	b.n	313e <_sercom_get_default_pad+0x112>
    3076:	4839      	ldr	r0, [pc, #228]	; (315c <_sercom_get_default_pad+0x130>)
    3078:	e061      	b.n	313e <_sercom_get_default_pad+0x112>
    307a:	2901      	cmp	r1, #1
    307c:	d006      	beq.n	308c <_sercom_get_default_pad+0x60>
    307e:	2900      	cmp	r1, #0
    3080:	d054      	beq.n	312c <_sercom_get_default_pad+0x100>
    3082:	2902      	cmp	r1, #2
    3084:	d006      	beq.n	3094 <_sercom_get_default_pad+0x68>
    3086:	2903      	cmp	r1, #3
    3088:	d006      	beq.n	3098 <_sercom_get_default_pad+0x6c>
    308a:	e001      	b.n	3090 <_sercom_get_default_pad+0x64>
    308c:	4834      	ldr	r0, [pc, #208]	; (3160 <_sercom_get_default_pad+0x134>)
    308e:	e056      	b.n	313e <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
    3090:	2000      	movs	r0, #0
    3092:	e054      	b.n	313e <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3094:	4833      	ldr	r0, [pc, #204]	; (3164 <_sercom_get_default_pad+0x138>)
    3096:	e052      	b.n	313e <_sercom_get_default_pad+0x112>
    3098:	4833      	ldr	r0, [pc, #204]	; (3168 <_sercom_get_default_pad+0x13c>)
    309a:	e050      	b.n	313e <_sercom_get_default_pad+0x112>
    309c:	2901      	cmp	r1, #1
    309e:	d006      	beq.n	30ae <_sercom_get_default_pad+0x82>
    30a0:	2900      	cmp	r1, #0
    30a2:	d045      	beq.n	3130 <_sercom_get_default_pad+0x104>
    30a4:	2902      	cmp	r1, #2
    30a6:	d006      	beq.n	30b6 <_sercom_get_default_pad+0x8a>
    30a8:	2903      	cmp	r1, #3
    30aa:	d006      	beq.n	30ba <_sercom_get_default_pad+0x8e>
    30ac:	e001      	b.n	30b2 <_sercom_get_default_pad+0x86>
    30ae:	482f      	ldr	r0, [pc, #188]	; (316c <_sercom_get_default_pad+0x140>)
    30b0:	e045      	b.n	313e <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
    30b2:	2000      	movs	r0, #0
    30b4:	e043      	b.n	313e <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    30b6:	482e      	ldr	r0, [pc, #184]	; (3170 <_sercom_get_default_pad+0x144>)
    30b8:	e041      	b.n	313e <_sercom_get_default_pad+0x112>
    30ba:	482e      	ldr	r0, [pc, #184]	; (3174 <_sercom_get_default_pad+0x148>)
    30bc:	e03f      	b.n	313e <_sercom_get_default_pad+0x112>
    30be:	2901      	cmp	r1, #1
    30c0:	d006      	beq.n	30d0 <_sercom_get_default_pad+0xa4>
    30c2:	2900      	cmp	r1, #0
    30c4:	d036      	beq.n	3134 <_sercom_get_default_pad+0x108>
    30c6:	2902      	cmp	r1, #2
    30c8:	d006      	beq.n	30d8 <_sercom_get_default_pad+0xac>
    30ca:	2903      	cmp	r1, #3
    30cc:	d006      	beq.n	30dc <_sercom_get_default_pad+0xb0>
    30ce:	e001      	b.n	30d4 <_sercom_get_default_pad+0xa8>
    30d0:	4829      	ldr	r0, [pc, #164]	; (3178 <_sercom_get_default_pad+0x14c>)
    30d2:	e034      	b.n	313e <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
    30d4:	2000      	movs	r0, #0
    30d6:	e032      	b.n	313e <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    30d8:	4828      	ldr	r0, [pc, #160]	; (317c <_sercom_get_default_pad+0x150>)
    30da:	e030      	b.n	313e <_sercom_get_default_pad+0x112>
    30dc:	4828      	ldr	r0, [pc, #160]	; (3180 <_sercom_get_default_pad+0x154>)
    30de:	e02e      	b.n	313e <_sercom_get_default_pad+0x112>
    30e0:	2901      	cmp	r1, #1
    30e2:	d006      	beq.n	30f2 <_sercom_get_default_pad+0xc6>
    30e4:	2900      	cmp	r1, #0
    30e6:	d027      	beq.n	3138 <_sercom_get_default_pad+0x10c>
    30e8:	2902      	cmp	r1, #2
    30ea:	d006      	beq.n	30fa <_sercom_get_default_pad+0xce>
    30ec:	2903      	cmp	r1, #3
    30ee:	d006      	beq.n	30fe <_sercom_get_default_pad+0xd2>
    30f0:	e001      	b.n	30f6 <_sercom_get_default_pad+0xca>
    30f2:	4824      	ldr	r0, [pc, #144]	; (3184 <_sercom_get_default_pad+0x158>)
    30f4:	e023      	b.n	313e <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
    30f6:	2000      	movs	r0, #0
    30f8:	e021      	b.n	313e <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    30fa:	4823      	ldr	r0, [pc, #140]	; (3188 <_sercom_get_default_pad+0x15c>)
    30fc:	e01f      	b.n	313e <_sercom_get_default_pad+0x112>
    30fe:	4823      	ldr	r0, [pc, #140]	; (318c <_sercom_get_default_pad+0x160>)
    3100:	e01d      	b.n	313e <_sercom_get_default_pad+0x112>
    3102:	2901      	cmp	r1, #1
    3104:	d006      	beq.n	3114 <_sercom_get_default_pad+0xe8>
    3106:	2900      	cmp	r1, #0
    3108:	d018      	beq.n	313c <_sercom_get_default_pad+0x110>
    310a:	2902      	cmp	r1, #2
    310c:	d006      	beq.n	311c <_sercom_get_default_pad+0xf0>
    310e:	2903      	cmp	r1, #3
    3110:	d006      	beq.n	3120 <_sercom_get_default_pad+0xf4>
    3112:	e001      	b.n	3118 <_sercom_get_default_pad+0xec>
    3114:	481e      	ldr	r0, [pc, #120]	; (3190 <_sercom_get_default_pad+0x164>)
    3116:	e012      	b.n	313e <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
    3118:	2000      	movs	r0, #0
    311a:	e010      	b.n	313e <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    311c:	481d      	ldr	r0, [pc, #116]	; (3194 <_sercom_get_default_pad+0x168>)
    311e:	e00e      	b.n	313e <_sercom_get_default_pad+0x112>
    3120:	481d      	ldr	r0, [pc, #116]	; (3198 <_sercom_get_default_pad+0x16c>)
    3122:	e00c      	b.n	313e <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
    3124:	2000      	movs	r0, #0
    3126:	e00a      	b.n	313e <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3128:	481c      	ldr	r0, [pc, #112]	; (319c <_sercom_get_default_pad+0x170>)
    312a:	e008      	b.n	313e <_sercom_get_default_pad+0x112>
    312c:	2003      	movs	r0, #3
    312e:	e006      	b.n	313e <_sercom_get_default_pad+0x112>
    3130:	481b      	ldr	r0, [pc, #108]	; (31a0 <_sercom_get_default_pad+0x174>)
    3132:	e004      	b.n	313e <_sercom_get_default_pad+0x112>
    3134:	481b      	ldr	r0, [pc, #108]	; (31a4 <_sercom_get_default_pad+0x178>)
    3136:	e002      	b.n	313e <_sercom_get_default_pad+0x112>
    3138:	481b      	ldr	r0, [pc, #108]	; (31a8 <_sercom_get_default_pad+0x17c>)
    313a:	e000      	b.n	313e <_sercom_get_default_pad+0x112>
    313c:	481b      	ldr	r0, [pc, #108]	; (31ac <_sercom_get_default_pad+0x180>)
	}

	Assert(false);
	return 0;
}
    313e:	4770      	bx	lr
    3140:	42000800 	.word	0x42000800
    3144:	42000400 	.word	0x42000400
    3148:	42001000 	.word	0x42001000
    314c:	43000400 	.word	0x43000400
    3150:	42000c00 	.word	0x42000c00
    3154:	00050003 	.word	0x00050003
    3158:	00060003 	.word	0x00060003
    315c:	00070003 	.word	0x00070003
    3160:	00010003 	.word	0x00010003
    3164:	001e0003 	.word	0x001e0003
    3168:	001f0003 	.word	0x001f0003
    316c:	00090003 	.word	0x00090003
    3170:	000a0003 	.word	0x000a0003
    3174:	000b0003 	.word	0x000b0003
    3178:	00110003 	.word	0x00110003
    317c:	00120003 	.word	0x00120003
    3180:	00130003 	.word	0x00130003
    3184:	000d0003 	.word	0x000d0003
    3188:	000e0003 	.word	0x000e0003
    318c:	000f0003 	.word	0x000f0003
    3190:	00170003 	.word	0x00170003
    3194:	00180003 	.word	0x00180003
    3198:	00190003 	.word	0x00190003
    319c:	00040003 	.word	0x00040003
    31a0:	00080003 	.word	0x00080003
    31a4:	00100003 	.word	0x00100003
    31a8:	000c0003 	.word	0x000c0003
    31ac:	00160003 	.word	0x00160003

000031b0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    31b0:	b530      	push	{r4, r5, lr}
    31b2:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    31b4:	4b0c      	ldr	r3, [pc, #48]	; (31e8 <_sercom_get_sercom_inst_index+0x38>)
    31b6:	466a      	mov	r2, sp
    31b8:	cb32      	ldmia	r3!, {r1, r4, r5}
    31ba:	c232      	stmia	r2!, {r1, r4, r5}
    31bc:	cb32      	ldmia	r3!, {r1, r4, r5}
    31be:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    31c0:	9b00      	ldr	r3, [sp, #0]
    31c2:	4283      	cmp	r3, r0
    31c4:	d006      	beq.n	31d4 <_sercom_get_sercom_inst_index+0x24>
    31c6:	2301      	movs	r3, #1
    31c8:	009a      	lsls	r2, r3, #2
    31ca:	4669      	mov	r1, sp
    31cc:	5852      	ldr	r2, [r2, r1]
    31ce:	4282      	cmp	r2, r0
    31d0:	d103      	bne.n	31da <_sercom_get_sercom_inst_index+0x2a>
    31d2:	e000      	b.n	31d6 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    31d4:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
    31d6:	b2d8      	uxtb	r0, r3
    31d8:	e003      	b.n	31e2 <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    31da:	3301      	adds	r3, #1
    31dc:	2b06      	cmp	r3, #6
    31de:	d1f3      	bne.n	31c8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    31e0:	2000      	movs	r0, #0
}
    31e2:	b007      	add	sp, #28
    31e4:	bd30      	pop	{r4, r5, pc}
    31e6:	46c0      	nop			; (mov r8, r8)
    31e8:	00007170 	.word	0x00007170

000031ec <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    31ec:	4770      	bx	lr
    31ee:	46c0      	nop			; (mov r8, r8)

000031f0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    31f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    31f2:	4b0a      	ldr	r3, [pc, #40]	; (321c <_sercom_set_handler+0x2c>)
    31f4:	781b      	ldrb	r3, [r3, #0]
    31f6:	2b00      	cmp	r3, #0
    31f8:	d10c      	bne.n	3214 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    31fa:	4f09      	ldr	r7, [pc, #36]	; (3220 <_sercom_set_handler+0x30>)
    31fc:	4e09      	ldr	r6, [pc, #36]	; (3224 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    31fe:	4d0a      	ldr	r5, [pc, #40]	; (3228 <_sercom_set_handler+0x38>)
    3200:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    3202:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    3204:	195a      	adds	r2, r3, r5
    3206:	6014      	str	r4, [r2, #0]
    3208:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    320a:	2b18      	cmp	r3, #24
    320c:	d1f9      	bne.n	3202 <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    320e:	2201      	movs	r2, #1
    3210:	4b02      	ldr	r3, [pc, #8]	; (321c <_sercom_set_handler+0x2c>)
    3212:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    3214:	0080      	lsls	r0, r0, #2
    3216:	4b02      	ldr	r3, [pc, #8]	; (3220 <_sercom_set_handler+0x30>)
    3218:	50c1      	str	r1, [r0, r3]
}
    321a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    321c:	20000386 	.word	0x20000386
    3220:	20000388 	.word	0x20000388
    3224:	000031ed 	.word	0x000031ed
    3228:	20000848 	.word	0x20000848

0000322c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    322c:	b510      	push	{r4, lr}
    322e:	b082      	sub	sp, #8
    3230:	0004      	movs	r4, r0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    3232:	2206      	movs	r2, #6
    3234:	4905      	ldr	r1, [pc, #20]	; (324c <_sercom_get_interrupt_vector+0x20>)
    3236:	4668      	mov	r0, sp
    3238:	4b05      	ldr	r3, [pc, #20]	; (3250 <_sercom_get_interrupt_vector+0x24>)
    323a:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    323c:	0020      	movs	r0, r4
    323e:	4b05      	ldr	r3, [pc, #20]	; (3254 <_sercom_get_interrupt_vector+0x28>)
    3240:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    3242:	466b      	mov	r3, sp
    3244:	5618      	ldrsb	r0, [r3, r0]
}
    3246:	b002      	add	sp, #8
    3248:	bd10      	pop	{r4, pc}
    324a:	46c0      	nop			; (mov r8, r8)
    324c:	00007188 	.word	0x00007188
    3250:	00005e45 	.word	0x00005e45
    3254:	000031b1 	.word	0x000031b1

00003258 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    3258:	b510      	push	{r4, lr}
    325a:	4b02      	ldr	r3, [pc, #8]	; (3264 <SERCOM0_Handler+0xc>)
    325c:	681b      	ldr	r3, [r3, #0]
    325e:	2000      	movs	r0, #0
    3260:	4798      	blx	r3
    3262:	bd10      	pop	{r4, pc}
    3264:	20000388 	.word	0x20000388

00003268 <SERCOM1_Handler>:
    3268:	b510      	push	{r4, lr}
    326a:	4b02      	ldr	r3, [pc, #8]	; (3274 <SERCOM1_Handler+0xc>)
    326c:	685b      	ldr	r3, [r3, #4]
    326e:	2001      	movs	r0, #1
    3270:	4798      	blx	r3
    3272:	bd10      	pop	{r4, pc}
    3274:	20000388 	.word	0x20000388

00003278 <SERCOM2_Handler>:
    3278:	b510      	push	{r4, lr}
    327a:	4b02      	ldr	r3, [pc, #8]	; (3284 <SERCOM2_Handler+0xc>)
    327c:	689b      	ldr	r3, [r3, #8]
    327e:	2002      	movs	r0, #2
    3280:	4798      	blx	r3
    3282:	bd10      	pop	{r4, pc}
    3284:	20000388 	.word	0x20000388

00003288 <SERCOM3_Handler>:
    3288:	b510      	push	{r4, lr}
    328a:	4b02      	ldr	r3, [pc, #8]	; (3294 <SERCOM3_Handler+0xc>)
    328c:	68db      	ldr	r3, [r3, #12]
    328e:	2003      	movs	r0, #3
    3290:	4798      	blx	r3
    3292:	bd10      	pop	{r4, pc}
    3294:	20000388 	.word	0x20000388

00003298 <SERCOM4_Handler>:
    3298:	b510      	push	{r4, lr}
    329a:	4b02      	ldr	r3, [pc, #8]	; (32a4 <SERCOM4_Handler+0xc>)
    329c:	691b      	ldr	r3, [r3, #16]
    329e:	2004      	movs	r0, #4
    32a0:	4798      	blx	r3
    32a2:	bd10      	pop	{r4, pc}
    32a4:	20000388 	.word	0x20000388

000032a8 <SERCOM5_Handler>:
    32a8:	b510      	push	{r4, lr}
    32aa:	4b02      	ldr	r3, [pc, #8]	; (32b4 <SERCOM5_Handler+0xc>)
    32ac:	695b      	ldr	r3, [r3, #20]
    32ae:	2005      	movs	r0, #5
    32b0:	4798      	blx	r3
    32b2:	bd10      	pop	{r4, pc}
    32b4:	20000388 	.word	0x20000388

000032b8 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    32b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    32ba:	4657      	mov	r7, sl
    32bc:	464e      	mov	r6, r9
    32be:	4645      	mov	r5, r8
    32c0:	b4e0      	push	{r5, r6, r7}
    32c2:	b088      	sub	sp, #32
    32c4:	4680      	mov	r8, r0
    32c6:	000e      	movs	r6, r1
    32c8:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    32ca:	0003      	movs	r3, r0
    32cc:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    32ce:	680b      	ldr	r3, [r1, #0]
    32d0:	079b      	lsls	r3, r3, #30
    32d2:	d400      	bmi.n	32d6 <spi_init+0x1e>
    32d4:	e08c      	b.n	33f0 <spi_init+0x138>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    32d6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    32d8:	9303      	str	r3, [sp, #12]
    32da:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    32dc:	9304      	str	r3, [sp, #16]
    32de:	6b13      	ldr	r3, [r2, #48]	; 0x30
    32e0:	9305      	str	r3, [sp, #20]
    32e2:	6b53      	ldr	r3, [r2, #52]	; 0x34
    32e4:	9306      	str	r3, [sp, #24]
    32e6:	2700      	movs	r7, #0
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
    32e8:	231f      	movs	r3, #31
    32ea:	4699      	mov	r9, r3
    32ec:	b2f9      	uxtb	r1, r7
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    32ee:	00bb      	lsls	r3, r7, #2
    32f0:	aa03      	add	r2, sp, #12
    32f2:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    32f4:	2800      	cmp	r0, #0
    32f6:	d102      	bne.n	32fe <spi_init+0x46>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    32f8:	0030      	movs	r0, r6
    32fa:	4b96      	ldr	r3, [pc, #600]	; (3554 <spi_init+0x29c>)
    32fc:	4798      	blx	r3
		}

		if (current_pinmux == PINMUX_UNUSED) {
    32fe:	1c43      	adds	r3, r0, #1
    3300:	d027      	beq.n	3352 <spi_init+0x9a>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    3302:	0402      	lsls	r2, r0, #16
    3304:	0c13      	lsrs	r3, r2, #16
    3306:	469c      	mov	ip, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    3308:	0c00      	lsrs	r0, r0, #16
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    330a:	b2c1      	uxtb	r1, r0
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    330c:	2500      	movs	r5, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    330e:	0603      	lsls	r3, r0, #24
    3310:	d403      	bmi.n	331a <spi_init+0x62>
		return &(ports[port_index]->Group[group_index]);
    3312:	094b      	lsrs	r3, r1, #5
    3314:	01db      	lsls	r3, r3, #7
    3316:	4a90      	ldr	r2, [pc, #576]	; (3558 <spi_init+0x2a0>)
    3318:	189d      	adds	r5, r3, r2
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
    331a:	464b      	mov	r3, r9
    331c:	400b      	ands	r3, r1

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    331e:	18e8      	adds	r0, r5, r3
    3320:	3040      	adds	r0, #64	; 0x40
    3322:	7800      	ldrb	r0, [r0, #0]
    3324:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    3326:	2080      	movs	r0, #128	; 0x80
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    3328:	4652      	mov	r2, sl
    332a:	07d2      	lsls	r2, r2, #31
    332c:	d50a      	bpl.n	3344 <spi_init+0x8c>
		return SYSTEM_PINMUX_GPIO;
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    332e:	085b      	lsrs	r3, r3, #1
    3330:	18eb      	adds	r3, r5, r3
    3332:	3330      	adds	r3, #48	; 0x30
    3334:	7818      	ldrb	r0, [r3, #0]
    3336:	b2c0      	uxtb	r0, r0

	if (pin_index & 1) {
    3338:	07cb      	lsls	r3, r1, #31
    333a:	d501      	bpl.n	3340 <spi_init+0x88>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    333c:	0900      	lsrs	r0, r0, #4
    333e:	e001      	b.n	3344 <spi_init+0x8c>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    3340:	230f      	movs	r3, #15
    3342:	4018      	ands	r0, r3

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    3344:	4584      	cmp	ip, r0
    3346:	d004      	beq.n	3352 <spi_init+0x9a>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
    3348:	2300      	movs	r3, #0
    334a:	4642      	mov	r2, r8
    334c:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
    334e:	201c      	movs	r0, #28
    3350:	e0f9      	b.n	3546 <spi_init+0x28e>
    3352:	3701      	adds	r7, #1
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    3354:	2f04      	cmp	r7, #4
    3356:	d1c9      	bne.n	32ec <spi_init+0x34>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    3358:	2011      	movs	r0, #17
    335a:	4b80      	ldr	r3, [pc, #512]	; (355c <spi_init+0x2a4>)
    335c:	4798      	blx	r3
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    335e:	7822      	ldrb	r2, [r4, #0]
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
    3360:	2500      	movs	r5, #0
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    3362:	2a01      	cmp	r2, #1
    3364:	d112      	bne.n	338c <spi_init+0xd4>
		enum status_code error_code = _sercom_get_sync_baud_val(
    3366:	aa02      	add	r2, sp, #8
    3368:	0001      	movs	r1, r0
    336a:	69a0      	ldr	r0, [r4, #24]
    336c:	4b7c      	ldr	r3, [pc, #496]	; (3560 <spi_init+0x2a8>)
    336e:	4798      	blx	r3
    3370:	0003      	movs	r3, r0
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    3372:	2017      	movs	r0, #23
	if (config->mode == SPI_MODE_MASTER) {
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
    3374:	2b00      	cmp	r3, #0
    3376:	d000      	beq.n	337a <spi_init+0xc2>
    3378:	e0e5      	b.n	3546 <spi_init+0x28e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    337a:	7b33      	ldrb	r3, [r6, #12]
    337c:	b2db      	uxtb	r3, r3
    337e:	aa02      	add	r2, sp, #8
    3380:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    3382:	3005      	adds	r0, #5
		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    3384:	429a      	cmp	r2, r3
    3386:	d000      	beq.n	338a <spi_init+0xd2>
    3388:	e0dd      	b.n	3546 <spi_init+0x28e>
			return STATUS_ERR_DENIED;
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    338a:	350c      	adds	r5, #12

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    338c:	6863      	ldr	r3, [r4, #4]
    338e:	68a2      	ldr	r2, [r4, #8]
    3390:	4313      	orrs	r3, r2
    3392:	68e2      	ldr	r2, [r4, #12]
    3394:	4313      	orrs	r3, r2
    3396:	432b      	orrs	r3, r5

	/* Set SPI character size */
	ctrlb |= config->character_size;
    3398:	7c21      	ldrb	r1, [r4, #16]

	if (config->run_in_standby) {
    339a:	7c62      	ldrb	r2, [r4, #17]
    339c:	2a00      	cmp	r2, #0
    339e:	d001      	beq.n	33a4 <spi_init+0xec>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    33a0:	2280      	movs	r2, #128	; 0x80
    33a2:	4313      	orrs	r3, r2
	}

	if (config->receiver_enable) {
    33a4:	7ca2      	ldrb	r2, [r4, #18]
    33a6:	2a00      	cmp	r2, #0
    33a8:	d002      	beq.n	33b0 <spi_init+0xf8>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    33aa:	2280      	movs	r2, #128	; 0x80
    33ac:	0292      	lsls	r2, r2, #10
    33ae:	4311      	orrs	r1, r2
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    33b0:	7ce2      	ldrb	r2, [r4, #19]
    33b2:	2a00      	cmp	r2, #0
    33b4:	d002      	beq.n	33bc <spi_init+0x104>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    33b6:	2280      	movs	r2, #128	; 0x80
    33b8:	0092      	lsls	r2, r2, #2
    33ba:	4311      	orrs	r1, r2
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    33bc:	7d22      	ldrb	r2, [r4, #20]
    33be:	2a00      	cmp	r2, #0
    33c0:	d002      	beq.n	33c8 <spi_init+0x110>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    33c2:	2280      	movs	r2, #128	; 0x80
    33c4:	0192      	lsls	r2, r2, #6
    33c6:	4311      	orrs	r1, r2
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    33c8:	6830      	ldr	r0, [r6, #0]
    33ca:	2202      	movs	r2, #2
    33cc:	4313      	orrs	r3, r2
    33ce:	4283      	cmp	r3, r0
    33d0:	d109      	bne.n	33e6 <spi_init+0x12e>
			spi_module->CTRLB.reg == ctrlb) {
    33d2:	6873      	ldr	r3, [r6, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    33d4:	428b      	cmp	r3, r1
    33d6:	d106      	bne.n	33e6 <spi_init+0x12e>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
    33d8:	7823      	ldrb	r3, [r4, #0]
    33da:	4642      	mov	r2, r8
    33dc:	7153      	strb	r3, [r2, #5]
		module->character_size = config->character_size;
    33de:	7c23      	ldrb	r3, [r4, #16]
    33e0:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
    33e2:	2000      	movs	r0, #0
    33e4:	e0af      	b.n	3546 <spi_init+0x28e>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
    33e6:	2300      	movs	r3, #0
    33e8:	4642      	mov	r2, r8
    33ea:	6013      	str	r3, [r2, #0]

	return STATUS_ERR_DENIED;
    33ec:	201c      	movs	r0, #28
    33ee:	e0aa      	b.n	3546 <spi_init+0x28e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    33f0:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    33f2:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    33f4:	07db      	lsls	r3, r3, #31
    33f6:	d500      	bpl.n	33fa <spi_init+0x142>
    33f8:	e0a5      	b.n	3546 <spi_init+0x28e>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    33fa:	0008      	movs	r0, r1
    33fc:	4b59      	ldr	r3, [pc, #356]	; (3564 <spi_init+0x2ac>)
    33fe:	4798      	blx	r3
	uint32_t pm_index, gclk_index;
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
    3400:	2805      	cmp	r0, #5
    3402:	d100      	bne.n	3406 <spi_init+0x14e>
    3404:	e098      	b.n	3538 <spi_init+0x280>
#  else
		return STATUS_ERR_INVALID_ARG;
#  endif
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3406:	0003      	movs	r3, r0
    3408:	3312      	adds	r3, #18
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    340a:	4d57      	ldr	r5, [pc, #348]	; (3568 <spi_init+0x2b0>)
    340c:	69e9      	ldr	r1, [r5, #28]
    340e:	2201      	movs	r2, #1
    3410:	4082      	lsls	r2, r0
    3412:	430a      	orrs	r2, r1
    3414:	61ea      	str	r2, [r5, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    3416:	a907      	add	r1, sp, #28
    3418:	2724      	movs	r7, #36	; 0x24
    341a:	5de2      	ldrb	r2, [r4, r7]
    341c:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    341e:	b2dd      	uxtb	r5, r3
    3420:	0028      	movs	r0, r5
    3422:	4b52      	ldr	r3, [pc, #328]	; (356c <spi_init+0x2b4>)
    3424:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3426:	0028      	movs	r0, r5
    3428:	4b51      	ldr	r3, [pc, #324]	; (3570 <spi_init+0x2b8>)
    342a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    342c:	5de0      	ldrb	r0, [r4, r7]
    342e:	2100      	movs	r1, #0
    3430:	4b50      	ldr	r3, [pc, #320]	; (3574 <spi_init+0x2bc>)
    3432:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    3434:	7823      	ldrb	r3, [r4, #0]
    3436:	2b01      	cmp	r3, #1
    3438:	d103      	bne.n	3442 <spi_init+0x18a>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    343a:	6832      	ldr	r2, [r6, #0]
    343c:	330b      	adds	r3, #11
    343e:	4313      	orrs	r3, r2
    3440:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3442:	4643      	mov	r3, r8
    3444:	681e      	ldr	r6, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3446:	ab02      	add	r3, sp, #8
    3448:	2280      	movs	r2, #128	; 0x80
    344a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    344c:	2200      	movs	r2, #0
    344e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3450:	2101      	movs	r1, #1
    3452:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    3454:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
    3456:	7823      	ldrb	r3, [r4, #0]
    3458:	2b00      	cmp	r3, #0
    345a:	d101      	bne.n	3460 <spi_init+0x1a8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    345c:	ab02      	add	r3, sp, #8
    345e:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
    3460:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3462:	9303      	str	r3, [sp, #12]
    3464:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3466:	9304      	str	r3, [sp, #16]
    3468:	6b23      	ldr	r3, [r4, #48]	; 0x30
    346a:	9305      	str	r3, [sp, #20]
    346c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    346e:	9306      	str	r3, [sp, #24]
    3470:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    3472:	ad02      	add	r5, sp, #8
    3474:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3476:	00bb      	lsls	r3, r7, #2
    3478:	aa03      	add	r2, sp, #12
    347a:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    347c:	2800      	cmp	r0, #0
    347e:	d102      	bne.n	3486 <spi_init+0x1ce>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    3480:	0030      	movs	r0, r6
    3482:	4b34      	ldr	r3, [pc, #208]	; (3554 <spi_init+0x29c>)
    3484:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    3486:	1c43      	adds	r3, r0, #1
    3488:	d005      	beq.n	3496 <spi_init+0x1de>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    348a:	7028      	strb	r0, [r5, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    348c:	0c00      	lsrs	r0, r0, #16
    348e:	b2c0      	uxtb	r0, r0
    3490:	0029      	movs	r1, r5
    3492:	4b39      	ldr	r3, [pc, #228]	; (3578 <spi_init+0x2c0>)
    3494:	4798      	blx	r3
    3496:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    3498:	2f04      	cmp	r7, #4
    349a:	d1eb      	bne.n	3474 <spi_init+0x1bc>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    349c:	7823      	ldrb	r3, [r4, #0]
    349e:	4642      	mov	r2, r8
    34a0:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
    34a2:	7c23      	ldrb	r3, [r4, #16]
    34a4:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
    34a6:	7ca3      	ldrb	r3, [r4, #18]
    34a8:	71d3      	strb	r3, [r2, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    34aa:	7d23      	ldrb	r3, [r4, #20]
    34ac:	7213      	strb	r3, [r2, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    34ae:	2200      	movs	r2, #0
    34b0:	466b      	mov	r3, sp
    34b2:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    34b4:	7823      	ldrb	r3, [r4, #0]
    34b6:	2b01      	cmp	r3, #1
    34b8:	d115      	bne.n	34e6 <spi_init+0x22e>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    34ba:	4643      	mov	r3, r8
    34bc:	6818      	ldr	r0, [r3, #0]
    34be:	4b29      	ldr	r3, [pc, #164]	; (3564 <spi_init+0x2ac>)
    34c0:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    34c2:	3012      	adds	r0, #18
    34c4:	b2c0      	uxtb	r0, r0
    34c6:	4b25      	ldr	r3, [pc, #148]	; (355c <spi_init+0x2a4>)
    34c8:	4798      	blx	r3
    34ca:	0001      	movs	r1, r0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    34cc:	466b      	mov	r3, sp
    34ce:	1d9a      	adds	r2, r3, #6
    34d0:	69a0      	ldr	r0, [r4, #24]
    34d2:	4b23      	ldr	r3, [pc, #140]	; (3560 <spi_init+0x2a8>)
    34d4:	4798      	blx	r3
    34d6:	0003      	movs	r3, r0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    34d8:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    34da:	2b00      	cmp	r3, #0
    34dc:	d133      	bne.n	3546 <spi_init+0x28e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    34de:	466b      	mov	r3, sp
    34e0:	3306      	adds	r3, #6
    34e2:	781b      	ldrb	r3, [r3, #0]
    34e4:	7333      	strb	r3, [r6, #12]
# endif
	/* Set data order */
	ctrla |= config->data_order;

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    34e6:	6863      	ldr	r3, [r4, #4]
    34e8:	68a2      	ldr	r2, [r4, #8]
    34ea:	4313      	orrs	r3, r2

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    34ec:	68e2      	ldr	r2, [r4, #12]
    34ee:	4313      	orrs	r3, r2

	/* Set SPI character size */
	ctrlb |= config->character_size;
    34f0:	7c22      	ldrb	r2, [r4, #16]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    34f2:	7c61      	ldrb	r1, [r4, #17]
    34f4:	2900      	cmp	r1, #0
    34f6:	d103      	bne.n	3500 <spi_init+0x248>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    34f8:	4920      	ldr	r1, [pc, #128]	; (357c <spi_init+0x2c4>)
    34fa:	7889      	ldrb	r1, [r1, #2]
    34fc:	0789      	lsls	r1, r1, #30
    34fe:	d501      	bpl.n	3504 <spi_init+0x24c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    3500:	2180      	movs	r1, #128	; 0x80
    3502:	430b      	orrs	r3, r1
	}

	if (config->receiver_enable) {
    3504:	7ca1      	ldrb	r1, [r4, #18]
    3506:	2900      	cmp	r1, #0
    3508:	d002      	beq.n	3510 <spi_init+0x258>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    350a:	2180      	movs	r1, #128	; 0x80
    350c:	0289      	lsls	r1, r1, #10
    350e:	430a      	orrs	r2, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    3510:	7ce1      	ldrb	r1, [r4, #19]
    3512:	2900      	cmp	r1, #0
    3514:	d002      	beq.n	351c <spi_init+0x264>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    3516:	2180      	movs	r1, #128	; 0x80
    3518:	0089      	lsls	r1, r1, #2
    351a:	430a      	orrs	r2, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    351c:	7d21      	ldrb	r1, [r4, #20]
    351e:	2900      	cmp	r1, #0
    3520:	d002      	beq.n	3528 <spi_init+0x270>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    3522:	2180      	movs	r1, #128	; 0x80
    3524:	0189      	lsls	r1, r1, #6
    3526:	430a      	orrs	r2, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    3528:	6831      	ldr	r1, [r6, #0]
    352a:	430b      	orrs	r3, r1
    352c:	6033      	str	r3, [r6, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    352e:	6873      	ldr	r3, [r6, #4]
    3530:	4313      	orrs	r3, r2
    3532:	6073      	str	r3, [r6, #4]

	return STATUS_OK;
    3534:	2000      	movs	r0, #0
    3536:	e006      	b.n	3546 <spi_init+0x28e>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    3538:	4a0b      	ldr	r2, [pc, #44]	; (3568 <spi_init+0x2b0>)
    353a:	6a11      	ldr	r1, [r2, #32]
    353c:	2302      	movs	r3, #2
    353e:	430b      	orrs	r3, r1
    3540:	6213      	str	r3, [r2, #32]
	uint32_t pm_index, gclk_index;
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
#  ifdef ID_SERCOM5
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
    3542:	2318      	movs	r3, #24
    3544:	e767      	b.n	3416 <spi_init+0x15e>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    3546:	b008      	add	sp, #32
    3548:	bc1c      	pop	{r2, r3, r4}
    354a:	4690      	mov	r8, r2
    354c:	4699      	mov	r9, r3
    354e:	46a2      	mov	sl, r4
    3550:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3552:	46c0      	nop			; (mov r8, r8)
    3554:	0000302d 	.word	0x0000302d
    3558:	40002800 	.word	0x40002800
    355c:	0000441d 	.word	0x0000441d
    3560:	00002df1 	.word	0x00002df1
    3564:	000031b1 	.word	0x000031b1
    3568:	40000400 	.word	0x40000400
    356c:	000043f9 	.word	0x000043f9
    3570:	00004389 	.word	0x00004389
    3574:	00002fe1 	.word	0x00002fe1
    3578:	000044f5 	.word	0x000044f5
    357c:	41002000 	.word	0x41002000

00003580 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    3580:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    3582:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    3584:	2315      	movs	r3, #21
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    3586:	2c01      	cmp	r4, #1
    3588:	d16e      	bne.n	3668 <spi_select_slave+0xe8>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    358a:	7a04      	ldrb	r4, [r0, #8]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    358c:	2300      	movs	r3, #0
	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    358e:	2c00      	cmp	r4, #0
    3590:	d16a      	bne.n	3668 <spi_select_slave+0xe8>
#  endif
	{
		if (select) {
    3592:	2a00      	cmp	r2, #0
    3594:	d058      	beq.n	3648 <spi_select_slave+0xc8>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    3596:	784b      	ldrb	r3, [r1, #1]
    3598:	2b00      	cmp	r3, #0
    359a:	d044      	beq.n	3626 <spi_select_slave+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    359c:	6803      	ldr	r3, [r0, #0]
    359e:	7e1b      	ldrb	r3, [r3, #24]
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    35a0:	07db      	lsls	r3, r3, #31
    35a2:	d410      	bmi.n	35c6 <spi_select_slave+0x46>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    35a4:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    35a6:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    35a8:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    35aa:	2900      	cmp	r1, #0
    35ac:	d104      	bne.n	35b8 <spi_select_slave+0x38>
		return &(ports[port_index]->Group[group_index]);
    35ae:	095a      	lsrs	r2, r3, #5
    35b0:	01d2      	lsls	r2, r2, #7
    35b2:	492e      	ldr	r1, [pc, #184]	; (366c <spi_select_slave+0xec>)
    35b4:	468c      	mov	ip, r1
    35b6:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    35b8:	211f      	movs	r1, #31
    35ba:	400b      	ands	r3, r1
    35bc:	391e      	subs	r1, #30
    35be:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    35c0:	6191      	str	r1, [r2, #24]
					return STATUS_BUSY;
    35c2:	2305      	movs	r3, #5
    35c4:	e050      	b.n	3668 <spi_select_slave+0xe8>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    35c6:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    35c8:	09dc      	lsrs	r4, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    35ca:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    35cc:	2c00      	cmp	r4, #0
    35ce:	d104      	bne.n	35da <spi_select_slave+0x5a>
		return &(ports[port_index]->Group[group_index]);
    35d0:	095a      	lsrs	r2, r3, #5
    35d2:	01d2      	lsls	r2, r2, #7
    35d4:	4c25      	ldr	r4, [pc, #148]	; (366c <spi_select_slave+0xec>)
    35d6:	46a4      	mov	ip, r4
    35d8:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    35da:	241f      	movs	r4, #31
    35dc:	4023      	ands	r3, r4
    35de:	3c1e      	subs	r4, #30
    35e0:	409c      	lsls	r4, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    35e2:	6154      	str	r4, [r2, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    35e4:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    35e6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    35e8:	07d2      	lsls	r2, r2, #31
    35ea:	d501      	bpl.n	35f0 <spi_select_slave+0x70>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    35ec:	788a      	ldrb	r2, [r1, #2]
    35ee:	629a      	str	r2, [r3, #40]	; 0x28

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
    35f0:	79c2      	ldrb	r2, [r0, #7]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    35f2:	2300      	movs	r3, #0
				port_pin_set_output_level(slave->ss_pin, false);

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
    35f4:	2a00      	cmp	r2, #0
    35f6:	d137      	bne.n	3668 <spi_select_slave+0xe8>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    35f8:	6802      	ldr	r2, [r0, #0]
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    35fa:	2104      	movs	r1, #4

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    35fc:	7e13      	ldrb	r3, [r2, #24]
    35fe:	420b      	tst	r3, r1
    3600:	d0fc      	beq.n	35fc <spi_select_slave+0x7c>
    3602:	7e11      	ldrb	r1, [r2, #24]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    3604:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3606:	0749      	lsls	r1, r1, #29
    3608:	d52e      	bpl.n	3668 <spi_select_slave+0xe8>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    360a:	8b53      	ldrh	r3, [r2, #26]
    360c:	075b      	lsls	r3, r3, #29
    360e:	d501      	bpl.n	3614 <spi_select_slave+0x94>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3610:	2304      	movs	r3, #4
    3612:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3614:	7983      	ldrb	r3, [r0, #6]
    3616:	2b01      	cmp	r3, #1
    3618:	d102      	bne.n	3620 <spi_select_slave+0xa0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    361a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    361c:	2300      	movs	r3, #0
    361e:	e023      	b.n	3668 <spi_select_slave+0xe8>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3620:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3622:	2300      	movs	r3, #0
    3624:	e020      	b.n	3668 <spi_select_slave+0xe8>
					uint16_t flush = 0;
					spi_read(module, &flush);
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    3626:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3628:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    362a:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    362c:	2900      	cmp	r1, #0
    362e:	d104      	bne.n	363a <spi_select_slave+0xba>
		return &(ports[port_index]->Group[group_index]);
    3630:	095a      	lsrs	r2, r3, #5
    3632:	01d2      	lsls	r2, r2, #7
    3634:	490d      	ldr	r1, [pc, #52]	; (366c <spi_select_slave+0xec>)
    3636:	468c      	mov	ip, r1
    3638:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    363a:	211f      	movs	r1, #31
    363c:	400b      	ands	r3, r1
    363e:	391e      	subs	r1, #30
    3640:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3642:	6151      	str	r1, [r2, #20]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    3644:	2300      	movs	r3, #0
    3646:	e00f      	b.n	3668 <spi_select_slave+0xe8>
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    3648:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    364a:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    364c:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    364e:	2900      	cmp	r1, #0
    3650:	d104      	bne.n	365c <spi_select_slave+0xdc>
		return &(ports[port_index]->Group[group_index]);
    3652:	095a      	lsrs	r2, r3, #5
    3654:	01d2      	lsls	r2, r2, #7
    3656:	4905      	ldr	r1, [pc, #20]	; (366c <spi_select_slave+0xec>)
    3658:	468c      	mov	ip, r1
    365a:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    365c:	211f      	movs	r1, #31
    365e:	400b      	ands	r3, r1
    3660:	391e      	subs	r1, #30
    3662:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3664:	6191      	str	r1, [r2, #24]
		}
	}
	return STATUS_OK;
    3666:	2300      	movs	r3, #0
}
    3668:	0018      	movs	r0, r3
    366a:	bd10      	pop	{r4, pc}
    366c:	40002800 	.word	0x40002800

00003670 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    3670:	b5f0      	push	{r4, r5, r6, r7, lr}
    3672:	465f      	mov	r7, fp
    3674:	4656      	mov	r6, sl
    3676:	464d      	mov	r5, r9
    3678:	4644      	mov	r4, r8
    367a:	b4f0      	push	{r4, r5, r6, r7}
    367c:	b083      	sub	sp, #12
    367e:	468a      	mov	sl, r1
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    3680:	2317      	movs	r3, #23
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
    3682:	2a00      	cmp	r2, #0
    3684:	d04b      	beq.n	371e <spi_write_buffer_wait+0xae>
    3686:	e042      	b.n	370e <spi_write_buffer_wait+0x9e>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3688:	6802      	ldr	r2, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    368a:	7e13      	ldrb	r3, [r2, #24]
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    368c:	4223      	tst	r3, r4
    368e:	d0fc      	beq.n	368a <spi_write_buffer_wait+0x1a>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    3690:	1c7b      	adds	r3, r7, #1
    3692:	b29b      	uxth	r3, r3
    3694:	4698      	mov	r8, r3
    3696:	4653      	mov	r3, sl
    3698:	5ddb      	ldrb	r3, [r3, r7]
    369a:	469b      	mov	fp, r3

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    369c:	7981      	ldrb	r1, [r0, #6]
    369e:	2901      	cmp	r1, #1
    36a0:	d004      	beq.n	36ac <spi_write_buffer_wait+0x3c>
		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    36a2:	4669      	mov	r1, sp
    36a4:	80cb      	strh	r3, [r1, #6]
    36a6:	88cb      	ldrh	r3, [r1, #6]
    36a8:	4647      	mov	r7, r8
    36aa:	e007      	b.n	36bc <spi_write_buffer_wait+0x4c>

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
    36ac:	3702      	adds	r7, #2
    36ae:	b2bf      	uxth	r7, r7
    36b0:	4641      	mov	r1, r8
    36b2:	4653      	mov	r3, sl
    36b4:	5c59      	ldrb	r1, [r3, r1]
    36b6:	0209      	lsls	r1, r1, #8
    36b8:	465b      	mov	r3, fp
    36ba:	430b      	orrs	r3, r1
    36bc:	7e11      	ldrb	r1, [r2, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    36be:	4221      	tst	r1, r4
    36c0:	d002      	beq.n	36c8 <spi_write_buffer_wait+0x58>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    36c2:	05db      	lsls	r3, r3, #23
    36c4:	0ddb      	lsrs	r3, r3, #23
    36c6:	6293      	str	r3, [r2, #40]	; 0x28
		}

		/* Write the data to send */
		spi_write(module, data_to_send);

		if (module->receiver_enabled) {
    36c8:	79c3      	ldrb	r3, [r0, #7]
    36ca:	2b00      	cmp	r3, #0
    36cc:	d010      	beq.n	36f0 <spi_write_buffer_wait+0x80>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    36ce:	6802      	ldr	r2, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    36d0:	7e13      	ldrb	r3, [r2, #24]
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    36d2:	422b      	tst	r3, r5
    36d4:	d0fc      	beq.n	36d0 <spi_write_buffer_wait+0x60>
    36d6:	7e13      	ldrb	r3, [r2, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    36d8:	422b      	tst	r3, r5
    36da:	d009      	beq.n	36f0 <spi_write_buffer_wait+0x80>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    36dc:	8b53      	ldrh	r3, [r2, #26]
    36de:	422b      	tst	r3, r5
    36e0:	d000      	beq.n	36e4 <spi_write_buffer_wait+0x74>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    36e2:	8355      	strh	r5, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    36e4:	7983      	ldrb	r3, [r0, #6]
    36e6:	2b01      	cmp	r3, #1
    36e8:	d101      	bne.n	36ee <spi_write_buffer_wait+0x7e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    36ea:	6a93      	ldr	r3, [r2, #40]	; 0x28
    36ec:	e000      	b.n	36f0 <spi_write_buffer_wait+0x80>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    36ee:	6a93      	ldr	r3, [r2, #40]	; 0x28

	uint16_t tx_pos = 0;
	uint16_t flush_length = length;

	/* Write block */
	while (length--) {
    36f0:	3e01      	subs	r6, #1
    36f2:	b2b6      	uxth	r6, r6
    36f4:	4566      	cmp	r6, ip
    36f6:	d1c7      	bne.n	3688 <spi_write_buffer_wait+0x18>
			flush_length--;
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    36f8:	7942      	ldrb	r2, [r0, #5]
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    36fa:	2300      	movs	r3, #0
			flush_length--;
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    36fc:	2a01      	cmp	r2, #1
    36fe:	d10e      	bne.n	371e <spi_write_buffer_wait+0xae>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3700:	6801      	ldr	r1, [r0, #0]
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    3702:	3201      	adds	r2, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3704:	7e0b      	ldrb	r3, [r1, #24]
    3706:	4213      	tst	r3, r2
    3708:	d0fc      	beq.n	3704 <spi_write_buffer_wait+0x94>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    370a:	2300      	movs	r3, #0
    370c:	e007      	b.n	371e <spi_write_buffer_wait+0xae>

	uint16_t tx_pos = 0;
	uint16_t flush_length = length;

	/* Write block */
	while (length--) {
    370e:	3a01      	subs	r2, #1
    3710:	b296      	uxth	r6, r2
    3712:	2700      	movs	r7, #0
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    3714:	2401      	movs	r4, #1
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    3716:	2504      	movs	r5, #4

	uint16_t tx_pos = 0;
	uint16_t flush_length = length;

	/* Write block */
	while (length--) {
    3718:	4b05      	ldr	r3, [pc, #20]	; (3730 <spi_write_buffer_wait+0xc0>)
    371a:	469c      	mov	ip, r3
    371c:	e7b4      	b.n	3688 <spi_write_buffer_wait+0x18>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    371e:	0018      	movs	r0, r3
    3720:	b003      	add	sp, #12
    3722:	bc3c      	pop	{r2, r3, r4, r5}
    3724:	4690      	mov	r8, r2
    3726:	4699      	mov	r9, r3
    3728:	46a2      	mov	sl, r4
    372a:	46ab      	mov	fp, r5
    372c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    372e:	46c0      	nop			; (mov r8, r8)
    3730:	0000ffff 	.word	0x0000ffff

00003734 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    3734:	b5f0      	push	{r4, r5, r6, r7, lr}
    3736:	465f      	mov	r7, fp
    3738:	4656      	mov	r6, sl
    373a:	464d      	mov	r5, r9
    373c:	4644      	mov	r4, r8
    373e:	b4f0      	push	{r4, r5, r6, r7}
    3740:	b091      	sub	sp, #68	; 0x44
    3742:	0005      	movs	r5, r0
    3744:	000c      	movs	r4, r1
    3746:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    3748:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    374a:	0008      	movs	r0, r1
    374c:	4bc4      	ldr	r3, [pc, #784]	; (3a60 <usart_init+0x32c>)
    374e:	4798      	blx	r3
    3750:	1e02      	subs	r2, r0, #0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
    3752:	2a05      	cmp	r2, #5
    3754:	d003      	beq.n	375e <usart_init+0x2a>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3756:	0007      	movs	r7, r0
    3758:	3712      	adds	r7, #18
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    375a:	0003      	movs	r3, r0
    375c:	e001      	b.n	3762 <usart_init+0x2e>
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    375e:	2718      	movs	r7, #24
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    3760:	2301      	movs	r3, #1
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    3762:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    3764:	2005      	movs	r0, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    3766:	07c9      	lsls	r1, r1, #31
    3768:	d500      	bpl.n	376c <usart_init+0x38>
    376a:	e171      	b.n	3a50 <usart_init+0x31c>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    376c:	6821      	ldr	r1, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    376e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    3770:	0789      	lsls	r1, r1, #30
    3772:	d500      	bpl.n	3776 <usart_init+0x42>
    3774:	e16c      	b.n	3a50 <usart_init+0x31c>
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
    3776:	2a05      	cmp	r2, #5
    3778:	d107      	bne.n	378a <usart_init+0x56>
    377a:	48ba      	ldr	r0, [pc, #744]	; (3a64 <usart_init+0x330>)
    377c:	6a02      	ldr	r2, [r0, #32]
    377e:	2101      	movs	r1, #1
    3780:	4099      	lsls	r1, r3
    3782:	000b      	movs	r3, r1
    3784:	4313      	orrs	r3, r2
    3786:	6203      	str	r3, [r0, #32]
    3788:	e006      	b.n	3798 <usart_init+0x64>
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    378a:	48b6      	ldr	r0, [pc, #728]	; (3a64 <usart_init+0x330>)
    378c:	69c2      	ldr	r2, [r0, #28]
    378e:	2101      	movs	r1, #1
    3790:	4099      	lsls	r1, r3
    3792:	000b      	movs	r3, r1
    3794:	4313      	orrs	r3, r2
    3796:	61c3      	str	r3, [r0, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    3798:	a90f      	add	r1, sp, #60	; 0x3c
    379a:	232d      	movs	r3, #45	; 0x2d
    379c:	4698      	mov	r8, r3
    379e:	5cf3      	ldrb	r3, [r6, r3]
    37a0:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    37a2:	b2ff      	uxtb	r7, r7
    37a4:	0038      	movs	r0, r7
    37a6:	4bb0      	ldr	r3, [pc, #704]	; (3a68 <usart_init+0x334>)
    37a8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    37aa:	0038      	movs	r0, r7
    37ac:	4baf      	ldr	r3, [pc, #700]	; (3a6c <usart_init+0x338>)
    37ae:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    37b0:	4643      	mov	r3, r8
    37b2:	5cf0      	ldrb	r0, [r6, r3]
    37b4:	2100      	movs	r1, #0
    37b6:	4bae      	ldr	r3, [pc, #696]	; (3a70 <usart_init+0x33c>)
    37b8:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    37ba:	7af3      	ldrb	r3, [r6, #11]
    37bc:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    37be:	2324      	movs	r3, #36	; 0x24
    37c0:	5cf3      	ldrb	r3, [r6, r3]
    37c2:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    37c4:	2325      	movs	r3, #37	; 0x25
    37c6:	5cf3      	ldrb	r3, [r6, r3]
    37c8:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    37ca:	7ef3      	ldrb	r3, [r6, #27]
    37cc:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    37ce:	7f33      	ldrb	r3, [r6, #28]
    37d0:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    37d2:	682b      	ldr	r3, [r5, #0]
    37d4:	4699      	mov	r9, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    37d6:	0018      	movs	r0, r3
    37d8:	4ba1      	ldr	r3, [pc, #644]	; (3a60 <usart_init+0x32c>)
    37da:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    37dc:	3012      	adds	r0, #18
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    37de:	2200      	movs	r2, #0
    37e0:	230e      	movs	r3, #14
    37e2:	a906      	add	r1, sp, #24
    37e4:	468c      	mov	ip, r1
    37e6:	4463      	add	r3, ip
    37e8:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    37ea:	8a32      	ldrh	r2, [r6, #16]
    37ec:	9202      	str	r2, [sp, #8]
    37ee:	2380      	movs	r3, #128	; 0x80
    37f0:	01db      	lsls	r3, r3, #7
    37f2:	429a      	cmp	r2, r3
    37f4:	d01a      	beq.n	382c <usart_init+0xf8>
    37f6:	d804      	bhi.n	3802 <usart_init+0xce>
    37f8:	2380      	movs	r3, #128	; 0x80
    37fa:	019b      	lsls	r3, r3, #6
    37fc:	429a      	cmp	r2, r3
    37fe:	d00b      	beq.n	3818 <usart_init+0xe4>
    3800:	e107      	b.n	3a12 <usart_init+0x2de>
    3802:	23c0      	movs	r3, #192	; 0xc0
    3804:	01db      	lsls	r3, r3, #7
    3806:	9a02      	ldr	r2, [sp, #8]
    3808:	429a      	cmp	r2, r3
    380a:	d00a      	beq.n	3822 <usart_init+0xee>
    380c:	2380      	movs	r3, #128	; 0x80
    380e:	021b      	lsls	r3, r3, #8
    3810:	429a      	cmp	r2, r3
    3812:	d100      	bne.n	3816 <usart_init+0xe2>
    3814:	e102      	b.n	3a1c <usart_init+0x2e8>
    3816:	e0fc      	b.n	3a12 <usart_init+0x2de>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    3818:	2310      	movs	r3, #16
    381a:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    381c:	3b0f      	subs	r3, #15
    381e:	9307      	str	r3, [sp, #28]
    3820:	e100      	b.n	3a24 <usart_init+0x2f0>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    3822:	2308      	movs	r3, #8
    3824:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    3826:	3b07      	subs	r3, #7
    3828:	9307      	str	r3, [sp, #28]
    382a:	e0fb      	b.n	3a24 <usart_init+0x2f0>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    382c:	6833      	ldr	r3, [r6, #0]
    382e:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
    3830:	68f3      	ldr	r3, [r6, #12]
    3832:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    3834:	6973      	ldr	r3, [r6, #20]
    3836:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    3838:	7e33      	ldrb	r3, [r6, #24]
    383a:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    383c:	2326      	movs	r3, #38	; 0x26
    383e:	5cf3      	ldrb	r3, [r6, r3]
    3840:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    3842:	6873      	ldr	r3, [r6, #4]
    3844:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    3846:	2b00      	cmp	r3, #0
    3848:	d016      	beq.n	3878 <usart_init+0x144>
    384a:	2380      	movs	r3, #128	; 0x80
    384c:	055b      	lsls	r3, r3, #21
    384e:	459a      	cmp	sl, r3
    3850:	d139      	bne.n	38c6 <usart_init+0x192>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    3852:	2327      	movs	r3, #39	; 0x27
    3854:	5cf3      	ldrb	r3, [r6, r3]
    3856:	2b00      	cmp	r3, #0
    3858:	d139      	bne.n	38ce <usart_init+0x19a>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    385a:	6a33      	ldr	r3, [r6, #32]
    385c:	001f      	movs	r7, r3
    385e:	b2c0      	uxtb	r0, r0
    3860:	4b84      	ldr	r3, [pc, #528]	; (3a74 <usart_init+0x340>)
    3862:	4798      	blx	r3
    3864:	0001      	movs	r1, r0
    3866:	220e      	movs	r2, #14
    3868:	ab06      	add	r3, sp, #24
    386a:	469c      	mov	ip, r3
    386c:	4462      	add	r2, ip
    386e:	0038      	movs	r0, r7
    3870:	4b81      	ldr	r3, [pc, #516]	; (3a78 <usart_init+0x344>)
    3872:	4798      	blx	r3
    3874:	0003      	movs	r3, r0
    3876:	e027      	b.n	38c8 <usart_init+0x194>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    3878:	2308      	movs	r3, #8
    387a:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    387c:	2300      	movs	r3, #0
    387e:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    3880:	2327      	movs	r3, #39	; 0x27
    3882:	5cf3      	ldrb	r3, [r6, r3]
    3884:	2b00      	cmp	r3, #0
    3886:	d00c      	beq.n	38a2 <usart_init+0x16e>
				status_code =
    3888:	9b06      	ldr	r3, [sp, #24]
    388a:	9300      	str	r3, [sp, #0]
    388c:	9b07      	ldr	r3, [sp, #28]
    388e:	220e      	movs	r2, #14
    3890:	a906      	add	r1, sp, #24
    3892:	468c      	mov	ip, r1
    3894:	4462      	add	r2, ip
    3896:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    3898:	6a30      	ldr	r0, [r6, #32]
    389a:	4f78      	ldr	r7, [pc, #480]	; (3a7c <usart_init+0x348>)
    389c:	47b8      	blx	r7
    389e:	0003      	movs	r3, r0
    38a0:	e012      	b.n	38c8 <usart_init+0x194>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    38a2:	6a33      	ldr	r3, [r6, #32]
    38a4:	001f      	movs	r7, r3
    38a6:	b2c0      	uxtb	r0, r0
    38a8:	4b72      	ldr	r3, [pc, #456]	; (3a74 <usart_init+0x340>)
    38aa:	4798      	blx	r3
    38ac:	0001      	movs	r1, r0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    38ae:	9b06      	ldr	r3, [sp, #24]
    38b0:	9300      	str	r3, [sp, #0]
    38b2:	9b07      	ldr	r3, [sp, #28]
    38b4:	220e      	movs	r2, #14
    38b6:	a806      	add	r0, sp, #24
    38b8:	4684      	mov	ip, r0
    38ba:	4462      	add	r2, ip
    38bc:	0038      	movs	r0, r7
    38be:	4f6f      	ldr	r7, [pc, #444]	; (3a7c <usart_init+0x348>)
    38c0:	47b8      	blx	r7
    38c2:	0003      	movs	r3, r0
    38c4:	e000      	b.n	38c8 <usart_init+0x194>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    38c6:	2300      	movs	r3, #0
    38c8:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    38ca:	d000      	beq.n	38ce <usart_init+0x19a>
    38cc:	e0c0      	b.n	3a50 <usart_init+0x31c>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    38ce:	7e73      	ldrb	r3, [r6, #25]
    38d0:	2b00      	cmp	r3, #0
    38d2:	d002      	beq.n	38da <usart_init+0x1a6>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    38d4:	7eb3      	ldrb	r3, [r6, #26]
    38d6:	464a      	mov	r2, r9
    38d8:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    38da:	682a      	ldr	r2, [r5, #0]
    38dc:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    38de:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    38e0:	2b00      	cmp	r3, #0
    38e2:	d1fc      	bne.n	38de <usart_init+0x1aa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    38e4:	330e      	adds	r3, #14
    38e6:	aa06      	add	r2, sp, #24
    38e8:	4694      	mov	ip, r2
    38ea:	4463      	add	r3, ip
    38ec:	881b      	ldrh	r3, [r3, #0]
    38ee:	464a      	mov	r2, r9
    38f0:	8193      	strh	r3, [r2, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    38f2:	9b04      	ldr	r3, [sp, #16]
    38f4:	465a      	mov	r2, fp
    38f6:	4313      	orrs	r3, r2
    38f8:	9a03      	ldr	r2, [sp, #12]
    38fa:	4313      	orrs	r3, r2
    38fc:	4652      	mov	r2, sl
    38fe:	4313      	orrs	r3, r2
    3900:	433b      	orrs	r3, r7
    3902:	4642      	mov	r2, r8
    3904:	0212      	lsls	r2, r2, #8
    3906:	4313      	orrs	r3, r2
    3908:	9a05      	ldr	r2, [sp, #20]
    390a:	0757      	lsls	r7, r2, #29
    390c:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    390e:	2327      	movs	r3, #39	; 0x27
    3910:	5cf3      	ldrb	r3, [r6, r3]
    3912:	2b00      	cmp	r3, #0
    3914:	d101      	bne.n	391a <usart_init+0x1e6>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    3916:	3304      	adds	r3, #4
    3918:	431f      	orrs	r7, r3
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    391a:	7e71      	ldrb	r1, [r6, #25]
    391c:	0289      	lsls	r1, r1, #10
    391e:	7f33      	ldrb	r3, [r6, #28]
    3920:	025b      	lsls	r3, r3, #9
    3922:	4319      	orrs	r1, r3
    3924:	7f73      	ldrb	r3, [r6, #29]
    3926:	021b      	lsls	r3, r3, #8
    3928:	4319      	orrs	r1, r3
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    392a:	2324      	movs	r3, #36	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    392c:	5cf3      	ldrb	r3, [r6, r3]
    392e:	045b      	lsls	r3, r3, #17
    3930:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    3932:	2325      	movs	r3, #37	; 0x25
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    3934:	5cf2      	ldrb	r2, [r6, r3]
    3936:	0412      	lsls	r2, r2, #16
    3938:	4311      	orrs	r1, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    393a:	7af3      	ldrb	r3, [r6, #11]
    393c:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    393e:	8933      	ldrh	r3, [r6, #8]
    3940:	2bff      	cmp	r3, #255	; 0xff
    3942:	d004      	beq.n	394e <usart_init+0x21a>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    3944:	2280      	movs	r2, #128	; 0x80
    3946:	0452      	lsls	r2, r2, #17
    3948:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    394a:	4319      	orrs	r1, r3
    394c:	e005      	b.n	395a <usart_init+0x226>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    394e:	7ef3      	ldrb	r3, [r6, #27]
    3950:	2b00      	cmp	r3, #0
    3952:	d002      	beq.n	395a <usart_init+0x226>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    3954:	2380      	movs	r3, #128	; 0x80
    3956:	04db      	lsls	r3, r3, #19
    3958:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    395a:	232c      	movs	r3, #44	; 0x2c
    395c:	5cf3      	ldrb	r3, [r6, r3]
    395e:	2b00      	cmp	r3, #0
    3960:	d103      	bne.n	396a <usart_init+0x236>
    3962:	4b47      	ldr	r3, [pc, #284]	; (3a80 <usart_init+0x34c>)
    3964:	789b      	ldrb	r3, [r3, #2]
    3966:	079b      	lsls	r3, r3, #30
    3968:	d501      	bpl.n	396e <usart_init+0x23a>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    396a:	2380      	movs	r3, #128	; 0x80
    396c:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    396e:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3970:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3972:	2b00      	cmp	r3, #0
    3974:	d1fc      	bne.n	3970 <usart_init+0x23c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    3976:	464b      	mov	r3, r9
    3978:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    397a:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    397c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    397e:	2b00      	cmp	r3, #0
    3980:	d1fc      	bne.n	397c <usart_init+0x248>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    3982:	464b      	mov	r3, r9
    3984:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3986:	ab0e      	add	r3, sp, #56	; 0x38
    3988:	2280      	movs	r2, #128	; 0x80
    398a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    398c:	2200      	movs	r2, #0
    398e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    3990:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    3992:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    3994:	6b33      	ldr	r3, [r6, #48]	; 0x30
    3996:	930a      	str	r3, [sp, #40]	; 0x28
    3998:	6b73      	ldr	r3, [r6, #52]	; 0x34
    399a:	930b      	str	r3, [sp, #44]	; 0x2c
    399c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    399e:	930c      	str	r3, [sp, #48]	; 0x30
    39a0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    39a2:	9302      	str	r3, [sp, #8]
    39a4:	930d      	str	r3, [sp, #52]	; 0x34
    39a6:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    39a8:	ae0e      	add	r6, sp, #56	; 0x38
    39aa:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    39ac:	00bb      	lsls	r3, r7, #2
    39ae:	aa0a      	add	r2, sp, #40	; 0x28
    39b0:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    39b2:	2800      	cmp	r0, #0
    39b4:	d102      	bne.n	39bc <usart_init+0x288>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    39b6:	0020      	movs	r0, r4
    39b8:	4b32      	ldr	r3, [pc, #200]	; (3a84 <usart_init+0x350>)
    39ba:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    39bc:	1c43      	adds	r3, r0, #1
    39be:	d005      	beq.n	39cc <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    39c0:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    39c2:	0c00      	lsrs	r0, r0, #16
    39c4:	b2c0      	uxtb	r0, r0
    39c6:	0031      	movs	r1, r6
    39c8:	4b2f      	ldr	r3, [pc, #188]	; (3a88 <usart_init+0x354>)
    39ca:	4798      	blx	r3
    39cc:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    39ce:	2f04      	cmp	r7, #4
    39d0:	d1eb      	bne.n	39aa <usart_init+0x276>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    39d2:	2300      	movs	r3, #0
    39d4:	60eb      	str	r3, [r5, #12]
    39d6:	612b      	str	r3, [r5, #16]
    39d8:	616b      	str	r3, [r5, #20]
    39da:	61ab      	str	r3, [r5, #24]
    39dc:	61eb      	str	r3, [r5, #28]
    39de:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    39e0:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    39e2:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    39e4:	2200      	movs	r2, #0
    39e6:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    39e8:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    39ea:	3330      	adds	r3, #48	; 0x30
    39ec:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    39ee:	3301      	adds	r3, #1
    39f0:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    39f2:	3301      	adds	r3, #1
    39f4:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    39f6:	3301      	adds	r3, #1
    39f8:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    39fa:	6828      	ldr	r0, [r5, #0]
    39fc:	4b18      	ldr	r3, [pc, #96]	; (3a60 <usart_init+0x32c>)
    39fe:	4798      	blx	r3
    3a00:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    3a02:	4922      	ldr	r1, [pc, #136]	; (3a8c <usart_init+0x358>)
    3a04:	4b22      	ldr	r3, [pc, #136]	; (3a90 <usart_init+0x35c>)
    3a06:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    3a08:	00a4      	lsls	r4, r4, #2
    3a0a:	4b22      	ldr	r3, [pc, #136]	; (3a94 <usart_init+0x360>)
    3a0c:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    3a0e:	2000      	movs	r0, #0
    3a10:	e01e      	b.n	3a50 <usart_init+0x31c>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    3a12:	2310      	movs	r3, #16
    3a14:	9306      	str	r3, [sp, #24]
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3a16:	2300      	movs	r3, #0
    3a18:	9307      	str	r3, [sp, #28]
    3a1a:	e003      	b.n	3a24 <usart_init+0x2f0>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    3a1c:	2303      	movs	r3, #3
    3a1e:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3a20:	2300      	movs	r3, #0
    3a22:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    3a24:	6833      	ldr	r3, [r6, #0]
    3a26:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
    3a28:	68f3      	ldr	r3, [r6, #12]
    3a2a:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    3a2c:	6973      	ldr	r3, [r6, #20]
    3a2e:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    3a30:	7e33      	ldrb	r3, [r6, #24]
    3a32:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    3a34:	2326      	movs	r3, #38	; 0x26
    3a36:	5cf3      	ldrb	r3, [r6, r3]
    3a38:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    3a3a:	6873      	ldr	r3, [r6, #4]
    3a3c:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    3a3e:	2b00      	cmp	r3, #0
    3a40:	d100      	bne.n	3a44 <usart_init+0x310>
    3a42:	e71d      	b.n	3880 <usart_init+0x14c>
    3a44:	2380      	movs	r3, #128	; 0x80
    3a46:	055b      	lsls	r3, r3, #21
    3a48:	459a      	cmp	sl, r3
    3a4a:	d100      	bne.n	3a4e <usart_init+0x31a>
    3a4c:	e701      	b.n	3852 <usart_init+0x11e>
    3a4e:	e73e      	b.n	38ce <usart_init+0x19a>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    3a50:	b011      	add	sp, #68	; 0x44
    3a52:	bc3c      	pop	{r2, r3, r4, r5}
    3a54:	4690      	mov	r8, r2
    3a56:	4699      	mov	r9, r3
    3a58:	46a2      	mov	sl, r4
    3a5a:	46ab      	mov	fp, r5
    3a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a5e:	46c0      	nop			; (mov r8, r8)
    3a60:	000031b1 	.word	0x000031b1
    3a64:	40000400 	.word	0x40000400
    3a68:	000043f9 	.word	0x000043f9
    3a6c:	00004389 	.word	0x00004389
    3a70:	00002fe1 	.word	0x00002fe1
    3a74:	0000441d 	.word	0x0000441d
    3a78:	00002df1 	.word	0x00002df1
    3a7c:	00002e19 	.word	0x00002e19
    3a80:	41002000 	.word	0x41002000
    3a84:	0000302d 	.word	0x0000302d
    3a88:	000044f5 	.word	0x000044f5
    3a8c:	00003c81 	.word	0x00003c81
    3a90:	000031f1 	.word	0x000031f1
    3a94:	20000848 	.word	0x20000848

00003a98 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    3a98:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    3a9a:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    3a9c:	2a00      	cmp	r2, #0
    3a9e:	d00e      	beq.n	3abe <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    3aa0:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    3aa2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    3aa4:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    3aa6:	2a00      	cmp	r2, #0
    3aa8:	d109      	bne.n	3abe <usart_write_wait+0x26>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3aaa:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3aac:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3aae:	2a00      	cmp	r2, #0
    3ab0:	d1fc      	bne.n	3aac <usart_write_wait+0x14>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    3ab2:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    3ab4:	2102      	movs	r1, #2
    3ab6:	7e1a      	ldrb	r2, [r3, #24]
    3ab8:	420a      	tst	r2, r1
    3aba:	d0fc      	beq.n	3ab6 <usart_write_wait+0x1e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    3abc:	2300      	movs	r3, #0
}
    3abe:	0018      	movs	r0, r3
    3ac0:	4770      	bx	lr
    3ac2:	46c0      	nop			; (mov r8, r8)

00003ac4 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    3ac4:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    3ac6:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    3ac8:	2a00      	cmp	r2, #0
    3aca:	d030      	beq.n	3b2e <usart_read_wait+0x6a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    3acc:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    3ace:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    3ad0:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    3ad2:	2a00      	cmp	r2, #0
    3ad4:	d12b      	bne.n	3b2e <usart_read_wait+0x6a>

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3ad6:	6802      	ldr	r2, [r0, #0]
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    3ad8:	7e10      	ldrb	r0, [r2, #24]
    3ada:	0740      	lsls	r0, r0, #29
    3adc:	d527      	bpl.n	3b2e <usart_read_wait+0x6a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3ade:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3ae0:	2b00      	cmp	r3, #0
    3ae2:	d1fc      	bne.n	3ade <usart_read_wait+0x1a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    3ae4:	8b53      	ldrh	r3, [r2, #26]
    3ae6:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    3ae8:	0698      	lsls	r0, r3, #26
    3aea:	d01d      	beq.n	3b28 <usart_read_wait+0x64>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    3aec:	0798      	lsls	r0, r3, #30
    3aee:	d503      	bpl.n	3af8 <usart_read_wait+0x34>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    3af0:	2302      	movs	r3, #2
    3af2:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_FORMAT;
    3af4:	3318      	adds	r3, #24
    3af6:	e01a      	b.n	3b2e <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    3af8:	0758      	lsls	r0, r3, #29
    3afa:	d503      	bpl.n	3b04 <usart_read_wait+0x40>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    3afc:	2304      	movs	r3, #4
    3afe:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_OVERFLOW;
    3b00:	331a      	adds	r3, #26
    3b02:	e014      	b.n	3b2e <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    3b04:	07d8      	lsls	r0, r3, #31
    3b06:	d503      	bpl.n	3b10 <usart_read_wait+0x4c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    3b08:	2301      	movs	r3, #1
    3b0a:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_DATA;
    3b0c:	3312      	adds	r3, #18
    3b0e:	e00e      	b.n	3b2e <usart_read_wait+0x6a>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    3b10:	06d8      	lsls	r0, r3, #27
    3b12:	d503      	bpl.n	3b1c <usart_read_wait+0x58>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    3b14:	2310      	movs	r3, #16
    3b16:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PROTOCOL;
    3b18:	3332      	adds	r3, #50	; 0x32
    3b1a:	e008      	b.n	3b2e <usart_read_wait+0x6a>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    3b1c:	069b      	lsls	r3, r3, #26
    3b1e:	d503      	bpl.n	3b28 <usart_read_wait+0x64>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    3b20:	2320      	movs	r3, #32
    3b22:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PACKET_COLLISION;
    3b24:	3321      	adds	r3, #33	; 0x21
    3b26:	e002      	b.n	3b2e <usart_read_wait+0x6a>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    3b28:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    3b2a:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    3b2c:	2300      	movs	r3, #0
}
    3b2e:	0018      	movs	r0, r3
    3b30:	4770      	bx	lr
    3b32:	46c0      	nop			; (mov r8, r8)

00003b34 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    3b34:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b36:	464f      	mov	r7, r9
    3b38:	b480      	push	{r7}
    3b3a:	b082      	sub	sp, #8
    3b3c:	0004      	movs	r4, r0
    3b3e:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    3b40:	2017      	movs	r0, #23
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    3b42:	2a00      	cmp	r2, #0
    3b44:	d049      	beq.n	3bda <usart_write_buffer_wait+0xa6>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    3b46:	79e3      	ldrb	r3, [r4, #7]
		return STATUS_ERR_DENIED;
    3b48:	3005      	adds	r0, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    3b4a:	2b00      	cmp	r3, #0
    3b4c:	d045      	beq.n	3bda <usart_write_buffer_wait+0xa6>
		return STATUS_ERR_DENIED;
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3b4e:	6827      	ldr	r7, [r4, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3b50:	69fb      	ldr	r3, [r7, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3b52:	2b00      	cmp	r3, #0
    3b54:	d1fc      	bne.n	3b50 <usart_write_buffer_wait+0x1c>
    3b56:	4691      	mov	r9, r2
    3b58:	2500      	movs	r5, #0
	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    3b5a:	2601      	movs	r6, #1
    3b5c:	e020      	b.n	3ba0 <usart_write_buffer_wait+0x6c>
    3b5e:	7e3a      	ldrb	r2, [r7, #24]
    3b60:	4232      	tst	r2, r6
    3b62:	d104      	bne.n	3b6e <usart_write_buffer_wait+0x3a>
				break;
			} else if (i == USART_TIMEOUT) {
    3b64:	2b01      	cmp	r3, #1
    3b66:	d02a      	beq.n	3bbe <usart_write_buffer_wait+0x8a>
    3b68:	3b01      	subs	r3, #1

	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    3b6a:	2b00      	cmp	r3, #0
    3b6c:	d1f7      	bne.n	3b5e <usart_write_buffer_wait+0x2a>
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    3b6e:	1c6a      	adds	r2, r5, #1
    3b70:	b292      	uxth	r2, r2
    3b72:	9b01      	ldr	r3, [sp, #4]
    3b74:	5d5b      	ldrb	r3, [r3, r5]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    3b76:	7961      	ldrb	r1, [r4, #5]
    3b78:	2901      	cmp	r1, #1
    3b7a:	d002      	beq.n	3b82 <usart_write_buffer_wait+0x4e>
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    3b7c:	b299      	uxth	r1, r3
    3b7e:	0015      	movs	r5, r2
    3b80:	e005      	b.n	3b8e <usart_write_buffer_wait+0x5a>

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
    3b82:	1ca9      	adds	r1, r5, #2
    3b84:	b28d      	uxth	r5, r1
    3b86:	9901      	ldr	r1, [sp, #4]
    3b88:	5c89      	ldrb	r1, [r1, r2]
    3b8a:	0209      	lsls	r1, r1, #8
    3b8c:	4319      	orrs	r1, r3
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
    3b8e:	0020      	movs	r0, r4
    3b90:	4b14      	ldr	r3, [pc, #80]	; (3be4 <usart_write_buffer_wait+0xb0>)
    3b92:	4798      	blx	r3
    3b94:	464a      	mov	r2, r9
    3b96:	3a01      	subs	r2, #1
    3b98:	b293      	uxth	r3, r2
    3b9a:	4699      	mov	r9, r3
	_usart_wait_for_sync(module);

	uint16_t tx_pos = 0;

	/* Blocks while buffer is being transferred */
	while (length--) {
    3b9c:	2b00      	cmp	r3, #0
    3b9e:	d016      	beq.n	3bce <usart_write_buffer_wait+0x9a>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    3ba0:	7e3b      	ldrb	r3, [r7, #24]
    3ba2:	4233      	tst	r3, r6
    3ba4:	d1e3      	bne.n	3b6e <usart_write_buffer_wait+0x3a>
    3ba6:	4b10      	ldr	r3, [pc, #64]	; (3be8 <usart_write_buffer_wait+0xb4>)
    3ba8:	e7d9      	b.n	3b5e <usart_write_buffer_wait+0x2a>
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    3baa:	7e3a      	ldrb	r2, [r7, #24]
    3bac:	420a      	tst	r2, r1
    3bae:	d108      	bne.n	3bc2 <usart_write_buffer_wait+0x8e>
			break;
		} else if (i == USART_TIMEOUT) {
    3bb0:	2b01      	cmp	r3, #1
    3bb2:	d008      	beq.n	3bc6 <usart_write_buffer_wait+0x92>
    3bb4:	3b01      	subs	r3, #1
		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    3bb6:	2b00      	cmp	r3, #0
    3bb8:	d1f7      	bne.n	3baa <usart_write_buffer_wait+0x76>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
    3bba:	2000      	movs	r0, #0
    3bbc:	e00d      	b.n	3bda <usart_write_buffer_wait+0xa6>
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
				break;
			} else if (i == USART_TIMEOUT) {
				return STATUS_ERR_TIMEOUT;
    3bbe:	2012      	movs	r0, #18
    3bc0:	e00b      	b.n	3bda <usart_write_buffer_wait+0xa6>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
    3bc2:	2000      	movs	r0, #0
    3bc4:	e009      	b.n	3bda <usart_write_buffer_wait+0xa6>
	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
			break;
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
    3bc6:	2012      	movs	r0, #18
    3bc8:	e007      	b.n	3bda <usart_write_buffer_wait+0xa6>
		}
	}

	return STATUS_OK;
    3bca:	2000      	movs	r0, #0
    3bcc:	e005      	b.n	3bda <usart_write_buffer_wait+0xa6>
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    3bce:	7e3b      	ldrb	r3, [r7, #24]
    3bd0:	079b      	lsls	r3, r3, #30
    3bd2:	d4fa      	bmi.n	3bca <usart_write_buffer_wait+0x96>
    3bd4:	4b04      	ldr	r3, [pc, #16]	; (3be8 <usart_write_buffer_wait+0xb4>)
    3bd6:	2102      	movs	r1, #2
    3bd8:	e7e7      	b.n	3baa <usart_write_buffer_wait+0x76>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    3bda:	b002      	add	sp, #8
    3bdc:	bc04      	pop	{r2}
    3bde:	4691      	mov	r9, r2
    3be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3be2:	46c0      	nop			; (mov r8, r8)
    3be4:	00003a99 	.word	0x00003a99
    3be8:	0000ffff 	.word	0x0000ffff

00003bec <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    3bec:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bee:	4657      	mov	r7, sl
    3bf0:	b480      	push	{r7}
    3bf2:	b084      	sub	sp, #16
    3bf4:	0004      	movs	r4, r0
    3bf6:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    3bf8:	2017      	movs	r0, #23
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    3bfa:	2a00      	cmp	r2, #0
    3bfc:	d038      	beq.n	3c70 <usart_read_buffer_wait+0x84>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    3bfe:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    3c00:	3005      	adds	r0, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    3c02:	2b00      	cmp	r3, #0
    3c04:	d034      	beq.n	3c70 <usart_read_buffer_wait+0x84>
		return STATUS_ERR_DENIED;
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3c06:	6826      	ldr	r6, [r4, #0]
    3c08:	4692      	mov	sl, r2
    3c0a:	2500      	movs	r5, #0
	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    3c0c:	2704      	movs	r7, #4
    3c0e:	e02a      	b.n	3c66 <usart_read_buffer_wait+0x7a>
    3c10:	7e32      	ldrb	r2, [r6, #24]
    3c12:	423a      	tst	r2, r7
    3c14:	d104      	bne.n	3c20 <usart_read_buffer_wait+0x34>
				break;
			} else if (i == USART_TIMEOUT) {
    3c16:	2b01      	cmp	r3, #1
    3c18:	d023      	beq.n	3c62 <usart_read_buffer_wait+0x76>
    3c1a:	3b01      	subs	r3, #1

	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    3c1c:	2b00      	cmp	r3, #0
    3c1e:	d1f7      	bne.n	3c10 <usart_read_buffer_wait+0x24>
				return STATUS_ERR_TIMEOUT;
			}
		}

		enum status_code retval;
		uint16_t received_data = 0;
    3c20:	2300      	movs	r3, #0
    3c22:	aa02      	add	r2, sp, #8
    3c24:	80d3      	strh	r3, [r2, #6]

		retval = usart_read_wait(module, &received_data);
    3c26:	1d91      	adds	r1, r2, #6
    3c28:	0020      	movs	r0, r4
    3c2a:	4b13      	ldr	r3, [pc, #76]	; (3c78 <usart_read_buffer_wait+0x8c>)
    3c2c:	4798      	blx	r3

		if (retval != STATUS_OK) {
    3c2e:	2800      	cmp	r0, #0
    3c30:	d11e      	bne.n	3c70 <usart_read_buffer_wait+0x84>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    3c32:	1c6b      	adds	r3, r5, #1
    3c34:	b29b      	uxth	r3, r3
    3c36:	aa02      	add	r2, sp, #8
    3c38:	88d2      	ldrh	r2, [r2, #6]
    3c3a:	9901      	ldr	r1, [sp, #4]
    3c3c:	554a      	strb	r2, [r1, r5]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    3c3e:	7961      	ldrb	r1, [r4, #5]
    3c40:	2901      	cmp	r1, #1
    3c42:	d105      	bne.n	3c50 <usart_read_buffer_wait+0x64>
			rx_data[rx_pos++] = (received_data >> 8);
    3c44:	1ca9      	adds	r1, r5, #2
    3c46:	b28d      	uxth	r5, r1
    3c48:	0a12      	lsrs	r2, r2, #8
    3c4a:	9901      	ldr	r1, [sp, #4]
    3c4c:	54ca      	strb	r2, [r1, r3]
    3c4e:	e000      	b.n	3c52 <usart_read_buffer_wait+0x66>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    3c50:	001d      	movs	r5, r3
    3c52:	4652      	mov	r2, sl
    3c54:	3a01      	subs	r2, #1
    3c56:	b293      	uxth	r3, r2
    3c58:	469a      	mov	sl, r3
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint16_t rx_pos = 0;

	/* Blocks while buffer is being received */
	while (length--) {
    3c5a:	2b00      	cmp	r3, #0
    3c5c:	d103      	bne.n	3c66 <usart_read_buffer_wait+0x7a>
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
    3c5e:	2000      	movs	r0, #0
    3c60:	e006      	b.n	3c70 <usart_read_buffer_wait+0x84>
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
				break;
			} else if (i == USART_TIMEOUT) {
				return STATUS_ERR_TIMEOUT;
    3c62:	2012      	movs	r0, #18
    3c64:	e004      	b.n	3c70 <usart_read_buffer_wait+0x84>
	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    3c66:	7e33      	ldrb	r3, [r6, #24]
    3c68:	423b      	tst	r3, r7
    3c6a:	d1d9      	bne.n	3c20 <usart_read_buffer_wait+0x34>
    3c6c:	4b03      	ldr	r3, [pc, #12]	; (3c7c <usart_read_buffer_wait+0x90>)
    3c6e:	e7cf      	b.n	3c10 <usart_read_buffer_wait+0x24>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    3c70:	b004      	add	sp, #16
    3c72:	bc04      	pop	{r2}
    3c74:	4692      	mov	sl, r2
    3c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c78:	00003ac5 	.word	0x00003ac5
    3c7c:	0000ffff 	.word	0x0000ffff

00003c80 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    3c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    3c82:	0080      	lsls	r0, r0, #2
    3c84:	4b60      	ldr	r3, [pc, #384]	; (3e08 <_usart_interrupt_handler+0x188>)
    3c86:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    3c88:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3c8a:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3c8c:	2b00      	cmp	r3, #0
    3c8e:	d1fc      	bne.n	3c8a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    3c90:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    3c92:	7da6      	ldrb	r6, [r4, #22]
    3c94:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    3c96:	2330      	movs	r3, #48	; 0x30
    3c98:	5ceb      	ldrb	r3, [r5, r3]
    3c9a:	2231      	movs	r2, #49	; 0x31
    3c9c:	5caf      	ldrb	r7, [r5, r2]
    3c9e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    3ca0:	07f3      	lsls	r3, r6, #31
    3ca2:	d522      	bpl.n	3cea <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    3ca4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    3ca6:	b29b      	uxth	r3, r3
    3ca8:	2b00      	cmp	r3, #0
    3caa:	d01c      	beq.n	3ce6 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    3cac:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    3cae:	7813      	ldrb	r3, [r2, #0]
    3cb0:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    3cb2:	1c51      	adds	r1, r2, #1
    3cb4:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    3cb6:	7969      	ldrb	r1, [r5, #5]
    3cb8:	2901      	cmp	r1, #1
    3cba:	d001      	beq.n	3cc0 <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    3cbc:	b29b      	uxth	r3, r3
    3cbe:	e004      	b.n	3cca <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    3cc0:	7851      	ldrb	r1, [r2, #1]
    3cc2:	0209      	lsls	r1, r1, #8
    3cc4:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    3cc6:	3202      	adds	r2, #2
    3cc8:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    3cca:	05db      	lsls	r3, r3, #23
    3ccc:	0ddb      	lsrs	r3, r3, #23
    3cce:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    3cd0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    3cd2:	3b01      	subs	r3, #1
    3cd4:	b29b      	uxth	r3, r3
    3cd6:	85eb      	strh	r3, [r5, #46]	; 0x2e
    3cd8:	2b00      	cmp	r3, #0
    3cda:	d106      	bne.n	3cea <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    3cdc:	3301      	adds	r3, #1
    3cde:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    3ce0:	3301      	adds	r3, #1
    3ce2:	75a3      	strb	r3, [r4, #22]
    3ce4:	e001      	b.n	3cea <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    3ce6:	2301      	movs	r3, #1
    3ce8:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    3cea:	07b3      	lsls	r3, r6, #30
    3cec:	d509      	bpl.n	3d02 <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    3cee:	2302      	movs	r3, #2
    3cf0:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    3cf2:	2200      	movs	r2, #0
    3cf4:	3331      	adds	r3, #49	; 0x31
    3cf6:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    3cf8:	07fb      	lsls	r3, r7, #31
    3cfa:	d502      	bpl.n	3d02 <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    3cfc:	0028      	movs	r0, r5
    3cfe:	68eb      	ldr	r3, [r5, #12]
    3d00:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    3d02:	0773      	lsls	r3, r6, #29
    3d04:	d560      	bpl.n	3dc8 <_usart_interrupt_handler+0x148>

		if (module->remaining_rx_buffer_length) {
    3d06:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    3d08:	b29b      	uxth	r3, r3
    3d0a:	2b00      	cmp	r3, #0
    3d0c:	d05a      	beq.n	3dc4 <_usart_interrupt_handler+0x144>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    3d0e:	8b63      	ldrh	r3, [r4, #26]
    3d10:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    3d12:	071a      	lsls	r2, r3, #28
    3d14:	d402      	bmi.n	3d1c <_usart_interrupt_handler+0x9c>
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    3d16:	223f      	movs	r2, #63	; 0x3f
    3d18:	4013      	ands	r3, r2
    3d1a:	e001      	b.n	3d20 <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    3d1c:	2237      	movs	r2, #55	; 0x37
    3d1e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    3d20:	2b00      	cmp	r3, #0
    3d22:	d02d      	beq.n	3d80 <_usart_interrupt_handler+0x100>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    3d24:	079a      	lsls	r2, r3, #30
    3d26:	d505      	bpl.n	3d34 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    3d28:	221a      	movs	r2, #26
    3d2a:	2332      	movs	r3, #50	; 0x32
    3d2c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    3d2e:	3b30      	subs	r3, #48	; 0x30
    3d30:	8363      	strh	r3, [r4, #26]
    3d32:	e01f      	b.n	3d74 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    3d34:	075a      	lsls	r2, r3, #29
    3d36:	d505      	bpl.n	3d44 <_usart_interrupt_handler+0xc4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    3d38:	221e      	movs	r2, #30
    3d3a:	2332      	movs	r3, #50	; 0x32
    3d3c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    3d3e:	3b2e      	subs	r3, #46	; 0x2e
    3d40:	8363      	strh	r3, [r4, #26]
    3d42:	e017      	b.n	3d74 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    3d44:	07da      	lsls	r2, r3, #31
    3d46:	d505      	bpl.n	3d54 <_usart_interrupt_handler+0xd4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    3d48:	2213      	movs	r2, #19
    3d4a:	2332      	movs	r3, #50	; 0x32
    3d4c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    3d4e:	3b31      	subs	r3, #49	; 0x31
    3d50:	8363      	strh	r3, [r4, #26]
    3d52:	e00f      	b.n	3d74 <_usart_interrupt_handler+0xf4>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    3d54:	06da      	lsls	r2, r3, #27
    3d56:	d505      	bpl.n	3d64 <_usart_interrupt_handler+0xe4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    3d58:	2242      	movs	r2, #66	; 0x42
    3d5a:	2332      	movs	r3, #50	; 0x32
    3d5c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    3d5e:	3b22      	subs	r3, #34	; 0x22
    3d60:	8363      	strh	r3, [r4, #26]
    3d62:	e007      	b.n	3d74 <_usart_interrupt_handler+0xf4>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    3d64:	2220      	movs	r2, #32
    3d66:	421a      	tst	r2, r3
    3d68:	d004      	beq.n	3d74 <_usart_interrupt_handler+0xf4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    3d6a:	3221      	adds	r2, #33	; 0x21
    3d6c:	2332      	movs	r3, #50	; 0x32
    3d6e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    3d70:	3b12      	subs	r3, #18
    3d72:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    3d74:	077b      	lsls	r3, r7, #29
    3d76:	d527      	bpl.n	3dc8 <_usart_interrupt_handler+0x148>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    3d78:	0028      	movs	r0, r5
    3d7a:	696b      	ldr	r3, [r5, #20]
    3d7c:	4798      	blx	r3
    3d7e:	e023      	b.n	3dc8 <_usart_interrupt_handler+0x148>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    3d80:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    3d82:	05db      	lsls	r3, r3, #23
    3d84:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    3d86:	b2da      	uxtb	r2, r3
    3d88:	6a69      	ldr	r1, [r5, #36]	; 0x24
    3d8a:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    3d8c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    3d8e:	1c51      	adds	r1, r2, #1
    3d90:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    3d92:	7969      	ldrb	r1, [r5, #5]
    3d94:	2901      	cmp	r1, #1
    3d96:	d104      	bne.n	3da2 <_usart_interrupt_handler+0x122>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    3d98:	0a1b      	lsrs	r3, r3, #8
    3d9a:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    3d9c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3d9e:	3301      	adds	r3, #1
    3da0:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    3da2:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    3da4:	3b01      	subs	r3, #1
    3da6:	b29b      	uxth	r3, r3
    3da8:	85ab      	strh	r3, [r5, #44]	; 0x2c
    3daa:	2b00      	cmp	r3, #0
    3dac:	d10c      	bne.n	3dc8 <_usart_interrupt_handler+0x148>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    3dae:	3304      	adds	r3, #4
    3db0:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    3db2:	2200      	movs	r2, #0
    3db4:	332e      	adds	r3, #46	; 0x2e
    3db6:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    3db8:	07bb      	lsls	r3, r7, #30
    3dba:	d505      	bpl.n	3dc8 <_usart_interrupt_handler+0x148>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    3dbc:	0028      	movs	r0, r5
    3dbe:	692b      	ldr	r3, [r5, #16]
    3dc0:	4798      	blx	r3
    3dc2:	e001      	b.n	3dc8 <_usart_interrupt_handler+0x148>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    3dc4:	2304      	movs	r3, #4
    3dc6:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    3dc8:	06f3      	lsls	r3, r6, #27
    3dca:	d507      	bpl.n	3ddc <_usart_interrupt_handler+0x15c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    3dcc:	2310      	movs	r3, #16
    3dce:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    3dd0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    3dd2:	06fb      	lsls	r3, r7, #27
    3dd4:	d502      	bpl.n	3ddc <_usart_interrupt_handler+0x15c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    3dd6:	0028      	movs	r0, r5
    3dd8:	69eb      	ldr	r3, [r5, #28]
    3dda:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    3ddc:	06b3      	lsls	r3, r6, #26
    3dde:	d507      	bpl.n	3df0 <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    3de0:	2320      	movs	r3, #32
    3de2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    3de4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    3de6:	073b      	lsls	r3, r7, #28
    3de8:	d502      	bpl.n	3df0 <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    3dea:	0028      	movs	r0, r5
    3dec:	69ab      	ldr	r3, [r5, #24]
    3dee:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    3df0:	0733      	lsls	r3, r6, #28
    3df2:	d507      	bpl.n	3e04 <_usart_interrupt_handler+0x184>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    3df4:	2308      	movs	r3, #8
    3df6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    3df8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    3dfa:	06bb      	lsls	r3, r7, #26
    3dfc:	d502      	bpl.n	3e04 <_usart_interrupt_handler+0x184>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    3dfe:	6a2b      	ldr	r3, [r5, #32]
    3e00:	0028      	movs	r0, r5
    3e02:	4798      	blx	r3
		}
	}
#endif
}
    3e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e06:	46c0      	nop			; (mov r8, r8)
    3e08:	20000848 	.word	0x20000848

00003e0c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    3e0c:	b510      	push	{r4, lr}
	switch (clock_source) {
    3e0e:	2808      	cmp	r0, #8
    3e10:	d803      	bhi.n	3e1a <system_clock_source_get_hz+0xe>
    3e12:	0080      	lsls	r0, r0, #2
    3e14:	4b1c      	ldr	r3, [pc, #112]	; (3e88 <system_clock_source_get_hz+0x7c>)
    3e16:	581b      	ldr	r3, [r3, r0]
    3e18:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    3e1a:	2000      	movs	r0, #0
    3e1c:	e032      	b.n	3e84 <system_clock_source_get_hz+0x78>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    3e1e:	4b1b      	ldr	r3, [pc, #108]	; (3e8c <system_clock_source_get_hz+0x80>)
    3e20:	6918      	ldr	r0, [r3, #16]
    3e22:	e02f      	b.n	3e84 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    3e24:	4b1a      	ldr	r3, [pc, #104]	; (3e90 <system_clock_source_get_hz+0x84>)
    3e26:	7d18      	ldrb	r0, [r3, #20]
    3e28:	0700      	lsls	r0, r0, #28
    3e2a:	0f80      	lsrs	r0, r0, #30
    3e2c:	3001      	adds	r0, #1
    3e2e:	4b19      	ldr	r3, [pc, #100]	; (3e94 <system_clock_source_get_hz+0x88>)
    3e30:	4358      	muls	r0, r3
    3e32:	e027      	b.n	3e84 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    3e34:	4b15      	ldr	r3, [pc, #84]	; (3e8c <system_clock_source_get_hz+0x80>)
    3e36:	6958      	ldr	r0, [r3, #20]
    3e38:	e024      	b.n	3e84 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    3e3a:	4b14      	ldr	r3, [pc, #80]	; (3e8c <system_clock_source_get_hz+0x80>)
    3e3c:	681b      	ldr	r3, [r3, #0]
    3e3e:	2002      	movs	r0, #2
    3e40:	4018      	ands	r0, r3
    3e42:	d01f      	beq.n	3e84 <system_clock_source_get_hz+0x78>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    3e44:	4912      	ldr	r1, [pc, #72]	; (3e90 <system_clock_source_get_hz+0x84>)
    3e46:	2280      	movs	r2, #128	; 0x80
    3e48:	0052      	lsls	r2, r2, #1
    3e4a:	68cb      	ldr	r3, [r1, #12]
    3e4c:	4213      	tst	r3, r2
    3e4e:	d0fc      	beq.n	3e4a <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    3e50:	4b0e      	ldr	r3, [pc, #56]	; (3e8c <system_clock_source_get_hz+0x80>)
    3e52:	681b      	ldr	r3, [r3, #0]
    3e54:	075b      	lsls	r3, r3, #29
    3e56:	d514      	bpl.n	3e82 <system_clock_source_get_hz+0x76>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    3e58:	2000      	movs	r0, #0
    3e5a:	4b0f      	ldr	r3, [pc, #60]	; (3e98 <system_clock_source_get_hz+0x8c>)
    3e5c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    3e5e:	4b0b      	ldr	r3, [pc, #44]	; (3e8c <system_clock_source_get_hz+0x80>)
    3e60:	689b      	ldr	r3, [r3, #8]
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    3e62:	041b      	lsls	r3, r3, #16
    3e64:	0c1b      	lsrs	r3, r3, #16
    3e66:	4358      	muls	r0, r3
    3e68:	e00c      	b.n	3e84 <system_clock_source_get_hz+0x78>
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    3e6a:	2328      	movs	r3, #40	; 0x28
    3e6c:	4a08      	ldr	r2, [pc, #32]	; (3e90 <system_clock_source_get_hz+0x84>)
    3e6e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    3e70:	2000      	movs	r0, #0
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    3e72:	079b      	lsls	r3, r3, #30
    3e74:	d506      	bpl.n	3e84 <system_clock_source_get_hz+0x78>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    3e76:	4b05      	ldr	r3, [pc, #20]	; (3e8c <system_clock_source_get_hz+0x80>)
    3e78:	68d8      	ldr	r0, [r3, #12]
    3e7a:	e003      	b.n	3e84 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    3e7c:	2080      	movs	r0, #128	; 0x80
    3e7e:	0200      	lsls	r0, r0, #8
    3e80:	e000      	b.n	3e84 <system_clock_source_get_hz+0x78>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    3e82:	4806      	ldr	r0, [pc, #24]	; (3e9c <system_clock_source_get_hz+0x90>)
		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
	}
}
    3e84:	bd10      	pop	{r4, pc}
    3e86:	46c0      	nop			; (mov r8, r8)
    3e88:	00007190 	.word	0x00007190
    3e8c:	200003a0 	.word	0x200003a0
    3e90:	40000c00 	.word	0x40000c00
    3e94:	003d0900 	.word	0x003d0900
    3e98:	0000441d 	.word	0x0000441d
    3e9c:	02dc6c00 	.word	0x02dc6c00

00003ea0 <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
    3ea0:	b530      	push	{r4, r5, lr}
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
    3ea2:	4c0c      	ldr	r4, [pc, #48]	; (3ed4 <system_clock_source_osc16m_set_config+0x34>)
    3ea4:	7d23      	ldrb	r3, [r4, #20]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
	temp.bit.ONDEMAND = config->on_demand;
    3ea6:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;
    3ea8:	7841      	ldrb	r1, [r0, #1]

	OSCCTRL->OSC16MCTRL = temp;
    3eaa:	7800      	ldrb	r0, [r0, #0]
    3eac:	2203      	movs	r2, #3
    3eae:	4010      	ands	r0, r2
    3eb0:	0080      	lsls	r0, r0, #2
    3eb2:	3209      	adds	r2, #9
    3eb4:	4393      	bics	r3, r2
    3eb6:	4303      	orrs	r3, r0
    3eb8:	3a0b      	subs	r2, #11
    3eba:	4011      	ands	r1, r2
    3ebc:	0189      	lsls	r1, r1, #6
    3ebe:	323f      	adds	r2, #63	; 0x3f
    3ec0:	4393      	bics	r3, r2
    3ec2:	430b      	orrs	r3, r1
    3ec4:	001a      	movs	r2, r3
    3ec6:	01e9      	lsls	r1, r5, #7
    3ec8:	237f      	movs	r3, #127	; 0x7f
    3eca:	4013      	ands	r3, r2
    3ecc:	430b      	orrs	r3, r1
    3ece:	7523      	strb	r3, [r4, #20]
}
    3ed0:	bd30      	pop	{r4, r5, pc}
    3ed2:	46c0      	nop			; (mov r8, r8)
    3ed4:	40000c00 	.word	0x40000c00

00003ed8 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    3ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3eda:	4657      	mov	r7, sl
    3edc:	464e      	mov	r6, r9
    3ede:	4645      	mov	r5, r8
    3ee0:	b4e0      	push	{r5, r6, r7}
	OSC32KCTRL_OSC32K_Type temp = OSC32KCTRL->OSC32K;
    3ee2:	4e1c      	ldr	r6, [pc, #112]	; (3f54 <system_clock_source_osc32k_set_config+0x7c>)
    3ee4:	69b3      	ldr	r3, [r6, #24]
    3ee6:	469c      	mov	ip, r3


	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    3ee8:	7841      	ldrb	r1, [r0, #1]
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    3eea:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    3eec:	7907      	ldrb	r7, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    3eee:	78c3      	ldrb	r3, [r0, #3]
    3ef0:	4699      	mov	r9, r3
	temp.bit.WRTLOCK  = config->write_once;
    3ef2:	7944      	ldrb	r4, [r0, #5]

	OSC32KCTRL->OSC32K  = temp;
    3ef4:	7883      	ldrb	r3, [r0, #2]
    3ef6:	2001      	movs	r0, #1
    3ef8:	4003      	ands	r3, r0
    3efa:	009b      	lsls	r3, r3, #2
    3efc:	469a      	mov	sl, r3
    3efe:	2204      	movs	r2, #4
    3f00:	4690      	mov	r8, r2
    3f02:	4662      	mov	r2, ip
    3f04:	4643      	mov	r3, r8
    3f06:	439a      	bics	r2, r3
    3f08:	0013      	movs	r3, r2
    3f0a:	4652      	mov	r2, sl
    3f0c:	431a      	orrs	r2, r3
    3f0e:	0013      	movs	r3, r2
    3f10:	4001      	ands	r1, r0
    3f12:	00c9      	lsls	r1, r1, #3
    3f14:	2208      	movs	r2, #8
    3f16:	4393      	bics	r3, r2
    3f18:	430b      	orrs	r3, r1
    3f1a:	464a      	mov	r2, r9
    3f1c:	4002      	ands	r2, r0
    3f1e:	0192      	lsls	r2, r2, #6
    3f20:	2140      	movs	r1, #64	; 0x40
    3f22:	438b      	bics	r3, r1
    3f24:	4313      	orrs	r3, r2
    3f26:	4007      	ands	r7, r0
    3f28:	01ff      	lsls	r7, r7, #7
    3f2a:	2280      	movs	r2, #128	; 0x80
    3f2c:	4393      	bics	r3, r2
    3f2e:	433b      	orrs	r3, r7
    3f30:	3a79      	subs	r2, #121	; 0x79
    3f32:	4015      	ands	r5, r2
    3f34:	022d      	lsls	r5, r5, #8
    3f36:	4f08      	ldr	r7, [pc, #32]	; (3f58 <system_clock_source_osc32k_set_config+0x80>)
    3f38:	403b      	ands	r3, r7
    3f3a:	432b      	orrs	r3, r5
    3f3c:	4004      	ands	r4, r0
    3f3e:	0320      	lsls	r0, r4, #12
    3f40:	4c06      	ldr	r4, [pc, #24]	; (3f5c <system_clock_source_osc32k_set_config+0x84>)
    3f42:	401c      	ands	r4, r3
    3f44:	4304      	orrs	r4, r0
    3f46:	61b4      	str	r4, [r6, #24]
}
    3f48:	bc1c      	pop	{r2, r3, r4}
    3f4a:	4690      	mov	r8, r2
    3f4c:	4699      	mov	r9, r3
    3f4e:	46a2      	mov	sl, r4
    3f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f52:	46c0      	nop			; (mov r8, r8)
    3f54:	40001000 	.word	0x40001000
    3f58:	fffff8ff 	.word	0xfffff8ff
    3f5c:	ffffefff 	.word	0xffffefff

00003f60 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    3f60:	2808      	cmp	r0, #8
    3f62:	d803      	bhi.n	3f6c <system_clock_source_enable+0xc>
    3f64:	0080      	lsls	r0, r0, #2
    3f66:	4b29      	ldr	r3, [pc, #164]	; (400c <system_clock_source_enable+0xac>)
    3f68:	581b      	ldr	r3, [r3, r0]
    3f6a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3f6c:	2017      	movs	r0, #23
    3f6e:	e04b      	b.n	4008 <system_clock_source_enable+0xa8>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    3f70:	4a27      	ldr	r2, [pc, #156]	; (4010 <system_clock_source_enable+0xb0>)
    3f72:	7d11      	ldrb	r1, [r2, #20]
    3f74:	2302      	movs	r3, #2
    3f76:	430b      	orrs	r3, r1
    3f78:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    3f7a:	2000      	movs	r0, #0
    3f7c:	e044      	b.n	4008 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    3f7e:	4a25      	ldr	r2, [pc, #148]	; (4014 <system_clock_source_enable+0xb4>)
    3f80:	6991      	ldr	r1, [r2, #24]
    3f82:	2302      	movs	r3, #2
    3f84:	430b      	orrs	r3, r1
    3f86:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    3f88:	2000      	movs	r0, #0
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
		break;
    3f8a:	e03d      	b.n	4008 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    3f8c:	4a20      	ldr	r2, [pc, #128]	; (4010 <system_clock_source_enable+0xb0>)
    3f8e:	8a11      	ldrh	r1, [r2, #16]
    3f90:	2302      	movs	r3, #2
    3f92:	430b      	orrs	r3, r1
    3f94:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    3f96:	2000      	movs	r0, #0
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
		break;
    3f98:	e036      	b.n	4008 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    3f9a:	4a1e      	ldr	r2, [pc, #120]	; (4014 <system_clock_source_enable+0xb4>)
    3f9c:	6951      	ldr	r1, [r2, #20]
    3f9e:	2302      	movs	r3, #2
    3fa0:	430b      	orrs	r3, r1
    3fa2:	6153      	str	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    3fa4:	2000      	movs	r0, #0
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
		break;
    3fa6:	e02f      	b.n	4008 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    3fa8:	491b      	ldr	r1, [pc, #108]	; (4018 <system_clock_source_enable+0xb8>)
    3faa:	680b      	ldr	r3, [r1, #0]
    3fac:	2202      	movs	r2, #2
    3fae:	4313      	orrs	r3, r2
    3fb0:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    3fb2:	4b17      	ldr	r3, [pc, #92]	; (4010 <system_clock_source_enable+0xb0>)
    3fb4:	831a      	strh	r2, [r3, #24]
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    3fb6:	0019      	movs	r1, r3
    3fb8:	32fe      	adds	r2, #254	; 0xfe
    3fba:	68cb      	ldr	r3, [r1, #12]
    3fbc:	4213      	tst	r3, r2
    3fbe:	d0fc      	beq.n	3fba <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    3fc0:	4a15      	ldr	r2, [pc, #84]	; (4018 <system_clock_source_enable+0xb8>)
    3fc2:	6891      	ldr	r1, [r2, #8]
    3fc4:	4b12      	ldr	r3, [pc, #72]	; (4010 <system_clock_source_enable+0xb0>)
    3fc6:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    3fc8:	6852      	ldr	r2, [r2, #4]
    3fca:	61da      	str	r2, [r3, #28]

	/* Write full configuration to DFLL control register */
	OSCCTRL->DFLLCTRL.reg = 0;
    3fcc:	2200      	movs	r2, #0
    3fce:	831a      	strh	r2, [r3, #24]
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    3fd0:	0019      	movs	r1, r3
    3fd2:	3201      	adds	r2, #1
    3fd4:	32ff      	adds	r2, #255	; 0xff
    3fd6:	68cb      	ldr	r3, [r1, #12]
    3fd8:	4213      	tst	r3, r2
    3fda:	d0fc      	beq.n	3fd6 <system_clock_source_enable+0x76>
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	OSCCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    3fdc:	4b0e      	ldr	r3, [pc, #56]	; (4018 <system_clock_source_enable+0xb8>)
    3fde:	681b      	ldr	r3, [r3, #0]
    3fe0:	b29b      	uxth	r3, r3
    3fe2:	4a0b      	ldr	r2, [pc, #44]	; (4010 <system_clock_source_enable+0xb0>)
    3fe4:	8313      	strh	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    3fe6:	2000      	movs	r0, #0
    3fe8:	e00e      	b.n	4008 <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
		_system_clock_source_dfll_set_config_errata_9905();
		break;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    3fea:	4909      	ldr	r1, [pc, #36]	; (4010 <system_clock_source_enable+0xb0>)
    3fec:	2228      	movs	r2, #40	; 0x28
    3fee:	5c88      	ldrb	r0, [r1, r2]
    3ff0:	2302      	movs	r3, #2
    3ff2:	4303      	orrs	r3, r0
    3ff4:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    3ff6:	0008      	movs	r0, r1
    3ff8:	2138      	movs	r1, #56	; 0x38
    3ffa:	3a26      	subs	r2, #38	; 0x26
    3ffc:	5c43      	ldrb	r3, [r0, r1]
    3ffe:	4213      	tst	r3, r2
    4000:	d1fc      	bne.n	3ffc <system_clock_source_enable+0x9c>
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4002:	2000      	movs	r0, #0
    4004:	e000      	b.n	4008 <system_clock_source_enable+0xa8>
		}
		break;

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    4006:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    4008:	4770      	bx	lr
    400a:	46c0      	nop			; (mov r8, r8)
    400c:	000071b4 	.word	0x000071b4
    4010:	40000c00 	.word	0x40000c00
    4014:	40001000 	.word	0x40001000
    4018:	200003a0 	.word	0x200003a0

0000401c <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    401c:	2808      	cmp	r0, #8
    401e:	d832      	bhi.n	4086 <system_clock_source_disable+0x6a>
    4020:	0080      	lsls	r0, r0, #2
    4022:	4b1a      	ldr	r3, [pc, #104]	; (408c <system_clock_source_disable+0x70>)
    4024:	581b      	ldr	r3, [r3, r0]
    4026:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    4028:	4a19      	ldr	r2, [pc, #100]	; (4090 <system_clock_source_disable+0x74>)
    402a:	7d13      	ldrb	r3, [r2, #20]
    402c:	2102      	movs	r1, #2
    402e:	438b      	bics	r3, r1
    4030:	7513      	strb	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    4032:	2000      	movs	r0, #0
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
		break;
    4034:	e028      	b.n	4088 <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    4036:	4a17      	ldr	r2, [pc, #92]	; (4094 <system_clock_source_disable+0x78>)
    4038:	6993      	ldr	r3, [r2, #24]
    403a:	2102      	movs	r1, #2
    403c:	438b      	bics	r3, r1
    403e:	6193      	str	r3, [r2, #24]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    4040:	2000      	movs	r0, #0
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
		break;
    4042:	e021      	b.n	4088 <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    4044:	4a12      	ldr	r2, [pc, #72]	; (4090 <system_clock_source_disable+0x74>)
    4046:	8a13      	ldrh	r3, [r2, #16]
    4048:	2102      	movs	r1, #2
    404a:	438b      	bics	r3, r1
    404c:	8213      	strh	r3, [r2, #16]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    404e:	2000      	movs	r0, #0
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
		break;
    4050:	e01a      	b.n	4088 <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    4052:	4a10      	ldr	r2, [pc, #64]	; (4094 <system_clock_source_disable+0x78>)
    4054:	6953      	ldr	r3, [r2, #20]
    4056:	2102      	movs	r1, #2
    4058:	438b      	bics	r3, r1
    405a:	6153      	str	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    405c:	2000      	movs	r0, #0
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
		break;
    405e:	e013      	b.n	4088 <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    4060:	4b0d      	ldr	r3, [pc, #52]	; (4098 <system_clock_source_disable+0x7c>)
    4062:	681a      	ldr	r2, [r3, #0]
    4064:	2102      	movs	r1, #2
    4066:	438a      	bics	r2, r1
    4068:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    406a:	681b      	ldr	r3, [r3, #0]
    406c:	b29b      	uxth	r3, r3
    406e:	4a08      	ldr	r2, [pc, #32]	; (4090 <system_clock_source_disable+0x74>)
    4070:	8313      	strh	r3, [r2, #24]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    4072:	2000      	movs	r0, #0
		break;

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
		break;
    4074:	e008      	b.n	4088 <system_clock_source_disable+0x6c>
	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    4076:	4906      	ldr	r1, [pc, #24]	; (4090 <system_clock_source_disable+0x74>)
    4078:	2228      	movs	r2, #40	; 0x28
    407a:	5c8b      	ldrb	r3, [r1, r2]
    407c:	2002      	movs	r0, #2
    407e:	4383      	bics	r3, r0
    4080:	548b      	strb	r3, [r1, r2]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    4082:	2000      	movs	r0, #0
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
		break;
	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
		break;
    4084:	e000      	b.n	4088 <system_clock_source_disable+0x6c>
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4086:	2017      	movs	r0, #23

	}

	return STATUS_OK;
}
    4088:	4770      	bx	lr
    408a:	46c0      	nop			; (mov r8, r8)
    408c:	000071d8 	.word	0x000071d8
    4090:	40000c00 	.word	0x40000c00
    4094:	40001000 	.word	0x40001000
    4098:	200003a0 	.word	0x200003a0

0000409c <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    409c:	b5f0      	push	{r4, r5, r6, r7, lr}
    409e:	4657      	mov	r7, sl
    40a0:	464e      	mov	r6, r9
    40a2:	4645      	mov	r5, r8
    40a4:	b4e0      	push	{r5, r6, r7}
    40a6:	b086      	sub	sp, #24
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    40a8:	2280      	movs	r2, #128	; 0x80
    40aa:	0052      	lsls	r2, r2, #1
    40ac:	4b49      	ldr	r3, [pc, #292]	; (41d4 <system_clock_init+0x138>)
    40ae:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    40b0:	3afd      	subs	r2, #253	; 0xfd
    40b2:	4b49      	ldr	r3, [pc, #292]	; (41d8 <system_clock_init+0x13c>)
    40b4:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    40b6:	4a49      	ldr	r2, [pc, #292]	; (41dc <system_clock_init+0x140>)
    40b8:	6853      	ldr	r3, [r2, #4]
    40ba:	211e      	movs	r1, #30
    40bc:	438b      	bics	r3, r1
    40be:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    40c0:	2380      	movs	r3, #128	; 0x80
    40c2:	05db      	lsls	r3, r3, #23
    40c4:	789b      	ldrb	r3, [r3, #2]
    40c6:	2b02      	cmp	r3, #2
    40c8:	d009      	beq.n	40de <system_clock_init+0x42>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    40ca:	2380      	movs	r3, #128	; 0x80
    40cc:	05db      	lsls	r3, r3, #23
    40ce:	2201      	movs	r2, #1
    40d0:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    40d2:	3201      	adds	r2, #1
    40d4:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    40d6:	001a      	movs	r2, r3
    40d8:	7993      	ldrb	r3, [r2, #6]
    40da:	2b00      	cmp	r3, #0
    40dc:	d0fc      	beq.n	40d8 <system_clock_init+0x3c>
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
	Assert(config);

	config->enable_1khz_output  = true;
    40de:	a804      	add	r0, sp, #16
    40e0:	2501      	movs	r5, #1
    40e2:	7045      	strb	r5, [r0, #1]
	config->enable_32khz_output = true;
    40e4:	7085      	strb	r5, [r0, #2]
	config->run_in_standby      = false;
    40e6:	2400      	movs	r4, #0
    40e8:	70c4      	strb	r4, [r0, #3]
	config->on_demand           = true;
    40ea:	7105      	strb	r5, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    40ec:	2307      	movs	r3, #7
    40ee:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
    40f0:	7144      	strb	r4, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    40f2:	4b3b      	ldr	r3, [pc, #236]	; (41e0 <system_clock_init+0x144>)
    40f4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    40f6:	2004      	movs	r0, #4
    40f8:	4e3a      	ldr	r6, [pc, #232]	; (41e4 <system_clock_init+0x148>)
    40fa:	47b0      	blx	r6
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    40fc:	a901      	add	r1, sp, #4
    40fe:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    4100:	704c      	strb	r4, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    4102:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    4104:	724c      	strb	r4, [r1, #9]
	struct system_gclk_gen_config gclk_conf;
	struct system_clock_source_osc16m_config osc16m_conf;

	/* Select OSCULP32K as new clock source for mainclock temporarily */
	system_gclk_gen_get_config_defaults(&gclk_conf);
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    4106:	2303      	movs	r3, #3
    4108:	700b      	strb	r3, [r1, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    410a:	2000      	movs	r0, #0
    410c:	4b36      	ldr	r3, [pc, #216]	; (41e8 <system_clock_init+0x14c>)
    410e:	4798      	blx	r3

	/* GCLK0 is enabled after POR */

	/* Disable OSC16M clock*/
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    4110:	2006      	movs	r0, #6
    4112:	4b36      	ldr	r3, [pc, #216]	; (41ec <system_clock_init+0x150>)
    4114:	4798      	blx	r3
		struct system_clock_source_osc16m_config *const config)
{
	Assert(config);

	config->fsel = SYSTEM_OSC16M_4M;
	config->run_in_standby  = false;
    4116:	466b      	mov	r3, sp
    4118:	705c      	strb	r4, [r3, #1]

	/* Switch to new frequency selection and enable OSC16M */
	system_clock_source_osc16m_get_config_defaults(&osc16m_conf);
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    411a:	701d      	strb	r5, [r3, #0]
	osc16m_conf.on_demand       = 0;
    411c:	709c      	strb	r4, [r3, #2]
	osc16m_conf.run_in_standby  = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
	system_clock_source_osc16m_set_config(&osc16m_conf);
    411e:	4668      	mov	r0, sp
    4120:	4b33      	ldr	r3, [pc, #204]	; (41f0 <system_clock_init+0x154>)
    4122:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    4124:	2006      	movs	r0, #6
    4126:	47b0      	blx	r6
	uint32_t mask = 0;

	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		mask = OSCCTRL_STATUS_OSC16MRDY;
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    4128:	492a      	ldr	r1, [pc, #168]	; (41d4 <system_clock_init+0x138>)
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
	osc16m_conf.on_demand       = 0;
	osc16m_conf.run_in_standby  = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
	system_clock_source_osc16m_set_config(&osc16m_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    412a:	2210      	movs	r2, #16
	uint32_t mask = 0;

	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		mask = OSCCTRL_STATUS_OSC16MRDY;
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    412c:	68cb      	ldr	r3, [r1, #12]
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
	osc16m_conf.on_demand       = 0;
	osc16m_conf.run_in_standby  = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
	system_clock_source_osc16m_set_config(&osc16m_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    412e:	421a      	tst	r2, r3
    4130:	d0fc      	beq.n	412c <system_clock_init+0x90>
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    4132:	ac01      	add	r4, sp, #4
    4134:	2601      	movs	r6, #1
    4136:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    4138:	2500      	movs	r5, #0
    413a:	7065      	strb	r5, [r4, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
    413c:	2306      	movs	r3, #6
    413e:	4699      	mov	r9, r3
    4140:	7023      	strb	r3, [r4, #0]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    4142:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    4144:	7265      	strb	r5, [r4, #9]

	/* Select OSC16M for mainclock again */
	system_gclk_gen_get_config_defaults(&gclk_conf);
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_OSC16M;
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    4146:	0021      	movs	r1, r4
    4148:	2000      	movs	r0, #0
    414a:	4b27      	ldr	r3, [pc, #156]	; (41e8 <system_clock_init+0x14c>)
    414c:	4698      	mov	r8, r3
    414e:	4798      	blx	r3
	if (CONF_CLOCK_OSC16M_ON_DEMAND){
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
    4150:	4a20      	ldr	r2, [pc, #128]	; (41d4 <system_clock_init+0x138>)
    4152:	7d11      	ldrb	r1, [r2, #20]
    4154:	2380      	movs	r3, #128	; 0x80
    4156:	430b      	orrs	r3, r1
    4158:	7513      	strb	r3, [r2, #20]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    415a:	4b26      	ldr	r3, [pc, #152]	; (41f4 <system_clock_init+0x158>)
    415c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    415e:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    4160:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    4162:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    4164:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    4166:	2304      	movs	r3, #4
    4168:	7023      	strb	r3, [r4, #0]
    416a:	0021      	movs	r1, r4
    416c:	2001      	movs	r0, #1
    416e:	47c0      	blx	r8
    4170:	2001      	movs	r0, #1
    4172:	4b21      	ldr	r3, [pc, #132]	; (41f8 <system_clock_init+0x15c>)
    4174:	469a      	mov	sl, r3
    4176:	4798      	blx	r3
 * \param[in] divider  CPU clock divider
 */
static inline void system_backup_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    4178:	4f20      	ldr	r7, [pc, #128]	; (41fc <system_clock_init+0x160>)
    417a:	71be      	strb	r6, [r7, #6]
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_low_power_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    417c:	717e      	strb	r6, [r7, #5]
 * \param[in] divider  CPU clock divider
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    417e:	713e      	strb	r6, [r7, #4]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    4180:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    4182:	7065      	strb	r5, [r4, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
    4184:	464b      	mov	r3, r9
    4186:	7023      	strb	r3, [r4, #0]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    4188:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    418a:	7265      	strb	r5, [r4, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    418c:	0021      	movs	r1, r4
    418e:	2000      	movs	r0, #0
    4190:	47c0      	blx	r8
    4192:	2000      	movs	r0, #0
    4194:	47d0      	blx	sl
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    4196:	2000      	movs	r0, #0
    4198:	4b19      	ldr	r3, [pc, #100]	; (4200 <system_clock_init+0x164>)
    419a:	4798      	blx	r3
    419c:	7939      	ldrb	r1, [r7, #4]
    419e:	b2c9      	uxtb	r1, r1
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    41a0:	4b18      	ldr	r3, [pc, #96]	; (4204 <system_clock_init+0x168>)
    41a2:	4798      	blx	r3
    41a4:	4b18      	ldr	r3, [pc, #96]	; (4208 <system_clock_init+0x16c>)
    41a6:	4298      	cmp	r0, r3
    41a8:	d80e      	bhi.n	41c8 <system_clock_init+0x12c>
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    41aa:	2380      	movs	r3, #128	; 0x80
    41ac:	05db      	lsls	r3, r3, #23
    41ae:	789b      	ldrb	r3, [r3, #2]
    41b0:	2b00      	cmp	r3, #0
    41b2:	d009      	beq.n	41c8 <system_clock_init+0x12c>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    41b4:	2380      	movs	r3, #128	; 0x80
    41b6:	05db      	lsls	r3, r3, #23
    41b8:	2201      	movs	r2, #1
    41ba:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    41bc:	2200      	movs	r2, #0
    41be:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    41c0:	001a      	movs	r2, r3
    41c2:	7993      	ldrb	r3, [r2, #6]
    41c4:	2b00      	cmp	r3, #0
    41c6:	d0fc      	beq.n	41c2 <system_clock_init+0x126>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    41c8:	b006      	add	sp, #24
    41ca:	bc1c      	pop	{r2, r3, r4}
    41cc:	4690      	mov	r8, r2
    41ce:	4699      	mov	r9, r3
    41d0:	46a2      	mov	sl, r4
    41d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    41d4:	40000c00 	.word	0x40000c00
    41d8:	40001400 	.word	0x40001400
    41dc:	41004000 	.word	0x41004000
    41e0:	00003ed9 	.word	0x00003ed9
    41e4:	00003f61 	.word	0x00003f61
    41e8:	00004231 	.word	0x00004231
    41ec:	0000401d 	.word	0x0000401d
    41f0:	00003ea1 	.word	0x00003ea1
    41f4:	0000420d 	.word	0x0000420d
    41f8:	000042dd 	.word	0x000042dd
    41fc:	40000400 	.word	0x40000400
    4200:	0000431d 	.word	0x0000431d
    4204:	00005ab5 	.word	0x00005ab5
    4208:	00b71b00 	.word	0x00b71b00

0000420c <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    420c:	4a06      	ldr	r2, [pc, #24]	; (4228 <system_gclk_init+0x1c>)
    420e:	6951      	ldr	r1, [r2, #20]
    4210:	2340      	movs	r3, #64	; 0x40
    4212:	430b      	orrs	r3, r1
    4214:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    4216:	2201      	movs	r2, #1
    4218:	4b04      	ldr	r3, [pc, #16]	; (422c <system_gclk_init+0x20>)
    421a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    421c:	0019      	movs	r1, r3
    421e:	780b      	ldrb	r3, [r1, #0]
    4220:	4213      	tst	r3, r2
    4222:	d1fc      	bne.n	421e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    4224:	4770      	bx	lr
    4226:	46c0      	nop			; (mov r8, r8)
    4228:	40000400 	.word	0x40000400
    422c:	40001800 	.word	0x40001800

00004230 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    4230:	b570      	push	{r4, r5, r6, lr}
    4232:	0005      	movs	r5, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    4234:	780c      	ldrb	r4, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    4236:	784b      	ldrb	r3, [r1, #1]
    4238:	2b00      	cmp	r3, #0
    423a:	d002      	beq.n	4242 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    423c:	2380      	movs	r3, #128	; 0x80
    423e:	00db      	lsls	r3, r3, #3
    4240:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    4242:	7a4b      	ldrb	r3, [r1, #9]
    4244:	2b00      	cmp	r3, #0
    4246:	d002      	beq.n	424e <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    4248:	2380      	movs	r3, #128	; 0x80
    424a:	011b      	lsls	r3, r3, #4
    424c:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    424e:	684a      	ldr	r2, [r1, #4]
    4250:	2a01      	cmp	r2, #1
    4252:	d917      	bls.n	4284 <system_gclk_gen_set_config+0x54>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    4254:	1e53      	subs	r3, r2, #1
    4256:	421a      	tst	r2, r3
    4258:	d10f      	bne.n	427a <system_gclk_gen_set_config+0x4a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    425a:	2a02      	cmp	r2, #2
    425c:	d906      	bls.n	426c <system_gclk_gen_set_config+0x3c>
    425e:	2302      	movs	r3, #2
    4260:	2000      	movs	r0, #0
						mask <<= 1) {
				div2_count++;
    4262:	3001      	adds	r0, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    4264:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4266:	429a      	cmp	r2, r3
    4268:	d8fb      	bhi.n	4262 <system_gclk_gen_set_config+0x32>
    426a:	e000      	b.n	426e <system_gclk_gen_set_config+0x3e>
    426c:	2000      	movs	r0, #0
    426e:	2380      	movs	r3, #128	; 0x80
    4270:	015b      	lsls	r3, r3, #5
    4272:	431c      	orrs	r4, r3
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    4274:	0400      	lsls	r0, r0, #16
    4276:	4304      	orrs	r4, r0
    4278:	e004      	b.n	4284 <system_gclk_gen_set_config+0x54>

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    427a:	0412      	lsls	r2, r2, #16
    427c:	2380      	movs	r3, #128	; 0x80
    427e:	009b      	lsls	r3, r3, #2
    4280:	431a      	orrs	r2, r3
    4282:	4314      	orrs	r4, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    4284:	7a0b      	ldrb	r3, [r1, #8]
    4286:	2b00      	cmp	r3, #0
    4288:	d002      	beq.n	4290 <system_gclk_gen_set_config+0x60>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    428a:	2380      	movs	r3, #128	; 0x80
    428c:	019b      	lsls	r3, r3, #6
    428e:	431c      	orrs	r4, r3
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    4290:	2604      	movs	r6, #4
    4292:	40ae      	lsls	r6, r5
    4294:	490d      	ldr	r1, [pc, #52]	; (42cc <system_gclk_gen_set_config+0x9c>)
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
    4296:	4a0e      	ldr	r2, [pc, #56]	; (42d0 <system_gclk_gen_set_config+0xa0>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    4298:	684b      	ldr	r3, [r1, #4]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
    429a:	4013      	ands	r3, r2
    429c:	421e      	tst	r6, r3
    429e:	d1fb      	bne.n	4298 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    42a0:	4b0c      	ldr	r3, [pc, #48]	; (42d4 <system_gclk_gen_set_config+0xa4>)
    42a2:	4798      	blx	r3
    42a4:	00ad      	lsls	r5, r5, #2
    42a6:	4b09      	ldr	r3, [pc, #36]	; (42cc <system_gclk_gen_set_config+0x9c>)
    42a8:	469c      	mov	ip, r3
    42aa:	4465      	add	r5, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    42ac:	6a28      	ldr	r0, [r5, #32]
    42ae:	2380      	movs	r3, #128	; 0x80
    42b0:	005b      	lsls	r3, r3, #1
    42b2:	4018      	ands	r0, r3
    42b4:	4320      	orrs	r0, r4
    42b6:	6228      	str	r0, [r5, #32]
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    42b8:	4661      	mov	r1, ip

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
    42ba:	4a05      	ldr	r2, [pc, #20]	; (42d0 <system_gclk_gen_set_config+0xa0>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    42bc:	684b      	ldr	r3, [r1, #4]

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
    42be:	4013      	ands	r3, r2
    42c0:	421e      	tst	r6, r3
    42c2:	d1fb      	bne.n	42bc <system_gclk_gen_set_config+0x8c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    42c4:	4b04      	ldr	r3, [pc, #16]	; (42d8 <system_gclk_gen_set_config+0xa8>)
    42c6:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    42c8:	bd70      	pop	{r4, r5, r6, pc}
    42ca:	46c0      	nop			; (mov r8, r8)
    42cc:	40001800 	.word	0x40001800
    42d0:	000007fc 	.word	0x000007fc
    42d4:	00002a0d 	.word	0x00002a0d
    42d8:	00002a4d 	.word	0x00002a4d

000042dc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    42dc:	b510      	push	{r4, lr}
    42de:	0004      	movs	r4, r0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    42e0:	2204      	movs	r2, #4
    42e2:	4082      	lsls	r2, r0
    42e4:	4809      	ldr	r0, [pc, #36]	; (430c <system_gclk_gen_enable+0x30>)
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    42e6:	490a      	ldr	r1, [pc, #40]	; (4310 <system_gclk_gen_enable+0x34>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    42e8:	6843      	ldr	r3, [r0, #4]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    42ea:	400b      	ands	r3, r1
    42ec:	421a      	tst	r2, r3
    42ee:	d1fb      	bne.n	42e8 <system_gclk_gen_enable+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    42f0:	4b08      	ldr	r3, [pc, #32]	; (4314 <system_gclk_gen_enable+0x38>)
    42f2:	4798      	blx	r3
    42f4:	00a4      	lsls	r4, r4, #2
    42f6:	4b05      	ldr	r3, [pc, #20]	; (430c <system_gclk_gen_enable+0x30>)
    42f8:	469c      	mov	ip, r3
    42fa:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    42fc:	6a23      	ldr	r3, [r4, #32]
    42fe:	2280      	movs	r2, #128	; 0x80
    4300:	0052      	lsls	r2, r2, #1
    4302:	4313      	orrs	r3, r2
    4304:	6223      	str	r3, [r4, #32]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4306:	4b04      	ldr	r3, [pc, #16]	; (4318 <system_gclk_gen_enable+0x3c>)
    4308:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    430a:	bd10      	pop	{r4, pc}
    430c:	40001800 	.word	0x40001800
    4310:	000007fc 	.word	0x000007fc
    4314:	00002a0d 	.word	0x00002a0d
    4318:	00002a4d 	.word	0x00002a4d

0000431c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    431e:	0004      	movs	r4, r0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    4320:	2204      	movs	r2, #4
    4322:	4082      	lsls	r2, r0
    4324:	4812      	ldr	r0, [pc, #72]	; (4370 <system_gclk_gen_get_hz+0x54>)
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    4326:	4913      	ldr	r1, [pc, #76]	; (4374 <system_gclk_gen_get_hz+0x58>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    4328:	6843      	ldr	r3, [r0, #4]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    432a:	400b      	ands	r3, r1
    432c:	421a      	tst	r2, r3
    432e:	d1fb      	bne.n	4328 <system_gclk_gen_get_hz+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4330:	4b11      	ldr	r3, [pc, #68]	; (4378 <system_gclk_gen_get_hz+0x5c>)
    4332:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    4334:	4f0e      	ldr	r7, [pc, #56]	; (4370 <system_gclk_gen_get_hz+0x54>)
    4336:	3408      	adds	r4, #8
    4338:	00a4      	lsls	r4, r4, #2
    433a:	59e0      	ldr	r0, [r4, r7]
    433c:	0700      	lsls	r0, r0, #28
    433e:	0f00      	lsrs	r0, r0, #28
	};

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    4340:	4b0e      	ldr	r3, [pc, #56]	; (437c <system_gclk_gen_get_hz+0x60>)
    4342:	4798      	blx	r3
    4344:	0006      	movs	r6, r0
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    4346:	59e5      	ldr	r5, [r4, r7]
    4348:	04ed      	lsls	r5, r5, #19
    434a:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    434c:	59e4      	ldr	r4, [r4, r7]
    434e:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4350:	4b0b      	ldr	r3, [pc, #44]	; (4380 <system_gclk_gen_get_hz+0x64>)
    4352:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    4354:	2d00      	cmp	r5, #0
    4356:	d107      	bne.n	4368 <system_gclk_gen_get_hz+0x4c>
    4358:	2c01      	cmp	r4, #1
    435a:	d907      	bls.n	436c <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    435c:	0021      	movs	r1, r4
    435e:	0030      	movs	r0, r6
    4360:	4b08      	ldr	r3, [pc, #32]	; (4384 <system_gclk_gen_get_hz+0x68>)
    4362:	4798      	blx	r3
    4364:	0006      	movs	r6, r0
    4366:	e001      	b.n	436c <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    4368:	3401      	adds	r4, #1
    436a:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    436c:	0030      	movs	r0, r6
    436e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4370:	40001800 	.word	0x40001800
    4374:	000007fc 	.word	0x000007fc
    4378:	00002a0d 	.word	0x00002a0d
    437c:	00003e0d 	.word	0x00003e0d
    4380:	00002a4d 	.word	0x00002a4d
    4384:	00005ab5 	.word	0x00005ab5

00004388 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    4388:	b510      	push	{r4, lr}
    438a:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    438c:	4b09      	ldr	r3, [pc, #36]	; (43b4 <system_gclk_chan_enable+0x2c>)
    438e:	4798      	blx	r3
    4390:	00a0      	lsls	r0, r4, #2
    4392:	4b09      	ldr	r3, [pc, #36]	; (43b8 <system_gclk_chan_enable+0x30>)
    4394:	469c      	mov	ip, r3
    4396:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    4398:	2280      	movs	r2, #128	; 0x80
    439a:	5881      	ldr	r1, [r0, r2]
    439c:	2340      	movs	r3, #64	; 0x40
    439e:	430b      	orrs	r3, r1
    43a0:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    43a2:	2180      	movs	r1, #128	; 0x80
    43a4:	3a40      	subs	r2, #64	; 0x40
    43a6:	5843      	ldr	r3, [r0, r1]
    43a8:	421a      	tst	r2, r3
    43aa:	d0fc      	beq.n	43a6 <system_gclk_chan_enable+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    43ac:	4b03      	ldr	r3, [pc, #12]	; (43bc <system_gclk_chan_enable+0x34>)
    43ae:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    43b0:	bd10      	pop	{r4, pc}
    43b2:	46c0      	nop			; (mov r8, r8)
    43b4:	00002a0d 	.word	0x00002a0d
    43b8:	40001800 	.word	0x40001800
    43bc:	00002a4d 	.word	0x00002a4d

000043c0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    43c0:	b510      	push	{r4, lr}
    43c2:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    43c4:	4b09      	ldr	r3, [pc, #36]	; (43ec <system_gclk_chan_disable+0x2c>)
    43c6:	4798      	blx	r3
    43c8:	00a0      	lsls	r0, r4, #2
    43ca:	4b09      	ldr	r3, [pc, #36]	; (43f0 <system_gclk_chan_disable+0x30>)
    43cc:	469c      	mov	ip, r3
    43ce:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    43d0:	2280      	movs	r2, #128	; 0x80
    43d2:	5883      	ldr	r3, [r0, r2]
    43d4:	2140      	movs	r1, #64	; 0x40
    43d6:	438b      	bics	r3, r1
    43d8:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    43da:	3140      	adds	r1, #64	; 0x40
    43dc:	3a40      	subs	r2, #64	; 0x40
    43de:	5843      	ldr	r3, [r0, r1]
    43e0:	421a      	tst	r2, r3
    43e2:	d1fc      	bne.n	43de <system_gclk_chan_disable+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    43e4:	4b03      	ldr	r3, [pc, #12]	; (43f4 <system_gclk_chan_disable+0x34>)
    43e6:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    43e8:	bd10      	pop	{r4, pc}
    43ea:	46c0      	nop			; (mov r8, r8)
    43ec:	00002a0d 	.word	0x00002a0d
    43f0:	40001800 	.word	0x40001800
    43f4:	00002a4d 	.word	0x00002a4d

000043f8 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    43f8:	b570      	push	{r4, r5, r6, lr}
    43fa:	0004      	movs	r4, r0
    43fc:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    43fe:	4b05      	ldr	r3, [pc, #20]	; (4414 <system_gclk_chan_set_config+0x1c>)
    4400:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    4402:	782b      	ldrb	r3, [r5, #0]
    4404:	220f      	movs	r2, #15
    4406:	4013      	ands	r3, r2
    4408:	3420      	adds	r4, #32
    440a:	00a4      	lsls	r4, r4, #2
    440c:	4a02      	ldr	r2, [pc, #8]	; (4418 <system_gclk_chan_set_config+0x20>)
    440e:	50a3      	str	r3, [r4, r2]


}
    4410:	bd70      	pop	{r4, r5, r6, pc}
    4412:	46c0      	nop			; (mov r8, r8)
    4414:	000043c1 	.word	0x000043c1
    4418:	40001800 	.word	0x40001800

0000441c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    441c:	b510      	push	{r4, lr}
    441e:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4420:	4b06      	ldr	r3, [pc, #24]	; (443c <system_gclk_chan_get_hz+0x20>)
    4422:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    4424:	3420      	adds	r4, #32
    4426:	00a4      	lsls	r4, r4, #2
    4428:	4b05      	ldr	r3, [pc, #20]	; (4440 <system_gclk_chan_get_hz+0x24>)
    442a:	58e4      	ldr	r4, [r4, r3]
    442c:	0724      	lsls	r4, r4, #28
    442e:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4430:	4b04      	ldr	r3, [pc, #16]	; (4444 <system_gclk_chan_get_hz+0x28>)
    4432:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4434:	0020      	movs	r0, r4
    4436:	4b04      	ldr	r3, [pc, #16]	; (4448 <system_gclk_chan_get_hz+0x2c>)
    4438:	4798      	blx	r3
}
    443a:	bd10      	pop	{r4, pc}
    443c:	00002a0d 	.word	0x00002a0d
    4440:	40001800 	.word	0x40001800
    4444:	00002a4d 	.word	0x00002a4d
    4448:	0000431d 	.word	0x0000431d

0000444c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    444c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    444e:	78d3      	ldrb	r3, [r2, #3]
    4450:	2b00      	cmp	r3, #0
    4452:	d11e      	bne.n	4492 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    4454:	7813      	ldrb	r3, [r2, #0]
    4456:	2b80      	cmp	r3, #128	; 0x80
    4458:	d004      	beq.n	4464 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    445a:	061b      	lsls	r3, r3, #24
    445c:	2480      	movs	r4, #128	; 0x80
    445e:	0264      	lsls	r4, r4, #9
    4460:	4323      	orrs	r3, r4
    4462:	e000      	b.n	4466 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    4464:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4466:	7854      	ldrb	r4, [r2, #1]
    4468:	2502      	movs	r5, #2
    446a:	43ac      	bics	r4, r5
    446c:	d10a      	bne.n	4484 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    446e:	7894      	ldrb	r4, [r2, #2]
    4470:	2c00      	cmp	r4, #0
    4472:	d103      	bne.n	447c <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    4474:	2480      	movs	r4, #128	; 0x80
    4476:	02a4      	lsls	r4, r4, #10
    4478:	4323      	orrs	r3, r4
    447a:	e002      	b.n	4482 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    447c:	24c0      	movs	r4, #192	; 0xc0
    447e:	02e4      	lsls	r4, r4, #11
    4480:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    4482:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4484:	7854      	ldrb	r4, [r2, #1]
    4486:	3c01      	subs	r4, #1
    4488:	2c01      	cmp	r4, #1
    448a:	d812      	bhi.n	44b2 <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    448c:	4c18      	ldr	r4, [pc, #96]	; (44f0 <_system_pinmux_config+0xa4>)
    448e:	4023      	ands	r3, r4
    4490:	e00f      	b.n	44b2 <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    4492:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4494:	040b      	lsls	r3, r1, #16
    4496:	0c1b      	lsrs	r3, r3, #16
    4498:	24a0      	movs	r4, #160	; 0xa0
    449a:	05e4      	lsls	r4, r4, #23
    449c:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    449e:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    44a0:	0c0b      	lsrs	r3, r1, #16
    44a2:	24d0      	movs	r4, #208	; 0xd0
    44a4:	0624      	lsls	r4, r4, #24
    44a6:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    44a8:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    44aa:	78d3      	ldrb	r3, [r2, #3]
    44ac:	2b00      	cmp	r3, #0
    44ae:	d018      	beq.n	44e2 <_system_pinmux_config+0x96>
    44b0:	e01c      	b.n	44ec <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    44b2:	040c      	lsls	r4, r1, #16
    44b4:	0c24      	lsrs	r4, r4, #16
    44b6:	25a0      	movs	r5, #160	; 0xa0
    44b8:	05ed      	lsls	r5, r5, #23
    44ba:	432c      	orrs	r4, r5
    44bc:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    44be:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    44c0:	0c0c      	lsrs	r4, r1, #16
    44c2:	25d0      	movs	r5, #208	; 0xd0
    44c4:	062d      	lsls	r5, r5, #24
    44c6:	432c      	orrs	r4, r5
    44c8:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    44ca:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    44cc:	78d4      	ldrb	r4, [r2, #3]
    44ce:	2c00      	cmp	r4, #0
    44d0:	d10c      	bne.n	44ec <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    44d2:	035b      	lsls	r3, r3, #13
    44d4:	d505      	bpl.n	44e2 <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    44d6:	7893      	ldrb	r3, [r2, #2]
    44d8:	2b01      	cmp	r3, #1
    44da:	d101      	bne.n	44e0 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    44dc:	6181      	str	r1, [r0, #24]
    44de:	e000      	b.n	44e2 <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    44e0:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    44e2:	7853      	ldrb	r3, [r2, #1]
    44e4:	3b01      	subs	r3, #1
    44e6:	2b01      	cmp	r3, #1
    44e8:	d800      	bhi.n	44ec <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    44ea:	6081      	str	r1, [r0, #8]
		}
	}
}
    44ec:	bd30      	pop	{r4, r5, pc}
    44ee:	46c0      	nop			; (mov r8, r8)
    44f0:	fffbffff 	.word	0xfffbffff

000044f4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    44f4:	b510      	push	{r4, lr}
    44f6:	0003      	movs	r3, r0
    44f8:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    44fa:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    44fc:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    44fe:	2900      	cmp	r1, #0
    4500:	d104      	bne.n	450c <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    4502:	0958      	lsrs	r0, r3, #5
    4504:	01c0      	lsls	r0, r0, #7
    4506:	4905      	ldr	r1, [pc, #20]	; (451c <system_pinmux_pin_set_config+0x28>)
    4508:	468c      	mov	ip, r1
    450a:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
    450c:	211f      	movs	r1, #31
    450e:	400b      	ands	r3, r1
    4510:	391e      	subs	r1, #30
    4512:	4099      	lsls	r1, r3
    4514:	4b02      	ldr	r3, [pc, #8]	; (4520 <system_pinmux_pin_set_config+0x2c>)
    4516:	4798      	blx	r3
}
    4518:	bd10      	pop	{r4, pc}
    451a:	46c0      	nop			; (mov r8, r8)
    451c:	40002800 	.word	0x40002800
    4520:	0000444d 	.word	0x0000444d

00004524 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    4524:	4770      	bx	lr
    4526:	46c0      	nop			; (mov r8, r8)

00004528 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    4528:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    452a:	4b05      	ldr	r3, [pc, #20]	; (4540 <system_init+0x18>)
    452c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    452e:	4b05      	ldr	r3, [pc, #20]	; (4544 <system_init+0x1c>)
    4530:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    4532:	4b05      	ldr	r3, [pc, #20]	; (4548 <system_init+0x20>)
    4534:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    4536:	4b05      	ldr	r3, [pc, #20]	; (454c <system_init+0x24>)
    4538:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    453a:	4b05      	ldr	r3, [pc, #20]	; (4550 <system_init+0x28>)
    453c:	4798      	blx	r3
}
    453e:	bd10      	pop	{r4, pc}
    4540:	0000409d 	.word	0x0000409d
    4544:	00002a7d 	.word	0x00002a7d
    4548:	00004525 	.word	0x00004525
    454c:	00002cc9 	.word	0x00002cc9
    4550:	00004525 	.word	0x00004525

00004554 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    4554:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    4556:	0080      	lsls	r0, r0, #2
    4558:	4b14      	ldr	r3, [pc, #80]	; (45ac <_tc_interrupt_handler+0x58>)
    455a:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    455c:	682b      	ldr	r3, [r5, #0]
    455e:	7a9c      	ldrb	r4, [r3, #10]
    4560:	7e2b      	ldrb	r3, [r5, #24]
    4562:	401c      	ands	r4, r3
    4564:	7e6b      	ldrb	r3, [r5, #25]
    4566:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    4568:	07e3      	lsls	r3, r4, #31
    456a:	d505      	bpl.n	4578 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    456c:	0028      	movs	r0, r5
    456e:	68ab      	ldr	r3, [r5, #8]
    4570:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    4572:	2301      	movs	r3, #1
    4574:	682a      	ldr	r2, [r5, #0]
    4576:	7293      	strb	r3, [r2, #10]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    4578:	07a3      	lsls	r3, r4, #30
    457a:	d505      	bpl.n	4588 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    457c:	0028      	movs	r0, r5
    457e:	68eb      	ldr	r3, [r5, #12]
    4580:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    4582:	2302      	movs	r3, #2
    4584:	682a      	ldr	r2, [r5, #0]
    4586:	7293      	strb	r3, [r2, #10]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    4588:	06e3      	lsls	r3, r4, #27
    458a:	d505      	bpl.n	4598 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    458c:	0028      	movs	r0, r5
    458e:	692b      	ldr	r3, [r5, #16]
    4590:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    4592:	2310      	movs	r3, #16
    4594:	682a      	ldr	r2, [r5, #0]
    4596:	7293      	strb	r3, [r2, #10]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    4598:	06a3      	lsls	r3, r4, #26
    459a:	d505      	bpl.n	45a8 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    459c:	0028      	movs	r0, r5
    459e:	696b      	ldr	r3, [r5, #20]
    45a0:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    45a2:	682b      	ldr	r3, [r5, #0]
    45a4:	2220      	movs	r2, #32
    45a6:	729a      	strb	r2, [r3, #10]
	}
}
    45a8:	bd70      	pop	{r4, r5, r6, pc}
    45aa:	46c0      	nop			; (mov r8, r8)
    45ac:	20000860 	.word	0x20000860

000045b0 <TC0_Handler>:
		{ \
			_tc_interrupt_handler(m); \
		}

#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
    45b0:	b510      	push	{r4, lr}
    45b2:	2000      	movs	r0, #0
    45b4:	4b01      	ldr	r3, [pc, #4]	; (45bc <TC0_Handler+0xc>)
    45b6:	4798      	blx	r3
    45b8:	bd10      	pop	{r4, pc}
    45ba:	46c0      	nop			; (mov r8, r8)
    45bc:	00004555 	.word	0x00004555

000045c0 <TC1_Handler>:
	_TC_INTERRUPT_HANDLER(1,1)
    45c0:	b510      	push	{r4, lr}
    45c2:	2001      	movs	r0, #1
    45c4:	4b01      	ldr	r3, [pc, #4]	; (45cc <TC1_Handler+0xc>)
    45c6:	4798      	blx	r3
    45c8:	bd10      	pop	{r4, pc}
    45ca:	46c0      	nop			; (mov r8, r8)
    45cc:	00004555 	.word	0x00004555

000045d0 <TC4_Handler>:
	_TC_INTERRUPT_HANDLER(4,2)
    45d0:	b510      	push	{r4, lr}
    45d2:	2002      	movs	r0, #2
    45d4:	4b01      	ldr	r3, [pc, #4]	; (45dc <TC4_Handler+0xc>)
    45d6:	4798      	blx	r3
    45d8:	bd10      	pop	{r4, pc}
    45da:	46c0      	nop			; (mov r8, r8)
    45dc:	00004555 	.word	0x00004555

000045e0 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    45e0:	b530      	push	{r4, r5, lr}
    45e2:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    45e4:	aa01      	add	r2, sp, #4
    45e6:	4b0b      	ldr	r3, [pc, #44]	; (4614 <_tc_get_inst_index+0x34>)
    45e8:	cb32      	ldmia	r3!, {r1, r4, r5}
    45ea:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    45ec:	9b01      	ldr	r3, [sp, #4]
    45ee:	4298      	cmp	r0, r3
    45f0:	d00a      	beq.n	4608 <_tc_get_inst_index+0x28>
    45f2:	9b02      	ldr	r3, [sp, #8]
    45f4:	4298      	cmp	r0, r3
    45f6:	d005      	beq.n	4604 <_tc_get_inst_index+0x24>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    45f8:	2300      	movs	r3, #0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    45fa:	9a03      	ldr	r2, [sp, #12]
    45fc:	4282      	cmp	r2, r0
    45fe:	d105      	bne.n	460c <_tc_get_inst_index+0x2c>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    4600:	3302      	adds	r3, #2
    4602:	e002      	b.n	460a <_tc_get_inst_index+0x2a>
    4604:	2301      	movs	r3, #1
    4606:	e000      	b.n	460a <_tc_get_inst_index+0x2a>
    4608:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
			return i;
    460a:	b2db      	uxtb	r3, r3
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    460c:	0018      	movs	r0, r3
    460e:	b005      	add	sp, #20
    4610:	bd30      	pop	{r4, r5, pc}
    4612:	46c0      	nop			; (mov r8, r8)
    4614:	00007224 	.word	0x00007224

00004618 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    4618:	b5f0      	push	{r4, r5, r6, r7, lr}
    461a:	4647      	mov	r7, r8
    461c:	b480      	push	{r7}
    461e:	b08a      	sub	sp, #40	; 0x28
    4620:	0005      	movs	r5, r0
    4622:	000e      	movs	r6, r1
    4624:	0017      	movs	r7, r2
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    4626:	0008      	movs	r0, r1
    4628:	4ba7      	ldr	r3, [pc, #668]	; (48c8 <tc_init+0x2b0>)
    462a:	4798      	blx	r3
    462c:	4680      	mov	r8, r0
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC1,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3};
#else
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC4_GCLK_ID};
    462e:	4ca7      	ldr	r4, [pc, #668]	; (48cc <tc_init+0x2b4>)
    4630:	0021      	movs	r1, r4
    4632:	310c      	adds	r1, #12
    4634:	2203      	movs	r2, #3
    4636:	a809      	add	r0, sp, #36	; 0x24
    4638:	4ba5      	ldr	r3, [pc, #660]	; (48d0 <tc_init+0x2b8>)
    463a:	4798      	blx	r3
	/* Array of PM APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    463c:	a903      	add	r1, sp, #12
    463e:	0023      	movs	r3, r4
    4640:	3310      	adds	r3, #16
    4642:	000a      	movs	r2, r1
    4644:	cb13      	ldmia	r3!, {r0, r1, r4}
    4646:	c213      	stmia	r2!, {r0, r1, r4}
    4648:	cb13      	ldmia	r3!, {r0, r1, r4}
    464a:	c213      	stmia	r2!, {r0, r1, r4}
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    464c:	2300      	movs	r3, #0
    464e:	60ab      	str	r3, [r5, #8]
    4650:	60eb      	str	r3, [r5, #12]
    4652:	612b      	str	r3, [r5, #16]
    4654:	616b      	str	r3, [r5, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    4656:	762b      	strb	r3, [r5, #24]
	module_inst->enable_callback_mask       = 0x00;
    4658:	766b      	strb	r3, [r5, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    465a:	4643      	mov	r3, r8
    465c:	009a      	lsls	r2, r3, #2
    465e:	4b9d      	ldr	r3, [pc, #628]	; (48d4 <tc_init+0x2bc>)
    4660:	50d5      	str	r5, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    4662:	602e      	str	r6, [r5, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    4664:	2334      	movs	r3, #52	; 0x34
    4666:	5cfb      	ldrb	r3, [r7, r3]
    4668:	76ab      	strb	r3, [r5, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    466a:	78fb      	ldrb	r3, [r7, #3]
    466c:	2b08      	cmp	r3, #8
    466e:	d104      	bne.n	467a <tc_init+0x62>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4670:	2017      	movs	r0, #23

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    4672:	4642      	mov	r2, r8
    4674:	07d2      	lsls	r2, r2, #31
    4676:	d500      	bpl.n	467a <tc_init+0x62>
    4678:	e122      	b.n	48c0 <tc_init+0x2a8>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    467a:	712b      	strb	r3, [r5, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    467c:	6833      	ldr	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    467e:	2005      	movs	r0, #5
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    4680:	07db      	lsls	r3, r3, #31
    4682:	d500      	bpl.n	4686 <tc_init+0x6e>
    4684:	e11c      	b.n	48c0 <tc_init+0x2a8>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    4686:	7af3      	ldrb	r3, [r6, #11]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    4688:	3017      	adds	r0, #23
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    468a:	079b      	lsls	r3, r3, #30
    468c:	d500      	bpl.n	4690 <tc_init+0x78>
    468e:	e117      	b.n	48c0 <tc_init+0x2a8>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    4690:	6833      	ldr	r3, [r6, #0]
    4692:	079b      	lsls	r3, r3, #30
    4694:	d500      	bpl.n	4698 <tc_init+0x80>
    4696:	e113      	b.n	48c0 <tc_init+0x2a8>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    4698:	7c3b      	ldrb	r3, [r7, #16]
    469a:	2b00      	cmp	r3, #0
    469c:	d00a      	beq.n	46b4 <tc_init+0x9c>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    469e:	a902      	add	r1, sp, #8
    46a0:	2301      	movs	r3, #1
    46a2:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    46a4:	2200      	movs	r2, #0
    46a6:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    46a8:	7e3a      	ldrb	r2, [r7, #24]
    46aa:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    46ac:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    46ae:	7d38      	ldrb	r0, [r7, #20]
    46b0:	4b89      	ldr	r3, [pc, #548]	; (48d8 <tc_init+0x2c0>)
    46b2:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    46b4:	7f3b      	ldrb	r3, [r7, #28]
    46b6:	2b00      	cmp	r3, #0
    46b8:	d00b      	beq.n	46d2 <tc_init+0xba>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    46ba:	a902      	add	r1, sp, #8
    46bc:	2301      	movs	r3, #1
    46be:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    46c0:	2200      	movs	r2, #0
    46c2:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    46c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    46c6:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    46c8:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    46ca:	6a3b      	ldr	r3, [r7, #32]
    46cc:	b2d8      	uxtb	r0, r3
    46ce:	4b82      	ldr	r3, [pc, #520]	; (48d8 <tc_init+0x2c0>)
    46d0:	4798      	blx	r3
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the MCLK */
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    46d2:	4643      	mov	r3, r8
    46d4:	005a      	lsls	r2, r3, #1
    46d6:	a903      	add	r1, sp, #12
    46d8:	1c53      	adds	r3, r2, #1
    46da:	009b      	lsls	r3, r3, #2
    46dc:	5858      	ldr	r0, [r3, r1]
    46de:	4643      	mov	r3, r8
    46e0:	00db      	lsls	r3, r3, #3
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
    46e2:	585b      	ldr	r3, [r3, r1]
    46e4:	b2d9      	uxtb	r1, r3
    46e6:	2904      	cmp	r1, #4
    46e8:	d81b      	bhi.n	4722 <tc_init+0x10a>
    46ea:	008b      	lsls	r3, r1, #2
    46ec:	497b      	ldr	r1, [pc, #492]	; (48dc <tc_init+0x2c4>)
    46ee:	58cb      	ldr	r3, [r1, r3]
    46f0:	469f      	mov	pc, r3
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    46f2:	497b      	ldr	r1, [pc, #492]	; (48e0 <tc_init+0x2c8>)
    46f4:	694b      	ldr	r3, [r1, #20]
    46f6:	4318      	orrs	r0, r3
    46f8:	6148      	str	r0, [r1, #20]
    46fa:	e012      	b.n	4722 <tc_init+0x10a>
			break;

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
    46fc:	4978      	ldr	r1, [pc, #480]	; (48e0 <tc_init+0x2c8>)
    46fe:	698b      	ldr	r3, [r1, #24]
    4700:	4318      	orrs	r0, r3
    4702:	6188      	str	r0, [r1, #24]
    4704:	e00d      	b.n	4722 <tc_init+0x10a>
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    4706:	4976      	ldr	r1, [pc, #472]	; (48e0 <tc_init+0x2c8>)
    4708:	69cb      	ldr	r3, [r1, #28]
    470a:	4318      	orrs	r0, r3
    470c:	61c8      	str	r0, [r1, #28]
    470e:	e008      	b.n	4722 <tc_init+0x10a>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    4710:	4973      	ldr	r1, [pc, #460]	; (48e0 <tc_init+0x2c8>)
    4712:	6a0b      	ldr	r3, [r1, #32]
    4714:	4318      	orrs	r0, r3
    4716:	6208      	str	r0, [r1, #32]
    4718:	e003      	b.n	4722 <tc_init+0x10a>
			break;
		case SYSTEM_CLOCK_APB_APBE:
			MCLK->APBEMASK.reg |= mask;
    471a:	4971      	ldr	r1, [pc, #452]	; (48e0 <tc_init+0x2c8>)
    471c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    471e:	4318      	orrs	r0, r3
    4720:	6248      	str	r0, [r1, #36]	; 0x24
			inst_mclk_apbmask[2*instance+1]);

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    4722:	78fb      	ldrb	r3, [r7, #3]
    4724:	2b08      	cmp	r3, #8
    4726:	d129      	bne.n	477c <tc_init+0x164>
    4728:	4643      	mov	r3, r8
    472a:	3301      	adds	r3, #1
    472c:	2b02      	cmp	r3, #2
    472e:	dc25      	bgt.n	477c <tc_init+0x164>
	{
		/* Enable the user interface clock in the MCLK */
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    4730:	a903      	add	r1, sp, #12
    4732:	1cd3      	adds	r3, r2, #3
    4734:	009b      	lsls	r3, r3, #2
    4736:	5858      	ldr	r0, [r3, r1]
    4738:	1c93      	adds	r3, r2, #2
    473a:	009b      	lsls	r3, r3, #2
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
    473c:	585b      	ldr	r3, [r3, r1]
    473e:	b2da      	uxtb	r2, r3
    4740:	2a04      	cmp	r2, #4
    4742:	d81b      	bhi.n	477c <tc_init+0x164>
    4744:	0093      	lsls	r3, r2, #2
    4746:	4a67      	ldr	r2, [pc, #412]	; (48e4 <tc_init+0x2cc>)
    4748:	58d3      	ldr	r3, [r2, r3]
    474a:	469f      	mov	pc, r3
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    474c:	4a64      	ldr	r2, [pc, #400]	; (48e0 <tc_init+0x2c8>)
    474e:	6953      	ldr	r3, [r2, #20]
    4750:	4318      	orrs	r0, r3
    4752:	6150      	str	r0, [r2, #20]
    4754:	e012      	b.n	477c <tc_init+0x164>
			break;

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
    4756:	4a62      	ldr	r2, [pc, #392]	; (48e0 <tc_init+0x2c8>)
    4758:	6993      	ldr	r3, [r2, #24]
    475a:	4318      	orrs	r0, r3
    475c:	6190      	str	r0, [r2, #24]
    475e:	e00d      	b.n	477c <tc_init+0x164>
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    4760:	4a5f      	ldr	r2, [pc, #380]	; (48e0 <tc_init+0x2c8>)
    4762:	69d3      	ldr	r3, [r2, #28]
    4764:	4318      	orrs	r0, r3
    4766:	61d0      	str	r0, [r2, #28]
    4768:	e008      	b.n	477c <tc_init+0x164>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    476a:	4a5d      	ldr	r2, [pc, #372]	; (48e0 <tc_init+0x2c8>)
    476c:	6a13      	ldr	r3, [r2, #32]
    476e:	4318      	orrs	r0, r3
    4770:	6210      	str	r0, [r2, #32]
    4772:	e003      	b.n	477c <tc_init+0x164>
			break;
		case SYSTEM_CLOCK_APB_APBE:
			MCLK->APBEMASK.reg |= mask;
    4774:	4a5a      	ldr	r2, [pc, #360]	; (48e0 <tc_init+0x2c8>)
    4776:	6a53      	ldr	r3, [r2, #36]	; 0x24
    4778:	4318      	orrs	r0, r3
    477a:	6250      	str	r0, [r2, #36]	; 0x24
	}


	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    477c:	a901      	add	r1, sp, #4
    477e:	783b      	ldrb	r3, [r7, #0]
    4780:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    4782:	ab09      	add	r3, sp, #36	; 0x24
    4784:	4642      	mov	r2, r8
    4786:	5c9c      	ldrb	r4, [r3, r2]
    4788:	0020      	movs	r0, r4
    478a:	4b57      	ldr	r3, [pc, #348]	; (48e8 <tc_init+0x2d0>)
    478c:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    478e:	0020      	movs	r0, r4
    4790:	4b56      	ldr	r3, [pc, #344]	; (48ec <tc_init+0x2d4>)
    4792:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
    4794:	78fa      	ldrb	r2, [r7, #3]
    4796:	79fb      	ldrb	r3, [r7, #7]
    4798:	4313      	orrs	r3, r2
    479a:	88ba      	ldrh	r2, [r7, #4]
    479c:	4313      	orrs	r3, r2
			(uint32_t)config->counter_size |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    479e:	7a7a      	ldrb	r2, [r7, #9]
    47a0:	2a00      	cmp	r2, #0
    47a2:	d002      	beq.n	47aa <tc_init+0x192>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    47a4:	2280      	movs	r2, #128	; 0x80
    47a6:	0252      	lsls	r2, r2, #9
    47a8:	4313      	orrs	r3, r2
			(uint32_t)config->counter_size |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    47aa:	7aba      	ldrb	r2, [r7, #10]
    47ac:	2a00      	cmp	r2, #0
    47ae:	d002      	beq.n	47b6 <tc_init+0x19e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    47b0:	2280      	movs	r2, #128	; 0x80
    47b2:	0292      	lsls	r2, r2, #10
    47b4:	4313      	orrs	r3, r2
		}
	}

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_IO[i] == true) {
    47b6:	7afa      	ldrb	r2, [r7, #11]
    47b8:	2a00      	cmp	r2, #0
    47ba:	d002      	beq.n	47c2 <tc_init+0x1aa>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    47bc:	2280      	movs	r2, #128	; 0x80
    47be:	0352      	lsls	r2, r2, #13
    47c0:	4313      	orrs	r3, r2
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
		}
	}

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_IO[i] == true) {
    47c2:	7b3a      	ldrb	r2, [r7, #12]
    47c4:	2a00      	cmp	r2, #0
    47c6:	d002      	beq.n	47ce <tc_init+0x1b6>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    47c8:	2280      	movs	r2, #128	; 0x80
    47ca:	0392      	lsls	r2, r2, #14
    47cc:	4313      	orrs	r3, r2
		}
	}

	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    47ce:	7879      	ldrb	r1, [r7, #1]
    47d0:	0189      	lsls	r1, r1, #6
    47d2:	78ba      	ldrb	r2, [r7, #2]
    47d4:	01d2      	lsls	r2, r2, #7
    47d6:	4311      	orrs	r1, r2
    47d8:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    47da:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    47dc:	6913      	ldr	r3, [r2, #16]
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    47de:	2b00      	cmp	r3, #0
    47e0:	d1fc      	bne.n	47dc <tc_init+0x1c4>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    47e2:	6031      	str	r1, [r6, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    47e4:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    47e6:	6913      	ldr	r3, [r2, #16]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    47e8:	2b00      	cmp	r3, #0
    47ea:	d1fc      	bne.n	47e6 <tc_init+0x1ce>
		/* Wait for sync */
	}
	hw->COUNT8.WAVE.reg = config->wave_generation;
    47ec:	79bb      	ldrb	r3, [r7, #6]
    47ee:	7333      	strb	r3, [r6, #12]

	/* Set ctrlb register */
	if (config->oneshot) {
    47f0:	7b79      	ldrb	r1, [r7, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    47f2:	1e4b      	subs	r3, r1, #1
    47f4:	4199      	sbcs	r1, r3
    47f6:	0089      	lsls	r1, r1, #2
	}

	if (config->count_direction) {
    47f8:	7bbb      	ldrb	r3, [r7, #14]
    47fa:	2b00      	cmp	r3, #0
    47fc:	d001      	beq.n	4802 <tc_init+0x1ea>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    47fe:	2301      	movs	r3, #1
    4800:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4802:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    4804:	6913      	ldr	r3, [r2, #16]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    4806:	2b00      	cmp	r3, #0
    4808:	d1fc      	bne.n	4804 <tc_init+0x1ec>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    480a:	33ff      	adds	r3, #255	; 0xff
    480c:	7133      	strb	r3, [r6, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    480e:	2900      	cmp	r1, #0
    4810:	d004      	beq.n	481c <tc_init+0x204>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4812:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    4814:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
    4816:	2b00      	cmp	r3, #0
    4818:	d1fc      	bne.n	4814 <tc_init+0x1fc>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    481a:	7171      	strb	r1, [r6, #5]
	}

	/* Set drvvtrl register*/
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    481c:	7a3b      	ldrb	r3, [r7, #8]
    481e:	7373      	strb	r3, [r6, #13]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4820:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    4822:	6913      	ldr	r3, [r2, #16]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    4824:	2b00      	cmp	r3, #0
    4826:	d1fc      	bne.n	4822 <tc_init+0x20a>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    4828:	792b      	ldrb	r3, [r5, #4]
    482a:	2b04      	cmp	r3, #4
    482c:	d005      	beq.n	483a <tc_init+0x222>
    482e:	2b08      	cmp	r3, #8
    4830:	d033      	beq.n	489a <tc_init+0x282>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    4832:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    4834:	2b00      	cmp	r3, #0
    4836:	d143      	bne.n	48c0 <tc_init+0x2a8>
    4838:	e01c      	b.n	4874 <tc_init+0x25c>
    483a:	6913      	ldr	r3, [r2, #16]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    483c:	2b00      	cmp	r3, #0
    483e:	d1fc      	bne.n	483a <tc_init+0x222>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    4840:	3328      	adds	r3, #40	; 0x28
    4842:	5cfb      	ldrb	r3, [r7, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    4844:	7533      	strb	r3, [r6, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4846:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    4848:	6913      	ldr	r3, [r2, #16]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    484a:	2b00      	cmp	r3, #0
    484c:	d1fc      	bne.n	4848 <tc_init+0x230>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    484e:	3329      	adds	r3, #41	; 0x29
    4850:	5cfb      	ldrb	r3, [r7, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    4852:	76f3      	strb	r3, [r6, #27]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4854:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    4856:	6913      	ldr	r3, [r2, #16]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    4858:	2b00      	cmp	r3, #0
    485a:	d1fc      	bne.n	4856 <tc_init+0x23e>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    485c:	332a      	adds	r3, #42	; 0x2a
    485e:	5cfb      	ldrb	r3, [r7, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    4860:	7733      	strb	r3, [r6, #28]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4862:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    4864:	6913      	ldr	r3, [r2, #16]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    4866:	2b00      	cmp	r3, #0
    4868:	d1fc      	bne.n	4864 <tc_init+0x24c>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    486a:	332b      	adds	r3, #43	; 0x2b
    486c:	5cfb      	ldrb	r3, [r7, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    486e:	7773      	strb	r3, [r6, #29]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    4870:	2000      	movs	r0, #0
    4872:	e025      	b.n	48c0 <tc_init+0x2a8>
    4874:	6913      	ldr	r3, [r2, #16]

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    4876:	2b00      	cmp	r3, #0
    4878:	d1fc      	bne.n	4874 <tc_init+0x25c>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    487a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    487c:	82b3      	strh	r3, [r6, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    487e:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    4880:	6913      	ldr	r3, [r2, #16]

			while (tc_is_syncing(module_inst)) {
    4882:	2b00      	cmp	r3, #0
    4884:	d1fc      	bne.n	4880 <tc_init+0x268>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    4886:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    4888:	83b3      	strh	r3, [r6, #28]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    488a:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    488c:	6913      	ldr	r3, [r2, #16]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    488e:	2b00      	cmp	r3, #0
    4890:	d1fc      	bne.n	488c <tc_init+0x274>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    4892:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    4894:	83f3      	strh	r3, [r6, #30]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    4896:	2000      	movs	r0, #0
    4898:	e012      	b.n	48c0 <tc_init+0x2a8>
    489a:	6913      	ldr	r3, [r2, #16]

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    489c:	2b00      	cmp	r3, #0
    489e:	d1fc      	bne.n	489a <tc_init+0x282>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    48a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    48a2:	6173      	str	r3, [r6, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    48a4:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    48a6:	6913      	ldr	r3, [r2, #16]

			while (tc_is_syncing(module_inst)) {
    48a8:	2b00      	cmp	r3, #0
    48aa:	d1fc      	bne.n	48a6 <tc_init+0x28e>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    48ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    48ae:	61f3      	str	r3, [r6, #28]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    48b0:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    48b2:	6913      	ldr	r3, [r2, #16]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    48b4:	2b00      	cmp	r3, #0
    48b6:	d1fc      	bne.n	48b2 <tc_init+0x29a>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    48b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    48ba:	6233      	str	r3, [r6, #32]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    48bc:	2000      	movs	r0, #0
    48be:	e7ff      	b.n	48c0 <tc_init+0x2a8>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    48c0:	b00a      	add	sp, #40	; 0x28
    48c2:	bc04      	pop	{r2}
    48c4:	4690      	mov	r8, r2
    48c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    48c8:	000045e1 	.word	0x000045e1
    48cc:	00007224 	.word	0x00007224
    48d0:	00005e45 	.word	0x00005e45
    48d4:	20000860 	.word	0x20000860
    48d8:	000044f5 	.word	0x000044f5
    48dc:	000071fc 	.word	0x000071fc
    48e0:	40000400 	.word	0x40000400
    48e4:	00007210 	.word	0x00007210
    48e8:	000043f9 	.word	0x000043f9
    48ec:	00004389 	.word	0x00004389

000048f0 <tc_set_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance*/
	Tc *const tc_module = module_inst->hw;
    48f0:	6802      	ldr	r2, [r0, #0]
    48f2:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    48f4:	2b00      	cmp	r3, #0
    48f6:	d1fc      	bne.n	48f2 <tc_set_count_value+0x2>
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
    48f8:	7903      	ldrb	r3, [r0, #4]
    48fa:	2b04      	cmp	r3, #4
    48fc:	d005      	beq.n	490a <tc_set_count_value+0x1a>
    48fe:	2b08      	cmp	r3, #8
    4900:	d00b      	beq.n	491a <tc_set_count_value+0x2a>
		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
			return STATUS_OK;

		default:
			return STATUS_ERR_INVALID_ARG;
    4902:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
    4904:	2b00      	cmp	r3, #0
    4906:	d10b      	bne.n	4920 <tc_set_count_value+0x30>
    4908:	e003      	b.n	4912 <tc_set_count_value+0x22>
		case TC_COUNTER_SIZE_8BIT:
			tc_module->COUNT8.COUNT.reg  = (uint8_t)count;
    490a:	b2c9      	uxtb	r1, r1
    490c:	7511      	strb	r1, [r2, #20]
			return STATUS_OK;
    490e:	2000      	movs	r0, #0
    4910:	e006      	b.n	4920 <tc_set_count_value+0x30>

		case TC_COUNTER_SIZE_16BIT:
			tc_module->COUNT16.COUNT.reg = (uint16_t)count;
    4912:	b289      	uxth	r1, r1
    4914:	8291      	strh	r1, [r2, #20]
			return STATUS_OK;
    4916:	2000      	movs	r0, #0
    4918:	e002      	b.n	4920 <tc_set_count_value+0x30>

		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
    491a:	6151      	str	r1, [r2, #20]
			return STATUS_OK;
    491c:	2000      	movs	r0, #0
    491e:	e7ff      	b.n	4920 <tc_set_count_value+0x30>

		default:
			return STATUS_ERR_INVALID_ARG;
	}
}
    4920:	4770      	bx	lr
    4922:	46c0      	nop			; (mov r8, r8)

00004924 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4924:	6802      	ldr	r2, [r0, #0]

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    4926:	6913      	ldr	r3, [r2, #16]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    4928:	2b00      	cmp	r3, #0
    492a:	d1fc      	bne.n	4926 <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    492c:	7113      	strb	r3, [r2, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    492e:	6801      	ldr	r1, [r0, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    4930:	690b      	ldr	r3, [r1, #16]
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;

	while (tc_is_syncing(module_inst)) {
    4932:	2b00      	cmp	r3, #0
    4934:	d1fc      	bne.n	4930 <tc_get_count_value+0xc>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_READSYNC_Val);
    4936:	3380      	adds	r3, #128	; 0x80
    4938:	7153      	strb	r3, [r2, #5]

	/* Read synchronization */
	tc_sync_read_count(module_inst);
	
	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    493a:	6802      	ldr	r2, [r0, #0]

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    493c:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    493e:	2b00      	cmp	r3, #0
    4940:	d1fc      	bne.n	493c <tc_get_count_value+0x18>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    4942:	7901      	ldrb	r1, [r0, #4]
    4944:	2904      	cmp	r1, #4
    4946:	d004      	beq.n	4952 <tc_get_count_value+0x2e>
    4948:	2908      	cmp	r1, #8
    494a:	d008      	beq.n	495e <tc_get_count_value+0x3a>
    494c:	2900      	cmp	r1, #0
    494e:	d107      	bne.n	4960 <tc_get_count_value+0x3c>
    4950:	e002      	b.n	4958 <tc_get_count_value+0x34>
		case TC_COUNTER_SIZE_8BIT:
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    4952:	7d13      	ldrb	r3, [r2, #20]
    4954:	b2db      	uxtb	r3, r3
    4956:	e003      	b.n	4960 <tc_get_count_value+0x3c>

		case TC_COUNTER_SIZE_16BIT:
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    4958:	8a93      	ldrh	r3, [r2, #20]
    495a:	b29b      	uxth	r3, r3
    495c:	e000      	b.n	4960 <tc_get_count_value+0x3c>

		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
    495e:	6953      	ldr	r3, [r2, #20]
	}

	Assert(false);
	return 0;
}
    4960:	0018      	movs	r0, r3
    4962:	4770      	bx	lr

00004964 <tc_reset>:
	/* Sanity check arguments  */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4964:	6803      	ldr	r3, [r0, #0]

	if (tc_module->STATUS.reg & TC_STATUS_SLAVE) {
    4966:	7ad9      	ldrb	r1, [r3, #11]
		return STATUS_ERR_UNSUPPORTED_DEV;
    4968:	2215      	movs	r2, #21
	Assert(module_inst->hw);

	/* Get a pointer to the module hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	if (tc_module->STATUS.reg & TC_STATUS_SLAVE) {
    496a:	0789      	lsls	r1, r1, #30
    496c:	d415      	bmi.n	499a <tc_reset+0x36>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}

	/* Disable this module if it is running */
	if (tc_module->CTRLA.reg & TC_CTRLA_ENABLE) {
    496e:	681a      	ldr	r2, [r3, #0]
    4970:	0792      	lsls	r2, r2, #30
    4972:	d50d      	bpl.n	4990 <tc_reset+0x2c>
    4974:	691a      	ldr	r2, [r3, #16]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    4976:	2a00      	cmp	r2, #0
    4978:	d1fc      	bne.n	4974 <tc_reset+0x10>
		/* Wait for sync */
	}

	/* Disbale interrupt */
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    497a:	3233      	adds	r2, #51	; 0x33
    497c:	721a      	strb	r2, [r3, #8]
	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    497e:	729a      	strb	r2, [r3, #10]

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    4980:	681a      	ldr	r2, [r3, #0]
    4982:	2102      	movs	r1, #2
    4984:	438a      	bics	r2, r1
    4986:	601a      	str	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4988:	6801      	ldr	r1, [r0, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    498a:	690a      	ldr	r2, [r1, #16]
		tc_disable(module_inst);
		while (tc_is_syncing(module_inst)) {
    498c:	2a00      	cmp	r2, #0
    498e:	d1fc      	bne.n	498a <tc_reset+0x26>
			/* wait while module is disabling */
		}
	}

	/* Reset this TC module */
	tc_module->CTRLA.reg  |= TC_CTRLA_SWRST;
    4990:	6819      	ldr	r1, [r3, #0]
    4992:	2201      	movs	r2, #1
    4994:	430a      	orrs	r2, r1
    4996:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    4998:	2200      	movs	r2, #0
}
    499a:	0010      	movs	r0, r2
    499c:	4770      	bx	lr
    499e:	46c0      	nop			; (mov r8, r8)

000049a0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    49a0:	e7fe      	b.n	49a0 <Dummy_Handler>
    49a2:	46c0      	nop			; (mov r8, r8)

000049a4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    49a4:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    49a6:	4b1d      	ldr	r3, [pc, #116]	; (4a1c <Reset_Handler+0x78>)
    49a8:	4a1d      	ldr	r2, [pc, #116]	; (4a20 <Reset_Handler+0x7c>)
    49aa:	429a      	cmp	r2, r3
    49ac:	d003      	beq.n	49b6 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    49ae:	4b1d      	ldr	r3, [pc, #116]	; (4a24 <Reset_Handler+0x80>)
    49b0:	4a1a      	ldr	r2, [pc, #104]	; (4a1c <Reset_Handler+0x78>)
    49b2:	429a      	cmp	r2, r3
    49b4:	d304      	bcc.n	49c0 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    49b6:	4b1c      	ldr	r3, [pc, #112]	; (4a28 <Reset_Handler+0x84>)
    49b8:	4a1c      	ldr	r2, [pc, #112]	; (4a2c <Reset_Handler+0x88>)
    49ba:	429a      	cmp	r2, r3
    49bc:	d310      	bcc.n	49e0 <Reset_Handler+0x3c>
    49be:	e01e      	b.n	49fe <Reset_Handler+0x5a>
    49c0:	4a1b      	ldr	r2, [pc, #108]	; (4a30 <Reset_Handler+0x8c>)
    49c2:	4b18      	ldr	r3, [pc, #96]	; (4a24 <Reset_Handler+0x80>)
    49c4:	3303      	adds	r3, #3
    49c6:	1a9b      	subs	r3, r3, r2
    49c8:	089b      	lsrs	r3, r3, #2
    49ca:	3301      	adds	r3, #1
    49cc:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    49ce:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    49d0:	4812      	ldr	r0, [pc, #72]	; (4a1c <Reset_Handler+0x78>)
    49d2:	4913      	ldr	r1, [pc, #76]	; (4a20 <Reset_Handler+0x7c>)
    49d4:	588c      	ldr	r4, [r1, r2]
    49d6:	5084      	str	r4, [r0, r2]
    49d8:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    49da:	429a      	cmp	r2, r3
    49dc:	d1fa      	bne.n	49d4 <Reset_Handler+0x30>
    49de:	e7ea      	b.n	49b6 <Reset_Handler+0x12>
    49e0:	4a14      	ldr	r2, [pc, #80]	; (4a34 <Reset_Handler+0x90>)
    49e2:	4b11      	ldr	r3, [pc, #68]	; (4a28 <Reset_Handler+0x84>)
    49e4:	3303      	adds	r3, #3
    49e6:	1a9b      	subs	r3, r3, r2
    49e8:	089b      	lsrs	r3, r3, #2
    49ea:	3301      	adds	r3, #1
    49ec:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    49ee:	2200      	movs	r2, #0
                *pDest++ = 0;
    49f0:	480e      	ldr	r0, [pc, #56]	; (4a2c <Reset_Handler+0x88>)
    49f2:	2100      	movs	r1, #0
    49f4:	1814      	adds	r4, r2, r0
    49f6:	6021      	str	r1, [r4, #0]
    49f8:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    49fa:	429a      	cmp	r2, r3
    49fc:	d1fa      	bne.n	49f4 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    49fe:	4a0e      	ldr	r2, [pc, #56]	; (4a38 <Reset_Handler+0x94>)
    4a00:	21ff      	movs	r1, #255	; 0xff
    4a02:	4b0e      	ldr	r3, [pc, #56]	; (4a3c <Reset_Handler+0x98>)
    4a04:	438b      	bics	r3, r1
    4a06:	6093      	str	r3, [r2, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    4a08:	4a0d      	ldr	r2, [pc, #52]	; (4a40 <Reset_Handler+0x9c>)
    4a0a:	6851      	ldr	r1, [r2, #4]
    4a0c:	2380      	movs	r3, #128	; 0x80
    4a0e:	430b      	orrs	r3, r1
    4a10:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    4a12:	4b0c      	ldr	r3, [pc, #48]	; (4a44 <Reset_Handler+0xa0>)
    4a14:	4798      	blx	r3

        /* Branch to main function */
        main();
    4a16:	4b0c      	ldr	r3, [pc, #48]	; (4a48 <Reset_Handler+0xa4>)
    4a18:	4798      	blx	r3
    4a1a:	e7fe      	b.n	4a1a <Reset_Handler+0x76>
    4a1c:	20000000 	.word	0x20000000
    4a20:	000073a8 	.word	0x000073a8
    4a24:	2000009c 	.word	0x2000009c
    4a28:	200008cc 	.word	0x200008cc
    4a2c:	2000009c 	.word	0x2000009c
    4a30:	20000004 	.word	0x20000004
    4a34:	200000a0 	.word	0x200000a0
    4a38:	e000ed00 	.word	0xe000ed00
    4a3c:	00000000 	.word	0x00000000
    4a40:	41004000 	.word	0x41004000
    4a44:	00005df9 	.word	0x00005df9
    4a48:	000057f9 	.word	0x000057f9

00004a4c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    4a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a4e:	4647      	mov	r7, r8
    4a50:	b480      	push	{r7}
    4a52:	000c      	movs	r4, r1
    4a54:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    4a56:	2800      	cmp	r0, #0
    4a58:	d10d      	bne.n	4a76 <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
    4a5a:	2a00      	cmp	r2, #0
    4a5c:	dd0e      	ble.n	4a7c <_read+0x30>
    4a5e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    4a60:	4e08      	ldr	r6, [pc, #32]	; (4a84 <_read+0x38>)
    4a62:	4d09      	ldr	r5, [pc, #36]	; (4a88 <_read+0x3c>)
    4a64:	6830      	ldr	r0, [r6, #0]
    4a66:	0021      	movs	r1, r4
    4a68:	682b      	ldr	r3, [r5, #0]
    4a6a:	4798      	blx	r3
		ptr++;
    4a6c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    4a6e:	42a7      	cmp	r7, r4
    4a70:	d1f8      	bne.n	4a64 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
    4a72:	4640      	mov	r0, r8
    4a74:	e003      	b.n	4a7e <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    4a76:	2001      	movs	r0, #1
    4a78:	4240      	negs	r0, r0
    4a7a:	e000      	b.n	4a7e <_read+0x32>
	}

	for (; len > 0; --len) {
    4a7c:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
    4a7e:	bc04      	pop	{r2}
    4a80:	4690      	mov	r8, r2
    4a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a84:	20000874 	.word	0x20000874
    4a88:	2000086c 	.word	0x2000086c

00004a8c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    4a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a8e:	4647      	mov	r7, r8
    4a90:	b480      	push	{r7}
    4a92:	000e      	movs	r6, r1
    4a94:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    4a96:	3801      	subs	r0, #1
    4a98:	2802      	cmp	r0, #2
    4a9a:	d811      	bhi.n	4ac0 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
    4a9c:	2a00      	cmp	r2, #0
    4a9e:	d012      	beq.n	4ac6 <_write+0x3a>
    4aa0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    4aa2:	4b0c      	ldr	r3, [pc, #48]	; (4ad4 <_write+0x48>)
    4aa4:	4698      	mov	r8, r3
    4aa6:	4f0c      	ldr	r7, [pc, #48]	; (4ad8 <_write+0x4c>)
    4aa8:	4643      	mov	r3, r8
    4aaa:	6818      	ldr	r0, [r3, #0]
    4aac:	5d31      	ldrb	r1, [r6, r4]
    4aae:	683b      	ldr	r3, [r7, #0]
    4ab0:	4798      	blx	r3
    4ab2:	2800      	cmp	r0, #0
    4ab4:	db09      	blt.n	4aca <_write+0x3e>
			return -1;
		}
		++nChars;
    4ab6:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    4ab8:	42a5      	cmp	r5, r4
    4aba:	d1f5      	bne.n	4aa8 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
    4abc:	0020      	movs	r0, r4
    4abe:	e006      	b.n	4ace <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    4ac0:	2001      	movs	r0, #1
    4ac2:	4240      	negs	r0, r0
    4ac4:	e003      	b.n	4ace <_write+0x42>
	}

	for (; len != 0; --len) {
    4ac6:	2000      	movs	r0, #0
    4ac8:	e001      	b.n	4ace <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    4aca:	2001      	movs	r0, #1
    4acc:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
    4ace:	bc04      	pop	{r2}
    4ad0:	4690      	mov	r8, r2
    4ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ad4:	20000874 	.word	0x20000874
    4ad8:	20000870 	.word	0x20000870

00004adc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    4adc:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    4ade:	4a06      	ldr	r2, [pc, #24]	; (4af8 <_sbrk+0x1c>)
    4ae0:	6812      	ldr	r2, [r2, #0]
    4ae2:	2a00      	cmp	r2, #0
    4ae4:	d102      	bne.n	4aec <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    4ae6:	4905      	ldr	r1, [pc, #20]	; (4afc <_sbrk+0x20>)
    4ae8:	4a03      	ldr	r2, [pc, #12]	; (4af8 <_sbrk+0x1c>)
    4aea:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    4aec:	4a02      	ldr	r2, [pc, #8]	; (4af8 <_sbrk+0x1c>)
    4aee:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    4af0:	18c3      	adds	r3, r0, r3
    4af2:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    4af4:	4770      	bx	lr
    4af6:	46c0      	nop			; (mov r8, r8)
    4af8:	200003b8 	.word	0x200003b8
    4afc:	200028d0 	.word	0x200028d0

00004b00 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    4b00:	2001      	movs	r0, #1
    4b02:	4240      	negs	r0, r0
    4b04:	4770      	bx	lr
    4b06:	46c0      	nop			; (mov r8, r8)

00004b08 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    4b08:	2380      	movs	r3, #128	; 0x80
    4b0a:	019b      	lsls	r3, r3, #6
    4b0c:	604b      	str	r3, [r1, #4]

	return 0;
}
    4b0e:	2000      	movs	r0, #0
    4b10:	4770      	bx	lr
    4b12:	46c0      	nop			; (mov r8, r8)

00004b14 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    4b14:	2001      	movs	r0, #1
    4b16:	4770      	bx	lr

00004b18 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    4b18:	2000      	movs	r0, #0
    4b1a:	4770      	bx	lr

00004b1c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    4b1c:	b570      	push	{r4, r5, r6, lr}
    4b1e:	b082      	sub	sp, #8
    4b20:	0005      	movs	r5, r0
    4b22:	000e      	movs	r6, r1
	uint16_t temp = 0;
    4b24:	2200      	movs	r2, #0
    4b26:	466b      	mov	r3, sp
    4b28:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    4b2a:	4c06      	ldr	r4, [pc, #24]	; (4b44 <usart_serial_getchar+0x28>)
    4b2c:	466b      	mov	r3, sp
    4b2e:	1d99      	adds	r1, r3, #6
    4b30:	0028      	movs	r0, r5
    4b32:	47a0      	blx	r4
    4b34:	2800      	cmp	r0, #0
    4b36:	d1f9      	bne.n	4b2c <usart_serial_getchar+0x10>

	*c = temp;
    4b38:	466b      	mov	r3, sp
    4b3a:	3306      	adds	r3, #6
    4b3c:	881b      	ldrh	r3, [r3, #0]
    4b3e:	7033      	strb	r3, [r6, #0]
}
    4b40:	b002      	add	sp, #8
    4b42:	bd70      	pop	{r4, r5, r6, pc}
    4b44:	00003ac5 	.word	0x00003ac5

00004b48 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    4b48:	b570      	push	{r4, r5, r6, lr}
    4b4a:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    4b4c:	b28c      	uxth	r4, r1
    4b4e:	4e03      	ldr	r6, [pc, #12]	; (4b5c <usart_serial_putchar+0x14>)
    4b50:	0021      	movs	r1, r4
    4b52:	0028      	movs	r0, r5
    4b54:	47b0      	blx	r6
    4b56:	2800      	cmp	r0, #0
    4b58:	d1fa      	bne.n	4b50 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    4b5a:	bd70      	pop	{r4, r5, r6, pc}
    4b5c:	00003a99 	.word	0x00003a99

00004b60 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    4b60:	b510      	push	{r4, lr}
    4b62:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    4b64:	466b      	mov	r3, sp
    4b66:	1ddc      	adds	r4, r3, #7
    4b68:	2201      	movs	r2, #1
    4b6a:	0021      	movs	r1, r4
    4b6c:	480f      	ldr	r0, [pc, #60]	; (4bac <USART_HOST_ISR_VECT+0x4c>)
    4b6e:	4b10      	ldr	r3, [pc, #64]	; (4bb0 <USART_HOST_ISR_VECT+0x50>)
    4b70:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    4b72:	b672      	cpsid	i
    4b74:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    4b78:	2200      	movs	r2, #0
    4b7a:	4b0e      	ldr	r3, [pc, #56]	; (4bb4 <USART_HOST_ISR_VECT+0x54>)
    4b7c:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    4b7e:	4b0e      	ldr	r3, [pc, #56]	; (4bb8 <USART_HOST_ISR_VECT+0x58>)
    4b80:	781b      	ldrb	r3, [r3, #0]
    4b82:	7821      	ldrb	r1, [r4, #0]
    4b84:	4a0d      	ldr	r2, [pc, #52]	; (4bbc <USART_HOST_ISR_VECT+0x5c>)
    4b86:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    4b88:	2b9b      	cmp	r3, #155	; 0x9b
    4b8a:	d103      	bne.n	4b94 <USART_HOST_ISR_VECT+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
    4b8c:	2200      	movs	r2, #0
    4b8e:	4b0a      	ldr	r3, [pc, #40]	; (4bb8 <USART_HOST_ISR_VECT+0x58>)
    4b90:	701a      	strb	r2, [r3, #0]
    4b92:	e002      	b.n	4b9a <USART_HOST_ISR_VECT+0x3a>
	} else {
		serial_rx_buf_tail++;
    4b94:	3301      	adds	r3, #1
    4b96:	4a08      	ldr	r2, [pc, #32]	; (4bb8 <USART_HOST_ISR_VECT+0x58>)
    4b98:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    4b9a:	2201      	movs	r2, #1
    4b9c:	4b05      	ldr	r3, [pc, #20]	; (4bb4 <USART_HOST_ISR_VECT+0x54>)
    4b9e:	701a      	strb	r2, [r3, #0]
    4ba0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    4ba4:	b662      	cpsie	i
}
    4ba6:	b002      	add	sp, #8
    4ba8:	bd10      	pop	{r4, pc}
    4baa:	46c0      	nop			; (mov r8, r8)
    4bac:	20000458 	.word	0x20000458
    4bb0:	00003bed 	.word	0x00003bed
    4bb4:	20000034 	.word	0x20000034
    4bb8:	2000048c 	.word	0x2000048c
    4bbc:	200003bc 	.word	0x200003bc

00004bc0 <sio2host_init>:
static uint8_t serial_rx_count;

/* === IMPLEMENTATION ====================================================== */

void sio2host_init(void)
{
    4bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4bc2:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    4bc4:	2380      	movs	r3, #128	; 0x80
    4bc6:	05db      	lsls	r3, r3, #23
    4bc8:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    4bca:	2300      	movs	r3, #0
    4bcc:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    4bce:	22ff      	movs	r2, #255	; 0xff
    4bd0:	4669      	mov	r1, sp
    4bd2:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    4bd4:	2200      	movs	r2, #0
    4bd6:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    4bd8:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    4bda:	2196      	movs	r1, #150	; 0x96
    4bdc:	0189      	lsls	r1, r1, #6
    4bde:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    4be0:	2401      	movs	r4, #1
    4be2:	2124      	movs	r1, #36	; 0x24
    4be4:	4668      	mov	r0, sp
    4be6:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    4be8:	3101      	adds	r1, #1
    4bea:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    4bec:	3101      	adds	r1, #1
    4bee:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    4bf0:	3101      	adds	r1, #1
    4bf2:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    4bf4:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    4bf6:	3105      	adds	r1, #5
    4bf8:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    4bfa:	3101      	adds	r1, #1
    4bfc:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    4bfe:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    4c00:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    4c02:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    4c04:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    4c06:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    4c08:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    4c0a:	2313      	movs	r3, #19
    4c0c:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    4c0e:	7742      	strb	r2, [r0, #29]
#if SAMD || SAMR21 || SAML21 || SAMR30
	struct usart_config host_uart_config;
	/* Configure USART for unit test output */
	usart_get_config_defaults(&host_uart_config);
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    4c10:	2380      	movs	r3, #128	; 0x80
    4c12:	035b      	lsls	r3, r3, #13
    4c14:	9303      	str	r3, [sp, #12]

	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    4c16:	4b2e      	ldr	r3, [pc, #184]	; (4cd0 <sio2host_init+0x110>)
    4c18:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    4c1a:	4b2e      	ldr	r3, [pc, #184]	; (4cd4 <sio2host_init+0x114>)
    4c1c:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    4c1e:	2301      	movs	r3, #1
    4c20:	425b      	negs	r3, r3
    4c22:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    4c24:	930f      	str	r3, [sp, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    4c26:	4d2c      	ldr	r5, [pc, #176]	; (4cd8 <sio2host_init+0x118>)
    4c28:	4b2c      	ldr	r3, [pc, #176]	; (4cdc <sio2host_init+0x11c>)
    4c2a:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    4c2c:	4a2c      	ldr	r2, [pc, #176]	; (4ce0 <sio2host_init+0x120>)
    4c2e:	4b2d      	ldr	r3, [pc, #180]	; (4ce4 <sio2host_init+0x124>)
    4c30:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    4c32:	4a2d      	ldr	r2, [pc, #180]	; (4ce8 <sio2host_init+0x128>)
    4c34:	4b2d      	ldr	r3, [pc, #180]	; (4cec <sio2host_init+0x12c>)
    4c36:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    4c38:	466a      	mov	r2, sp
    4c3a:	2184      	movs	r1, #132	; 0x84
    4c3c:	05c9      	lsls	r1, r1, #23
    4c3e:	0028      	movs	r0, r5
    4c40:	4b2b      	ldr	r3, [pc, #172]	; (4cf0 <sio2host_init+0x130>)
    4c42:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    4c44:	4f2b      	ldr	r7, [pc, #172]	; (4cf4 <sio2host_init+0x134>)
    4c46:	683b      	ldr	r3, [r7, #0]
    4c48:	6898      	ldr	r0, [r3, #8]
    4c4a:	2100      	movs	r1, #0
    4c4c:	4e2a      	ldr	r6, [pc, #168]	; (4cf8 <sio2host_init+0x138>)
    4c4e:	47b0      	blx	r6
	setbuf(stdin, NULL);
    4c50:	683b      	ldr	r3, [r7, #0]
    4c52:	6858      	ldr	r0, [r3, #4]
    4c54:	2100      	movs	r1, #0
    4c56:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4c58:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    4c5a:	0030      	movs	r0, r6
    4c5c:	4b27      	ldr	r3, [pc, #156]	; (4cfc <sio2host_init+0x13c>)
    4c5e:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4c60:	231f      	movs	r3, #31
    4c62:	4018      	ands	r0, r3
    4c64:	4084      	lsls	r4, r0
    4c66:	4b26      	ldr	r3, [pc, #152]	; (4d00 <sio2host_init+0x140>)
    4c68:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    4c6a:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4c6c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    4c6e:	2b00      	cmp	r3, #0
    4c70:	d1fc      	bne.n	4c6c <sio2host_init+0xac>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    4c72:	6832      	ldr	r2, [r6, #0]
    4c74:	3302      	adds	r3, #2
    4c76:	4313      	orrs	r3, r2
    4c78:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4c7a:	4b17      	ldr	r3, [pc, #92]	; (4cd8 <sio2host_init+0x118>)
    4c7c:	681b      	ldr	r3, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4c7e:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    4c80:	2a00      	cmp	r2, #0
    4c82:	d1fc      	bne.n	4c7e <sio2host_init+0xbe>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    4c84:	685a      	ldr	r2, [r3, #4]
    4c86:	2180      	movs	r1, #128	; 0x80
    4c88:	0249      	lsls	r1, r1, #9
    4c8a:	430a      	orrs	r2, r1
    4c8c:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    4c8e:	2101      	movs	r1, #1
    4c90:	4a11      	ldr	r2, [pc, #68]	; (4cd8 <sio2host_init+0x118>)
    4c92:	71d1      	strb	r1, [r2, #7]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4c94:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    4c96:	2a00      	cmp	r2, #0
    4c98:	d1fc      	bne.n	4c94 <sio2host_init+0xd4>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4c9a:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    4c9c:	2a00      	cmp	r2, #0
    4c9e:	d1fc      	bne.n	4c9a <sio2host_init+0xda>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Enable RX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    4ca0:	685a      	ldr	r2, [r3, #4]
    4ca2:	2180      	movs	r1, #128	; 0x80
    4ca4:	0289      	lsls	r1, r1, #10
    4ca6:	430a      	orrs	r2, r1
    4ca8:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    4caa:	2101      	movs	r1, #1
    4cac:	4a0a      	ldr	r2, [pc, #40]	; (4cd8 <sio2host_init+0x118>)
    4cae:	7191      	strb	r1, [r2, #6]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4cb0:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    4cb2:	2a00      	cmp	r2, #0
    4cb4:	d1fc      	bne.n	4cb0 <sio2host_init+0xf0>
	usart_enable_transceiver(&host_uart_module, USART_TRANSCEIVER_TX);
	usart_enable_transceiver(&host_uart_module, USART_TRANSCEIVER_RX);
#else
	stdio_serial_init(USART_HOST, &usart_serial_options);
#endif
	USART_HOST_RX_ISR_ENABLE();
    4cb6:	4913      	ldr	r1, [pc, #76]	; (4d04 <sio2host_init+0x144>)
    4cb8:	2000      	movs	r0, #0
    4cba:	4b13      	ldr	r3, [pc, #76]	; (4d08 <sio2host_init+0x148>)
    4cbc:	4798      	blx	r3
    4cbe:	2204      	movs	r2, #4
    4cc0:	2384      	movs	r3, #132	; 0x84
    4cc2:	05db      	lsls	r3, r3, #23
    4cc4:	759a      	strb	r2, [r3, #22]
    4cc6:	32fc      	adds	r2, #252	; 0xfc
    4cc8:	4b0d      	ldr	r3, [pc, #52]	; (4d00 <sio2host_init+0x140>)
    4cca:	601a      	str	r2, [r3, #0]
}
    4ccc:	b011      	add	sp, #68	; 0x44
    4cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4cd0:	00040003 	.word	0x00040003
    4cd4:	00050003 	.word	0x00050003
    4cd8:	20000458 	.word	0x20000458
    4cdc:	20000874 	.word	0x20000874
    4ce0:	00004b49 	.word	0x00004b49
    4ce4:	20000870 	.word	0x20000870
    4ce8:	00004b1d 	.word	0x00004b1d
    4cec:	2000086c 	.word	0x2000086c
    4cf0:	00003735 	.word	0x00003735
    4cf4:	20000098 	.word	0x20000098
    4cf8:	00005e9d 	.word	0x00005e9d
    4cfc:	0000322d 	.word	0x0000322d
    4d00:	e000e100 	.word	0xe000e100
    4d04:	00004b61 	.word	0x00004b61
    4d08:	000031f1 	.word	0x000031f1

00004d0c <sio2host_tx>:

uint8_t sio2host_tx(uint8_t *data, uint8_t length)
{
    4d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d0e:	b083      	sub	sp, #12
    4d10:	0006      	movs	r6, r0
    4d12:	9101      	str	r1, [sp, #4]
static inline enum status_code usart_serial_write_packet(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
	return usart_write_buffer_wait(module, tx_data, length);
    4d14:	466b      	mov	r3, sp
    4d16:	889d      	ldrh	r5, [r3, #4]
    4d18:	4c05      	ldr	r4, [pc, #20]	; (4d30 <sio2host_tx+0x24>)
    4d1a:	4f06      	ldr	r7, [pc, #24]	; (4d34 <sio2host_tx+0x28>)
    4d1c:	002a      	movs	r2, r5
    4d1e:	0031      	movs	r1, r6
    4d20:	0020      	movs	r0, r4
    4d22:	47b8      	blx	r7
#else
	    status = usart_serial_write_packet(USART_HOST,
				(const uint8_t *)data,
				length);
#endif
	} while (status != STATUS_OK);
    4d24:	2800      	cmp	r0, #0
    4d26:	d1f9      	bne.n	4d1c <sio2host_tx+0x10>
	return length;
}
    4d28:	9801      	ldr	r0, [sp, #4]
    4d2a:	b003      	add	sp, #12
    4d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d2e:	46c0      	nop			; (mov r8, r8)
    4d30:	20000458 	.word	0x20000458
    4d34:	00003b35 	.word	0x00003b35

00004d38 <sio2host_putchar>:
	}
	return c;
}

void sio2host_putchar(uint8_t ch)
{
    4d38:	b500      	push	{lr}
    4d3a:	b083      	sub	sp, #12
    4d3c:	466b      	mov	r3, sp
    4d3e:	71d8      	strb	r0, [r3, #7]
    4d40:	3307      	adds	r3, #7
	sio2host_tx(&ch, 1);
    4d42:	2101      	movs	r1, #1
    4d44:	0018      	movs	r0, r3
    4d46:	4b02      	ldr	r3, [pc, #8]	; (4d50 <sio2host_putchar+0x18>)
    4d48:	4798      	blx	r3
}
    4d4a:	b003      	add	sp, #12
    4d4c:	bd00      	pop	{pc}
    4d4e:	46c0      	nop			; (mov r8, r8)
    4d50:	00004d0d 	.word	0x00004d0d

00004d54 <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    4d54:	b510      	push	{r4, lr}
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    4d56:	2201      	movs	r2, #1
    4d58:	4b02      	ldr	r3, [pc, #8]	; (4d64 <AT86RFX_ISR+0x10>)
    4d5a:	615a      	str	r2, [r3, #20]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
	PHY_PacketReceieved();
    4d5c:	4b02      	ldr	r3, [pc, #8]	; (4d68 <AT86RFX_ISR+0x14>)
    4d5e:	4798      	blx	r3

}
    4d60:	bd10      	pop	{r4, pc}
    4d62:	46c0      	nop			; (mov r8, r8)
    4d64:	40002400 	.word	0x40002400
    4d68:	00001869 	.word	0x00001869

00004d6c <trx_spi_init>:

void trx_spi_init(void)
{
    4d6c:	b530      	push	{r4, r5, lr}
    4d6e:	b085      	sub	sp, #20
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = 10;
	config->address_enabled = false;
    4d70:	4a34      	ldr	r2, [pc, #208]	; (4e44 <trx_spi_init+0xd8>)
    4d72:	2300      	movs	r3, #0
    4d74:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    4d76:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    4d78:	213f      	movs	r1, #63	; 0x3f
    4d7a:	7011      	strb	r1, [r2, #0]
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    4d7c:	4c32      	ldr	r4, [pc, #200]	; (4e48 <trx_spi_init+0xdc>)
    4d7e:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    4d80:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    4d82:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    4d84:	2201      	movs	r2, #1
    4d86:	4669      	mov	r1, sp
    4d88:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    4d8a:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    4d8c:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    4d8e:	203f      	movs	r0, #63	; 0x3f
    4d90:	4b2e      	ldr	r3, [pc, #184]	; (4e4c <trx_spi_init+0xe0>)
    4d92:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    4d94:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    4d96:	09da      	lsrs	r2, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    4d98:	2100      	movs	r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    4d9a:	2a00      	cmp	r2, #0
    4d9c:	d104      	bne.n	4da8 <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    4d9e:	0959      	lsrs	r1, r3, #5
    4da0:	01c9      	lsls	r1, r1, #7
    4da2:	4a2b      	ldr	r2, [pc, #172]	; (4e50 <trx_spi_init+0xe4>)
    4da4:	4694      	mov	ip, r2
    4da6:	4461      	add	r1, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4da8:	221f      	movs	r2, #31
    4daa:	4013      	ands	r3, r2
    4dac:	3a1e      	subs	r2, #30
    4dae:	0010      	movs	r0, r2
    4db0:	4098      	lsls	r0, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    4db2:	6188      	str	r0, [r1, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    4db4:	4c27      	ldr	r4, [pc, #156]	; (4e54 <trx_spi_init+0xe8>)
    4db6:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    4db8:	2300      	movs	r3, #0
    4dba:	6063      	str	r3, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    4dbc:	60a3      	str	r3, [r4, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    4dbe:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    4dc0:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    4dc2:	74a2      	strb	r2, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    4dc4:	74e2      	strb	r2, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    4dc6:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    4dc8:	3223      	adds	r2, #35	; 0x23
    4dca:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    4dcc:	0020      	movs	r0, r4
    4dce:	3018      	adds	r0, #24
    4dd0:	3a18      	subs	r2, #24
    4dd2:	2100      	movs	r1, #0
    4dd4:	4b20      	ldr	r3, [pc, #128]	; (4e58 <trx_spi_init+0xec>)
    4dd6:	4798      	blx	r3
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    4dd8:	2380      	movs	r3, #128	; 0x80
    4dda:	025b      	lsls	r3, r3, #9
    4ddc:	60e3      	str	r3, [r4, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    4dde:	4b1f      	ldr	r3, [pc, #124]	; (4e5c <trx_spi_init+0xf0>)
    4de0:	61a3      	str	r3, [r4, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    4de2:	4b1f      	ldr	r3, [pc, #124]	; (4e60 <trx_spi_init+0xf4>)
    4de4:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    4de6:	2301      	movs	r3, #1
    4de8:	425b      	negs	r3, r3
    4dea:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    4dec:	4b1d      	ldr	r3, [pc, #116]	; (4e64 <trx_spi_init+0xf8>)
    4dee:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    4df0:	4b1d      	ldr	r3, [pc, #116]	; (4e68 <trx_spi_init+0xfc>)
    4df2:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    4df4:	4d1d      	ldr	r5, [pc, #116]	; (4e6c <trx_spi_init+0x100>)
    4df6:	0022      	movs	r2, r4
    4df8:	491d      	ldr	r1, [pc, #116]	; (4e70 <trx_spi_init+0x104>)
    4dfa:	0028      	movs	r0, r5
    4dfc:	4b1d      	ldr	r3, [pc, #116]	; (4e74 <trx_spi_init+0x108>)
    4dfe:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4e00:	682a      	ldr	r2, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    4e02:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    4e04:	2b00      	cmp	r3, #0
    4e06:	d1fc      	bne.n	4e02 <trx_spi_init+0x96>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    4e08:	6813      	ldr	r3, [r2, #0]
    4e0a:	2502      	movs	r5, #2
    4e0c:	432b      	orrs	r3, r5
    4e0e:	6013      	str	r3, [r2, #0]
	spi_enable(&master);

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    4e10:	ac01      	add	r4, sp, #4
    4e12:	0020      	movs	r0, r4
    4e14:	4b18      	ldr	r3, [pc, #96]	; (4e78 <trx_spi_init+0x10c>)
    4e16:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    4e18:	2320      	movs	r3, #32
    4e1a:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
    4e1c:	2380      	movs	r3, #128	; 0x80
    4e1e:	039b      	lsls	r3, r3, #14
    4e20:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    4e22:	7225      	strb	r5, [r4, #8]
	#if (SAML21 || SAMR30)
	eint_chan_conf.enable_async_edge_detection = false;
    4e24:	2300      	movs	r3, #0
    4e26:	7263      	strb	r3, [r4, #9]
	#else
	eint_chan_conf.wake_if_sleeping    = true;
	#endif
	eint_chan_conf.filter_input_signal = false;
    4e28:	72a3      	strb	r3, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    4e2a:	3301      	adds	r3, #1
    4e2c:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    4e2e:	0021      	movs	r1, r4
    4e30:	2000      	movs	r0, #0
    4e32:	4b12      	ldr	r3, [pc, #72]	; (4e7c <trx_spi_init+0x110>)
    4e34:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    4e36:	2200      	movs	r2, #0
    4e38:	2100      	movs	r1, #0
    4e3a:	4811      	ldr	r0, [pc, #68]	; (4e80 <trx_spi_init+0x114>)
    4e3c:	4b11      	ldr	r3, [pc, #68]	; (4e84 <trx_spi_init+0x118>)
    4e3e:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    4e40:	b005      	add	sp, #20
    4e42:	bd30      	pop	{r4, r5, pc}
    4e44:	2000087c 	.word	0x2000087c
    4e48:	20000880 	.word	0x20000880
    4e4c:	00002dcd 	.word	0x00002dcd
    4e50:	40002800 	.word	0x40002800
    4e54:	20000884 	.word	0x20000884
    4e58:	00005e57 	.word	0x00005e57
    4e5c:	003d0900 	.word	0x003d0900
    4e60:	00530005 	.word	0x00530005
    4e64:	003e0005 	.word	0x003e0005
    4e68:	00520005 	.word	0x00520005
    4e6c:	200008bc 	.word	0x200008bc
    4e70:	42001000 	.word	0x42001000
    4e74:	000032b9 	.word	0x000032b9
    4e78:	00002d31 	.word	0x00002d31
    4e7c:	00002d45 	.word	0x00002d45
    4e80:	00004d55 	.word	0x00004d55
    4e84:	00002bb5 	.word	0x00002bb5

00004e88 <PhyReset>:

void PhyReset(void)
{
    4e88:	b570      	push	{r4, r5, r6, lr}
    4e8a:	4b09      	ldr	r3, [pc, #36]	; (4eb0 <PhyReset+0x28>)
    4e8c:	001c      	movs	r4, r3
    4e8e:	3480      	adds	r4, #128	; 0x80
    4e90:	2580      	movs	r5, #128	; 0x80
    4e92:	022d      	lsls	r5, r5, #8
    4e94:	61a5      	str	r5, [r4, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    4e96:	2280      	movs	r2, #128	; 0x80
    4e98:	0352      	lsls	r2, r2, #13
    4e9a:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    4e9c:	20a5      	movs	r0, #165	; 0xa5
    4e9e:	0040      	lsls	r0, r0, #1
    4ea0:	4e04      	ldr	r6, [pc, #16]	; (4eb4 <PhyReset+0x2c>)
    4ea2:	47b0      	blx	r6
    4ea4:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    4ea6:	200a      	movs	r0, #10
    4ea8:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    4eaa:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    4eac:	bd70      	pop	{r4, r5, r6, pc}
    4eae:	46c0      	nop			; (mov r8, r8)
    4eb0:	40002800 	.word	0x40002800
    4eb4:	000029b5 	.word	0x000029b5

00004eb8 <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    4eb8:	b570      	push	{r4, r5, r6, lr}
    4eba:	b082      	sub	sp, #8
    4ebc:	0005      	movs	r5, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4ebe:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    4ec2:	425a      	negs	r2, r3
    4ec4:	4153      	adcs	r3, r2
    4ec6:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    4ec8:	b672      	cpsid	i
    4eca:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4ece:	2200      	movs	r2, #0
    4ed0:	4b33      	ldr	r3, [pc, #204]	; (4fa0 <trx_reg_read+0xe8>)
    4ed2:	701a      	strb	r2, [r3, #0]
	return flags;
    4ed4:	9c01      	ldr	r4, [sp, #4]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4ed6:	4e33      	ldr	r6, [pc, #204]	; (4fa4 <trx_reg_read+0xec>)
    4ed8:	3201      	adds	r2, #1
    4eda:	4933      	ldr	r1, [pc, #204]	; (4fa8 <trx_reg_read+0xf0>)
    4edc:	0030      	movs	r0, r6
    4ede:	4b33      	ldr	r3, [pc, #204]	; (4fac <trx_reg_read+0xf4>)
    4ee0:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4ee2:	6833      	ldr	r3, [r6, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    4ee4:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4ee6:	7e1a      	ldrb	r2, [r3, #24]
    4ee8:	420a      	tst	r2, r1
    4eea:	d0fc      	beq.n	4ee6 <trx_reg_read+0x2e>
    4eec:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4eee:	07d2      	lsls	r2, r2, #31
    4ef0:	d502      	bpl.n	4ef8 <trx_reg_read+0x40>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4ef2:	2280      	movs	r2, #128	; 0x80
    4ef4:	4315      	orrs	r5, r2
    4ef6:	629d      	str	r5, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    4ef8:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4efa:	7e1a      	ldrb	r2, [r3, #24]
    4efc:	420a      	tst	r2, r1
    4efe:	d0fc      	beq.n	4efa <trx_reg_read+0x42>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4f00:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4f02:	7e1a      	ldrb	r2, [r3, #24]
    4f04:	420a      	tst	r2, r1
    4f06:	d0fc      	beq.n	4f02 <trx_reg_read+0x4a>
    4f08:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4f0a:	0752      	lsls	r2, r2, #29
    4f0c:	d512      	bpl.n	4f34 <trx_reg_read+0x7c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4f0e:	8b5a      	ldrh	r2, [r3, #26]
    4f10:	0752      	lsls	r2, r2, #29
    4f12:	d501      	bpl.n	4f18 <trx_reg_read+0x60>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4f14:	2204      	movs	r2, #4
    4f16:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4f18:	4a22      	ldr	r2, [pc, #136]	; (4fa4 <trx_reg_read+0xec>)
    4f1a:	7992      	ldrb	r2, [r2, #6]
    4f1c:	2a01      	cmp	r2, #1
    4f1e:	d105      	bne.n	4f2c <trx_reg_read+0x74>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4f20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4f22:	05d2      	lsls	r2, r2, #23
    4f24:	0dd2      	lsrs	r2, r2, #23
    4f26:	4922      	ldr	r1, [pc, #136]	; (4fb0 <trx_reg_read+0xf8>)
    4f28:	800a      	strh	r2, [r1, #0]
    4f2a:	e003      	b.n	4f34 <trx_reg_read+0x7c>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4f2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4f2e:	b2d2      	uxtb	r2, r2
    4f30:	491f      	ldr	r1, [pc, #124]	; (4fb0 <trx_reg_read+0xf8>)
    4f32:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    4f34:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4f36:	7e1a      	ldrb	r2, [r3, #24]
    4f38:	420a      	tst	r2, r1
    4f3a:	d0fc      	beq.n	4f36 <trx_reg_read+0x7e>
    4f3c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4f3e:	07d2      	lsls	r2, r2, #31
    4f40:	d501      	bpl.n	4f46 <trx_reg_read+0x8e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4f42:	2200      	movs	r2, #0
    4f44:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    4f46:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4f48:	7e1a      	ldrb	r2, [r3, #24]
    4f4a:	420a      	tst	r2, r1
    4f4c:	d0fc      	beq.n	4f48 <trx_reg_read+0x90>
	}
	while (!spi_is_ready_to_read(&master)) {
    4f4e:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4f50:	7e1a      	ldrb	r2, [r3, #24]
    4f52:	420a      	tst	r2, r1
    4f54:	d0fc      	beq.n	4f50 <trx_reg_read+0x98>
    4f56:	7e1a      	ldrb	r2, [r3, #24]
}

uint8_t trx_reg_read(uint8_t addr)
{
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t register_value = 0;
    4f58:	2500      	movs	r5, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4f5a:	0752      	lsls	r2, r2, #29
    4f5c:	d50e      	bpl.n	4f7c <trx_reg_read+0xc4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4f5e:	8b5a      	ldrh	r2, [r3, #26]
    4f60:	0752      	lsls	r2, r2, #29
    4f62:	d501      	bpl.n	4f68 <trx_reg_read+0xb0>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4f64:	2204      	movs	r2, #4
    4f66:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4f68:	4a0e      	ldr	r2, [pc, #56]	; (4fa4 <trx_reg_read+0xec>)
    4f6a:	7992      	ldrb	r2, [r2, #6]
    4f6c:	2a01      	cmp	r2, #1
    4f6e:	d103      	bne.n	4f78 <trx_reg_read+0xc0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4f70:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    4f72:	05ed      	lsls	r5, r5, #23
    4f74:	0ded      	lsrs	r5, r5, #23
    4f76:	e001      	b.n	4f7c <trx_reg_read+0xc4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4f78:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    4f7a:	b2ed      	uxtb	r5, r5
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4f7c:	2200      	movs	r2, #0
    4f7e:	490a      	ldr	r1, [pc, #40]	; (4fa8 <trx_reg_read+0xf0>)
    4f80:	4808      	ldr	r0, [pc, #32]	; (4fa4 <trx_reg_read+0xec>)
    4f82:	4b0a      	ldr	r3, [pc, #40]	; (4fac <trx_reg_read+0xf4>)
    4f84:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    4f86:	23ff      	movs	r3, #255	; 0xff
    4f88:	4223      	tst	r3, r4
    4f8a:	d005      	beq.n	4f98 <trx_reg_read+0xe0>
		cpu_irq_enable();
    4f8c:	2201      	movs	r2, #1
    4f8e:	4b04      	ldr	r3, [pc, #16]	; (4fa0 <trx_reg_read+0xe8>)
    4f90:	701a      	strb	r2, [r3, #0]
    4f92:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    4f96:	b662      	cpsie	i

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    4f98:	b2e8      	uxtb	r0, r5
}
    4f9a:	b002      	add	sp, #8
    4f9c:	bd70      	pop	{r4, r5, r6, pc}
    4f9e:	46c0      	nop			; (mov r8, r8)
    4fa0:	20000034 	.word	0x20000034
    4fa4:	200008bc 	.word	0x200008bc
    4fa8:	20000880 	.word	0x20000880
    4fac:	00003581 	.word	0x00003581
    4fb0:	20000878 	.word	0x20000878

00004fb4 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    4fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4fb6:	b083      	sub	sp, #12
    4fb8:	0006      	movs	r6, r0
    4fba:	000c      	movs	r4, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4fbc:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    4fc0:	425a      	negs	r2, r3
    4fc2:	4153      	adcs	r3, r2
    4fc4:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    4fc6:	b672      	cpsid	i
    4fc8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4fcc:	2200      	movs	r2, #0
    4fce:	4b34      	ldr	r3, [pc, #208]	; (50a0 <trx_reg_write+0xec>)
    4fd0:	701a      	strb	r2, [r3, #0]
	return flags;
    4fd2:	9d01      	ldr	r5, [sp, #4]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4fd4:	4f33      	ldr	r7, [pc, #204]	; (50a4 <trx_reg_write+0xf0>)
    4fd6:	3201      	adds	r2, #1
    4fd8:	4933      	ldr	r1, [pc, #204]	; (50a8 <trx_reg_write+0xf4>)
    4fda:	0038      	movs	r0, r7
    4fdc:	4b33      	ldr	r3, [pc, #204]	; (50ac <trx_reg_write+0xf8>)
    4fde:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4fe0:	683b      	ldr	r3, [r7, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    4fe2:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4fe4:	7e1a      	ldrb	r2, [r3, #24]
    4fe6:	420a      	tst	r2, r1
    4fe8:	d0fc      	beq.n	4fe4 <trx_reg_write+0x30>
    4fea:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4fec:	07d2      	lsls	r2, r2, #31
    4fee:	d502      	bpl.n	4ff6 <trx_reg_write+0x42>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4ff0:	22c0      	movs	r2, #192	; 0xc0
    4ff2:	4316      	orrs	r6, r2
    4ff4:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    4ff6:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4ff8:	7e1a      	ldrb	r2, [r3, #24]
    4ffa:	420a      	tst	r2, r1
    4ffc:	d0fc      	beq.n	4ff8 <trx_reg_write+0x44>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4ffe:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5000:	7e1a      	ldrb	r2, [r3, #24]
    5002:	420a      	tst	r2, r1
    5004:	d0fc      	beq.n	5000 <trx_reg_write+0x4c>
    5006:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    5008:	0752      	lsls	r2, r2, #29
    500a:	d512      	bpl.n	5032 <trx_reg_write+0x7e>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    500c:	8b5a      	ldrh	r2, [r3, #26]
    500e:	0752      	lsls	r2, r2, #29
    5010:	d501      	bpl.n	5016 <trx_reg_write+0x62>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5012:	2204      	movs	r2, #4
    5014:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5016:	4a23      	ldr	r2, [pc, #140]	; (50a4 <trx_reg_write+0xf0>)
    5018:	7992      	ldrb	r2, [r2, #6]
    501a:	2a01      	cmp	r2, #1
    501c:	d105      	bne.n	502a <trx_reg_write+0x76>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    501e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5020:	05d2      	lsls	r2, r2, #23
    5022:	0dd2      	lsrs	r2, r2, #23
    5024:	4922      	ldr	r1, [pc, #136]	; (50b0 <trx_reg_write+0xfc>)
    5026:	800a      	strh	r2, [r1, #0]
    5028:	e003      	b.n	5032 <trx_reg_write+0x7e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    502a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    502c:	b2d2      	uxtb	r2, r2
    502e:	4920      	ldr	r1, [pc, #128]	; (50b0 <trx_reg_write+0xfc>)
    5030:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    5032:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5034:	7e1a      	ldrb	r2, [r3, #24]
    5036:	420a      	tst	r2, r1
    5038:	d0fc      	beq.n	5034 <trx_reg_write+0x80>
    503a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    503c:	07d2      	lsls	r2, r2, #31
    503e:	d500      	bpl.n	5042 <trx_reg_write+0x8e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5040:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    5042:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5044:	7e1a      	ldrb	r2, [r3, #24]
    5046:	420a      	tst	r2, r1
    5048:	d0fc      	beq.n	5044 <trx_reg_write+0x90>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    504a:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    504c:	7e1a      	ldrb	r2, [r3, #24]
    504e:	420a      	tst	r2, r1
    5050:	d0fc      	beq.n	504c <trx_reg_write+0x98>
    5052:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    5054:	0752      	lsls	r2, r2, #29
    5056:	d512      	bpl.n	507e <trx_reg_write+0xca>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5058:	8b5a      	ldrh	r2, [r3, #26]
    505a:	0752      	lsls	r2, r2, #29
    505c:	d501      	bpl.n	5062 <trx_reg_write+0xae>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    505e:	2204      	movs	r2, #4
    5060:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5062:	4a10      	ldr	r2, [pc, #64]	; (50a4 <trx_reg_write+0xf0>)
    5064:	7992      	ldrb	r2, [r2, #6]
    5066:	2a01      	cmp	r2, #1
    5068:	d105      	bne.n	5076 <trx_reg_write+0xc2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    506a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    506c:	05db      	lsls	r3, r3, #23
    506e:	0ddb      	lsrs	r3, r3, #23
    5070:	4a0f      	ldr	r2, [pc, #60]	; (50b0 <trx_reg_write+0xfc>)
    5072:	8013      	strh	r3, [r2, #0]
    5074:	e003      	b.n	507e <trx_reg_write+0xca>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5078:	b2db      	uxtb	r3, r3
    507a:	4a0d      	ldr	r2, [pc, #52]	; (50b0 <trx_reg_write+0xfc>)
    507c:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    507e:	2200      	movs	r2, #0
    5080:	4909      	ldr	r1, [pc, #36]	; (50a8 <trx_reg_write+0xf4>)
    5082:	4808      	ldr	r0, [pc, #32]	; (50a4 <trx_reg_write+0xf0>)
    5084:	4b09      	ldr	r3, [pc, #36]	; (50ac <trx_reg_write+0xf8>)
    5086:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    5088:	23ff      	movs	r3, #255	; 0xff
    508a:	422b      	tst	r3, r5
    508c:	d005      	beq.n	509a <trx_reg_write+0xe6>
		cpu_irq_enable();
    508e:	2201      	movs	r2, #1
    5090:	4b03      	ldr	r3, [pc, #12]	; (50a0 <trx_reg_write+0xec>)
    5092:	701a      	strb	r2, [r3, #0]
    5094:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    5098:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    509a:	b003      	add	sp, #12
    509c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    509e:	46c0      	nop			; (mov r8, r8)
    50a0:	20000034 	.word	0x20000034
    50a4:	200008bc 	.word	0x200008bc
    50a8:	20000880 	.word	0x20000880
    50ac:	00003581 	.word	0x00003581
    50b0:	20000878 	.word	0x20000878

000050b4 <trx_frame_read>:
	new_value |= current_reg_value;
	trx_reg_write(reg_addr, new_value);
}

void trx_frame_read(uint8_t *data, uint8_t length)
{
    50b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    50b6:	4657      	mov	r7, sl
    50b8:	464e      	mov	r6, r9
    50ba:	4645      	mov	r5, r8
    50bc:	b4e0      	push	{r5, r6, r7}
    50be:	b082      	sub	sp, #8
    50c0:	0005      	movs	r5, r0
    50c2:	000c      	movs	r4, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    50c4:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    50c8:	425a      	negs	r2, r3
    50ca:	4153      	adcs	r3, r2
    50cc:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    50ce:	b672      	cpsid	i
    50d0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    50d4:	2200      	movs	r2, #0
    50d6:	4b3e      	ldr	r3, [pc, #248]	; (51d0 <trx_frame_read+0x11c>)
    50d8:	701a      	strb	r2, [r3, #0]
	return flags;
    50da:	9b01      	ldr	r3, [sp, #4]
    50dc:	4698      	mov	r8, r3
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    50de:	4f3d      	ldr	r7, [pc, #244]	; (51d4 <trx_frame_read+0x120>)
    50e0:	3201      	adds	r2, #1
    50e2:	493d      	ldr	r1, [pc, #244]	; (51d8 <trx_frame_read+0x124>)
    50e4:	0038      	movs	r0, r7
    50e6:	4b3d      	ldr	r3, [pc, #244]	; (51dc <trx_frame_read+0x128>)
    50e8:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    50ea:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    50ec:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    50ee:	7e1a      	ldrb	r2, [r3, #24]
    50f0:	420a      	tst	r2, r1
    50f2:	d0fc      	beq.n	50ee <trx_frame_read+0x3a>
    50f4:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    50f6:	07d2      	lsls	r2, r2, #31
    50f8:	d501      	bpl.n	50fe <trx_frame_read+0x4a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    50fa:	2220      	movs	r2, #32
    50fc:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    50fe:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5100:	7e1a      	ldrb	r2, [r3, #24]
    5102:	420a      	tst	r2, r1
    5104:	d0fc      	beq.n	5100 <trx_frame_read+0x4c>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    5106:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5108:	7e1a      	ldrb	r2, [r3, #24]
    510a:	420a      	tst	r2, r1
    510c:	d0fc      	beq.n	5108 <trx_frame_read+0x54>
    510e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    5110:	0752      	lsls	r2, r2, #29
    5112:	d512      	bpl.n	513a <trx_frame_read+0x86>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5114:	8b5a      	ldrh	r2, [r3, #26]
    5116:	0752      	lsls	r2, r2, #29
    5118:	d501      	bpl.n	511e <trx_frame_read+0x6a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    511a:	2204      	movs	r2, #4
    511c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    511e:	4a2d      	ldr	r2, [pc, #180]	; (51d4 <trx_frame_read+0x120>)
    5120:	7992      	ldrb	r2, [r2, #6]
    5122:	2a01      	cmp	r2, #1
    5124:	d105      	bne.n	5132 <trx_frame_read+0x7e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5128:	05db      	lsls	r3, r3, #23
    512a:	0ddb      	lsrs	r3, r3, #23
    512c:	4a2c      	ldr	r2, [pc, #176]	; (51e0 <trx_frame_read+0x12c>)
    512e:	8013      	strh	r3, [r2, #0]
    5130:	e003      	b.n	513a <trx_frame_read+0x86>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5134:	b2db      	uxtb	r3, r3
    5136:	4a2a      	ldr	r2, [pc, #168]	; (51e0 <trx_frame_read+0x12c>)
    5138:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    513a:	1e63      	subs	r3, r4, #1
    513c:	b2db      	uxtb	r3, r3
    513e:	2c00      	cmp	r4, #0
    5140:	d030      	beq.n	51a4 <trx_frame_read+0xf0>
    5142:	3301      	adds	r3, #1
    5144:	469c      	mov	ip, r3
    5146:	44ac      	add	ip, r5
    5148:	2720      	movs	r7, #32
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    514a:	4e22      	ldr	r6, [pc, #136]	; (51d4 <trx_frame_read+0x120>)
		while (!spi_is_ready_to_write(&master)) {
    514c:	2001      	movs	r0, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    514e:	2300      	movs	r3, #0
    5150:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    5152:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    5154:	2104      	movs	r1, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5156:	46b1      	mov	r9, r6
    5158:	e022      	b.n	51a0 <trx_frame_read+0xec>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    515a:	7e1a      	ldrb	r2, [r3, #24]
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    515c:	4202      	tst	r2, r0
    515e:	d0fc      	beq.n	515a <trx_frame_read+0xa6>
    5160:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    5162:	4202      	tst	r2, r0
    5164:	d001      	beq.n	516a <trx_frame_read+0xb6>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5166:	4652      	mov	r2, sl
    5168:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    516a:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    516c:	4222      	tst	r2, r4
    516e:	d0fc      	beq.n	516a <trx_frame_read+0xb6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5170:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    5172:	420a      	tst	r2, r1
    5174:	d0fc      	beq.n	5170 <trx_frame_read+0xbc>
    5176:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    5178:	420a      	tst	r2, r1
    517a:	d00d      	beq.n	5198 <trx_frame_read+0xe4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    517c:	8b5a      	ldrh	r2, [r3, #26]
    517e:	420a      	tst	r2, r1
    5180:	d000      	beq.n	5184 <trx_frame_read+0xd0>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5182:	8359      	strh	r1, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5184:	464a      	mov	r2, r9
    5186:	7992      	ldrb	r2, [r2, #6]
    5188:	2a01      	cmp	r2, #1
    518a:	d103      	bne.n	5194 <trx_frame_read+0xe0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    518c:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    518e:	05ff      	lsls	r7, r7, #23
    5190:	0dff      	lsrs	r7, r7, #23
    5192:	e001      	b.n	5198 <trx_frame_read+0xe4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5194:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    5196:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    5198:	702f      	strb	r7, [r5, #0]
		data++;
    519a:	3501      	adds	r5, #1
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    519c:	45ac      	cmp	ip, r5
    519e:	d001      	beq.n	51a4 <trx_frame_read+0xf0>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    51a0:	6833      	ldr	r3, [r6, #0]
    51a2:	e7da      	b.n	515a <trx_frame_read+0xa6>
		*data = temp;
		data++;
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    51a4:	2200      	movs	r2, #0
    51a6:	490c      	ldr	r1, [pc, #48]	; (51d8 <trx_frame_read+0x124>)
    51a8:	480a      	ldr	r0, [pc, #40]	; (51d4 <trx_frame_read+0x120>)
    51aa:	4b0c      	ldr	r3, [pc, #48]	; (51dc <trx_frame_read+0x128>)
    51ac:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    51ae:	23ff      	movs	r3, #255	; 0xff
    51b0:	4642      	mov	r2, r8
    51b2:	4213      	tst	r3, r2
    51b4:	d005      	beq.n	51c2 <trx_frame_read+0x10e>
		cpu_irq_enable();
    51b6:	2201      	movs	r2, #1
    51b8:	4b05      	ldr	r3, [pc, #20]	; (51d0 <trx_frame_read+0x11c>)
    51ba:	701a      	strb	r2, [r3, #0]
    51bc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    51c0:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    51c2:	b002      	add	sp, #8
    51c4:	bc1c      	pop	{r2, r3, r4}
    51c6:	4690      	mov	r8, r2
    51c8:	4699      	mov	r9, r3
    51ca:	46a2      	mov	sl, r4
    51cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    51ce:	46c0      	nop			; (mov r8, r8)
    51d0:	20000034 	.word	0x20000034
    51d4:	200008bc 	.word	0x200008bc
    51d8:	20000880 	.word	0x20000880
    51dc:	00003581 	.word	0x00003581
    51e0:	20000878 	.word	0x20000878

000051e4 <trx_frame_write>:

void trx_frame_write(uint8_t *data, uint8_t length)
{
    51e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    51e6:	4647      	mov	r7, r8
    51e8:	b480      	push	{r7}
    51ea:	b082      	sub	sp, #8
    51ec:	0004      	movs	r4, r0
    51ee:	000d      	movs	r5, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    51f0:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    51f4:	425a      	negs	r2, r3
    51f6:	4153      	adcs	r3, r2
    51f8:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    51fa:	b672      	cpsid	i
    51fc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    5200:	2200      	movs	r2, #0
    5202:	4b3a      	ldr	r3, [pc, #232]	; (52ec <trx_frame_write+0x108>)
    5204:	701a      	strb	r2, [r3, #0]
	return flags;
    5206:	9b01      	ldr	r3, [sp, #4]
    5208:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    520a:	4f39      	ldr	r7, [pc, #228]	; (52f0 <trx_frame_write+0x10c>)
    520c:	3201      	adds	r2, #1
    520e:	4939      	ldr	r1, [pc, #228]	; (52f4 <trx_frame_write+0x110>)
    5210:	0038      	movs	r0, r7
    5212:	4b39      	ldr	r3, [pc, #228]	; (52f8 <trx_frame_write+0x114>)
    5214:	4798      	blx	r3
    5216:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    5218:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    521a:	7e1a      	ldrb	r2, [r3, #24]
    521c:	420a      	tst	r2, r1
    521e:	d0fc      	beq.n	521a <trx_frame_write+0x36>
    5220:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    5222:	07d2      	lsls	r2, r2, #31
    5224:	d501      	bpl.n	522a <trx_frame_write+0x46>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5226:	2260      	movs	r2, #96	; 0x60
    5228:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    522a:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    522c:	7e1a      	ldrb	r2, [r3, #24]
    522e:	420a      	tst	r2, r1
    5230:	d0fc      	beq.n	522c <trx_frame_write+0x48>
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    5232:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5234:	7e1a      	ldrb	r2, [r3, #24]
    5236:	420a      	tst	r2, r1
    5238:	d0fc      	beq.n	5234 <trx_frame_write+0x50>
    523a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    523c:	0752      	lsls	r2, r2, #29
    523e:	d512      	bpl.n	5266 <trx_frame_write+0x82>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5240:	8b5a      	ldrh	r2, [r3, #26]
    5242:	0752      	lsls	r2, r2, #29
    5244:	d501      	bpl.n	524a <trx_frame_write+0x66>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5246:	2204      	movs	r2, #4
    5248:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    524a:	4a29      	ldr	r2, [pc, #164]	; (52f0 <trx_frame_write+0x10c>)
    524c:	7992      	ldrb	r2, [r2, #6]
    524e:	2a01      	cmp	r2, #1
    5250:	d105      	bne.n	525e <trx_frame_write+0x7a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5252:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5254:	05d2      	lsls	r2, r2, #23
    5256:	0dd2      	lsrs	r2, r2, #23
    5258:	4928      	ldr	r1, [pc, #160]	; (52fc <trx_frame_write+0x118>)
    525a:	800a      	strh	r2, [r1, #0]
    525c:	e003      	b.n	5266 <trx_frame_write+0x82>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    525e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5260:	b2d2      	uxtb	r2, r2
    5262:	4926      	ldr	r1, [pc, #152]	; (52fc <trx_frame_write+0x118>)
    5264:	800a      	strh	r2, [r1, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5266:	4a22      	ldr	r2, [pc, #136]	; (52f0 <trx_frame_write+0x10c>)
    5268:	7992      	ldrb	r2, [r2, #6]
    526a:	4694      	mov	ip, r2
    526c:	0021      	movs	r1, r4
	}
	spi_read(&master, &dummy_read);
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    526e:	2701      	movs	r7, #1
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    5270:	2002      	movs	r0, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    5272:	2404      	movs	r4, #4
    5274:	e022      	b.n	52bc <trx_frame_write+0xd8>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5276:	7e1a      	ldrb	r2, [r3, #24]
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    5278:	423a      	tst	r2, r7
    527a:	d0fc      	beq.n	5276 <trx_frame_write+0x92>
    527c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    527e:	423a      	tst	r2, r7
    5280:	d001      	beq.n	5286 <trx_frame_write+0xa2>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5282:	780a      	ldrb	r2, [r1, #0]
    5284:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5286:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    5288:	4202      	tst	r2, r0
    528a:	d0fc      	beq.n	5286 <trx_frame_write+0xa2>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    528c:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    528e:	4222      	tst	r2, r4
    5290:	d0fc      	beq.n	528c <trx_frame_write+0xa8>
    5292:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    5294:	4222      	tst	r2, r4
    5296:	d010      	beq.n	52ba <trx_frame_write+0xd6>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5298:	8b5a      	ldrh	r2, [r3, #26]
    529a:	4222      	tst	r2, r4
    529c:	d000      	beq.n	52a0 <trx_frame_write+0xbc>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    529e:	835c      	strh	r4, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    52a0:	4662      	mov	r2, ip
    52a2:	2a01      	cmp	r2, #1
    52a4:	d105      	bne.n	52b2 <trx_frame_write+0xce>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    52a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    52a8:	05d2      	lsls	r2, r2, #23
    52aa:	0dd2      	lsrs	r2, r2, #23
    52ac:	4e13      	ldr	r6, [pc, #76]	; (52fc <trx_frame_write+0x118>)
    52ae:	8032      	strh	r2, [r6, #0]
    52b0:	e003      	b.n	52ba <trx_frame_write+0xd6>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    52b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    52b4:	b2d2      	uxtb	r2, r2
    52b6:	4e11      	ldr	r6, [pc, #68]	; (52fc <trx_frame_write+0x118>)
    52b8:	8032      	strh	r2, [r6, #0]
    52ba:	3101      	adds	r1, #1
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);
	while (length--) {
    52bc:	3d01      	subs	r5, #1
    52be:	b2ed      	uxtb	r5, r5
    52c0:	2dff      	cmp	r5, #255	; 0xff
    52c2:	d1d8      	bne.n	5276 <trx_frame_write+0x92>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    52c4:	2200      	movs	r2, #0
    52c6:	490b      	ldr	r1, [pc, #44]	; (52f4 <trx_frame_write+0x110>)
    52c8:	4809      	ldr	r0, [pc, #36]	; (52f0 <trx_frame_write+0x10c>)
    52ca:	4b0b      	ldr	r3, [pc, #44]	; (52f8 <trx_frame_write+0x114>)
    52cc:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    52ce:	23ff      	movs	r3, #255	; 0xff
    52d0:	4642      	mov	r2, r8
    52d2:	4213      	tst	r3, r2
    52d4:	d005      	beq.n	52e2 <trx_frame_write+0xfe>
		cpu_irq_enable();
    52d6:	2201      	movs	r2, #1
    52d8:	4b04      	ldr	r3, [pc, #16]	; (52ec <trx_frame_write+0x108>)
    52da:	701a      	strb	r2, [r3, #0]
    52dc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    52e0:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    52e2:	b002      	add	sp, #8
    52e4:	bc04      	pop	{r2}
    52e6:	4690      	mov	r8, r2
    52e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    52ea:	46c0      	nop			; (mov r8, r8)
    52ec:	20000034 	.word	0x20000034
    52f0:	200008bc 	.word	0x200008bc
    52f4:	20000880 	.word	0x20000880
    52f8:	00003581 	.word	0x00003581
    52fc:	20000878 	.word	0x20000878

00005300 <trx_sram_write>:
 * @param addr Start address in the SRAM for the write operation
 * @param data Pointer to the data to be written into SRAM
 * @param length Number of bytes to be written into SRAM
 */
void trx_sram_write(uint8_t addr, uint8_t *data, uint8_t length)
{
    5300:	b5f0      	push	{r4, r5, r6, r7, lr}
    5302:	4647      	mov	r7, r8
    5304:	b480      	push	{r7}
    5306:	b082      	sub	sp, #8
    5308:	0006      	movs	r6, r0
    530a:	000d      	movs	r5, r1
    530c:	0014      	movs	r4, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    530e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    5312:	425a      	negs	r2, r3
    5314:	4153      	adcs	r3, r2
    5316:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    5318:	b672      	cpsid	i
    531a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    531e:	2200      	movs	r2, #0
    5320:	4b4c      	ldr	r3, [pc, #304]	; (5454 <trx_sram_write+0x154>)
    5322:	701a      	strb	r2, [r3, #0]
	return flags;
    5324:	9b01      	ldr	r3, [sp, #4]
    5326:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    5328:	4f4b      	ldr	r7, [pc, #300]	; (5458 <trx_sram_write+0x158>)
    532a:	3201      	adds	r2, #1
    532c:	494b      	ldr	r1, [pc, #300]	; (545c <trx_sram_write+0x15c>)
    532e:	0038      	movs	r0, r7
    5330:	4b4b      	ldr	r3, [pc, #300]	; (5460 <trx_sram_write+0x160>)
    5332:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5334:	683b      	ldr	r3, [r7, #0]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    5336:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5338:	7e1a      	ldrb	r2, [r3, #24]
    533a:	420a      	tst	r2, r1
    533c:	d0fc      	beq.n	5338 <trx_sram_write+0x38>
    533e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    5340:	07d2      	lsls	r2, r2, #31
    5342:	d501      	bpl.n	5348 <trx_sram_write+0x48>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5344:	2240      	movs	r2, #64	; 0x40
    5346:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    5348:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    534a:	7e1a      	ldrb	r2, [r3, #24]
    534c:	420a      	tst	r2, r1
    534e:	d0fc      	beq.n	534a <trx_sram_write+0x4a>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    5350:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5352:	7e1a      	ldrb	r2, [r3, #24]
    5354:	420a      	tst	r2, r1
    5356:	d0fc      	beq.n	5352 <trx_sram_write+0x52>
    5358:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    535a:	0752      	lsls	r2, r2, #29
    535c:	d512      	bpl.n	5384 <trx_sram_write+0x84>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    535e:	8b5a      	ldrh	r2, [r3, #26]
    5360:	0752      	lsls	r2, r2, #29
    5362:	d501      	bpl.n	5368 <trx_sram_write+0x68>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5364:	2204      	movs	r2, #4
    5366:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5368:	4a3b      	ldr	r2, [pc, #236]	; (5458 <trx_sram_write+0x158>)
    536a:	7992      	ldrb	r2, [r2, #6]
    536c:	2a01      	cmp	r2, #1
    536e:	d105      	bne.n	537c <trx_sram_write+0x7c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5370:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5372:	05d2      	lsls	r2, r2, #23
    5374:	0dd2      	lsrs	r2, r2, #23
    5376:	493b      	ldr	r1, [pc, #236]	; (5464 <trx_sram_write+0x164>)
    5378:	800a      	strh	r2, [r1, #0]
    537a:	e003      	b.n	5384 <trx_sram_write+0x84>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    537c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    537e:	b2d2      	uxtb	r2, r2
    5380:	4938      	ldr	r1, [pc, #224]	; (5464 <trx_sram_write+0x164>)
    5382:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the write operation should start */
	while (!spi_is_ready_to_write(&master)) {
    5384:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5386:	7e1a      	ldrb	r2, [r3, #24]
    5388:	420a      	tst	r2, r1
    538a:	d0fc      	beq.n	5386 <trx_sram_write+0x86>
    538c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    538e:	07d2      	lsls	r2, r2, #31
    5390:	d500      	bpl.n	5394 <trx_sram_write+0x94>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5392:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    5394:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5396:	7e1a      	ldrb	r2, [r3, #24]
    5398:	420a      	tst	r2, r1
    539a:	d0fc      	beq.n	5396 <trx_sram_write+0x96>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    539c:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    539e:	7e1a      	ldrb	r2, [r3, #24]
    53a0:	420a      	tst	r2, r1
    53a2:	d0fc      	beq.n	539e <trx_sram_write+0x9e>
    53a4:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    53a6:	0752      	lsls	r2, r2, #29
    53a8:	d512      	bpl.n	53d0 <trx_sram_write+0xd0>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    53aa:	8b5a      	ldrh	r2, [r3, #26]
    53ac:	0752      	lsls	r2, r2, #29
    53ae:	d501      	bpl.n	53b4 <trx_sram_write+0xb4>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    53b0:	2204      	movs	r2, #4
    53b2:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    53b4:	4a28      	ldr	r2, [pc, #160]	; (5458 <trx_sram_write+0x158>)
    53b6:	7992      	ldrb	r2, [r2, #6]
    53b8:	2a01      	cmp	r2, #1
    53ba:	d105      	bne.n	53c8 <trx_sram_write+0xc8>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    53bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    53be:	05d2      	lsls	r2, r2, #23
    53c0:	0dd2      	lsrs	r2, r2, #23
    53c2:	4928      	ldr	r1, [pc, #160]	; (5464 <trx_sram_write+0x164>)
    53c4:	800a      	strh	r2, [r1, #0]
    53c6:	e003      	b.n	53d0 <trx_sram_write+0xd0>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    53c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    53ca:	b2d2      	uxtb	r2, r2
    53cc:	4925      	ldr	r1, [pc, #148]	; (5464 <trx_sram_write+0x164>)
    53ce:	800a      	strh	r2, [r1, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    53d0:	4a21      	ldr	r2, [pc, #132]	; (5458 <trx_sram_write+0x158>)
    53d2:	7992      	ldrb	r2, [r2, #6]
    53d4:	4694      	mov	ip, r2
    53d6:	0028      	movs	r0, r5
	}
	spi_read(&master, &dummy_read);

	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    53d8:	2601      	movs	r6, #1
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    53da:	2502      	movs	r5, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    53dc:	2104      	movs	r1, #4
    53de:	e022      	b.n	5426 <trx_sram_write+0x126>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    53e0:	7e1a      	ldrb	r2, [r3, #24]
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    53e2:	4232      	tst	r2, r6
    53e4:	d0fc      	beq.n	53e0 <trx_sram_write+0xe0>
    53e6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    53e8:	4232      	tst	r2, r6
    53ea:	d001      	beq.n	53f0 <trx_sram_write+0xf0>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    53ec:	7802      	ldrb	r2, [r0, #0]
    53ee:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    53f0:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    53f2:	422a      	tst	r2, r5
    53f4:	d0fc      	beq.n	53f0 <trx_sram_write+0xf0>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    53f6:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    53f8:	420a      	tst	r2, r1
    53fa:	d0fc      	beq.n	53f6 <trx_sram_write+0xf6>
    53fc:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    53fe:	420a      	tst	r2, r1
    5400:	d010      	beq.n	5424 <trx_sram_write+0x124>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5402:	8b5a      	ldrh	r2, [r3, #26]
    5404:	420a      	tst	r2, r1
    5406:	d000      	beq.n	540a <trx_sram_write+0x10a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5408:	8359      	strh	r1, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    540a:	4662      	mov	r2, ip
    540c:	2a01      	cmp	r2, #1
    540e:	d105      	bne.n	541c <trx_sram_write+0x11c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5412:	05d2      	lsls	r2, r2, #23
    5414:	0dd2      	lsrs	r2, r2, #23
    5416:	4f13      	ldr	r7, [pc, #76]	; (5464 <trx_sram_write+0x164>)
    5418:	803a      	strh	r2, [r7, #0]
    541a:	e003      	b.n	5424 <trx_sram_write+0x124>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    541c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    541e:	b2d2      	uxtb	r2, r2
    5420:	4f10      	ldr	r7, [pc, #64]	; (5464 <trx_sram_write+0x164>)
    5422:	803a      	strh	r2, [r7, #0]
    5424:	3001      	adds	r0, #1
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    5426:	3c01      	subs	r4, #1
    5428:	b2e4      	uxtb	r4, r4
    542a:	2cff      	cmp	r4, #255	; 0xff
    542c:	d1d8      	bne.n	53e0 <trx_sram_write+0xe0>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    542e:	2200      	movs	r2, #0
    5430:	490a      	ldr	r1, [pc, #40]	; (545c <trx_sram_write+0x15c>)
    5432:	4809      	ldr	r0, [pc, #36]	; (5458 <trx_sram_write+0x158>)
    5434:	4b0a      	ldr	r3, [pc, #40]	; (5460 <trx_sram_write+0x160>)
    5436:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    5438:	23ff      	movs	r3, #255	; 0xff
    543a:	4642      	mov	r2, r8
    543c:	4213      	tst	r3, r2
    543e:	d005      	beq.n	544c <trx_sram_write+0x14c>
		cpu_irq_enable();
    5440:	2201      	movs	r2, #1
    5442:	4b04      	ldr	r3, [pc, #16]	; (5454 <trx_sram_write+0x154>)
    5444:	701a      	strb	r2, [r3, #0]
    5446:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    544a:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    544c:	b002      	add	sp, #8
    544e:	bc04      	pop	{r2}
    5450:	4690      	mov	r8, r2
    5452:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5454:	20000034 	.word	0x20000034
    5458:	200008bc 	.word	0x200008bc
    545c:	20000880 	.word	0x20000880
    5460:	00003581 	.word	0x00003581
    5464:	20000878 	.word	0x20000878

00005468 <trx_sram_read>:
 * @param[in] addr Start address in SRAM for read operation
 * @param[out] data Pointer to the location where data stored
 * @param[in] length Number of bytes to be read from SRAM
 */
void trx_sram_read(uint8_t addr, uint8_t *data, uint8_t length)
{
    5468:	b5f0      	push	{r4, r5, r6, r7, lr}
    546a:	4657      	mov	r7, sl
    546c:	464e      	mov	r6, r9
    546e:	4645      	mov	r5, r8
    5470:	b4e0      	push	{r5, r6, r7}
    5472:	b082      	sub	sp, #8
    5474:	0004      	movs	r4, r0
    5476:	000d      	movs	r5, r1
    5478:	0017      	movs	r7, r2
	delay_us(1); /* wap_rf4ce */
    547a:	2001      	movs	r0, #1
    547c:	4b56      	ldr	r3, [pc, #344]	; (55d8 <trx_sram_read+0x170>)
    547e:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5480:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    5484:	425a      	negs	r2, r3
    5486:	4153      	adcs	r3, r2
    5488:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    548a:	b672      	cpsid	i
    548c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    5490:	2200      	movs	r2, #0
    5492:	4b52      	ldr	r3, [pc, #328]	; (55dc <trx_sram_read+0x174>)
    5494:	701a      	strb	r2, [r3, #0]
	return flags;
    5496:	9b01      	ldr	r3, [sp, #4]
    5498:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    549a:	4e51      	ldr	r6, [pc, #324]	; (55e0 <trx_sram_read+0x178>)
    549c:	3201      	adds	r2, #1
    549e:	4951      	ldr	r1, [pc, #324]	; (55e4 <trx_sram_read+0x17c>)
    54a0:	0030      	movs	r0, r6
    54a2:	4b51      	ldr	r3, [pc, #324]	; (55e8 <trx_sram_read+0x180>)
    54a4:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    54a6:	6833      	ldr	r3, [r6, #0]

	temp = TRX_CMD_SR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    54a8:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    54aa:	7e1a      	ldrb	r2, [r3, #24]
    54ac:	420a      	tst	r2, r1
    54ae:	d0fc      	beq.n	54aa <trx_sram_read+0x42>
    54b0:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    54b2:	07d2      	lsls	r2, r2, #31
    54b4:	d501      	bpl.n	54ba <trx_sram_read+0x52>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    54b6:	2200      	movs	r2, #0
    54b8:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    54ba:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    54bc:	7e1a      	ldrb	r2, [r3, #24]
    54be:	420a      	tst	r2, r1
    54c0:	d0fc      	beq.n	54bc <trx_sram_read+0x54>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    54c2:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    54c4:	7e1a      	ldrb	r2, [r3, #24]
    54c6:	420a      	tst	r2, r1
    54c8:	d0fc      	beq.n	54c4 <trx_sram_read+0x5c>
    54ca:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    54cc:	0752      	lsls	r2, r2, #29
    54ce:	d512      	bpl.n	54f6 <trx_sram_read+0x8e>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    54d0:	8b5a      	ldrh	r2, [r3, #26]
    54d2:	0752      	lsls	r2, r2, #29
    54d4:	d501      	bpl.n	54da <trx_sram_read+0x72>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    54d6:	2204      	movs	r2, #4
    54d8:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    54da:	4a41      	ldr	r2, [pc, #260]	; (55e0 <trx_sram_read+0x178>)
    54dc:	7992      	ldrb	r2, [r2, #6]
    54de:	2a01      	cmp	r2, #1
    54e0:	d105      	bne.n	54ee <trx_sram_read+0x86>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    54e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    54e4:	05d2      	lsls	r2, r2, #23
    54e6:	0dd2      	lsrs	r2, r2, #23
    54e8:	4940      	ldr	r1, [pc, #256]	; (55ec <trx_sram_read+0x184>)
    54ea:	800a      	strh	r2, [r1, #0]
    54ec:	e003      	b.n	54f6 <trx_sram_read+0x8e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    54ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    54f0:	b2d2      	uxtb	r2, r2
    54f2:	493e      	ldr	r1, [pc, #248]	; (55ec <trx_sram_read+0x184>)
    54f4:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the read operation should start */
	while (!spi_is_ready_to_write(&master)) {
    54f6:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    54f8:	7e1a      	ldrb	r2, [r3, #24]
    54fa:	420a      	tst	r2, r1
    54fc:	d0fc      	beq.n	54f8 <trx_sram_read+0x90>
    54fe:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    5500:	07d2      	lsls	r2, r2, #31
    5502:	d500      	bpl.n	5506 <trx_sram_read+0x9e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5504:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    5506:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5508:	7e1a      	ldrb	r2, [r3, #24]
    550a:	420a      	tst	r2, r1
    550c:	d0fc      	beq.n	5508 <trx_sram_read+0xa0>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    550e:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5510:	7e1a      	ldrb	r2, [r3, #24]
    5512:	420a      	tst	r2, r1
    5514:	d0fc      	beq.n	5510 <trx_sram_read+0xa8>
    5516:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    5518:	0752      	lsls	r2, r2, #29
    551a:	d512      	bpl.n	5542 <trx_sram_read+0xda>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    551c:	8b5a      	ldrh	r2, [r3, #26]
    551e:	0752      	lsls	r2, r2, #29
    5520:	d501      	bpl.n	5526 <trx_sram_read+0xbe>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5522:	2204      	movs	r2, #4
    5524:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5526:	4a2e      	ldr	r2, [pc, #184]	; (55e0 <trx_sram_read+0x178>)
    5528:	7992      	ldrb	r2, [r2, #6]
    552a:	2a01      	cmp	r2, #1
    552c:	d105      	bne.n	553a <trx_sram_read+0xd2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    552e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5530:	05db      	lsls	r3, r3, #23
    5532:	0ddb      	lsrs	r3, r3, #23
    5534:	4a2d      	ldr	r2, [pc, #180]	; (55ec <trx_sram_read+0x184>)
    5536:	8013      	strh	r3, [r2, #0]
    5538:	e003      	b.n	5542 <trx_sram_read+0xda>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    553a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    553c:	b2db      	uxtb	r3, r3
    553e:	4a2b      	ldr	r2, [pc, #172]	; (55ec <trx_sram_read+0x184>)
    5540:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    5542:	1e7b      	subs	r3, r7, #1
    5544:	b2db      	uxtb	r3, r3
    5546:	2f00      	cmp	r7, #0
    5548:	d030      	beq.n	55ac <trx_sram_read+0x144>
    554a:	3301      	adds	r3, #1
    554c:	469c      	mov	ip, r3
    554e:	44ac      	add	ip, r5
    5550:	2700      	movs	r7, #0
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5552:	4e23      	ldr	r6, [pc, #140]	; (55e0 <trx_sram_read+0x178>)
		while (!spi_is_ready_to_write(&master)) {
    5554:	2001      	movs	r0, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5556:	2300      	movs	r3, #0
    5558:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    555a:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    555c:	2104      	movs	r1, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    555e:	46b1      	mov	r9, r6
    5560:	e022      	b.n	55a8 <trx_sram_read+0x140>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5562:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    5564:	4202      	tst	r2, r0
    5566:	d0fc      	beq.n	5562 <trx_sram_read+0xfa>
    5568:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    556a:	4202      	tst	r2, r0
    556c:	d001      	beq.n	5572 <trx_sram_read+0x10a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    556e:	4652      	mov	r2, sl
    5570:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5572:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    5574:	4222      	tst	r2, r4
    5576:	d0fc      	beq.n	5572 <trx_sram_read+0x10a>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5578:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    557a:	420a      	tst	r2, r1
    557c:	d0fc      	beq.n	5578 <trx_sram_read+0x110>
    557e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    5580:	420a      	tst	r2, r1
    5582:	d00d      	beq.n	55a0 <trx_sram_read+0x138>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5584:	8b5a      	ldrh	r2, [r3, #26]
    5586:	420a      	tst	r2, r1
    5588:	d000      	beq.n	558c <trx_sram_read+0x124>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    558a:	8359      	strh	r1, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    558c:	464a      	mov	r2, r9
    558e:	7992      	ldrb	r2, [r2, #6]
    5590:	2a01      	cmp	r2, #1
    5592:	d103      	bne.n	559c <trx_sram_read+0x134>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5594:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    5596:	05ff      	lsls	r7, r7, #23
    5598:	0dff      	lsrs	r7, r7, #23
    559a:	e001      	b.n	55a0 <trx_sram_read+0x138>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    559c:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    559e:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    55a0:	702f      	strb	r7, [r5, #0]
		data++;
    55a2:	3501      	adds	r5, #1
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    55a4:	45ac      	cmp	ip, r5
    55a6:	d001      	beq.n	55ac <trx_sram_read+0x144>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    55a8:	6833      	ldr	r3, [r6, #0]
    55aa:	e7da      	b.n	5562 <trx_sram_read+0xfa>
		*data = temp;
		data++;
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    55ac:	2200      	movs	r2, #0
    55ae:	490d      	ldr	r1, [pc, #52]	; (55e4 <trx_sram_read+0x17c>)
    55b0:	480b      	ldr	r0, [pc, #44]	; (55e0 <trx_sram_read+0x178>)
    55b2:	4b0d      	ldr	r3, [pc, #52]	; (55e8 <trx_sram_read+0x180>)
    55b4:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    55b6:	23ff      	movs	r3, #255	; 0xff
    55b8:	4642      	mov	r2, r8
    55ba:	4213      	tst	r3, r2
    55bc:	d005      	beq.n	55ca <trx_sram_read+0x162>
		cpu_irq_enable();
    55be:	2201      	movs	r2, #1
    55c0:	4b06      	ldr	r3, [pc, #24]	; (55dc <trx_sram_read+0x174>)
    55c2:	701a      	strb	r2, [r3, #0]
    55c4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    55c8:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    55ca:	b002      	add	sp, #8
    55cc:	bc1c      	pop	{r2, r3, r4}
    55ce:	4690      	mov	r8, r2
    55d0:	4699      	mov	r9, r3
    55d2:	46a2      	mov	sl, r4
    55d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    55d6:	46c0      	nop			; (mov r8, r8)
    55d8:	000029b5 	.word	0x000029b5
    55dc:	20000034 	.word	0x20000034
    55e0:	200008bc 	.word	0x200008bc
    55e4:	20000880 	.word	0x20000880
    55e8:	00003581 	.word	0x00003581
    55ec:	20000878 	.word	0x20000878

000055f0 <trx_aes_wrrd>:
 * @param addr Start address in the SRAM for the write operation
 * @param idata Pointer to the data written/read into/from SRAM
 * @param length Number of bytes written/read into/from SRAM
 */
void trx_aes_wrrd(uint8_t addr, uint8_t *idata, uint8_t length)
{
    55f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    55f2:	4657      	mov	r7, sl
    55f4:	464e      	mov	r6, r9
    55f6:	4645      	mov	r5, r8
    55f8:	b4e0      	push	{r5, r6, r7}
    55fa:	0006      	movs	r6, r0
    55fc:	468a      	mov	sl, r1
    55fe:	0014      	movs	r4, r2
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t odata_var = 0;
#endif
	uint8_t temp;

	delay_us(1); /* wap_rf4ce */
    5600:	2001      	movs	r0, #1
    5602:	4b76      	ldr	r3, [pc, #472]	; (57dc <trx_aes_wrrd+0x1ec>)
    5604:	4798      	blx	r3

	ENTER_TRX_REGION();
    5606:	2100      	movs	r1, #0
    5608:	2000      	movs	r0, #0
    560a:	4b75      	ldr	r3, [pc, #468]	; (57e0 <trx_aes_wrrd+0x1f0>)
    560c:	4798      	blx	r3
		/* wait until SPI gets available */
	}
#endif
#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    560e:	4f75      	ldr	r7, [pc, #468]	; (57e4 <trx_aes_wrrd+0x1f4>)
    5610:	2201      	movs	r2, #1
    5612:	4975      	ldr	r1, [pc, #468]	; (57e8 <trx_aes_wrrd+0x1f8>)
    5614:	0038      	movs	r0, r7
    5616:	4b75      	ldr	r3, [pc, #468]	; (57ec <trx_aes_wrrd+0x1fc>)
    5618:	4798      	blx	r3
    561a:	683b      	ldr	r3, [r7, #0]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	while (!spi_is_ready_to_write(&master)) {
    561c:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    561e:	7e1a      	ldrb	r2, [r3, #24]
    5620:	420a      	tst	r2, r1
    5622:	d0fc      	beq.n	561e <trx_aes_wrrd+0x2e>
    5624:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    5626:	07d2      	lsls	r2, r2, #31
    5628:	d501      	bpl.n	562e <trx_aes_wrrd+0x3e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    562a:	2240      	movs	r2, #64	; 0x40
    562c:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    562e:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5630:	7e1a      	ldrb	r2, [r3, #24]
    5632:	420a      	tst	r2, r1
    5634:	d0fc      	beq.n	5630 <trx_aes_wrrd+0x40>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    5636:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5638:	7e1a      	ldrb	r2, [r3, #24]
    563a:	420a      	tst	r2, r1
    563c:	d0fc      	beq.n	5638 <trx_aes_wrrd+0x48>
    563e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    5640:	0752      	lsls	r2, r2, #29
    5642:	d512      	bpl.n	566a <trx_aes_wrrd+0x7a>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5644:	8b5a      	ldrh	r2, [r3, #26]
    5646:	0752      	lsls	r2, r2, #29
    5648:	d501      	bpl.n	564e <trx_aes_wrrd+0x5e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    564a:	2204      	movs	r2, #4
    564c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    564e:	4a65      	ldr	r2, [pc, #404]	; (57e4 <trx_aes_wrrd+0x1f4>)
    5650:	7992      	ldrb	r2, [r2, #6]
    5652:	2a01      	cmp	r2, #1
    5654:	d105      	bne.n	5662 <trx_aes_wrrd+0x72>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5656:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5658:	05d2      	lsls	r2, r2, #23
    565a:	0dd2      	lsrs	r2, r2, #23
    565c:	4964      	ldr	r1, [pc, #400]	; (57f0 <trx_aes_wrrd+0x200>)
    565e:	800a      	strh	r2, [r1, #0]
    5660:	e003      	b.n	566a <trx_aes_wrrd+0x7a>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5662:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5664:	b2d2      	uxtb	r2, r2
    5666:	4962      	ldr	r1, [pc, #392]	; (57f0 <trx_aes_wrrd+0x200>)
    5668:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* write SRAM start address */
	while (!spi_is_ready_to_write(&master)) {
    566a:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    566c:	7e1a      	ldrb	r2, [r3, #24]
    566e:	420a      	tst	r2, r1
    5670:	d0fc      	beq.n	566c <trx_aes_wrrd+0x7c>
    5672:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    5674:	07d2      	lsls	r2, r2, #31
    5676:	d500      	bpl.n	567a <trx_aes_wrrd+0x8a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5678:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    567a:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    567c:	7e1a      	ldrb	r2, [r3, #24]
    567e:	420a      	tst	r2, r1
    5680:	d0fc      	beq.n	567c <trx_aes_wrrd+0x8c>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    5682:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5684:	7e1a      	ldrb	r2, [r3, #24]
    5686:	420a      	tst	r2, r1
    5688:	d0fc      	beq.n	5684 <trx_aes_wrrd+0x94>
    568a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    568c:	0752      	lsls	r2, r2, #29
    568e:	d512      	bpl.n	56b6 <trx_aes_wrrd+0xc6>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5690:	8b5a      	ldrh	r2, [r3, #26]
    5692:	0752      	lsls	r2, r2, #29
    5694:	d501      	bpl.n	569a <trx_aes_wrrd+0xaa>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5696:	2204      	movs	r2, #4
    5698:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    569a:	4a52      	ldr	r2, [pc, #328]	; (57e4 <trx_aes_wrrd+0x1f4>)
    569c:	7992      	ldrb	r2, [r2, #6]
    569e:	2a01      	cmp	r2, #1
    56a0:	d105      	bne.n	56ae <trx_aes_wrrd+0xbe>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    56a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    56a4:	05d2      	lsls	r2, r2, #23
    56a6:	0dd2      	lsrs	r2, r2, #23
    56a8:	4951      	ldr	r1, [pc, #324]	; (57f0 <trx_aes_wrrd+0x200>)
    56aa:	800a      	strh	r2, [r1, #0]
    56ac:	e003      	b.n	56b6 <trx_aes_wrrd+0xc6>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    56ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    56b0:	b2d2      	uxtb	r2, r2
    56b2:	494f      	ldr	r1, [pc, #316]	; (57f0 <trx_aes_wrrd+0x200>)
    56b4:	800a      	strh	r2, [r1, #0]

	/* now transfer data */
	odata = idata;

	/* write data byte 0 - the obtained value in SPDR is meaningless */
	while (!spi_is_ready_to_write(&master)) {
    56b6:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    56b8:	7e1a      	ldrb	r2, [r3, #24]
    56ba:	420a      	tst	r2, r1
    56bc:	d0fc      	beq.n	56b8 <trx_aes_wrrd+0xc8>
    56be:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    56c0:	07d2      	lsls	r2, r2, #31
    56c2:	d502      	bpl.n	56ca <trx_aes_wrrd+0xda>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    56c4:	4652      	mov	r2, sl
    56c6:	7812      	ldrb	r2, [r2, #0]
    56c8:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, *idata++);
	while (!spi_is_write_complete(&master)) {
    56ca:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    56cc:	7e1a      	ldrb	r2, [r3, #24]
    56ce:	420a      	tst	r2, r1
    56d0:	d0fc      	beq.n	56cc <trx_aes_wrrd+0xdc>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    56d2:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    56d4:	7e1a      	ldrb	r2, [r3, #24]
    56d6:	420a      	tst	r2, r1
    56d8:	d0fc      	beq.n	56d4 <trx_aes_wrrd+0xe4>
    56da:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    56dc:	0752      	lsls	r2, r2, #29
    56de:	d512      	bpl.n	5706 <trx_aes_wrrd+0x116>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    56e0:	8b5a      	ldrh	r2, [r3, #26]
    56e2:	0752      	lsls	r2, r2, #29
    56e4:	d501      	bpl.n	56ea <trx_aes_wrrd+0xfa>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    56e6:	2204      	movs	r2, #4
    56e8:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    56ea:	4a3e      	ldr	r2, [pc, #248]	; (57e4 <trx_aes_wrrd+0x1f4>)
    56ec:	7992      	ldrb	r2, [r2, #6]
    56ee:	2a01      	cmp	r2, #1
    56f0:	d105      	bne.n	56fe <trx_aes_wrrd+0x10e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    56f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    56f4:	05db      	lsls	r3, r3, #23
    56f6:	0ddb      	lsrs	r3, r3, #23
    56f8:	4a3d      	ldr	r2, [pc, #244]	; (57f0 <trx_aes_wrrd+0x200>)
    56fa:	8013      	strh	r3, [r2, #0]
    56fc:	e003      	b.n	5706 <trx_aes_wrrd+0x116>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    56fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5700:	b2db      	uxtb	r3, r3
    5702:	4a3b      	ldr	r2, [pc, #236]	; (57f0 <trx_aes_wrrd+0x200>)
    5704:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    5706:	2c00      	cmp	r4, #0
    5708:	d031      	beq.n	576e <trx_aes_wrrd+0x17e>
    570a:	4656      	mov	r6, sl
    570c:	3c01      	subs	r4, #1
    570e:	b2e4      	uxtb	r4, r4
    5710:	3401      	adds	r4, #1
    5712:	44a2      	add	sl, r4
    5714:	46d0      	mov	r8, sl
    5716:	2700      	movs	r7, #0
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5718:	4d32      	ldr	r5, [pc, #200]	; (57e4 <trx_aes_wrrd+0x1f4>)
		while (!spi_is_ready_to_write(&master)) {
    571a:	2001      	movs	r0, #1
		}
		spi_write(&master, *idata++);
		while (!spi_is_write_complete(&master)) {
    571c:	2402      	movs	r4, #2
		}
		while (!spi_is_ready_to_read(&master)) {
    571e:	2104      	movs	r1, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5720:	46a9      	mov	r9, r5
    5722:	e022      	b.n	576a <trx_aes_wrrd+0x17a>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5724:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
		while (!spi_is_ready_to_write(&master)) {
    5726:	4202      	tst	r2, r0
    5728:	d0fc      	beq.n	5724 <trx_aes_wrrd+0x134>
    572a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    572c:	4202      	tst	r2, r0
    572e:	d001      	beq.n	5734 <trx_aes_wrrd+0x144>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5730:	7872      	ldrb	r2, [r6, #1]
    5732:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5734:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, *idata++);
		while (!spi_is_write_complete(&master)) {
    5736:	4222      	tst	r2, r4
    5738:	d0fc      	beq.n	5734 <trx_aes_wrrd+0x144>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    573a:	7e1a      	ldrb	r2, [r3, #24]
		}
		while (!spi_is_ready_to_read(&master)) {
    573c:	420a      	tst	r2, r1
    573e:	d0fc      	beq.n	573a <trx_aes_wrrd+0x14a>
    5740:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    5742:	420a      	tst	r2, r1
    5744:	d00d      	beq.n	5762 <trx_aes_wrrd+0x172>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5746:	8b5a      	ldrh	r2, [r3, #26]
    5748:	420a      	tst	r2, r1
    574a:	d000      	beq.n	574e <trx_aes_wrrd+0x15e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    574c:	8359      	strh	r1, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    574e:	464a      	mov	r2, r9
    5750:	7992      	ldrb	r2, [r2, #6]
    5752:	2a01      	cmp	r2, #1
    5754:	d103      	bne.n	575e <trx_aes_wrrd+0x16e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5756:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    5758:	05ff      	lsls	r7, r7, #23
    575a:	0dff      	lsrs	r7, r7, #23
    575c:	e001      	b.n	5762 <trx_aes_wrrd+0x172>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    575e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    5760:	b2ff      	uxtb	r7, r7
		}

#if SAMD || SAMR21 || SAML21 || SAMR30
		spi_read(&master, &odata_var);
		*odata++ = (uint8_t)odata_var;
    5762:	7037      	strb	r7, [r6, #0]
    5764:	3601      	adds	r6, #1
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    5766:	4546      	cmp	r6, r8
    5768:	d002      	beq.n	5770 <trx_aes_wrrd+0x180>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    576a:	682b      	ldr	r3, [r5, #0]
    576c:	e7da      	b.n	5724 <trx_aes_wrrd+0x134>
    576e:	2700      	movs	r7, #0
    5770:	4b1c      	ldr	r3, [pc, #112]	; (57e4 <trx_aes_wrrd+0x1f4>)
    5772:	681b      	ldr	r3, [r3, #0]
#endif
		length--;
	}

	/* To get the last data byte, write some dummy byte */
	while (!spi_is_ready_to_write(&master)) {
    5774:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5776:	7e1a      	ldrb	r2, [r3, #24]
    5778:	420a      	tst	r2, r1
    577a:	d0fc      	beq.n	5776 <trx_aes_wrrd+0x186>
    577c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    577e:	07d2      	lsls	r2, r2, #31
    5780:	d501      	bpl.n	5786 <trx_aes_wrrd+0x196>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5782:	2200      	movs	r2, #0
    5784:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    5786:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5788:	7e1a      	ldrb	r2, [r3, #24]
    578a:	420a      	tst	r2, r1
    578c:	d0fc      	beq.n	5788 <trx_aes_wrrd+0x198>
	}
	while (!spi_is_ready_to_read(&master)) {
    578e:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5790:	7e1a      	ldrb	r2, [r3, #24]
    5792:	420a      	tst	r2, r1
    5794:	d0fc      	beq.n	5790 <trx_aes_wrrd+0x1a0>
    5796:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    5798:	0752      	lsls	r2, r2, #29
    579a:	d50e      	bpl.n	57ba <trx_aes_wrrd+0x1ca>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    579c:	8b5a      	ldrh	r2, [r3, #26]
    579e:	0752      	lsls	r2, r2, #29
    57a0:	d501      	bpl.n	57a6 <trx_aes_wrrd+0x1b6>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    57a2:	2204      	movs	r2, #4
    57a4:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    57a6:	4a0f      	ldr	r2, [pc, #60]	; (57e4 <trx_aes_wrrd+0x1f4>)
    57a8:	7992      	ldrb	r2, [r2, #6]
    57aa:	2a01      	cmp	r2, #1
    57ac:	d103      	bne.n	57b6 <trx_aes_wrrd+0x1c6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    57ae:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    57b0:	05ff      	lsls	r7, r7, #23
    57b2:	0dff      	lsrs	r7, r7, #23
    57b4:	e001      	b.n	57ba <trx_aes_wrrd+0x1ca>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    57b6:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    57b8:	b2ff      	uxtb	r7, r7
	}
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_read(&master, &odata_var);
	*odata = (uint8_t)odata_var;
    57ba:	4653      	mov	r3, sl
    57bc:	701f      	strb	r7, [r3, #0]
#else
	spi_read(&master, (uint16_t *)odata);
#endif

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    57be:	2200      	movs	r2, #0
    57c0:	4909      	ldr	r1, [pc, #36]	; (57e8 <trx_aes_wrrd+0x1f8>)
    57c2:	4808      	ldr	r0, [pc, #32]	; (57e4 <trx_aes_wrrd+0x1f4>)
    57c4:	4b09      	ldr	r3, [pc, #36]	; (57ec <trx_aes_wrrd+0x1fc>)
    57c6:	4798      	blx	r3
	spi_read_packet(AT86RFX_SPI, odata, 1);

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	LEAVE_TRX_REGION();
    57c8:	2100      	movs	r1, #0
    57ca:	2000      	movs	r0, #0
    57cc:	4b09      	ldr	r3, [pc, #36]	; (57f4 <trx_aes_wrrd+0x204>)
    57ce:	4798      	blx	r3
}
    57d0:	bc1c      	pop	{r2, r3, r4}
    57d2:	4690      	mov	r8, r2
    57d4:	4699      	mov	r9, r3
    57d6:	46a2      	mov	sl, r4
    57d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    57da:	46c0      	nop			; (mov r8, r8)
    57dc:	000029b5 	.word	0x000029b5
    57e0:	00002c01 	.word	0x00002c01
    57e4:	200008bc 	.word	0x200008bc
    57e8:	20000880 	.word	0x20000880
    57ec:	00003581 	.word	0x00003581
    57f0:	20000878 	.word	0x20000878
    57f4:	00002be1 	.word	0x00002be1

000057f8 <main>:
}



int main(void)
{	
    57f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    57fa:	465f      	mov	r7, fp
    57fc:	4656      	mov	r6, sl
    57fe:	464d      	mov	r5, r9
    5800:	4644      	mov	r4, r8
    5802:	b4f0      	push	{r4, r5, r6, r7}
    5804:	b089      	sub	sp, #36	; 0x24
	uint8_t i , TxCount , button_press;
	uint8_t connection_index , TxSynCount2 = 0;
	MIWI_TICK t1 , t2;
	// Hardware Init
	system_init();
    5806:	4b8a      	ldr	r3, [pc, #552]	; (5a30 <main+0x238>)
    5808:	4798      	blx	r3
	gfx_mono_init();
    580a:	4b8a      	ldr	r3, [pc, #552]	; (5a34 <main+0x23c>)
    580c:	4798      	blx	r3
	delay_init();
    580e:	4b8a      	ldr	r3, [pc, #552]	; (5a38 <main+0x240>)
    5810:	4798      	blx	r3
	sio2host_init();
    5812:	4b8a      	ldr	r3, [pc, #552]	; (5a3c <main+0x244>)
    5814:	4798      	blx	r3
	configure_tc();
    5816:	4b8a      	ldr	r3, [pc, #552]	; (5a40 <main+0x248>)
    5818:	4798      	blx	r3
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
	config->powersave  = false;
    581a:	2200      	movs	r2, #0
    581c:	ab07      	add	r3, sp, #28
    581e:	709a      	strb	r2, [r3, #2]
{
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);

	port_pin_set_output_level(oled1->led0_pin, !OLED1_LED_ACTIVE);
    5820:	4b88      	ldr	r3, [pc, #544]	; (5a44 <main+0x24c>)
    5822:	7818      	ldrb	r0, [r3, #0]
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
    5824:	09c3      	lsrs	r3, r0, #7
    5826:	469a      	mov	sl, r3
	uint8_t group_index = (gpio_pin / 32);
    5828:	0947      	lsrs	r7, r0, #5

	if (port_index < PORT_INST_NUM) {
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    582a:	2300      	movs	r3, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    582c:	4652      	mov	r2, sl
    582e:	2a00      	cmp	r2, #0
    5830:	d103      	bne.n	583a <main+0x42>
		return &(ports[port_index]->Group[group_index]);
    5832:	01fb      	lsls	r3, r7, #7
    5834:	4a84      	ldr	r2, [pc, #528]	; (5a48 <main+0x250>)
    5836:	4694      	mov	ip, r2
    5838:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    583a:	221f      	movs	r2, #31
    583c:	4002      	ands	r2, r0
    583e:	2601      	movs	r6, #1
    5840:	4096      	lsls	r6, r2

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    5842:	619e      	str	r6, [r3, #24]
	port_pin_set_output_level(oled1->led1_pin, !OLED1_LED_ACTIVE);
    5844:	4b7f      	ldr	r3, [pc, #508]	; (5a44 <main+0x24c>)
    5846:	785b      	ldrb	r3, [r3, #1]
    5848:	4699      	mov	r9, r3
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
    584a:	09db      	lsrs	r3, r3, #7
    584c:	469b      	mov	fp, r3
	uint8_t group_index = (gpio_pin / 32);
    584e:	464b      	mov	r3, r9
    5850:	095b      	lsrs	r3, r3, #5
    5852:	001a      	movs	r2, r3
    5854:	9301      	str	r3, [sp, #4]

	if (port_index < PORT_INST_NUM) {
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    5856:	2300      	movs	r3, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    5858:	4659      	mov	r1, fp
    585a:	2900      	cmp	r1, #0
    585c:	d103      	bne.n	5866 <main+0x6e>
		return &(ports[port_index]->Group[group_index]);
    585e:	01d3      	lsls	r3, r2, #7
    5860:	4a79      	ldr	r2, [pc, #484]	; (5a48 <main+0x250>)
    5862:	4694      	mov	ip, r2
    5864:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5866:	221f      	movs	r2, #31
    5868:	4649      	mov	r1, r9
    586a:	400a      	ands	r2, r1
    586c:	2101      	movs	r1, #1
    586e:	4091      	lsls	r1, r2
    5870:	9102      	str	r1, [sp, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    5872:	6199      	str	r1, [r3, #24]
	port_pin_set_output_level(oled1->led2_pin, !OLED1_LED_ACTIVE);
    5874:	4b73      	ldr	r3, [pc, #460]	; (5a44 <main+0x24c>)
    5876:	789b      	ldrb	r3, [r3, #2]
    5878:	4698      	mov	r8, r3
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
    587a:	09db      	lsrs	r3, r3, #7
    587c:	001a      	movs	r2, r3
    587e:	9303      	str	r3, [sp, #12]
	uint8_t group_index = (gpio_pin / 32);
    5880:	4643      	mov	r3, r8
    5882:	095b      	lsrs	r3, r3, #5
    5884:	0019      	movs	r1, r3
    5886:	9304      	str	r3, [sp, #16]

	if (port_index < PORT_INST_NUM) {
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    5888:	2300      	movs	r3, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    588a:	2a00      	cmp	r2, #0
    588c:	d103      	bne.n	5896 <main+0x9e>
		return &(ports[port_index]->Group[group_index]);
    588e:	01cb      	lsls	r3, r1, #7
    5890:	4a6d      	ldr	r2, [pc, #436]	; (5a48 <main+0x250>)
    5892:	4694      	mov	ip, r2
    5894:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5896:	221f      	movs	r2, #31
    5898:	4641      	mov	r1, r8
    589a:	400a      	ands	r2, r1
    589c:	2101      	movs	r1, #1
    589e:	4091      	lsls	r1, r2
    58a0:	9105      	str	r1, [sp, #20]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    58a2:	6199      	str	r1, [r3, #24]

	pin_conf.direction  = PORT_PIN_DIR_OUTPUT_WTH_READBACK;
    58a4:	ac07      	add	r4, sp, #28
    58a6:	2302      	movs	r3, #2
    58a8:	7023      	strb	r3, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    58aa:	2300      	movs	r3, #0
    58ac:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(oled1->led0_pin, &pin_conf);
    58ae:	0021      	movs	r1, r4
    58b0:	4d66      	ldr	r5, [pc, #408]	; (5a4c <main+0x254>)
    58b2:	47a8      	blx	r5
	port_pin_set_config(oled1->led1_pin, &pin_conf);
    58b4:	0021      	movs	r1, r4
    58b6:	4648      	mov	r0, r9
    58b8:	47a8      	blx	r5
	port_pin_set_config(oled1->led2_pin, &pin_conf);
    58ba:	0021      	movs	r1, r4
    58bc:	4640      	mov	r0, r8
    58be:	47a8      	blx	r5

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    58c0:	2300      	movs	r3, #0
    58c2:	7023      	strb	r3, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    58c4:	2301      	movs	r3, #1
    58c6:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(oled1->button0_pin, &pin_conf);
    58c8:	4b5e      	ldr	r3, [pc, #376]	; (5a44 <main+0x24c>)
    58ca:	4698      	mov	r8, r3
    58cc:	78d8      	ldrb	r0, [r3, #3]
    58ce:	0021      	movs	r1, r4
    58d0:	47a8      	blx	r5
	port_pin_set_config(oled1->button1_pin, &pin_conf);
    58d2:	4643      	mov	r3, r8
    58d4:	7918      	ldrb	r0, [r3, #4]
    58d6:	0021      	movs	r1, r4
    58d8:	47a8      	blx	r5
	port_pin_set_config(oled1->button2_pin, &pin_conf);
    58da:	4643      	mov	r3, r8
    58dc:	7958      	ldrb	r0, [r3, #5]
    58de:	0021      	movs	r1, r4
    58e0:	47a8      	blx	r5
	} else {
		Assert(false);
		return NULL;
    58e2:	2300      	movs	r3, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    58e4:	4652      	mov	r2, sl
    58e6:	2a00      	cmp	r2, #0
    58e8:	d102      	bne.n	58f0 <main+0xf8>
		return &(ports[port_index]->Group[group_index]);
    58ea:	01ff      	lsls	r7, r7, #7
    58ec:	4b56      	ldr	r3, [pc, #344]	; (5a48 <main+0x250>)
    58ee:	18fb      	adds	r3, r7, r3
    58f0:	619e      	str	r6, [r3, #24]
	} else {
		Assert(false);
		return NULL;
    58f2:	2300      	movs	r3, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    58f4:	465a      	mov	r2, fp
    58f6:	2a00      	cmp	r2, #0
    58f8:	d104      	bne.n	5904 <main+0x10c>
		return &(ports[port_index]->Group[group_index]);
    58fa:	9b01      	ldr	r3, [sp, #4]
    58fc:	01db      	lsls	r3, r3, #7
    58fe:	4a52      	ldr	r2, [pc, #328]	; (5a48 <main+0x250>)
    5900:	4694      	mov	ip, r2
    5902:	4463      	add	r3, ip
    5904:	9a02      	ldr	r2, [sp, #8]
    5906:	619a      	str	r2, [r3, #24]
	} else {
		Assert(false);
		return NULL;
    5908:	2300      	movs	r3, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    590a:	9a03      	ldr	r2, [sp, #12]
    590c:	2a00      	cmp	r2, #0
    590e:	d104      	bne.n	591a <main+0x122>
		return &(ports[port_index]->Group[group_index]);
    5910:	9b04      	ldr	r3, [sp, #16]
    5912:	01db      	lsls	r3, r3, #7
    5914:	4a4c      	ldr	r2, [pc, #304]	; (5a48 <main+0x250>)
    5916:	4694      	mov	ip, r2
    5918:	4463      	add	r3, ip
    591a:	9a05      	ldr	r2, [sp, #20]
    591c:	619a      	str	r2, [r3, #24]
	// LED's OFF 
	oled1_set_led_state(&oled1, OLED1_LED1_ID, false);
	oled1_set_led_state(&oled1, OLED1_LED2_ID, false);
	oled1_set_led_state(&oled1, OLED1_LED3_ID, false);
	
	Display_Startup_Message();
    591e:	4b4c      	ldr	r3, [pc, #304]	; (5a50 <main+0x258>)
    5920:	4798      	blx	r3
	// Function MiApp_ProtocolInit initialize the protocol stack. The
	// only input parameter indicates if previous network configuration
	// should be restored. In this simple example, we assume that the
	// network starts from scratch.
	/*******************************************************************/
	MiApp_ProtocolInit(false);
    5922:	2000      	movs	r0, #0
    5924:	4b4b      	ldr	r3, [pc, #300]	; (5a54 <main+0x25c>)
    5926:	4798      	blx	r3
	// Set the Channel 
	MiApp_SetChannel(APP_CHANNEL_SEL);
    5928:	2019      	movs	r0, #25
    592a:	4b4b      	ldr	r3, [pc, #300]	; (5a58 <main+0x260>)
    592c:	4798      	blx	r3
	//  ENABLE_PREV_CONN:   Only allow connection already exists in
	//                      connection table
	//  ENABL_ACTIVE_SCAN_RSP:  Allow response to Active scan
	//  DISABLE_ALL_CONN:   Disable all connections.
	/*******************************************************************/
	MiApp_ConnectionMode(ENABLE_ALL_CONN);
    592e:	2000      	movs	r0, #0
    5930:	4b4a      	ldr	r3, [pc, #296]	; (5a5c <main+0x264>)
    5932:	4798      	blx	r3
	// Enable Transceiver Interrupt 
	ENABLE_TRX_IRQ();
    5934:	2100      	movs	r1, #0
    5936:	2000      	movs	r0, #0
    5938:	4b49      	ldr	r3, [pc, #292]	; (5a60 <main+0x268>)
    593a:	4798      	blx	r3
	// Enable All cpu interrupts 
	cpu_irq_enable();
    593c:	2201      	movs	r2, #1
    593e:	4b49      	ldr	r3, [pc, #292]	; (5a64 <main+0x26c>)
    5940:	701a      	strb	r2, [r3, #0]
    5942:	f3bf 8f5f 	dmb	sy
    5946:	b662      	cpsie	i
	// The second parameter is the mode to establish connection,
	//      either direct or indirect. Direct mode means connection
	//      within the radio range; indirect mode means connection
	//      may or may not in the radio range.
	/*******************************************************************/
	connection_index = MiApp_EstablishConnection(0xFF, CONN_MODE_DIRECT);
    5948:	2100      	movs	r1, #0
    594a:	20ff      	movs	r0, #255	; 0xff
    594c:	4b46      	ldr	r3, [pc, #280]	; (5a68 <main+0x270>)
    594e:	4798      	blx	r3
	// if the node is successfully connected to peer device connection_index value will not be equal to 0xFF
	if( connection_index != 0xFF )
    5950:	28ff      	cmp	r0, #255	; 0xff
    5952:	d104      	bne.n	595e <main+0x166>
       //     channel 26. As the result, the bit map is 0x07FFF800. Stack
       //     will filter out all invalid channels, so the application
       //     only needs to pay attention to the channels that are not
	   //     preferred.
	   /*******************************************************************/
		MiApp_StartConnection(START_CONN_DIRECT, SCAN_DURATION, 0);
    5954:	2200      	movs	r2, #0
    5956:	210a      	movs	r1, #10
    5958:	2000      	movs	r0, #0
    595a:	4b44      	ldr	r3, [pc, #272]	; (5a6c <main+0x274>)
    595c:	4798      	blx	r3
	}
	// Led On
	//LED_On(LED0);
	// Current Time
	t1 = MiWi_TickGet();
    595e:	4b44      	ldr	r3, [pc, #272]	; (5a70 <main+0x278>)
    5960:	4798      	blx	r3
    5962:	0005      	movs	r5, r0
	// 1.Check for a received Data Packet  2. Check if button is pressed , if pressed Transmit a Unicast Packet to node indexed at 0
	// 3. Every 5 seconds Transmit a Broadcast type packet
	while (1) {
		// Data Packet Available

		if (MiApp_MessageAvailable())
    5964:	4f43      	ldr	r7, [pc, #268]	; (5a74 <main+0x27c>)
		{
			// if received a data packet toggle led
			LED_Toggle(LED1);
			if (rxMessage.Payload[0] == 0xA1)   // LED Demo
    5966:	4b44      	ldr	r3, [pc, #272]	; (5a78 <main+0x280>)
    5968:	4699      	mov	r9, r3
			{
				LED_Demo_Display (2);
				Start_LED_Blink();
			}
			print_rx_message();
    596a:	4b44      	ldr	r3, [pc, #272]	; (5a7c <main+0x284>)
    596c:	4698      	mov	r8, r3
	// 1.Check for a received Data Packet  2. Check if button is pressed , if pressed Transmit a Unicast Packet to node indexed at 0
	// 3. Every 5 seconds Transmit a Broadcast type packet
	while (1) {
		// Data Packet Available

		if (MiApp_MessageAvailable())
    596e:	47b8      	blx	r7
    5970:	2800      	cmp	r0, #0
    5972:	d010      	beq.n	5996 <main+0x19e>
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    5974:	2280      	movs	r2, #128	; 0x80
    5976:	02d2      	lsls	r2, r2, #11
    5978:	4b33      	ldr	r3, [pc, #204]	; (5a48 <main+0x250>)
    597a:	61da      	str	r2, [r3, #28]
		{
			// if received a data packet toggle led
			LED_Toggle(LED1);
			if (rxMessage.Payload[0] == 0xA1)   // LED Demo
    597c:	464b      	mov	r3, r9
    597e:	689b      	ldr	r3, [r3, #8]
    5980:	781b      	ldrb	r3, [r3, #0]
    5982:	2ba1      	cmp	r3, #161	; 0xa1
    5984:	d104      	bne.n	5990 <main+0x198>
			{
				LED_Demo_Display (2);
    5986:	2002      	movs	r0, #2
    5988:	4b3d      	ldr	r3, [pc, #244]	; (5a80 <main+0x288>)
    598a:	4798      	blx	r3
				Start_LED_Blink();
    598c:	4b3d      	ldr	r3, [pc, #244]	; (5a84 <main+0x28c>)
    598e:	4798      	blx	r3
			}
			print_rx_message();
    5990:	47c0      	blx	r8
			// Function MiApp_DiscardMessage is used to release the current
			//  received packet.
			// After calling this function, the stack can start to process the
			//  next received frame
			/*******************************************************************/
			MiApp_DiscardMessage();
    5992:	4b3d      	ldr	r3, [pc, #244]	; (5a88 <main+0x290>)
    5994:	4798      	blx	r3

		}
		t2 = MiWi_TickGet();
    5996:	4b36      	ldr	r3, [pc, #216]	; (5a70 <main+0x278>)
    5998:	4798      	blx	r3
    599a:	0004      	movs	r4, r0
		button_press = ButtonPressed();
    599c:	4b3b      	ldr	r3, [pc, #236]	; (5a8c <main+0x294>)
    599e:	4798      	blx	r3
		if (button_press == 3)
    59a0:	2803      	cmp	r0, #3
    59a2:	d10a      	bne.n	59ba <main+0x1c2>
		{
			LED_Demo_Display (1);
    59a4:	3802      	subs	r0, #2
    59a6:	4b36      	ldr	r3, [pc, #216]	; (5a80 <main+0x288>)
    59a8:	4798      	blx	r3
			Start_LED_Demo(0);
    59aa:	2000      	movs	r0, #0
    59ac:	4e38      	ldr	r6, [pc, #224]	; (5a90 <main+0x298>)
    59ae:	47b0      	blx	r6
			Start_LED_Demo(1);	
    59b0:	2001      	movs	r0, #1
    59b2:	47b0      	blx	r6
			Start_LED_Demo(2);		
    59b4:	2002      	movs	r0, #2
    59b6:	47b0      	blx	r6
    59b8:	e016      	b.n	59e8 <main+0x1f0>
		}
		else if (button_press == 4)
    59ba:	2804      	cmp	r0, #4
    59bc:	d114      	bne.n	59e8 <main+0x1f0>
		{
			uint8_t failed_packets = 0;
			printf("\r\n Packet Error Rate : %d percent\n", Start_Per(0, 100));
    59be:	2164      	movs	r1, #100	; 0x64
    59c0:	2000      	movs	r0, #0
    59c2:	4b34      	ldr	r3, [pc, #208]	; (5a94 <main+0x29c>)
    59c4:	469b      	mov	fp, r3
    59c6:	4798      	blx	r3
    59c8:	0001      	movs	r1, r0
    59ca:	4833      	ldr	r0, [pc, #204]	; (5a98 <main+0x2a0>)
    59cc:	4e33      	ldr	r6, [pc, #204]	; (5a9c <main+0x2a4>)
    59ce:	47b0      	blx	r6
			printf("\r\n Packet Error Rate : %d percent\n", Start_Per(1, 100));
    59d0:	2164      	movs	r1, #100	; 0x64
    59d2:	2001      	movs	r0, #1
    59d4:	47d8      	blx	fp
    59d6:	0001      	movs	r1, r0
    59d8:	482f      	ldr	r0, [pc, #188]	; (5a98 <main+0x2a0>)
    59da:	47b0      	blx	r6
			printf("\r\n Packet Error Rate : %d percent\n", Start_Per(2, 100));
    59dc:	2164      	movs	r1, #100	; 0x64
    59de:	2002      	movs	r0, #2
    59e0:	47d8      	blx	fp
    59e2:	0001      	movs	r1, r0
    59e4:	482c      	ldr	r0, [pc, #176]	; (5a98 <main+0x2a0>)
    59e6:	47b0      	blx	r6
		}
	
		if( MiWi_TickGetDiff(t2, t1) > (ONE_SECOND * 5) )
    59e8:	0026      	movs	r6, r4
    59ea:	1b64      	subs	r4, r4, r5
    59ec:	2c9b      	cmp	r4, #155	; 0x9b
    59ee:	d9be      	bls.n	596e <main+0x176>
			/*******************************************************************/
			MiApp_FlushTx();
			
			for (i = 0 ; i < 21 ; i++)
			{	//Tx_Buffer User Data
				MiApp_WriteData(MiWi_Data[(TxCount%6)][i]);
    59f0:	2106      	movs	r1, #6
    59f2:	9800      	ldr	r0, [sp, #0]
    59f4:	4b2a      	ldr	r3, [pc, #168]	; (5aa0 <main+0x2a8>)
    59f6:	4798      	blx	r3
    59f8:	b2c9      	uxtb	r1, r1
    59fa:	004a      	lsls	r2, r1, #1
    59fc:	1852      	adds	r2, r2, r1
    59fe:	00d0      	lsls	r0, r2, #3
    5a00:	1a83      	subs	r3, r0, r2
    5a02:	4a28      	ldr	r2, [pc, #160]	; (5aa4 <main+0x2ac>)
    5a04:	18d2      	adds	r2, r2, r3
    5a06:	2300      	movs	r3, #0
    5a08:	4827      	ldr	r0, [pc, #156]	; (5aa8 <main+0x2b0>)
    5a0a:	7811      	ldrb	r1, [r2, #0]
    5a0c:	54c1      	strb	r1, [r0, r3]
    5a0e:	3301      	adds	r3, #1
    5a10:	b2db      	uxtb	r3, r3
    5a12:	3201      	adds	r2, #1
			// the buffer one byte by one byte by calling function
			// MiApp_WriteData
			/*******************************************************************/
			MiApp_FlushTx();
			
			for (i = 0 ; i < 21 ; i++)
    5a14:	2b15      	cmp	r3, #21
    5a16:	d1f8      	bne.n	5a0a <main+0x212>
    5a18:	2215      	movs	r2, #21
    5a1a:	4b24      	ldr	r3, [pc, #144]	; (5aac <main+0x2b4>)
    5a1c:	701a      	strb	r2, [r3, #0]
			{	//Tx_Buffer User Data
				MiApp_WriteData(MiWi_Data[(TxCount%6)][i]);
				//MiApp_WriteData(0);
			}
			TxCount++;
    5a1e:	9b00      	ldr	r3, [sp, #0]
    5a20:	3301      	adds	r3, #1
    5a22:	b2db      	uxtb	r3, r3
    5a24:	9300      	str	r3, [sp, #0]
			//This function broadcast a message in the TxBuffer.
			MiApp_BroadcastPacket(true);
    5a26:	2001      	movs	r0, #1
    5a28:	4b21      	ldr	r3, [pc, #132]	; (5ab0 <main+0x2b8>)
    5a2a:	4798      	blx	r3
			printf("\r\n Packet Error Rate : %d percent\n", Start_Per(0, 100));
			printf("\r\n Packet Error Rate : %d percent\n", Start_Per(1, 100));
			printf("\r\n Packet Error Rate : %d percent\n", Start_Per(2, 100));
		}
	
		if( MiWi_TickGetDiff(t2, t1) > (ONE_SECOND * 5) )
    5a2c:	0035      	movs	r5, r6
    5a2e:	e79e      	b.n	596e <main+0x176>
    5a30:	00004529 	.word	0x00004529
    5a34:	00000611 	.word	0x00000611
    5a38:	00002975 	.word	0x00002975
    5a3c:	00004bc1 	.word	0x00004bc1
    5a40:	000028b1 	.word	0x000028b1
    5a44:	200004ac 	.word	0x200004ac
    5a48:	40002800 	.word	0x40002800
    5a4c:	00002dcd 	.word	0x00002dcd
    5a50:	000026a5 	.word	0x000026a5
    5a54:	00001ead 	.word	0x00001ead
    5a58:	00001e91 	.word	0x00001e91
    5a5c:	00002685 	.word	0x00002685
    5a60:	00002be1 	.word	0x00002be1
    5a64:	20000034 	.word	0x20000034
    5a68:	00002569 	.word	0x00002569
    5a6c:	00001e1d 	.word	0x00001e1d
    5a70:	00002961 	.word	0x00002961
    5a74:	00002551 	.word	0x00002551
    5a78:	200007d8 	.word	0x200007d8
    5a7c:	00000821 	.word	0x00000821
    5a80:	000026c1 	.word	0x000026c1
    5a84:	000008f1 	.word	0x000008f1
    5a88:	00001e75 	.word	0x00001e75
    5a8c:	000006d5 	.word	0x000006d5
    5a90:	000008cd 	.word	0x000008cd
    5a94:	00000935 	.word	0x00000935
    5a98:	0000724c 	.word	0x0000724c
    5a9c:	00005e69 	.word	0x00005e69
    5aa0:	00005bc1 	.word	0x00005bc1
    5aa4:	00007270 	.word	0x00007270
    5aa8:	200007b0 	.word	0x200007b0
    5aac:	20000755 	.word	0x20000755
    5ab0:	00001b29 	.word	0x00001b29

00005ab4 <__aeabi_uidiv>:
    5ab4:	2200      	movs	r2, #0
    5ab6:	0843      	lsrs	r3, r0, #1
    5ab8:	428b      	cmp	r3, r1
    5aba:	d374      	bcc.n	5ba6 <__aeabi_uidiv+0xf2>
    5abc:	0903      	lsrs	r3, r0, #4
    5abe:	428b      	cmp	r3, r1
    5ac0:	d35f      	bcc.n	5b82 <__aeabi_uidiv+0xce>
    5ac2:	0a03      	lsrs	r3, r0, #8
    5ac4:	428b      	cmp	r3, r1
    5ac6:	d344      	bcc.n	5b52 <__aeabi_uidiv+0x9e>
    5ac8:	0b03      	lsrs	r3, r0, #12
    5aca:	428b      	cmp	r3, r1
    5acc:	d328      	bcc.n	5b20 <__aeabi_uidiv+0x6c>
    5ace:	0c03      	lsrs	r3, r0, #16
    5ad0:	428b      	cmp	r3, r1
    5ad2:	d30d      	bcc.n	5af0 <__aeabi_uidiv+0x3c>
    5ad4:	22ff      	movs	r2, #255	; 0xff
    5ad6:	0209      	lsls	r1, r1, #8
    5ad8:	ba12      	rev	r2, r2
    5ada:	0c03      	lsrs	r3, r0, #16
    5adc:	428b      	cmp	r3, r1
    5ade:	d302      	bcc.n	5ae6 <__aeabi_uidiv+0x32>
    5ae0:	1212      	asrs	r2, r2, #8
    5ae2:	0209      	lsls	r1, r1, #8
    5ae4:	d065      	beq.n	5bb2 <__aeabi_uidiv+0xfe>
    5ae6:	0b03      	lsrs	r3, r0, #12
    5ae8:	428b      	cmp	r3, r1
    5aea:	d319      	bcc.n	5b20 <__aeabi_uidiv+0x6c>
    5aec:	e000      	b.n	5af0 <__aeabi_uidiv+0x3c>
    5aee:	0a09      	lsrs	r1, r1, #8
    5af0:	0bc3      	lsrs	r3, r0, #15
    5af2:	428b      	cmp	r3, r1
    5af4:	d301      	bcc.n	5afa <__aeabi_uidiv+0x46>
    5af6:	03cb      	lsls	r3, r1, #15
    5af8:	1ac0      	subs	r0, r0, r3
    5afa:	4152      	adcs	r2, r2
    5afc:	0b83      	lsrs	r3, r0, #14
    5afe:	428b      	cmp	r3, r1
    5b00:	d301      	bcc.n	5b06 <__aeabi_uidiv+0x52>
    5b02:	038b      	lsls	r3, r1, #14
    5b04:	1ac0      	subs	r0, r0, r3
    5b06:	4152      	adcs	r2, r2
    5b08:	0b43      	lsrs	r3, r0, #13
    5b0a:	428b      	cmp	r3, r1
    5b0c:	d301      	bcc.n	5b12 <__aeabi_uidiv+0x5e>
    5b0e:	034b      	lsls	r3, r1, #13
    5b10:	1ac0      	subs	r0, r0, r3
    5b12:	4152      	adcs	r2, r2
    5b14:	0b03      	lsrs	r3, r0, #12
    5b16:	428b      	cmp	r3, r1
    5b18:	d301      	bcc.n	5b1e <__aeabi_uidiv+0x6a>
    5b1a:	030b      	lsls	r3, r1, #12
    5b1c:	1ac0      	subs	r0, r0, r3
    5b1e:	4152      	adcs	r2, r2
    5b20:	0ac3      	lsrs	r3, r0, #11
    5b22:	428b      	cmp	r3, r1
    5b24:	d301      	bcc.n	5b2a <__aeabi_uidiv+0x76>
    5b26:	02cb      	lsls	r3, r1, #11
    5b28:	1ac0      	subs	r0, r0, r3
    5b2a:	4152      	adcs	r2, r2
    5b2c:	0a83      	lsrs	r3, r0, #10
    5b2e:	428b      	cmp	r3, r1
    5b30:	d301      	bcc.n	5b36 <__aeabi_uidiv+0x82>
    5b32:	028b      	lsls	r3, r1, #10
    5b34:	1ac0      	subs	r0, r0, r3
    5b36:	4152      	adcs	r2, r2
    5b38:	0a43      	lsrs	r3, r0, #9
    5b3a:	428b      	cmp	r3, r1
    5b3c:	d301      	bcc.n	5b42 <__aeabi_uidiv+0x8e>
    5b3e:	024b      	lsls	r3, r1, #9
    5b40:	1ac0      	subs	r0, r0, r3
    5b42:	4152      	adcs	r2, r2
    5b44:	0a03      	lsrs	r3, r0, #8
    5b46:	428b      	cmp	r3, r1
    5b48:	d301      	bcc.n	5b4e <__aeabi_uidiv+0x9a>
    5b4a:	020b      	lsls	r3, r1, #8
    5b4c:	1ac0      	subs	r0, r0, r3
    5b4e:	4152      	adcs	r2, r2
    5b50:	d2cd      	bcs.n	5aee <__aeabi_uidiv+0x3a>
    5b52:	09c3      	lsrs	r3, r0, #7
    5b54:	428b      	cmp	r3, r1
    5b56:	d301      	bcc.n	5b5c <__aeabi_uidiv+0xa8>
    5b58:	01cb      	lsls	r3, r1, #7
    5b5a:	1ac0      	subs	r0, r0, r3
    5b5c:	4152      	adcs	r2, r2
    5b5e:	0983      	lsrs	r3, r0, #6
    5b60:	428b      	cmp	r3, r1
    5b62:	d301      	bcc.n	5b68 <__aeabi_uidiv+0xb4>
    5b64:	018b      	lsls	r3, r1, #6
    5b66:	1ac0      	subs	r0, r0, r3
    5b68:	4152      	adcs	r2, r2
    5b6a:	0943      	lsrs	r3, r0, #5
    5b6c:	428b      	cmp	r3, r1
    5b6e:	d301      	bcc.n	5b74 <__aeabi_uidiv+0xc0>
    5b70:	014b      	lsls	r3, r1, #5
    5b72:	1ac0      	subs	r0, r0, r3
    5b74:	4152      	adcs	r2, r2
    5b76:	0903      	lsrs	r3, r0, #4
    5b78:	428b      	cmp	r3, r1
    5b7a:	d301      	bcc.n	5b80 <__aeabi_uidiv+0xcc>
    5b7c:	010b      	lsls	r3, r1, #4
    5b7e:	1ac0      	subs	r0, r0, r3
    5b80:	4152      	adcs	r2, r2
    5b82:	08c3      	lsrs	r3, r0, #3
    5b84:	428b      	cmp	r3, r1
    5b86:	d301      	bcc.n	5b8c <__aeabi_uidiv+0xd8>
    5b88:	00cb      	lsls	r3, r1, #3
    5b8a:	1ac0      	subs	r0, r0, r3
    5b8c:	4152      	adcs	r2, r2
    5b8e:	0883      	lsrs	r3, r0, #2
    5b90:	428b      	cmp	r3, r1
    5b92:	d301      	bcc.n	5b98 <__aeabi_uidiv+0xe4>
    5b94:	008b      	lsls	r3, r1, #2
    5b96:	1ac0      	subs	r0, r0, r3
    5b98:	4152      	adcs	r2, r2
    5b9a:	0843      	lsrs	r3, r0, #1
    5b9c:	428b      	cmp	r3, r1
    5b9e:	d301      	bcc.n	5ba4 <__aeabi_uidiv+0xf0>
    5ba0:	004b      	lsls	r3, r1, #1
    5ba2:	1ac0      	subs	r0, r0, r3
    5ba4:	4152      	adcs	r2, r2
    5ba6:	1a41      	subs	r1, r0, r1
    5ba8:	d200      	bcs.n	5bac <__aeabi_uidiv+0xf8>
    5baa:	4601      	mov	r1, r0
    5bac:	4152      	adcs	r2, r2
    5bae:	4610      	mov	r0, r2
    5bb0:	4770      	bx	lr
    5bb2:	e7ff      	b.n	5bb4 <__aeabi_uidiv+0x100>
    5bb4:	b501      	push	{r0, lr}
    5bb6:	2000      	movs	r0, #0
    5bb8:	f000 f8f0 	bl	5d9c <__aeabi_idiv0>
    5bbc:	bd02      	pop	{r1, pc}
    5bbe:	46c0      	nop			; (mov r8, r8)

00005bc0 <__aeabi_uidivmod>:
    5bc0:	2900      	cmp	r1, #0
    5bc2:	d0f7      	beq.n	5bb4 <__aeabi_uidiv+0x100>
    5bc4:	e776      	b.n	5ab4 <__aeabi_uidiv>
    5bc6:	4770      	bx	lr

00005bc8 <__aeabi_idiv>:
    5bc8:	4603      	mov	r3, r0
    5bca:	430b      	orrs	r3, r1
    5bcc:	d47f      	bmi.n	5cce <__aeabi_idiv+0x106>
    5bce:	2200      	movs	r2, #0
    5bd0:	0843      	lsrs	r3, r0, #1
    5bd2:	428b      	cmp	r3, r1
    5bd4:	d374      	bcc.n	5cc0 <__aeabi_idiv+0xf8>
    5bd6:	0903      	lsrs	r3, r0, #4
    5bd8:	428b      	cmp	r3, r1
    5bda:	d35f      	bcc.n	5c9c <__aeabi_idiv+0xd4>
    5bdc:	0a03      	lsrs	r3, r0, #8
    5bde:	428b      	cmp	r3, r1
    5be0:	d344      	bcc.n	5c6c <__aeabi_idiv+0xa4>
    5be2:	0b03      	lsrs	r3, r0, #12
    5be4:	428b      	cmp	r3, r1
    5be6:	d328      	bcc.n	5c3a <__aeabi_idiv+0x72>
    5be8:	0c03      	lsrs	r3, r0, #16
    5bea:	428b      	cmp	r3, r1
    5bec:	d30d      	bcc.n	5c0a <__aeabi_idiv+0x42>
    5bee:	22ff      	movs	r2, #255	; 0xff
    5bf0:	0209      	lsls	r1, r1, #8
    5bf2:	ba12      	rev	r2, r2
    5bf4:	0c03      	lsrs	r3, r0, #16
    5bf6:	428b      	cmp	r3, r1
    5bf8:	d302      	bcc.n	5c00 <__aeabi_idiv+0x38>
    5bfa:	1212      	asrs	r2, r2, #8
    5bfc:	0209      	lsls	r1, r1, #8
    5bfe:	d065      	beq.n	5ccc <__aeabi_idiv+0x104>
    5c00:	0b03      	lsrs	r3, r0, #12
    5c02:	428b      	cmp	r3, r1
    5c04:	d319      	bcc.n	5c3a <__aeabi_idiv+0x72>
    5c06:	e000      	b.n	5c0a <__aeabi_idiv+0x42>
    5c08:	0a09      	lsrs	r1, r1, #8
    5c0a:	0bc3      	lsrs	r3, r0, #15
    5c0c:	428b      	cmp	r3, r1
    5c0e:	d301      	bcc.n	5c14 <__aeabi_idiv+0x4c>
    5c10:	03cb      	lsls	r3, r1, #15
    5c12:	1ac0      	subs	r0, r0, r3
    5c14:	4152      	adcs	r2, r2
    5c16:	0b83      	lsrs	r3, r0, #14
    5c18:	428b      	cmp	r3, r1
    5c1a:	d301      	bcc.n	5c20 <__aeabi_idiv+0x58>
    5c1c:	038b      	lsls	r3, r1, #14
    5c1e:	1ac0      	subs	r0, r0, r3
    5c20:	4152      	adcs	r2, r2
    5c22:	0b43      	lsrs	r3, r0, #13
    5c24:	428b      	cmp	r3, r1
    5c26:	d301      	bcc.n	5c2c <__aeabi_idiv+0x64>
    5c28:	034b      	lsls	r3, r1, #13
    5c2a:	1ac0      	subs	r0, r0, r3
    5c2c:	4152      	adcs	r2, r2
    5c2e:	0b03      	lsrs	r3, r0, #12
    5c30:	428b      	cmp	r3, r1
    5c32:	d301      	bcc.n	5c38 <__aeabi_idiv+0x70>
    5c34:	030b      	lsls	r3, r1, #12
    5c36:	1ac0      	subs	r0, r0, r3
    5c38:	4152      	adcs	r2, r2
    5c3a:	0ac3      	lsrs	r3, r0, #11
    5c3c:	428b      	cmp	r3, r1
    5c3e:	d301      	bcc.n	5c44 <__aeabi_idiv+0x7c>
    5c40:	02cb      	lsls	r3, r1, #11
    5c42:	1ac0      	subs	r0, r0, r3
    5c44:	4152      	adcs	r2, r2
    5c46:	0a83      	lsrs	r3, r0, #10
    5c48:	428b      	cmp	r3, r1
    5c4a:	d301      	bcc.n	5c50 <__aeabi_idiv+0x88>
    5c4c:	028b      	lsls	r3, r1, #10
    5c4e:	1ac0      	subs	r0, r0, r3
    5c50:	4152      	adcs	r2, r2
    5c52:	0a43      	lsrs	r3, r0, #9
    5c54:	428b      	cmp	r3, r1
    5c56:	d301      	bcc.n	5c5c <__aeabi_idiv+0x94>
    5c58:	024b      	lsls	r3, r1, #9
    5c5a:	1ac0      	subs	r0, r0, r3
    5c5c:	4152      	adcs	r2, r2
    5c5e:	0a03      	lsrs	r3, r0, #8
    5c60:	428b      	cmp	r3, r1
    5c62:	d301      	bcc.n	5c68 <__aeabi_idiv+0xa0>
    5c64:	020b      	lsls	r3, r1, #8
    5c66:	1ac0      	subs	r0, r0, r3
    5c68:	4152      	adcs	r2, r2
    5c6a:	d2cd      	bcs.n	5c08 <__aeabi_idiv+0x40>
    5c6c:	09c3      	lsrs	r3, r0, #7
    5c6e:	428b      	cmp	r3, r1
    5c70:	d301      	bcc.n	5c76 <__aeabi_idiv+0xae>
    5c72:	01cb      	lsls	r3, r1, #7
    5c74:	1ac0      	subs	r0, r0, r3
    5c76:	4152      	adcs	r2, r2
    5c78:	0983      	lsrs	r3, r0, #6
    5c7a:	428b      	cmp	r3, r1
    5c7c:	d301      	bcc.n	5c82 <__aeabi_idiv+0xba>
    5c7e:	018b      	lsls	r3, r1, #6
    5c80:	1ac0      	subs	r0, r0, r3
    5c82:	4152      	adcs	r2, r2
    5c84:	0943      	lsrs	r3, r0, #5
    5c86:	428b      	cmp	r3, r1
    5c88:	d301      	bcc.n	5c8e <__aeabi_idiv+0xc6>
    5c8a:	014b      	lsls	r3, r1, #5
    5c8c:	1ac0      	subs	r0, r0, r3
    5c8e:	4152      	adcs	r2, r2
    5c90:	0903      	lsrs	r3, r0, #4
    5c92:	428b      	cmp	r3, r1
    5c94:	d301      	bcc.n	5c9a <__aeabi_idiv+0xd2>
    5c96:	010b      	lsls	r3, r1, #4
    5c98:	1ac0      	subs	r0, r0, r3
    5c9a:	4152      	adcs	r2, r2
    5c9c:	08c3      	lsrs	r3, r0, #3
    5c9e:	428b      	cmp	r3, r1
    5ca0:	d301      	bcc.n	5ca6 <__aeabi_idiv+0xde>
    5ca2:	00cb      	lsls	r3, r1, #3
    5ca4:	1ac0      	subs	r0, r0, r3
    5ca6:	4152      	adcs	r2, r2
    5ca8:	0883      	lsrs	r3, r0, #2
    5caa:	428b      	cmp	r3, r1
    5cac:	d301      	bcc.n	5cb2 <__aeabi_idiv+0xea>
    5cae:	008b      	lsls	r3, r1, #2
    5cb0:	1ac0      	subs	r0, r0, r3
    5cb2:	4152      	adcs	r2, r2
    5cb4:	0843      	lsrs	r3, r0, #1
    5cb6:	428b      	cmp	r3, r1
    5cb8:	d301      	bcc.n	5cbe <__aeabi_idiv+0xf6>
    5cba:	004b      	lsls	r3, r1, #1
    5cbc:	1ac0      	subs	r0, r0, r3
    5cbe:	4152      	adcs	r2, r2
    5cc0:	1a41      	subs	r1, r0, r1
    5cc2:	d200      	bcs.n	5cc6 <__aeabi_idiv+0xfe>
    5cc4:	4601      	mov	r1, r0
    5cc6:	4152      	adcs	r2, r2
    5cc8:	4610      	mov	r0, r2
    5cca:	4770      	bx	lr
    5ccc:	e05d      	b.n	5d8a <__aeabi_idiv+0x1c2>
    5cce:	0fca      	lsrs	r2, r1, #31
    5cd0:	d000      	beq.n	5cd4 <__aeabi_idiv+0x10c>
    5cd2:	4249      	negs	r1, r1
    5cd4:	1003      	asrs	r3, r0, #32
    5cd6:	d300      	bcc.n	5cda <__aeabi_idiv+0x112>
    5cd8:	4240      	negs	r0, r0
    5cda:	4053      	eors	r3, r2
    5cdc:	2200      	movs	r2, #0
    5cde:	469c      	mov	ip, r3
    5ce0:	0903      	lsrs	r3, r0, #4
    5ce2:	428b      	cmp	r3, r1
    5ce4:	d32d      	bcc.n	5d42 <__aeabi_idiv+0x17a>
    5ce6:	0a03      	lsrs	r3, r0, #8
    5ce8:	428b      	cmp	r3, r1
    5cea:	d312      	bcc.n	5d12 <__aeabi_idiv+0x14a>
    5cec:	22fc      	movs	r2, #252	; 0xfc
    5cee:	0189      	lsls	r1, r1, #6
    5cf0:	ba12      	rev	r2, r2
    5cf2:	0a03      	lsrs	r3, r0, #8
    5cf4:	428b      	cmp	r3, r1
    5cf6:	d30c      	bcc.n	5d12 <__aeabi_idiv+0x14a>
    5cf8:	0189      	lsls	r1, r1, #6
    5cfa:	1192      	asrs	r2, r2, #6
    5cfc:	428b      	cmp	r3, r1
    5cfe:	d308      	bcc.n	5d12 <__aeabi_idiv+0x14a>
    5d00:	0189      	lsls	r1, r1, #6
    5d02:	1192      	asrs	r2, r2, #6
    5d04:	428b      	cmp	r3, r1
    5d06:	d304      	bcc.n	5d12 <__aeabi_idiv+0x14a>
    5d08:	0189      	lsls	r1, r1, #6
    5d0a:	d03a      	beq.n	5d82 <__aeabi_idiv+0x1ba>
    5d0c:	1192      	asrs	r2, r2, #6
    5d0e:	e000      	b.n	5d12 <__aeabi_idiv+0x14a>
    5d10:	0989      	lsrs	r1, r1, #6
    5d12:	09c3      	lsrs	r3, r0, #7
    5d14:	428b      	cmp	r3, r1
    5d16:	d301      	bcc.n	5d1c <__aeabi_idiv+0x154>
    5d18:	01cb      	lsls	r3, r1, #7
    5d1a:	1ac0      	subs	r0, r0, r3
    5d1c:	4152      	adcs	r2, r2
    5d1e:	0983      	lsrs	r3, r0, #6
    5d20:	428b      	cmp	r3, r1
    5d22:	d301      	bcc.n	5d28 <__aeabi_idiv+0x160>
    5d24:	018b      	lsls	r3, r1, #6
    5d26:	1ac0      	subs	r0, r0, r3
    5d28:	4152      	adcs	r2, r2
    5d2a:	0943      	lsrs	r3, r0, #5
    5d2c:	428b      	cmp	r3, r1
    5d2e:	d301      	bcc.n	5d34 <__aeabi_idiv+0x16c>
    5d30:	014b      	lsls	r3, r1, #5
    5d32:	1ac0      	subs	r0, r0, r3
    5d34:	4152      	adcs	r2, r2
    5d36:	0903      	lsrs	r3, r0, #4
    5d38:	428b      	cmp	r3, r1
    5d3a:	d301      	bcc.n	5d40 <__aeabi_idiv+0x178>
    5d3c:	010b      	lsls	r3, r1, #4
    5d3e:	1ac0      	subs	r0, r0, r3
    5d40:	4152      	adcs	r2, r2
    5d42:	08c3      	lsrs	r3, r0, #3
    5d44:	428b      	cmp	r3, r1
    5d46:	d301      	bcc.n	5d4c <__aeabi_idiv+0x184>
    5d48:	00cb      	lsls	r3, r1, #3
    5d4a:	1ac0      	subs	r0, r0, r3
    5d4c:	4152      	adcs	r2, r2
    5d4e:	0883      	lsrs	r3, r0, #2
    5d50:	428b      	cmp	r3, r1
    5d52:	d301      	bcc.n	5d58 <__aeabi_idiv+0x190>
    5d54:	008b      	lsls	r3, r1, #2
    5d56:	1ac0      	subs	r0, r0, r3
    5d58:	4152      	adcs	r2, r2
    5d5a:	d2d9      	bcs.n	5d10 <__aeabi_idiv+0x148>
    5d5c:	0843      	lsrs	r3, r0, #1
    5d5e:	428b      	cmp	r3, r1
    5d60:	d301      	bcc.n	5d66 <__aeabi_idiv+0x19e>
    5d62:	004b      	lsls	r3, r1, #1
    5d64:	1ac0      	subs	r0, r0, r3
    5d66:	4152      	adcs	r2, r2
    5d68:	1a41      	subs	r1, r0, r1
    5d6a:	d200      	bcs.n	5d6e <__aeabi_idiv+0x1a6>
    5d6c:	4601      	mov	r1, r0
    5d6e:	4663      	mov	r3, ip
    5d70:	4152      	adcs	r2, r2
    5d72:	105b      	asrs	r3, r3, #1
    5d74:	4610      	mov	r0, r2
    5d76:	d301      	bcc.n	5d7c <__aeabi_idiv+0x1b4>
    5d78:	4240      	negs	r0, r0
    5d7a:	2b00      	cmp	r3, #0
    5d7c:	d500      	bpl.n	5d80 <__aeabi_idiv+0x1b8>
    5d7e:	4249      	negs	r1, r1
    5d80:	4770      	bx	lr
    5d82:	4663      	mov	r3, ip
    5d84:	105b      	asrs	r3, r3, #1
    5d86:	d300      	bcc.n	5d8a <__aeabi_idiv+0x1c2>
    5d88:	4240      	negs	r0, r0
    5d8a:	b501      	push	{r0, lr}
    5d8c:	2000      	movs	r0, #0
    5d8e:	f000 f805 	bl	5d9c <__aeabi_idiv0>
    5d92:	bd02      	pop	{r1, pc}

00005d94 <__aeabi_idivmod>:
    5d94:	2900      	cmp	r1, #0
    5d96:	d0f8      	beq.n	5d8a <__aeabi_idiv+0x1c2>
    5d98:	e716      	b.n	5bc8 <__aeabi_idiv>
    5d9a:	4770      	bx	lr

00005d9c <__aeabi_idiv0>:
    5d9c:	4770      	bx	lr
    5d9e:	46c0      	nop			; (mov r8, r8)

00005da0 <__aeabi_lmul>:
    5da0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5da2:	464f      	mov	r7, r9
    5da4:	4646      	mov	r6, r8
    5da6:	b4c0      	push	{r6, r7}
    5da8:	0416      	lsls	r6, r2, #16
    5daa:	0c36      	lsrs	r6, r6, #16
    5dac:	4699      	mov	r9, r3
    5dae:	0033      	movs	r3, r6
    5db0:	0405      	lsls	r5, r0, #16
    5db2:	0c2c      	lsrs	r4, r5, #16
    5db4:	0c07      	lsrs	r7, r0, #16
    5db6:	0c15      	lsrs	r5, r2, #16
    5db8:	4363      	muls	r3, r4
    5dba:	437e      	muls	r6, r7
    5dbc:	436f      	muls	r7, r5
    5dbe:	4365      	muls	r5, r4
    5dc0:	0c1c      	lsrs	r4, r3, #16
    5dc2:	19ad      	adds	r5, r5, r6
    5dc4:	1964      	adds	r4, r4, r5
    5dc6:	469c      	mov	ip, r3
    5dc8:	42a6      	cmp	r6, r4
    5dca:	d903      	bls.n	5dd4 <__aeabi_lmul+0x34>
    5dcc:	2380      	movs	r3, #128	; 0x80
    5dce:	025b      	lsls	r3, r3, #9
    5dd0:	4698      	mov	r8, r3
    5dd2:	4447      	add	r7, r8
    5dd4:	4663      	mov	r3, ip
    5dd6:	0c25      	lsrs	r5, r4, #16
    5dd8:	19ef      	adds	r7, r5, r7
    5dda:	041d      	lsls	r5, r3, #16
    5ddc:	464b      	mov	r3, r9
    5dde:	434a      	muls	r2, r1
    5de0:	4343      	muls	r3, r0
    5de2:	0c2d      	lsrs	r5, r5, #16
    5de4:	0424      	lsls	r4, r4, #16
    5de6:	1964      	adds	r4, r4, r5
    5de8:	1899      	adds	r1, r3, r2
    5dea:	19c9      	adds	r1, r1, r7
    5dec:	0020      	movs	r0, r4
    5dee:	bc0c      	pop	{r2, r3}
    5df0:	4690      	mov	r8, r2
    5df2:	4699      	mov	r9, r3
    5df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5df6:	46c0      	nop			; (mov r8, r8)

00005df8 <__libc_init_array>:
    5df8:	4b0e      	ldr	r3, [pc, #56]	; (5e34 <__libc_init_array+0x3c>)
    5dfa:	b570      	push	{r4, r5, r6, lr}
    5dfc:	2500      	movs	r5, #0
    5dfe:	001e      	movs	r6, r3
    5e00:	4c0d      	ldr	r4, [pc, #52]	; (5e38 <__libc_init_array+0x40>)
    5e02:	1ae4      	subs	r4, r4, r3
    5e04:	10a4      	asrs	r4, r4, #2
    5e06:	42a5      	cmp	r5, r4
    5e08:	d004      	beq.n	5e14 <__libc_init_array+0x1c>
    5e0a:	00ab      	lsls	r3, r5, #2
    5e0c:	58f3      	ldr	r3, [r6, r3]
    5e0e:	4798      	blx	r3
    5e10:	3501      	adds	r5, #1
    5e12:	e7f8      	b.n	5e06 <__libc_init_array+0xe>
    5e14:	f001 fab8 	bl	7388 <_init>
    5e18:	4b08      	ldr	r3, [pc, #32]	; (5e3c <__libc_init_array+0x44>)
    5e1a:	2500      	movs	r5, #0
    5e1c:	001e      	movs	r6, r3
    5e1e:	4c08      	ldr	r4, [pc, #32]	; (5e40 <__libc_init_array+0x48>)
    5e20:	1ae4      	subs	r4, r4, r3
    5e22:	10a4      	asrs	r4, r4, #2
    5e24:	42a5      	cmp	r5, r4
    5e26:	d004      	beq.n	5e32 <__libc_init_array+0x3a>
    5e28:	00ab      	lsls	r3, r5, #2
    5e2a:	58f3      	ldr	r3, [r6, r3]
    5e2c:	4798      	blx	r3
    5e2e:	3501      	adds	r5, #1
    5e30:	e7f8      	b.n	5e24 <__libc_init_array+0x2c>
    5e32:	bd70      	pop	{r4, r5, r6, pc}
    5e34:	00007394 	.word	0x00007394
    5e38:	00007394 	.word	0x00007394
    5e3c:	00007394 	.word	0x00007394
    5e40:	00007398 	.word	0x00007398

00005e44 <memcpy>:
    5e44:	2300      	movs	r3, #0
    5e46:	b510      	push	{r4, lr}
    5e48:	429a      	cmp	r2, r3
    5e4a:	d003      	beq.n	5e54 <memcpy+0x10>
    5e4c:	5ccc      	ldrb	r4, [r1, r3]
    5e4e:	54c4      	strb	r4, [r0, r3]
    5e50:	3301      	adds	r3, #1
    5e52:	e7f9      	b.n	5e48 <memcpy+0x4>
    5e54:	bd10      	pop	{r4, pc}

00005e56 <memset>:
    5e56:	0003      	movs	r3, r0
    5e58:	1882      	adds	r2, r0, r2
    5e5a:	4293      	cmp	r3, r2
    5e5c:	d002      	beq.n	5e64 <memset+0xe>
    5e5e:	7019      	strb	r1, [r3, #0]
    5e60:	3301      	adds	r3, #1
    5e62:	e7fa      	b.n	5e5a <memset+0x4>
    5e64:	4770      	bx	lr
	...

00005e68 <iprintf>:
    5e68:	b40f      	push	{r0, r1, r2, r3}
    5e6a:	4b0b      	ldr	r3, [pc, #44]	; (5e98 <iprintf+0x30>)
    5e6c:	b513      	push	{r0, r1, r4, lr}
    5e6e:	681c      	ldr	r4, [r3, #0]
    5e70:	2c00      	cmp	r4, #0
    5e72:	d005      	beq.n	5e80 <iprintf+0x18>
    5e74:	69a3      	ldr	r3, [r4, #24]
    5e76:	2b00      	cmp	r3, #0
    5e78:	d102      	bne.n	5e80 <iprintf+0x18>
    5e7a:	0020      	movs	r0, r4
    5e7c:	f000 f9bc 	bl	61f8 <__sinit>
    5e80:	ab05      	add	r3, sp, #20
    5e82:	9a04      	ldr	r2, [sp, #16]
    5e84:	68a1      	ldr	r1, [r4, #8]
    5e86:	0020      	movs	r0, r4
    5e88:	9301      	str	r3, [sp, #4]
    5e8a:	f000 fb7b 	bl	6584 <_vfiprintf_r>
    5e8e:	bc16      	pop	{r1, r2, r4}
    5e90:	bc08      	pop	{r3}
    5e92:	b004      	add	sp, #16
    5e94:	4718      	bx	r3
    5e96:	46c0      	nop			; (mov r8, r8)
    5e98:	20000098 	.word	0x20000098

00005e9c <setbuf>:
    5e9c:	424a      	negs	r2, r1
    5e9e:	414a      	adcs	r2, r1
    5ea0:	2380      	movs	r3, #128	; 0x80
    5ea2:	b510      	push	{r4, lr}
    5ea4:	0052      	lsls	r2, r2, #1
    5ea6:	00db      	lsls	r3, r3, #3
    5ea8:	f000 f802 	bl	5eb0 <setvbuf>
    5eac:	bd10      	pop	{r4, pc}
	...

00005eb0 <setvbuf>:
    5eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5eb2:	001d      	movs	r5, r3
    5eb4:	4b51      	ldr	r3, [pc, #324]	; (5ffc <setvbuf+0x14c>)
    5eb6:	b085      	sub	sp, #20
    5eb8:	681e      	ldr	r6, [r3, #0]
    5eba:	0004      	movs	r4, r0
    5ebc:	000f      	movs	r7, r1
    5ebe:	9200      	str	r2, [sp, #0]
    5ec0:	2e00      	cmp	r6, #0
    5ec2:	d005      	beq.n	5ed0 <setvbuf+0x20>
    5ec4:	69b3      	ldr	r3, [r6, #24]
    5ec6:	2b00      	cmp	r3, #0
    5ec8:	d102      	bne.n	5ed0 <setvbuf+0x20>
    5eca:	0030      	movs	r0, r6
    5ecc:	f000 f994 	bl	61f8 <__sinit>
    5ed0:	4b4b      	ldr	r3, [pc, #300]	; (6000 <setvbuf+0x150>)
    5ed2:	429c      	cmp	r4, r3
    5ed4:	d101      	bne.n	5eda <setvbuf+0x2a>
    5ed6:	6874      	ldr	r4, [r6, #4]
    5ed8:	e008      	b.n	5eec <setvbuf+0x3c>
    5eda:	4b4a      	ldr	r3, [pc, #296]	; (6004 <setvbuf+0x154>)
    5edc:	429c      	cmp	r4, r3
    5ede:	d101      	bne.n	5ee4 <setvbuf+0x34>
    5ee0:	68b4      	ldr	r4, [r6, #8]
    5ee2:	e003      	b.n	5eec <setvbuf+0x3c>
    5ee4:	4b48      	ldr	r3, [pc, #288]	; (6008 <setvbuf+0x158>)
    5ee6:	429c      	cmp	r4, r3
    5ee8:	d100      	bne.n	5eec <setvbuf+0x3c>
    5eea:	68f4      	ldr	r4, [r6, #12]
    5eec:	9b00      	ldr	r3, [sp, #0]
    5eee:	2b02      	cmp	r3, #2
    5ef0:	d005      	beq.n	5efe <setvbuf+0x4e>
    5ef2:	2b01      	cmp	r3, #1
    5ef4:	d900      	bls.n	5ef8 <setvbuf+0x48>
    5ef6:	e07c      	b.n	5ff2 <setvbuf+0x142>
    5ef8:	2d00      	cmp	r5, #0
    5efa:	da00      	bge.n	5efe <setvbuf+0x4e>
    5efc:	e079      	b.n	5ff2 <setvbuf+0x142>
    5efe:	0021      	movs	r1, r4
    5f00:	0030      	movs	r0, r6
    5f02:	f000 f90b 	bl	611c <_fflush_r>
    5f06:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5f08:	2900      	cmp	r1, #0
    5f0a:	d008      	beq.n	5f1e <setvbuf+0x6e>
    5f0c:	0023      	movs	r3, r4
    5f0e:	3344      	adds	r3, #68	; 0x44
    5f10:	4299      	cmp	r1, r3
    5f12:	d002      	beq.n	5f1a <setvbuf+0x6a>
    5f14:	0030      	movs	r0, r6
    5f16:	f000 fa71 	bl	63fc <_free_r>
    5f1a:	2300      	movs	r3, #0
    5f1c:	6363      	str	r3, [r4, #52]	; 0x34
    5f1e:	2300      	movs	r3, #0
    5f20:	61a3      	str	r3, [r4, #24]
    5f22:	6063      	str	r3, [r4, #4]
    5f24:	89a3      	ldrh	r3, [r4, #12]
    5f26:	061b      	lsls	r3, r3, #24
    5f28:	d503      	bpl.n	5f32 <setvbuf+0x82>
    5f2a:	6921      	ldr	r1, [r4, #16]
    5f2c:	0030      	movs	r0, r6
    5f2e:	f000 fa65 	bl	63fc <_free_r>
    5f32:	89a2      	ldrh	r2, [r4, #12]
    5f34:	4b35      	ldr	r3, [pc, #212]	; (600c <setvbuf+0x15c>)
    5f36:	4013      	ands	r3, r2
    5f38:	81a3      	strh	r3, [r4, #12]
    5f3a:	9b00      	ldr	r3, [sp, #0]
    5f3c:	2b02      	cmp	r3, #2
    5f3e:	d021      	beq.n	5f84 <setvbuf+0xd4>
    5f40:	ab03      	add	r3, sp, #12
    5f42:	aa02      	add	r2, sp, #8
    5f44:	0021      	movs	r1, r4
    5f46:	0030      	movs	r0, r6
    5f48:	f000 f9ea 	bl	6320 <__swhatbuf_r>
    5f4c:	89a3      	ldrh	r3, [r4, #12]
    5f4e:	4318      	orrs	r0, r3
    5f50:	81a0      	strh	r0, [r4, #12]
    5f52:	2d00      	cmp	r5, #0
    5f54:	d101      	bne.n	5f5a <setvbuf+0xaa>
    5f56:	9d02      	ldr	r5, [sp, #8]
    5f58:	e001      	b.n	5f5e <setvbuf+0xae>
    5f5a:	2f00      	cmp	r7, #0
    5f5c:	d125      	bne.n	5faa <setvbuf+0xfa>
    5f5e:	0028      	movs	r0, r5
    5f60:	f000 fa42 	bl	63e8 <malloc>
    5f64:	9501      	str	r5, [sp, #4]
    5f66:	1e07      	subs	r7, r0, #0
    5f68:	d11a      	bne.n	5fa0 <setvbuf+0xf0>
    5f6a:	9b02      	ldr	r3, [sp, #8]
    5f6c:	9301      	str	r3, [sp, #4]
    5f6e:	42ab      	cmp	r3, r5
    5f70:	d102      	bne.n	5f78 <setvbuf+0xc8>
    5f72:	2001      	movs	r0, #1
    5f74:	4240      	negs	r0, r0
    5f76:	e006      	b.n	5f86 <setvbuf+0xd6>
    5f78:	9801      	ldr	r0, [sp, #4]
    5f7a:	f000 fa35 	bl	63e8 <malloc>
    5f7e:	1e07      	subs	r7, r0, #0
    5f80:	d10e      	bne.n	5fa0 <setvbuf+0xf0>
    5f82:	e7f6      	b.n	5f72 <setvbuf+0xc2>
    5f84:	2000      	movs	r0, #0
    5f86:	2202      	movs	r2, #2
    5f88:	89a3      	ldrh	r3, [r4, #12]
    5f8a:	4313      	orrs	r3, r2
    5f8c:	81a3      	strh	r3, [r4, #12]
    5f8e:	2300      	movs	r3, #0
    5f90:	60a3      	str	r3, [r4, #8]
    5f92:	0023      	movs	r3, r4
    5f94:	3347      	adds	r3, #71	; 0x47
    5f96:	6023      	str	r3, [r4, #0]
    5f98:	6123      	str	r3, [r4, #16]
    5f9a:	2301      	movs	r3, #1
    5f9c:	6163      	str	r3, [r4, #20]
    5f9e:	e02a      	b.n	5ff6 <setvbuf+0x146>
    5fa0:	2280      	movs	r2, #128	; 0x80
    5fa2:	89a3      	ldrh	r3, [r4, #12]
    5fa4:	9d01      	ldr	r5, [sp, #4]
    5fa6:	4313      	orrs	r3, r2
    5fa8:	81a3      	strh	r3, [r4, #12]
    5faa:	69b3      	ldr	r3, [r6, #24]
    5fac:	2b00      	cmp	r3, #0
    5fae:	d102      	bne.n	5fb6 <setvbuf+0x106>
    5fb0:	0030      	movs	r0, r6
    5fb2:	f000 f921 	bl	61f8 <__sinit>
    5fb6:	9b00      	ldr	r3, [sp, #0]
    5fb8:	2b01      	cmp	r3, #1
    5fba:	d103      	bne.n	5fc4 <setvbuf+0x114>
    5fbc:	89a3      	ldrh	r3, [r4, #12]
    5fbe:	9a00      	ldr	r2, [sp, #0]
    5fc0:	431a      	orrs	r2, r3
    5fc2:	81a2      	strh	r2, [r4, #12]
    5fc4:	2308      	movs	r3, #8
    5fc6:	89a2      	ldrh	r2, [r4, #12]
    5fc8:	6027      	str	r7, [r4, #0]
    5fca:	4013      	ands	r3, r2
    5fcc:	6127      	str	r7, [r4, #16]
    5fce:	6165      	str	r5, [r4, #20]
    5fd0:	1e18      	subs	r0, r3, #0
    5fd2:	d00c      	beq.n	5fee <setvbuf+0x13e>
    5fd4:	2301      	movs	r3, #1
    5fd6:	401a      	ands	r2, r3
    5fd8:	2300      	movs	r3, #0
    5fda:	1e10      	subs	r0, r2, #0
    5fdc:	4298      	cmp	r0, r3
    5fde:	d004      	beq.n	5fea <setvbuf+0x13a>
    5fe0:	426d      	negs	r5, r5
    5fe2:	60a3      	str	r3, [r4, #8]
    5fe4:	61a5      	str	r5, [r4, #24]
    5fe6:	0018      	movs	r0, r3
    5fe8:	e005      	b.n	5ff6 <setvbuf+0x146>
    5fea:	60a5      	str	r5, [r4, #8]
    5fec:	e003      	b.n	5ff6 <setvbuf+0x146>
    5fee:	60a3      	str	r3, [r4, #8]
    5ff0:	e001      	b.n	5ff6 <setvbuf+0x146>
    5ff2:	2001      	movs	r0, #1
    5ff4:	4240      	negs	r0, r0
    5ff6:	b005      	add	sp, #20
    5ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5ffa:	46c0      	nop			; (mov r8, r8)
    5ffc:	20000098 	.word	0x20000098
    6000:	000072f4 	.word	0x000072f4
    6004:	00007314 	.word	0x00007314
    6008:	00007334 	.word	0x00007334
    600c:	fffff35c 	.word	0xfffff35c

00006010 <__sflush_r>:
    6010:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6012:	898a      	ldrh	r2, [r1, #12]
    6014:	0005      	movs	r5, r0
    6016:	000c      	movs	r4, r1
    6018:	0713      	lsls	r3, r2, #28
    601a:	d45a      	bmi.n	60d2 <__sflush_r+0xc2>
    601c:	684b      	ldr	r3, [r1, #4]
    601e:	2b00      	cmp	r3, #0
    6020:	dc02      	bgt.n	6028 <__sflush_r+0x18>
    6022:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    6024:	2b00      	cmp	r3, #0
    6026:	dd19      	ble.n	605c <__sflush_r+0x4c>
    6028:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    602a:	2f00      	cmp	r7, #0
    602c:	d016      	beq.n	605c <__sflush_r+0x4c>
    602e:	2300      	movs	r3, #0
    6030:	682e      	ldr	r6, [r5, #0]
    6032:	602b      	str	r3, [r5, #0]
    6034:	2380      	movs	r3, #128	; 0x80
    6036:	015b      	lsls	r3, r3, #5
    6038:	401a      	ands	r2, r3
    603a:	d001      	beq.n	6040 <__sflush_r+0x30>
    603c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    603e:	e014      	b.n	606a <__sflush_r+0x5a>
    6040:	2301      	movs	r3, #1
    6042:	6a21      	ldr	r1, [r4, #32]
    6044:	0028      	movs	r0, r5
    6046:	47b8      	blx	r7
    6048:	1c43      	adds	r3, r0, #1
    604a:	d10e      	bne.n	606a <__sflush_r+0x5a>
    604c:	682b      	ldr	r3, [r5, #0]
    604e:	2b00      	cmp	r3, #0
    6050:	d00b      	beq.n	606a <__sflush_r+0x5a>
    6052:	2b1d      	cmp	r3, #29
    6054:	d001      	beq.n	605a <__sflush_r+0x4a>
    6056:	2b16      	cmp	r3, #22
    6058:	d102      	bne.n	6060 <__sflush_r+0x50>
    605a:	602e      	str	r6, [r5, #0]
    605c:	2000      	movs	r0, #0
    605e:	e05a      	b.n	6116 <__sflush_r+0x106>
    6060:	2240      	movs	r2, #64	; 0x40
    6062:	89a3      	ldrh	r3, [r4, #12]
    6064:	4313      	orrs	r3, r2
    6066:	81a3      	strh	r3, [r4, #12]
    6068:	e055      	b.n	6116 <__sflush_r+0x106>
    606a:	89a3      	ldrh	r3, [r4, #12]
    606c:	075b      	lsls	r3, r3, #29
    606e:	d506      	bpl.n	607e <__sflush_r+0x6e>
    6070:	6863      	ldr	r3, [r4, #4]
    6072:	1ac0      	subs	r0, r0, r3
    6074:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6076:	2b00      	cmp	r3, #0
    6078:	d001      	beq.n	607e <__sflush_r+0x6e>
    607a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    607c:	1ac0      	subs	r0, r0, r3
    607e:	2300      	movs	r3, #0
    6080:	0002      	movs	r2, r0
    6082:	6a21      	ldr	r1, [r4, #32]
    6084:	0028      	movs	r0, r5
    6086:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    6088:	47b8      	blx	r7
    608a:	89a3      	ldrh	r3, [r4, #12]
    608c:	1c42      	adds	r2, r0, #1
    608e:	d106      	bne.n	609e <__sflush_r+0x8e>
    6090:	6829      	ldr	r1, [r5, #0]
    6092:	291d      	cmp	r1, #29
    6094:	d83a      	bhi.n	610c <__sflush_r+0xfc>
    6096:	4a20      	ldr	r2, [pc, #128]	; (6118 <__sflush_r+0x108>)
    6098:	40ca      	lsrs	r2, r1
    609a:	07d2      	lsls	r2, r2, #31
    609c:	d536      	bpl.n	610c <__sflush_r+0xfc>
    609e:	2200      	movs	r2, #0
    60a0:	6062      	str	r2, [r4, #4]
    60a2:	6922      	ldr	r2, [r4, #16]
    60a4:	6022      	str	r2, [r4, #0]
    60a6:	04db      	lsls	r3, r3, #19
    60a8:	d505      	bpl.n	60b6 <__sflush_r+0xa6>
    60aa:	1c43      	adds	r3, r0, #1
    60ac:	d102      	bne.n	60b4 <__sflush_r+0xa4>
    60ae:	682b      	ldr	r3, [r5, #0]
    60b0:	2b00      	cmp	r3, #0
    60b2:	d100      	bne.n	60b6 <__sflush_r+0xa6>
    60b4:	6560      	str	r0, [r4, #84]	; 0x54
    60b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    60b8:	602e      	str	r6, [r5, #0]
    60ba:	2900      	cmp	r1, #0
    60bc:	d0ce      	beq.n	605c <__sflush_r+0x4c>
    60be:	0023      	movs	r3, r4
    60c0:	3344      	adds	r3, #68	; 0x44
    60c2:	4299      	cmp	r1, r3
    60c4:	d002      	beq.n	60cc <__sflush_r+0xbc>
    60c6:	0028      	movs	r0, r5
    60c8:	f000 f998 	bl	63fc <_free_r>
    60cc:	2000      	movs	r0, #0
    60ce:	6360      	str	r0, [r4, #52]	; 0x34
    60d0:	e021      	b.n	6116 <__sflush_r+0x106>
    60d2:	690f      	ldr	r7, [r1, #16]
    60d4:	2f00      	cmp	r7, #0
    60d6:	d0c1      	beq.n	605c <__sflush_r+0x4c>
    60d8:	680b      	ldr	r3, [r1, #0]
    60da:	600f      	str	r7, [r1, #0]
    60dc:	1bdb      	subs	r3, r3, r7
    60de:	9301      	str	r3, [sp, #4]
    60e0:	2300      	movs	r3, #0
    60e2:	0792      	lsls	r2, r2, #30
    60e4:	d100      	bne.n	60e8 <__sflush_r+0xd8>
    60e6:	694b      	ldr	r3, [r1, #20]
    60e8:	60a3      	str	r3, [r4, #8]
    60ea:	e003      	b.n	60f4 <__sflush_r+0xe4>
    60ec:	9b01      	ldr	r3, [sp, #4]
    60ee:	183f      	adds	r7, r7, r0
    60f0:	1a1b      	subs	r3, r3, r0
    60f2:	9301      	str	r3, [sp, #4]
    60f4:	9b01      	ldr	r3, [sp, #4]
    60f6:	2b00      	cmp	r3, #0
    60f8:	ddb0      	ble.n	605c <__sflush_r+0x4c>
    60fa:	9b01      	ldr	r3, [sp, #4]
    60fc:	003a      	movs	r2, r7
    60fe:	6a21      	ldr	r1, [r4, #32]
    6100:	0028      	movs	r0, r5
    6102:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    6104:	47b0      	blx	r6
    6106:	2800      	cmp	r0, #0
    6108:	dcf0      	bgt.n	60ec <__sflush_r+0xdc>
    610a:	89a3      	ldrh	r3, [r4, #12]
    610c:	2240      	movs	r2, #64	; 0x40
    610e:	2001      	movs	r0, #1
    6110:	4313      	orrs	r3, r2
    6112:	81a3      	strh	r3, [r4, #12]
    6114:	4240      	negs	r0, r0
    6116:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6118:	20400001 	.word	0x20400001

0000611c <_fflush_r>:
    611c:	690b      	ldr	r3, [r1, #16]
    611e:	b570      	push	{r4, r5, r6, lr}
    6120:	0005      	movs	r5, r0
    6122:	000c      	movs	r4, r1
    6124:	2b00      	cmp	r3, #0
    6126:	d101      	bne.n	612c <_fflush_r+0x10>
    6128:	2000      	movs	r0, #0
    612a:	e01c      	b.n	6166 <_fflush_r+0x4a>
    612c:	2800      	cmp	r0, #0
    612e:	d004      	beq.n	613a <_fflush_r+0x1e>
    6130:	6983      	ldr	r3, [r0, #24]
    6132:	2b00      	cmp	r3, #0
    6134:	d101      	bne.n	613a <_fflush_r+0x1e>
    6136:	f000 f85f 	bl	61f8 <__sinit>
    613a:	4b0b      	ldr	r3, [pc, #44]	; (6168 <_fflush_r+0x4c>)
    613c:	429c      	cmp	r4, r3
    613e:	d101      	bne.n	6144 <_fflush_r+0x28>
    6140:	686c      	ldr	r4, [r5, #4]
    6142:	e008      	b.n	6156 <_fflush_r+0x3a>
    6144:	4b09      	ldr	r3, [pc, #36]	; (616c <_fflush_r+0x50>)
    6146:	429c      	cmp	r4, r3
    6148:	d101      	bne.n	614e <_fflush_r+0x32>
    614a:	68ac      	ldr	r4, [r5, #8]
    614c:	e003      	b.n	6156 <_fflush_r+0x3a>
    614e:	4b08      	ldr	r3, [pc, #32]	; (6170 <_fflush_r+0x54>)
    6150:	429c      	cmp	r4, r3
    6152:	d100      	bne.n	6156 <_fflush_r+0x3a>
    6154:	68ec      	ldr	r4, [r5, #12]
    6156:	220c      	movs	r2, #12
    6158:	5ea3      	ldrsh	r3, [r4, r2]
    615a:	2b00      	cmp	r3, #0
    615c:	d0e4      	beq.n	6128 <_fflush_r+0xc>
    615e:	0021      	movs	r1, r4
    6160:	0028      	movs	r0, r5
    6162:	f7ff ff55 	bl	6010 <__sflush_r>
    6166:	bd70      	pop	{r4, r5, r6, pc}
    6168:	000072f4 	.word	0x000072f4
    616c:	00007314 	.word	0x00007314
    6170:	00007334 	.word	0x00007334

00006174 <_cleanup_r>:
    6174:	b510      	push	{r4, lr}
    6176:	4902      	ldr	r1, [pc, #8]	; (6180 <_cleanup_r+0xc>)
    6178:	f000 f8b0 	bl	62dc <_fwalk_reent>
    617c:	bd10      	pop	{r4, pc}
    617e:	46c0      	nop			; (mov r8, r8)
    6180:	0000611d 	.word	0x0000611d

00006184 <std.isra.0>:
    6184:	2300      	movs	r3, #0
    6186:	b510      	push	{r4, lr}
    6188:	0004      	movs	r4, r0
    618a:	6003      	str	r3, [r0, #0]
    618c:	6043      	str	r3, [r0, #4]
    618e:	6083      	str	r3, [r0, #8]
    6190:	8181      	strh	r1, [r0, #12]
    6192:	6643      	str	r3, [r0, #100]	; 0x64
    6194:	81c2      	strh	r2, [r0, #14]
    6196:	6103      	str	r3, [r0, #16]
    6198:	6143      	str	r3, [r0, #20]
    619a:	6183      	str	r3, [r0, #24]
    619c:	0019      	movs	r1, r3
    619e:	2208      	movs	r2, #8
    61a0:	305c      	adds	r0, #92	; 0x5c
    61a2:	f7ff fe58 	bl	5e56 <memset>
    61a6:	4b05      	ldr	r3, [pc, #20]	; (61bc <std.isra.0+0x38>)
    61a8:	6224      	str	r4, [r4, #32]
    61aa:	6263      	str	r3, [r4, #36]	; 0x24
    61ac:	4b04      	ldr	r3, [pc, #16]	; (61c0 <std.isra.0+0x3c>)
    61ae:	62a3      	str	r3, [r4, #40]	; 0x28
    61b0:	4b04      	ldr	r3, [pc, #16]	; (61c4 <std.isra.0+0x40>)
    61b2:	62e3      	str	r3, [r4, #44]	; 0x2c
    61b4:	4b04      	ldr	r3, [pc, #16]	; (61c8 <std.isra.0+0x44>)
    61b6:	6323      	str	r3, [r4, #48]	; 0x30
    61b8:	bd10      	pop	{r4, pc}
    61ba:	46c0      	nop			; (mov r8, r8)
    61bc:	00006b01 	.word	0x00006b01
    61c0:	00006b29 	.word	0x00006b29
    61c4:	00006b61 	.word	0x00006b61
    61c8:	00006b8d 	.word	0x00006b8d

000061cc <__sfmoreglue>:
    61cc:	b570      	push	{r4, r5, r6, lr}
    61ce:	2568      	movs	r5, #104	; 0x68
    61d0:	1e4b      	subs	r3, r1, #1
    61d2:	435d      	muls	r5, r3
    61d4:	000e      	movs	r6, r1
    61d6:	0029      	movs	r1, r5
    61d8:	3174      	adds	r1, #116	; 0x74
    61da:	f000 f955 	bl	6488 <_malloc_r>
    61de:	1e04      	subs	r4, r0, #0
    61e0:	d008      	beq.n	61f4 <__sfmoreglue+0x28>
    61e2:	2100      	movs	r1, #0
    61e4:	002a      	movs	r2, r5
    61e6:	6001      	str	r1, [r0, #0]
    61e8:	6046      	str	r6, [r0, #4]
    61ea:	300c      	adds	r0, #12
    61ec:	60a0      	str	r0, [r4, #8]
    61ee:	3268      	adds	r2, #104	; 0x68
    61f0:	f7ff fe31 	bl	5e56 <memset>
    61f4:	0020      	movs	r0, r4
    61f6:	bd70      	pop	{r4, r5, r6, pc}

000061f8 <__sinit>:
    61f8:	6983      	ldr	r3, [r0, #24]
    61fa:	b513      	push	{r0, r1, r4, lr}
    61fc:	0004      	movs	r4, r0
    61fe:	2b00      	cmp	r3, #0
    6200:	d128      	bne.n	6254 <__sinit+0x5c>
    6202:	6483      	str	r3, [r0, #72]	; 0x48
    6204:	64c3      	str	r3, [r0, #76]	; 0x4c
    6206:	6503      	str	r3, [r0, #80]	; 0x50
    6208:	4b13      	ldr	r3, [pc, #76]	; (6258 <__sinit+0x60>)
    620a:	4a14      	ldr	r2, [pc, #80]	; (625c <__sinit+0x64>)
    620c:	681b      	ldr	r3, [r3, #0]
    620e:	6282      	str	r2, [r0, #40]	; 0x28
    6210:	9301      	str	r3, [sp, #4]
    6212:	4298      	cmp	r0, r3
    6214:	d101      	bne.n	621a <__sinit+0x22>
    6216:	2301      	movs	r3, #1
    6218:	6183      	str	r3, [r0, #24]
    621a:	0020      	movs	r0, r4
    621c:	f000 f820 	bl	6260 <__sfp>
    6220:	6060      	str	r0, [r4, #4]
    6222:	0020      	movs	r0, r4
    6224:	f000 f81c 	bl	6260 <__sfp>
    6228:	60a0      	str	r0, [r4, #8]
    622a:	0020      	movs	r0, r4
    622c:	f000 f818 	bl	6260 <__sfp>
    6230:	2200      	movs	r2, #0
    6232:	60e0      	str	r0, [r4, #12]
    6234:	2104      	movs	r1, #4
    6236:	6860      	ldr	r0, [r4, #4]
    6238:	f7ff ffa4 	bl	6184 <std.isra.0>
    623c:	2201      	movs	r2, #1
    623e:	2109      	movs	r1, #9
    6240:	68a0      	ldr	r0, [r4, #8]
    6242:	f7ff ff9f 	bl	6184 <std.isra.0>
    6246:	2202      	movs	r2, #2
    6248:	2112      	movs	r1, #18
    624a:	68e0      	ldr	r0, [r4, #12]
    624c:	f7ff ff9a 	bl	6184 <std.isra.0>
    6250:	2301      	movs	r3, #1
    6252:	61a3      	str	r3, [r4, #24]
    6254:	bd13      	pop	{r0, r1, r4, pc}
    6256:	46c0      	nop			; (mov r8, r8)
    6258:	000072f0 	.word	0x000072f0
    625c:	00006175 	.word	0x00006175

00006260 <__sfp>:
    6260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6262:	4b1d      	ldr	r3, [pc, #116]	; (62d8 <__sfp+0x78>)
    6264:	0006      	movs	r6, r0
    6266:	681d      	ldr	r5, [r3, #0]
    6268:	69ab      	ldr	r3, [r5, #24]
    626a:	2b00      	cmp	r3, #0
    626c:	d102      	bne.n	6274 <__sfp+0x14>
    626e:	0028      	movs	r0, r5
    6270:	f7ff ffc2 	bl	61f8 <__sinit>
    6274:	3548      	adds	r5, #72	; 0x48
    6276:	68ac      	ldr	r4, [r5, #8]
    6278:	686b      	ldr	r3, [r5, #4]
    627a:	3b01      	subs	r3, #1
    627c:	d405      	bmi.n	628a <__sfp+0x2a>
    627e:	220c      	movs	r2, #12
    6280:	5ea7      	ldrsh	r7, [r4, r2]
    6282:	2f00      	cmp	r7, #0
    6284:	d010      	beq.n	62a8 <__sfp+0x48>
    6286:	3468      	adds	r4, #104	; 0x68
    6288:	e7f7      	b.n	627a <__sfp+0x1a>
    628a:	682b      	ldr	r3, [r5, #0]
    628c:	2b00      	cmp	r3, #0
    628e:	d001      	beq.n	6294 <__sfp+0x34>
    6290:	682d      	ldr	r5, [r5, #0]
    6292:	e7f0      	b.n	6276 <__sfp+0x16>
    6294:	2104      	movs	r1, #4
    6296:	0030      	movs	r0, r6
    6298:	f7ff ff98 	bl	61cc <__sfmoreglue>
    629c:	6028      	str	r0, [r5, #0]
    629e:	2800      	cmp	r0, #0
    62a0:	d1f6      	bne.n	6290 <__sfp+0x30>
    62a2:	230c      	movs	r3, #12
    62a4:	6033      	str	r3, [r6, #0]
    62a6:	e016      	b.n	62d6 <__sfp+0x76>
    62a8:	2301      	movs	r3, #1
    62aa:	0020      	movs	r0, r4
    62ac:	425b      	negs	r3, r3
    62ae:	81e3      	strh	r3, [r4, #14]
    62b0:	3302      	adds	r3, #2
    62b2:	81a3      	strh	r3, [r4, #12]
    62b4:	6667      	str	r7, [r4, #100]	; 0x64
    62b6:	6027      	str	r7, [r4, #0]
    62b8:	60a7      	str	r7, [r4, #8]
    62ba:	6067      	str	r7, [r4, #4]
    62bc:	6127      	str	r7, [r4, #16]
    62be:	6167      	str	r7, [r4, #20]
    62c0:	61a7      	str	r7, [r4, #24]
    62c2:	305c      	adds	r0, #92	; 0x5c
    62c4:	2208      	movs	r2, #8
    62c6:	0039      	movs	r1, r7
    62c8:	f7ff fdc5 	bl	5e56 <memset>
    62cc:	0020      	movs	r0, r4
    62ce:	6367      	str	r7, [r4, #52]	; 0x34
    62d0:	63a7      	str	r7, [r4, #56]	; 0x38
    62d2:	64a7      	str	r7, [r4, #72]	; 0x48
    62d4:	64e7      	str	r7, [r4, #76]	; 0x4c
    62d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    62d8:	000072f0 	.word	0x000072f0

000062dc <_fwalk_reent>:
    62dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    62de:	0004      	movs	r4, r0
    62e0:	0007      	movs	r7, r0
    62e2:	2600      	movs	r6, #0
    62e4:	9101      	str	r1, [sp, #4]
    62e6:	3448      	adds	r4, #72	; 0x48
    62e8:	2c00      	cmp	r4, #0
    62ea:	d016      	beq.n	631a <_fwalk_reent+0x3e>
    62ec:	6863      	ldr	r3, [r4, #4]
    62ee:	68a5      	ldr	r5, [r4, #8]
    62f0:	9300      	str	r3, [sp, #0]
    62f2:	9b00      	ldr	r3, [sp, #0]
    62f4:	3b01      	subs	r3, #1
    62f6:	9300      	str	r3, [sp, #0]
    62f8:	d40d      	bmi.n	6316 <_fwalk_reent+0x3a>
    62fa:	89ab      	ldrh	r3, [r5, #12]
    62fc:	2b01      	cmp	r3, #1
    62fe:	d908      	bls.n	6312 <_fwalk_reent+0x36>
    6300:	220e      	movs	r2, #14
    6302:	5eab      	ldrsh	r3, [r5, r2]
    6304:	3301      	adds	r3, #1
    6306:	d004      	beq.n	6312 <_fwalk_reent+0x36>
    6308:	0029      	movs	r1, r5
    630a:	0038      	movs	r0, r7
    630c:	9b01      	ldr	r3, [sp, #4]
    630e:	4798      	blx	r3
    6310:	4306      	orrs	r6, r0
    6312:	3568      	adds	r5, #104	; 0x68
    6314:	e7ed      	b.n	62f2 <_fwalk_reent+0x16>
    6316:	6824      	ldr	r4, [r4, #0]
    6318:	e7e6      	b.n	62e8 <_fwalk_reent+0xc>
    631a:	0030      	movs	r0, r6
    631c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00006320 <__swhatbuf_r>:
    6320:	b570      	push	{r4, r5, r6, lr}
    6322:	000e      	movs	r6, r1
    6324:	001d      	movs	r5, r3
    6326:	230e      	movs	r3, #14
    6328:	5ec9      	ldrsh	r1, [r1, r3]
    632a:	b090      	sub	sp, #64	; 0x40
    632c:	0014      	movs	r4, r2
    632e:	2900      	cmp	r1, #0
    6330:	da06      	bge.n	6340 <__swhatbuf_r+0x20>
    6332:	2300      	movs	r3, #0
    6334:	602b      	str	r3, [r5, #0]
    6336:	89b3      	ldrh	r3, [r6, #12]
    6338:	061b      	lsls	r3, r3, #24
    633a:	d50f      	bpl.n	635c <__swhatbuf_r+0x3c>
    633c:	2340      	movs	r3, #64	; 0x40
    633e:	e00f      	b.n	6360 <__swhatbuf_r+0x40>
    6340:	aa01      	add	r2, sp, #4
    6342:	f000 fd1d 	bl	6d80 <_fstat_r>
    6346:	2800      	cmp	r0, #0
    6348:	dbf3      	blt.n	6332 <__swhatbuf_r+0x12>
    634a:	23f0      	movs	r3, #240	; 0xf0
    634c:	9a02      	ldr	r2, [sp, #8]
    634e:	021b      	lsls	r3, r3, #8
    6350:	4013      	ands	r3, r2
    6352:	4a05      	ldr	r2, [pc, #20]	; (6368 <__swhatbuf_r+0x48>)
    6354:	189b      	adds	r3, r3, r2
    6356:	425a      	negs	r2, r3
    6358:	4153      	adcs	r3, r2
    635a:	602b      	str	r3, [r5, #0]
    635c:	2380      	movs	r3, #128	; 0x80
    635e:	00db      	lsls	r3, r3, #3
    6360:	2000      	movs	r0, #0
    6362:	6023      	str	r3, [r4, #0]
    6364:	b010      	add	sp, #64	; 0x40
    6366:	bd70      	pop	{r4, r5, r6, pc}
    6368:	ffffe000 	.word	0xffffe000

0000636c <__smakebuf_r>:
    636c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    636e:	2602      	movs	r6, #2
    6370:	898b      	ldrh	r3, [r1, #12]
    6372:	0005      	movs	r5, r0
    6374:	000c      	movs	r4, r1
    6376:	4233      	tst	r3, r6
    6378:	d110      	bne.n	639c <__smakebuf_r+0x30>
    637a:	ab01      	add	r3, sp, #4
    637c:	466a      	mov	r2, sp
    637e:	f7ff ffcf 	bl	6320 <__swhatbuf_r>
    6382:	9900      	ldr	r1, [sp, #0]
    6384:	0007      	movs	r7, r0
    6386:	0028      	movs	r0, r5
    6388:	f000 f87e 	bl	6488 <_malloc_r>
    638c:	2800      	cmp	r0, #0
    638e:	d10c      	bne.n	63aa <__smakebuf_r+0x3e>
    6390:	220c      	movs	r2, #12
    6392:	5ea3      	ldrsh	r3, [r4, r2]
    6394:	059a      	lsls	r2, r3, #22
    6396:	d423      	bmi.n	63e0 <__smakebuf_r+0x74>
    6398:	4333      	orrs	r3, r6
    639a:	81a3      	strh	r3, [r4, #12]
    639c:	0023      	movs	r3, r4
    639e:	3347      	adds	r3, #71	; 0x47
    63a0:	6023      	str	r3, [r4, #0]
    63a2:	6123      	str	r3, [r4, #16]
    63a4:	2301      	movs	r3, #1
    63a6:	6163      	str	r3, [r4, #20]
    63a8:	e01a      	b.n	63e0 <__smakebuf_r+0x74>
    63aa:	2280      	movs	r2, #128	; 0x80
    63ac:	4b0d      	ldr	r3, [pc, #52]	; (63e4 <__smakebuf_r+0x78>)
    63ae:	62ab      	str	r3, [r5, #40]	; 0x28
    63b0:	89a3      	ldrh	r3, [r4, #12]
    63b2:	6020      	str	r0, [r4, #0]
    63b4:	4313      	orrs	r3, r2
    63b6:	81a3      	strh	r3, [r4, #12]
    63b8:	9b00      	ldr	r3, [sp, #0]
    63ba:	6120      	str	r0, [r4, #16]
    63bc:	6163      	str	r3, [r4, #20]
    63be:	9b01      	ldr	r3, [sp, #4]
    63c0:	2b00      	cmp	r3, #0
    63c2:	d00a      	beq.n	63da <__smakebuf_r+0x6e>
    63c4:	230e      	movs	r3, #14
    63c6:	5ee1      	ldrsh	r1, [r4, r3]
    63c8:	0028      	movs	r0, r5
    63ca:	f000 fceb 	bl	6da4 <_isatty_r>
    63ce:	2800      	cmp	r0, #0
    63d0:	d003      	beq.n	63da <__smakebuf_r+0x6e>
    63d2:	2201      	movs	r2, #1
    63d4:	89a3      	ldrh	r3, [r4, #12]
    63d6:	4313      	orrs	r3, r2
    63d8:	81a3      	strh	r3, [r4, #12]
    63da:	89a3      	ldrh	r3, [r4, #12]
    63dc:	431f      	orrs	r7, r3
    63de:	81a7      	strh	r7, [r4, #12]
    63e0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    63e2:	46c0      	nop			; (mov r8, r8)
    63e4:	00006175 	.word	0x00006175

000063e8 <malloc>:
    63e8:	b510      	push	{r4, lr}
    63ea:	4b03      	ldr	r3, [pc, #12]	; (63f8 <malloc+0x10>)
    63ec:	0001      	movs	r1, r0
    63ee:	6818      	ldr	r0, [r3, #0]
    63f0:	f000 f84a 	bl	6488 <_malloc_r>
    63f4:	bd10      	pop	{r4, pc}
    63f6:	46c0      	nop			; (mov r8, r8)
    63f8:	20000098 	.word	0x20000098

000063fc <_free_r>:
    63fc:	b530      	push	{r4, r5, lr}
    63fe:	2900      	cmp	r1, #0
    6400:	d03e      	beq.n	6480 <_free_r+0x84>
    6402:	3904      	subs	r1, #4
    6404:	680b      	ldr	r3, [r1, #0]
    6406:	2b00      	cmp	r3, #0
    6408:	da00      	bge.n	640c <_free_r+0x10>
    640a:	18c9      	adds	r1, r1, r3
    640c:	4a1d      	ldr	r2, [pc, #116]	; (6484 <_free_r+0x88>)
    640e:	6813      	ldr	r3, [r2, #0]
    6410:	0014      	movs	r4, r2
    6412:	2b00      	cmp	r3, #0
    6414:	d102      	bne.n	641c <_free_r+0x20>
    6416:	604b      	str	r3, [r1, #4]
    6418:	6011      	str	r1, [r2, #0]
    641a:	e031      	b.n	6480 <_free_r+0x84>
    641c:	428b      	cmp	r3, r1
    641e:	d90d      	bls.n	643c <_free_r+0x40>
    6420:	680a      	ldr	r2, [r1, #0]
    6422:	1888      	adds	r0, r1, r2
    6424:	4283      	cmp	r3, r0
    6426:	d103      	bne.n	6430 <_free_r+0x34>
    6428:	6818      	ldr	r0, [r3, #0]
    642a:	685b      	ldr	r3, [r3, #4]
    642c:	1882      	adds	r2, r0, r2
    642e:	600a      	str	r2, [r1, #0]
    6430:	604b      	str	r3, [r1, #4]
    6432:	6021      	str	r1, [r4, #0]
    6434:	e024      	b.n	6480 <_free_r+0x84>
    6436:	428a      	cmp	r2, r1
    6438:	d803      	bhi.n	6442 <_free_r+0x46>
    643a:	0013      	movs	r3, r2
    643c:	685a      	ldr	r2, [r3, #4]
    643e:	2a00      	cmp	r2, #0
    6440:	d1f9      	bne.n	6436 <_free_r+0x3a>
    6442:	681d      	ldr	r5, [r3, #0]
    6444:	195c      	adds	r4, r3, r5
    6446:	428c      	cmp	r4, r1
    6448:	d10b      	bne.n	6462 <_free_r+0x66>
    644a:	6809      	ldr	r1, [r1, #0]
    644c:	1869      	adds	r1, r5, r1
    644e:	1858      	adds	r0, r3, r1
    6450:	6019      	str	r1, [r3, #0]
    6452:	4282      	cmp	r2, r0
    6454:	d114      	bne.n	6480 <_free_r+0x84>
    6456:	6810      	ldr	r0, [r2, #0]
    6458:	6852      	ldr	r2, [r2, #4]
    645a:	1841      	adds	r1, r0, r1
    645c:	6019      	str	r1, [r3, #0]
    645e:	605a      	str	r2, [r3, #4]
    6460:	e00e      	b.n	6480 <_free_r+0x84>
    6462:	428c      	cmp	r4, r1
    6464:	d902      	bls.n	646c <_free_r+0x70>
    6466:	230c      	movs	r3, #12
    6468:	6003      	str	r3, [r0, #0]
    646a:	e009      	b.n	6480 <_free_r+0x84>
    646c:	6808      	ldr	r0, [r1, #0]
    646e:	180c      	adds	r4, r1, r0
    6470:	42a2      	cmp	r2, r4
    6472:	d103      	bne.n	647c <_free_r+0x80>
    6474:	6814      	ldr	r4, [r2, #0]
    6476:	6852      	ldr	r2, [r2, #4]
    6478:	1820      	adds	r0, r4, r0
    647a:	6008      	str	r0, [r1, #0]
    647c:	604a      	str	r2, [r1, #4]
    647e:	6059      	str	r1, [r3, #4]
    6480:	bd30      	pop	{r4, r5, pc}
    6482:	46c0      	nop			; (mov r8, r8)
    6484:	20000494 	.word	0x20000494

00006488 <_malloc_r>:
    6488:	2303      	movs	r3, #3
    648a:	b570      	push	{r4, r5, r6, lr}
    648c:	1ccd      	adds	r5, r1, #3
    648e:	439d      	bics	r5, r3
    6490:	3508      	adds	r5, #8
    6492:	0006      	movs	r6, r0
    6494:	2d0c      	cmp	r5, #12
    6496:	d201      	bcs.n	649c <_malloc_r+0x14>
    6498:	250c      	movs	r5, #12
    649a:	e005      	b.n	64a8 <_malloc_r+0x20>
    649c:	2d00      	cmp	r5, #0
    649e:	da03      	bge.n	64a8 <_malloc_r+0x20>
    64a0:	230c      	movs	r3, #12
    64a2:	2000      	movs	r0, #0
    64a4:	6033      	str	r3, [r6, #0]
    64a6:	e040      	b.n	652a <_malloc_r+0xa2>
    64a8:	42a9      	cmp	r1, r5
    64aa:	d8f9      	bhi.n	64a0 <_malloc_r+0x18>
    64ac:	4b1f      	ldr	r3, [pc, #124]	; (652c <_malloc_r+0xa4>)
    64ae:	681c      	ldr	r4, [r3, #0]
    64b0:	001a      	movs	r2, r3
    64b2:	0021      	movs	r1, r4
    64b4:	2900      	cmp	r1, #0
    64b6:	d013      	beq.n	64e0 <_malloc_r+0x58>
    64b8:	680b      	ldr	r3, [r1, #0]
    64ba:	1b5b      	subs	r3, r3, r5
    64bc:	d40d      	bmi.n	64da <_malloc_r+0x52>
    64be:	2b0b      	cmp	r3, #11
    64c0:	d902      	bls.n	64c8 <_malloc_r+0x40>
    64c2:	600b      	str	r3, [r1, #0]
    64c4:	18cc      	adds	r4, r1, r3
    64c6:	e01e      	b.n	6506 <_malloc_r+0x7e>
    64c8:	428c      	cmp	r4, r1
    64ca:	d102      	bne.n	64d2 <_malloc_r+0x4a>
    64cc:	6863      	ldr	r3, [r4, #4]
    64ce:	6013      	str	r3, [r2, #0]
    64d0:	e01a      	b.n	6508 <_malloc_r+0x80>
    64d2:	684b      	ldr	r3, [r1, #4]
    64d4:	6063      	str	r3, [r4, #4]
    64d6:	000c      	movs	r4, r1
    64d8:	e016      	b.n	6508 <_malloc_r+0x80>
    64da:	000c      	movs	r4, r1
    64dc:	6849      	ldr	r1, [r1, #4]
    64de:	e7e9      	b.n	64b4 <_malloc_r+0x2c>
    64e0:	4c13      	ldr	r4, [pc, #76]	; (6530 <_malloc_r+0xa8>)
    64e2:	6823      	ldr	r3, [r4, #0]
    64e4:	2b00      	cmp	r3, #0
    64e6:	d103      	bne.n	64f0 <_malloc_r+0x68>
    64e8:	0030      	movs	r0, r6
    64ea:	f000 faf7 	bl	6adc <_sbrk_r>
    64ee:	6020      	str	r0, [r4, #0]
    64f0:	0029      	movs	r1, r5
    64f2:	0030      	movs	r0, r6
    64f4:	f000 faf2 	bl	6adc <_sbrk_r>
    64f8:	1c43      	adds	r3, r0, #1
    64fa:	d0d1      	beq.n	64a0 <_malloc_r+0x18>
    64fc:	2303      	movs	r3, #3
    64fe:	1cc4      	adds	r4, r0, #3
    6500:	439c      	bics	r4, r3
    6502:	42a0      	cmp	r0, r4
    6504:	d10a      	bne.n	651c <_malloc_r+0x94>
    6506:	6025      	str	r5, [r4, #0]
    6508:	0020      	movs	r0, r4
    650a:	2207      	movs	r2, #7
    650c:	300b      	adds	r0, #11
    650e:	1d23      	adds	r3, r4, #4
    6510:	4390      	bics	r0, r2
    6512:	1ac3      	subs	r3, r0, r3
    6514:	d009      	beq.n	652a <_malloc_r+0xa2>
    6516:	425a      	negs	r2, r3
    6518:	50e2      	str	r2, [r4, r3]
    651a:	e006      	b.n	652a <_malloc_r+0xa2>
    651c:	1a21      	subs	r1, r4, r0
    651e:	0030      	movs	r0, r6
    6520:	f000 fadc 	bl	6adc <_sbrk_r>
    6524:	1c43      	adds	r3, r0, #1
    6526:	d1ee      	bne.n	6506 <_malloc_r+0x7e>
    6528:	e7ba      	b.n	64a0 <_malloc_r+0x18>
    652a:	bd70      	pop	{r4, r5, r6, pc}
    652c:	20000494 	.word	0x20000494
    6530:	20000490 	.word	0x20000490

00006534 <__sfputc_r>:
    6534:	6893      	ldr	r3, [r2, #8]
    6536:	b510      	push	{r4, lr}
    6538:	3b01      	subs	r3, #1
    653a:	6093      	str	r3, [r2, #8]
    653c:	2b00      	cmp	r3, #0
    653e:	da05      	bge.n	654c <__sfputc_r+0x18>
    6540:	6994      	ldr	r4, [r2, #24]
    6542:	42a3      	cmp	r3, r4
    6544:	db08      	blt.n	6558 <__sfputc_r+0x24>
    6546:	b2cb      	uxtb	r3, r1
    6548:	2b0a      	cmp	r3, #10
    654a:	d005      	beq.n	6558 <__sfputc_r+0x24>
    654c:	6813      	ldr	r3, [r2, #0]
    654e:	1c58      	adds	r0, r3, #1
    6550:	6010      	str	r0, [r2, #0]
    6552:	7019      	strb	r1, [r3, #0]
    6554:	b2c8      	uxtb	r0, r1
    6556:	e001      	b.n	655c <__sfputc_r+0x28>
    6558:	f000 fb1e 	bl	6b98 <__swbuf_r>
    655c:	bd10      	pop	{r4, pc}

0000655e <__sfputs_r>:
    655e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6560:	0006      	movs	r6, r0
    6562:	000f      	movs	r7, r1
    6564:	0014      	movs	r4, r2
    6566:	18d5      	adds	r5, r2, r3
    6568:	42ac      	cmp	r4, r5
    656a:	d008      	beq.n	657e <__sfputs_r+0x20>
    656c:	7821      	ldrb	r1, [r4, #0]
    656e:	003a      	movs	r2, r7
    6570:	0030      	movs	r0, r6
    6572:	f7ff ffdf 	bl	6534 <__sfputc_r>
    6576:	3401      	adds	r4, #1
    6578:	1c43      	adds	r3, r0, #1
    657a:	d1f5      	bne.n	6568 <__sfputs_r+0xa>
    657c:	e000      	b.n	6580 <__sfputs_r+0x22>
    657e:	2000      	movs	r0, #0
    6580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00006584 <_vfiprintf_r>:
    6584:	b5f0      	push	{r4, r5, r6, r7, lr}
    6586:	b09f      	sub	sp, #124	; 0x7c
    6588:	0006      	movs	r6, r0
    658a:	000f      	movs	r7, r1
    658c:	9202      	str	r2, [sp, #8]
    658e:	9305      	str	r3, [sp, #20]
    6590:	2800      	cmp	r0, #0
    6592:	d004      	beq.n	659e <_vfiprintf_r+0x1a>
    6594:	6983      	ldr	r3, [r0, #24]
    6596:	2b00      	cmp	r3, #0
    6598:	d101      	bne.n	659e <_vfiprintf_r+0x1a>
    659a:	f7ff fe2d 	bl	61f8 <__sinit>
    659e:	4b7f      	ldr	r3, [pc, #508]	; (679c <_vfiprintf_r+0x218>)
    65a0:	429f      	cmp	r7, r3
    65a2:	d101      	bne.n	65a8 <_vfiprintf_r+0x24>
    65a4:	6877      	ldr	r7, [r6, #4]
    65a6:	e008      	b.n	65ba <_vfiprintf_r+0x36>
    65a8:	4b7d      	ldr	r3, [pc, #500]	; (67a0 <_vfiprintf_r+0x21c>)
    65aa:	429f      	cmp	r7, r3
    65ac:	d101      	bne.n	65b2 <_vfiprintf_r+0x2e>
    65ae:	68b7      	ldr	r7, [r6, #8]
    65b0:	e003      	b.n	65ba <_vfiprintf_r+0x36>
    65b2:	4b7c      	ldr	r3, [pc, #496]	; (67a4 <_vfiprintf_r+0x220>)
    65b4:	429f      	cmp	r7, r3
    65b6:	d100      	bne.n	65ba <_vfiprintf_r+0x36>
    65b8:	68f7      	ldr	r7, [r6, #12]
    65ba:	89bb      	ldrh	r3, [r7, #12]
    65bc:	071b      	lsls	r3, r3, #28
    65be:	d50a      	bpl.n	65d6 <_vfiprintf_r+0x52>
    65c0:	693b      	ldr	r3, [r7, #16]
    65c2:	2b00      	cmp	r3, #0
    65c4:	d007      	beq.n	65d6 <_vfiprintf_r+0x52>
    65c6:	2300      	movs	r3, #0
    65c8:	ad06      	add	r5, sp, #24
    65ca:	616b      	str	r3, [r5, #20]
    65cc:	3320      	adds	r3, #32
    65ce:	766b      	strb	r3, [r5, #25]
    65d0:	3310      	adds	r3, #16
    65d2:	76ab      	strb	r3, [r5, #26]
    65d4:	e03d      	b.n	6652 <_vfiprintf_r+0xce>
    65d6:	0039      	movs	r1, r7
    65d8:	0030      	movs	r0, r6
    65da:	f000 fb49 	bl	6c70 <__swsetup_r>
    65de:	2800      	cmp	r0, #0
    65e0:	d0f1      	beq.n	65c6 <_vfiprintf_r+0x42>
    65e2:	2001      	movs	r0, #1
    65e4:	4240      	negs	r0, r0
    65e6:	e0d6      	b.n	6796 <_vfiprintf_r+0x212>
    65e8:	9a05      	ldr	r2, [sp, #20]
    65ea:	1d11      	adds	r1, r2, #4
    65ec:	6812      	ldr	r2, [r2, #0]
    65ee:	9105      	str	r1, [sp, #20]
    65f0:	2a00      	cmp	r2, #0
    65f2:	da00      	bge.n	65f6 <_vfiprintf_r+0x72>
    65f4:	e07f      	b.n	66f6 <_vfiprintf_r+0x172>
    65f6:	9209      	str	r2, [sp, #36]	; 0x24
    65f8:	3401      	adds	r4, #1
    65fa:	7823      	ldrb	r3, [r4, #0]
    65fc:	2b2e      	cmp	r3, #46	; 0x2e
    65fe:	d100      	bne.n	6602 <_vfiprintf_r+0x7e>
    6600:	e08d      	b.n	671e <_vfiprintf_r+0x19a>
    6602:	7821      	ldrb	r1, [r4, #0]
    6604:	2203      	movs	r2, #3
    6606:	4868      	ldr	r0, [pc, #416]	; (67a8 <_vfiprintf_r+0x224>)
    6608:	f000 fbf2 	bl	6df0 <memchr>
    660c:	2800      	cmp	r0, #0
    660e:	d007      	beq.n	6620 <_vfiprintf_r+0x9c>
    6610:	4b65      	ldr	r3, [pc, #404]	; (67a8 <_vfiprintf_r+0x224>)
    6612:	682a      	ldr	r2, [r5, #0]
    6614:	1ac0      	subs	r0, r0, r3
    6616:	2340      	movs	r3, #64	; 0x40
    6618:	4083      	lsls	r3, r0
    661a:	4313      	orrs	r3, r2
    661c:	602b      	str	r3, [r5, #0]
    661e:	3401      	adds	r4, #1
    6620:	7821      	ldrb	r1, [r4, #0]
    6622:	1c63      	adds	r3, r4, #1
    6624:	2206      	movs	r2, #6
    6626:	4861      	ldr	r0, [pc, #388]	; (67ac <_vfiprintf_r+0x228>)
    6628:	9302      	str	r3, [sp, #8]
    662a:	7629      	strb	r1, [r5, #24]
    662c:	f000 fbe0 	bl	6df0 <memchr>
    6630:	2800      	cmp	r0, #0
    6632:	d100      	bne.n	6636 <_vfiprintf_r+0xb2>
    6634:	e09d      	b.n	6772 <_vfiprintf_r+0x1ee>
    6636:	4b5e      	ldr	r3, [pc, #376]	; (67b0 <_vfiprintf_r+0x22c>)
    6638:	2b00      	cmp	r3, #0
    663a:	d000      	beq.n	663e <_vfiprintf_r+0xba>
    663c:	e090      	b.n	6760 <_vfiprintf_r+0x1dc>
    663e:	2207      	movs	r2, #7
    6640:	9b05      	ldr	r3, [sp, #20]
    6642:	3307      	adds	r3, #7
    6644:	4393      	bics	r3, r2
    6646:	3308      	adds	r3, #8
    6648:	9305      	str	r3, [sp, #20]
    664a:	696b      	ldr	r3, [r5, #20]
    664c:	9a03      	ldr	r2, [sp, #12]
    664e:	189b      	adds	r3, r3, r2
    6650:	616b      	str	r3, [r5, #20]
    6652:	9c02      	ldr	r4, [sp, #8]
    6654:	7823      	ldrb	r3, [r4, #0]
    6656:	2b00      	cmp	r3, #0
    6658:	d104      	bne.n	6664 <_vfiprintf_r+0xe0>
    665a:	9b02      	ldr	r3, [sp, #8]
    665c:	1ae3      	subs	r3, r4, r3
    665e:	9304      	str	r3, [sp, #16]
    6660:	d012      	beq.n	6688 <_vfiprintf_r+0x104>
    6662:	e003      	b.n	666c <_vfiprintf_r+0xe8>
    6664:	2b25      	cmp	r3, #37	; 0x25
    6666:	d0f8      	beq.n	665a <_vfiprintf_r+0xd6>
    6668:	3401      	adds	r4, #1
    666a:	e7f3      	b.n	6654 <_vfiprintf_r+0xd0>
    666c:	9b04      	ldr	r3, [sp, #16]
    666e:	9a02      	ldr	r2, [sp, #8]
    6670:	0039      	movs	r1, r7
    6672:	0030      	movs	r0, r6
    6674:	f7ff ff73 	bl	655e <__sfputs_r>
    6678:	1c43      	adds	r3, r0, #1
    667a:	d100      	bne.n	667e <_vfiprintf_r+0xfa>
    667c:	e086      	b.n	678c <_vfiprintf_r+0x208>
    667e:	696a      	ldr	r2, [r5, #20]
    6680:	9b04      	ldr	r3, [sp, #16]
    6682:	4694      	mov	ip, r2
    6684:	4463      	add	r3, ip
    6686:	616b      	str	r3, [r5, #20]
    6688:	7823      	ldrb	r3, [r4, #0]
    668a:	2b00      	cmp	r3, #0
    668c:	d07e      	beq.n	678c <_vfiprintf_r+0x208>
    668e:	2201      	movs	r2, #1
    6690:	2300      	movs	r3, #0
    6692:	4252      	negs	r2, r2
    6694:	606a      	str	r2, [r5, #4]
    6696:	a902      	add	r1, sp, #8
    6698:	3254      	adds	r2, #84	; 0x54
    669a:	1852      	adds	r2, r2, r1
    669c:	3401      	adds	r4, #1
    669e:	602b      	str	r3, [r5, #0]
    66a0:	60eb      	str	r3, [r5, #12]
    66a2:	60ab      	str	r3, [r5, #8]
    66a4:	7013      	strb	r3, [r2, #0]
    66a6:	65ab      	str	r3, [r5, #88]	; 0x58
    66a8:	7821      	ldrb	r1, [r4, #0]
    66aa:	2205      	movs	r2, #5
    66ac:	4841      	ldr	r0, [pc, #260]	; (67b4 <_vfiprintf_r+0x230>)
    66ae:	f000 fb9f 	bl	6df0 <memchr>
    66b2:	2800      	cmp	r0, #0
    66b4:	d008      	beq.n	66c8 <_vfiprintf_r+0x144>
    66b6:	4b3f      	ldr	r3, [pc, #252]	; (67b4 <_vfiprintf_r+0x230>)
    66b8:	682a      	ldr	r2, [r5, #0]
    66ba:	1ac0      	subs	r0, r0, r3
    66bc:	2301      	movs	r3, #1
    66be:	4083      	lsls	r3, r0
    66c0:	4313      	orrs	r3, r2
    66c2:	602b      	str	r3, [r5, #0]
    66c4:	3401      	adds	r4, #1
    66c6:	e7ef      	b.n	66a8 <_vfiprintf_r+0x124>
    66c8:	682b      	ldr	r3, [r5, #0]
    66ca:	06da      	lsls	r2, r3, #27
    66cc:	d504      	bpl.n	66d8 <_vfiprintf_r+0x154>
    66ce:	2253      	movs	r2, #83	; 0x53
    66d0:	2120      	movs	r1, #32
    66d2:	a802      	add	r0, sp, #8
    66d4:	1812      	adds	r2, r2, r0
    66d6:	7011      	strb	r1, [r2, #0]
    66d8:	071a      	lsls	r2, r3, #28
    66da:	d504      	bpl.n	66e6 <_vfiprintf_r+0x162>
    66dc:	2253      	movs	r2, #83	; 0x53
    66de:	212b      	movs	r1, #43	; 0x2b
    66e0:	a802      	add	r0, sp, #8
    66e2:	1812      	adds	r2, r2, r0
    66e4:	7011      	strb	r1, [r2, #0]
    66e6:	7822      	ldrb	r2, [r4, #0]
    66e8:	2a2a      	cmp	r2, #42	; 0x2a
    66ea:	d100      	bne.n	66ee <_vfiprintf_r+0x16a>
    66ec:	e77c      	b.n	65e8 <_vfiprintf_r+0x64>
    66ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    66f0:	2000      	movs	r0, #0
    66f2:	210a      	movs	r1, #10
    66f4:	e005      	b.n	6702 <_vfiprintf_r+0x17e>
    66f6:	4252      	negs	r2, r2
    66f8:	60ea      	str	r2, [r5, #12]
    66fa:	2202      	movs	r2, #2
    66fc:	4313      	orrs	r3, r2
    66fe:	602b      	str	r3, [r5, #0]
    6700:	e77a      	b.n	65f8 <_vfiprintf_r+0x74>
    6702:	7822      	ldrb	r2, [r4, #0]
    6704:	3a30      	subs	r2, #48	; 0x30
    6706:	2a09      	cmp	r2, #9
    6708:	d804      	bhi.n	6714 <_vfiprintf_r+0x190>
    670a:	434b      	muls	r3, r1
    670c:	3401      	adds	r4, #1
    670e:	189b      	adds	r3, r3, r2
    6710:	2001      	movs	r0, #1
    6712:	e7f6      	b.n	6702 <_vfiprintf_r+0x17e>
    6714:	2800      	cmp	r0, #0
    6716:	d100      	bne.n	671a <_vfiprintf_r+0x196>
    6718:	e76f      	b.n	65fa <_vfiprintf_r+0x76>
    671a:	9309      	str	r3, [sp, #36]	; 0x24
    671c:	e76d      	b.n	65fa <_vfiprintf_r+0x76>
    671e:	7863      	ldrb	r3, [r4, #1]
    6720:	2b2a      	cmp	r3, #42	; 0x2a
    6722:	d10a      	bne.n	673a <_vfiprintf_r+0x1b6>
    6724:	9b05      	ldr	r3, [sp, #20]
    6726:	3402      	adds	r4, #2
    6728:	1d1a      	adds	r2, r3, #4
    672a:	681b      	ldr	r3, [r3, #0]
    672c:	9205      	str	r2, [sp, #20]
    672e:	2b00      	cmp	r3, #0
    6730:	da01      	bge.n	6736 <_vfiprintf_r+0x1b2>
    6732:	2301      	movs	r3, #1
    6734:	425b      	negs	r3, r3
    6736:	9307      	str	r3, [sp, #28]
    6738:	e763      	b.n	6602 <_vfiprintf_r+0x7e>
    673a:	2300      	movs	r3, #0
    673c:	200a      	movs	r0, #10
    673e:	001a      	movs	r2, r3
    6740:	3401      	adds	r4, #1
    6742:	606b      	str	r3, [r5, #4]
    6744:	7821      	ldrb	r1, [r4, #0]
    6746:	3930      	subs	r1, #48	; 0x30
    6748:	2909      	cmp	r1, #9
    674a:	d804      	bhi.n	6756 <_vfiprintf_r+0x1d2>
    674c:	4342      	muls	r2, r0
    674e:	3401      	adds	r4, #1
    6750:	1852      	adds	r2, r2, r1
    6752:	2301      	movs	r3, #1
    6754:	e7f6      	b.n	6744 <_vfiprintf_r+0x1c0>
    6756:	2b00      	cmp	r3, #0
    6758:	d100      	bne.n	675c <_vfiprintf_r+0x1d8>
    675a:	e752      	b.n	6602 <_vfiprintf_r+0x7e>
    675c:	9207      	str	r2, [sp, #28]
    675e:	e750      	b.n	6602 <_vfiprintf_r+0x7e>
    6760:	ab05      	add	r3, sp, #20
    6762:	9300      	str	r3, [sp, #0]
    6764:	003a      	movs	r2, r7
    6766:	4b14      	ldr	r3, [pc, #80]	; (67b8 <_vfiprintf_r+0x234>)
    6768:	0029      	movs	r1, r5
    676a:	0030      	movs	r0, r6
    676c:	e000      	b.n	6770 <_vfiprintf_r+0x1ec>
    676e:	bf00      	nop
    6770:	e007      	b.n	6782 <_vfiprintf_r+0x1fe>
    6772:	ab05      	add	r3, sp, #20
    6774:	9300      	str	r3, [sp, #0]
    6776:	003a      	movs	r2, r7
    6778:	4b0f      	ldr	r3, [pc, #60]	; (67b8 <_vfiprintf_r+0x234>)
    677a:	0029      	movs	r1, r5
    677c:	0030      	movs	r0, r6
    677e:	f000 f88b 	bl	6898 <_printf_i>
    6782:	9003      	str	r0, [sp, #12]
    6784:	9b03      	ldr	r3, [sp, #12]
    6786:	3301      	adds	r3, #1
    6788:	d000      	beq.n	678c <_vfiprintf_r+0x208>
    678a:	e75e      	b.n	664a <_vfiprintf_r+0xc6>
    678c:	89bb      	ldrh	r3, [r7, #12]
    678e:	065b      	lsls	r3, r3, #25
    6790:	d500      	bpl.n	6794 <_vfiprintf_r+0x210>
    6792:	e726      	b.n	65e2 <_vfiprintf_r+0x5e>
    6794:	980b      	ldr	r0, [sp, #44]	; 0x2c
    6796:	b01f      	add	sp, #124	; 0x7c
    6798:	bdf0      	pop	{r4, r5, r6, r7, pc}
    679a:	46c0      	nop			; (mov r8, r8)
    679c:	000072f4 	.word	0x000072f4
    67a0:	00007314 	.word	0x00007314
    67a4:	00007334 	.word	0x00007334
    67a8:	0000735a 	.word	0x0000735a
    67ac:	0000735e 	.word	0x0000735e
    67b0:	00000000 	.word	0x00000000
    67b4:	00007354 	.word	0x00007354
    67b8:	0000655f 	.word	0x0000655f

000067bc <_printf_common>:
    67bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    67be:	0017      	movs	r7, r2
    67c0:	9301      	str	r3, [sp, #4]
    67c2:	688a      	ldr	r2, [r1, #8]
    67c4:	690b      	ldr	r3, [r1, #16]
    67c6:	9000      	str	r0, [sp, #0]
    67c8:	000c      	movs	r4, r1
    67ca:	4293      	cmp	r3, r2
    67cc:	da00      	bge.n	67d0 <_printf_common+0x14>
    67ce:	0013      	movs	r3, r2
    67d0:	0022      	movs	r2, r4
    67d2:	603b      	str	r3, [r7, #0]
    67d4:	3243      	adds	r2, #67	; 0x43
    67d6:	7812      	ldrb	r2, [r2, #0]
    67d8:	2a00      	cmp	r2, #0
    67da:	d001      	beq.n	67e0 <_printf_common+0x24>
    67dc:	3301      	adds	r3, #1
    67de:	603b      	str	r3, [r7, #0]
    67e0:	6823      	ldr	r3, [r4, #0]
    67e2:	069b      	lsls	r3, r3, #26
    67e4:	d502      	bpl.n	67ec <_printf_common+0x30>
    67e6:	683b      	ldr	r3, [r7, #0]
    67e8:	3302      	adds	r3, #2
    67ea:	603b      	str	r3, [r7, #0]
    67ec:	2506      	movs	r5, #6
    67ee:	6823      	ldr	r3, [r4, #0]
    67f0:	401d      	ands	r5, r3
    67f2:	d01e      	beq.n	6832 <_printf_common+0x76>
    67f4:	0023      	movs	r3, r4
    67f6:	3343      	adds	r3, #67	; 0x43
    67f8:	781b      	ldrb	r3, [r3, #0]
    67fa:	1e5a      	subs	r2, r3, #1
    67fc:	4193      	sbcs	r3, r2
    67fe:	6822      	ldr	r2, [r4, #0]
    6800:	0692      	lsls	r2, r2, #26
    6802:	d51c      	bpl.n	683e <_printf_common+0x82>
    6804:	2030      	movs	r0, #48	; 0x30
    6806:	18e1      	adds	r1, r4, r3
    6808:	3143      	adds	r1, #67	; 0x43
    680a:	7008      	strb	r0, [r1, #0]
    680c:	0021      	movs	r1, r4
    680e:	1c5a      	adds	r2, r3, #1
    6810:	3145      	adds	r1, #69	; 0x45
    6812:	7809      	ldrb	r1, [r1, #0]
    6814:	18a2      	adds	r2, r4, r2
    6816:	3243      	adds	r2, #67	; 0x43
    6818:	3302      	adds	r3, #2
    681a:	7011      	strb	r1, [r2, #0]
    681c:	e00f      	b.n	683e <_printf_common+0x82>
    681e:	0022      	movs	r2, r4
    6820:	2301      	movs	r3, #1
    6822:	3219      	adds	r2, #25
    6824:	9901      	ldr	r1, [sp, #4]
    6826:	9800      	ldr	r0, [sp, #0]
    6828:	9e08      	ldr	r6, [sp, #32]
    682a:	47b0      	blx	r6
    682c:	1c43      	adds	r3, r0, #1
    682e:	d00e      	beq.n	684e <_printf_common+0x92>
    6830:	3501      	adds	r5, #1
    6832:	68e3      	ldr	r3, [r4, #12]
    6834:	683a      	ldr	r2, [r7, #0]
    6836:	1a9b      	subs	r3, r3, r2
    6838:	429d      	cmp	r5, r3
    683a:	dbf0      	blt.n	681e <_printf_common+0x62>
    683c:	e7da      	b.n	67f4 <_printf_common+0x38>
    683e:	0022      	movs	r2, r4
    6840:	9901      	ldr	r1, [sp, #4]
    6842:	3243      	adds	r2, #67	; 0x43
    6844:	9800      	ldr	r0, [sp, #0]
    6846:	9d08      	ldr	r5, [sp, #32]
    6848:	47a8      	blx	r5
    684a:	1c43      	adds	r3, r0, #1
    684c:	d102      	bne.n	6854 <_printf_common+0x98>
    684e:	2001      	movs	r0, #1
    6850:	4240      	negs	r0, r0
    6852:	e020      	b.n	6896 <_printf_common+0xda>
    6854:	2306      	movs	r3, #6
    6856:	6820      	ldr	r0, [r4, #0]
    6858:	68e1      	ldr	r1, [r4, #12]
    685a:	683a      	ldr	r2, [r7, #0]
    685c:	4003      	ands	r3, r0
    685e:	2500      	movs	r5, #0
    6860:	2b04      	cmp	r3, #4
    6862:	d103      	bne.n	686c <_printf_common+0xb0>
    6864:	1a8d      	subs	r5, r1, r2
    6866:	43eb      	mvns	r3, r5
    6868:	17db      	asrs	r3, r3, #31
    686a:	401d      	ands	r5, r3
    686c:	68a3      	ldr	r3, [r4, #8]
    686e:	6922      	ldr	r2, [r4, #16]
    6870:	4293      	cmp	r3, r2
    6872:	dd01      	ble.n	6878 <_printf_common+0xbc>
    6874:	1a9b      	subs	r3, r3, r2
    6876:	18ed      	adds	r5, r5, r3
    6878:	2700      	movs	r7, #0
    687a:	42bd      	cmp	r5, r7
    687c:	d00a      	beq.n	6894 <_printf_common+0xd8>
    687e:	0022      	movs	r2, r4
    6880:	2301      	movs	r3, #1
    6882:	321a      	adds	r2, #26
    6884:	9901      	ldr	r1, [sp, #4]
    6886:	9800      	ldr	r0, [sp, #0]
    6888:	9e08      	ldr	r6, [sp, #32]
    688a:	47b0      	blx	r6
    688c:	1c43      	adds	r3, r0, #1
    688e:	d0de      	beq.n	684e <_printf_common+0x92>
    6890:	3701      	adds	r7, #1
    6892:	e7f2      	b.n	687a <_printf_common+0xbe>
    6894:	2000      	movs	r0, #0
    6896:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00006898 <_printf_i>:
    6898:	b5f0      	push	{r4, r5, r6, r7, lr}
    689a:	b08b      	sub	sp, #44	; 0x2c
    689c:	9206      	str	r2, [sp, #24]
    689e:	000a      	movs	r2, r1
    68a0:	3243      	adds	r2, #67	; 0x43
    68a2:	9307      	str	r3, [sp, #28]
    68a4:	9005      	str	r0, [sp, #20]
    68a6:	9204      	str	r2, [sp, #16]
    68a8:	7e0a      	ldrb	r2, [r1, #24]
    68aa:	000c      	movs	r4, r1
    68ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
    68ae:	2a6e      	cmp	r2, #110	; 0x6e
    68b0:	d100      	bne.n	68b4 <_printf_i+0x1c>
    68b2:	e0ab      	b.n	6a0c <_printf_i+0x174>
    68b4:	d811      	bhi.n	68da <_printf_i+0x42>
    68b6:	2a63      	cmp	r2, #99	; 0x63
    68b8:	d022      	beq.n	6900 <_printf_i+0x68>
    68ba:	d809      	bhi.n	68d0 <_printf_i+0x38>
    68bc:	2a00      	cmp	r2, #0
    68be:	d100      	bne.n	68c2 <_printf_i+0x2a>
    68c0:	e0b5      	b.n	6a2e <_printf_i+0x196>
    68c2:	2a58      	cmp	r2, #88	; 0x58
    68c4:	d000      	beq.n	68c8 <_printf_i+0x30>
    68c6:	e0c5      	b.n	6a54 <_printf_i+0x1bc>
    68c8:	3145      	adds	r1, #69	; 0x45
    68ca:	700a      	strb	r2, [r1, #0]
    68cc:	4a81      	ldr	r2, [pc, #516]	; (6ad4 <_printf_i+0x23c>)
    68ce:	e04f      	b.n	6970 <_printf_i+0xd8>
    68d0:	2a64      	cmp	r2, #100	; 0x64
    68d2:	d01d      	beq.n	6910 <_printf_i+0x78>
    68d4:	2a69      	cmp	r2, #105	; 0x69
    68d6:	d01b      	beq.n	6910 <_printf_i+0x78>
    68d8:	e0bc      	b.n	6a54 <_printf_i+0x1bc>
    68da:	2a73      	cmp	r2, #115	; 0x73
    68dc:	d100      	bne.n	68e0 <_printf_i+0x48>
    68de:	e0aa      	b.n	6a36 <_printf_i+0x19e>
    68e0:	d809      	bhi.n	68f6 <_printf_i+0x5e>
    68e2:	2a6f      	cmp	r2, #111	; 0x6f
    68e4:	d029      	beq.n	693a <_printf_i+0xa2>
    68e6:	2a70      	cmp	r2, #112	; 0x70
    68e8:	d000      	beq.n	68ec <_printf_i+0x54>
    68ea:	e0b3      	b.n	6a54 <_printf_i+0x1bc>
    68ec:	2220      	movs	r2, #32
    68ee:	6809      	ldr	r1, [r1, #0]
    68f0:	430a      	orrs	r2, r1
    68f2:	6022      	str	r2, [r4, #0]
    68f4:	e037      	b.n	6966 <_printf_i+0xce>
    68f6:	2a75      	cmp	r2, #117	; 0x75
    68f8:	d01f      	beq.n	693a <_printf_i+0xa2>
    68fa:	2a78      	cmp	r2, #120	; 0x78
    68fc:	d033      	beq.n	6966 <_printf_i+0xce>
    68fe:	e0a9      	b.n	6a54 <_printf_i+0x1bc>
    6900:	000e      	movs	r6, r1
    6902:	681a      	ldr	r2, [r3, #0]
    6904:	3642      	adds	r6, #66	; 0x42
    6906:	1d11      	adds	r1, r2, #4
    6908:	6019      	str	r1, [r3, #0]
    690a:	6813      	ldr	r3, [r2, #0]
    690c:	7033      	strb	r3, [r6, #0]
    690e:	e0a4      	b.n	6a5a <_printf_i+0x1c2>
    6910:	6821      	ldr	r1, [r4, #0]
    6912:	681a      	ldr	r2, [r3, #0]
    6914:	0608      	lsls	r0, r1, #24
    6916:	d406      	bmi.n	6926 <_printf_i+0x8e>
    6918:	0649      	lsls	r1, r1, #25
    691a:	d504      	bpl.n	6926 <_printf_i+0x8e>
    691c:	1d11      	adds	r1, r2, #4
    691e:	6019      	str	r1, [r3, #0]
    6920:	2300      	movs	r3, #0
    6922:	5ed5      	ldrsh	r5, [r2, r3]
    6924:	e002      	b.n	692c <_printf_i+0x94>
    6926:	1d11      	adds	r1, r2, #4
    6928:	6019      	str	r1, [r3, #0]
    692a:	6815      	ldr	r5, [r2, #0]
    692c:	2d00      	cmp	r5, #0
    692e:	da3b      	bge.n	69a8 <_printf_i+0x110>
    6930:	232d      	movs	r3, #45	; 0x2d
    6932:	9a04      	ldr	r2, [sp, #16]
    6934:	426d      	negs	r5, r5
    6936:	7013      	strb	r3, [r2, #0]
    6938:	e036      	b.n	69a8 <_printf_i+0x110>
    693a:	6821      	ldr	r1, [r4, #0]
    693c:	681a      	ldr	r2, [r3, #0]
    693e:	0608      	lsls	r0, r1, #24
    6940:	d406      	bmi.n	6950 <_printf_i+0xb8>
    6942:	0649      	lsls	r1, r1, #25
    6944:	d504      	bpl.n	6950 <_printf_i+0xb8>
    6946:	6815      	ldr	r5, [r2, #0]
    6948:	1d11      	adds	r1, r2, #4
    694a:	6019      	str	r1, [r3, #0]
    694c:	b2ad      	uxth	r5, r5
    694e:	e002      	b.n	6956 <_printf_i+0xbe>
    6950:	1d11      	adds	r1, r2, #4
    6952:	6019      	str	r1, [r3, #0]
    6954:	6815      	ldr	r5, [r2, #0]
    6956:	4b5f      	ldr	r3, [pc, #380]	; (6ad4 <_printf_i+0x23c>)
    6958:	7e22      	ldrb	r2, [r4, #24]
    695a:	9303      	str	r3, [sp, #12]
    695c:	2708      	movs	r7, #8
    695e:	2a6f      	cmp	r2, #111	; 0x6f
    6960:	d01d      	beq.n	699e <_printf_i+0x106>
    6962:	270a      	movs	r7, #10
    6964:	e01b      	b.n	699e <_printf_i+0x106>
    6966:	0022      	movs	r2, r4
    6968:	2178      	movs	r1, #120	; 0x78
    696a:	3245      	adds	r2, #69	; 0x45
    696c:	7011      	strb	r1, [r2, #0]
    696e:	4a5a      	ldr	r2, [pc, #360]	; (6ad8 <_printf_i+0x240>)
    6970:	6819      	ldr	r1, [r3, #0]
    6972:	9203      	str	r2, [sp, #12]
    6974:	1d08      	adds	r0, r1, #4
    6976:	6822      	ldr	r2, [r4, #0]
    6978:	6018      	str	r0, [r3, #0]
    697a:	680d      	ldr	r5, [r1, #0]
    697c:	0610      	lsls	r0, r2, #24
    697e:	d402      	bmi.n	6986 <_printf_i+0xee>
    6980:	0650      	lsls	r0, r2, #25
    6982:	d500      	bpl.n	6986 <_printf_i+0xee>
    6984:	b2ad      	uxth	r5, r5
    6986:	07d3      	lsls	r3, r2, #31
    6988:	d502      	bpl.n	6990 <_printf_i+0xf8>
    698a:	2320      	movs	r3, #32
    698c:	431a      	orrs	r2, r3
    698e:	6022      	str	r2, [r4, #0]
    6990:	2710      	movs	r7, #16
    6992:	2d00      	cmp	r5, #0
    6994:	d103      	bne.n	699e <_printf_i+0x106>
    6996:	2320      	movs	r3, #32
    6998:	6822      	ldr	r2, [r4, #0]
    699a:	439a      	bics	r2, r3
    699c:	6022      	str	r2, [r4, #0]
    699e:	0023      	movs	r3, r4
    69a0:	2200      	movs	r2, #0
    69a2:	3343      	adds	r3, #67	; 0x43
    69a4:	701a      	strb	r2, [r3, #0]
    69a6:	e002      	b.n	69ae <_printf_i+0x116>
    69a8:	270a      	movs	r7, #10
    69aa:	4b4a      	ldr	r3, [pc, #296]	; (6ad4 <_printf_i+0x23c>)
    69ac:	9303      	str	r3, [sp, #12]
    69ae:	6863      	ldr	r3, [r4, #4]
    69b0:	60a3      	str	r3, [r4, #8]
    69b2:	2b00      	cmp	r3, #0
    69b4:	db09      	blt.n	69ca <_printf_i+0x132>
    69b6:	2204      	movs	r2, #4
    69b8:	6821      	ldr	r1, [r4, #0]
    69ba:	4391      	bics	r1, r2
    69bc:	6021      	str	r1, [r4, #0]
    69be:	2d00      	cmp	r5, #0
    69c0:	d105      	bne.n	69ce <_printf_i+0x136>
    69c2:	9e04      	ldr	r6, [sp, #16]
    69c4:	2b00      	cmp	r3, #0
    69c6:	d011      	beq.n	69ec <_printf_i+0x154>
    69c8:	e07b      	b.n	6ac2 <_printf_i+0x22a>
    69ca:	2d00      	cmp	r5, #0
    69cc:	d079      	beq.n	6ac2 <_printf_i+0x22a>
    69ce:	9e04      	ldr	r6, [sp, #16]
    69d0:	0028      	movs	r0, r5
    69d2:	0039      	movs	r1, r7
    69d4:	f7ff f8f4 	bl	5bc0 <__aeabi_uidivmod>
    69d8:	9b03      	ldr	r3, [sp, #12]
    69da:	3e01      	subs	r6, #1
    69dc:	5c5b      	ldrb	r3, [r3, r1]
    69de:	0028      	movs	r0, r5
    69e0:	7033      	strb	r3, [r6, #0]
    69e2:	0039      	movs	r1, r7
    69e4:	f7ff f866 	bl	5ab4 <__aeabi_uidiv>
    69e8:	1e05      	subs	r5, r0, #0
    69ea:	d1f1      	bne.n	69d0 <_printf_i+0x138>
    69ec:	2f08      	cmp	r7, #8
    69ee:	d109      	bne.n	6a04 <_printf_i+0x16c>
    69f0:	6823      	ldr	r3, [r4, #0]
    69f2:	07db      	lsls	r3, r3, #31
    69f4:	d506      	bpl.n	6a04 <_printf_i+0x16c>
    69f6:	6863      	ldr	r3, [r4, #4]
    69f8:	6922      	ldr	r2, [r4, #16]
    69fa:	4293      	cmp	r3, r2
    69fc:	dc02      	bgt.n	6a04 <_printf_i+0x16c>
    69fe:	2330      	movs	r3, #48	; 0x30
    6a00:	3e01      	subs	r6, #1
    6a02:	7033      	strb	r3, [r6, #0]
    6a04:	9b04      	ldr	r3, [sp, #16]
    6a06:	1b9b      	subs	r3, r3, r6
    6a08:	6123      	str	r3, [r4, #16]
    6a0a:	e02b      	b.n	6a64 <_printf_i+0x1cc>
    6a0c:	6809      	ldr	r1, [r1, #0]
    6a0e:	681a      	ldr	r2, [r3, #0]
    6a10:	0608      	lsls	r0, r1, #24
    6a12:	d407      	bmi.n	6a24 <_printf_i+0x18c>
    6a14:	0649      	lsls	r1, r1, #25
    6a16:	d505      	bpl.n	6a24 <_printf_i+0x18c>
    6a18:	1d11      	adds	r1, r2, #4
    6a1a:	6019      	str	r1, [r3, #0]
    6a1c:	6813      	ldr	r3, [r2, #0]
    6a1e:	8aa2      	ldrh	r2, [r4, #20]
    6a20:	801a      	strh	r2, [r3, #0]
    6a22:	e004      	b.n	6a2e <_printf_i+0x196>
    6a24:	1d11      	adds	r1, r2, #4
    6a26:	6019      	str	r1, [r3, #0]
    6a28:	6813      	ldr	r3, [r2, #0]
    6a2a:	6962      	ldr	r2, [r4, #20]
    6a2c:	601a      	str	r2, [r3, #0]
    6a2e:	2300      	movs	r3, #0
    6a30:	9e04      	ldr	r6, [sp, #16]
    6a32:	6123      	str	r3, [r4, #16]
    6a34:	e016      	b.n	6a64 <_printf_i+0x1cc>
    6a36:	681a      	ldr	r2, [r3, #0]
    6a38:	1d11      	adds	r1, r2, #4
    6a3a:	6019      	str	r1, [r3, #0]
    6a3c:	6816      	ldr	r6, [r2, #0]
    6a3e:	2100      	movs	r1, #0
    6a40:	6862      	ldr	r2, [r4, #4]
    6a42:	0030      	movs	r0, r6
    6a44:	f000 f9d4 	bl	6df0 <memchr>
    6a48:	2800      	cmp	r0, #0
    6a4a:	d001      	beq.n	6a50 <_printf_i+0x1b8>
    6a4c:	1b80      	subs	r0, r0, r6
    6a4e:	6060      	str	r0, [r4, #4]
    6a50:	6863      	ldr	r3, [r4, #4]
    6a52:	e003      	b.n	6a5c <_printf_i+0x1c4>
    6a54:	0026      	movs	r6, r4
    6a56:	3642      	adds	r6, #66	; 0x42
    6a58:	7032      	strb	r2, [r6, #0]
    6a5a:	2301      	movs	r3, #1
    6a5c:	6123      	str	r3, [r4, #16]
    6a5e:	2300      	movs	r3, #0
    6a60:	9a04      	ldr	r2, [sp, #16]
    6a62:	7013      	strb	r3, [r2, #0]
    6a64:	9b07      	ldr	r3, [sp, #28]
    6a66:	aa09      	add	r2, sp, #36	; 0x24
    6a68:	9300      	str	r3, [sp, #0]
    6a6a:	0021      	movs	r1, r4
    6a6c:	9b06      	ldr	r3, [sp, #24]
    6a6e:	9805      	ldr	r0, [sp, #20]
    6a70:	f7ff fea4 	bl	67bc <_printf_common>
    6a74:	1c43      	adds	r3, r0, #1
    6a76:	d102      	bne.n	6a7e <_printf_i+0x1e6>
    6a78:	2001      	movs	r0, #1
    6a7a:	4240      	negs	r0, r0
    6a7c:	e027      	b.n	6ace <_printf_i+0x236>
    6a7e:	6923      	ldr	r3, [r4, #16]
    6a80:	0032      	movs	r2, r6
    6a82:	9906      	ldr	r1, [sp, #24]
    6a84:	9805      	ldr	r0, [sp, #20]
    6a86:	9d07      	ldr	r5, [sp, #28]
    6a88:	47a8      	blx	r5
    6a8a:	1c43      	adds	r3, r0, #1
    6a8c:	d0f4      	beq.n	6a78 <_printf_i+0x1e0>
    6a8e:	6823      	ldr	r3, [r4, #0]
    6a90:	2500      	movs	r5, #0
    6a92:	079b      	lsls	r3, r3, #30
    6a94:	d40f      	bmi.n	6ab6 <_printf_i+0x21e>
    6a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6a98:	68e0      	ldr	r0, [r4, #12]
    6a9a:	4298      	cmp	r0, r3
    6a9c:	da17      	bge.n	6ace <_printf_i+0x236>
    6a9e:	0018      	movs	r0, r3
    6aa0:	e015      	b.n	6ace <_printf_i+0x236>
    6aa2:	0022      	movs	r2, r4
    6aa4:	2301      	movs	r3, #1
    6aa6:	3219      	adds	r2, #25
    6aa8:	9906      	ldr	r1, [sp, #24]
    6aaa:	9805      	ldr	r0, [sp, #20]
    6aac:	9e07      	ldr	r6, [sp, #28]
    6aae:	47b0      	blx	r6
    6ab0:	1c43      	adds	r3, r0, #1
    6ab2:	d0e1      	beq.n	6a78 <_printf_i+0x1e0>
    6ab4:	3501      	adds	r5, #1
    6ab6:	68e3      	ldr	r3, [r4, #12]
    6ab8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6aba:	1a9b      	subs	r3, r3, r2
    6abc:	429d      	cmp	r5, r3
    6abe:	dbf0      	blt.n	6aa2 <_printf_i+0x20a>
    6ac0:	e7e9      	b.n	6a96 <_printf_i+0x1fe>
    6ac2:	0026      	movs	r6, r4
    6ac4:	9b03      	ldr	r3, [sp, #12]
    6ac6:	3642      	adds	r6, #66	; 0x42
    6ac8:	781b      	ldrb	r3, [r3, #0]
    6aca:	7033      	strb	r3, [r6, #0]
    6acc:	e78e      	b.n	69ec <_printf_i+0x154>
    6ace:	b00b      	add	sp, #44	; 0x2c
    6ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6ad2:	46c0      	nop			; (mov r8, r8)
    6ad4:	00007365 	.word	0x00007365
    6ad8:	00007376 	.word	0x00007376

00006adc <_sbrk_r>:
    6adc:	2300      	movs	r3, #0
    6ade:	b570      	push	{r4, r5, r6, lr}
    6ae0:	4c06      	ldr	r4, [pc, #24]	; (6afc <_sbrk_r+0x20>)
    6ae2:	0005      	movs	r5, r0
    6ae4:	0008      	movs	r0, r1
    6ae6:	6023      	str	r3, [r4, #0]
    6ae8:	f7fd fff8 	bl	4adc <_sbrk>
    6aec:	1c43      	adds	r3, r0, #1
    6aee:	d103      	bne.n	6af8 <_sbrk_r+0x1c>
    6af0:	6823      	ldr	r3, [r4, #0]
    6af2:	2b00      	cmp	r3, #0
    6af4:	d000      	beq.n	6af8 <_sbrk_r+0x1c>
    6af6:	602b      	str	r3, [r5, #0]
    6af8:	bd70      	pop	{r4, r5, r6, pc}
    6afa:	46c0      	nop			; (mov r8, r8)
    6afc:	200008c8 	.word	0x200008c8

00006b00 <__sread>:
    6b00:	b570      	push	{r4, r5, r6, lr}
    6b02:	000c      	movs	r4, r1
    6b04:	250e      	movs	r5, #14
    6b06:	5f49      	ldrsh	r1, [r1, r5]
    6b08:	f000 f97e 	bl	6e08 <_read_r>
    6b0c:	2800      	cmp	r0, #0
    6b0e:	db03      	blt.n	6b18 <__sread+0x18>
    6b10:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6b12:	181b      	adds	r3, r3, r0
    6b14:	6563      	str	r3, [r4, #84]	; 0x54
    6b16:	e003      	b.n	6b20 <__sread+0x20>
    6b18:	89a2      	ldrh	r2, [r4, #12]
    6b1a:	4b02      	ldr	r3, [pc, #8]	; (6b24 <__sread+0x24>)
    6b1c:	4013      	ands	r3, r2
    6b1e:	81a3      	strh	r3, [r4, #12]
    6b20:	bd70      	pop	{r4, r5, r6, pc}
    6b22:	46c0      	nop			; (mov r8, r8)
    6b24:	ffffefff 	.word	0xffffefff

00006b28 <__swrite>:
    6b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b2a:	001f      	movs	r7, r3
    6b2c:	898b      	ldrh	r3, [r1, #12]
    6b2e:	0005      	movs	r5, r0
    6b30:	000c      	movs	r4, r1
    6b32:	0016      	movs	r6, r2
    6b34:	05db      	lsls	r3, r3, #23
    6b36:	d505      	bpl.n	6b44 <__swrite+0x1c>
    6b38:	230e      	movs	r3, #14
    6b3a:	5ec9      	ldrsh	r1, [r1, r3]
    6b3c:	2200      	movs	r2, #0
    6b3e:	2302      	movs	r3, #2
    6b40:	f000 f942 	bl	6dc8 <_lseek_r>
    6b44:	89a2      	ldrh	r2, [r4, #12]
    6b46:	4b05      	ldr	r3, [pc, #20]	; (6b5c <__swrite+0x34>)
    6b48:	0028      	movs	r0, r5
    6b4a:	4013      	ands	r3, r2
    6b4c:	81a3      	strh	r3, [r4, #12]
    6b4e:	0032      	movs	r2, r6
    6b50:	230e      	movs	r3, #14
    6b52:	5ee1      	ldrsh	r1, [r4, r3]
    6b54:	003b      	movs	r3, r7
    6b56:	f000 f877 	bl	6c48 <_write_r>
    6b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6b5c:	ffffefff 	.word	0xffffefff

00006b60 <__sseek>:
    6b60:	b570      	push	{r4, r5, r6, lr}
    6b62:	000c      	movs	r4, r1
    6b64:	250e      	movs	r5, #14
    6b66:	5f49      	ldrsh	r1, [r1, r5]
    6b68:	f000 f92e 	bl	6dc8 <_lseek_r>
    6b6c:	89a3      	ldrh	r3, [r4, #12]
    6b6e:	1c42      	adds	r2, r0, #1
    6b70:	d103      	bne.n	6b7a <__sseek+0x1a>
    6b72:	4a05      	ldr	r2, [pc, #20]	; (6b88 <__sseek+0x28>)
    6b74:	4013      	ands	r3, r2
    6b76:	81a3      	strh	r3, [r4, #12]
    6b78:	e004      	b.n	6b84 <__sseek+0x24>
    6b7a:	2280      	movs	r2, #128	; 0x80
    6b7c:	0152      	lsls	r2, r2, #5
    6b7e:	4313      	orrs	r3, r2
    6b80:	81a3      	strh	r3, [r4, #12]
    6b82:	6560      	str	r0, [r4, #84]	; 0x54
    6b84:	bd70      	pop	{r4, r5, r6, pc}
    6b86:	46c0      	nop			; (mov r8, r8)
    6b88:	ffffefff 	.word	0xffffefff

00006b8c <__sclose>:
    6b8c:	b510      	push	{r4, lr}
    6b8e:	230e      	movs	r3, #14
    6b90:	5ec9      	ldrsh	r1, [r1, r3]
    6b92:	f000 f8e3 	bl	6d5c <_close_r>
    6b96:	bd10      	pop	{r4, pc}

00006b98 <__swbuf_r>:
    6b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b9a:	0005      	movs	r5, r0
    6b9c:	000f      	movs	r7, r1
    6b9e:	0014      	movs	r4, r2
    6ba0:	2800      	cmp	r0, #0
    6ba2:	d004      	beq.n	6bae <__swbuf_r+0x16>
    6ba4:	6983      	ldr	r3, [r0, #24]
    6ba6:	2b00      	cmp	r3, #0
    6ba8:	d101      	bne.n	6bae <__swbuf_r+0x16>
    6baa:	f7ff fb25 	bl	61f8 <__sinit>
    6bae:	4b23      	ldr	r3, [pc, #140]	; (6c3c <__swbuf_r+0xa4>)
    6bb0:	429c      	cmp	r4, r3
    6bb2:	d101      	bne.n	6bb8 <__swbuf_r+0x20>
    6bb4:	686c      	ldr	r4, [r5, #4]
    6bb6:	e008      	b.n	6bca <__swbuf_r+0x32>
    6bb8:	4b21      	ldr	r3, [pc, #132]	; (6c40 <__swbuf_r+0xa8>)
    6bba:	429c      	cmp	r4, r3
    6bbc:	d101      	bne.n	6bc2 <__swbuf_r+0x2a>
    6bbe:	68ac      	ldr	r4, [r5, #8]
    6bc0:	e003      	b.n	6bca <__swbuf_r+0x32>
    6bc2:	4b20      	ldr	r3, [pc, #128]	; (6c44 <__swbuf_r+0xac>)
    6bc4:	429c      	cmp	r4, r3
    6bc6:	d100      	bne.n	6bca <__swbuf_r+0x32>
    6bc8:	68ec      	ldr	r4, [r5, #12]
    6bca:	69a3      	ldr	r3, [r4, #24]
    6bcc:	60a3      	str	r3, [r4, #8]
    6bce:	89a3      	ldrh	r3, [r4, #12]
    6bd0:	071b      	lsls	r3, r3, #28
    6bd2:	d50a      	bpl.n	6bea <__swbuf_r+0x52>
    6bd4:	6923      	ldr	r3, [r4, #16]
    6bd6:	2b00      	cmp	r3, #0
    6bd8:	d007      	beq.n	6bea <__swbuf_r+0x52>
    6bda:	6823      	ldr	r3, [r4, #0]
    6bdc:	6922      	ldr	r2, [r4, #16]
    6bde:	b2fe      	uxtb	r6, r7
    6be0:	1a98      	subs	r0, r3, r2
    6be2:	6963      	ldr	r3, [r4, #20]
    6be4:	4298      	cmp	r0, r3
    6be6:	db0f      	blt.n	6c08 <__swbuf_r+0x70>
    6be8:	e008      	b.n	6bfc <__swbuf_r+0x64>
    6bea:	0021      	movs	r1, r4
    6bec:	0028      	movs	r0, r5
    6bee:	f000 f83f 	bl	6c70 <__swsetup_r>
    6bf2:	2800      	cmp	r0, #0
    6bf4:	d0f1      	beq.n	6bda <__swbuf_r+0x42>
    6bf6:	2001      	movs	r0, #1
    6bf8:	4240      	negs	r0, r0
    6bfa:	e01d      	b.n	6c38 <__swbuf_r+0xa0>
    6bfc:	0021      	movs	r1, r4
    6bfe:	0028      	movs	r0, r5
    6c00:	f7ff fa8c 	bl	611c <_fflush_r>
    6c04:	2800      	cmp	r0, #0
    6c06:	d1f6      	bne.n	6bf6 <__swbuf_r+0x5e>
    6c08:	68a3      	ldr	r3, [r4, #8]
    6c0a:	3001      	adds	r0, #1
    6c0c:	3b01      	subs	r3, #1
    6c0e:	60a3      	str	r3, [r4, #8]
    6c10:	6823      	ldr	r3, [r4, #0]
    6c12:	1c5a      	adds	r2, r3, #1
    6c14:	6022      	str	r2, [r4, #0]
    6c16:	701f      	strb	r7, [r3, #0]
    6c18:	6963      	ldr	r3, [r4, #20]
    6c1a:	4298      	cmp	r0, r3
    6c1c:	d005      	beq.n	6c2a <__swbuf_r+0x92>
    6c1e:	89a3      	ldrh	r3, [r4, #12]
    6c20:	0030      	movs	r0, r6
    6c22:	07db      	lsls	r3, r3, #31
    6c24:	d508      	bpl.n	6c38 <__swbuf_r+0xa0>
    6c26:	2e0a      	cmp	r6, #10
    6c28:	d106      	bne.n	6c38 <__swbuf_r+0xa0>
    6c2a:	0021      	movs	r1, r4
    6c2c:	0028      	movs	r0, r5
    6c2e:	f7ff fa75 	bl	611c <_fflush_r>
    6c32:	2800      	cmp	r0, #0
    6c34:	d1df      	bne.n	6bf6 <__swbuf_r+0x5e>
    6c36:	0030      	movs	r0, r6
    6c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6c3a:	46c0      	nop			; (mov r8, r8)
    6c3c:	000072f4 	.word	0x000072f4
    6c40:	00007314 	.word	0x00007314
    6c44:	00007334 	.word	0x00007334

00006c48 <_write_r>:
    6c48:	b570      	push	{r4, r5, r6, lr}
    6c4a:	0005      	movs	r5, r0
    6c4c:	0008      	movs	r0, r1
    6c4e:	0011      	movs	r1, r2
    6c50:	2200      	movs	r2, #0
    6c52:	4c06      	ldr	r4, [pc, #24]	; (6c6c <_write_r+0x24>)
    6c54:	6022      	str	r2, [r4, #0]
    6c56:	001a      	movs	r2, r3
    6c58:	f7fd ff18 	bl	4a8c <_write>
    6c5c:	1c43      	adds	r3, r0, #1
    6c5e:	d103      	bne.n	6c68 <_write_r+0x20>
    6c60:	6823      	ldr	r3, [r4, #0]
    6c62:	2b00      	cmp	r3, #0
    6c64:	d000      	beq.n	6c68 <_write_r+0x20>
    6c66:	602b      	str	r3, [r5, #0]
    6c68:	bd70      	pop	{r4, r5, r6, pc}
    6c6a:	46c0      	nop			; (mov r8, r8)
    6c6c:	200008c8 	.word	0x200008c8

00006c70 <__swsetup_r>:
    6c70:	4b36      	ldr	r3, [pc, #216]	; (6d4c <__swsetup_r+0xdc>)
    6c72:	b570      	push	{r4, r5, r6, lr}
    6c74:	681d      	ldr	r5, [r3, #0]
    6c76:	0006      	movs	r6, r0
    6c78:	000c      	movs	r4, r1
    6c7a:	2d00      	cmp	r5, #0
    6c7c:	d005      	beq.n	6c8a <__swsetup_r+0x1a>
    6c7e:	69ab      	ldr	r3, [r5, #24]
    6c80:	2b00      	cmp	r3, #0
    6c82:	d102      	bne.n	6c8a <__swsetup_r+0x1a>
    6c84:	0028      	movs	r0, r5
    6c86:	f7ff fab7 	bl	61f8 <__sinit>
    6c8a:	4b31      	ldr	r3, [pc, #196]	; (6d50 <__swsetup_r+0xe0>)
    6c8c:	429c      	cmp	r4, r3
    6c8e:	d101      	bne.n	6c94 <__swsetup_r+0x24>
    6c90:	686c      	ldr	r4, [r5, #4]
    6c92:	e008      	b.n	6ca6 <__swsetup_r+0x36>
    6c94:	4b2f      	ldr	r3, [pc, #188]	; (6d54 <__swsetup_r+0xe4>)
    6c96:	429c      	cmp	r4, r3
    6c98:	d101      	bne.n	6c9e <__swsetup_r+0x2e>
    6c9a:	68ac      	ldr	r4, [r5, #8]
    6c9c:	e003      	b.n	6ca6 <__swsetup_r+0x36>
    6c9e:	4b2e      	ldr	r3, [pc, #184]	; (6d58 <__swsetup_r+0xe8>)
    6ca0:	429c      	cmp	r4, r3
    6ca2:	d100      	bne.n	6ca6 <__swsetup_r+0x36>
    6ca4:	68ec      	ldr	r4, [r5, #12]
    6ca6:	220c      	movs	r2, #12
    6ca8:	5ea3      	ldrsh	r3, [r4, r2]
    6caa:	b29a      	uxth	r2, r3
    6cac:	0711      	lsls	r1, r2, #28
    6cae:	d423      	bmi.n	6cf8 <__swsetup_r+0x88>
    6cb0:	06d1      	lsls	r1, r2, #27
    6cb2:	d407      	bmi.n	6cc4 <__swsetup_r+0x54>
    6cb4:	2209      	movs	r2, #9
    6cb6:	2001      	movs	r0, #1
    6cb8:	6032      	str	r2, [r6, #0]
    6cba:	3237      	adds	r2, #55	; 0x37
    6cbc:	4313      	orrs	r3, r2
    6cbe:	81a3      	strh	r3, [r4, #12]
    6cc0:	4240      	negs	r0, r0
    6cc2:	e042      	b.n	6d4a <__swsetup_r+0xda>
    6cc4:	0753      	lsls	r3, r2, #29
    6cc6:	d513      	bpl.n	6cf0 <__swsetup_r+0x80>
    6cc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6cca:	2900      	cmp	r1, #0
    6ccc:	d008      	beq.n	6ce0 <__swsetup_r+0x70>
    6cce:	0023      	movs	r3, r4
    6cd0:	3344      	adds	r3, #68	; 0x44
    6cd2:	4299      	cmp	r1, r3
    6cd4:	d002      	beq.n	6cdc <__swsetup_r+0x6c>
    6cd6:	0030      	movs	r0, r6
    6cd8:	f7ff fb90 	bl	63fc <_free_r>
    6cdc:	2300      	movs	r3, #0
    6cde:	6363      	str	r3, [r4, #52]	; 0x34
    6ce0:	2224      	movs	r2, #36	; 0x24
    6ce2:	89a3      	ldrh	r3, [r4, #12]
    6ce4:	4393      	bics	r3, r2
    6ce6:	81a3      	strh	r3, [r4, #12]
    6ce8:	2300      	movs	r3, #0
    6cea:	6063      	str	r3, [r4, #4]
    6cec:	6923      	ldr	r3, [r4, #16]
    6cee:	6023      	str	r3, [r4, #0]
    6cf0:	2208      	movs	r2, #8
    6cf2:	89a3      	ldrh	r3, [r4, #12]
    6cf4:	4313      	orrs	r3, r2
    6cf6:	81a3      	strh	r3, [r4, #12]
    6cf8:	6923      	ldr	r3, [r4, #16]
    6cfa:	2b00      	cmp	r3, #0
    6cfc:	d10b      	bne.n	6d16 <__swsetup_r+0xa6>
    6cfe:	23a0      	movs	r3, #160	; 0xa0
    6d00:	89a2      	ldrh	r2, [r4, #12]
    6d02:	009b      	lsls	r3, r3, #2
    6d04:	4013      	ands	r3, r2
    6d06:	2280      	movs	r2, #128	; 0x80
    6d08:	0092      	lsls	r2, r2, #2
    6d0a:	4293      	cmp	r3, r2
    6d0c:	d003      	beq.n	6d16 <__swsetup_r+0xa6>
    6d0e:	0021      	movs	r1, r4
    6d10:	0030      	movs	r0, r6
    6d12:	f7ff fb2b 	bl	636c <__smakebuf_r>
    6d16:	2301      	movs	r3, #1
    6d18:	89a2      	ldrh	r2, [r4, #12]
    6d1a:	4013      	ands	r3, r2
    6d1c:	d005      	beq.n	6d2a <__swsetup_r+0xba>
    6d1e:	2300      	movs	r3, #0
    6d20:	60a3      	str	r3, [r4, #8]
    6d22:	6963      	ldr	r3, [r4, #20]
    6d24:	425b      	negs	r3, r3
    6d26:	61a3      	str	r3, [r4, #24]
    6d28:	e003      	b.n	6d32 <__swsetup_r+0xc2>
    6d2a:	0792      	lsls	r2, r2, #30
    6d2c:	d400      	bmi.n	6d30 <__swsetup_r+0xc0>
    6d2e:	6963      	ldr	r3, [r4, #20]
    6d30:	60a3      	str	r3, [r4, #8]
    6d32:	2000      	movs	r0, #0
    6d34:	6923      	ldr	r3, [r4, #16]
    6d36:	4283      	cmp	r3, r0
    6d38:	d107      	bne.n	6d4a <__swsetup_r+0xda>
    6d3a:	220c      	movs	r2, #12
    6d3c:	5ea3      	ldrsh	r3, [r4, r2]
    6d3e:	061a      	lsls	r2, r3, #24
    6d40:	d503      	bpl.n	6d4a <__swsetup_r+0xda>
    6d42:	2240      	movs	r2, #64	; 0x40
    6d44:	4313      	orrs	r3, r2
    6d46:	81a3      	strh	r3, [r4, #12]
    6d48:	3801      	subs	r0, #1
    6d4a:	bd70      	pop	{r4, r5, r6, pc}
    6d4c:	20000098 	.word	0x20000098
    6d50:	000072f4 	.word	0x000072f4
    6d54:	00007314 	.word	0x00007314
    6d58:	00007334 	.word	0x00007334

00006d5c <_close_r>:
    6d5c:	2300      	movs	r3, #0
    6d5e:	b570      	push	{r4, r5, r6, lr}
    6d60:	4c06      	ldr	r4, [pc, #24]	; (6d7c <_close_r+0x20>)
    6d62:	0005      	movs	r5, r0
    6d64:	0008      	movs	r0, r1
    6d66:	6023      	str	r3, [r4, #0]
    6d68:	f7fd feca 	bl	4b00 <_close>
    6d6c:	1c43      	adds	r3, r0, #1
    6d6e:	d103      	bne.n	6d78 <_close_r+0x1c>
    6d70:	6823      	ldr	r3, [r4, #0]
    6d72:	2b00      	cmp	r3, #0
    6d74:	d000      	beq.n	6d78 <_close_r+0x1c>
    6d76:	602b      	str	r3, [r5, #0]
    6d78:	bd70      	pop	{r4, r5, r6, pc}
    6d7a:	46c0      	nop			; (mov r8, r8)
    6d7c:	200008c8 	.word	0x200008c8

00006d80 <_fstat_r>:
    6d80:	2300      	movs	r3, #0
    6d82:	b570      	push	{r4, r5, r6, lr}
    6d84:	4c06      	ldr	r4, [pc, #24]	; (6da0 <_fstat_r+0x20>)
    6d86:	0005      	movs	r5, r0
    6d88:	0008      	movs	r0, r1
    6d8a:	0011      	movs	r1, r2
    6d8c:	6023      	str	r3, [r4, #0]
    6d8e:	f7fd febb 	bl	4b08 <_fstat>
    6d92:	1c43      	adds	r3, r0, #1
    6d94:	d103      	bne.n	6d9e <_fstat_r+0x1e>
    6d96:	6823      	ldr	r3, [r4, #0]
    6d98:	2b00      	cmp	r3, #0
    6d9a:	d000      	beq.n	6d9e <_fstat_r+0x1e>
    6d9c:	602b      	str	r3, [r5, #0]
    6d9e:	bd70      	pop	{r4, r5, r6, pc}
    6da0:	200008c8 	.word	0x200008c8

00006da4 <_isatty_r>:
    6da4:	2300      	movs	r3, #0
    6da6:	b570      	push	{r4, r5, r6, lr}
    6da8:	4c06      	ldr	r4, [pc, #24]	; (6dc4 <_isatty_r+0x20>)
    6daa:	0005      	movs	r5, r0
    6dac:	0008      	movs	r0, r1
    6dae:	6023      	str	r3, [r4, #0]
    6db0:	f7fd feb0 	bl	4b14 <_isatty>
    6db4:	1c43      	adds	r3, r0, #1
    6db6:	d103      	bne.n	6dc0 <_isatty_r+0x1c>
    6db8:	6823      	ldr	r3, [r4, #0]
    6dba:	2b00      	cmp	r3, #0
    6dbc:	d000      	beq.n	6dc0 <_isatty_r+0x1c>
    6dbe:	602b      	str	r3, [r5, #0]
    6dc0:	bd70      	pop	{r4, r5, r6, pc}
    6dc2:	46c0      	nop			; (mov r8, r8)
    6dc4:	200008c8 	.word	0x200008c8

00006dc8 <_lseek_r>:
    6dc8:	b570      	push	{r4, r5, r6, lr}
    6dca:	0005      	movs	r5, r0
    6dcc:	0008      	movs	r0, r1
    6dce:	0011      	movs	r1, r2
    6dd0:	2200      	movs	r2, #0
    6dd2:	4c06      	ldr	r4, [pc, #24]	; (6dec <_lseek_r+0x24>)
    6dd4:	6022      	str	r2, [r4, #0]
    6dd6:	001a      	movs	r2, r3
    6dd8:	f7fd fe9e 	bl	4b18 <_lseek>
    6ddc:	1c43      	adds	r3, r0, #1
    6dde:	d103      	bne.n	6de8 <_lseek_r+0x20>
    6de0:	6823      	ldr	r3, [r4, #0]
    6de2:	2b00      	cmp	r3, #0
    6de4:	d000      	beq.n	6de8 <_lseek_r+0x20>
    6de6:	602b      	str	r3, [r5, #0]
    6de8:	bd70      	pop	{r4, r5, r6, pc}
    6dea:	46c0      	nop			; (mov r8, r8)
    6dec:	200008c8 	.word	0x200008c8

00006df0 <memchr>:
    6df0:	b2c9      	uxtb	r1, r1
    6df2:	1882      	adds	r2, r0, r2
    6df4:	4290      	cmp	r0, r2
    6df6:	d004      	beq.n	6e02 <memchr+0x12>
    6df8:	7803      	ldrb	r3, [r0, #0]
    6dfa:	428b      	cmp	r3, r1
    6dfc:	d002      	beq.n	6e04 <memchr+0x14>
    6dfe:	3001      	adds	r0, #1
    6e00:	e7f8      	b.n	6df4 <memchr+0x4>
    6e02:	2000      	movs	r0, #0
    6e04:	4770      	bx	lr
	...

00006e08 <_read_r>:
    6e08:	b570      	push	{r4, r5, r6, lr}
    6e0a:	0005      	movs	r5, r0
    6e0c:	0008      	movs	r0, r1
    6e0e:	0011      	movs	r1, r2
    6e10:	2200      	movs	r2, #0
    6e12:	4c06      	ldr	r4, [pc, #24]	; (6e2c <_read_r+0x24>)
    6e14:	6022      	str	r2, [r4, #0]
    6e16:	001a      	movs	r2, r3
    6e18:	f7fd fe18 	bl	4a4c <_read>
    6e1c:	1c43      	adds	r3, r0, #1
    6e1e:	d103      	bne.n	6e28 <_read_r+0x20>
    6e20:	6823      	ldr	r3, [r4, #0]
    6e22:	2b00      	cmp	r3, #0
    6e24:	d000      	beq.n	6e28 <_read_r+0x20>
    6e26:	602b      	str	r3, [r5, #0]
    6e28:	bd70      	pop	{r4, r5, r6, pc}
    6e2a:	46c0      	nop			; (mov r8, r8)
    6e2c:	200008c8 	.word	0x200008c8

00006e30 <sysfont_glyphs>:
    6e30:	00000000 20000000 20202020 50502000     .......     . PP
    6e40:	00000050 f8505000 5050f850 70a07820     P....PP.P.PP x.p
    6e50:	c020f028 402010c8 90601898 90a840a0     (. ... @..`..@..
    6e60:	40206068 00000000 40402010 40102040     h` @..... @@@ .@
    6e70:	10101020 50004020 5020f820 20200000      ... @.P . P..  
    6e80:	002020f8 00000000 00402060 00f80000     .  .....` @.....
    6e90:	00000000 60000000 10080060 00804020     .......``... @..
    6ea0:	a8988870 207088c8 20202060 88707020     p.....p `    pp.
    6eb0:	40201008 2010f8f8 70880810 90503010     .. @... ...p.0P.
    6ec0:	f81010f8 0808f080 40307088 8888f080     .........p0@....
    6ed0:	1008f870 40404020 70888870 70708888     p... @@@p..p..pp
    6ee0:	08788888 60006010 60600060 60600000     ..x..`.``.``..``
    6ef0:	40206000 40201008 00081020 f800f800     .` @.. @ .......
    6f00:	40800000 40201020 08887080 20002010     ...@ . @.p... . 
    6f10:	68088870 7070a8a8 f8888888 88f08888     p..h..pp........
    6f20:	8888f088 808870f0 70888080 888890e0     .....p.....p....
    6f30:	f8e09088 80f08080 80f8f880 8080e080     ................
    6f40:	80887080 70889880 f8888888 70888888     .p.....p.......p
    6f50:	20202020 10387020 90101010 a0908860          p8.....`...
    6f60:	8890a0c0 80808080 88f88080 8888a8d8     ................
    6f70:	88888888 8898a8c8 88887088 70888888     .........p.....p
    6f80:	f08888f0 70808080 a8888888 88f06890     .......p.....h..
    6f90:	90a0f088 80807888 f0080870 202020f8     .....x..p....   
    6fa0:	88202020 88888888 88887088 50888888        ......p.....P
    6fb0:	88888820 88d8a8a8 20508888 88888850      .........P P...
    6fc0:	20205088 08f82020 80402010 202038f8     .P    ... @..8  
    6fd0:	38202020 20408000 e0000810 20202020        8..@ ....    
    6fe0:	5020e020 00000088 00000000 f8000000      . P............
    6ff0:	00102040 00000000 78087000 80807888     @ .......p.x.x..
    7000:	8888c8b0 700000f0 70888080 98680808     .......p...p..h.
    7010:	00788888 f8887000 48307080 4040e040     ..x..p...p0H@.@@
    7020:	78000040 30087888 c8b08080 20888888     @..x.x.0....... 
    7030:	20206000 00107020 90101030 48404060     .`   p..0...`@@H
    7040:	48506050 20202060 00702020 a8a8d000     P`PH`     p.....
    7050:	00008888 8888c8b0 70000088 70888888     ...........p...p
    7060:	88f00000 008080f0 78986800 00000808     .........h.x....
    7070:	8080c8b0 70000080 f0087080 40e04040     .......p.p..@@.@
    7080:	00304840 88888800 00006898 50888888     @H0......h.....P
    7090:	88000020 50a8a888 50880000 00885020      ......P...P P..
    70a0:	78888800 00007008 402010f8 202010f8     ...x.p.... @..  
    70b0:	10202040 20202020 40202020 20102020     @  .       @  . 
    70c0:	00004020 75636553 20646572 00000000      @..Secured ....
    70d0:	616f7242 73616364 61502074 74656b63     Broadcast Packet
    70e0:	00000020 63696e55 20747361 6b636150      ...Unicast Pack
    70f0:	00207465 6f726620 0000206d 0000203a     et . from ..: ..

00007100 <mySecurityKey>:
    7100:	03020100 07060504 0b0a0908 0f0e0d0c     ................

00007110 <greeting>:
    7110:	6957694d 50325020 4154532f 200a2052     MiWi P2P/STAR . 
    7120:	53206e6f 33524d41 00000030 00000000     on SAMR30.......

00007130 <LED_Demo_Req>:
    7130:	2044454c 6f6d6544 52200a20 65757165     LED Demo . Reque
    7140:	64657473 00000020 00000000 00000000     sted ...........

00007150 <LED_Demo_Res>:
    7150:	2044454c 6f6d6544 52200a20 6f707365     LED Demo . Respo
    7160:	2065736e 00000000 00000000 00000000     nse ............
    7170:	42000000 42000400 42000800 42000c00     ...B...B...B...B
    7180:	42001000 43000400 0b0a0908 00000d0c     ...B...C........
    7190:	00003e1e 00003e1a 00003e1a 00003e7c     .>...>...>..|>..
    71a0:	00003e7c 00003e34 00003e24 00003e3a     |>..4>..$>..:>..
    71b0:	00003e6a 00003f8c 00003f6c 00003f6c     j>...?..l?..l?..
    71c0:	00004006 00003f7e 00003f9a 00003f70     .@..~?...?..p?..
    71d0:	00003fa8 00003fea 00004044 00004086     .?...?..D@...@..
    71e0:	00004086 00004086 00004036 00004052     .@...@..6@..R@..
    71f0:	00004028 00004060 00004076 000046f2     (@..`@..v@...F..
    7200:	000046fc 00004706 00004710 0000471a     .F...G...G...G..
    7210:	0000474c 00004756 00004760 0000476a     LG..VG..`G..jG..
    7220:	00004774 42002000 42002400 43000800     tG... .B.$.B...C
    7230:	001d1b1b 00000002 00000100 00000002     ................
    7240:	00000200 00000003 00000004 50200a0d     .............. P
    7250:	656b6361 72452074 20726f72 65746152     acket Error Rate
    7260:	25203a20 65702064 6e656372 00000a74      : %d percent...

00007270 <MiWi_Data>:
    7270:	2020b220 2020b220 20b220b2 20202020      .   .  . .     
    7280:	0db220b2 b220b20a b220b220 b2202020     . .... . . .   .
    7290:	20b22020 2020b220 20b20a0d 2020b220       .  .  ...  .  
    72a0:	20b220b2 b22020b2 20b22020 b20a0db2     . . .  .  . ....
    72b0:	20b22020 b220b220 20b22020 20b220b2       .  . .  . . . 
    72c0:	0a0db220 b22020b2 20b22020 202020b2      ....  .  . .   
    72d0:	20b220b2 0db22020 2020200a 20202020     . .   ...       
    72e0:	20202020 20202020 20202020 00430a0d                 ..C.

000072f0 <_global_impure_ptr>:
    72f0:	20000038                                8.. 

000072f4 <__sf_fake_stdin>:
	...

00007314 <__sf_fake_stdout>:
	...

00007334 <__sf_fake_stderr>:
	...
    7354:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    7364:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    7374:	31300046 35343332 39383736 64636261     F.0123456789abcd
    7384:	00006665                                ef..

00007388 <_init>:
    7388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    738a:	46c0      	nop			; (mov r8, r8)
    738c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    738e:	bc08      	pop	{r3}
    7390:	469e      	mov	lr, r3
    7392:	4770      	bx	lr

00007394 <__init_array_start>:
    7394:	000000dd 	.word	0x000000dd

00007398 <_fini>:
    7398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    739a:	46c0      	nop			; (mov r8, r8)
    739c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    739e:	bc08      	pop	{r3}
    73a0:	469e      	mov	lr, r3
    73a2:	4770      	bx	lr

000073a4 <__fini_array_start>:
    73a4:	000000b5 	.word	0x000000b5
