
SAMR30_LaunchDemo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000061c8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000090  20000000  000061c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00020090  2**0
                  CONTENTS
  3 .bss          00000640  20000090  00006258  00020090  2**2
                  ALLOC
  4 .stack        00002000  200006d0  00006898  00020090  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
  7 .debug_info   00034cc0  00000000  00000000  00020111  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000053d3  00000000  00000000  00054dd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000dc7b  00000000  00000000  0005a1a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000978  00000000  00000000  00067e1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000df0  00000000  00000000  00068797  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000234df  00000000  00000000  00069587  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00017dee  00000000  00000000  0008ca66  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009b057  00000000  00000000  000a4854  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001e14  00000000  00000000  0013f8ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200026d0 	.word	0x200026d0
       4:	000042a5 	.word	0x000042a5
       8:	000042a1 	.word	0x000042a1
       c:	000042a1 	.word	0x000042a1
	...
      2c:	000042a1 	.word	0x000042a1
	...
      38:	000042a1 	.word	0x000042a1
      3c:	000042a1 	.word	0x000042a1
      40:	000042a1 	.word	0x000042a1
      44:	000042a1 	.word	0x000042a1
      48:	000042a1 	.word	0x000042a1
      4c:	000025e5 	.word	0x000025e5
      50:	000042a1 	.word	0x000042a1
      54:	000042a1 	.word	0x000042a1
      58:	000042a1 	.word	0x000042a1
      5c:	000042a1 	.word	0x000042a1
      60:	00002c1d 	.word	0x00002c1d
      64:	00002c2d 	.word	0x00002c2d
      68:	00002c3d 	.word	0x00002c3d
      6c:	00002c4d 	.word	0x00002c4d
      70:	00002c5d 	.word	0x00002c5d
      74:	00002c6d 	.word	0x00002c6d
      78:	000042a1 	.word	0x000042a1
      7c:	000042a1 	.word	0x000042a1
      80:	000042a1 	.word	0x000042a1
      84:	00003eb1 	.word	0x00003eb1
      88:	00003ec1 	.word	0x00003ec1
	...
      94:	00003ed1 	.word	0x00003ed1
      98:	000042a1 	.word	0x000042a1
      9c:	000042a1 	.word	0x000042a1
      a0:	00000000 	.word	0x00000000
      a4:	000042a1 	.word	0x000042a1
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000090 	.word	0x20000090
      d4:	00000000 	.word	0x00000000
      d8:	000061c8 	.word	0x000061c8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000094 	.word	0x20000094
     108:	000061c8 	.word	0x000061c8
     10c:	000061c8 	.word	0x000061c8
     110:	00000000 	.word	0x00000000

00000114 <ButtonPressed>:
*
* Output: Buttons State
*
********************************************************************/
uint8_t ButtonPressed(void)
{
     114:	b510      	push	{r4, lr}
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     116:	4b13      	ldr	r3, [pc, #76]	; (164 <ButtonPressed+0x50>)
     118:	6a1a      	ldr	r2, [r3, #32]
     11a:	2380      	movs	r3, #128	; 0x80
     11c:	055b      	lsls	r3, r3, #21
     11e:	4013      	ands	r3, r2
	MIWI_TICK tickDifference;
	
	PUSH_BUTTON_SW0 = port_pin_get_input_level(BUTTON_0_PIN);
     120:	0019      	movs	r1, r3
     122:	1e4a      	subs	r2, r1, #1
     124:	4191      	sbcs	r1, r2
     126:	4a10      	ldr	r2, [pc, #64]	; (168 <ButtonPressed+0x54>)
     128:	7011      	strb	r1, [r2, #0]

	if(PUSH_BUTTON_SW0 == 0)
     12a:	2b00      	cmp	r3, #0
     12c:	d10d      	bne.n	14a <ButtonPressed+0x36>
	{
		//if the button was previously not pressed
		if(PUSH_BUTTON_pressed == false)
     12e:	4b0f      	ldr	r3, [pc, #60]	; (16c <ButtonPressed+0x58>)
     130:	781b      	ldrb	r3, [r3, #0]
		{
			PUSH_BUTTON_pressed = false;
		}
	}

	return 0;
     132:	2000      	movs	r0, #0
	PUSH_BUTTON_SW0 = port_pin_get_input_level(BUTTON_0_PIN);

	if(PUSH_BUTTON_SW0 == 0)
	{
		//if the button was previously not pressed
		if(PUSH_BUTTON_pressed == false)
     134:	2b00      	cmp	r3, #0
     136:	d113      	bne.n	160 <ButtonPressed+0x4c>
		{
			PUSH_BUTTON_pressed = true;
     138:	2201      	movs	r2, #1
     13a:	4b0c      	ldr	r3, [pc, #48]	; (16c <ButtonPressed+0x58>)
     13c:	701a      	strb	r2, [r3, #0]
			PUSH_BUTTON_press_time = MiWi_TickGet();
     13e:	4b0c      	ldr	r3, [pc, #48]	; (170 <ButtonPressed+0x5c>)
     140:	4798      	blx	r3
     142:	4b0c      	ldr	r3, [pc, #48]	; (174 <ButtonPressed+0x60>)
     144:	6018      	str	r0, [r3, #0]
			return 1;
     146:	2001      	movs	r0, #1
     148:	e00a      	b.n	160 <ButtonPressed+0x4c>
		}
	}
	else
	{
		//get the current time
		MIWI_TICK t = MiWi_TickGet();
     14a:	4b09      	ldr	r3, [pc, #36]	; (170 <ButtonPressed+0x5c>)
     14c:	4798      	blx	r3

		//if the button has been released long enough
		tickDifference.Val = MiWi_TickGetDiff(t,PUSH_BUTTON_press_time);
     14e:	4b09      	ldr	r3, [pc, #36]	; (174 <ButtonPressed+0x60>)

		//then we can mark it as not pressed
		if(tickDifference.Val > FORTY_MILI_SECOND) // Debounce time of 40 ms  // 30 ms 
     150:	681b      	ldr	r3, [r3, #0]
     152:	1ac0      	subs	r0, r0, r3
     154:	2804      	cmp	r0, #4
     156:	d902      	bls.n	15e <ButtonPressed+0x4a>
		{
			PUSH_BUTTON_pressed = false;
     158:	2200      	movs	r2, #0
     15a:	4b04      	ldr	r3, [pc, #16]	; (16c <ButtonPressed+0x58>)
     15c:	701a      	strb	r2, [r3, #0]
		}
	}

	return 0;
     15e:	2000      	movs	r0, #0
	
     160:	bd10      	pop	{r4, pc}
     162:	46c0      	nop			; (mov r8, r8)
     164:	40002800 	.word	0x40002800
     168:	2000028b 	.word	0x2000028b
     16c:	20000288 	.word	0x20000288
     170:	000023a1 	.word	0x000023a1
     174:	20000290 	.word	0x20000290

00000178 <CONSOLE_PutString>:
* Note:             Do not power down the microcontroller until
*                   the transmission is complete or the last
*                   transmission of the string can be corrupted.
********************************************************************/
void CONSOLE_PutString(char* str)
{
     178:	b570      	push	{r4, r5, r6, lr}
	uint8_t c;

	while( c = *str++ )
     17a:	1c44      	adds	r4, r0, #1
     17c:	7800      	ldrb	r0, [r0, #0]
     17e:	2800      	cmp	r0, #0
     180:	d006      	beq.n	190 <CONSOLE_PutString+0x18>
	sio2host_putchar(c);
     182:	4d04      	ldr	r5, [pc, #16]	; (194 <CONSOLE_PutString+0x1c>)
     184:	47a8      	blx	r5
     186:	3401      	adds	r4, #1
********************************************************************/
void CONSOLE_PutString(char* str)
{
	uint8_t c;

	while( c = *str++ )
     188:	1e63      	subs	r3, r4, #1
     18a:	7818      	ldrb	r0, [r3, #0]
     18c:	2800      	cmp	r0, #0
     18e:	d1f9      	bne.n	184 <CONSOLE_PutString+0xc>
	sio2host_putchar(c);
}
     190:	bd70      	pop	{r4, r5, r6, pc}
     192:	46c0      	nop			; (mov r8, r8)
     194:	00004635 	.word	0x00004635

00000198 <CONSOLE_PrintHex>:
* Note:             Do not power down the microcontroller until
*                   the transmission is complete or the last
*                   transmission of the string can be corrupted.
********************************************************************/
void CONSOLE_PrintHex(uint8_t toPrint)
{
     198:	b570      	push	{r4, r5, r6, lr}
     19a:	0004      	movs	r4, r0
	uint8_t PRINT_VAR;
	PRINT_VAR = toPrint;
	toPrint = (toPrint>>4)&0x0F;
	sio2host_putchar(CharacterArray[toPrint]);
     19c:	4e04      	ldr	r6, [pc, #16]	; (1b0 <CONSOLE_PrintHex+0x18>)
     19e:	0903      	lsrs	r3, r0, #4
     1a0:	5cf0      	ldrb	r0, [r6, r3]
     1a2:	4d04      	ldr	r5, [pc, #16]	; (1b4 <CONSOLE_PrintHex+0x1c>)
     1a4:	47a8      	blx	r5
	toPrint = (PRINT_VAR)&0x0F;
	sio2host_putchar(CharacterArray[toPrint]);
     1a6:	230f      	movs	r3, #15
     1a8:	401c      	ands	r4, r3
     1aa:	5d30      	ldrb	r0, [r6, r4]
     1ac:	47a8      	blx	r5
	return;
}
     1ae:	bd70      	pop	{r4, r5, r6, pc}
     1b0:	20000000 	.word	0x20000000
     1b4:	00004635 	.word	0x00004635

000001b8 <print_rx_message>:
	sio2host_putchar(CharacterArray[(toPrint%100)/10]);
	sio2host_putchar(CharacterArray[toPrint%10]);
}

void print_rx_message(void)
{
     1b8:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;

	if( rxMessage.flags.bits.secEn )
     1ba:	4b21      	ldr	r3, [pc, #132]	; (240 <print_rx_message+0x88>)
     1bc:	781b      	ldrb	r3, [r3, #0]
     1be:	071b      	lsls	r3, r3, #28
     1c0:	d502      	bpl.n	1c8 <print_rx_message+0x10>
	{
	CONSOLE_PutString((char *)"Secured ");
     1c2:	4820      	ldr	r0, [pc, #128]	; (244 <print_rx_message+0x8c>)
     1c4:	4b20      	ldr	r3, [pc, #128]	; (248 <print_rx_message+0x90>)
     1c6:	4798      	blx	r3
	}

	if( rxMessage.flags.bits.broadcast )
     1c8:	4b1d      	ldr	r3, [pc, #116]	; (240 <print_rx_message+0x88>)
     1ca:	781b      	ldrb	r3, [r3, #0]
     1cc:	079b      	lsls	r3, r3, #30
     1ce:	d003      	beq.n	1d8 <print_rx_message+0x20>
	{
	CONSOLE_PutString((char *)"Broadcast Packet ");
     1d0:	481e      	ldr	r0, [pc, #120]	; (24c <print_rx_message+0x94>)
     1d2:	4b1d      	ldr	r3, [pc, #116]	; (248 <print_rx_message+0x90>)
     1d4:	4798      	blx	r3
     1d6:	e002      	b.n	1de <print_rx_message+0x26>
	}
	else
	{
	CONSOLE_PutString((char *)"Unicast Packet ");
     1d8:	481d      	ldr	r0, [pc, #116]	; (250 <print_rx_message+0x98>)
     1da:	4b1b      	ldr	r3, [pc, #108]	; (248 <print_rx_message+0x90>)
     1dc:	4798      	blx	r3
	}
	//CONSOLE_PrintHex(rxMessage.PacketRSSI);
	if( rxMessage.flags.bits.srcPrsnt )
     1de:	4b18      	ldr	r3, [pc, #96]	; (240 <print_rx_message+0x88>)
     1e0:	781b      	ldrb	r3, [r3, #0]
     1e2:	065b      	lsls	r3, r3, #25
     1e4:	d518      	bpl.n	218 <print_rx_message+0x60>
	{
	CONSOLE_PutString((char *)" from ");
     1e6:	481b      	ldr	r0, [pc, #108]	; (254 <print_rx_message+0x9c>)
     1e8:	4b17      	ldr	r3, [pc, #92]	; (248 <print_rx_message+0x90>)
     1ea:	4798      	blx	r3
	if( rxMessage.flags.bits.altSrcAddr )
     1ec:	4b14      	ldr	r3, [pc, #80]	; (240 <print_rx_message+0x88>)
     1ee:	781b      	ldrb	r3, [r3, #0]
     1f0:	09db      	lsrs	r3, r3, #7
     1f2:	2407      	movs	r4, #7
     1f4:	2b00      	cmp	r3, #0
     1f6:	d008      	beq.n	20a <print_rx_message+0x52>
	{
	CONSOLE_PrintHex( rxMessage.SourceAddress[1]);
     1f8:	4d11      	ldr	r5, [pc, #68]	; (240 <print_rx_message+0x88>)
     1fa:	686b      	ldr	r3, [r5, #4]
     1fc:	7858      	ldrb	r0, [r3, #1]
     1fe:	4c16      	ldr	r4, [pc, #88]	; (258 <print_rx_message+0xa0>)
     200:	47a0      	blx	r4
	CONSOLE_PrintHex( rxMessage.SourceAddress[0]);
     202:	686b      	ldr	r3, [r5, #4]
     204:	7818      	ldrb	r0, [r3, #0]
     206:	47a0      	blx	r4
     208:	e006      	b.n	218 <print_rx_message+0x60>
	}
	else
	{
	for(i = 0; i < MY_ADDRESS_LENGTH; i++)
	{
	CONSOLE_PrintHex(rxMessage.SourceAddress[MY_ADDRESS_LENGTH-1-i]);
     20a:	4e0d      	ldr	r6, [pc, #52]	; (240 <print_rx_message+0x88>)
     20c:	4d12      	ldr	r5, [pc, #72]	; (258 <print_rx_message+0xa0>)
     20e:	6873      	ldr	r3, [r6, #4]
     210:	5d18      	ldrb	r0, [r3, r4]
     212:	47a8      	blx	r5
	CONSOLE_PrintHex( rxMessage.SourceAddress[1]);
	CONSOLE_PrintHex( rxMessage.SourceAddress[0]);
	}
	else
	{
	for(i = 0; i < MY_ADDRESS_LENGTH; i++)
     214:	3c01      	subs	r4, #1
     216:	d2fa      	bcs.n	20e <print_rx_message+0x56>
	{
	CONSOLE_PrintHex(rxMessage.SourceAddress[MY_ADDRESS_LENGTH-1-i]);
	}
	}
	}
	CONSOLE_PutString((char *)": ");
     218:	4810      	ldr	r0, [pc, #64]	; (25c <print_rx_message+0xa4>)
     21a:	4b0b      	ldr	r3, [pc, #44]	; (248 <print_rx_message+0x90>)
     21c:	4798      	blx	r3

	for(i = 0; i < rxMessage.PayloadSize; i++)
     21e:	4b08      	ldr	r3, [pc, #32]	; (240 <print_rx_message+0x88>)
     220:	7b1b      	ldrb	r3, [r3, #12]
     222:	2b00      	cmp	r3, #0
     224:	d00a      	beq.n	23c <print_rx_message+0x84>
     226:	2400      	movs	r4, #0
	{
		sio2host_putchar(rxMessage.Payload[i]);
     228:	4d05      	ldr	r5, [pc, #20]	; (240 <print_rx_message+0x88>)
     22a:	4e0d      	ldr	r6, [pc, #52]	; (260 <print_rx_message+0xa8>)
     22c:	68ab      	ldr	r3, [r5, #8]
     22e:	5d18      	ldrb	r0, [r3, r4]
     230:	47b0      	blx	r6
	}
	}
	}
	CONSOLE_PutString((char *)": ");

	for(i = 0; i < rxMessage.PayloadSize; i++)
     232:	3401      	adds	r4, #1
     234:	b2e4      	uxtb	r4, r4
     236:	7b2b      	ldrb	r3, [r5, #12]
     238:	42a3      	cmp	r3, r4
     23a:	d8f7      	bhi.n	22c <print_rx_message+0x74>
	{
		sio2host_putchar(rxMessage.Payload[i]);
	}
     23c:	bd70      	pop	{r4, r5, r6, pc}
     23e:	46c0      	nop			; (mov r8, r8)
     240:	200005dc 	.word	0x200005dc
     244:	00005dc8 	.word	0x00005dc8
     248:	00000179 	.word	0x00000179
     24c:	00005dd4 	.word	0x00005dd4
     250:	00005de8 	.word	0x00005de8
     254:	00005df8 	.word	0x00005df8
     258:	00000199 	.word	0x00000199
     25c:	00005e00 	.word	0x00005e00
     260:	00004635 	.word	0x00004635

00000264 <phyTrxSetState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
     264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     266:	0004      	movs	r4, r0

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
     268:	4f0b      	ldr	r7, [pc, #44]	; (298 <phyTrxSetState+0x34>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
     26a:	4e0c      	ldr	r6, [pc, #48]	; (29c <phyTrxSetState+0x38>)
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
	do { phyWriteRegister(RG_TRX_STATE, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
     26c:	251f      	movs	r5, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
     26e:	2103      	movs	r1, #3
     270:	2002      	movs	r0, #2
     272:	47b8      	blx	r7
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
     274:	2001      	movs	r0, #1
     276:	47b0      	blx	r6
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
	do { phyWriteRegister(RG_TRX_STATE, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
     278:	4028      	ands	r0, r5
     27a:	2808      	cmp	r0, #8
     27c:	d1f7      	bne.n	26e <phyTrxSetState+0xa>

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
     27e:	4f06      	ldr	r7, [pc, #24]	; (298 <phyTrxSetState+0x34>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
     280:	4e06      	ldr	r6, [pc, #24]	; (29c <phyTrxSetState+0x38>)
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));

	do { phyWriteRegister(RG_TRX_STATE,
			     state); } while (state !=
			(phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
     282:	251f      	movs	r5, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
     284:	0021      	movs	r1, r4
     286:	2002      	movs	r0, #2
     288:	47b8      	blx	r7
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
     28a:	2001      	movs	r0, #1
     28c:	47b0      	blx	r6
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));

	do { phyWriteRegister(RG_TRX_STATE,
			     state); } while (state !=
			(phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
     28e:	4028      	ands	r0, r5
     290:	4284      	cmp	r4, r0
     292:	d1f7      	bne.n	284 <phyTrxSetState+0x20>
}
     294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     296:	46c0      	nop			; (mov r8, r8)
     298:	000048b1 	.word	0x000048b1
     29c:	000047b5 	.word	0x000047b5

000002a0 <phySetRxState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phySetRxState(void)
{
     2a0:	b510      	push	{r4, lr}
	phyTrxSetState(TRX_CMD_TRX_OFF);
     2a2:	2008      	movs	r0, #8
     2a4:	4b06      	ldr	r3, [pc, #24]	; (2c0 <phySetRxState+0x20>)
     2a6:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
     2a8:	200f      	movs	r0, #15
     2aa:	4b06      	ldr	r3, [pc, #24]	; (2c4 <phySetRxState+0x24>)
     2ac:	4798      	blx	r3
{
	phyTrxSetState(TRX_CMD_TRX_OFF);

	phyReadRegister(RG_IRQ_STATUS);

	if (phyRxState) {
     2ae:	4b06      	ldr	r3, [pc, #24]	; (2c8 <phySetRxState+0x28>)
     2b0:	781b      	ldrb	r3, [r3, #0]
     2b2:	2b00      	cmp	r3, #0
     2b4:	d002      	beq.n	2bc <phySetRxState+0x1c>
		phyTrxSetState(TRX_CMD_RX_AACK_ON);
     2b6:	2016      	movs	r0, #22
     2b8:	4b01      	ldr	r3, [pc, #4]	; (2c0 <phySetRxState+0x20>)
     2ba:	4798      	blx	r3
	}
}
     2bc:	bd10      	pop	{r4, pc}
     2be:	46c0      	nop			; (mov r8, r8)
     2c0:	00000265 	.word	0x00000265
     2c4:	000047b5 	.word	0x000047b5
     2c8:	20000130 	.word	0x20000130

000002cc <PHY_DataReq>:

/*************************************************************************//**
*****************************************************************************/
// Trigger to Transmit Packet 
void PHY_DataReq(uint8_t *data)
{
     2cc:	b510      	push	{r4, lr}
     2ce:	0004      	movs	r4, r0
	phyTrxSetState(TRX_CMD_TX_ARET_ON);
     2d0:	2019      	movs	r0, #25
     2d2:	4b0c      	ldr	r3, [pc, #48]	; (304 <PHY_DataReq+0x38>)
     2d4:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
     2d6:	200f      	movs	r0, #15
     2d8:	4b0b      	ldr	r3, [pc, #44]	; (308 <PHY_DataReq+0x3c>)
     2da:	4798      	blx	r3
	phyReadRegister(RG_IRQ_STATUS);

	/* size of the buffer is sent as first byte of the data
	 * and data starts from second byte.
	 */
	data[1] += 2;// 2
     2dc:	7861      	ldrb	r1, [r4, #1]
     2de:	1c8b      	adds	r3, r1, #2
     2e0:	7063      	strb	r3, [r4, #1]
	trx_frame_write(&data[1], (data[1]-1 ) /* length value*/);
     2e2:	3101      	adds	r1, #1
     2e4:	b2c9      	uxtb	r1, r1
     2e6:	1c60      	adds	r0, r4, #1
     2e8:	4b08      	ldr	r3, [pc, #32]	; (30c <PHY_DataReq+0x40>)
     2ea:	4798      	blx	r3
	phyState = PHY_STATE_TX_WAIT_END;
     2ec:	2203      	movs	r2, #3
     2ee:	4b08      	ldr	r3, [pc, #32]	; (310 <PHY_DataReq+0x44>)
     2f0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     2f2:	4b08      	ldr	r3, [pc, #32]	; (314 <PHY_DataReq+0x48>)
     2f4:	2280      	movs	r2, #128	; 0x80
     2f6:	0352      	lsls	r2, r2, #13
     2f8:	619a      	str	r2, [r3, #24]

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
     2fa:	46c0      	nop			; (mov r8, r8)
     2fc:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
     2fe:	615a      	str	r2, [r3, #20]

	TRX_SLP_TR_HIGH();
	TRX_TRIG_DELAY();
	TRX_SLP_TR_LOW();
}
     300:	bd10      	pop	{r4, pc}
     302:	46c0      	nop			; (mov r8, r8)
     304:	00000265 	.word	0x00000265
     308:	000047b5 	.word	0x000047b5
     30c:	00004ae1 	.word	0x00004ae1
     310:	2000012c 	.word	0x2000012c
     314:	40002800 	.word	0x40002800

00000318 <PHY_RandomReq>:

/*************************************************************************//**
*****************************************************************************/
// Random Number Generator 
uint16_t PHY_RandomReq(void)
{
     318:	b5f0      	push	{r4, r5, r6, r7, lr}
     31a:	4647      	mov	r7, r8
     31c:	b480      	push	{r7}
	uint16_t rnd = 0;
	uint8_t rndValue;

	phyTrxSetState(TRX_CMD_RX_ON);
     31e:	2006      	movs	r0, #6
     320:	4b0d      	ldr	r3, [pc, #52]	; (358 <PHY_RandomReq+0x40>)
     322:	4798      	blx	r3
     324:	2400      	movs	r4, #0
/*************************************************************************//**
*****************************************************************************/
// Random Number Generator 
uint16_t PHY_RandomReq(void)
{
	uint16_t rnd = 0;
     326:	2500      	movs	r5, #0
	uint8_t rndValue;

	phyTrxSetState(TRX_CMD_RX_ON);

	for (uint8_t i = 0; i < 16; i += 2) {
		delay_cycles_us(1);
     328:	4f0c      	ldr	r7, [pc, #48]	; (35c <PHY_RandomReq+0x44>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
     32a:	4e0d      	ldr	r6, [pc, #52]	; (360 <PHY_RandomReq+0x48>)
	phyTrxSetState(TRX_CMD_RX_ON);

	for (uint8_t i = 0; i < 16; i += 2) {
		delay_cycles_us(1);
		rndValue = (phyReadRegister(RG_PHY_RSSI) >> RND_VALUE) & 3;
		rnd |= rndValue << i;
     32c:	2303      	movs	r3, #3
     32e:	4698      	mov	r8, r3
	uint8_t rndValue;

	phyTrxSetState(TRX_CMD_RX_ON);

	for (uint8_t i = 0; i < 16; i += 2) {
		delay_cycles_us(1);
     330:	2001      	movs	r0, #1
     332:	47b8      	blx	r7
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
     334:	2006      	movs	r0, #6
     336:	47b0      	blx	r6
	phyTrxSetState(TRX_CMD_RX_ON);

	for (uint8_t i = 0; i < 16; i += 2) {
		delay_cycles_us(1);
		rndValue = (phyReadRegister(RG_PHY_RSSI) >> RND_VALUE) & 3;
		rnd |= rndValue << i;
     338:	0940      	lsrs	r0, r0, #5
     33a:	4643      	mov	r3, r8
     33c:	4018      	ands	r0, r3
     33e:	40a0      	lsls	r0, r4
     340:	4328      	orrs	r0, r5
     342:	b285      	uxth	r5, r0
     344:	3402      	adds	r4, #2
	uint16_t rnd = 0;
	uint8_t rndValue;

	phyTrxSetState(TRX_CMD_RX_ON);

	for (uint8_t i = 0; i < 16; i += 2) {
     346:	2c10      	cmp	r4, #16
     348:	d1f2      	bne.n	330 <PHY_RandomReq+0x18>
		delay_cycles_us(1);
		rndValue = (phyReadRegister(RG_PHY_RSSI) >> RND_VALUE) & 3;
		rnd |= rndValue << i;
	}
	phySetRxState();
     34a:	4b06      	ldr	r3, [pc, #24]	; (364 <PHY_RandomReq+0x4c>)
     34c:	4798      	blx	r3

	return rnd;
}
     34e:	0028      	movs	r0, r5
     350:	bc04      	pop	{r2}
     352:	4690      	mov	r8, r2
     354:	bdf0      	pop	{r4, r5, r6, r7, pc}
     356:	46c0      	nop			; (mov r8, r8)
     358:	00000265 	.word	0x00000265
     35c:	000023f5 	.word	0x000023f5
     360:	000047b5 	.word	0x000047b5
     364:	000002a1 	.word	0x000002a1

00000368 <PHY_Init>:

/*************************************************************************//**
*****************************************************************************/
// Radio Initialization
void PHY_Init(void)
{
     368:	b570      	push	{r4, r5, r6, lr}
	trx_spi_init();
     36a:	4b0f      	ldr	r3, [pc, #60]	; (3a8 <PHY_Init+0x40>)
     36c:	4798      	blx	r3
	PhyReset();
     36e:	4b0f      	ldr	r3, [pc, #60]	; (3ac <PHY_Init+0x44>)
     370:	4798      	blx	r3
	phyRxState = false;
     372:	2200      	movs	r2, #0
     374:	4b0e      	ldr	r3, [pc, #56]	; (3b0 <PHY_Init+0x48>)
     376:	701a      	strb	r2, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
     378:	21ff      	movs	r1, #255	; 0xff
     37a:	200e      	movs	r0, #14
     37c:	4b0d      	ldr	r3, [pc, #52]	; (3b4 <PHY_Init+0x4c>)
     37e:	4798      	blx	r3
     380:	4e0c      	ldr	r6, [pc, #48]	; (3b4 <PHY_Init+0x4c>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
     382:	4d0d      	ldr	r5, [pc, #52]	; (3b8 <PHY_Init+0x50>)
	phyRxState = false;

	phyWriteRegister(RG_IRQ_MASK , 0xFF);
	do {phyWriteRegister(RG_TRX_STATE, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
	(phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
     384:	241f      	movs	r4, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
     386:	2108      	movs	r1, #8
     388:	2002      	movs	r0, #2
     38a:	47b0      	blx	r6
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
     38c:	2001      	movs	r0, #1
     38e:	47a8      	blx	r5
	phyRxState = false;

	phyWriteRegister(RG_IRQ_MASK , 0xFF);
	do {phyWriteRegister(RG_TRX_STATE, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
	(phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
     390:	4020      	ands	r0, r4
     392:	2808      	cmp	r0, #8
     394:	d1f7      	bne.n	386 <PHY_Init+0x1e>

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
     396:	212e      	movs	r1, #46	; 0x2e
     398:	3804      	subs	r0, #4
     39a:	4c06      	ldr	r4, [pc, #24]	; (3b4 <PHY_Init+0x4c>)
     39c:	47a0      	blx	r4
     39e:	21a0      	movs	r1, #160	; 0xa0
     3a0:	200c      	movs	r0, #12
     3a2:	47a0      	blx	r4
	(1 << TX_AUTO_CRC_ON) | (3 << SPI_CMD_MODE) |
	(1 << IRQ_MASK_MODE));

	phyWriteRegister(RG_TRX_CTRL_2,
	(1 << RX_SAFE_MODE) | (1 << OQPSK_SCRAM_EN));
}
     3a4:	bd70      	pop	{r4, r5, r6, pc}
     3a6:	46c0      	nop			; (mov r8, r8)
     3a8:	00004669 	.word	0x00004669
     3ac:	00004785 	.word	0x00004785
     3b0:	20000130 	.word	0x20000130
     3b4:	000048b1 	.word	0x000048b1
     3b8:	000047b5 	.word	0x000047b5

000003bc <PHY_SetChannel>:

/*************************************************************************//**
*****************************************************************************/
// Set Channel
void PHY_SetChannel(uint8_t channel)
{
     3bc:	b510      	push	{r4, lr}
     3be:	0004      	movs	r4, r0
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
     3c0:	2008      	movs	r0, #8
     3c2:	4b06      	ldr	r3, [pc, #24]	; (3dc <PHY_SetChannel+0x20>)
     3c4:	4798      	blx	r3

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
     3c6:	231f      	movs	r3, #31
     3c8:	0001      	movs	r1, r0
     3ca:	4399      	bics	r1, r3
     3cc:	0020      	movs	r0, r4
     3ce:	4308      	orrs	r0, r1
     3d0:	b2c1      	uxtb	r1, r0
     3d2:	2008      	movs	r0, #8
     3d4:	4b02      	ldr	r3, [pc, #8]	; (3e0 <PHY_SetChannel+0x24>)
     3d6:	4798      	blx	r3
{
	uint8_t reg;

	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
}
     3d8:	bd10      	pop	{r4, pc}
     3da:	46c0      	nop			; (mov r8, r8)
     3dc:	000047b5 	.word	0x000047b5
     3e0:	000048b1 	.word	0x000048b1

000003e4 <PHY_SetPanId>:

/*************************************************************************//**
*****************************************************************************/
// Set Pan ID
void PHY_SetPanId(uint16_t panId)
{
     3e4:	b530      	push	{r4, r5, lr}
     3e6:	b083      	sub	sp, #12
     3e8:	466b      	mov	r3, sp
     3ea:	1d9d      	adds	r5, r3, #6
     3ec:	80d8      	strh	r0, [r3, #6]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
     3ee:	b2c1      	uxtb	r1, r0
     3f0:	2022      	movs	r0, #34	; 0x22
     3f2:	4c03      	ldr	r4, [pc, #12]	; (400 <PHY_SetPanId+0x1c>)
     3f4:	47a0      	blx	r4
     3f6:	7869      	ldrb	r1, [r5, #1]
     3f8:	2023      	movs	r0, #35	; 0x23
     3fa:	47a0      	blx	r4
void PHY_SetPanId(uint16_t panId)
{
	uint8_t *d = (uint8_t *)&panId;
	phyWriteRegister(RG_PAN_ID_0, d[0]);
	phyWriteRegister(RG_PAN_ID_1, d[1]);
}
     3fc:	b003      	add	sp, #12
     3fe:	bd30      	pop	{r4, r5, pc}
     400:	000048b1 	.word	0x000048b1

00000404 <PHY_SetShortAddr>:

/*************************************************************************//**
*****************************************************************************/
// Set Short Address 
void PHY_SetShortAddr(uint16_t addr)
{
     404:	b570      	push	{r4, r5, r6, lr}
     406:	b082      	sub	sp, #8
     408:	466b      	mov	r3, sp
     40a:	1d9c      	adds	r4, r3, #6
     40c:	80d8      	strh	r0, [r3, #6]
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(RG_SHORT_ADDR_0, d[0]);
     40e:	b2c5      	uxtb	r5, r0

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
     410:	0029      	movs	r1, r5
     412:	2020      	movs	r0, #32
     414:	4e05      	ldr	r6, [pc, #20]	; (42c <PHY_SetShortAddr+0x28>)
     416:	47b0      	blx	r6
void PHY_SetShortAddr(uint16_t addr)
{
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(RG_SHORT_ADDR_0, d[0]);
	phyWriteRegister(RG_SHORT_ADDR_1, d[1]);
     418:	7864      	ldrb	r4, [r4, #1]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
     41a:	0021      	movs	r1, r4
     41c:	2021      	movs	r0, #33	; 0x21
     41e:	47b0      	blx	r6
     420:	192c      	adds	r4, r5, r4
     422:	b2e1      	uxtb	r1, r4
     424:	202d      	movs	r0, #45	; 0x2d
     426:	47b0      	blx	r6
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(RG_SHORT_ADDR_0, d[0]);
	phyWriteRegister(RG_SHORT_ADDR_1, d[1]);
	phyWriteRegister(RG_CSMA_SEED_0, d[0] + d[1]);
}
     428:	b002      	add	sp, #8
     42a:	bd70      	pop	{r4, r5, r6, pc}
     42c:	000048b1 	.word	0x000048b1

00000430 <PHY_EncryptReq>:

/*************************************************************************//**
*****************************************************************************/
// Encrypt Block
void PHY_EncryptReq(uint8_t *text, uint8_t *key)
{
     430:	b510      	push	{r4, lr}
     432:	0004      	movs	r4, r0
     434:	0008      	movs	r0, r1
	sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
     436:	2200      	movs	r2, #0
     438:	2100      	movs	r1, #0
     43a:	4b05      	ldr	r3, [pc, #20]	; (450 <PHY_EncryptReq+0x20>)
     43c:	4798      	blx	r3
	#if (SAL_TYPE == AT86RF2xx)
	sal_aes_wrrd(text, NULL);
     43e:	2100      	movs	r1, #0
     440:	0020      	movs	r0, r4
     442:	4b04      	ldr	r3, [pc, #16]	; (454 <PHY_EncryptReq+0x24>)
     444:	4798      	blx	r3
	#else
	sal_aes_exec(text);
	#endif
	sal_aes_read(text);
     446:	0020      	movs	r0, r4
     448:	4b03      	ldr	r3, [pc, #12]	; (458 <PHY_EncryptReq+0x28>)
     44a:	4798      	blx	r3
}
     44c:	bd10      	pop	{r4, pc}
     44e:	46c0      	nop			; (mov r8, r8)
     450:	000021b5 	.word	0x000021b5
     454:	00002149 	.word	0x00002149
     458:	000022ed 	.word	0x000022ed

0000045c <MiMAC_SetAltAddress>:
 *      None
 *
 *****************************************************************************************/

bool MiMAC_SetAltAddress( uint8_t *Address,  uint8_t *PANID)
{
     45c:	b510      	push	{r4, lr}
	myNetworkAddress.v[0] = Address[0];
     45e:	7802      	ldrb	r2, [r0, #0]
     460:	4b08      	ldr	r3, [pc, #32]	; (484 <MiMAC_SetAltAddress+0x28>)
     462:	701a      	strb	r2, [r3, #0]
	myNetworkAddress.v[1] = Address[1];
     464:	7842      	ldrb	r2, [r0, #1]
     466:	705a      	strb	r2, [r3, #1]
	MAC_PANID.v[0] = PANID[0];
     468:	780a      	ldrb	r2, [r1, #0]
     46a:	4b07      	ldr	r3, [pc, #28]	; (488 <MiMAC_SetAltAddress+0x2c>)
     46c:	701a      	strb	r2, [r3, #0]
	MAC_PANID.v[1] = PANID[1];
     46e:	784a      	ldrb	r2, [r1, #1]
     470:	705a      	strb	r2, [r3, #1]
	PHY_SetShortAddr(APP_ADDR);
     472:	2001      	movs	r0, #1
     474:	4b05      	ldr	r3, [pc, #20]	; (48c <MiMAC_SetAltAddress+0x30>)
     476:	4798      	blx	r3
	PHY_SetPanId(MY_PAN_ID);
     478:	4805      	ldr	r0, [pc, #20]	; (490 <MiMAC_SetAltAddress+0x34>)
     47a:	4b06      	ldr	r3, [pc, #24]	; (494 <MiMAC_SetAltAddress+0x38>)
     47c:	4798      	blx	r3
	return true;
}
     47e:	2001      	movs	r0, #1
     480:	bd10      	pop	{r4, pc}
     482:	46c0      	nop			; (mov r8, r8)
     484:	20000298 	.word	0x20000298
     488:	2000038c 	.word	0x2000038c
     48c:	00000405 	.word	0x00000405
     490:	00001234 	.word	0x00001234
     494:	000003e5 	.word	0x000003e5

00000498 <mic_generator>:

#if defined (ENABLE_SECURITY)
uint8_t addr[8] = {0xda , 0x98 , 0x22 , 0xfe , 0xff , 0xa3 , 0x04 , 0x00};
void mic_generator (uint8_t *Payloadinfo, uint8_t len , uint8_t frame_control ,  API_UINT32_UNION FrameCounter ,  uint8_t *SourceIEEEAddress)
{
     498:	b5f0      	push	{r4, r5, r6, r7, lr}
     49a:	4647      	mov	r7, r8
     49c:	b480      	push	{r7}
     49e:	b0a6      	sub	sp, #152	; 0x98
     4a0:	0006      	movs	r6, r0
     4a2:	000c      	movs	r4, r1
     4a4:	469c      	mov	ip, r3
     4a6:	992c      	ldr	r1, [sp, #176]	; 0xb0
	uint8_t i , j , iterations  , copy_packet1[FRAME_BUFFER] , cbc_header_with_padding[16] , InitVect_out[16] , block[16];
	// Calculating No of blocks in the packet (1 block = 16 bytes of data)
	iterations = len/16;
     4a8:	0925      	lsrs	r5, r4, #4
	if (len % 16 != 0) iterations++;
     4aa:	0723      	lsls	r3, r4, #28
     4ac:	d000      	beq.n	4b0 <mic_generator+0x18>
     4ae:	3501      	adds	r5, #1
	InitVect_in[0] = 0x49;//frame_control;
     4b0:	2049      	movs	r0, #73	; 0x49
     4b2:	4b42      	ldr	r3, [pc, #264]	; (5bc <mic_generator+0x124>)
     4b4:	7018      	strb	r0, [r3, #0]
	cbc_header_with_padding[0] = 0x00;  // l(a)
     4b6:	2300      	movs	r3, #0
     4b8:	a802      	add	r0, sp, #8
     4ba:	7003      	strb	r3, [r0, #0]
	cbc_header_with_padding[1] = 0x0d;  // l(a)Header Length
     4bc:	330d      	adds	r3, #13
     4be:	7043      	strb	r3, [r0, #1]
	cbc_header_with_padding[2] = frame_control;  //frame_control;  
     4c0:	7082      	strb	r2, [r0, #2]
     4c2:	2200      	movs	r2, #0
	for (i=0;i<8;i++)
	{
		InitVect_in[i+1] =  SourceIEEEAddress[i];
     4c4:	4b3d      	ldr	r3, [pc, #244]	; (5bc <mic_generator+0x124>)
     4c6:	5c8f      	ldrb	r7, [r1, r2]
     4c8:	18d0      	adds	r0, r2, r3
     4ca:	7047      	strb	r7, [r0, #1]
		cbc_header_with_padding[i+7] = SourceIEEEAddress[i];
     4cc:	0010      	movs	r0, r2
     4ce:	af02      	add	r7, sp, #8
     4d0:	46b8      	mov	r8, r7
     4d2:	4440      	add	r0, r8
     4d4:	5c8f      	ldrb	r7, [r1, r2]
     4d6:	71c7      	strb	r7, [r0, #7]
     4d8:	3201      	adds	r2, #1
	if (len % 16 != 0) iterations++;
	InitVect_in[0] = 0x49;//frame_control;
	cbc_header_with_padding[0] = 0x00;  // l(a)
	cbc_header_with_padding[1] = 0x0d;  // l(a)Header Length
	cbc_header_with_padding[2] = frame_control;  //frame_control;  
	for (i=0;i<8;i++)
     4da:	2a08      	cmp	r2, #8
     4dc:	d1f3      	bne.n	4c6 <mic_generator+0x2e>
		InitVect_in[i+1] =  SourceIEEEAddress[i];
		cbc_header_with_padding[i+7] = SourceIEEEAddress[i];
	}
	for (i=0;i<4;i++)
	{
		InitVect_in[i+9] = FrameCounter.v[i];
     4de:	4663      	mov	r3, ip
     4e0:	466a      	mov	r2, sp
     4e2:	71d3      	strb	r3, [r2, #7]
     4e4:	79d3      	ldrb	r3, [r2, #7]
     4e6:	4835      	ldr	r0, [pc, #212]	; (5bc <mic_generator+0x124>)
     4e8:	7243      	strb	r3, [r0, #9]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
     4ea:	4642      	mov	r2, r8
     4ec:	70d3      	strb	r3, [r2, #3]
		InitVect_in[i+1] =  SourceIEEEAddress[i];
		cbc_header_with_padding[i+7] = SourceIEEEAddress[i];
	}
	for (i=0;i<4;i++)
	{
		InitVect_in[i+9] = FrameCounter.v[i];
     4ee:	4663      	mov	r3, ip
     4f0:	041b      	lsls	r3, r3, #16
     4f2:	0e1b      	lsrs	r3, r3, #24
     4f4:	7283      	strb	r3, [r0, #10]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
     4f6:	7113      	strb	r3, [r2, #4]
		InitVect_in[i+1] =  SourceIEEEAddress[i];
		cbc_header_with_padding[i+7] = SourceIEEEAddress[i];
	}
	for (i=0;i<4;i++)
	{
		InitVect_in[i+9] = FrameCounter.v[i];
     4f8:	4663      	mov	r3, ip
     4fa:	021b      	lsls	r3, r3, #8
     4fc:	0e1b      	lsrs	r3, r3, #24
     4fe:	72c3      	strb	r3, [r0, #11]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
     500:	7153      	strb	r3, [r2, #5]
		InitVect_in[i+1] =  SourceIEEEAddress[i];
		cbc_header_with_padding[i+7] = SourceIEEEAddress[i];
	}
	for (i=0;i<4;i++)
	{
		InitVect_in[i+9] = FrameCounter.v[i];
     502:	4663      	mov	r3, ip
     504:	0e1b      	lsrs	r3, r3, #24
     506:	7303      	strb	r3, [r0, #12]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
     508:	7193      	strb	r3, [r2, #6]
	}
	//cbc_header_with_padding[14] = 0x00;  // Padding
	cbc_header_with_padding[15] = 0x00;   // Padding 
     50a:	2300      	movs	r3, #0
     50c:	73d3      	strb	r3, [r2, #15]
	InitVect_in[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
     50e:	2204      	movs	r2, #4
     510:	7342      	strb	r2, [r0, #13]
	InitVect_in[14] = 0x00; // 15 th byte padded to zero
     512:	7383      	strb	r3, [r0, #14]
	InitVect_in[15] = len; // For MIC calculation All preceding blocks will be incremented by 1
     514:	73c4      	strb	r4, [r0, #15]
	PHY_EncryptReq(&InitVect_in[0] , mySecurityKey);
     516:	492a      	ldr	r1, [pc, #168]	; (5c0 <mic_generator+0x128>)
     518:	4b2a      	ldr	r3, [pc, #168]	; (5c4 <mic_generator+0x12c>)
     51a:	4798      	blx	r3
     51c:	2300      	movs	r3, #0
	for (i=0;i<16;i++)
	{
		InitVect_out[i] = InitVect_in[i];
		copy_packet1[i] = cbc_header_with_padding[i];
     51e:	aa02      	add	r2, sp, #8
     520:	5c99      	ldrb	r1, [r3, r2]
     522:	aa06      	add	r2, sp, #24
     524:	5499      	strb	r1, [r3, r2]
     526:	3301      	adds	r3, #1
	cbc_header_with_padding[15] = 0x00;   // Padding 
	InitVect_in[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
	InitVect_in[14] = 0x00; // 15 th byte padded to zero
	InitVect_in[15] = len; // For MIC calculation All preceding blocks will be incremented by 1
	PHY_EncryptReq(&InitVect_in[0] , mySecurityKey);
	for (i=0;i<16;i++)
     528:	2b10      	cmp	r3, #16
     52a:	d1f8      	bne.n	51e <mic_generator+0x86>
	{
		InitVect_out[i] = InitVect_in[i];
		copy_packet1[i] = cbc_header_with_padding[i];
	}
	// Copy the Payload and Do the padding
	for (i=16;i<len+16;i++)
     52c:	0027      	movs	r7, r4
     52e:	3710      	adds	r7, #16
     530:	2f10      	cmp	r7, #16
     532:	dd0a      	ble.n	54a <mic_generator+0xb2>
     534:	2110      	movs	r1, #16
	{
		copy_packet1[i]	= Payloadinfo[i-16];  // Copying the Payload
     536:	18f2      	adds	r2, r6, r3
     538:	3a10      	subs	r2, #16
     53a:	7810      	ldrb	r0, [r2, #0]
     53c:	aa06      	add	r2, sp, #24
     53e:	5450      	strb	r0, [r2, r1]
	{
		InitVect_out[i] = InitVect_in[i];
		copy_packet1[i] = cbc_header_with_padding[i];
	}
	// Copy the Payload and Do the padding
	for (i=16;i<len+16;i++)
     540:	3301      	adds	r3, #1
     542:	b2db      	uxtb	r3, r3
     544:	1e19      	subs	r1, r3, #0
     546:	42b9      	cmp	r1, r7
     548:	dbf5      	blt.n	536 <mic_generator+0x9e>
	{
		copy_packet1[i]	= Payloadinfo[i-16];  // Copying the Payload
	}
	for (i=len+16;i<(iterations *16) + 16 ; i++ )
     54a:	0023      	movs	r3, r4
     54c:	3310      	adds	r3, #16
     54e:	b2db      	uxtb	r3, r3
     550:	001a      	movs	r2, r3
     552:	3501      	adds	r5, #1
     554:	0128      	lsls	r0, r5, #4
     556:	4283      	cmp	r3, r0
     558:	da07      	bge.n	56a <mic_generator+0xd2>
	{
		copy_packet1[i] = 0; // Padding
     55a:	2400      	movs	r4, #0
     55c:	a906      	add	r1, sp, #24
     55e:	548c      	strb	r4, [r1, r2]
	// Copy the Payload and Do the padding
	for (i=16;i<len+16;i++)
	{
		copy_packet1[i]	= Payloadinfo[i-16];  // Copying the Payload
	}
	for (i=len+16;i<(iterations *16) + 16 ; i++ )
     560:	3301      	adds	r3, #1
     562:	b2db      	uxtb	r3, r3
     564:	1e1a      	subs	r2, r3, #0
     566:	4282      	cmp	r2, r0
     568:	dbf8      	blt.n	55c <mic_generator+0xc4>
	{
		copy_packet1[i] = 0; // Padding
	}
	for (i=0;i<iterations+1;i++)
     56a:	2300      	movs	r3, #0
     56c:	2700      	movs	r7, #0
     56e:	2d00      	cmp	r5, #0
     570:	dc14      	bgt.n	59c <mic_generator+0x104>
     572:	e017      	b.n	5a4 <mic_generator+0x10c>
	{
			for (j=0;j<16;j++)
			{
				InitVect_in[j]	= InitVect_in[j] ^ copy_packet1[j+(i*16)];
     574:	1999      	adds	r1, r3, r6
     576:	aa06      	add	r2, sp, #24
     578:	1912      	adds	r2, r2, r4
     57a:	5cd0      	ldrb	r0, [r2, r3]
     57c:	780a      	ldrb	r2, [r1, #0]
     57e:	4042      	eors	r2, r0
     580:	700a      	strb	r2, [r1, #0]
     582:	3301      	adds	r3, #1
	{
		copy_packet1[i] = 0; // Padding
	}
	for (i=0;i<iterations+1;i++)
	{
			for (j=0;j<16;j++)
     584:	2b10      	cmp	r3, #16
     586:	d1f5      	bne.n	574 <mic_generator+0xdc>
			{
				InitVect_in[j]	= InitVect_in[j] ^ copy_packet1[j+(i*16)];
			}
		PHY_EncryptReq(&InitVect_in[0] , mySecurityKey);
     588:	490d      	ldr	r1, [pc, #52]	; (5c0 <mic_generator+0x128>)
     58a:	480c      	ldr	r0, [pc, #48]	; (5bc <mic_generator+0x124>)
     58c:	4b0d      	ldr	r3, [pc, #52]	; (5c4 <mic_generator+0x12c>)
     58e:	4798      	blx	r3
	}
	for (i=len+16;i<(iterations *16) + 16 ; i++ )
	{
		copy_packet1[i] = 0; // Padding
	}
	for (i=0;i<iterations+1;i++)
     590:	3701      	adds	r7, #1
     592:	b2ff      	uxtb	r7, r7
     594:	1e3b      	subs	r3, r7, #0
     596:	42ab      	cmp	r3, r5
     598:	db01      	blt.n	59e <mic_generator+0x106>
     59a:	e003      	b.n	5a4 <mic_generator+0x10c>
	{
			for (j=0;j<16;j++)
			{
				InitVect_in[j]	= InitVect_in[j] ^ copy_packet1[j+(i*16)];
     59c:	4e07      	ldr	r6, [pc, #28]	; (5bc <mic_generator+0x124>)
     59e:	011c      	lsls	r4, r3, #4
     5a0:	2300      	movs	r3, #0
     5a2:	e7e7      	b.n	574 <mic_generator+0xdc>
	}
	for (i=len+16;i<(iterations *16) + 16 ; i++ )
	{
		copy_packet1[i] = 0; // Padding
	}
	for (i=0;i<iterations+1;i++)
     5a4:	2300      	movs	r3, #0
		PHY_EncryptReq(&InitVect_in[0] , mySecurityKey);
		
	}
	for (i=0;i<16;i++)
	{
		CBC_mic[i] = InitVect_in[i];
     5a6:	4808      	ldr	r0, [pc, #32]	; (5c8 <mic_generator+0x130>)
     5a8:	4904      	ldr	r1, [pc, #16]	; (5bc <mic_generator+0x124>)
     5aa:	5cca      	ldrb	r2, [r1, r3]
     5ac:	54c2      	strb	r2, [r0, r3]
     5ae:	3301      	adds	r3, #1
				InitVect_in[j]	= InitVect_in[j] ^ copy_packet1[j+(i*16)];
			}
		PHY_EncryptReq(&InitVect_in[0] , mySecurityKey);
		
	}
	for (i=0;i<16;i++)
     5b0:	2b10      	cmp	r3, #16
     5b2:	d1fa      	bne.n	5aa <mic_generator+0x112>
	{
		CBC_mic[i] = InitVect_in[i];
	}

}
     5b4:	b026      	add	sp, #152	; 0x98
     5b6:	bc04      	pop	{r2}
     5b8:	4690      	mov	r8, r2
     5ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5bc:	200002a8 	.word	0x200002a8
     5c0:	00005e04 	.word	0x00005e04
     5c4:	00000431 	.word	0x00000431
     5c8:	20000378 	.word	0x20000378

000005cc <DataEncrypt>:
 *
 *****************************************************************************************/

bool DataEncrypt(uint8_t *Payloadinfo, uint8_t *Payload_len, API_UINT32_UNION FrameCounter,
uint8_t FrameControl)
{
     5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ce:	465f      	mov	r7, fp
     5d0:	4656      	mov	r6, sl
     5d2:	464d      	mov	r5, r9
     5d4:	4644      	mov	r4, r8
     5d6:	b4f0      	push	{r4, r5, r6, r7}
     5d8:	b08b      	sub	sp, #44	; 0x2c
     5da:	0004      	movs	r4, r0
     5dc:	4689      	mov	r9, r1
     5de:	0015      	movs	r5, r2
     5e0:	001a      	movs	r2, r3
	uint8_t i , iterations , block[16] , j , copy_packet[FRAME_BUFFER] , CTR_Nonce_and_Counter[16];
	// Calculating No of blocks in the packet (1 block = 16 bytes of data)
	iterations = *Payload_len/16;
     5e2:	7809      	ldrb	r1, [r1, #0]
     5e4:	090e      	lsrs	r6, r1, #4
	if (*Payload_len % 16 != 0) iterations++;
     5e6:	070b      	lsls	r3, r1, #28
     5e8:	d000      	beq.n	5ec <DataEncrypt+0x20>
     5ea:	3601      	adds	r6, #1

	mic_generator(&Payloadinfo[0] , *Payload_len, FrameControl  , FrameCounter ,  MACInitParams.PAddress);
     5ec:	4b38      	ldr	r3, [pc, #224]	; (6d0 <DataEncrypt+0x104>)
     5ee:	685b      	ldr	r3, [r3, #4]
     5f0:	9300      	str	r3, [sp, #0]
     5f2:	002b      	movs	r3, r5
     5f4:	0020      	movs	r0, r4
     5f6:	4f37      	ldr	r7, [pc, #220]	; (6d4 <DataEncrypt+0x108>)
     5f8:	47b8      	blx	r7

	for (i=*Payload_len;i<iterations *16 ; i++ )
     5fa:	464b      	mov	r3, r9
     5fc:	781b      	ldrb	r3, [r3, #0]
     5fe:	0037      	movs	r7, r6
     600:	0132      	lsls	r2, r6, #4
     602:	4293      	cmp	r3, r2
     604:	da05      	bge.n	612 <DataEncrypt+0x46>
	{
		Payloadinfo[i] = 0; // Padding
     606:	2100      	movs	r1, #0
     608:	54e1      	strb	r1, [r4, r3]
	iterations = *Payload_len/16;
	if (*Payload_len % 16 != 0) iterations++;

	mic_generator(&Payloadinfo[0] , *Payload_len, FrameControl  , FrameCounter ,  MACInitParams.PAddress);

	for (i=*Payload_len;i<iterations *16 ; i++ )
     60a:	3301      	adds	r3, #1
     60c:	b2db      	uxtb	r3, r3
     60e:	4293      	cmp	r3, r2
     610:	dbfa      	blt.n	608 <DataEncrypt+0x3c>
	{
		Payloadinfo[i] = 0; // Padding
	}
	CTR_Nonce_and_Counter[0] = 0x01;  // L
     612:	2201      	movs	r2, #1
     614:	ab02      	add	r3, sp, #8
     616:	701a      	strb	r2, [r3, #0]
	for (i=0;i<8;i++)
	{
		CTR_Nonce_and_Counter[i+1] = MACInitParams.PAddress[i];
     618:	4b2d      	ldr	r3, [pc, #180]	; (6d0 <DataEncrypt+0x104>)
     61a:	6858      	ldr	r0, [r3, #4]
     61c:	2300      	movs	r3, #0
     61e:	aa02      	add	r2, sp, #8
     620:	18d2      	adds	r2, r2, r3
     622:	5cc1      	ldrb	r1, [r0, r3]
     624:	7051      	strb	r1, [r2, #1]
     626:	3301      	adds	r3, #1
	for (i=*Payload_len;i<iterations *16 ; i++ )
	{
		Payloadinfo[i] = 0; // Padding
	}
	CTR_Nonce_and_Counter[0] = 0x01;  // L
	for (i=0;i<8;i++)
     628:	2b08      	cmp	r3, #8
     62a:	d1f8      	bne.n	61e <DataEncrypt+0x52>
	{
		CTR_Nonce_and_Counter[i+1] = MACInitParams.PAddress[i];
	}
	for (i=0;i<4;i++)
	{
		CTR_Nonce_and_Counter[i+9] = FrameCounter.v[i];
     62c:	ab02      	add	r3, sp, #8
     62e:	725d      	strb	r5, [r3, #9]
     630:	0a2a      	lsrs	r2, r5, #8
     632:	729a      	strb	r2, [r3, #10]
     634:	0c2a      	lsrs	r2, r5, #16
     636:	72da      	strb	r2, [r3, #11]
     638:	0e2d      	lsrs	r5, r5, #24
     63a:	731d      	strb	r5, [r3, #12]
	}
	CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
     63c:	2204      	movs	r2, #4
     63e:	735a      	strb	r2, [r3, #13]
	CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
     640:	2200      	movs	r2, #0
     642:	739a      	strb	r2, [r3, #14]
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
     644:	73da      	strb	r2, [r3, #15]

	for (i=0;i<iterations+1;i++)
     646:	1c7b      	adds	r3, r7, #1
     648:	4698      	mov	r8, r3
     64a:	2300      	movs	r3, #0
     64c:	469a      	mov	sl, r3
     64e:	469b      	mov	fp, r3
     650:	4643      	mov	r3, r8
     652:	2b00      	cmp	r3, #0
     654:	dc2f      	bgt.n	6b6 <DataEncrypt+0xea>
     656:	e033      	b.n	6c0 <DataEncrypt+0xf4>
	{
		for (j=0;j<16;j++)
		{
			block[j] = CTR_Nonce_and_Counter[j];
     658:	aa02      	add	r2, sp, #8
     65a:	5c99      	ldrb	r1, [r3, r2]
     65c:	aa06      	add	r2, sp, #24
     65e:	5499      	strb	r1, [r3, r2]
     660:	3301      	adds	r3, #1
	CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1

	for (i=0;i<iterations+1;i++)
	{
		for (j=0;j<16;j++)
     662:	2b10      	cmp	r3, #16
     664:	d1f8      	bne.n	658 <DataEncrypt+0x8c>
		{
			block[j] = CTR_Nonce_and_Counter[j];
		}
		PHY_EncryptReq(&block[0] , mySecurityKey);
     666:	491c      	ldr	r1, [pc, #112]	; (6d8 <DataEncrypt+0x10c>)
     668:	0010      	movs	r0, r2
     66a:	47c8      	blx	r9
		for (j=0;j<16;j++)
		{
			if (CTR_Nonce_and_Counter[15] == 0)
     66c:	ab02      	add	r3, sp, #8
     66e:	7bd8      	ldrb	r0, [r3, #15]
			{
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
			}
			else
			{
				Payloadinfo[j+(i-1)*16] = block[j] ^ Payloadinfo[j+(i-1)*16];
     670:	4653      	mov	r3, sl
     672:	3b01      	subs	r3, #1
     674:	011f      	lsls	r7, r3, #4
     676:	2300      	movs	r3, #0
		PHY_EncryptReq(&block[0] , mySecurityKey);
		for (j=0;j<16;j++)
		{
			if (CTR_Nonce_and_Counter[15] == 0)
			{
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
     678:	4a18      	ldr	r2, [pc, #96]	; (6dc <DataEncrypt+0x110>)
     67a:	4694      	mov	ip, r2
			block[j] = CTR_Nonce_and_Counter[j];
		}
		PHY_EncryptReq(&block[0] , mySecurityKey);
		for (j=0;j<16;j++)
		{
			if (CTR_Nonce_and_Counter[15] == 0)
     67c:	2800      	cmp	r0, #0
     67e:	d106      	bne.n	68e <DataEncrypt+0xc2>
			{
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
     680:	aa06      	add	r2, sp, #24
     682:	5c99      	ldrb	r1, [r3, r2]
     684:	4662      	mov	r2, ip
     686:	5cd2      	ldrb	r2, [r2, r3]
     688:	404a      	eors	r2, r1
     68a:	54f2      	strb	r2, [r6, r3]
     68c:	e005      	b.n	69a <DataEncrypt+0xce>
     68e:	19e1      	adds	r1, r4, r7
			}
			else
			{
				Payloadinfo[j+(i-1)*16] = block[j] ^ Payloadinfo[j+(i-1)*16];
     690:	aa06      	add	r2, sp, #24
     692:	5c9a      	ldrb	r2, [r3, r2]
     694:	5ccd      	ldrb	r5, [r1, r3]
     696:	406a      	eors	r2, r5
     698:	54ca      	strb	r2, [r1, r3]
     69a:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
		{
			block[j] = CTR_Nonce_and_Counter[j];
		}
		PHY_EncryptReq(&block[0] , mySecurityKey);
		for (j=0;j<16;j++)
     69c:	2b10      	cmp	r3, #16
     69e:	d1ed      	bne.n	67c <DataEncrypt+0xb0>
			else
			{
				Payloadinfo[j+(i-1)*16] = block[j] ^ Payloadinfo[j+(i-1)*16];
			}
		}
		CTR_Nonce_and_Counter[15]++; // Increment Counter for next opration
     6a0:	3001      	adds	r0, #1
     6a2:	ab02      	add	r3, sp, #8
     6a4:	73d8      	strb	r0, [r3, #15]
	}
	CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
	CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1

	for (i=0;i<iterations+1;i++)
     6a6:	465f      	mov	r7, fp
     6a8:	3701      	adds	r7, #1
     6aa:	b2fb      	uxtb	r3, r7
     6ac:	469b      	mov	fp, r3
     6ae:	469a      	mov	sl, r3
     6b0:	4543      	cmp	r3, r8
     6b2:	db03      	blt.n	6bc <DataEncrypt+0xf0>
     6b4:	e004      	b.n	6c0 <DataEncrypt+0xf4>
	{
		for (j=0;j<16;j++)
		{
			block[j] = CTR_Nonce_and_Counter[j];
		}
		PHY_EncryptReq(&block[0] , mySecurityKey);
     6b6:	4b0a      	ldr	r3, [pc, #40]	; (6e0 <DataEncrypt+0x114>)
     6b8:	4699      	mov	r9, r3
		for (j=0;j<16;j++)
		{
			if (CTR_Nonce_and_Counter[15] == 0)
			{
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
     6ba:	4e0a      	ldr	r6, [pc, #40]	; (6e4 <DataEncrypt+0x118>)
		Payloadinfo[i] = 0; // Padding
	}
	CTR_Nonce_and_Counter[0] = 0x01;  // L
	for (i=0;i<8;i++)
	{
		CTR_Nonce_and_Counter[i+1] = MACInitParams.PAddress[i];
     6bc:	2300      	movs	r3, #0
     6be:	e7cb      	b.n	658 <DataEncrypt+0x8c>
		}
		CTR_Nonce_and_Counter[15]++; // Increment Counter for next opration
	}
	return true;

}
     6c0:	2001      	movs	r0, #1
     6c2:	b00b      	add	sp, #44	; 0x2c
     6c4:	bc3c      	pop	{r2, r3, r4, r5}
     6c6:	4690      	mov	r8, r2
     6c8:	4699      	mov	r9, r3
     6ca:	46a2      	mov	sl, r4
     6cc:	46ab      	mov	fp, r5
     6ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6d0:	200002a0 	.word	0x200002a0
     6d4:	00000499 	.word	0x00000499
     6d8:	00005e04 	.word	0x00005e04
     6dc:	20000378 	.word	0x20000378
     6e0:	00000431 	.word	0x00000431
     6e4:	200002c8 	.word	0x200002c8

000006e8 <validate_mic>:
// Validates the Received mic with the mic computed from data packet decryption.
bool validate_mic(void)
{
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1])
     6e8:	4b07      	ldr	r3, [pc, #28]	; (708 <validate_mic+0x20>)
     6ea:	781a      	ldrb	r2, [r3, #0]
     6ec:	4b07      	ldr	r3, [pc, #28]	; (70c <validate_mic+0x24>)
     6ee:	781b      	ldrb	r3, [r3, #0]
	{
		return false;
     6f0:	2000      	movs	r0, #0

}
// Validates the Received mic with the mic computed from data packet decryption.
bool validate_mic(void)
{
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1])
     6f2:	429a      	cmp	r2, r3
     6f4:	d107      	bne.n	706 <validate_mic+0x1e>
     6f6:	4b04      	ldr	r3, [pc, #16]	; (708 <validate_mic+0x20>)
     6f8:	785b      	ldrb	r3, [r3, #1]
     6fa:	4a04      	ldr	r2, [pc, #16]	; (70c <validate_mic+0x24>)
     6fc:	7850      	ldrb	r0, [r2, #1]
     6fe:	1a18      	subs	r0, r3, r0
     700:	4243      	negs	r3, r0
     702:	4158      	adcs	r0, r3
     704:	b2c0      	uxtb	r0, r0
	}
	else
	{
		return true;
	}	
}
     706:	4770      	bx	lr
     708:	200002c8 	.word	0x200002c8
     70c:	20000388 	.word	0x20000388

00000710 <DataDecrypt>:
 *      None
 *
 *****************************************************************************************/
bool DataDecrypt(uint8_t *Payload, uint8_t *PayloadLen, uint8_t *SourceIEEEAddress,
API_UINT32_UNION FrameCounter, uint8_t FrameControl)
{
     710:	b5f0      	push	{r4, r5, r6, r7, lr}
     712:	465f      	mov	r7, fp
     714:	4656      	mov	r6, sl
     716:	464d      	mov	r5, r9
     718:	4644      	mov	r4, r8
     71a:	b4f0      	push	{r4, r5, r6, r7}
     71c:	b08f      	sub	sp, #60	; 0x3c
     71e:	0004      	movs	r4, r0
     720:	9104      	str	r1, [sp, #16]
     722:	4691      	mov	r9, r2
     724:	469a      	mov	sl, r3
     726:	ab18      	add	r3, sp, #96	; 0x60
     728:	781b      	ldrb	r3, [r3, #0]
     72a:	9305      	str	r3, [sp, #20]
	uint8_t i , iterations , block[16] , j , copy_packet[FRAME_BUFFER] , CTR_Nonce_and_Counter[16];
	// Calculating No of blocks in the packet (1 block = 16 bytes of data)
	iterations = *PayloadLen/16;
     72c:	780b      	ldrb	r3, [r1, #0]
     72e:	091a      	lsrs	r2, r3, #4
	if (*PayloadLen % 16 != 0) iterations++;
     730:	0719      	lsls	r1, r3, #28
     732:	d000      	beq.n	736 <DataDecrypt+0x26>
     734:	3201      	adds	r2, #1


	for (i=*PayloadLen;i<iterations *16 ; i++ )
     736:	0017      	movs	r7, r2
     738:	0112      	lsls	r2, r2, #4
     73a:	4293      	cmp	r3, r2
     73c:	da05      	bge.n	74a <DataDecrypt+0x3a>
	{
		Payload[i] = 0; // Padding
     73e:	2100      	movs	r1, #0
     740:	54e1      	strb	r1, [r4, r3]
	// Calculating No of blocks in the packet (1 block = 16 bytes of data)
	iterations = *PayloadLen/16;
	if (*PayloadLen % 16 != 0) iterations++;


	for (i=*PayloadLen;i<iterations *16 ; i++ )
     742:	3301      	adds	r3, #1
     744:	b2db      	uxtb	r3, r3
     746:	4293      	cmp	r3, r2
     748:	dbfa      	blt.n	740 <DataDecrypt+0x30>
	{
		Payload[i] = 0; // Padding
	}
	CTR_Nonce_and_Counter[0] = 0x01;  // L
     74a:	2201      	movs	r2, #1
     74c:	ab06      	add	r3, sp, #24
     74e:	701a      	strb	r2, [r3, #0]
     750:	2300      	movs	r3, #0
	for (i=0;i<8;i++)
	{
		CTR_Nonce_and_Counter[i+1] = SourceIEEEAddress[i];
     752:	4648      	mov	r0, r9
     754:	aa06      	add	r2, sp, #24
     756:	18d2      	adds	r2, r2, r3
     758:	5cc1      	ldrb	r1, [r0, r3]
     75a:	7051      	strb	r1, [r2, #1]
     75c:	3301      	adds	r3, #1
	for (i=*PayloadLen;i<iterations *16 ; i++ )
	{
		Payload[i] = 0; // Padding
	}
	CTR_Nonce_and_Counter[0] = 0x01;  // L
	for (i=0;i<8;i++)
     75e:	2b08      	cmp	r3, #8
     760:	d1f8      	bne.n	754 <DataDecrypt+0x44>
     762:	4681      	mov	r9, r0
	{
		CTR_Nonce_and_Counter[i+1] = SourceIEEEAddress[i];
	}
	for (i=0;i<4;i++)
	{
		CTR_Nonce_and_Counter[i+9] = FrameCounter.v[i];
     764:	ab06      	add	r3, sp, #24
     766:	4652      	mov	r2, sl
     768:	725a      	strb	r2, [r3, #9]
     76a:	4652      	mov	r2, sl
     76c:	0a12      	lsrs	r2, r2, #8
     76e:	729a      	strb	r2, [r3, #10]
     770:	4652      	mov	r2, sl
     772:	0c12      	lsrs	r2, r2, #16
     774:	72da      	strb	r2, [r3, #11]
     776:	4652      	mov	r2, sl
     778:	0e12      	lsrs	r2, r2, #24
     77a:	731a      	strb	r2, [r3, #12]
	}
	CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode
     77c:	2204      	movs	r2, #4
     77e:	735a      	strb	r2, [r3, #13]
	CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
     780:	2200      	movs	r2, #0
     782:	739a      	strb	r2, [r3, #14]
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
     784:	73da      	strb	r2, [r3, #15]


	for (i=0;i<iterations+1;i++)
     786:	1c7b      	adds	r3, r7, #1
     788:	1e19      	subs	r1, r3, #0
     78a:	9203      	str	r2, [sp, #12]
     78c:	dc29      	bgt.n	7e2 <DataDecrypt+0xd2>
     78e:	e02f      	b.n	7f0 <DataDecrypt+0xe0>
	{
		for (j=0;j<16;j++)
		{
			block[j] = CTR_Nonce_and_Counter[j];
     790:	aa06      	add	r2, sp, #24
     792:	5c99      	ldrb	r1, [r3, r2]
     794:	aa0a      	add	r2, sp, #40	; 0x28
     796:	5499      	strb	r1, [r3, r2]
     798:	3301      	adds	r3, #1
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1


	for (i=0;i<iterations+1;i++)
	{
		for (j=0;j<16;j++)
     79a:	2b10      	cmp	r3, #16
     79c:	d1f8      	bne.n	790 <DataDecrypt+0x80>
		{
			block[j] = CTR_Nonce_and_Counter[j];
		}
		PHY_EncryptReq(&block[0] , mySecurityKey);
     79e:	4924      	ldr	r1, [pc, #144]	; (830 <DataDecrypt+0x120>)
     7a0:	0010      	movs	r0, r2
     7a2:	47c0      	blx	r8
		for (j=0;j<16;j++)
		{
			if (CTR_Nonce_and_Counter[15] == 0)
     7a4:	ab06      	add	r3, sp, #24
     7a6:	7bd8      	ldrb	r0, [r3, #15]
			{
				CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
			}
			else
			{
				Payload[j+(i-1)*16] = block[j] ^ Payload[j+(i-1)*16];
     7a8:	1e7b      	subs	r3, r7, #1
     7aa:	011f      	lsls	r7, r3, #4
     7ac:	2300      	movs	r3, #0
			block[j] = CTR_Nonce_and_Counter[j];
		}
		PHY_EncryptReq(&block[0] , mySecurityKey);
		for (j=0;j<16;j++)
		{
			if (CTR_Nonce_and_Counter[15] == 0)
     7ae:	2800      	cmp	r0, #0
     7b0:	d103      	bne.n	7ba <DataDecrypt+0xaa>
			{
				CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
     7b2:	aa0a      	add	r2, sp, #40	; 0x28
     7b4:	5c9a      	ldrb	r2, [r3, r2]
     7b6:	54ea      	strb	r2, [r5, r3]
     7b8:	e005      	b.n	7c6 <DataDecrypt+0xb6>
     7ba:	19e2      	adds	r2, r4, r7
			}
			else
			{
				Payload[j+(i-1)*16] = block[j] ^ Payload[j+(i-1)*16];
     7bc:	a90a      	add	r1, sp, #40	; 0x28
     7be:	5c5e      	ldrb	r6, [r3, r1]
     7c0:	5cd1      	ldrb	r1, [r2, r3]
     7c2:	4071      	eors	r1, r6
     7c4:	54d1      	strb	r1, [r2, r3]
     7c6:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
		{
			block[j] = CTR_Nonce_and_Counter[j];
		}
		PHY_EncryptReq(&block[0] , mySecurityKey);
		for (j=0;j<16;j++)
     7c8:	2b10      	cmp	r3, #16
     7ca:	d1f0      	bne.n	7ae <DataDecrypt+0x9e>
			else
			{
				Payload[j+(i-1)*16] = block[j] ^ Payload[j+(i-1)*16];
			}
		}
		CTR_Nonce_and_Counter[15]++; // Increment Counter for next opration
     7cc:	3001      	adds	r0, #1
     7ce:	ab06      	add	r3, sp, #24
     7d0:	73d8      	strb	r0, [r3, #15]
	CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode
	CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1


	for (i=0;i<iterations+1;i++)
     7d2:	9e03      	ldr	r6, [sp, #12]
     7d4:	3601      	adds	r6, #1
     7d6:	b2f3      	uxtb	r3, r6
     7d8:	9303      	str	r3, [sp, #12]
     7da:	1e1f      	subs	r7, r3, #0
     7dc:	455f      	cmp	r7, fp
     7de:	db05      	blt.n	7ec <DataDecrypt+0xdc>
     7e0:	e006      	b.n	7f0 <DataDecrypt+0xe0>
	{
		for (j=0;j<16;j++)
		{
			block[j] = CTR_Nonce_and_Counter[j];
		}
		PHY_EncryptReq(&block[0] , mySecurityKey);
     7e2:	4b14      	ldr	r3, [pc, #80]	; (834 <DataDecrypt+0x124>)
     7e4:	4698      	mov	r8, r3
		for (j=0;j<16;j++)
		{
			if (CTR_Nonce_and_Counter[15] == 0)
			{
				CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
     7e6:	4d14      	ldr	r5, [pc, #80]	; (838 <DataDecrypt+0x128>)
     7e8:	0017      	movs	r7, r2
     7ea:	468b      	mov	fp, r1

	for (i=*PayloadLen;i<iterations *16 ; i++ )
	{
		Payload[i] = 0; // Padding
	}
	CTR_Nonce_and_Counter[0] = 0x01;  // L
     7ec:	2300      	movs	r3, #0
     7ee:	e7cf      	b.n	790 <DataDecrypt+0x80>
				Payload[j+(i-1)*16] = block[j] ^ Payload[j+(i-1)*16];
			}
		}
		CTR_Nonce_and_Counter[15]++; // Increment Counter for next opration
	}
	*PayloadLen = *PayloadLen-4;
     7f0:	9b04      	ldr	r3, [sp, #16]
     7f2:	7819      	ldrb	r1, [r3, #0]
     7f4:	3904      	subs	r1, #4
     7f6:	b2c9      	uxtb	r1, r1
     7f8:	7019      	strb	r1, [r3, #0]
	mic_generator(&Payload[0] , *PayloadLen , FrameControl  , FrameCounter , SourceIEEEAddress);
     7fa:	464b      	mov	r3, r9
     7fc:	9300      	str	r3, [sp, #0]
     7fe:	4653      	mov	r3, sl
     800:	9a05      	ldr	r2, [sp, #20]
     802:	0020      	movs	r0, r4
     804:	4c0d      	ldr	r4, [pc, #52]	; (83c <DataDecrypt+0x12c>)
     806:	47a0      	blx	r4
     808:	2300      	movs	r3, #0
	for (i=0;i<16;i++)
	{
		final_mic_value[i] = CTR_mic[i] ^ CBC_mic[i];
     80a:	4d0d      	ldr	r5, [pc, #52]	; (840 <DataDecrypt+0x130>)
     80c:	4c0a      	ldr	r4, [pc, #40]	; (838 <DataDecrypt+0x128>)
     80e:	480d      	ldr	r0, [pc, #52]	; (844 <DataDecrypt+0x134>)
     810:	5ce1      	ldrb	r1, [r4, r3]
     812:	5cc2      	ldrb	r2, [r0, r3]
     814:	404a      	eors	r2, r1
     816:	54ea      	strb	r2, [r5, r3]
     818:	3301      	adds	r3, #1
		}
		CTR_Nonce_and_Counter[15]++; // Increment Counter for next opration
	}
	*PayloadLen = *PayloadLen-4;
	mic_generator(&Payload[0] , *PayloadLen , FrameControl  , FrameCounter , SourceIEEEAddress);
	for (i=0;i<16;i++)
     81a:	2b10      	cmp	r3, #16
     81c:	d1f8      	bne.n	810 <DataDecrypt+0x100>
	{
		final_mic_value[i] = CTR_mic[i] ^ CBC_mic[i];
	}
	return validate_mic();
     81e:	4b0a      	ldr	r3, [pc, #40]	; (848 <DataDecrypt+0x138>)
     820:	4798      	blx	r3

}
     822:	b00f      	add	sp, #60	; 0x3c
     824:	bc3c      	pop	{r2, r3, r4, r5}
     826:	4690      	mov	r8, r2
     828:	4699      	mov	r9, r3
     82a:	46a2      	mov	sl, r4
     82c:	46ab      	mov	fp, r5
     82e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     830:	00005e04 	.word	0x00005e04
     834:	00000431 	.word	0x00000431
     838:	200002b8 	.word	0x200002b8
     83c:	00000499 	.word	0x00000499
     840:	200002c8 	.word	0x200002c8
     844:	20000378 	.word	0x20000378
     848:	000006e9 	.word	0x000006e9

0000084c <MiMAC_SetChannel>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_SetChannel(uint8_t channel, uint8_t offsetFreq)
{
     84c:	b510      	push	{r4, lr}
	if (channel < 11 || channel > 26)
     84e:	0002      	movs	r2, r0
     850:	3a0b      	subs	r2, #11
	{
		return false;
     852:	2300      	movs	r3, #0
 *      None
 *
 *****************************************************************************************/
bool MiMAC_SetChannel(uint8_t channel, uint8_t offsetFreq)
{
	if (channel < 11 || channel > 26)
     854:	2a0f      	cmp	r2, #15
     856:	d804      	bhi.n	862 <MiMAC_SetChannel+0x16>
	{
		return false;
	}
	MACCurrentChannel = channel;
     858:	4b03      	ldr	r3, [pc, #12]	; (868 <MiMAC_SetChannel+0x1c>)
     85a:	7018      	strb	r0, [r3, #0]
	PHY_SetChannel(channel);
     85c:	4b03      	ldr	r3, [pc, #12]	; (86c <MiMAC_SetChannel+0x20>)
     85e:	4798      	blx	r3
	return true;
     860:	2301      	movs	r3, #1
}
     862:	0018      	movs	r0, r3
     864:	bd10      	pop	{r4, pc}
     866:	46c0      	nop			; (mov r8, r8)
     868:	2000038e 	.word	0x2000038e
     86c:	000003bd 	.word	0x000003bd

00000870 <MiMAC_SendPacket>:
 *
 *****************************************************************************************/
bool MiMAC_SendPacket( MAC_TRANS_PARAM transParam,
         uint8_t *MACPayload,
         uint8_t MACPayloadLen)
{
     870:	b5f0      	push	{r4, r5, r6, r7, lr}
     872:	465f      	mov	r7, fp
     874:	4656      	mov	r6, sl
     876:	464d      	mov	r5, r9
     878:	4644      	mov	r4, r8
     87a:	b4f0      	push	{r4, r5, r6, r7}
     87c:	b0a7      	sub	sp, #156	; 0x9c
     87e:	1c04      	adds	r4, r0, #0
     880:	9003      	str	r0, [sp, #12]
     882:	0008      	movs	r0, r1
     884:	9104      	str	r1, [sp, #16]
     886:	0016      	movs	r6, r2
     888:	0a36      	lsrs	r6, r6, #8
     88a:	9205      	str	r2, [sp, #20]
     88c:	9302      	str	r3, [sp, #8]
     88e:	b2e3      	uxtb	r3, r4
     890:	069c      	lsls	r4, r3, #26
     892:	0fe4      	lsrs	r4, r4, #31
     894:	4681      	mov	r9, r0
     896:	b2d1      	uxtb	r1, r2
     898:	b2f6      	uxtb	r6, r6
	#endif
	
    MIWI_TICK t1, t2;


    if (transParam.flags.bits.broadcast)
     89a:	075a      	lsls	r2, r3, #29
     89c:	d500      	bpl.n	8a0 <MiMAC_SendPacket+0x30>
    {
        transParam.altDestAddr = true;
     89e:	2101      	movs	r1, #1
    }

    if (transParam.flags.bits.secEn)
     8a0:	2208      	movs	r2, #8
     8a2:	401a      	ands	r2, r3
     8a4:	0010      	movs	r0, r2
    {
        transParam.altSrcAddr = false;
     8a6:	4242      	negs	r2, r0
     8a8:	4142      	adcs	r2, r0
     8aa:	4252      	negs	r2, r2
     8ac:	4016      	ands	r6, r2
	    }
    }
    #endif

    // set the frame control in variable i
    if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND)
     8ae:	2203      	movs	r2, #3
     8b0:	401a      	ands	r2, r3
     8b2:	2a01      	cmp	r2, #1
     8b4:	d004      	beq.n	8c0 <MiMAC_SendPacket+0x50>
    {
        frameControl = 0x03;
    } else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA)
     8b6:	2a00      	cmp	r2, #0
     8b8:	d104      	bne.n	8c4 <MiMAC_SendPacket+0x54>
    {
        frameControl = 0x01;
     8ba:	2001      	movs	r0, #1
     8bc:	4682      	mov	sl, r0
     8be:	e001      	b.n	8c4 <MiMAC_SendPacket+0x54>
    #endif

    // set the frame control in variable i
    if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND)
    {
        frameControl = 0x03;
     8c0:	2003      	movs	r0, #3
     8c2:	4682      	mov	sl, r0
        frameControl = 0x01;
    }

    // decide the header length for different addressing mode
#ifndef TARGET_SMALL
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
     8c4:	a803      	add	r0, sp, #12
     8c6:	8940      	ldrh	r0, [r0, #10]
     8c8:	4da3      	ldr	r5, [pc, #652]	; (b58 <MiMAC_SendPacket+0x2e8>)
     8ca:	882d      	ldrh	r5, [r5, #0]
     8cc:	4285      	cmp	r5, r0
     8ce:	d10b      	bne.n	8e8 <MiMAC_SendPacket+0x78>
     8d0:	4da2      	ldr	r5, [pc, #648]	; (b5c <MiMAC_SendPacket+0x2ec>)
     8d2:	42a8      	cmp	r0, r5
     8d4:	d00c      	beq.n	8f0 <MiMAC_SendPacket+0x80>
#endif
    {
        headerLength = 5;
        frameControl |= 0x40;
     8d6:	2040      	movs	r0, #64	; 0x40
     8d8:	4655      	mov	r5, sl
     8da:	4305      	orrs	r5, r0
     8dc:	b2e8      	uxtb	r0, r5
     8de:	4682      	mov	sl, r0
#ifndef TARGET_SMALL
        IntraPAN = true;
     8e0:	2001      	movs	r0, #1
     8e2:	4683      	mov	fp, r0
    // decide the header length for different addressing mode
#ifndef TARGET_SMALL
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
#endif
    {
        headerLength = 5;
     8e4:	3004      	adds	r0, #4
        frameControl |= 0x40;
#ifndef TARGET_SMALL
        IntraPAN = true;
     8e6:	e006      	b.n	8f6 <MiMAC_SendPacket+0x86>
    }
#ifndef TARGET_SMALL
    else
    {
        headerLength = 7;
        IntraPAN = false;
     8e8:	2000      	movs	r0, #0
     8ea:	4683      	mov	fp, r0
#endif
    }
#ifndef TARGET_SMALL
    else
    {
        headerLength = 7;
     8ec:	3007      	adds	r0, #7
     8ee:	e002      	b.n	8f6 <MiMAC_SendPacket+0x86>
        IntraPAN = false;
     8f0:	2000      	movs	r0, #0
     8f2:	4683      	mov	fp, r0
#endif
    }
#ifndef TARGET_SMALL
    else
    {
        headerLength = 7;
     8f4:	3007      	adds	r0, #7
        IntraPAN = false;
    }
#endif

    if (transParam.altDestAddr)
     8f6:	4688      	mov	r8, r1
    {
        headerLength += 2;
    } else
    {
        headerLength += 8;
     8f8:	0007      	movs	r7, r0
     8fa:	3708      	adds	r7, #8
        headerLength = 7;
        IntraPAN = false;
    }
#endif

    if (transParam.altDestAddr)
     8fc:	2900      	cmp	r1, #0
     8fe:	d000      	beq.n	902 <MiMAC_SendPacket+0x92>
    {
        headerLength += 2;
     900:	1c87      	adds	r7, r0, #2
    } else
    {
        headerLength += 8;
    }

    if (transParam.altSrcAddr)
     902:	2e00      	cmp	r6, #0
     904:	d003      	beq.n	90e <MiMAC_SendPacket+0x9e>
    {
        headerLength += 2;
     906:	3702      	adds	r7, #2
     908:	b2f9      	uxtb	r1, r7
     90a:	9101      	str	r1, [sp, #4]
     90c:	e002      	b.n	914 <MiMAC_SendPacket+0xa4>
    } else
    {
        headerLength += 8;
     90e:	3708      	adds	r7, #8
     910:	b2f9      	uxtb	r1, r7
     912:	9101      	str	r1, [sp, #4]
    }

    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false)
     914:	2124      	movs	r1, #36	; 0x24
     916:	400b      	ands	r3, r1
     918:	2b20      	cmp	r3, #32
     91a:	d103      	bne.n	924 <MiMAC_SendPacket+0xb4>
    {
        frameControl |= 0x20;
     91c:	4651      	mov	r1, sl
     91e:	4319      	orrs	r1, r3
     920:	b2cb      	uxtb	r3, r1
     922:	469a      	mov	sl, r3
    }

    // use PACKET_TYPE_RESERVE to represent beacon. Fixed format for beacon packet
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
     924:	2a03      	cmp	r2, #3
     926:	d106      	bne.n	936 <MiMAC_SendPacket+0xc6>
        frameControl = 0x00;
        headerLength = 7;
#if !defined(TARGET_SMALL)
        IntraPAN = false;
#endif
        transParam.altSrcAddr = true;
     928:	2601      	movs	r6, #1
        transParam.flags.bits.ackReq = false;
     92a:	2400      	movs	r4, #0
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    {
        frameControl = 0x00;
        headerLength = 7;
#if !defined(TARGET_SMALL)
        IntraPAN = false;
     92c:	2300      	movs	r3, #0
     92e:	469b      	mov	fp, r3
    }

    // use PACKET_TYPE_RESERVE to represent beacon. Fixed format for beacon packet
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    {
        frameControl = 0x00;
     930:	469a      	mov	sl, r3
        headerLength = 7;
     932:	3307      	adds	r3, #7
     934:	9301      	str	r3, [sp, #4]
        transParam.altSrcAddr = true;
        transParam.flags.bits.ackReq = false;
    }

#ifdef ENABLE_SECURITY
    if (transParam.flags.bits.secEn)
     936:	aa03      	add	r2, sp, #12
     938:	0163      	lsls	r3, r4, #5
     93a:	7815      	ldrb	r5, [r2, #0]
     93c:	2120      	movs	r1, #32
     93e:	438d      	bics	r5, r1
     940:	431d      	orrs	r5, r3
     942:	7015      	strb	r5, [r2, #0]
     944:	072b      	lsls	r3, r5, #28
     946:	d400      	bmi.n	94a <MiMAC_SendPacket+0xda>
     948:	e0de      	b.n	b08 <MiMAC_SendPacket+0x298>
    {
        frameControl |= 0x08;
     94a:	2308      	movs	r3, #8
     94c:	4652      	mov	r2, sl
     94e:	431a      	orrs	r2, r3
     950:	b2d3      	uxtb	r3, r2
     952:	469a      	mov	sl, r3
		//DataEncrypt(MACPayload, &MACPayloadLen , 0 , 0 , 0);
		  DataEncrypt(MACPayload, &MACPayloadLen, OutgoingFrameCounter, frameControl);
     954:	4b82      	ldr	r3, [pc, #520]	; (b60 <MiMAC_SendPacket+0x2f0>)
     956:	681a      	ldr	r2, [r3, #0]
     958:	4653      	mov	r3, sl
     95a:	a930      	add	r1, sp, #192	; 0xc0
     95c:	9802      	ldr	r0, [sp, #8]
     95e:	4f81      	ldr	r7, [pc, #516]	; (b64 <MiMAC_SendPacket+0x2f4>)
     960:	47b8      	blx	r7
    }
#endif

    // set header length
	packet[loc++] = headerLength;
     962:	ab06      	add	r3, sp, #24
     964:	9901      	ldr	r1, [sp, #4]
     966:	7019      	strb	r1, [r3, #0]
    // set packet length
#ifdef ENABLE_SECURITY
    if (transParam.flags.bits.secEn)
    {
		// 4 byte mic and 5 byte outgoing frame counter 
		packet[loc++] = MACPayloadLen+headerLength+9;
     968:	aa30      	add	r2, sp, #192	; 0xc0
     96a:	7812      	ldrb	r2, [r2, #0]
     96c:	3209      	adds	r2, #9
     96e:	188f      	adds	r7, r1, r2
     970:	705f      	strb	r7, [r3, #1]
    {
		packet[loc++] = MACPayloadLen+headerLength;
    }

    // set frame control LSB
	packet[loc++] = frameControl;
     972:	ab06      	add	r3, sp, #24
     974:	4652      	mov	r2, sl
     976:	709a      	strb	r2, [r3, #2]

    // set frame control MSB
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
     978:	43eb      	mvns	r3, r5
     97a:	079b      	lsls	r3, r3, #30
     97c:	d109      	bne.n	992 <MiMAC_SendPacket+0x122>
    {
		packet[loc++] = 0x80; 
     97e:	ab06      	add	r3, sp, #24
     980:	2280      	movs	r2, #128	; 0x80
     982:	70da      	strb	r2, [r3, #3]
        // sequence number
		packet[loc++] = IEEESeqNum++;
     984:	4978      	ldr	r1, [pc, #480]	; (b68 <MiMAC_SendPacket+0x2f8>)
     986:	780a      	ldrb	r2, [r1, #0]
     988:	1c50      	adds	r0, r2, #1
     98a:	7008      	strb	r0, [r1, #0]
     98c:	711a      	strb	r2, [r3, #4]
     98e:	2205      	movs	r2, #5
     990:	e040      	b.n	a14 <MiMAC_SendPacket+0x1a4>
    } else
    {
        if (transParam.altDestAddr && transParam.altSrcAddr)
     992:	4643      	mov	r3, r8
     994:	2b00      	cmp	r3, #0
     996:	d00b      	beq.n	9b0 <MiMAC_SendPacket+0x140>
     998:	2e00      	cmp	r6, #0
     99a:	d003      	beq.n	9a4 <MiMAC_SendPacket+0x134>
        {
			packet[loc++] = 0x88;
     99c:	2288      	movs	r2, #136	; 0x88
     99e:	ab06      	add	r3, sp, #24
     9a0:	70da      	strb	r2, [r3, #3]
     9a2:	e0b9      	b.n	b18 <MiMAC_SendPacket+0x2a8>
			
        } else if (transParam.altDestAddr && transParam.altSrcAddr == 0)
     9a4:	2e00      	cmp	r6, #0
     9a6:	d109      	bne.n	9bc <MiMAC_SendPacket+0x14c>
        {
			packet[loc++] = 0xC8;
     9a8:	22c8      	movs	r2, #200	; 0xc8
     9aa:	ab06      	add	r3, sp, #24
     9ac:	70da      	strb	r2, [r3, #3]
     9ae:	e0b3      	b.n	b18 <MiMAC_SendPacket+0x2a8>
        } else if (transParam.altDestAddr == 0 && transParam.altSrcAddr == 1)
     9b0:	2e00      	cmp	r6, #0
     9b2:	d003      	beq.n	9bc <MiMAC_SendPacket+0x14c>
        {
			packet[loc++] = 0x8C;
     9b4:	228c      	movs	r2, #140	; 0x8c
     9b6:	ab06      	add	r3, sp, #24
     9b8:	70da      	strb	r2, [r3, #3]
     9ba:	e002      	b.n	9c2 <MiMAC_SendPacket+0x152>
        } else
        {
			packet[loc++] = 0xCC;
     9bc:	22cc      	movs	r2, #204	; 0xcc
     9be:	ab06      	add	r3, sp, #24
     9c0:	70da      	strb	r2, [r3, #3]
        }

        // sequence number
		packet[loc++] = IEEESeqNum++;
     9c2:	4b69      	ldr	r3, [pc, #420]	; (b68 <MiMAC_SendPacket+0x2f8>)
     9c4:	781a      	ldrb	r2, [r3, #0]
     9c6:	1c51      	adds	r1, r2, #1
     9c8:	7019      	strb	r1, [r3, #0]
     9ca:	ab06      	add	r3, sp, #24
     9cc:	711a      	strb	r2, [r3, #4]

        // destination PANID
		packet[loc++] = transParam.DestPANID.v[0];
     9ce:	aa03      	add	r2, sp, #12
     9d0:	7a91      	ldrb	r1, [r2, #10]
     9d2:	7159      	strb	r1, [r3, #5]
		packet[loc++] = transParam.DestPANID.v[1];
     9d4:	7ad2      	ldrb	r2, [r2, #11]
     9d6:	719a      	strb	r2, [r3, #6]

        // destination address
        if (transParam.flags.bits.broadcast)
     9d8:	076b      	lsls	r3, r5, #29
     9da:	d505      	bpl.n	9e8 <MiMAC_SendPacket+0x178>
        {
			packet[loc++] = 0xFF;
     9dc:	ab06      	add	r3, sp, #24
     9de:	22ff      	movs	r2, #255	; 0xff
     9e0:	71da      	strb	r2, [r3, #7]
			packet[loc++] = 0xFF;
     9e2:	721a      	strb	r2, [r3, #8]
     9e4:	3af6      	subs	r2, #246	; 0xf6
     9e6:	e015      	b.n	a14 <MiMAC_SendPacket+0x1a4>
     9e8:	2300      	movs	r3, #0
        } else
        {
            if (transParam.altDestAddr)
     9ea:	4642      	mov	r2, r8
     9ec:	4648      	mov	r0, r9
     9ee:	2a00      	cmp	r2, #0
     9f0:	d008      	beq.n	a04 <MiMAC_SendPacket+0x194>
            {
				packet[loc++] = transParam.DestAddress[0];
     9f2:	ab06      	add	r3, sp, #24
     9f4:	464a      	mov	r2, r9
     9f6:	7812      	ldrb	r2, [r2, #0]
     9f8:	71da      	strb	r2, [r3, #7]
				packet[loc++] = transParam.DestAddress[1];
     9fa:	464a      	mov	r2, r9
     9fc:	7852      	ldrb	r2, [r2, #1]
     9fe:	721a      	strb	r2, [r3, #8]
     a00:	2209      	movs	r2, #9
     a02:	e007      	b.n	a14 <MiMAC_SendPacket+0x1a4>
            } else
            {
                for (i = 0; i < 8; i++)
                {
					packet[loc++] = transParam.DestAddress[i];
     a04:	aa06      	add	r2, sp, #24
     a06:	18d2      	adds	r2, r2, r3
     a08:	5cc1      	ldrb	r1, [r0, r3]
     a0a:	71d1      	strb	r1, [r2, #7]
     a0c:	3301      	adds	r3, #1
            {
				packet[loc++] = transParam.DestAddress[0];
				packet[loc++] = transParam.DestAddress[1];
            } else
            {
                for (i = 0; i < 8; i++)
     a0e:	2b08      	cmp	r3, #8
     a10:	d1f8      	bne.n	a04 <MiMAC_SendPacket+0x194>
                {
					packet[loc++] = transParam.DestAddress[i];
     a12:	220f      	movs	r2, #15
        }
    }

#ifndef TARGET_SMALL
    // source PANID if necessary
    if (IntraPAN == false)
     a14:	465b      	mov	r3, fp
     a16:	2b00      	cmp	r3, #0
     a18:	d109      	bne.n	a2e <MiMAC_SendPacket+0x1be>
    {
		packet[loc++] = MAC_PANID.v[0];
     a1a:	1c53      	adds	r3, r2, #1
     a1c:	b2db      	uxtb	r3, r3
     a1e:	a906      	add	r1, sp, #24
     a20:	484d      	ldr	r0, [pc, #308]	; (b58 <MiMAC_SendPacket+0x2e8>)
     a22:	7805      	ldrb	r5, [r0, #0]
     a24:	548d      	strb	r5, [r1, r2]
		packet[loc++] = MAC_PANID.v[1];
     a26:	3202      	adds	r2, #2
     a28:	b2d2      	uxtb	r2, r2
     a2a:	7840      	ldrb	r0, [r0, #1]
     a2c:	54c8      	strb	r0, [r1, r3]
    }
#endif

    // source address
    if (transParam.altSrcAddr)
     a2e:	2e00      	cmp	r6, #0
     a30:	d00a      	beq.n	a48 <MiMAC_SendPacket+0x1d8>
    {
		packet[loc++] = myNetworkAddress.v[0];
     a32:	a906      	add	r1, sp, #24
     a34:	484d      	ldr	r0, [pc, #308]	; (b6c <MiMAC_SendPacket+0x2fc>)
     a36:	7803      	ldrb	r3, [r0, #0]
     a38:	548b      	strb	r3, [r1, r2]
		packet[loc++] = myNetworkAddress.v[1];
     a3a:	1c93      	adds	r3, r2, #2
     a3c:	b2db      	uxtb	r3, r3
     a3e:	3201      	adds	r2, #1
     a40:	b2d2      	uxtb	r2, r2
     a42:	7840      	ldrb	r0, [r0, #1]
     a44:	5488      	strb	r0, [r1, r2]
     a46:	e00c      	b.n	a62 <MiMAC_SendPacket+0x1f2>
    } else
    {
        for (i = 0; i < 8; i++)
        {
			packet[loc++] = MACInitParams.PAddress[i];
     a48:	4b49      	ldr	r3, [pc, #292]	; (b70 <MiMAC_SendPacket+0x300>)
     a4a:	6859      	ldr	r1, [r3, #4]
     a4c:	0013      	movs	r3, r2
     a4e:	3308      	adds	r3, #8
     a50:	b2db      	uxtb	r3, r3
     a52:	1c50      	adds	r0, r2, #1
     a54:	780e      	ldrb	r6, [r1, #0]
     a56:	ad06      	add	r5, sp, #24
     a58:	54ae      	strb	r6, [r5, r2]
     a5a:	3101      	adds	r1, #1
     a5c:	b2c2      	uxtb	r2, r0
    {
		packet[loc++] = myNetworkAddress.v[0];
		packet[loc++] = myNetworkAddress.v[1];
    } else
    {
        for (i = 0; i < 8; i++)
     a5e:	4293      	cmp	r3, r2
     a60:	d1f7      	bne.n	a52 <MiMAC_SendPacket+0x1e2>
        {
			packet[loc++] = MACInitParams.PAddress[i];
        }
    }
#ifdef ENABLE_SECURITY
if (transParam.flags.bits.secEn)
     a62:	a903      	add	r1, sp, #12
     a64:	0162      	lsls	r2, r4, #5
     a66:	780c      	ldrb	r4, [r1, #0]
     a68:	2020      	movs	r0, #32
     a6a:	4384      	bics	r4, r0
     a6c:	4314      	orrs	r4, r2
     a6e:	700c      	strb	r4, [r1, #0]
     a70:	0722      	lsls	r2, r4, #28
     a72:	d514      	bpl.n	a9e <MiMAC_SendPacket+0x22e>
     a74:	0019      	movs	r1, r3
     a76:	2200      	movs	r2, #0
{
	// fill the additional security aux header
	for (i = 0; i < 4; i++)
	{
		packet[loc++] = OutgoingFrameCounter.v[i];
     a78:	4f39      	ldr	r7, [pc, #228]	; (b60 <MiMAC_SendPacket+0x2f0>)
     a7a:	1c48      	adds	r0, r1, #1
     a7c:	5cbe      	ldrb	r6, [r7, r2]
     a7e:	ad06      	add	r5, sp, #24
     a80:	546e      	strb	r6, [r5, r1]
     a82:	3201      	adds	r2, #1
     a84:	b2c1      	uxtb	r1, r0
    }
#ifdef ENABLE_SECURITY
if (transParam.flags.bits.secEn)
{
	// fill the additional security aux header
	for (i = 0; i < 4; i++)
     a86:	2a04      	cmp	r2, #4
     a88:	d1f7      	bne.n	a7a <MiMAC_SendPacket+0x20a>
     a8a:	1d1a      	adds	r2, r3, #4
     a8c:	b2d2      	uxtb	r2, r2
	{
		packet[loc++] = OutgoingFrameCounter.v[i];
	}
	OutgoingFrameCounter.Val++;
     a8e:	4834      	ldr	r0, [pc, #208]	; (b60 <MiMAC_SendPacket+0x2f0>)
     a90:	6801      	ldr	r1, [r0, #0]
     a92:	3101      	adds	r1, #1
     a94:	6001      	str	r1, [r0, #0]
	{
		nvmPutOutFrameCounter(OutgoingFrameCounter.v);
	}
	#endif
	//copy myKeySequenceNumber
	packet[loc++] = myKeySequenceNumber;
     a96:	3305      	adds	r3, #5
     a98:	b2db      	uxtb	r3, r3
     a9a:	2000      	movs	r0, #0
     a9c:	54a8      	strb	r0, [r5, r2]
    {
		packet[loc++] = MACPayload[i];
    }
#else
    // write the payload
    for (i = 0; i < MACPayloadLen; i++)
     a9e:	aa30      	add	r2, sp, #192	; 0xc0
     aa0:	7811      	ldrb	r1, [r2, #0]
     aa2:	2900      	cmp	r1, #0
     aa4:	d00b      	beq.n	abe <MiMAC_SendPacket+0x24e>
     aa6:	9a02      	ldr	r2, [sp, #8]
     aa8:	1859      	adds	r1, r3, r1
     aaa:	b2c9      	uxtb	r1, r1
    {
	    packet[loc++] = MACPayload[i];
     aac:	1c58      	adds	r0, r3, #1
     aae:	7816      	ldrb	r6, [r2, #0]
     ab0:	ad06      	add	r5, sp, #24
     ab2:	54ee      	strb	r6, [r5, r3]
     ab4:	3201      	adds	r2, #1
     ab6:	b2c3      	uxtb	r3, r0
    {
		packet[loc++] = MACPayload[i];
    }
#else
    // write the payload
    for (i = 0; i < MACPayloadLen; i++)
     ab8:	4299      	cmp	r1, r3
     aba:	d1f7      	bne.n	aac <MiMAC_SendPacket+0x23c>
     abc:	e000      	b.n	ac0 <MiMAC_SendPacket+0x250>
     abe:	0019      	movs	r1, r3
    {
	    packet[loc++] = MACPayload[i];
    }
	 // MIC added 
	packet[loc++] = final_mic_value[0];
     ac0:	aa06      	add	r2, sp, #24
     ac2:	4b2c      	ldr	r3, [pc, #176]	; (b74 <MiMAC_SendPacket+0x304>)
     ac4:	7818      	ldrb	r0, [r3, #0]
     ac6:	5450      	strb	r0, [r2, r1]
	packet[loc++] = final_mic_value[1];
     ac8:	1c48      	adds	r0, r1, #1
     aca:	b2c0      	uxtb	r0, r0
     acc:	785d      	ldrb	r5, [r3, #1]
     ace:	5415      	strb	r5, [r2, r0]
	packet[loc++] = final_mic_value[2];
     ad0:	1c88      	adds	r0, r1, #2
     ad2:	b2c0      	uxtb	r0, r0
     ad4:	789d      	ldrb	r5, [r3, #2]
     ad6:	5415      	strb	r5, [r2, r0]
	packet[loc++] = final_mic_value[3];
     ad8:	3103      	adds	r1, #3
     ada:	b2c9      	uxtb	r1, r1
     adc:	78db      	ldrb	r3, [r3, #3]
     ade:	5453      	strb	r3, [r2, r1]
	#endif

    trx_status.bits.TX_BUSY = 1;
     ae0:	4a25      	ldr	r2, [pc, #148]	; (b78 <MiMAC_SendPacket+0x308>)
     ae2:	7811      	ldrb	r1, [r2, #0]
     ae4:	2301      	movs	r3, #1
     ae6:	430b      	orrs	r3, r1
     ae8:	7013      	strb	r3, [r2, #0]

    // set the trigger value
    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false)
     aea:	2324      	movs	r3, #36	; 0x24
     aec:	401c      	ands	r4, r3
     aee:	2c20      	cmp	r4, #32
     af0:	d104      	bne.n	afc <MiMAC_SendPacket+0x28c>
    {
        i = 0x05;
#ifndef TARGET_SMALL
        trx_status.bits.TX_PENDING_ACK = 1;
     af2:	7811      	ldrb	r1, [r2, #0]
     af4:	2302      	movs	r3, #2
     af6:	430b      	orrs	r3, r1
     af8:	7013      	strb	r3, [r2, #0]
     afa:	e01c      	b.n	b36 <MiMAC_SendPacket+0x2c6>
#endif
    } else
    {
        i = 0x01;
#ifndef TARGET_SMALL
        trx_status.bits.TX_PENDING_ACK = 0;
     afc:	4a1e      	ldr	r2, [pc, #120]	; (b78 <MiMAC_SendPacket+0x308>)
     afe:	7813      	ldrb	r3, [r2, #0]
     b00:	2102      	movs	r1, #2
     b02:	438b      	bics	r3, r1
     b04:	7013      	strb	r3, [r2, #0]
     b06:	e016      	b.n	b36 <MiMAC_SendPacket+0x2c6>
		  DataEncrypt(MACPayload, &MACPayloadLen, OutgoingFrameCounter, frameControl);
    }
#endif

    // set header length
	packet[loc++] = headerLength;
     b08:	ab06      	add	r3, sp, #24
     b0a:	9901      	ldr	r1, [sp, #4]
     b0c:	7019      	strb	r1, [r3, #0]
		// 4 byte mic and 5 byte outgoing frame counter 
		packet[loc++] = MACPayloadLen+headerLength+9;
    } else
#endif
    {
		packet[loc++] = MACPayloadLen+headerLength;
     b0e:	aa30      	add	r2, sp, #192	; 0xc0
     b10:	7812      	ldrb	r2, [r2, #0]
     b12:	188f      	adds	r7, r1, r2
     b14:	705f      	strb	r7, [r3, #1]
     b16:	e72c      	b.n	972 <MiMAC_SendPacket+0x102>
        {
			packet[loc++] = 0xCC;
        }

        // sequence number
		packet[loc++] = IEEESeqNum++;
     b18:	4b13      	ldr	r3, [pc, #76]	; (b68 <MiMAC_SendPacket+0x2f8>)
     b1a:	781a      	ldrb	r2, [r3, #0]
     b1c:	1c51      	adds	r1, r2, #1
     b1e:	7019      	strb	r1, [r3, #0]
     b20:	ab06      	add	r3, sp, #24
     b22:	711a      	strb	r2, [r3, #4]

        // destination PANID
		packet[loc++] = transParam.DestPANID.v[0];
     b24:	aa03      	add	r2, sp, #12
     b26:	7a91      	ldrb	r1, [r2, #10]
     b28:	7159      	strb	r1, [r3, #5]
		packet[loc++] = transParam.DestPANID.v[1];
     b2a:	7ad2      	ldrb	r2, [r2, #11]
     b2c:	719a      	strb	r2, [r3, #6]

        // destination address
        if (transParam.flags.bits.broadcast)
     b2e:	076b      	lsls	r3, r5, #29
     b30:	d500      	bpl.n	b34 <MiMAC_SendPacket+0x2c4>
     b32:	e753      	b.n	9dc <MiMAC_SendPacket+0x16c>
     b34:	e75d      	b.n	9f2 <MiMAC_SendPacket+0x182>
#ifndef TARGET_SMALL
        trx_status.bits.TX_PENDING_ACK = 0;
#endif
    }
	// Now Trigger the Transmission of packet
	PHY_DataReq(&packet);
     b36:	a806      	add	r0, sp, #24
     b38:	4b10      	ldr	r3, [pc, #64]	; (b7c <MiMAC_SendPacket+0x30c>)
     b3a:	4798      	blx	r3

    return !trx_status.bits.TX_FAIL;
     b3c:	4b0e      	ldr	r3, [pc, #56]	; (b78 <MiMAC_SendPacket+0x308>)
     b3e:	7818      	ldrb	r0, [r3, #0]
     b40:	0740      	lsls	r0, r0, #29
     b42:	0fc0      	lsrs	r0, r0, #31
     b44:	2301      	movs	r3, #1
     b46:	4058      	eors	r0, r3

}
     b48:	b027      	add	sp, #156	; 0x9c
     b4a:	bc3c      	pop	{r2, r3, r4, r5}
     b4c:	4690      	mov	r8, r2
     b4e:	4699      	mov	r9, r3
     b50:	46a2      	mov	sl, r4
     b52:	46ab      	mov	fp, r5
     b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b56:	46c0      	nop			; (mov r8, r8)
     b58:	2000038c 	.word	0x2000038c
     b5c:	0000ffff 	.word	0x0000ffff
     b60:	20000374 	.word	0x20000374
     b64:	000005cd 	.word	0x000005cd
     b68:	20000294 	.word	0x20000294
     b6c:	20000298 	.word	0x20000298
     b70:	200002a0 	.word	0x200002a0
     b74:	200002c8 	.word	0x200002c8
     b78:	20000390 	.word	0x20000390
     b7c:	000002cd 	.word	0x000002cd

00000b80 <PHY_SetIEEEAddr>:

/*************************************************************************//**
*****************************************************************************/
// Setting the IEEE address
void PHY_SetIEEEAddr(uint8_t *ieee_addr)
{
     b80:	b570      	push	{r4, r5, r6, lr}
     b82:	0005      	movs	r5, r0
     b84:	2424      	movs	r4, #36	; 0x24
	uint8_t *ptr_to_reg = ieee_addr;
	for (uint8_t i = 0; i < 8; i++) {
		trx_reg_write((RG_IEEE_ADDR_0 + i), *ptr_to_reg);
     b86:	4e05      	ldr	r6, [pc, #20]	; (b9c <PHY_SetIEEEAddr+0x1c>)
     b88:	7829      	ldrb	r1, [r5, #0]
     b8a:	0020      	movs	r0, r4
     b8c:	47b0      	blx	r6
		ptr_to_reg++;
     b8e:	3501      	adds	r5, #1
     b90:	3401      	adds	r4, #1
     b92:	b2e4      	uxtb	r4, r4
*****************************************************************************/
// Setting the IEEE address
void PHY_SetIEEEAddr(uint8_t *ieee_addr)
{
	uint8_t *ptr_to_reg = ieee_addr;
	for (uint8_t i = 0; i < 8; i++) {
     b94:	2c2c      	cmp	r4, #44	; 0x2c
     b96:	d1f7      	bne.n	b88 <PHY_SetIEEEAddr+0x8>
		trx_reg_write((RG_IEEE_ADDR_0 + i), *ptr_to_reg);
		ptr_to_reg++;
	}
}
     b98:	bd70      	pop	{r4, r5, r6, pc}
     b9a:	46c0      	nop			; (mov r8, r8)
     b9c:	000048b1 	.word	0x000048b1

00000ba0 <MiMAC_Init>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_Init(MACINIT_PARAM initValue)
{
     ba0:	b530      	push	{r4, r5, lr}
     ba2:	b083      	sub	sp, #12
     ba4:	466c      	mov	r4, sp
     ba6:	9000      	str	r0, [sp, #0]
     ba8:	9101      	str	r1, [sp, #4]
	uint8_t i;

	PHY_Init();
     baa:	4b10      	ldr	r3, [pc, #64]	; (bec <MiMAC_Init+0x4c>)
     bac:	4798      	blx	r3
	MACInitParams = initValue;
     bae:	4b10      	ldr	r3, [pc, #64]	; (bf0 <MiMAC_Init+0x50>)
     bb0:	cc06      	ldmia	r4!, {r1, r2}
     bb2:	c306      	stmia	r3!, {r1, r2}
	uint16_t x =  PHY_RandomReq();
     bb4:	4b0f      	ldr	r3, [pc, #60]	; (bf4 <MiMAC_Init+0x54>)
     bb6:	4798      	blx	r3
     bb8:	0005      	movs	r5, r0
/*************************************************************************//**
*****************************************************************************/
// Set Radio to Receive State 
void PHY_SetRxState(bool rx)
{
	phyRxState = rx;
     bba:	2401      	movs	r4, #1
     bbc:	4b0e      	ldr	r3, [pc, #56]	; (bf8 <MiMAC_Init+0x58>)
     bbe:	701c      	strb	r4, [r3, #0]
	phySetRxState();
     bc0:	4b0e      	ldr	r3, [pc, #56]	; (bfc <MiMAC_Init+0x5c>)
     bc2:	4798      	blx	r3
	PHY_Init();
	MACInitParams = initValue;
	uint16_t x =  PHY_RandomReq();
	// Set RF mode
	PHY_SetRxState(true);
	IEEESeqNum =   x & 0xff;
     bc4:	4b0e      	ldr	r3, [pc, #56]	; (c00 <MiMAC_Init+0x60>)
     bc6:	701d      	strb	r5, [r3, #0]
	
	MACCurrentChannel = 11;
     bc8:	220b      	movs	r2, #11
     bca:	4b0e      	ldr	r3, [pc, #56]	; (c04 <MiMAC_Init+0x64>)
     bcc:	701a      	strb	r2, [r3, #0]
	
	// Set Node Address
	PHY_SetIEEEAddr(myLongAddress);
     bce:	480e      	ldr	r0, [pc, #56]	; (c08 <MiMAC_Init+0x68>)
     bd0:	4b0e      	ldr	r3, [pc, #56]	; (c0c <MiMAC_Init+0x6c>)
     bd2:	4798      	blx	r3

	trx_status.Val = 0;
     bd4:	2300      	movs	r3, #0
     bd6:	4a0e      	ldr	r2, [pc, #56]	; (c10 <MiMAC_Init+0x70>)
     bd8:	7013      	strb	r3, [r2, #0]

	for (i = 0; i < BANK_SIZE; i++)
	{
		RxBuffer[i].PayloadLen = 0;
     bda:	4a0e      	ldr	r2, [pc, #56]	; (c14 <MiMAC_Init+0x74>)
     bdc:	7013      	strb	r3, [r2, #0]
     bde:	214e      	movs	r1, #78	; 0x4e
     be0:	5453      	strb	r3, [r2, r1]
				OutgoingFrameCounter.Val = 0;
				nvmPutOutFrameCounter(OutgoingFrameCounter.v);
				OutgoingFrameCounter.Val = 1;
			}
		#else
			OutgoingFrameCounter.Val = 1;
     be2:	4b0d      	ldr	r3, [pc, #52]	; (c18 <MiMAC_Init+0x78>)
     be4:	601c      	str	r4, [r3, #0]
		#endif
	#endif

	return true;
}
     be6:	2001      	movs	r0, #1
     be8:	b003      	add	sp, #12
     bea:	bd30      	pop	{r4, r5, pc}
     bec:	00000369 	.word	0x00000369
     bf0:	200002a0 	.word	0x200002a0
     bf4:	00000319 	.word	0x00000319
     bf8:	20000130 	.word	0x20000130
     bfc:	000002a1 	.word	0x000002a1
     c00:	20000294 	.word	0x20000294
     c04:	2000038e 	.word	0x2000038e
     c08:	20000014 	.word	0x20000014
     c0c:	00000b81 	.word	0x00000b81
     c10:	20000390 	.word	0x20000390
     c14:	200002d8 	.word	0x200002d8
     c18:	20000374 	.word	0x20000374

00000c1c <MiMAC_DiscardPacket>:
 *
 *****************************************************************************************/
void MiMAC_DiscardPacket(void)
{
	//re-enable the ACKS
	if (BankIndex < BANK_SIZE)
     c1c:	4b04      	ldr	r3, [pc, #16]	; (c30 <MiMAC_DiscardPacket+0x14>)
     c1e:	781b      	ldrb	r3, [r3, #0]
     c20:	2b01      	cmp	r3, #1
     c22:	d804      	bhi.n	c2e <MiMAC_DiscardPacket+0x12>
	{
		RxBuffer[BankIndex].PayloadLen = 0;
     c24:	224e      	movs	r2, #78	; 0x4e
     c26:	4353      	muls	r3, r2
     c28:	2100      	movs	r1, #0
     c2a:	4a02      	ldr	r2, [pc, #8]	; (c34 <MiMAC_DiscardPacket+0x18>)
     c2c:	5499      	strb	r1, [r3, r2]
	}
}
     c2e:	4770      	bx	lr
     c30:	20000010 	.word	0x20000010
     c34:	200002d8 	.word	0x200002d8

00000c38 <MiMAC_ReceivedPacket>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_ReceivedPacket(void)
{
     c38:	b5f0      	push	{r4, r5, r6, r7, lr}
     c3a:	4657      	mov	r7, sl
     c3c:	4646      	mov	r6, r8
     c3e:	b4c0      	push	{r6, r7}
     c40:	b083      	sub	sp, #12
	uint8_t i;

	//If the stack TX has been busy for a long time then
	//time out the TX because we may have missed the interrupt
	//and don't want to lock up the stack forever
	if (trx_status.bits.TX_BUSY)
     c42:	4bd2      	ldr	r3, [pc, #840]	; (f8c <MiMAC_ReceivedPacket+0x354>)
     c44:	781b      	ldrb	r3, [r3, #0]
     c46:	07db      	lsls	r3, r3, #31
     c48:	d512      	bpl.n	c70 <MiMAC_ReceivedPacket+0x38>
	{
		if (failureCounter >= FAILURE_COUNTER)
     c4a:	4bd1      	ldr	r3, [pc, #836]	; (f90 <MiMAC_ReceivedPacket+0x358>)
     c4c:	881b      	ldrh	r3, [r3, #0]
     c4e:	b29b      	uxth	r3, r3
     c50:	2b05      	cmp	r3, #5
     c52:	d908      	bls.n	c66 <MiMAC_ReceivedPacket+0x2e>
		{
			failureCounter = 0;
     c54:	2200      	movs	r2, #0
     c56:	4bce      	ldr	r3, [pc, #824]	; (f90 <MiMAC_ReceivedPacket+0x358>)
     c58:	801a      	strh	r2, [r3, #0]
			trx_status.bits.TX_BUSY = 0;
     c5a:	4acc      	ldr	r2, [pc, #816]	; (f8c <MiMAC_ReceivedPacket+0x354>)
     c5c:	7813      	ldrb	r3, [r2, #0]
     c5e:	2101      	movs	r1, #1
     c60:	438b      	bics	r3, r1
     c62:	7013      	strb	r3, [r2, #0]
     c64:	e004      	b.n	c70 <MiMAC_ReceivedPacket+0x38>
		} else
		{
			failureCounter++;
     c66:	4aca      	ldr	r2, [pc, #808]	; (f90 <MiMAC_ReceivedPacket+0x358>)
     c68:	8813      	ldrh	r3, [r2, #0]
     c6a:	3301      	adds	r3, #1
     c6c:	b29b      	uxth	r3, r3
     c6e:	8013      	strh	r3, [r2, #0]
		}
	}

	BankIndex = 0xFF;
     c70:	22ff      	movs	r2, #255	; 0xff
     c72:	4bc8      	ldr	r3, [pc, #800]	; (f94 <MiMAC_ReceivedPacket+0x35c>)
     c74:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < BANK_SIZE; i++)
	{
		if (RxBuffer[i].PayloadLen > 0)
     c76:	4bc8      	ldr	r3, [pc, #800]	; (f98 <MiMAC_ReceivedPacket+0x360>)
     c78:	781b      	ldrb	r3, [r3, #0]
     c7a:	2b00      	cmp	r3, #0
     c7c:	d000      	beq.n	c80 <MiMAC_ReceivedPacket+0x48>
     c7e:	e219      	b.n	10b4 <MiMAC_ReceivedPacket+0x47c>
     c80:	334e      	adds	r3, #78	; 0x4e
     c82:	4ac5      	ldr	r2, [pc, #788]	; (f98 <MiMAC_ReceivedPacket+0x360>)
     c84:	5cd3      	ldrb	r3, [r2, r3]
		MACRxPacket.RSSIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 1];
		#endif

		return true;
	}
	return false;
     c86:	2000      	movs	r0, #0
	}

	BankIndex = 0xFF;
	for (i = 0; i < BANK_SIZE; i++)
	{
		if (RxBuffer[i].PayloadLen > 0)
     c88:	2b00      	cmp	r3, #0
     c8a:	d100      	bne.n	c8e <MiMAC_ReceivedPacket+0x56>
     c8c:	e217      	b.n	10be <MiMAC_ReceivedPacket+0x486>
		{
			BankIndex = i;
     c8e:	2201      	movs	r2, #1
     c90:	4bc0      	ldr	r3, [pc, #768]	; (f94 <MiMAC_ReceivedPacket+0x35c>)
     c92:	701a      	strb	r2, [r3, #0]
     c94:	2501      	movs	r5, #1
	{
		uint8_t addrMode;
		#ifndef TARGET_SMALL
		bool bIntraPAN = true;

		if ((RxBuffer[BankIndex].Payload[0] & 0x40) == 0)
     c96:	0028      	movs	r0, r5
     c98:	234e      	movs	r3, #78	; 0x4e
     c9a:	436b      	muls	r3, r5
     c9c:	4abe      	ldr	r2, [pc, #760]	; (f98 <MiMAC_ReceivedPacket+0x360>)
     c9e:	18d3      	adds	r3, r2, r3
     ca0:	785a      	ldrb	r2, [r3, #1]
     ca2:	2440      	movs	r4, #64	; 0x40
     ca4:	4014      	ands	r4, r2
		{
			bIntraPAN = false;
		}
		#endif
		MACRxPacket.flags.Val = 0;
     ca6:	4abd      	ldr	r2, [pc, #756]	; (f9c <MiMAC_ReceivedPacket+0x364>)
     ca8:	2100      	movs	r1, #0
     caa:	7011      	strb	r1, [r2, #0]
		MACRxPacket.altSourceAddress = false;
     cac:	73d1      	strb	r1, [r2, #15]

		//Determine the start of the MAC payload
		addrMode = RxBuffer[BankIndex].Payload[1] & 0xCC;
		switch (addrMode)
     cae:	789b      	ldrb	r3, [r3, #2]
     cb0:	2233      	movs	r2, #51	; 0x33
     cb2:	4393      	bics	r3, r2
     cb4:	b2da      	uxtb	r2, r3
     cb6:	2a88      	cmp	r2, #136	; 0x88
     cb8:	d100      	bne.n	cbc <MiMAC_ReceivedPacket+0x84>
     cba:	e097      	b.n	dec <MiMAC_ReceivedPacket+0x1b4>
     cbc:	d805      	bhi.n	cca <MiMAC_ReceivedPacket+0x92>
     cbe:	2b08      	cmp	r3, #8
     cc0:	d100      	bne.n	cc4 <MiMAC_ReceivedPacket+0x8c>
     cc2:	e106      	b.n	ed2 <MiMAC_ReceivedPacket+0x29a>
     cc4:	2a80      	cmp	r2, #128	; 0x80
     cc6:	d075      	beq.n	db4 <MiMAC_ReceivedPacket+0x17c>
     cc8:	e120      	b.n	f0c <MiMAC_ReceivedPacket+0x2d4>
     cca:	b2da      	uxtb	r2, r3
     ccc:	2ac8      	cmp	r2, #200	; 0xc8
     cce:	d005      	beq.n	cdc <MiMAC_ReceivedPacket+0xa4>
     cd0:	2acc      	cmp	r2, #204	; 0xcc
     cd2:	d042      	beq.n	d5a <MiMAC_ReceivedPacket+0x122>
     cd4:	2a8c      	cmp	r2, #140	; 0x8c
     cd6:	d000      	beq.n	cda <MiMAC_ReceivedPacket+0xa2>
     cd8:	e118      	b.n	f0c <MiMAC_ReceivedPacket+0x2d4>
     cda:	e0ca      	b.n	e72 <MiMAC_ReceivedPacket+0x23a>
		{
			case 0xC8: //short dest, long source
			// for P2P only broadcast allows short destination address
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
     cdc:	234e      	movs	r3, #78	; 0x4e
     cde:	436b      	muls	r3, r5
     ce0:	4aad      	ldr	r2, [pc, #692]	; (f98 <MiMAC_ReceivedPacket+0x360>)
     ce2:	18d3      	adds	r3, r2, r3
     ce4:	799b      	ldrb	r3, [r3, #6]
     ce6:	2bff      	cmp	r3, #255	; 0xff
     ce8:	d10a      	bne.n	d00 <MiMAC_ReceivedPacket+0xc8>
     cea:	3bb1      	subs	r3, #177	; 0xb1
     cec:	436b      	muls	r3, r5
     cee:	18d3      	adds	r3, r2, r3
     cf0:	79db      	ldrb	r3, [r3, #7]
     cf2:	2bff      	cmp	r3, #255	; 0xff
     cf4:	d104      	bne.n	d00 <MiMAC_ReceivedPacket+0xc8>
			{
				MACRxPacket.flags.bits.broadcast = 1;
     cf6:	4aa9      	ldr	r2, [pc, #676]	; (f9c <MiMAC_ReceivedPacket+0x364>)
     cf8:	7811      	ldrb	r1, [r2, #0]
     cfa:	2304      	movs	r3, #4
     cfc:	430b      	orrs	r3, r1
     cfe:	7013      	strb	r3, [r2, #0]
			}
			MACRxPacket.flags.bits.sourcePrsnt = 1;
     d00:	4aa6      	ldr	r2, [pc, #664]	; (f9c <MiMAC_ReceivedPacket+0x364>)
     d02:	7813      	ldrb	r3, [r2, #0]
     d04:	2180      	movs	r1, #128	; 0x80
     d06:	4249      	negs	r1, r1
     d08:	430b      	orrs	r3, r1
     d0a:	7013      	strb	r3, [r2, #0]

			#ifndef TARGET_SMALL
			if (bIntraPAN) // check if it is intraPAN
     d0c:	2c00      	cmp	r4, #0
     d0e:	d011      	beq.n	d34 <MiMAC_ReceivedPacket+0xfc>
			#endif
			{
				#ifndef TARGET_SMALL
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
     d10:	49a1      	ldr	r1, [pc, #644]	; (f98 <MiMAC_ReceivedPacket+0x360>)
     d12:	234e      	movs	r3, #78	; 0x4e
     d14:	4358      	muls	r0, r3
     d16:	180b      	adds	r3, r1, r0
     d18:	791c      	ldrb	r4, [r3, #4]
     d1a:	7414      	strb	r4, [r2, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
     d1c:	795b      	ldrb	r3, [r3, #5]
     d1e:	7453      	strb	r3, [r2, #17]
				#endif
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
     d20:	180b      	adds	r3, r1, r0
     d22:	3308      	adds	r3, #8
     d24:	6053      	str	r3, [r2, #4]

				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
     d26:	5c43      	ldrb	r3, [r0, r1]
     d28:	3b13      	subs	r3, #19
     d2a:	7313      	strb	r3, [r2, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
     d2c:	1808      	adds	r0, r1, r0
     d2e:	3010      	adds	r0, #16
     d30:	6090      	str	r0, [r2, #8]
     d32:	e1b4      	b.n	109e <MiMAC_ReceivedPacket+0x466>
			}
			#ifndef TARGET_SMALL
			else
			{
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
     d34:	4a99      	ldr	r2, [pc, #612]	; (f9c <MiMAC_ReceivedPacket+0x364>)
     d36:	4998      	ldr	r1, [pc, #608]	; (f98 <MiMAC_ReceivedPacket+0x360>)
     d38:	234e      	movs	r3, #78	; 0x4e
     d3a:	4358      	muls	r0, r3
     d3c:	180b      	adds	r3, r1, r0
     d3e:	7a1c      	ldrb	r4, [r3, #8]
     d40:	7414      	strb	r4, [r2, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
     d42:	7a5b      	ldrb	r3, [r3, #9]
     d44:	7453      	strb	r3, [r2, #17]
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
     d46:	180b      	adds	r3, r1, r0
     d48:	330a      	adds	r3, #10
     d4a:	6053      	str	r3, [r2, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
     d4c:	5c43      	ldrb	r3, [r0, r1]
     d4e:	3b15      	subs	r3, #21
     d50:	7313      	strb	r3, [r2, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
     d52:	1808      	adds	r0, r1, r0
     d54:	3012      	adds	r0, #18
     d56:	6090      	str	r0, [r2, #8]
     d58:	e1a1      	b.n	109e <MiMAC_ReceivedPacket+0x466>
			#endif

			break;

			case 0xCC: // long dest, long source
			MACRxPacket.flags.bits.sourcePrsnt = 1;
     d5a:	4a90      	ldr	r2, [pc, #576]	; (f9c <MiMAC_ReceivedPacket+0x364>)
     d5c:	7813      	ldrb	r3, [r2, #0]
     d5e:	2180      	movs	r1, #128	; 0x80
     d60:	4249      	negs	r1, r1
     d62:	430b      	orrs	r3, r1
     d64:	7013      	strb	r3, [r2, #0]
			#ifndef TARGET_SMALL
			if (bIntraPAN) // check if it is intraPAN
     d66:	2c00      	cmp	r4, #0
     d68:	d011      	beq.n	d8e <MiMAC_ReceivedPacket+0x156>
			#endif
			{
				//rxFrame.flags.bits.intraPAN = 1;
				#ifndef TARGET_SMALL
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
     d6a:	498b      	ldr	r1, [pc, #556]	; (f98 <MiMAC_ReceivedPacket+0x360>)
     d6c:	234e      	movs	r3, #78	; 0x4e
     d6e:	4358      	muls	r0, r3
     d70:	180b      	adds	r3, r1, r0
     d72:	791c      	ldrb	r4, [r3, #4]
     d74:	7414      	strb	r4, [r2, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
     d76:	795b      	ldrb	r3, [r3, #5]
     d78:	7453      	strb	r3, [r2, #17]
				#endif
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
     d7a:	180b      	adds	r3, r1, r0
     d7c:	330e      	adds	r3, #14
     d7e:	6053      	str	r3, [r2, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 25;
     d80:	5c43      	ldrb	r3, [r0, r1]
     d82:	3b19      	subs	r3, #25
     d84:	7313      	strb	r3, [r2, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[21]);
     d86:	1808      	adds	r0, r1, r0
     d88:	3016      	adds	r0, #22
     d8a:	6090      	str	r0, [r2, #8]
     d8c:	e187      	b.n	109e <MiMAC_ReceivedPacket+0x466>
			}
			#ifndef TARGET_SMALL
			else
			{
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[13];
     d8e:	4a83      	ldr	r2, [pc, #524]	; (f9c <MiMAC_ReceivedPacket+0x364>)
     d90:	4981      	ldr	r1, [pc, #516]	; (f98 <MiMAC_ReceivedPacket+0x360>)
     d92:	234e      	movs	r3, #78	; 0x4e
     d94:	4358      	muls	r0, r3
     d96:	180b      	adds	r3, r1, r0
     d98:	7b9c      	ldrb	r4, [r3, #14]
     d9a:	7414      	strb	r4, [r2, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[14];
     d9c:	7bdb      	ldrb	r3, [r3, #15]
     d9e:	7453      	strb	r3, [r2, #17]
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[15]);
     da0:	180b      	adds	r3, r1, r0
     da2:	3310      	adds	r3, #16
     da4:	6053      	str	r3, [r2, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 27;
     da6:	5c43      	ldrb	r3, [r0, r1]
     da8:	3b1b      	subs	r3, #27
     daa:	7313      	strb	r3, [r2, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[23]);
     dac:	1808      	adds	r0, r1, r0
     dae:	3018      	adds	r0, #24
     db0:	6090      	str	r0, [r2, #8]
     db2:	e174      	b.n	109e <MiMAC_ReceivedPacket+0x466>
			#endif
			break;

			case 0x80: // short source only. used in beacon
			{
				MACRxPacket.flags.bits.broadcast = 1;
     db4:	4a79      	ldr	r2, [pc, #484]	; (f9c <MiMAC_ReceivedPacket+0x364>)
     db6:	7811      	ldrb	r1, [r2, #0]
     db8:	2304      	movs	r3, #4
     dba:	430b      	orrs	r3, r1
				MACRxPacket.flags.bits.sourcePrsnt = 1;
     dbc:	2180      	movs	r1, #128	; 0x80
     dbe:	4249      	negs	r1, r1
     dc0:	430b      	orrs	r3, r1
     dc2:	7013      	strb	r3, [r2, #0]
				MACRxPacket.altSourceAddress = true;
     dc4:	2301      	movs	r3, #1
     dc6:	73d3      	strb	r3, [r2, #15]
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
     dc8:	4973      	ldr	r1, [pc, #460]	; (f98 <MiMAC_ReceivedPacket+0x360>)
     dca:	334d      	adds	r3, #77	; 0x4d
     dcc:	4358      	muls	r0, r3
     dce:	180b      	adds	r3, r1, r0
     dd0:	791c      	ldrb	r4, [r3, #4]
     dd2:	7414      	strb	r4, [r2, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
     dd4:	795b      	ldrb	r3, [r3, #5]
     dd6:	7453      	strb	r3, [r2, #17]
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[5]);
     dd8:	180b      	adds	r3, r1, r0
     dda:	3306      	adds	r3, #6
     ddc:	6053      	str	r3, [r2, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 11;
     dde:	5c43      	ldrb	r3, [r0, r1]
     de0:	3b0b      	subs	r3, #11
     de2:	7313      	strb	r3, [r2, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
     de4:	1808      	adds	r0, r1, r0
     de6:	3008      	adds	r0, #8
     de8:	6090      	str	r0, [r2, #8]
			}
			break;
     dea:	e14e      	b.n	108a <MiMAC_ReceivedPacket+0x452>

			case 0x88: // short dest, short source
			{
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
     dec:	234e      	movs	r3, #78	; 0x4e
     dee:	435d      	muls	r5, r3
     df0:	4b69      	ldr	r3, [pc, #420]	; (f98 <MiMAC_ReceivedPacket+0x360>)
     df2:	195d      	adds	r5, r3, r5
     df4:	79ab      	ldrb	r3, [r5, #6]
     df6:	2bff      	cmp	r3, #255	; 0xff
     df8:	d10b      	bne.n	e12 <MiMAC_ReceivedPacket+0x1da>
     dfa:	3bb1      	subs	r3, #177	; 0xb1
     dfc:	4343      	muls	r3, r0
     dfe:	4a66      	ldr	r2, [pc, #408]	; (f98 <MiMAC_ReceivedPacket+0x360>)
     e00:	18d3      	adds	r3, r2, r3
     e02:	79db      	ldrb	r3, [r3, #7]
     e04:	2bff      	cmp	r3, #255	; 0xff
     e06:	d104      	bne.n	e12 <MiMAC_ReceivedPacket+0x1da>
				{
					MACRxPacket.flags.bits.broadcast = 1;
     e08:	4a64      	ldr	r2, [pc, #400]	; (f9c <MiMAC_ReceivedPacket+0x364>)
     e0a:	7811      	ldrb	r1, [r2, #0]
     e0c:	2304      	movs	r3, #4
     e0e:	430b      	orrs	r3, r1
     e10:	7013      	strb	r3, [r2, #0]
				}
				MACRxPacket.flags.bits.sourcePrsnt = 1;
     e12:	4b62      	ldr	r3, [pc, #392]	; (f9c <MiMAC_ReceivedPacket+0x364>)
     e14:	781a      	ldrb	r2, [r3, #0]
     e16:	2180      	movs	r1, #128	; 0x80
     e18:	4249      	negs	r1, r1
     e1a:	430a      	orrs	r2, r1
     e1c:	701a      	strb	r2, [r3, #0]
				MACRxPacket.altSourceAddress = true;
     e1e:	2201      	movs	r2, #1
     e20:	73da      	strb	r2, [r3, #15]
				#ifndef TARGET_SMALL
				if (bIntraPAN == false)
     e22:	2c00      	cmp	r4, #0
     e24:	d112      	bne.n	e4c <MiMAC_ReceivedPacket+0x214>
				{
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
     e26:	001a      	movs	r2, r3
     e28:	495b      	ldr	r1, [pc, #364]	; (f98 <MiMAC_ReceivedPacket+0x360>)
     e2a:	234e      	movs	r3, #78	; 0x4e
     e2c:	4358      	muls	r0, r3
     e2e:	180b      	adds	r3, r1, r0
     e30:	7a1c      	ldrb	r4, [r3, #8]
     e32:	7414      	strb	r4, [r2, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
     e34:	7a5b      	ldrb	r3, [r3, #9]
     e36:	7453      	strb	r3, [r2, #17]
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
     e38:	180b      	adds	r3, r1, r0
     e3a:	330a      	adds	r3, #10
     e3c:	6053      	str	r3, [r2, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 15;
     e3e:	5c43      	ldrb	r3, [r0, r1]
     e40:	3b0f      	subs	r3, #15
     e42:	7313      	strb	r3, [r2, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[11]);
     e44:	1808      	adds	r0, r1, r0
     e46:	300c      	adds	r0, #12
     e48:	6090      	str	r0, [r2, #8]
     e4a:	e11e      	b.n	108a <MiMAC_ReceivedPacket+0x452>
				} else
				#endif
				{
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
     e4c:	4a53      	ldr	r2, [pc, #332]	; (f9c <MiMAC_ReceivedPacket+0x364>)
     e4e:	4952      	ldr	r1, [pc, #328]	; (f98 <MiMAC_ReceivedPacket+0x360>)
     e50:	234e      	movs	r3, #78	; 0x4e
     e52:	4358      	muls	r0, r3
     e54:	180b      	adds	r3, r1, r0
     e56:	791c      	ldrb	r4, [r3, #4]
     e58:	7414      	strb	r4, [r2, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
     e5a:	795b      	ldrb	r3, [r3, #5]
     e5c:	7453      	strb	r3, [r2, #17]
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
     e5e:	180b      	adds	r3, r1, r0
     e60:	3308      	adds	r3, #8
     e62:	6053      	str	r3, [r2, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 13;
     e64:	5c43      	ldrb	r3, [r0, r1]
     e66:	3b0d      	subs	r3, #13
     e68:	7313      	strb	r3, [r2, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[9]);
     e6a:	1808      	adds	r0, r1, r0
     e6c:	300a      	adds	r0, #10
     e6e:	6090      	str	r0, [r2, #8]
     e70:	e10b      	b.n	108a <MiMAC_ReceivedPacket+0x452>
			}
			break;

			case 0x8C: // long dest, short source
			{
				MACRxPacket.flags.bits.sourcePrsnt = 1;
     e72:	4b4a      	ldr	r3, [pc, #296]	; (f9c <MiMAC_ReceivedPacket+0x364>)
     e74:	781a      	ldrb	r2, [r3, #0]
     e76:	2180      	movs	r1, #128	; 0x80
     e78:	4249      	negs	r1, r1
     e7a:	430a      	orrs	r2, r1
     e7c:	701a      	strb	r2, [r3, #0]
				MACRxPacket.altSourceAddress = true;
     e7e:	2201      	movs	r2, #1
     e80:	73da      	strb	r2, [r3, #15]
				#ifndef TARGET_SMALL
				if (bIntraPAN) // check if it is intraPAN
     e82:	2c00      	cmp	r4, #0
     e84:	d012      	beq.n	eac <MiMAC_ReceivedPacket+0x274>
				#endif
				{
					#ifndef TARGET_SMALL
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
     e86:	001a      	movs	r2, r3
     e88:	4943      	ldr	r1, [pc, #268]	; (f98 <MiMAC_ReceivedPacket+0x360>)
     e8a:	234e      	movs	r3, #78	; 0x4e
     e8c:	4358      	muls	r0, r3
     e8e:	180b      	adds	r3, r1, r0
     e90:	791c      	ldrb	r4, [r3, #4]
     e92:	7414      	strb	r4, [r2, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
     e94:	795b      	ldrb	r3, [r3, #5]
     e96:	7453      	strb	r3, [r2, #17]
					#endif
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[12]);
     e98:	180b      	adds	r3, r1, r0
     e9a:	330d      	adds	r3, #13
     e9c:	6053      	str	r3, [r2, #4]

					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
     e9e:	5c43      	ldrb	r3, [r0, r1]
     ea0:	3b13      	subs	r3, #19
     ea2:	7313      	strb	r3, [r2, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
     ea4:	1808      	adds	r0, r1, r0
     ea6:	3010      	adds	r0, #16
     ea8:	6090      	str	r0, [r2, #8]
     eaa:	e0ee      	b.n	108a <MiMAC_ReceivedPacket+0x452>
				}
				#ifndef TARGET_SMALL
				else
				{
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[12];
     eac:	4a3b      	ldr	r2, [pc, #236]	; (f9c <MiMAC_ReceivedPacket+0x364>)
     eae:	493a      	ldr	r1, [pc, #232]	; (f98 <MiMAC_ReceivedPacket+0x360>)
     eb0:	234e      	movs	r3, #78	; 0x4e
     eb2:	4358      	muls	r0, r3
     eb4:	180b      	adds	r3, r1, r0
     eb6:	7b5c      	ldrb	r4, [r3, #13]
     eb8:	7414      	strb	r4, [r2, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[13];
     eba:	7b9b      	ldrb	r3, [r3, #14]
     ebc:	7453      	strb	r3, [r2, #17]
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[14]);
     ebe:	180b      	adds	r3, r1, r0
     ec0:	330f      	adds	r3, #15
     ec2:	6053      	str	r3, [r2, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
     ec4:	5c43      	ldrb	r3, [r0, r1]
     ec6:	3b15      	subs	r3, #21
     ec8:	7313      	strb	r3, [r2, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
     eca:	1808      	adds	r0, r1, r0
     ecc:	3012      	adds	r0, #18
     ece:	6090      	str	r0, [r2, #8]
     ed0:	e0db      	b.n	108a <MiMAC_ReceivedPacket+0x452>
			break;


			case 0x08: //dest-short, source-none
			{
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
     ed2:	234e      	movs	r3, #78	; 0x4e
     ed4:	436b      	muls	r3, r5
     ed6:	4a30      	ldr	r2, [pc, #192]	; (f98 <MiMAC_ReceivedPacket+0x360>)
     ed8:	18d3      	adds	r3, r2, r3
     eda:	799b      	ldrb	r3, [r3, #6]
     edc:	2bff      	cmp	r3, #255	; 0xff
     ede:	d10a      	bne.n	ef6 <MiMAC_ReceivedPacket+0x2be>
     ee0:	3bb1      	subs	r3, #177	; 0xb1
     ee2:	436b      	muls	r3, r5
     ee4:	18d3      	adds	r3, r2, r3
     ee6:	79db      	ldrb	r3, [r3, #7]
     ee8:	2bff      	cmp	r3, #255	; 0xff
     eea:	d104      	bne.n	ef6 <MiMAC_ReceivedPacket+0x2be>
				{
					MACRxPacket.flags.bits.broadcast = 1;
     eec:	4a2b      	ldr	r2, [pc, #172]	; (f9c <MiMAC_ReceivedPacket+0x364>)
     eee:	7811      	ldrb	r1, [r2, #0]
     ef0:	2304      	movs	r3, #4
     ef2:	430b      	orrs	r3, r1
     ef4:	7013      	strb	r3, [r2, #0]
				}
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 10;
     ef6:	4a29      	ldr	r2, [pc, #164]	; (f9c <MiMAC_ReceivedPacket+0x364>)
     ef8:	4927      	ldr	r1, [pc, #156]	; (f98 <MiMAC_ReceivedPacket+0x360>)
     efa:	234e      	movs	r3, #78	; 0x4e
     efc:	4358      	muls	r0, r3
     efe:	5c43      	ldrb	r3, [r0, r1]
     f00:	3b0a      	subs	r3, #10
     f02:	7313      	strb	r3, [r2, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
     f04:	1808      	adds	r0, r1, r0
     f06:	3008      	adds	r0, #8
     f08:	6090      	str	r0, [r2, #8]
			}
			break;
     f0a:	e0be      	b.n	108a <MiMAC_ReceivedPacket+0x452>

			// all other addressing mode will not be supported in P2P
			default:
			// not valid addressing mode or no addressing info
			MiMAC_DiscardPacket();
     f0c:	4b24      	ldr	r3, [pc, #144]	; (fa0 <MiMAC_ReceivedPacket+0x368>)
     f0e:	4798      	blx	r3
			return false;
     f10:	2000      	movs	r0, #0
     f12:	e0d4      	b.n	10be <MiMAC_ReceivedPacket+0x486>
		{
			API_UINT32_UNION FrameCounter;

			if (addrMode < 0xC0)
			{
				MiMAC_DiscardPacket();
     f14:	4b22      	ldr	r3, [pc, #136]	; (fa0 <MiMAC_ReceivedPacket+0x368>)
     f16:	4798      	blx	r3
				return false;
     f18:	e07e      	b.n	1018 <MiMAC_ReceivedPacket+0x3e0>
			}

			FrameCounter.v[0] = MACRxPacket.Payload[0];
     f1a:	4b20      	ldr	r3, [pc, #128]	; (f9c <MiMAC_ReceivedPacket+0x364>)
     f1c:	689b      	ldr	r3, [r3, #8]
			FrameCounter.v[1] = MACRxPacket.Payload[1];
     f1e:	785a      	ldrb	r2, [r3, #1]
     f20:	0212      	lsls	r2, r2, #8
     f22:	7819      	ldrb	r1, [r3, #0]
     f24:	4311      	orrs	r1, r2
     f26:	4688      	mov	r8, r1
			FrameCounter.v[2] = MACRxPacket.Payload[2];
     f28:	789a      	ldrb	r2, [r3, #2]
     f2a:	0412      	lsls	r2, r2, #16
     f2c:	491d      	ldr	r1, [pc, #116]	; (fa4 <MiMAC_ReceivedPacket+0x36c>)
     f2e:	4640      	mov	r0, r8
     f30:	4001      	ands	r1, r0
     f32:	4311      	orrs	r1, r2
			FrameCounter.v[3] = MACRxPacket.Payload[3];
     f34:	78db      	ldrb	r3, [r3, #3]
     f36:	061b      	lsls	r3, r3, #24
     f38:	020a      	lsls	r2, r1, #8
     f3a:	0a12      	lsrs	r2, r2, #8
     f3c:	431a      	orrs	r2, r3
     f3e:	4690      	mov	r8, r2
     f40:	4d19      	ldr	r5, [pc, #100]	; (fa8 <MiMAC_ReceivedPacket+0x370>)
     f42:	2400      	movs	r4, #0

			for (i = 0; i < CONNECTION_SIZE; i++)
			{
				if ((ConnectionTable[i].status.bits.isValid) &&
     f44:	4f19      	ldr	r7, [pc, #100]	; (fac <MiMAC_ReceivedPacket+0x374>)
				isSameAddress(ConnectionTable[i].Address, MACRxPacket.SourceAddress))
     f46:	4b15      	ldr	r3, [pc, #84]	; (f9c <MiMAC_ReceivedPacket+0x364>)
     f48:	469a      	mov	sl, r3
     f4a:	b2e6      	uxtb	r6, r4
			FrameCounter.v[2] = MACRxPacket.Payload[2];
			FrameCounter.v[3] = MACRxPacket.Payload[3];

			for (i = 0; i < CONNECTION_SIZE; i++)
			{
				if ((ConnectionTable[i].status.bits.isValid) &&
     f4c:	00e3      	lsls	r3, r4, #3
     f4e:	1b1b      	subs	r3, r3, r4
     f50:	005b      	lsls	r3, r3, #1
     f52:	18fb      	adds	r3, r7, r3
     f54:	7b1b      	ldrb	r3, [r3, #12]
     f56:	09db      	lsrs	r3, r3, #7
     f58:	d006      	beq.n	f68 <MiMAC_ReceivedPacket+0x330>
				isSameAddress(ConnectionTable[i].Address, MACRxPacket.SourceAddress))
     f5a:	4653      	mov	r3, sl
     f5c:	6859      	ldr	r1, [r3, #4]
     f5e:	0028      	movs	r0, r5
     f60:	4b13      	ldr	r3, [pc, #76]	; (fb0 <MiMAC_ReceivedPacket+0x378>)
     f62:	4798      	blx	r3
			FrameCounter.v[2] = MACRxPacket.Payload[2];
			FrameCounter.v[3] = MACRxPacket.Payload[3];

			for (i = 0; i < CONNECTION_SIZE; i++)
			{
				if ((ConnectionTable[i].status.bits.isValid) &&
     f64:	2800      	cmp	r0, #0
     f66:	d104      	bne.n	f72 <MiMAC_ReceivedPacket+0x33a>
     f68:	3401      	adds	r4, #1
     f6a:	350e      	adds	r5, #14
			FrameCounter.v[0] = MACRxPacket.Payload[0];
			FrameCounter.v[1] = MACRxPacket.Payload[1];
			FrameCounter.v[2] = MACRxPacket.Payload[2];
			FrameCounter.v[3] = MACRxPacket.Payload[3];

			for (i = 0; i < CONNECTION_SIZE; i++)
     f6c:	2c14      	cmp	r4, #20
     f6e:	d1ec      	bne.n	f4a <MiMAC_ReceivedPacket+0x312>
     f70:	e026      	b.n	fc0 <MiMAC_ReceivedPacket+0x388>
				{
					break;
				}
			}

			if (i < CONNECTION_SIZE)
     f72:	2e13      	cmp	r6, #19
     f74:	d824      	bhi.n	fc0 <MiMAC_ReceivedPacket+0x388>
			{
				if (IncomingFrameCounter[i].Val > FrameCounter.Val)
     f76:	23ff      	movs	r3, #255	; 0xff
     f78:	401c      	ands	r4, r3
     f7a:	00a2      	lsls	r2, r4, #2
     f7c:	4b0d      	ldr	r3, [pc, #52]	; (fb4 <MiMAC_ReceivedPacket+0x37c>)
     f7e:	58d3      	ldr	r3, [r2, r3]
     f80:	4543      	cmp	r3, r8
     f82:	d919      	bls.n	fb8 <MiMAC_ReceivedPacket+0x380>
				{
					MiMAC_DiscardPacket();
     f84:	4b06      	ldr	r3, [pc, #24]	; (fa0 <MiMAC_ReceivedPacket+0x368>)
     f86:	4798      	blx	r3
					return false;
     f88:	e046      	b.n	1018 <MiMAC_ReceivedPacket+0x3e0>
     f8a:	46c0      	nop			; (mov r8, r8)
     f8c:	20000390 	.word	0x20000390
     f90:	2000012e 	.word	0x2000012e
     f94:	20000010 	.word	0x20000010
     f98:	200002d8 	.word	0x200002d8
     f9c:	200004bc 	.word	0x200004bc
     fa0:	00000c1d 	.word	0x00000c1d
     fa4:	ff00ffff 	.word	0xff00ffff
     fa8:	200003a0 	.word	0x200003a0
     fac:	2000039c 	.word	0x2000039c
     fb0:	00001671 	.word	0x00001671
     fb4:	200004f0 	.word	0x200004f0
				} else
				{
					IncomingFrameCounter[i].Val = FrameCounter.Val;
     fb8:	00a4      	lsls	r4, r4, #2
     fba:	4b43      	ldr	r3, [pc, #268]	; (10c8 <MiMAC_ReceivedPacket+0x490>)
     fbc:	4642      	mov	r2, r8
     fbe:	50e2      	str	r2, [r4, r3]
				}
			}


			MACRxPacket.PayloadLen -= 5;  // used to 5 for frame counter now -4 also added for MIC integrity
     fc0:	4942      	ldr	r1, [pc, #264]	; (10cc <MiMAC_ReceivedPacket+0x494>)
     fc2:	7b0b      	ldrb	r3, [r1, #12]
     fc4:	3b05      	subs	r3, #5
     fc6:	b2db      	uxtb	r3, r3
     fc8:	730b      	strb	r3, [r1, #12]

			received_mic_values[0] = MACRxPacket.Payload[MACRxPacket.PayloadLen+1];
     fca:	6888      	ldr	r0, [r1, #8]
     fcc:	18c3      	adds	r3, r0, r3
     fce:	785c      	ldrb	r4, [r3, #1]
     fd0:	4a3f      	ldr	r2, [pc, #252]	; (10d0 <MiMAC_ReceivedPacket+0x498>)
     fd2:	7014      	strb	r4, [r2, #0]
			received_mic_values[1] = MACRxPacket.Payload[MACRxPacket.PayloadLen+2];
     fd4:	789c      	ldrb	r4, [r3, #2]
     fd6:	7054      	strb	r4, [r2, #1]
			received_mic_values[2] = MACRxPacket.Payload[MACRxPacket.PayloadLen+3];
     fd8:	78dc      	ldrb	r4, [r3, #3]
     fda:	7094      	strb	r4, [r2, #2]
			received_mic_values[3] = MACRxPacket.Payload[MACRxPacket.PayloadLen+4];
     fdc:	791b      	ldrb	r3, [r3, #4]
     fde:	70d3      	strb	r3, [r2, #3]
 					//MACRxPacket.PayloadLen -= 4; 
			if (false == DataDecrypt(&(MACRxPacket.Payload[5]), &(MACRxPacket.PayloadLen), MACRxPacket.SourceAddress, FrameCounter, RxBuffer[BankIndex].Payload[0]))
     fe0:	684a      	ldr	r2, [r1, #4]
     fe2:	310c      	adds	r1, #12
     fe4:	3005      	adds	r0, #5
     fe6:	4b3b      	ldr	r3, [pc, #236]	; (10d4 <MiMAC_ReceivedPacket+0x49c>)
     fe8:	781c      	ldrb	r4, [r3, #0]
     fea:	234e      	movs	r3, #78	; 0x4e
     fec:	4363      	muls	r3, r4
     fee:	4c3a      	ldr	r4, [pc, #232]	; (10d8 <MiMAC_ReceivedPacket+0x4a0>)
     ff0:	18e3      	adds	r3, r4, r3
     ff2:	785b      	ldrb	r3, [r3, #1]
     ff4:	9300      	str	r3, [sp, #0]
     ff6:	4643      	mov	r3, r8
     ff8:	4c38      	ldr	r4, [pc, #224]	; (10dc <MiMAC_ReceivedPacket+0x4a4>)
     ffa:	47a0      	blx	r4
     ffc:	2800      	cmp	r0, #0
     ffe:	d102      	bne.n	1006 <MiMAC_ReceivedPacket+0x3ce>
			{
				MiMAC_DiscardPacket();
    1000:	4b37      	ldr	r3, [pc, #220]	; (10e0 <MiMAC_ReceivedPacket+0x4a8>)
    1002:	4798      	blx	r3
				return false;
    1004:	e008      	b.n	1018 <MiMAC_ReceivedPacket+0x3e0>
			}

			// remove the security header from the payload
			MACRxPacket.Payload = &(MACRxPacket.Payload[5]);
    1006:	4b31      	ldr	r3, [pc, #196]	; (10cc <MiMAC_ReceivedPacket+0x494>)
    1008:	689a      	ldr	r2, [r3, #8]
    100a:	3205      	adds	r2, #5
    100c:	609a      	str	r2, [r3, #8]
			MACRxPacket.flags.bits.secEn = 1;
    100e:	7819      	ldrb	r1, [r3, #0]
    1010:	2208      	movs	r2, #8
    1012:	430a      	orrs	r2, r1
    1014:	701a      	strb	r2, [r3, #0]
    1016:	e001      	b.n	101c <MiMAC_ReceivedPacket+0x3e4>
			API_UINT32_UNION FrameCounter;

			if (addrMode < 0xC0)
			{
				MiMAC_DiscardPacket();
				return false;
    1018:	2000      	movs	r0, #0
    101a:	e050      	b.n	10be <MiMAC_ReceivedPacket+0x486>
		#endif

		// check the frame type. Only the data and command frame type
		// are supported. Acknowledgement frame type is handled in
		// AT96RF233 transceiver hardware.
		switch (RxBuffer[BankIndex].Payload[0] & 0x07) // check frame type
    101c:	4b2d      	ldr	r3, [pc, #180]	; (10d4 <MiMAC_ReceivedPacket+0x49c>)
    101e:	7819      	ldrb	r1, [r3, #0]
    1020:	234e      	movs	r3, #78	; 0x4e
    1022:	434b      	muls	r3, r1
    1024:	4a2c      	ldr	r2, [pc, #176]	; (10d8 <MiMAC_ReceivedPacket+0x4a0>)
    1026:	18d3      	adds	r3, r2, r3
    1028:	785a      	ldrb	r2, [r3, #1]
    102a:	2307      	movs	r3, #7
    102c:	401a      	ands	r2, r3
    102e:	2a01      	cmp	r2, #1
    1030:	d004      	beq.n	103c <MiMAC_ReceivedPacket+0x404>
    1032:	2a00      	cmp	r2, #0
    1034:	d010      	beq.n	1058 <MiMAC_ReceivedPacket+0x420>
    1036:	2a03      	cmp	r2, #3
    1038:	d006      	beq.n	1048 <MiMAC_ReceivedPacket+0x410>
    103a:	e013      	b.n	1064 <MiMAC_ReceivedPacket+0x42c>
		{
			case 0x01: // data frame
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_DATA;
    103c:	4a23      	ldr	r2, [pc, #140]	; (10cc <MiMAC_ReceivedPacket+0x494>)
    103e:	7813      	ldrb	r3, [r2, #0]
    1040:	2003      	movs	r0, #3
    1042:	4383      	bics	r3, r0
    1044:	7013      	strb	r3, [r2, #0]
			break;
    1046:	e011      	b.n	106c <MiMAC_ReceivedPacket+0x434>
			case 0x03: // command frame
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_COMMAND;
    1048:	4820      	ldr	r0, [pc, #128]	; (10cc <MiMAC_ReceivedPacket+0x494>)
    104a:	7803      	ldrb	r3, [r0, #0]
    104c:	2203      	movs	r2, #3
    104e:	4393      	bics	r3, r2
    1050:	2201      	movs	r2, #1
    1052:	4313      	orrs	r3, r2
    1054:	7003      	strb	r3, [r0, #0]
			break;
    1056:	e009      	b.n	106c <MiMAC_ReceivedPacket+0x434>
			case 0x00:
			// use reserved packet type to represent beacon packet
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_RESERVE;
    1058:	4a1c      	ldr	r2, [pc, #112]	; (10cc <MiMAC_ReceivedPacket+0x494>)
    105a:	7810      	ldrb	r0, [r2, #0]
    105c:	2303      	movs	r3, #3
    105e:	4303      	orrs	r3, r0
    1060:	7013      	strb	r3, [r2, #0]
			break;
    1062:	e003      	b.n	106c <MiMAC_ReceivedPacket+0x434>
			default: // not support frame type
			MiMAC_DiscardPacket();
    1064:	4b1e      	ldr	r3, [pc, #120]	; (10e0 <MiMAC_ReceivedPacket+0x4a8>)
    1066:	4798      	blx	r3
			return false;
    1068:	2000      	movs	r0, #0
    106a:	e028      	b.n	10be <MiMAC_ReceivedPacket+0x486>
		}
		#ifndef TARGET_SMALL
		MACRxPacket.LQIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 2];
    106c:	4c1a      	ldr	r4, [pc, #104]	; (10d8 <MiMAC_ReceivedPacket+0x4a0>)
    106e:	224e      	movs	r2, #78	; 0x4e
    1070:	0013      	movs	r3, r2
    1072:	434b      	muls	r3, r1
    1074:	5d18      	ldrb	r0, [r3, r4]
    1076:	4915      	ldr	r1, [pc, #84]	; (10cc <MiMAC_ReceivedPacket+0x494>)
    1078:	18e3      	adds	r3, r4, r3
    107a:	181a      	adds	r2, r3, r0
    107c:	3a01      	subs	r2, #1
    107e:	7812      	ldrb	r2, [r2, #0]
    1080:	738a      	strb	r2, [r1, #14]
		MACRxPacket.RSSIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 1];
    1082:	5c1b      	ldrb	r3, [r3, r0]
    1084:	734b      	strb	r3, [r1, #13]
		#endif

		return true;
    1086:	2001      	movs	r0, #1
    1088:	e019      	b.n	10be <MiMAC_ReceivedPacket+0x486>
			MiMAC_DiscardPacket();
			return false;
		}

		#ifdef ENABLE_SECURITY
		if (RxBuffer[BankIndex].Payload[0] & 0x08)
    108a:	4b12      	ldr	r3, [pc, #72]	; (10d4 <MiMAC_ReceivedPacket+0x49c>)
    108c:	781a      	ldrb	r2, [r3, #0]
    108e:	234e      	movs	r3, #78	; 0x4e
    1090:	4353      	muls	r3, r2
    1092:	4a11      	ldr	r2, [pc, #68]	; (10d8 <MiMAC_ReceivedPacket+0x4a0>)
    1094:	18d3      	adds	r3, r2, r3
    1096:	785b      	ldrb	r3, [r3, #1]
    1098:	071b      	lsls	r3, r3, #28
    109a:	d5bf      	bpl.n	101c <MiMAC_ReceivedPacket+0x3e4>
    109c:	e73a      	b.n	f14 <MiMAC_ReceivedPacket+0x2dc>
    109e:	4b0d      	ldr	r3, [pc, #52]	; (10d4 <MiMAC_ReceivedPacket+0x49c>)
    10a0:	781a      	ldrb	r2, [r3, #0]
    10a2:	234e      	movs	r3, #78	; 0x4e
    10a4:	4353      	muls	r3, r2
    10a6:	4a0c      	ldr	r2, [pc, #48]	; (10d8 <MiMAC_ReceivedPacket+0x4a0>)
    10a8:	18d3      	adds	r3, r2, r3
    10aa:	785b      	ldrb	r3, [r3, #1]
    10ac:	071b      	lsls	r3, r3, #28
    10ae:	d500      	bpl.n	10b2 <MiMAC_ReceivedPacket+0x47a>
    10b0:	e733      	b.n	f1a <MiMAC_ReceivedPacket+0x2e2>
    10b2:	e7b3      	b.n	101c <MiMAC_ReceivedPacket+0x3e4>
	BankIndex = 0xFF;
	for (i = 0; i < BANK_SIZE; i++)
	{
		if (RxBuffer[i].PayloadLen > 0)
		{
			BankIndex = i;
    10b4:	2200      	movs	r2, #0
    10b6:	4b07      	ldr	r3, [pc, #28]	; (10d4 <MiMAC_ReceivedPacket+0x49c>)
    10b8:	701a      	strb	r2, [r3, #0]
			failureCounter++;
		}
	}

	BankIndex = 0xFF;
	for (i = 0; i < BANK_SIZE; i++)
    10ba:	2500      	movs	r5, #0
    10bc:	e5eb      	b.n	c96 <MiMAC_ReceivedPacket+0x5e>
		#endif

		return true;
	}
	return false;
}
    10be:	b003      	add	sp, #12
    10c0:	bc0c      	pop	{r2, r3}
    10c2:	4690      	mov	r8, r2
    10c4:	469a      	mov	sl, r3
    10c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10c8:	200004f0 	.word	0x200004f0
    10cc:	200004bc 	.word	0x200004bc
    10d0:	20000388 	.word	0x20000388
    10d4:	20000010 	.word	0x20000010
    10d8:	200002d8 	.word	0x200002d8
    10dc:	00000711 	.word	0x00000711
    10e0:	00000c1d 	.word	0x00000c1d

000010e4 <PHY_PacketReceieved>:

/*************************************************************************//**
*****************************************************************************/
// Handle Packet Received // ISR calls this routine 
void PHY_PacketReceieved(void)
{
    10e4:	b570      	push	{r4, r5, r6, lr}
    10e6:	b082      	sub	sp, #8
		if (PHY_STATE_SLEEP == phyState) {
    10e8:	4b36      	ldr	r3, [pc, #216]	; (11c4 <PHY_PacketReceieved+0xe0>)
    10ea:	781b      	ldrb	r3, [r3, #0]
    10ec:	2b02      	cmp	r3, #2
    10ee:	d066      	beq.n	11be <PHY_PacketReceieved+0xda>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    10f0:	200f      	movs	r0, #15
    10f2:	4b35      	ldr	r3, [pc, #212]	; (11c8 <PHY_PacketReceieved+0xe4>)
    10f4:	4798      	blx	r3
void PHY_PacketReceieved(void)
{
		if (PHY_STATE_SLEEP == phyState) {
			return;
		}
	if (phyReadRegister(RG_IRQ_STATUS) & (1 << TRX_END)) {
    10f6:	0703      	lsls	r3, r0, #28
    10f8:	d561      	bpl.n	11be <PHY_PacketReceieved+0xda>
		if (PHY_STATE_IDLE == phyState) {
    10fa:	4b32      	ldr	r3, [pc, #200]	; (11c4 <PHY_PacketReceieved+0xe0>)
    10fc:	781b      	ldrb	r3, [r3, #0]
    10fe:	2b01      	cmp	r3, #1
    1100:	d141      	bne.n	1186 <PHY_PacketReceieved+0xa2>
			uint8_t size,i,RxBank=0xFF;
			int8_t rssi;

			for (i = 0; i < BANK_SIZE; i++)
			{
				if (RxBuffer[i].PayloadLen == 0)
    1102:	4b32      	ldr	r3, [pc, #200]	; (11cc <PHY_PacketReceieved+0xe8>)
    1104:	781b      	ldrb	r3, [r3, #0]
    1106:	2b00      	cmp	r3, #0
    1108:	d006      	beq.n	1118 <PHY_PacketReceieved+0x34>
    110a:	234e      	movs	r3, #78	; 0x4e
    110c:	4a2f      	ldr	r2, [pc, #188]	; (11cc <PHY_PacketReceieved+0xe8>)
    110e:	5cd3      	ldrb	r3, [r2, r3]
    1110:	2b00      	cmp	r3, #0
    1112:	d003      	beq.n	111c <PHY_PacketReceieved+0x38>
		if (PHY_STATE_SLEEP == phyState) {
			return;
		}
	if (phyReadRegister(RG_IRQ_STATUS) & (1 << TRX_END)) {
		if (PHY_STATE_IDLE == phyState) {
			uint8_t size,i,RxBank=0xFF;
    1114:	24ff      	movs	r4, #255	; 0xff
    1116:	e002      	b.n	111e <PHY_PacketReceieved+0x3a>
			int8_t rssi;

			for (i = 0; i < BANK_SIZE; i++)
			{
				if (RxBuffer[i].PayloadLen == 0)
    1118:	2400      	movs	r4, #0
    111a:	e000      	b.n	111e <PHY_PacketReceieved+0x3a>
    111c:	2401      	movs	r4, #1
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    111e:	2007      	movs	r0, #7
    1120:	4b29      	ldr	r3, [pc, #164]	; (11c8 <PHY_PacketReceieved+0xe4>)
    1122:	4798      	blx	r3
					break;
				}
			}
			rssi = (uint8_t)phyReadRegister(RG_PHY_ED_LEVEL);

			trx_frame_read(&size, 1);
    1124:	466b      	mov	r3, sp
    1126:	1ddd      	adds	r5, r3, #7
    1128:	2101      	movs	r1, #1
    112a:	0028      	movs	r0, r5
    112c:	4e28      	ldr	r6, [pc, #160]	; (11d0 <PHY_PacketReceieved+0xec>)
    112e:	47b0      	blx	r6

			trx_frame_read(phyRxBuffer, size + 2);
    1130:	7829      	ldrb	r1, [r5, #0]
    1132:	3102      	adds	r1, #2
    1134:	b2c9      	uxtb	r1, r1
    1136:	4827      	ldr	r0, [pc, #156]	; (11d4 <PHY_PacketReceieved+0xf0>)
    1138:	47b0      	blx	r6
			RxBuffer[RxBank].PayloadLen = size+2;
    113a:	0021      	movs	r1, r4
    113c:	7828      	ldrb	r0, [r5, #0]
    113e:	1c83      	adds	r3, r0, #2
    1140:	b2db      	uxtb	r3, r3
    1142:	224e      	movs	r2, #78	; 0x4e
    1144:	4354      	muls	r4, r2
    1146:	4a21      	ldr	r2, [pc, #132]	; (11cc <PHY_PacketReceieved+0xe8>)
    1148:	54a3      	strb	r3, [r4, r2]
			if (RxBuffer[RxBank].PayloadLen < RX_PACKET_SIZE)
    114a:	2b4c      	cmp	r3, #76	; 0x4c
    114c:	d813      	bhi.n	1176 <PHY_PacketReceieved+0x92>
			{
				//indicate that data is now stored in the buffer
				trx_status.bits.RX_BUFFERED = 1;
    114e:	4a22      	ldr	r2, [pc, #136]	; (11d8 <PHY_PacketReceieved+0xf4>)
    1150:	7814      	ldrb	r4, [r2, #0]
    1152:	2320      	movs	r3, #32
    1154:	4323      	orrs	r3, r4
    1156:	7013      	strb	r3, [r2, #0]

				//copy all of the data from the FIFO into the TxBuffer, plus RSSI and LQI
				for (i = 1; i <= size+2; i++)
    1158:	3002      	adds	r0, #2
    115a:	2201      	movs	r2, #1
    115c:	2301      	movs	r3, #1
				{
					RxBuffer[RxBank].Payload[i-1] = phyRxBuffer[i];
    115e:	244e      	movs	r4, #78	; 0x4e
    1160:	434c      	muls	r4, r1
    1162:	491a      	ldr	r1, [pc, #104]	; (11cc <PHY_PacketReceieved+0xe8>)
    1164:	190c      	adds	r4, r1, r4
    1166:	4d1b      	ldr	r5, [pc, #108]	; (11d4 <PHY_PacketReceieved+0xf0>)
    1168:	5ca9      	ldrb	r1, [r5, r2]
    116a:	54a1      	strb	r1, [r4, r2]
			{
				//indicate that data is now stored in the buffer
				trx_status.bits.RX_BUFFERED = 1;

				//copy all of the data from the FIFO into the TxBuffer, plus RSSI and LQI
				for (i = 1; i <= size+2; i++)
    116c:	3301      	adds	r3, #1
    116e:	b2db      	uxtb	r3, r3
    1170:	1e1a      	subs	r2, r3, #0
    1172:	4282      	cmp	r2, r0
    1174:	ddf8      	ble.n	1168 <PHY_PacketReceieved+0x84>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1176:	4d14      	ldr	r5, [pc, #80]	; (11c8 <PHY_PacketReceieved+0xe4>)

/*************************************************************************//**
*****************************************************************************/
static void phyWaitState(uint8_t state)
{
	while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK)) {
    1178:	241f      	movs	r4, #31
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    117a:	2001      	movs	r0, #1
    117c:	47a8      	blx	r5

/*************************************************************************//**
*****************************************************************************/
static void phyWaitState(uint8_t state)
{
	while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK)) {
    117e:	4020      	ands	r0, r4
    1180:	2816      	cmp	r0, #22
    1182:	d1fa      	bne.n	117a <PHY_PacketReceieved+0x96>
    1184:	e01b      	b.n	11be <PHY_PacketReceieved+0xda>
					RxBuffer[RxBank].Payload[i-1] = phyRxBuffer[i];
				}
			}

			phyWaitState(TRX_STATUS_RX_AACK_ON);
			} else if (PHY_STATE_TX_WAIT_END == phyState) {
    1186:	2b03      	cmp	r3, #3
    1188:	d119      	bne.n	11be <PHY_PacketReceieved+0xda>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    118a:	2002      	movs	r0, #2
    118c:	4b0e      	ldr	r3, [pc, #56]	; (11c8 <PHY_PacketReceieved+0xe4>)
    118e:	4798      	blx	r3
			phyWaitState(TRX_STATUS_RX_AACK_ON);
			} else if (PHY_STATE_TX_WAIT_END == phyState) {
			uint8_t status
			= (phyReadRegister(RG_TRX_STATE) >>
			TRAC_STATUS) & 7;
			trx_status.bits.TX_FAIL = 0;
    1190:	4b11      	ldr	r3, [pc, #68]	; (11d8 <PHY_PacketReceieved+0xf4>)
    1192:	781a      	ldrb	r2, [r3, #0]
    1194:	2104      	movs	r1, #4
    1196:	438a      	bics	r2, r1
    1198:	701a      	strb	r2, [r3, #0]
			trx_status.bits.TX_PENDING_ACK = 0;
    119a:	781a      	ldrb	r2, [r3, #0]
    119c:	3902      	subs	r1, #2
    119e:	438a      	bics	r2, r1
    11a0:	701a      	strb	r2, [r3, #0]
			if (TRAC_STATUS_SUCCESS == status) {
    11a2:	0940      	lsrs	r0, r0, #5
    11a4:	b2c0      	uxtb	r0, r0
    11a6:	2805      	cmp	r0, #5
    11a8:	d104      	bne.n	11b4 <PHY_PacketReceieved+0xd0>
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
			status) {
			status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
			} else if (TRAC_STATUS_NO_ACK == status) {
			status = PHY_STATUS_NO_ACK;
			trx_status.bits.TX_FAIL = 1;
    11aa:	001a      	movs	r2, r3
    11ac:	7819      	ldrb	r1, [r3, #0]
    11ae:	2304      	movs	r3, #4
    11b0:	430b      	orrs	r3, r1
    11b2:	7013      	strb	r3, [r2, #0]
			} else {
			status = PHY_STATUS_ERROR;
			}

			phySetRxState();
    11b4:	4b09      	ldr	r3, [pc, #36]	; (11dc <PHY_PacketReceieved+0xf8>)
    11b6:	4798      	blx	r3
			phyState = PHY_STATE_IDLE;
    11b8:	2201      	movs	r2, #1
    11ba:	4b02      	ldr	r3, [pc, #8]	; (11c4 <PHY_PacketReceieved+0xe0>)
    11bc:	701a      	strb	r2, [r3, #0]
			}
	}
    11be:	b002      	add	sp, #8
    11c0:	bd70      	pop	{r4, r5, r6, pc}
    11c2:	46c0      	nop			; (mov r8, r8)
    11c4:	2000012c 	.word	0x2000012c
    11c8:	000047b5 	.word	0x000047b5
    11cc:	200002d8 	.word	0x200002d8
    11d0:	000049b1 	.word	0x000049b1
    11d4:	200000ac 	.word	0x200000ac
    11d8:	20000390 	.word	0x20000390
    11dc:	000002a1 	.word	0x000002a1

000011e0 <Total_Connections>:
    uint8_t myLongAddress[MY_ADDRESS_LENGTH] = {EUI_0,EUI_1};
#endif

// Evaluate Total No of Peer Connection on a Node
uint8_t Total_Connections(void)
{
    11e0:	b510      	push	{r4, lr}
    11e2:	4b0a      	ldr	r3, [pc, #40]	; (120c <Total_Connections+0x2c>)
    11e4:	001c      	movs	r4, r3
    11e6:	3419      	adds	r4, #25
    11e8:	34ff      	adds	r4, #255	; 0xff
    uint8_t count=0 , i;
    11ea:	2000      	movs	r0, #0
    for (i=0;i<CONNECTION_SIZE;i++)
    {
    #if defined(PROTOCOL_STAR)
        if (ConnectionTable[i].Address[0] != 0x00 || ConnectionTable[i].Address[1] != 0x00 || ConnectionTable[i].Address[2] != 0x00)
    11ec:	781a      	ldrb	r2, [r3, #0]
    11ee:	2a00      	cmp	r2, #0
    11f0:	d105      	bne.n	11fe <Total_Connections+0x1e>
    11f2:	785a      	ldrb	r2, [r3, #1]
    11f4:	2a00      	cmp	r2, #0
    11f6:	d102      	bne.n	11fe <Total_Connections+0x1e>
    11f8:	789a      	ldrb	r2, [r3, #2]
    11fa:	2a00      	cmp	r2, #0
    11fc:	d001      	beq.n	1202 <Total_Connections+0x22>
        {
            count++;
    11fe:	3001      	adds	r0, #1
    1200:	b2c0      	uxtb	r0, r0
    1202:	330e      	adds	r3, #14

// Evaluate Total No of Peer Connection on a Node
uint8_t Total_Connections(void)
{
    uint8_t count=0 , i;
    for (i=0;i<CONNECTION_SIZE;i++)
    1204:	42a3      	cmp	r3, r4
    1206:	d1f1      	bne.n	11ec <Total_Connections+0xc>
            count++;
        }
    #endif      
    }
    return count;
}
    1208:	bd10      	pop	{r4, pc}
    120a:	46c0      	nop			; (mov r8, r8)
    120c:	200003a0 	.word	0x200003a0

00001210 <Find_Index>:
    // All connections (FFD || RFD)are stored in Connection Table of PAN CO
    // Each Connection is identified by its index no.
    // In case of Data TX , EDx --> PAN CO --> EDy
    // PAN CO will forward the data to EDy , In order to know 
    uint8_t Find_Index (uint8_t *DestAddr)
    {
    1210:	b5f0      	push	{r4, r5, r6, r7, lr}
    1212:	b083      	sub	sp, #12
    1214:	0006      	movs	r6, r0
        uint8_t i;
        uint8_t return_val;
        for (i=0;i<conn_size;i++)
    1216:	4b16      	ldr	r3, [pc, #88]	; (1270 <Find_Index+0x60>)
    1218:	781c      	ldrb	r4, [r3, #0]
    121a:	2c00      	cmp	r4, #0
    121c:	d024      	beq.n	1268 <Find_Index+0x58>
    121e:	4915      	ldr	r1, [pc, #84]	; (1274 <Find_Index+0x64>)
    1220:	2200      	movs	r2, #0
    1222:	2000      	movs	r0, #0
        {
            if (ConnectionTable[i].status.bits.isValid)
    1224:	4d14      	ldr	r5, [pc, #80]	; (1278 <Find_Index+0x68>)
    1226:	00d3      	lsls	r3, r2, #3
    1228:	1a9b      	subs	r3, r3, r2
    122a:	005b      	lsls	r3, r3, #1
    122c:	18eb      	adds	r3, r5, r3
    122e:	7b1b      	ldrb	r3, [r3, #12]
    1230:	09db      	lsrs	r3, r3, #7
    1232:	d00d      	beq.n	1250 <Find_Index+0x40>
    1234:	9101      	str	r1, [sp, #4]
            {
                if (DestAddr[1] == ConnectionTable[i].Address[0] && DestAddr[2] == ConnectionTable[i].Address[1] && DestAddr[3] == ConnectionTable[i].Address[2] )
    1236:	7877      	ldrb	r7, [r6, #1]
    1238:	780b      	ldrb	r3, [r1, #0]
    123a:	429f      	cmp	r7, r3
    123c:	d108      	bne.n	1250 <Find_Index+0x40>
    123e:	78b7      	ldrb	r7, [r6, #2]
    1240:	784b      	ldrb	r3, [r1, #1]
    1242:	429f      	cmp	r7, r3
    1244:	d104      	bne.n	1250 <Find_Index+0x40>
    1246:	78f3      	ldrb	r3, [r6, #3]
    1248:	469c      	mov	ip, r3
    124a:	788b      	ldrb	r3, [r1, #2]
    124c:	459c      	cmp	ip, r3
    124e:	d007      	beq.n	1260 <Find_Index+0x50>
    // PAN CO will forward the data to EDy , In order to know 
    uint8_t Find_Index (uint8_t *DestAddr)
    {
        uint8_t i;
        uint8_t return_val;
        for (i=0;i<conn_size;i++)
    1250:	3001      	adds	r0, #1
    1252:	b2c0      	uxtb	r0, r0
    1254:	3201      	adds	r2, #1
    1256:	310e      	adds	r1, #14
    1258:	42a0      	cmp	r0, r4
    125a:	d1e4      	bne.n	1226 <Find_Index+0x16>
                
            }
        }
        if (i==conn_size)
            {
                return_val = 0xff;
    125c:	20ff      	movs	r0, #255	; 0xff
    125e:	e004      	b.n	126a <Find_Index+0x5a>
                    break;
                }
                
            }
        }
        if (i==conn_size)
    1260:	4284      	cmp	r4, r0
    1262:	d102      	bne.n	126a <Find_Index+0x5a>
            {
                return_val = 0xff;
    1264:	20ff      	movs	r0, #255	; 0xff
    1266:	e000      	b.n	126a <Find_Index+0x5a>
    1268:	20ff      	movs	r0, #255	; 0xff
            }
        return return_val;
    }
    126a:	b003      	add	sp, #12
    126c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    126e:	46c0      	nop			; (mov r8, r8)
    1270:	200004ed 	.word	0x200004ed
    1274:	200003a0 	.word	0x200003a0
    1278:	2000039c 	.word	0x2000039c

0000127c <handle_lost_connection>:
     
    
    void handle_lost_connection(void)
    {
    127c:	b5f0      	push	{r4, r5, r6, r7, lr}
        uint8_t i ;
        bool stat = false;
        if (role == EndDevice)
    127e:	4b12      	ldr	r3, [pc, #72]	; (12c8 <handle_lost_connection+0x4c>)
    1280:	781b      	ldrb	r3, [r3, #0]
    1282:	2b01      	cmp	r3, #1
    1284:	d11f      	bne.n	12c6 <handle_lost_connection+0x4a>
        {
            for (i=0;i<end_nodes+1;i++)
    1286:	4b11      	ldr	r3, [pc, #68]	; (12cc <handle_lost_connection+0x50>)
    1288:	781d      	ldrb	r5, [r3, #0]
    128a:	3501      	adds	r5, #1
            {
                if (myLongAddress[0] == END_DEVICES_Short_Address[i].Address[0] && myLongAddress[1] == END_DEVICES_Short_Address[i].Address[1])
    128c:	4b10      	ldr	r3, [pc, #64]	; (12d0 <handle_lost_connection+0x54>)
    128e:	781f      	ldrb	r7, [r3, #0]
    1290:	7858      	ldrb	r0, [r3, #1]
    1292:	2200      	movs	r2, #0
    1294:	2400      	movs	r4, #0
    1296:	2300      	movs	r3, #0
    1298:	4e0e      	ldr	r6, [pc, #56]	; (12d4 <handle_lost_connection+0x58>)
    129a:	0091      	lsls	r1, r2, #2
    129c:	5d89      	ldrb	r1, [r1, r6]
    129e:	42b9      	cmp	r1, r7
    12a0:	d107      	bne.n	12b2 <handle_lost_connection+0x36>
    12a2:	0092      	lsls	r2, r2, #2
    12a4:	490b      	ldr	r1, [pc, #44]	; (12d4 <handle_lost_connection+0x58>)
    12a6:	468c      	mov	ip, r1
    12a8:	4462      	add	r2, ip
    12aa:	7852      	ldrb	r2, [r2, #1]
    12ac:	4282      	cmp	r2, r0
    12ae:	d100      	bne.n	12b2 <handle_lost_connection+0x36>
                {
                    stat = true;
    12b0:	2401      	movs	r4, #1
    {
        uint8_t i ;
        bool stat = false;
        if (role == EndDevice)
        {
            for (i=0;i<end_nodes+1;i++)
    12b2:	3301      	adds	r3, #1
    12b4:	b2db      	uxtb	r3, r3
    12b6:	1e1a      	subs	r2, r3, #0
    12b8:	42aa      	cmp	r2, r5
    12ba:	dbee      	blt.n	129a <handle_lost_connection+0x1e>
                if (myLongAddress[0] == END_DEVICES_Short_Address[i].Address[0] && myLongAddress[1] == END_DEVICES_Short_Address[i].Address[1])
                {
                    stat = true;
                }
            }
            if (!stat)
    12bc:	2c00      	cmp	r4, #0
    12be:	d102      	bne.n	12c6 <handle_lost_connection+0x4a>
            {
                lost_connection = true;
    12c0:	2201      	movs	r2, #1
    12c2:	4b05      	ldr	r3, [pc, #20]	; (12d8 <handle_lost_connection+0x5c>)
    12c4:	701a      	strb	r2, [r3, #0]
            }
        }
        
    }
    12c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12c8:	20000598 	.word	0x20000598
    12cc:	20000132 	.word	0x20000132
    12d0:	20000014 	.word	0x20000014
    12d4:	20000548 	.word	0x20000548
    12d8:	20000133 	.word	0x20000133

000012dc <store_connection_tb>:
     
    // Function to store the Connection Table Information which is Broadcasted by PAN CO
    // Used by END_DEVICES (FFD || RFD) only
    void store_connection_tb(uint8_t *payload)
    { 
    12dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    12de:	1d02      	adds	r2, r0, #4
        uint8_t i , j ;
        for (i=4; i < RX_BUFFER_SIZE; i++)
    12e0:	2304      	movs	r3, #4
        {
            if (i % 4 == 0 && (i+3) < RX_BUFFER_SIZE)
    12e2:	2603      	movs	r6, #3
    12e4:	1a30      	subs	r0, r6, r0
            {
                j = payload[i+3];
                END_DEVICES_Short_Address[j].connection_slot = j;
    12e6:	4f0c      	ldr	r7, [pc, #48]	; (1318 <store_connection_tb+0x3c>)
    void store_connection_tb(uint8_t *payload)
    { 
        uint8_t i , j ;
        for (i=4; i < RX_BUFFER_SIZE; i++)
        {
            if (i % 4 == 0 && (i+3) < RX_BUFFER_SIZE)
    12e8:	421e      	tst	r6, r3
    12ea:	d10c      	bne.n	1306 <store_connection_tb+0x2a>
    12ec:	1881      	adds	r1, r0, r2
    12ee:	2927      	cmp	r1, #39	; 0x27
    12f0:	dc09      	bgt.n	1306 <store_connection_tb+0x2a>
            {
                j = payload[i+3];
    12f2:	78d5      	ldrb	r5, [r2, #3]
                END_DEVICES_Short_Address[j].connection_slot = j;
    12f4:	00ac      	lsls	r4, r5, #2
    12f6:	1939      	adds	r1, r7, r4
    12f8:	70cd      	strb	r5, [r1, #3]
                END_DEVICES_Short_Address[j].Address[0] = payload[i];
    12fa:	7815      	ldrb	r5, [r2, #0]
    12fc:	55e5      	strb	r5, [r4, r7]
                END_DEVICES_Short_Address[j].Address[1] = payload[i+1];
    12fe:	7854      	ldrb	r4, [r2, #1]
    1300:	704c      	strb	r4, [r1, #1]
                END_DEVICES_Short_Address[j].Address[2] = payload[i+2];
    1302:	7894      	ldrb	r4, [r2, #2]
    1304:	708c      	strb	r4, [r1, #2]
    // Function to store the Connection Table Information which is Broadcasted by PAN CO
    // Used by END_DEVICES (FFD || RFD) only
    void store_connection_tb(uint8_t *payload)
    { 
        uint8_t i , j ;
        for (i=4; i < RX_BUFFER_SIZE; i++)
    1306:	3301      	adds	r3, #1
    1308:	b2db      	uxtb	r3, r3
    130a:	3201      	adds	r2, #1
    130c:	2b28      	cmp	r3, #40	; 0x28
    130e:	d1eb      	bne.n	12e8 <store_connection_tb+0xc>
                
            }
            
            
        }
        handle_lost_connection();
    1310:	4b02      	ldr	r3, [pc, #8]	; (131c <store_connection_tb+0x40>)
    1312:	4798      	blx	r3
        
      
    }
    1314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1316:	46c0      	nop			; (mov r8, r8)
    1318:	20000548 	.word	0x20000548
    131c:	0000127d 	.word	0x0000127d

00001320 <SendPacket>:
    bool SendPacket(INPUT bool Broadcast,
                    INPUT uint8_t *DestinationAddress,
                    INPUT bool isCommand,
                    INPUT bool SecurityEnabled)
#endif                                        
{ 
    1320:	b5f0      	push	{r4, r5, r6, r7, lr}
    1322:	464f      	mov	r7, r9
    1324:	4646      	mov	r6, r8
    1326:	b4c0      	push	{r6, r7}
    1328:	b089      	sub	sp, #36	; 0x24
    132a:	9203      	str	r2, [sp, #12]
    132c:	ac10      	add	r4, sp, #64	; 0x40
    132e:	7827      	ldrb	r7, [r4, #0]
    MAC_TRANS_PARAM tParam;
    bool status;

    tParam.flags.Val = 0;
    1330:	ad05      	add	r5, sp, #20
    1332:	2400      	movs	r4, #0
    1334:	46a0      	mov	r8, r4
    tParam.flags.bits.packetType = (isCommand) ? PACKET_TYPE_COMMAND : PACKET_TYPE_DATA;
    tParam.flags.bits.ackReq = (Broadcast) ? 0 : 1;
    1336:	3401      	adds	r4, #1
    1338:	4044      	eors	r4, r0
    133a:	2601      	movs	r6, #1
    133c:	46b1      	mov	r9, r6
    133e:	4034      	ands	r4, r6
    1340:	0162      	lsls	r2, r4, #5
    1342:	3602      	adds	r6, #2
    1344:	401e      	ands	r6, r3
    tParam.flags.bits.broadcast = Broadcast;
    1346:	464b      	mov	r3, r9
    1348:	4003      	ands	r3, r0
    134a:	009b      	lsls	r3, r3, #2
    134c:	4332      	orrs	r2, r6
    tParam.flags.bits.secEn = SecurityEnabled;
    134e:	464e      	mov	r6, r9
    1350:	4037      	ands	r7, r6
    1352:	00ff      	lsls	r7, r7, #3
    1354:	4313      	orrs	r3, r2
    #if defined(IEEE_802_15_4)
        tParam.altSrcAddr = 0;
    1356:	4646      	mov	r6, r8
    1358:	726e      	strb	r6, [r5, #9]
        tParam.altDestAddr = (Broadcast) ? true : false;
    135a:	7228      	strb	r0, [r5, #8]
    #endif
    
    #if defined(INFER_DEST_ADDRESS)
        tParam.flags.bits.destPrsnt = 0;
    #else
        tParam.flags.bits.destPrsnt = (Broadcast) ? 0:1;
    135c:	01a0      	lsls	r0, r4, #6
    135e:	433b      	orrs	r3, r7
    1360:	001c      	movs	r4, r3
        else
        {
            tParam.flags.bits.sourcePrsnt = 0;
        }
    #else
        tParam.flags.bits.sourcePrsnt = 1;
    1362:	4304      	orrs	r4, r0
    1364:	2380      	movs	r3, #128	; 0x80
    1366:	425b      	negs	r3, r3
    1368:	431c      	orrs	r4, r3
    136a:	702c      	strb	r4, [r5, #0]
    #endif
    
    tParam.DestAddress = DestinationAddress;

    #if defined(IEEE_802_15_4)
        tParam.DestPANID.Val = DestinationPANID.Val;
    136c:	8169      	strh	r1, [r5, #10]
    #endif

    status = MiMAC_SendPacket(tParam, TxBuffer, TxData); 
    136e:	4c07      	ldr	r4, [pc, #28]	; (138c <SendPacket+0x6c>)
    1370:	7823      	ldrb	r3, [r4, #0]
    1372:	9300      	str	r3, [sp, #0]
    1374:	4b06      	ldr	r3, [pc, #24]	; (1390 <SendPacket+0x70>)
    1376:	9805      	ldr	r0, [sp, #20]
    1378:	9903      	ldr	r1, [sp, #12]
    137a:	9a07      	ldr	r2, [sp, #28]
    137c:	4d05      	ldr	r5, [pc, #20]	; (1394 <SendPacket+0x74>)
    137e:	47a8      	blx	r5
    TxData = 0;
    1380:	7026      	strb	r6, [r4, #0]
    
    return status;
}
    1382:	b009      	add	sp, #36	; 0x24
    1384:	bc0c      	pop	{r2, r3}
    1386:	4690      	mov	r8, r2
    1388:	4699      	mov	r9, r3
    138a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    138c:	20000545 	.word	0x20000545
    1390:	200005a0 	.word	0x200005a0
    1394:	00000871 	.word	0x00000871

00001398 <MiApp_BroadcastPacket>:
 * Remarks:    
 *      None
 *
 *****************************************************************************************/ 
bool MiApp_BroadcastPacket( INPUT bool SecEn )
{
    1398:	b510      	push	{r4, lr}
    139a:	b082      	sub	sp, #8
            return true;
        }    
    #endif
    
    #if defined(IEEE_802_15_4)
        return SendPacket(true, myPANID, NULL, false, SecEn);
    139c:	4b04      	ldr	r3, [pc, #16]	; (13b0 <MiApp_BroadcastPacket+0x18>)
    139e:	8819      	ldrh	r1, [r3, #0]
    13a0:	9000      	str	r0, [sp, #0]
    13a2:	2300      	movs	r3, #0
    13a4:	2200      	movs	r2, #0
    13a6:	2001      	movs	r0, #1
    13a8:	4c02      	ldr	r4, [pc, #8]	; (13b4 <MiApp_BroadcastPacket+0x1c>)
    13aa:	47a0      	blx	r4
    #else
        return SendPacket(true, NULL, false, SecEn);
    #endif
}
    13ac:	b002      	add	sp, #8
    13ae:	bd10      	pop	{r4, pc}
    13b0:	200004d4 	.word	0x200004d4
    13b4:	00001321 	.word	0x00001321

000013b8 <MiApp_UnicastAddress>:
 *
 *****************************************************************************************/    
bool MiApp_UnicastAddress(INPUT uint8_t *DestinationAddress,
                    INPUT bool PermanentAddr,
                    INPUT bool SecEn)
{
    13b8:	b510      	push	{r4, lr}
    13ba:	b082      	sub	sp, #8
            return true;
        }    
    #endif
    
    #if defined(IEEE_802_15_4)
        return SendPacket(false, myPANID, DestinationAddress, false, SecEn);
    13bc:	4b04      	ldr	r3, [pc, #16]	; (13d0 <MiApp_UnicastAddress+0x18>)
    13be:	8819      	ldrh	r1, [r3, #0]
    13c0:	9200      	str	r2, [sp, #0]
    13c2:	2300      	movs	r3, #0
    13c4:	0002      	movs	r2, r0
    13c6:	2000      	movs	r0, #0
    13c8:	4c02      	ldr	r4, [pc, #8]	; (13d4 <MiApp_UnicastAddress+0x1c>)
    13ca:	47a0      	blx	r4
    #else
        return SendPacket(false, DestinationAddress, false, SecEn);
    #endif
}
    13cc:	b002      	add	sp, #8
    13ce:	bd10      	pop	{r4, pc}
    13d0:	200004d4 	.word	0x200004d4
    13d4:	00001321 	.word	0x00001321

000013d8 <MiApp_UnicastConnection>:
 *      None
 *
 *****************************************************************************************/  
bool MiApp_UnicastConnection( INPUT uint8_t ConnectionIndex,
                        INPUT bool SecEn)
{
    13d8:	b510      	push	{r4, lr}
    if( ConnectionTable[ConnectionIndex].status.bits.isValid )
    13da:	00c3      	lsls	r3, r0, #3
    13dc:	1a1b      	subs	r3, r3, r0
    13de:	005b      	lsls	r3, r3, #1
    13e0:	4a09      	ldr	r2, [pc, #36]	; (1408 <MiApp_UnicastConnection+0x30>)
    13e2:	18d3      	adds	r3, r2, r3
    13e4:	7b1b      	ldrb	r3, [r3, #12]
    13e6:	09db      	lsrs	r3, r3, #7
            }    
        #endif
        
        return MiApp_UnicastAddress(ConnectionTable[ConnectionIndex].Address, true, SecEn);
    }
    return false;
    13e8:	2200      	movs	r2, #0
 *
 *****************************************************************************************/  
bool MiApp_UnicastConnection( INPUT uint8_t ConnectionIndex,
                        INPUT bool SecEn)
{
    if( ConnectionTable[ConnectionIndex].status.bits.isValid )
    13ea:	2b00      	cmp	r3, #0
    13ec:	d00a      	beq.n	1404 <MiApp_UnicastConnection+0x2c>
                P2PStatus.bits.Enhanced_DR_SecEn = SecEn;
                return true;
            }    
        #endif
        
        return MiApp_UnicastAddress(ConnectionTable[ConnectionIndex].Address, true, SecEn);
    13ee:	00c3      	lsls	r3, r0, #3
    13f0:	1a18      	subs	r0, r3, r0
    13f2:	0040      	lsls	r0, r0, #1
    13f4:	4b04      	ldr	r3, [pc, #16]	; (1408 <MiApp_UnicastConnection+0x30>)
    13f6:	18c0      	adds	r0, r0, r3
    13f8:	3004      	adds	r0, #4
    13fa:	000a      	movs	r2, r1
    13fc:	2101      	movs	r1, #1
    13fe:	4b03      	ldr	r3, [pc, #12]	; (140c <MiApp_UnicastConnection+0x34>)
    1400:	4798      	blx	r3
    1402:	0002      	movs	r2, r0
    }
    return false;
}
    1404:	0010      	movs	r0, r2
    1406:	bd10      	pop	{r4, pc}
    1408:	2000039c 	.word	0x2000039c
    140c:	000013b9 	.word	0x000013b9

00001410 <Forward_Packet_PANCr_to_EDy>:
    


    /// This function will only be called by Pan co ordinator to forward the packet to the destination end device
    bool Forward_Packet_PANCr_to_EDy(uint8_t *fw_payload ,uint8_t index , uint8_t *EDxAddress)
    {
    1410:	b570      	push	{r4, r5, r6, lr}
    1412:	000d      	movs	r5, r1
        uint8_t i;
        bool status;
        MiApp_FlushTx();
        MiApp_WriteData(EDxAddress[0]);    // Unique address of EDy (DEST ED) 
    1414:	490d      	ldr	r1, [pc, #52]	; (144c <Forward_Packet_PANCr_to_EDy+0x3c>)
    1416:	2301      	movs	r3, #1
    1418:	700b      	strb	r3, [r1, #0]
    141a:	7814      	ldrb	r4, [r2, #0]
    141c:	4b0c      	ldr	r3, [pc, #48]	; (1450 <Forward_Packet_PANCr_to_EDy+0x40>)
    141e:	701c      	strb	r4, [r3, #0]
        MiApp_WriteData(EDxAddress[1]);    // Unique address of EDy (DEST ED) 
    1420:	7854      	ldrb	r4, [r2, #1]
    1422:	705c      	strb	r4, [r3, #1]
        MiApp_WriteData(EDxAddress[2]);    // Unique address of EDy (DEST ED) 
    1424:	2403      	movs	r4, #3
    1426:	700c      	strb	r4, [r1, #0]
    1428:	7892      	ldrb	r2, [r2, #2]
    142a:	709a      	strb	r2, [r3, #2]
    142c:	1cc3      	adds	r3, r0, #3
    142e:	3028      	adds	r0, #40	; 0x28
        for(i = 3; i < TX_BUFFER_SIZE; i++)
        {
            MiApp_WriteData(fw_payload[i]);
    1430:	4e07      	ldr	r6, [pc, #28]	; (1450 <Forward_Packet_PANCr_to_EDy+0x40>)
    1432:	780a      	ldrb	r2, [r1, #0]
    1434:	1c54      	adds	r4, r2, #1
    1436:	700c      	strb	r4, [r1, #0]
    1438:	781c      	ldrb	r4, [r3, #0]
    143a:	54b4      	strb	r4, [r6, r2]
    143c:	3301      	adds	r3, #1
        bool status;
        MiApp_FlushTx();
        MiApp_WriteData(EDxAddress[0]);    // Unique address of EDy (DEST ED) 
        MiApp_WriteData(EDxAddress[1]);    // Unique address of EDy (DEST ED) 
        MiApp_WriteData(EDxAddress[2]);    // Unique address of EDy (DEST ED) 
        for(i = 3; i < TX_BUFFER_SIZE; i++)
    143e:	4283      	cmp	r3, r0
    1440:	d1f7      	bne.n	1432 <Forward_Packet_PANCr_to_EDy+0x22>
        {
            MiApp_WriteData(fw_payload[i]);
        }
        #if defined(ENABLE_SECURITY)
                status = MiApp_UnicastConnection (index,true) ;
    1442:	2101      	movs	r1, #1
    1444:	0028      	movs	r0, r5
    1446:	4b03      	ldr	r3, [pc, #12]	; (1454 <Forward_Packet_PANCr_to_EDy+0x44>)
    1448:	4798      	blx	r3
                status = MiApp_UnicastConnection (index,false) ;
        #endif
        
        return status;
                    
    }
    144a:	bd70      	pop	{r4, r5, r6, pc}
    144c:	20000545 	.word	0x20000545
    1450:	200005a0 	.word	0x200005a0
    1454:	000013d9 	.word	0x000013d9

00001458 <MiApp_BroadcastConnectionTable>:
    * Remarks:    
    *      None
    *
    *****************************************************************************************/    
    void MiApp_BroadcastConnectionTable(void)
    {
    1458:	b5f0      	push	{r4, r5, r6, r7, lr}
    145a:	465f      	mov	r7, fp
    145c:	4656      	mov	r6, sl
    145e:	464d      	mov	r5, r9
    1460:	4644      	mov	r4, r8
    1462:	b4f0      	push	{r4, r5, r6, r7}
    1464:	b089      	sub	sp, #36	; 0x24
        uint8_t i,j , k , count;
        // Based on Connection Size in Network braodcast the connection details Multiple Times 
        // so that all the END_DEVICES in Star Network Receive the packet 
        uint8_t broadcast_count = 0;

        if ((conn_size  * 4 ) + 4 < TX_BUFFER_SIZE)
    1466:	4b68      	ldr	r3, [pc, #416]	; (1608 <MiApp_BroadcastConnectionTable+0x1b0>)
    1468:	781c      	ldrb	r4, [r3, #0]
    146a:	3401      	adds	r4, #1
    146c:	00a4      	lsls	r4, r4, #2
    146e:	2c27      	cmp	r4, #39	; 0x27
    1470:	dd14      	ble.n	149c <MiApp_BroadcastConnectionTable+0x44>
        {
            broadcast_count = 1;
        }
        else
        {
            broadcast_count = ((conn_size * 4) + 4 )/ TX_BUFFER_SIZE;
    1472:	2128      	movs	r1, #40	; 0x28
    1474:	0020      	movs	r0, r4
    1476:	4b65      	ldr	r3, [pc, #404]	; (160c <MiApp_BroadcastConnectionTable+0x1b4>)
    1478:	4798      	blx	r3
    147a:	b2c3      	uxtb	r3, r0
    147c:	001d      	movs	r5, r3
    147e:	9306      	str	r3, [sp, #24]
            if ((conn_size *4) + 4 % TX_BUFFER_SIZE != 0)
    1480:	2c00      	cmp	r4, #0
    1482:	d007      	beq.n	1494 <MiApp_BroadcastConnectionTable+0x3c>
            {
                broadcast_count = broadcast_count + ((conn_size *4) + 4 )% TX_BUFFER_SIZE;
    1484:	2128      	movs	r1, #40	; 0x28
    1486:	0020      	movs	r0, r4
    1488:	4b61      	ldr	r3, [pc, #388]	; (1610 <MiApp_BroadcastConnectionTable+0x1b8>)
    148a:	4798      	blx	r3
    148c:	46ac      	mov	ip, r5
    148e:	4461      	add	r1, ip
    1490:	b2cb      	uxtb	r3, r1
    1492:	9306      	str	r3, [sp, #24]
            }
            
        }
        
        for (i = 0 ; i < broadcast_count ; i++)
    1494:	9b06      	ldr	r3, [sp, #24]
    1496:	2b00      	cmp	r3, #0
    1498:	d102      	bne.n	14a0 <MiApp_BroadcastConnectionTable+0x48>
    149a:	e0ad      	b.n	15f8 <MiApp_BroadcastConnectionTable+0x1a0>
        // so that all the END_DEVICES in Star Network Receive the packet 
        uint8_t broadcast_count = 0;

        if ((conn_size  * 4 ) + 4 < TX_BUFFER_SIZE)
        {
            broadcast_count = 1;
    149c:	2301      	movs	r3, #1
    149e:	9306      	str	r3, [sp, #24]
    14a0:	2309      	movs	r3, #9
    14a2:	9304      	str	r3, [sp, #16]
    14a4:	2300      	movs	r3, #0
    14a6:	469a      	mov	sl, r3
        {
            MiApp_FlushTx();
            MiApp_WriteData(CMD_SHARE_CONNECTION_TABLE);
            MiApp_WriteData(conn_size); // No of end devices in network
            MiApp_WriteData(((TX_BUFFER_SIZE-4)/4)*i);
            MiApp_WriteData(((TX_BUFFER_SIZE-4)/4)*(i+1));
    14a8:	2304      	movs	r3, #4
    14aa:	466a      	mov	r2, sp
    14ac:	77d3      	strb	r3, [r2, #31]
                        MiApp_WriteData(0xff);
                        MiApp_WriteData(0xff);
                        MiApp_WriteData(0xff);
                        MiApp_WriteData(j);             
                    }
                    count = count + 4;
    14ae:	4653      	mov	r3, sl
    14b0:	9305      	str	r3, [sp, #20]
        }
        
        for (i = 0 ; i < broadcast_count ; i++)
        {
            MiApp_FlushTx();
            MiApp_WriteData(CMD_SHARE_CONNECTION_TABLE);
    14b2:	4b58      	ldr	r3, [pc, #352]	; (1614 <MiApp_BroadcastConnectionTable+0x1bc>)
    14b4:	2277      	movs	r2, #119	; 0x77
    14b6:	701a      	strb	r2, [r3, #0]
            MiApp_WriteData(conn_size); // No of end devices in network
    14b8:	4b53      	ldr	r3, [pc, #332]	; (1608 <MiApp_BroadcastConnectionTable+0x1b0>)
    14ba:	781e      	ldrb	r6, [r3, #0]
    14bc:	4b55      	ldr	r3, [pc, #340]	; (1614 <MiApp_BroadcastConnectionTable+0x1bc>)
    14be:	705e      	strb	r6, [r3, #1]
            MiApp_WriteData(((TX_BUFFER_SIZE-4)/4)*i);
    14c0:	9a05      	ldr	r2, [sp, #20]
    14c2:	00d3      	lsls	r3, r2, #3
    14c4:	4694      	mov	ip, r2
    14c6:	4463      	add	r3, ip
    14c8:	b2db      	uxtb	r3, r3
    14ca:	4a52      	ldr	r2, [pc, #328]	; (1614 <MiApp_BroadcastConnectionTable+0x1bc>)
    14cc:	7093      	strb	r3, [r2, #2]
            MiApp_WriteData(((TX_BUFFER_SIZE-4)/4)*(i+1));
    14ce:	4a52      	ldr	r2, [pc, #328]	; (1618 <MiApp_BroadcastConnectionTable+0x1c0>)
    14d0:	4669      	mov	r1, sp
    14d2:	7fc9      	ldrb	r1, [r1, #31]
    14d4:	7011      	strb	r1, [r2, #0]
    14d6:	4a4f      	ldr	r2, [pc, #316]	; (1614 <MiApp_BroadcastConnectionTable+0x1bc>)
    14d8:	9804      	ldr	r0, [sp, #16]
    14da:	70d0      	strb	r0, [r2, #3]
            count = 4;
            for (j= ((TX_BUFFER_SIZE-4)/4)*i ;j<((TX_BUFFER_SIZE-4)/4)*(i+1);j++)
    14dc:	1e1a      	subs	r2, r3, #0
    14de:	4684      	mov	ip, r0
    14e0:	4282      	cmp	r2, r0
    14e2:	da63      	bge.n	15ac <MiApp_BroadcastConnectionTable+0x154>
    14e4:	2400      	movs	r4, #0
    14e6:	2104      	movs	r1, #4
    14e8:	2004      	movs	r0, #4
            {
                if (j < conn_size)
                {
                    if (ConnectionTable[j].status.bits.isValid)
    14ea:	4d4c      	ldr	r5, [pc, #304]	; (161c <MiApp_BroadcastConnectionTable+0x1c4>)
    14ec:	46a8      	mov	r8, r5
                    }

                    else
                    {

                        MiApp_WriteData(0xff);
    14ee:	4d49      	ldr	r5, [pc, #292]	; (1614 <MiApp_BroadcastConnectionTable+0x1bc>)
    14f0:	46a9      	mov	r9, r5
    14f2:	25ff      	movs	r5, #255	; 0xff
    14f4:	46aa      	mov	sl, r5
                if (j < conn_size)
                {
                    if (ConnectionTable[j].status.bits.isValid)
                    {

                        MiApp_WriteData(ConnectionTable[j].Address[0]);
    14f6:	4665      	mov	r5, ip
    14f8:	9502      	str	r5, [sp, #8]
            MiApp_WriteData(((TX_BUFFER_SIZE-4)/4)*i);
            MiApp_WriteData(((TX_BUFFER_SIZE-4)/4)*(i+1));
            count = 4;
            for (j= ((TX_BUFFER_SIZE-4)/4)*i ;j<((TX_BUFFER_SIZE-4)/4)*(i+1);j++)
            {
                if (j < conn_size)
    14fa:	429e      	cmp	r6, r3
    14fc:	d949      	bls.n	1592 <MiApp_BroadcastConnectionTable+0x13a>
                {
                    if (ConnectionTable[j].status.bits.isValid)
    14fe:	00d4      	lsls	r4, r2, #3
    1500:	1aa4      	subs	r4, r4, r2
    1502:	0064      	lsls	r4, r4, #1
    1504:	4444      	add	r4, r8
    1506:	7b24      	ldrb	r4, [r4, #12]
    1508:	09e4      	lsrs	r4, r4, #7
    150a:	d02b      	beq.n	1564 <MiApp_BroadcastConnectionTable+0x10c>
                    {

                        MiApp_WriteData(ConnectionTable[j].Address[0]);
    150c:	00d4      	lsls	r4, r2, #3
    150e:	9403      	str	r4, [sp, #12]
    1510:	1aa7      	subs	r7, r4, r2
    1512:	007f      	lsls	r7, r7, #1
    1514:	46bc      	mov	ip, r7
    1516:	4f41      	ldr	r7, [pc, #260]	; (161c <MiApp_BroadcastConnectionTable+0x1c4>)
    1518:	46bb      	mov	fp, r7
    151a:	44dc      	add	ip, fp
    151c:	4667      	mov	r7, ip
    151e:	793f      	ldrb	r7, [r7, #4]
    1520:	4d3c      	ldr	r5, [pc, #240]	; (1614 <MiApp_BroadcastConnectionTable+0x1bc>)
    1522:	546f      	strb	r7, [r5, r1]
                        MiApp_WriteData(ConnectionTable[j].Address[1]);
    1524:	1c4f      	adds	r7, r1, #1
    1526:	b2ff      	uxtb	r7, r7
    1528:	46bb      	mov	fp, r7
    152a:	4667      	mov	r7, ip
    152c:	797f      	ldrb	r7, [r7, #5]
    152e:	46bc      	mov	ip, r7
    1530:	465f      	mov	r7, fp
    1532:	4664      	mov	r4, ip
    1534:	55ec      	strb	r4, [r5, r7]
                        MiApp_WriteData(ConnectionTable[j].Address[2]);
    1536:	1ccc      	adds	r4, r1, #3
    1538:	466d      	mov	r5, sp
    153a:	77ac      	strb	r4, [r5, #30]
    153c:	7fac      	ldrb	r4, [r5, #30]
    153e:	0027      	movs	r7, r4
    1540:	1c8c      	adds	r4, r1, #2
    1542:	77ac      	strb	r4, [r5, #30]
    1544:	7fac      	ldrb	r4, [r5, #30]
    1546:	46a3      	mov	fp, r4
    1548:	9c03      	ldr	r4, [sp, #12]
    154a:	1aa2      	subs	r2, r4, r2
    154c:	0052      	lsls	r2, r2, #1
    154e:	4c33      	ldr	r4, [pc, #204]	; (161c <MiApp_BroadcastConnectionTable+0x1c4>)
    1550:	46a4      	mov	ip, r4
    1552:	4462      	add	r2, ip
    1554:	7992      	ldrb	r2, [r2, #6]
    1556:	465c      	mov	r4, fp
    1558:	4d2e      	ldr	r5, [pc, #184]	; (1614 <MiApp_BroadcastConnectionTable+0x1bc>)
    155a:	552a      	strb	r2, [r5, r4]
                        MiApp_WriteData(j);
    155c:	3104      	adds	r1, #4
    155e:	b2c9      	uxtb	r1, r1
    1560:	55eb      	strb	r3, [r5, r7]
    1562:	e013      	b.n	158c <MiApp_BroadcastConnectionTable+0x134>
                    }

                    else
                    {

                        MiApp_WriteData(0xff);
    1564:	464a      	mov	r2, r9
    1566:	4654      	mov	r4, sl
    1568:	5454      	strb	r4, [r2, r1]
                        MiApp_WriteData(0xff);
    156a:	1c4a      	adds	r2, r1, #1
    156c:	b2d2      	uxtb	r2, r2
    156e:	464c      	mov	r4, r9
    1570:	4657      	mov	r7, sl
    1572:	54a7      	strb	r7, [r4, r2]
                        MiApp_WriteData(0xff);
    1574:	1cca      	adds	r2, r1, #3
    1576:	b2d2      	uxtb	r2, r2
    1578:	4694      	mov	ip, r2
    157a:	1c8c      	adds	r4, r1, #2
    157c:	b2e4      	uxtb	r4, r4
    157e:	464f      	mov	r7, r9
    1580:	4652      	mov	r2, sl
    1582:	553a      	strb	r2, [r7, r4]
                        MiApp_WriteData(j);             
    1584:	3104      	adds	r1, #4
    1586:	b2c9      	uxtb	r1, r1
    1588:	4664      	mov	r4, ip
    158a:	553b      	strb	r3, [r7, r4]
                    }
                    count = count + 4;
    158c:	3004      	adds	r0, #4
    158e:	b2c0      	uxtb	r0, r0
    1590:	2401      	movs	r4, #1
            MiApp_WriteData(CMD_SHARE_CONNECTION_TABLE);
            MiApp_WriteData(conn_size); // No of end devices in network
            MiApp_WriteData(((TX_BUFFER_SIZE-4)/4)*i);
            MiApp_WriteData(((TX_BUFFER_SIZE-4)/4)*(i+1));
            count = 4;
            for (j= ((TX_BUFFER_SIZE-4)/4)*i ;j<((TX_BUFFER_SIZE-4)/4)*(i+1);j++)
    1592:	3301      	adds	r3, #1
    1594:	b2db      	uxtb	r3, r3
    1596:	1e1a      	subs	r2, r3, #0
    1598:	9d02      	ldr	r5, [sp, #8]
    159a:	42aa      	cmp	r2, r5
    159c:	dbad      	blt.n	14fa <MiApp_BroadcastConnectionTable+0xa2>
    159e:	2c00      	cmp	r4, #0
    15a0:	d001      	beq.n	15a6 <MiApp_BroadcastConnectionTable+0x14e>
    15a2:	4b1d      	ldr	r3, [pc, #116]	; (1618 <MiApp_BroadcastConnectionTable+0x1c0>)
    15a4:	7019      	strb	r1, [r3, #0]
                    }
                    count = count + 4;
                }
            }
            // Fill the remaining buffer with garbage value
            for (k=count;k<TX_BUFFER_SIZE;k++)
    15a6:	2827      	cmp	r0, #39	; 0x27
    15a8:	d901      	bls.n	15ae <MiApp_BroadcastConnectionTable+0x156>
    15aa:	e011      	b.n	15d0 <MiApp_BroadcastConnectionTable+0x178>
            MiApp_FlushTx();
            MiApp_WriteData(CMD_SHARE_CONNECTION_TABLE);
            MiApp_WriteData(conn_size); // No of end devices in network
            MiApp_WriteData(((TX_BUFFER_SIZE-4)/4)*i);
            MiApp_WriteData(((TX_BUFFER_SIZE-4)/4)*(i+1));
            count = 4;
    15ac:	2004      	movs	r0, #4
    15ae:	4b1a      	ldr	r3, [pc, #104]	; (1618 <MiApp_BroadcastConnectionTable+0x1c0>)
    15b0:	781b      	ldrb	r3, [r3, #0]
    15b2:	0019      	movs	r1, r3
                }
            }
            // Fill the remaining buffer with garbage value
            for (k=count;k<TX_BUFFER_SIZE;k++)
            {
                MiApp_WriteData(0x11);   // Garbage Value 
    15b4:	4d17      	ldr	r5, [pc, #92]	; (1614 <MiApp_BroadcastConnectionTable+0x1bc>)
    15b6:	2411      	movs	r4, #17
    15b8:	1ac0      	subs	r0, r0, r3
    15ba:	b2c0      	uxtb	r0, r0
    15bc:	1c4b      	adds	r3, r1, #1
    15be:	b2db      	uxtb	r3, r3
    15c0:	546c      	strb	r4, [r5, r1]
    15c2:	0019      	movs	r1, r3
                    }
                    count = count + 4;
                }
            }
            // Fill the remaining buffer with garbage value
            for (k=count;k<TX_BUFFER_SIZE;k++)
    15c4:	18c2      	adds	r2, r0, r3
    15c6:	b2d2      	uxtb	r2, r2
    15c8:	2a27      	cmp	r2, #39	; 0x27
    15ca:	d9f7      	bls.n	15bc <MiApp_BroadcastConnectionTable+0x164>
    15cc:	4a12      	ldr	r2, [pc, #72]	; (1618 <MiApp_BroadcastConnectionTable+0x1c0>)
    15ce:	7013      	strb	r3, [r2, #0]



            #if defined(IEEE_802_15_4)

                SendPacket(true, myPANID, NULL, true, false);
    15d0:	4b13      	ldr	r3, [pc, #76]	; (1620 <MiApp_BroadcastConnectionTable+0x1c8>)
    15d2:	8819      	ldrh	r1, [r3, #0]
    15d4:	2300      	movs	r3, #0
    15d6:	9300      	str	r3, [sp, #0]
    15d8:	3301      	adds	r3, #1
    15da:	2200      	movs	r2, #0
    15dc:	2001      	movs	r0, #1
    15de:	4c11      	ldr	r4, [pc, #68]	; (1624 <MiApp_BroadcastConnectionTable+0x1cc>)
    15e0:	47a0      	blx	r4
                broadcast_count = broadcast_count + ((conn_size *4) + 4 )% TX_BUFFER_SIZE;
            }
            
        }
        
        for (i = 0 ; i < broadcast_count ; i++)
    15e2:	9f05      	ldr	r7, [sp, #20]
    15e4:	3701      	adds	r7, #1
    15e6:	b2fb      	uxtb	r3, r7
    15e8:	9305      	str	r3, [sp, #20]
    15ea:	9a04      	ldr	r2, [sp, #16]
    15ec:	3209      	adds	r2, #9
    15ee:	9204      	str	r2, [sp, #16]
    15f0:	9a06      	ldr	r2, [sp, #24]
    15f2:	4293      	cmp	r3, r2
    15f4:	d200      	bcs.n	15f8 <MiApp_BroadcastConnectionTable+0x1a0>
    15f6:	e75c      	b.n	14b2 <MiApp_BroadcastConnectionTable+0x5a>
                SendPacket(true, NULL, true, false);
            #endif

 
        }
    }
    15f8:	b009      	add	sp, #36	; 0x24
    15fa:	bc3c      	pop	{r2, r3, r4, r5}
    15fc:	4690      	mov	r8, r2
    15fe:	4699      	mov	r9, r3
    1600:	46a2      	mov	sl, r4
    1602:	46ab      	mov	fp, r5
    1604:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1606:	46c0      	nop			; (mov r8, r8)
    1608:	200004ed 	.word	0x200004ed
    160c:	00005395 	.word	0x00005395
    1610:	00005561 	.word	0x00005561
    1614:	200005a0 	.word	0x200005a0
    1618:	20000545 	.word	0x20000545
    161c:	2000039c 	.word	0x2000039c
    1620:	200004d4 	.word	0x200004d4
    1624:	00001321 	.word	0x00001321

00001628 <send_link_status>:

    #if defined(ENABLE_LINK_STATUS)

        
        void send_link_status (void)
        {
    1628:	b510      	push	{r4, lr}
    162a:	b082      	sub	sp, #8
            bool send_status;
            MiApp_FlushTx();
            MiApp_WriteData(CMD_IAM_ALIVE); 
    162c:	2201      	movs	r2, #1
    162e:	4b0a      	ldr	r3, [pc, #40]	; (1658 <send_link_status+0x30>)
    1630:	701a      	strb	r2, [r3, #0]
    1632:	3279      	adds	r2, #121	; 0x79
    1634:	4b09      	ldr	r3, [pc, #36]	; (165c <send_link_status+0x34>)
    1636:	701a      	strb	r2, [r3, #0]
            // Pan Co is @ index 0 of connection table of END_Device
            // In a Star Network
            #if defined(IEEE_802_15_4)
                send_status = SendPacket(false, myPANID, ConnectionTable[0].Address, true, false);
    1638:	4b09      	ldr	r3, [pc, #36]	; (1660 <send_link_status+0x38>)
    163a:	8819      	ldrh	r1, [r3, #0]
    163c:	2300      	movs	r3, #0
    163e:	9300      	str	r3, [sp, #0]
    1640:	3301      	adds	r3, #1
    1642:	4a08      	ldr	r2, [pc, #32]	; (1664 <send_link_status+0x3c>)
    1644:	2000      	movs	r0, #0
    1646:	4c08      	ldr	r4, [pc, #32]	; (1668 <send_link_status+0x40>)
    1648:	47a0      	blx	r4
            #else
                send_status = SendPacket(false,  ConnectionTable[0].Address, true, false);
            #endif
                if(!send_status)
    164a:	2800      	cmp	r0, #0
    164c:	d102      	bne.n	1654 <send_link_status+0x2c>
                {
                    lost_connection = true;
    164e:	2201      	movs	r2, #1
    1650:	4b06      	ldr	r3, [pc, #24]	; (166c <send_link_status+0x44>)
    1652:	701a      	strb	r2, [r3, #0]
                }
        }
    1654:	b002      	add	sp, #8
    1656:	bd10      	pop	{r4, pc}
    1658:	20000545 	.word	0x20000545
    165c:	200005a0 	.word	0x200005a0
    1660:	200004d4 	.word	0x200004d4
    1664:	200003a0 	.word	0x200003a0
    1668:	00001321 	.word	0x00001321
    166c:	20000133 	.word	0x20000133

00001670 <isSameAddress>:
 *
 * Side Effects:    
 *
 ********************************************************************/
bool    isSameAddress(INPUT uint8_t *Address1, INPUT uint8_t *Address2)
{
    1670:	b510      	push	{r4, lr}
    uint8_t i;
    
    for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    {
        if( Address1[i] != Address2[i] )
    1672:	7802      	ldrb	r2, [r0, #0]
    1674:	780b      	ldrb	r3, [r1, #0]
    1676:	429a      	cmp	r2, r3
    1678:	d10c      	bne.n	1694 <isSameAddress+0x24>
    167a:	1c43      	adds	r3, r0, #1
    167c:	3101      	adds	r1, #1
    167e:	3008      	adds	r0, #8
    1680:	781c      	ldrb	r4, [r3, #0]
    1682:	780a      	ldrb	r2, [r1, #0]
    1684:	4294      	cmp	r4, r2
    1686:	d107      	bne.n	1698 <isSameAddress+0x28>
    1688:	3301      	adds	r3, #1
    168a:	3101      	adds	r1, #1
 ********************************************************************/
bool    isSameAddress(INPUT uint8_t *Address1, INPUT uint8_t *Address2)
{
    uint8_t i;
    
    for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    168c:	4283      	cmp	r3, r0
    168e:	d1f7      	bne.n	1680 <isSameAddress+0x10>
        if( Address1[i] != Address2[i] )
        {
            return false;
        }
    }
    return true;
    1690:	2001      	movs	r0, #1
    1692:	e002      	b.n	169a <isSameAddress+0x2a>
    
    for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    {
        if( Address1[i] != Address2[i] )
        {
            return false;
    1694:	2000      	movs	r0, #0
    1696:	e000      	b.n	169a <isSameAddress+0x2a>
    1698:	2000      	movs	r0, #0
        }
    }
    return true;
}
    169a:	bd10      	pop	{r4, pc}

0000169c <MiApp_StartConnection>:

#if defined(ENABLE_HAND_SHAKE)
     
    bool MiApp_StartConnection(uint8_t Mode, uint8_t ScanDuration, uint32_t ChannelMap)
    {
    169c:	b510      	push	{r4, lr}
    169e:	b082      	sub	sp, #8
		#if defined(PROTOCOL_STAR)
			role = PanCoordinator;
    16a0:	2200      	movs	r2, #0
    16a2:	4b0d      	ldr	r3, [pc, #52]	; (16d8 <MiApp_StartConnection+0x3c>)
    16a4:	701a      	strb	r2, [r3, #0]
		#endif
        switch(Mode)
    16a6:	2800      	cmp	r0, #0
    16a8:	d112      	bne.n	16d0 <MiApp_StartConnection+0x34>
                #if defined(IEEE_802_15_4)
                    #if MY_PAN_ID == 0xFFFF
                        myPANID.v[0] = TMRL;
                        myPANID.v[1] = TMRL+0x51;
                    #else
                        myPANID.Val = MY_PAN_ID;
    16aa:	490c      	ldr	r1, [pc, #48]	; (16dc <MiApp_StartConnection+0x40>)
    16ac:	4b0c      	ldr	r3, [pc, #48]	; (16e0 <MiApp_StartConnection+0x44>)
    16ae:	800b      	strh	r3, [r1, #0]
                    #endif
                    {
                        uint16_t tmp = 0xFFFF;
    16b0:	466b      	mov	r3, sp
    16b2:	1d98      	adds	r0, r3, #6
    16b4:	2301      	movs	r3, #1
    16b6:	425b      	negs	r3, r3
    16b8:	8003      	strh	r3, [r0, #0]
                        MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    16ba:	4b0a      	ldr	r3, [pc, #40]	; (16e4 <MiApp_StartConnection+0x48>)
    16bc:	4798      	blx	r3
                #endif
                #if defined(ENABLE_TIME_SYNC) && !defined(ENABLE_SLEEP) && defined(ENABLE_INDIRECT_MESSAGE)
                    TimeSyncTick = MiWi_TickGet();
                #endif
            #if defined(PROTOCOL_STAR)
                tick1 = MiWi_TickGet();
    16be:	4c0a      	ldr	r4, [pc, #40]	; (16e8 <MiApp_StartConnection+0x4c>)
    16c0:	47a0      	blx	r4
    16c2:	4b0a      	ldr	r3, [pc, #40]	; (16ec <MiApp_StartConnection+0x50>)
    16c4:	6018      	str	r0, [r3, #0]
                tick4 = MiWi_TickGet();
    16c6:	47a0      	blx	r4
    16c8:	4b09      	ldr	r3, [pc, #36]	; (16f0 <MiApp_StartConnection+0x54>)
    16ca:	6018      	str	r0, [r3, #0]
            #endif
                return true;
    16cc:	2001      	movs	r0, #1
    16ce:	e000      	b.n	16d2 <MiApp_StartConnection+0x36>
                        TimeSyncTick = MiWi_TickGet();
                    #endif
                    return true;
                }
                #else
                    return false;
    16d0:	2000      	movs	r0, #0
            
            default:
                break;
        }    
        return false;
    }
    16d2:	b002      	add	sp, #8
    16d4:	bd10      	pop	{r4, pc}
    16d6:	46c0      	nop			; (mov r8, r8)
    16d8:	20000598 	.word	0x20000598
    16dc:	200004d4 	.word	0x200004d4
    16e0:	00001234 	.word	0x00001234
    16e4:	0000045d 	.word	0x0000045d
    16e8:	000023a1 	.word	0x000023a1
    16ec:	2000059c 	.word	0x2000059c
    16f0:	200004b4 	.word	0x200004b4

000016f4 <MiApp_DiscardMessage>:



 
void MiApp_DiscardMessage(void)
{
    16f4:	b510      	push	{r4, lr}
    P2PStatus.bits.RxHasUserData = 0;
    16f6:	4a04      	ldr	r2, [pc, #16]	; (1708 <MiApp_DiscardMessage+0x14>)
    16f8:	7813      	ldrb	r3, [r2, #0]
    16fa:	2108      	movs	r1, #8
    16fc:	438b      	bics	r3, r1
    16fe:	7013      	strb	r3, [r2, #0]
    MiMAC_DiscardPacket();
    1700:	4b02      	ldr	r3, [pc, #8]	; (170c <MiApp_DiscardMessage+0x18>)
    1702:	4798      	blx	r3
}
    1704:	bd10      	pop	{r4, pc}
    1706:	46c0      	nop			; (mov r8, r8)
    1708:	20000544 	.word	0x20000544
    170c:	00000c1d 	.word	0x00000c1d

00001710 <MiApp_SetChannel>:


 
bool MiApp_SetChannel(uint8_t channel)
{
    1710:	b510      	push	{r4, lr}
    1712:	0004      	movs	r4, r0
    if( MiMAC_SetChannel(channel, 0) )
    1714:	2100      	movs	r1, #0
    1716:	4b03      	ldr	r3, [pc, #12]	; (1724 <MiApp_SetChannel+0x14>)
    1718:	4798      	blx	r3
    171a:	2800      	cmp	r0, #0
    171c:	d001      	beq.n	1722 <MiApp_SetChannel+0x12>
    {
        currentChannel = channel;
    171e:	4b02      	ldr	r3, [pc, #8]	; (1728 <MiApp_SetChannel+0x18>)
    1720:	701c      	strb	r4, [r3, #0]
            nvmPutCurrentChannel(&currentChannel);
        #endif
        return true;
    }
    return false;
}
    1722:	bd10      	pop	{r4, pc}
    1724:	0000084d 	.word	0x0000084d
    1728:	20000131 	.word	0x20000131

0000172c <MiApp_ProtocolInit>:
}

uint32_t addr1 =  0x0080A00C;

bool MiApp_ProtocolInit(bool bNetworkFreezer)
{
    172c:	b570      	push	{r4, r5, r6, lr}
    172e:	b084      	sub	sp, #16
	#if defined(ENABLE_NETWORK_FREEZER)
	NVMInit();
	#endif
	
	//clear all status bits
	P2PStatus.Val = 0;
    1730:	2200      	movs	r2, #0
    1732:	4b3b      	ldr	r3, [pc, #236]	; (1820 <MiApp_ProtocolInit+0xf4>)
    1734:	701a      	strb	r2, [r3, #0]
	
	#if defined (USE_MAC_ADDRESS)
	// Each SAM MCU has a unique address stored in Flash Memory
	uint32_t val_1, val_2, val_3, val_4;
	uint32_t *ptr1 = (volatile uint32_t *)0x0080A00C;
	val_1 = *ptr1;
    1736:	4b3b      	ldr	r3, [pc, #236]	; (1824 <MiApp_ProtocolInit+0xf8>)
    1738:	681d      	ldr	r5, [r3, #0]
	uint32_t *ptr = (volatile uint32_t *)0x0080A040;
	val_2 = *ptr;
    173a:	4b3b      	ldr	r3, [pc, #236]	; (1828 <MiApp_ProtocolInit+0xfc>)
    173c:	681c      	ldr	r4, [r3, #0]
	ptr++;
	val_3 = *ptr;
    173e:	4b3b      	ldr	r3, [pc, #236]	; (182c <MiApp_ProtocolInit+0x100>)
    1740:	6819      	ldr	r1, [r3, #0]
	ptr++;
	val_4 = *ptr;
    1742:	4b3b      	ldr	r3, [pc, #236]	; (1830 <MiApp_ProtocolInit+0x104>)
    1744:	681a      	ldr	r2, [r3, #0]
	myLongAddress[0] = (val_1 & 0xFF) + ((val_1>>8) & 0xFF);
    1746:	4b3b      	ldr	r3, [pc, #236]	; (1834 <MiApp_ProtocolInit+0x108>)
    1748:	0a2e      	lsrs	r6, r5, #8
    174a:	1976      	adds	r6, r6, r5
    174c:	701e      	strb	r6, [r3, #0]
	myLongAddress[1] = ((val_1>>16) & 0xFF) + ((val_1)>>24 & 0xFF);
    174e:	0c2e      	lsrs	r6, r5, #16
    1750:	0e2d      	lsrs	r5, r5, #24
    1752:	1975      	adds	r5, r6, r5
    1754:	705d      	strb	r5, [r3, #1]
	myLongAddress[2] = (val_2 & 0xFF) + ((val_2>>8) & 0xFF);
    1756:	0a25      	lsrs	r5, r4, #8
    1758:	192d      	adds	r5, r5, r4
    175a:	709d      	strb	r5, [r3, #2]
	myLongAddress[3] = ((val_2>>16) & 0xFF) + ((val_2)>>24 & 0xFF);
    175c:	0c25      	lsrs	r5, r4, #16
    175e:	0e24      	lsrs	r4, r4, #24
    1760:	192c      	adds	r4, r5, r4
    1762:	70dc      	strb	r4, [r3, #3]
	myLongAddress[4] = (val_3 & 0xFF) + ((val_3>>8) & 0xFF);
    1764:	0a0c      	lsrs	r4, r1, #8
    1766:	1864      	adds	r4, r4, r1
    1768:	711c      	strb	r4, [r3, #4]
	myLongAddress[5] = ((val_3>>16) & 0xFF) + ((val_3)>>24 & 0xFF);
    176a:	0c0c      	lsrs	r4, r1, #16
    176c:	0e09      	lsrs	r1, r1, #24
    176e:	1861      	adds	r1, r4, r1
    1770:	7159      	strb	r1, [r3, #5]
	myLongAddress[6] = (val_4 & 0xFF) + ((val_4>>8) & 0xFF);
    1772:	0a11      	lsrs	r1, r2, #8
    1774:	1889      	adds	r1, r1, r2
    1776:	7199      	strb	r1, [r3, #6]
	myLongAddress[7] = ((val_4>>16) & 0xFF) + ((val_4)>>24 & 0xFF);
    1778:	0c11      	lsrs	r1, r2, #16
    177a:	0e12      	lsrs	r2, r2, #24
    177c:	188a      	adds	r2, r1, r2
    177e:	71da      	strb	r2, [r3, #7]
	myLongAddress[6] = EUI_6;
	myLongAddress[7] = EUI_7;
	#endif

	
	if (!bNetworkFreezer)
    1780:	2800      	cmp	r0, #0
    1782:	d110      	bne.n	17a6 <MiApp_ProtocolInit+0x7a>
    1784:	4a2c      	ldr	r2, [pc, #176]	; (1838 <MiApp_ProtocolInit+0x10c>)
    1786:	2100      	movs	r1, #0
	{
		for(i = 0; i < CONNECTION_SIZE; i++)
		{
			ConnectionTable[i].status.Val = 0;
    1788:	2300      	movs	r3, #0
			ConnectionTable[i].Address[0] = 0x00;
			ConnectionTable[i].Address[1] = 0x00;
			ConnectionTable[i].Address[2] = 0x00;
			#if defined(ENABLE_LINK_STATUS)
			link_stat[i] = 0x00;
    178a:	4e2c      	ldr	r6, [pc, #176]	; (183c <MiApp_ProtocolInit+0x110>)
			permanent_connections[i] = 0x00;
    178c:	4d2c      	ldr	r5, [pc, #176]	; (1840 <MiApp_ProtocolInit+0x114>)
	
	if (!bNetworkFreezer)
	{
		for(i = 0; i < CONNECTION_SIZE; i++)
		{
			ConnectionTable[i].status.Val = 0;
    178e:	7213      	strb	r3, [r2, #8]
			ConnectionTable[i].Address[0] = 0x00;
    1790:	7013      	strb	r3, [r2, #0]
			ConnectionTable[i].Address[1] = 0x00;
    1792:	7053      	strb	r3, [r2, #1]
			ConnectionTable[i].Address[2] = 0x00;
    1794:	7093      	strb	r3, [r2, #2]
			#if defined(ENABLE_LINK_STATUS)
			link_stat[i] = 0x00;
    1796:	198c      	adds	r4, r1, r6
    1798:	7023      	strb	r3, [r4, #0]
			permanent_connections[i] = 0x00;
    179a:	194c      	adds	r4, r1, r5
    179c:	7023      	strb	r3, [r4, #0]
    179e:	3101      	adds	r1, #1
    17a0:	320e      	adds	r2, #14
	#endif

	
	if (!bNetworkFreezer)
	{
		for(i = 0; i < CONNECTION_SIZE; i++)
    17a2:	2914      	cmp	r1, #20
    17a4:	d1f3      	bne.n	178e <MiApp_ProtocolInit+0x62>
			permanent_connections[i] = 0x00;
			#endif
		}
	}
	
	TxData = 0;
    17a6:	2200      	movs	r2, #0
    17a8:	4b26      	ldr	r3, [pc, #152]	; (1844 <MiApp_ProtocolInit+0x118>)
    17aa:	701a      	strb	r2, [r3, #0]
    17ac:	4b26      	ldr	r3, [pc, #152]	; (1848 <MiApp_ProtocolInit+0x11c>)
    17ae:	0019      	movs	r1, r3
    17b0:	3150      	adds	r1, #80	; 0x50
	#endif
	
	#if defined(ENABLE_SECURITY)
	for(i = 0; i < CONNECTION_SIZE; i++)
	{
		IncomingFrameCounter[i].Val = 0;
    17b2:	c304      	stmia	r3!, {r2}
		indirectMessages[i].flags.Val = 0;
	}
	#endif
	
	#if defined(ENABLE_SECURITY)
	for(i = 0; i < CONNECTION_SIZE; i++)
    17b4:	4299      	cmp	r1, r3
    17b6:	d1fc      	bne.n	17b2 <MiApp_ProtocolInit+0x86>
	}
	#endif
	

	#if defined(IEEE_802_15_4)
	myPANID.Val = MY_PAN_ID;
    17b8:	4c24      	ldr	r4, [pc, #144]	; (184c <MiApp_ProtocolInit+0x120>)
    17ba:	4b25      	ldr	r3, [pc, #148]	; (1850 <MiApp_ProtocolInit+0x124>)
    17bc:	8023      	strh	r3, [r4, #0]
	#endif

	
	initValue.PAddress = myLongAddress;
    17be:	aa02      	add	r2, sp, #8
	initValue.actionFlags.bits.CCAEnable = 1;
    17c0:	7815      	ldrb	r5, [r2, #0]
    17c2:	2302      	movs	r3, #2
    17c4:	431d      	orrs	r5, r3
	initValue.actionFlags.bits.PAddrLength = MY_ADDRESS_LENGTH;
    17c6:	2387      	movs	r3, #135	; 0x87
    17c8:	401d      	ands	r5, r3
    17ca:	2340      	movs	r3, #64	; 0x40
    17cc:	431d      	orrs	r5, r3
	initValue.actionFlags.bits.NetworkFreezer = bNetworkFreezer;
    17ce:	2301      	movs	r3, #1
    17d0:	4018      	ands	r0, r3
    17d2:	0083      	lsls	r3, r0, #2
    17d4:	21c3      	movs	r1, #195	; 0xc3
    17d6:	0028      	movs	r0, r5
    17d8:	4008      	ands	r0, r1
	initValue.actionFlags.bits.RepeaterMode = 0;
    17da:	4318      	orrs	r0, r3
    17dc:	2301      	movs	r3, #1
    17de:	4398      	bics	r0, r3
    17e0:	7010      	strb	r0, [r2, #0]

	MiMAC_Init(initValue);
    17e2:	9802      	ldr	r0, [sp, #8]
    17e4:	4913      	ldr	r1, [pc, #76]	; (1834 <MiApp_ProtocolInit+0x108>)
    17e6:	4b1b      	ldr	r3, [pc, #108]	; (1854 <MiApp_ProtocolInit+0x128>)
    17e8:	4798      	blx	r3
	

	
	#if defined(IEEE_802_15_4)
	{
		uint16_t tmp = 0xFFFF;
    17ea:	466b      	mov	r3, sp
    17ec:	1d98      	adds	r0, r3, #6
    17ee:	2301      	movs	r3, #1
    17f0:	425b      	negs	r3, r3
    17f2:	8003      	strh	r3, [r0, #0]
		MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    17f4:	0021      	movs	r1, r4
    17f6:	4b18      	ldr	r3, [pc, #96]	; (1858 <MiApp_ProtocolInit+0x12c>)
    17f8:	4798      	blx	r3
	}
	#endif
	
	MiApp_SetChannel(currentChannel);
    17fa:	4b18      	ldr	r3, [pc, #96]	; (185c <MiApp_ProtocolInit+0x130>)
    17fc:	7818      	ldrb	r0, [r3, #0]
    17fe:	4b18      	ldr	r3, [pc, #96]	; (1860 <MiApp_ProtocolInit+0x134>)
    1800:	4798      	blx	r3
	P2PCapacityInfo |= 0x01;
	#endif
	#if defined(ENABLE_SECURITY)
	P2PCapacityInfo |= 0x08;
	#endif
	P2PCapacityInfo |= (ConnMode << 4);
    1802:	4b18      	ldr	r3, [pc, #96]	; (1864 <MiApp_ProtocolInit+0x138>)
    1804:	781b      	ldrb	r3, [r3, #0]
    1806:	011b      	lsls	r3, r3, #4
    1808:	2209      	movs	r2, #9
    180a:	4313      	orrs	r3, r2
    180c:	4a16      	ldr	r2, [pc, #88]	; (1868 <MiApp_ProtocolInit+0x13c>)
    180e:	7013      	strb	r3, [r2, #0]
	ENABLE_TRX_IRQ();
    1810:	2100      	movs	r1, #0
    1812:	2000      	movs	r0, #0
    1814:	4b15      	ldr	r3, [pc, #84]	; (186c <MiApp_ProtocolInit+0x140>)
    1816:	4798      	blx	r3
	return true;
}
    1818:	2001      	movs	r0, #1
    181a:	b004      	add	sp, #16
    181c:	bd70      	pop	{r4, r5, r6, pc}
    181e:	46c0      	nop			; (mov r8, r8)
    1820:	20000544 	.word	0x20000544
    1824:	0080a00c 	.word	0x0080a00c
    1828:	0080a040 	.word	0x0080a040
    182c:	0080a044 	.word	0x0080a044
    1830:	0080a048 	.word	0x0080a048
    1834:	20000014 	.word	0x20000014
    1838:	200003a0 	.word	0x200003a0
    183c:	200005c8 	.word	0x200005c8
    1840:	200004d8 	.word	0x200004d8
    1844:	20000545 	.word	0x20000545
    1848:	200004f0 	.word	0x200004f0
    184c:	200004d4 	.word	0x200004d4
    1850:	00001234 	.word	0x00001234
    1854:	00000ba1 	.word	0x00000ba1
    1858:	0000045d 	.word	0x0000045d
    185c:	20000131 	.word	0x20000131
    1860:	00001711 	.word	0x00001711
    1864:	20000011 	.word	0x20000011
    1868:	200004d1 	.word	0x200004d1
    186c:	000025a5 	.word	0x000025a5

00001870 <AddConnection>:
     *                  connection operation ends if an entry is added 
     *                  successfully
     *
     ********************************************************************/
    uint8_t AddConnection(void)
    {
    1870:	b5f0      	push	{r4, r5, r6, r7, lr}
    1872:	4657      	mov	r7, sl
    1874:	464e      	mov	r6, r9
    1876:	b4c0      	push	{r6, r7}
    1878:	b083      	sub	sp, #12
        {
            // check if the entry is valid
            if( ConnectionTable[i].status.bits.isValid )
            {
                // check if the entry address matches source address of current received packet
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    187a:	4b32      	ldr	r3, [pc, #200]	; (1944 <AddConnection+0xd4>)
    187c:	685b      	ldr	r3, [r3, #4]
    187e:	9301      	str	r3, [sp, #4]
    1880:	4d31      	ldr	r5, [pc, #196]	; (1948 <AddConnection+0xd8>)
    1882:	2400      	movs	r4, #0
     ********************************************************************/
    uint8_t AddConnection(void)
    {
        uint8_t i;
        uint8_t status = STATUS_SUCCESS;
        uint8_t connectionSlot = 0xFF;
    1884:	26ff      	movs	r6, #255	; 0xff
        
        // loop through all entry and locate an proper slot
        for(i = 0; i < CONNECTION_SIZE; i++)
        {
            // check if the entry is valid
            if( ConnectionTable[i].status.bits.isValid )
    1886:	4b31      	ldr	r3, [pc, #196]	; (194c <AddConnection+0xdc>)
    1888:	4699      	mov	r9, r3
            {
                // check if the entry address matches source address of current received packet
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    188a:	4b31      	ldr	r3, [pc, #196]	; (1950 <AddConnection+0xe0>)
    188c:	469a      	mov	sl, r3
    188e:	b2e7      	uxtb	r7, r4
        
        // loop through all entry and locate an proper slot
        for(i = 0; i < CONNECTION_SIZE; i++)
        {
            // check if the entry is valid
            if( ConnectionTable[i].status.bits.isValid )
    1890:	00e3      	lsls	r3, r4, #3
    1892:	1b1b      	subs	r3, r3, r4
    1894:	005b      	lsls	r3, r3, #1
    1896:	444b      	add	r3, r9
    1898:	7b1b      	ldrb	r3, [r3, #12]
    189a:	09db      	lsrs	r3, r3, #7
    189c:	d005      	beq.n	18aa <AddConnection+0x3a>
            {
                // check if the entry address matches source address of current received packet
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    189e:	0029      	movs	r1, r5
    18a0:	9801      	ldr	r0, [sp, #4]
    18a2:	47d0      	blx	sl
    18a4:	2800      	cmp	r0, #0
    18a6:	d003      	beq.n	18b0 <AddConnection+0x40>
    18a8:	e008      	b.n	18bc <AddConnection+0x4c>
                    connectionSlot = i;
                    status = STATUS_EXISTS;
                    break;
                }
            }
            else if( connectionSlot == 0xFF )
    18aa:	2eff      	cmp	r6, #255	; 0xff
    18ac:	d100      	bne.n	18b0 <AddConnection+0x40>
    18ae:	003e      	movs	r6, r7
    18b0:	3401      	adds	r4, #1
    18b2:	350e      	adds	r5, #14
                return STATUS_ACTIVE_SCAN;
            }
        #endif
        
        // loop through all entry and locate an proper slot
        for(i = 0; i < CONNECTION_SIZE; i++)
    18b4:	2c14      	cmp	r4, #20
    18b6:	d1ea      	bne.n	188e <AddConnection+0x1e>
     *
     ********************************************************************/
    uint8_t AddConnection(void)
    {
        uint8_t i;
        uint8_t status = STATUS_SUCCESS;
    18b8:	2400      	movs	r4, #0
    18ba:	e001      	b.n	18c0 <AddConnection+0x50>
    18bc:	003e      	movs	r6, r7
            {
                // check if the entry address matches source address of current received packet
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
                {
                    connectionSlot = i;
                    status = STATUS_EXISTS;
    18be:	2401      	movs	r4, #1
            }  
        }
            
        if( connectionSlot == 0xFF )
        {
            return STATUS_NOT_ENOUGH_SPACE;
    18c0:	20f1      	movs	r0, #241	; 0xf1
                // store the first empty slot
                connectionSlot = i;
            }  
        }
            
        if( connectionSlot == 0xFF )
    18c2:	2eff      	cmp	r6, #255	; 0xff
    18c4:	d039      	beq.n	193a <AddConnection+0xca>
        {
            return STATUS_NOT_ENOUGH_SPACE;
        }
        else 
        {
            if( ConnMode >= ENABLE_PREV_CONN )
    18c6:	4b23      	ldr	r3, [pc, #140]	; (1954 <AddConnection+0xe4>)
    18c8:	781b      	ldrb	r3, [r3, #0]
            {
                return status;
    18ca:	0020      	movs	r0, r4
        {
            return STATUS_NOT_ENOUGH_SPACE;
        }
        else 
        {
            if( ConnMode >= ENABLE_PREV_CONN )
    18cc:	2b00      	cmp	r3, #0
    18ce:	d134      	bne.n	193a <AddConnection+0xca>
            {
                return status;
            }
            MyindexinPC = connectionSlot;    
    18d0:	4b21      	ldr	r3, [pc, #132]	; (1958 <AddConnection+0xe8>)
    18d2:	701e      	strb	r6, [r3, #0]
    18d4:	9d01      	ldr	r5, [sp, #4]
    18d6:	002b      	movs	r3, r5
    18d8:	00f2      	lsls	r2, r6, #3
    18da:	1b92      	subs	r2, r2, r6
    18dc:	0052      	lsls	r2, r2, #1
    18de:	1d11      	adds	r1, r2, #4
    18e0:	4a1a      	ldr	r2, [pc, #104]	; (194c <AddConnection+0xdc>)
    18e2:	188a      	adds	r2, r1, r2
    18e4:	3508      	adds	r5, #8
            // store the source address
            for(i = 0; i < 8; i++)
            {
                ConnectionTable[connectionSlot].Address[i] = rxMessage.SourceAddress[i];
    18e6:	7819      	ldrb	r1, [r3, #0]
    18e8:	7011      	strb	r1, [r2, #0]
    18ea:	3301      	adds	r3, #1
    18ec:	3201      	adds	r2, #1
            {
                return status;
            }
            MyindexinPC = connectionSlot;    
            // store the source address
            for(i = 0; i < 8; i++)
    18ee:	42ab      	cmp	r3, r5
    18f0:	d1f9      	bne.n	18e6 <AddConnection+0x76>
            {
                ConnectionTable[connectionSlot].Address[i] = rxMessage.SourceAddress[i];
            }
            
            // store the capacity info and validate the entry
            ConnectionTable[connectionSlot].status.bits.isValid = 1;
    18f2:	00f3      	lsls	r3, r6, #3
    18f4:	1b9b      	subs	r3, r3, r6
    18f6:	005b      	lsls	r3, r3, #1
    18f8:	4a14      	ldr	r2, [pc, #80]	; (194c <AddConnection+0xdc>)
    18fa:	18d3      	adds	r3, r2, r3
    18fc:	7b1a      	ldrb	r2, [r3, #12]
    18fe:	2180      	movs	r1, #128	; 0x80
    1900:	4249      	negs	r1, r1
    1902:	430a      	orrs	r2, r1
    1904:	731a      	strb	r2, [r3, #12]
            ConnectionTable[connectionSlot].status.bits.RXOnWhenIdle = (rxMessage.Payload[2] & 0x01);
    1906:	4a0f      	ldr	r2, [pc, #60]	; (1944 <AddConnection+0xd4>)
    1908:	6892      	ldr	r2, [r2, #8]
    190a:	7892      	ldrb	r2, [r2, #2]
    190c:	3181      	adds	r1, #129	; 0x81
    190e:	4011      	ands	r1, r2
    1910:	7b1a      	ldrb	r2, [r3, #12]
    1912:	2501      	movs	r5, #1
    1914:	43aa      	bics	r2, r5
    1916:	430a      	orrs	r2, r1
    1918:	731a      	strb	r2, [r3, #12]
                }
            #endif
    
            #ifdef ENABLE_SECURITY
                // if security is enabled, clear the incoming frame control
                IncomingFrameCounter[connectionSlot].Val = 0;
    191a:	00b0      	lsls	r0, r6, #2
    191c:	2200      	movs	r2, #0
    191e:	4b0f      	ldr	r3, [pc, #60]	; (195c <AddConnection+0xec>)
    1920:	50c2      	str	r2, [r0, r3]
            #endif
            LatestConnection = connectionSlot;
    1922:	4b0f      	ldr	r3, [pc, #60]	; (1960 <AddConnection+0xf0>)
    1924:	701e      	strb	r6, [r3, #0]
            P2PStatus.bits.SearchConnection = 0;   
    1926:	4a0f      	ldr	r2, [pc, #60]	; (1964 <AddConnection+0xf4>)
    1928:	7813      	ldrb	r3, [r2, #0]
    192a:	2110      	movs	r1, #16
    192c:	438b      	bics	r3, r1
    192e:	7013      	strb	r3, [r2, #0]
        }
        conn_size = Total_Connections();
    1930:	4b0d      	ldr	r3, [pc, #52]	; (1968 <AddConnection+0xf8>)
    1932:	4798      	blx	r3
    1934:	4b0d      	ldr	r3, [pc, #52]	; (196c <AddConnection+0xfc>)
    1936:	7018      	strb	r0, [r3, #0]
    #if defined (ENABLE_NETWORK_FREEZER)
        nvmPutMyDC(&conn_size);
    #endif

        return status;
    1938:	0020      	movs	r0, r4
    }
    193a:	b003      	add	sp, #12
    193c:	bc0c      	pop	{r2, r3}
    193e:	4691      	mov	r9, r2
    1940:	469a      	mov	sl, r3
    1942:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1944:	200005dc 	.word	0x200005dc
    1948:	200003a0 	.word	0x200003a0
    194c:	2000039c 	.word	0x2000039c
    1950:	00001671 	.word	0x00001671
    1954:	20000011 	.word	0x20000011
    1958:	20000540 	.word	0x20000540
    195c:	200004f0 	.word	0x200004f0
    1960:	20000399 	.word	0x20000399
    1964:	20000544 	.word	0x20000544
    1968:	000011e1 	.word	0x000011e1
    196c:	200004ed 	.word	0x200004ed

00001970 <MiApp_RemoveConnection>:
     * Remarks:    
     *      None
     *
     ********************************************************************/
    void MiApp_RemoveConnection(INPUT uint8_t ConnectionIndex)
    {   
    1970:	b5f0      	push	{r4, r5, r6, r7, lr}
    1972:	464f      	mov	r7, r9
    1974:	4646      	mov	r6, r8
    1976:	b4c0      	push	{r6, r7}
    1978:	b083      	sub	sp, #12
    197a:	1e04      	subs	r4, r0, #0
        if( ConnectionIndex == 0xFF )
    197c:	2cff      	cmp	r4, #255	; 0xff
    197e:	d128      	bne.n	19d2 <MiApp_RemoveConnection+0x62>
    1980:	4d2a      	ldr	r5, [pc, #168]	; (1a2c <MiApp_RemoveConnection+0xbc>)
    1982:	2400      	movs	r4, #0
        {
            uint8_t i;
            for(i = 0; i < CONNECTION_SIZE; i++)
            {
                uint16_t j;
                if( ConnectionTable[i].status.bits.isValid )
    1984:	4e2a      	ldr	r6, [pc, #168]	; (1a30 <MiApp_RemoveConnection+0xc0>)
                {
                    MiApp_FlushTx();
                    MiApp_WriteData(CMD_P2P_CONNECTION_REMOVAL_REQUEST);   
    1986:	4b2b      	ldr	r3, [pc, #172]	; (1a34 <MiApp_RemoveConnection+0xc4>)
    1988:	4698      	mov	r8, r3
    198a:	4b2b      	ldr	r3, [pc, #172]	; (1a38 <MiApp_RemoveConnection+0xc8>)
    198c:	4699      	mov	r9, r3
        {
            uint8_t i;
            for(i = 0; i < CONNECTION_SIZE; i++)
            {
                uint16_t j;
                if( ConnectionTable[i].status.bits.isValid )
    198e:	00e3      	lsls	r3, r4, #3
    1990:	1b1b      	subs	r3, r3, r4
    1992:	005b      	lsls	r3, r3, #1
    1994:	18f3      	adds	r3, r6, r3
    1996:	7b1b      	ldrb	r3, [r3, #12]
    1998:	09db      	lsrs	r3, r3, #7
    199a:	d013      	beq.n	19c4 <MiApp_RemoveConnection+0x54>
                {
                    MiApp_FlushTx();
                    MiApp_WriteData(CMD_P2P_CONNECTION_REMOVAL_REQUEST);   
    199c:	2301      	movs	r3, #1
    199e:	4642      	mov	r2, r8
    19a0:	7013      	strb	r3, [r2, #0]
    19a2:	3381      	adds	r3, #129	; 0x81
    19a4:	464a      	mov	r2, r9
    19a6:	7013      	strb	r3, [r2, #0]
                    #if defined(IEEE_802_15_4)
                        SendPacket(false, myPANID, ConnectionTable[i].Address, true, false);
    19a8:	4b24      	ldr	r3, [pc, #144]	; (1a3c <MiApp_RemoveConnection+0xcc>)
    19aa:	8819      	ldrh	r1, [r3, #0]
    19ac:	2300      	movs	r3, #0
    19ae:	9300      	str	r3, [sp, #0]
    19b0:	3301      	adds	r3, #1
    19b2:	002a      	movs	r2, r5
    19b4:	2000      	movs	r0, #0
    19b6:	4f22      	ldr	r7, [pc, #136]	; (1a40 <MiApp_RemoveConnection+0xd0>)
    19b8:	47b8      	blx	r7
    19ba:	4b22      	ldr	r3, [pc, #136]	; (1a44 <MiApp_RemoveConnection+0xd4>)
    19bc:	3b01      	subs	r3, #1
    19be:	b29b      	uxth	r3, r3
                    #else
                        SendPacket(false, ConnectionTable[i].Address, true, false);
                    #endif
                    for(j = 0; j < 0xFFF; j++) {}   // delay
    19c0:	2b00      	cmp	r3, #0
    19c2:	d1fb      	bne.n	19bc <MiApp_RemoveConnection+0x4c>
                }
                ConnectionTable[i].status.Val = 0;
    19c4:	2300      	movs	r3, #0
    19c6:	722b      	strb	r3, [r5, #8]
    19c8:	3401      	adds	r4, #1
    19ca:	350e      	adds	r5, #14
    void MiApp_RemoveConnection(INPUT uint8_t ConnectionIndex)
    {   
        if( ConnectionIndex == 0xFF )
        {
            uint8_t i;
            for(i = 0; i < CONNECTION_SIZE; i++)
    19cc:	2c14      	cmp	r4, #20
    19ce:	d1de      	bne.n	198e <MiApp_RemoveConnection+0x1e>
    19d0:	e027      	b.n	1a22 <MiApp_RemoveConnection+0xb2>
                #if defined(ENABLE_NETWORK_FREEZER)
                    nvmPutConnectionTableIndex(&(ConnectionTable[i]), i);
                #endif
            } 
        }
        else if( ConnectionTable[ConnectionIndex].status.bits.isValid )
    19d2:	00c3      	lsls	r3, r0, #3
    19d4:	1a1b      	subs	r3, r3, r0
    19d6:	005b      	lsls	r3, r3, #1
    19d8:	4a15      	ldr	r2, [pc, #84]	; (1a30 <MiApp_RemoveConnection+0xc0>)
    19da:	18d3      	adds	r3, r2, r3
    19dc:	7b1b      	ldrb	r3, [r3, #12]
    19de:	09db      	lsrs	r3, r3, #7
    19e0:	d01f      	beq.n	1a22 <MiApp_RemoveConnection+0xb2>
        {
            uint16_t j;
            
            MiApp_FlushTx();
            MiApp_WriteData(CMD_P2P_CONNECTION_REMOVAL_REQUEST);   
    19e2:	2201      	movs	r2, #1
    19e4:	4b13      	ldr	r3, [pc, #76]	; (1a34 <MiApp_RemoveConnection+0xc4>)
    19e6:	701a      	strb	r2, [r3, #0]
    19e8:	3281      	adds	r2, #129	; 0x81
    19ea:	4b13      	ldr	r3, [pc, #76]	; (1a38 <MiApp_RemoveConnection+0xc8>)
    19ec:	701a      	strb	r2, [r3, #0]
            #if defined(IEEE_802_15_4)
                SendPacket(false, myPANID, ConnectionTable[ConnectionIndex].Address, true, false);
    19ee:	00c2      	lsls	r2, r0, #3
    19f0:	1a12      	subs	r2, r2, r0
    19f2:	0052      	lsls	r2, r2, #1
    19f4:	4b0e      	ldr	r3, [pc, #56]	; (1a30 <MiApp_RemoveConnection+0xc0>)
    19f6:	18d2      	adds	r2, r2, r3
    19f8:	3204      	adds	r2, #4
    19fa:	4b10      	ldr	r3, [pc, #64]	; (1a3c <MiApp_RemoveConnection+0xcc>)
    19fc:	8819      	ldrh	r1, [r3, #0]
    19fe:	2300      	movs	r3, #0
    1a00:	9300      	str	r3, [sp, #0]
    1a02:	3301      	adds	r3, #1
    1a04:	2000      	movs	r0, #0
    1a06:	4d0e      	ldr	r5, [pc, #56]	; (1a40 <MiApp_RemoveConnection+0xd0>)
    1a08:	47a8      	blx	r5
    1a0a:	4b0e      	ldr	r3, [pc, #56]	; (1a44 <MiApp_RemoveConnection+0xd4>)
    1a0c:	3b01      	subs	r3, #1
    1a0e:	b29b      	uxth	r3, r3
            #else
                SendPacket(false, ConnectionTable[ConnectionIndex].Address, true, false);
            #endif
            for(j = 0; j < 0xFFF; j++) {}   // delay
    1a10:	2b00      	cmp	r3, #0
    1a12:	d1fb      	bne.n	1a0c <MiApp_RemoveConnection+0x9c>
            ConnectionTable[ConnectionIndex].status.Val = 0; 
    1a14:	00e3      	lsls	r3, r4, #3
    1a16:	1b1c      	subs	r4, r3, r4
    1a18:	0064      	lsls	r4, r4, #1
    1a1a:	4b05      	ldr	r3, [pc, #20]	; (1a30 <MiApp_RemoveConnection+0xc0>)
    1a1c:	191b      	adds	r3, r3, r4
    1a1e:	2200      	movs	r2, #0
    1a20:	731a      	strb	r2, [r3, #12]
            #if defined(ENABLE_NETWORK_FREEZER)
                nvmPutConnectionTableIndex(&(ConnectionTable[ConnectionIndex]), ConnectionIndex);
            #endif
        }
    }
    1a22:	b003      	add	sp, #12
    1a24:	bc0c      	pop	{r2, r3}
    1a26:	4690      	mov	r8, r2
    1a28:	4699      	mov	r9, r3
    1a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a2c:	200003a0 	.word	0x200003a0
    1a30:	2000039c 	.word	0x2000039c
    1a34:	20000545 	.word	0x20000545
    1a38:	200005a0 	.word	0x200005a0
    1a3c:	200004d4 	.word	0x200004d4
    1a40:	00001321 	.word	0x00001321
    1a44:	00000fff 	.word	0x00000fff

00001a48 <Find_InActiveDevices>:
                }
        }
        
        
        void Find_InActiveDevices(void)
        {
    1a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a4a:	2400      	movs	r4, #0
            uint8_t i;
            for (i=0;i<CONNECTION_SIZE;i++)
            {
                if (ConnectionTable[i].status.bits.isValid)
    1a4c:	4d0d      	ldr	r5, [pc, #52]	; (1a84 <Find_InActiveDevices+0x3c>)
                {
                    if (link_stat[i] == 0 && permanent_connections[i] != 0xFF)
    1a4e:	4e0e      	ldr	r6, [pc, #56]	; (1a88 <Find_InActiveDevices+0x40>)
                    {
                        MiApp_RemoveConnection(i);
                    }
                    else
                    {
                        link_stat[i] = 0; 
    1a50:	0037      	movs	r7, r6
    1a52:	b2e0      	uxtb	r0, r4
        void Find_InActiveDevices(void)
        {
            uint8_t i;
            for (i=0;i<CONNECTION_SIZE;i++)
            {
                if (ConnectionTable[i].status.bits.isValid)
    1a54:	00e3      	lsls	r3, r4, #3
    1a56:	1b1b      	subs	r3, r3, r4
    1a58:	005b      	lsls	r3, r3, #1
    1a5a:	18eb      	adds	r3, r5, r3
    1a5c:	7b1b      	ldrb	r3, [r3, #12]
    1a5e:	09db      	lsrs	r3, r3, #7
    1a60:	d00c      	beq.n	1a7c <Find_InActiveDevices+0x34>
                {
                    if (link_stat[i] == 0 && permanent_connections[i] != 0xFF)
    1a62:	5d33      	ldrb	r3, [r6, r4]
    1a64:	2b00      	cmp	r3, #0
    1a66:	d106      	bne.n	1a76 <Find_InActiveDevices+0x2e>
    1a68:	4b08      	ldr	r3, [pc, #32]	; (1a8c <Find_InActiveDevices+0x44>)
    1a6a:	5d1b      	ldrb	r3, [r3, r4]
    1a6c:	2bff      	cmp	r3, #255	; 0xff
    1a6e:	d002      	beq.n	1a76 <Find_InActiveDevices+0x2e>
                    {
                        MiApp_RemoveConnection(i);
    1a70:	4b07      	ldr	r3, [pc, #28]	; (1a90 <Find_InActiveDevices+0x48>)
    1a72:	4798      	blx	r3
    1a74:	e002      	b.n	1a7c <Find_InActiveDevices+0x34>
                    }
                    else
                    {
                        link_stat[i] = 0; 
    1a76:	19e3      	adds	r3, r4, r7
    1a78:	2200      	movs	r2, #0
    1a7a:	701a      	strb	r2, [r3, #0]
    1a7c:	3401      	adds	r4, #1
        
        
        void Find_InActiveDevices(void)
        {
            uint8_t i;
            for (i=0;i<CONNECTION_SIZE;i++)
    1a7e:	2c14      	cmp	r4, #20
    1a80:	d1e7      	bne.n	1a52 <Find_InActiveDevices+0xa>
                    {
                        link_stat[i] = 0; 
                    }
                }
            }
        }
    1a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a84:	2000039c 	.word	0x2000039c
    1a88:	200005c8 	.word	0x200005c8
    1a8c:	200004d8 	.word	0x200004d8
    1a90:	00001971 	.word	0x00001971

00001a94 <P2PTasks>:
 * Side Effects:    The stack receives, handles, buffers, and transmits 
 *                  packets.  It also handles all of the joining 
 * 
 ********************************************************************/
void P2PTasks(void)
{
    1a94:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a96:	4657      	mov	r7, sl
    1a98:	4646      	mov	r6, r8
    1a9a:	b4c0      	push	{r6, r7}
    1a9c:	b087      	sub	sp, #28
    MIWI_TICK   tmpTick;
            


    #if defined(PROTOCOL_STAR) 
        tick2 = MiWi_TickGet();
    1a9e:	4cd1      	ldr	r4, [pc, #836]	; (1de4 <P2PTasks+0x350>)
    1aa0:	47a0      	blx	r4
    1aa2:	4bd1      	ldr	r3, [pc, #836]	; (1de8 <P2PTasks+0x354>)
    1aa4:	6018      	str	r0, [r3, #0]
        tick3 = MiWi_TickGet();
    1aa6:	47a0      	blx	r4
    1aa8:	4bd0      	ldr	r3, [pc, #832]	; (1dec <P2PTasks+0x358>)
    1aaa:	6018      	str	r0, [r3, #0]
        #if defined(ENABLE_LINK_STATUS)
            if (role == PanCoordinator)
    1aac:	4bd0      	ldr	r3, [pc, #832]	; (1df0 <P2PTasks+0x35c>)
    1aae:	781b      	ldrb	r3, [r3, #0]
    1ab0:	2b00      	cmp	r3, #0
    1ab2:	d10d      	bne.n	1ad0 <P2PTasks+0x3c>
            {
                if( MiWi_TickGetDiff(tick3, tick4) > (FIND_INACTIVE_DEVICE_TIMEOUT))
    1ab4:	4acf      	ldr	r2, [pc, #828]	; (1df4 <P2PTasks+0x360>)
    1ab6:	6812      	ldr	r2, [r2, #0]
    1ab8:	1a83      	subs	r3, r0, r2
    1aba:	4acf      	ldr	r2, [pc, #828]	; (1df8 <P2PTasks+0x364>)
    1abc:	4293      	cmp	r3, r2
    1abe:	d800      	bhi.n	1ac2 <P2PTasks+0x2e>
    1ac0:	e255      	b.n	1f6e <P2PTasks+0x4da>
                {
                    Find_InActiveDevices ();
    1ac2:	4bce      	ldr	r3, [pc, #824]	; (1dfc <P2PTasks+0x368>)
    1ac4:	4798      	blx	r3
                    tick4 = tick3;
    1ac6:	4bc9      	ldr	r3, [pc, #804]	; (1dec <P2PTasks+0x358>)
    1ac8:	681a      	ldr	r2, [r3, #0]
    1aca:	4bca      	ldr	r3, [pc, #808]	; (1df4 <P2PTasks+0x360>)
    1acc:	601a      	str	r2, [r3, #0]
    1ace:	e00d      	b.n	1aec <P2PTasks+0x58>
                } 

            }
            else
            {
                if( MiWi_TickGetDiff(tick3, tick1) > (LINK_STATUS_TIMEOUT) )
    1ad0:	4bc6      	ldr	r3, [pc, #792]	; (1dec <P2PTasks+0x358>)
    1ad2:	681b      	ldr	r3, [r3, #0]
    1ad4:	4aca      	ldr	r2, [pc, #808]	; (1e00 <P2PTasks+0x36c>)
    1ad6:	6812      	ldr	r2, [r2, #0]
    1ad8:	1a9b      	subs	r3, r3, r2
    1ada:	4aca      	ldr	r2, [pc, #808]	; (1e04 <P2PTasks+0x370>)
    1adc:	4293      	cmp	r3, r2
    1ade:	d918      	bls.n	1b12 <P2PTasks+0x7e>
                {
                        send_link_status ();
    1ae0:	4bc9      	ldr	r3, [pc, #804]	; (1e08 <P2PTasks+0x374>)
    1ae2:	4798      	blx	r3
                        tick1 = tick3;
    1ae4:	4bc1      	ldr	r3, [pc, #772]	; (1dec <P2PTasks+0x358>)
    1ae6:	681a      	ldr	r2, [r3, #0]
    1ae8:	4bc5      	ldr	r3, [pc, #788]	; (1e00 <P2PTasks+0x36c>)
    1aea:	601a      	str	r2, [r3, #0]
                }
            }
        #endif

        #if defined(ENABLE_PERIODIC_CONNECTIONTABLE_SHARE)
            if( MiWi_TickGetDiff(tick2, tick1) > (SHARE_PEER_DEVICE_INFO_TIMEOUT) && role == PanCoordinator)
    1aec:	4bbe      	ldr	r3, [pc, #760]	; (1de8 <P2PTasks+0x354>)
    1aee:	681b      	ldr	r3, [r3, #0]
    1af0:	4ac3      	ldr	r2, [pc, #780]	; (1e00 <P2PTasks+0x36c>)
    1af2:	6812      	ldr	r2, [r2, #0]
    1af4:	1a9b      	subs	r3, r3, r2
    1af6:	229b      	movs	r2, #155	; 0x9b
    1af8:	00d2      	lsls	r2, r2, #3
    1afa:	4293      	cmp	r3, r2
    1afc:	d909      	bls.n	1b12 <P2PTasks+0x7e>
    1afe:	4bbc      	ldr	r3, [pc, #752]	; (1df0 <P2PTasks+0x35c>)
    1b00:	781b      	ldrb	r3, [r3, #0]
    1b02:	2b00      	cmp	r3, #0
    1b04:	d105      	bne.n	1b12 <P2PTasks+0x7e>
            {
                MiApp_BroadcastConnectionTable ();
    1b06:	4bc1      	ldr	r3, [pc, #772]	; (1e0c <P2PTasks+0x378>)
    1b08:	4798      	blx	r3
                tick1 = tick2;
    1b0a:	4bb7      	ldr	r3, [pc, #732]	; (1de8 <P2PTasks+0x354>)
    1b0c:	681a      	ldr	r2, [r3, #0]
    1b0e:	4bbc      	ldr	r3, [pc, #752]	; (1e00 <P2PTasks+0x36c>)
    1b10:	601a      	str	r2, [r3, #0]
            TimeSyncSlot = 0;
        }    
    #endif

  // Check if transceiver receive any message.
    if( P2PStatus.bits.RxHasUserData == 0 && MiMAC_ReceivedPacket() )
    1b12:	4bbf      	ldr	r3, [pc, #764]	; (1e10 <P2PTasks+0x37c>)
    1b14:	781b      	ldrb	r3, [r3, #0]
    1b16:	071b      	lsls	r3, r3, #28
    1b18:	d500      	bpl.n	1b1c <P2PTasks+0x88>
    1b1a:	e242      	b.n	1fa2 <P2PTasks+0x50e>
    1b1c:	4bbd      	ldr	r3, [pc, #756]	; (1e14 <P2PTasks+0x380>)
    1b1e:	4798      	blx	r3
    1b20:	2800      	cmp	r0, #0
    1b22:	d100      	bne.n	1b26 <P2PTasks+0x92>
    1b24:	e23d      	b.n	1fa2 <P2PTasks+0x50e>
    {
        rxMessage.flags.Val = 0;
        //rxMessage.flags.bits.broadcast = MACRxPacket.flags.bits.broadcast;
        
            temp_bit = MACRxPacket.flags.bits.broadcast;
    1b26:	4bbc      	ldr	r3, [pc, #752]	; (1e18 <P2PTasks+0x384>)
    1b28:	7819      	ldrb	r1, [r3, #0]
    1b2a:	074a      	lsls	r2, r1, #29
    1b2c:	0fd2      	lsrs	r2, r2, #31
    1b2e:	4bbb      	ldr	r3, [pc, #748]	; (1e1c <P2PTasks+0x388>)
    1b30:	701a      	strb	r2, [r3, #0]
            rxMessage.flags.bits.broadcast = temp_bit;
    1b32:	2303      	movs	r3, #3

        rxMessage.flags.bits.secEn = MACRxPacket.flags.bits.secEn;
    1b34:	08cc      	lsrs	r4, r1, #3
    1b36:	2501      	movs	r5, #1
    1b38:	402c      	ands	r4, r5
    1b3a:	00e4      	lsls	r4, r4, #3
    1b3c:	0010      	movs	r0, r2
    1b3e:	4018      	ands	r0, r3
        rxMessage.flags.bits.command = (MACRxPacket.flags.bits.packetType == PACKET_TYPE_COMMAND) ? 1:0;
    1b40:	400b      	ands	r3, r1
    1b42:	001a      	movs	r2, r3
    1b44:	3a01      	subs	r2, #1
    1b46:	4253      	negs	r3, r2
    1b48:	415a      	adcs	r2, r3
    1b4a:	402a      	ands	r2, r5
    1b4c:	0152      	lsls	r2, r2, #5
    1b4e:	0003      	movs	r3, r0
    1b50:	4323      	orrs	r3, r4
        rxMessage.flags.bits.srcPrsnt = MACRxPacket.flags.bits.sourcePrsnt;
    1b52:	09c8      	lsrs	r0, r1, #7
    1b54:	4028      	ands	r0, r5
    1b56:	0180      	lsls	r0, r0, #6
    1b58:	4313      	orrs	r3, r2
    1b5a:	4303      	orrs	r3, r0
    1b5c:	4ab0      	ldr	r2, [pc, #704]	; (1e20 <P2PTasks+0x38c>)
    1b5e:	7013      	strb	r3, [r2, #0]
        if( MACRxPacket.flags.bits.sourcePrsnt )
    1b60:	09c9      	lsrs	r1, r1, #7
    1b62:	d003      	beq.n	1b6c <P2PTasks+0xd8>
        {
            rxMessage.SourceAddress = MACRxPacket.SourceAddress;
    1b64:	4bac      	ldr	r3, [pc, #688]	; (1e18 <P2PTasks+0x384>)
    1b66:	685a      	ldr	r2, [r3, #4]
    1b68:	4bad      	ldr	r3, [pc, #692]	; (1e20 <P2PTasks+0x38c>)
    1b6a:	605a      	str	r2, [r3, #4]
        }
        #if defined(IEEE_802_15_4) && !defined(TARGET_SMALL)
            rxMessage.SourcePANID.Val = MACRxPacket.SourcePANID.Val;
    1b6c:	4aaa      	ldr	r2, [pc, #680]	; (1e18 <P2PTasks+0x384>)
    1b6e:	8a10      	ldrh	r0, [r2, #16]
    1b70:	4bab      	ldr	r3, [pc, #684]	; (1e20 <P2PTasks+0x38c>)
    1b72:	8058      	strh	r0, [r3, #2]
        #endif

        rxMessage.PayloadSize = MACRxPacket.PayloadLen;
    1b74:	7b11      	ldrb	r1, [r2, #12]
    1b76:	7319      	strb	r1, [r3, #12]
        rxMessage.Payload = MACRxPacket.Payload;
    1b78:	6894      	ldr	r4, [r2, #8]
    1b7a:	609c      	str	r4, [r3, #8]
               
        
        /************************/
      
        #ifndef TARGET_SMALL
            rxMessage.PacketLQI = MACRxPacket.LQIValue;
    1b7c:	7b95      	ldrb	r5, [r2, #14]
    1b7e:	739d      	strb	r5, [r3, #14]
            rxMessage.PacketRSSI = MACRxPacket.RSSIValue;
    1b80:	7b52      	ldrb	r2, [r2, #13]
    1b82:	735a      	strb	r2, [r3, #13]
        #endif

        if( rxMessage.flags.bits.command )
    1b84:	781b      	ldrb	r3, [r3, #0]
    1b86:	069b      	lsls	r3, r3, #26
    1b88:	d400      	bmi.n	1b8c <P2PTasks+0xf8>
    1b8a:	e1d7      	b.n	1f3c <P2PTasks+0x4a8>
        {
            // if comes here, we know it is a command frame
            switch( rxMessage.Payload[0] )
    1b8c:	7823      	ldrb	r3, [r4, #0]
    1b8e:	3b77      	subs	r3, #119	; 0x77
    1b90:	b2da      	uxtb	r2, r3
    1b92:	2a63      	cmp	r2, #99	; 0x63
    1b94:	d900      	bls.n	1b98 <P2PTasks+0x104>
    1b96:	e1cb      	b.n	1f30 <P2PTasks+0x49c>
    1b98:	0093      	lsls	r3, r2, #2
    1b9a:	4aa2      	ldr	r2, [pc, #648]	; (1e24 <P2PTasks+0x390>)
    1b9c:	58d3      	ldr	r3, [r2, r3]
    1b9e:	469f      	mov	pc, r3
                #if defined(ENABLE_HAND_SHAKE)
              
                    case CMD_P2P_CONNECTION_REQUEST:
                        {
                            #if defined(PROTOCOL_STAR)
                                if(role == PanCoordinator)   // Important if implementing a star network
    1ba0:	4b93      	ldr	r3, [pc, #588]	; (1df0 <P2PTasks+0x35c>)
    1ba2:	781b      	ldrb	r3, [r3, #0]
    1ba4:	2b00      	cmp	r3, #0
    1ba6:	d162      	bne.n	1c6e <P2PTasks+0x1da>
                                
                                uint8_t status = STATUS_SUCCESS;
                                
                                // if channel does not math, it may be a 
                                // sub-harmonics signal, ignore the request
                                if( currentChannel != rxMessage.Payload[1] )
    1ba8:	7862      	ldrb	r2, [r4, #1]
    1baa:	4b9f      	ldr	r3, [pc, #636]	; (1e28 <P2PTasks+0x394>)
    1bac:	781b      	ldrb	r3, [r3, #0]
    1bae:	429a      	cmp	r2, r3
    1bb0:	d002      	beq.n	1bb8 <P2PTasks+0x124>
                                {
                                    MiMAC_DiscardPacket();
    1bb2:	4b9e      	ldr	r3, [pc, #632]	; (1e2c <P2PTasks+0x398>)
    1bb4:	4798      	blx	r3
                                    break;
    1bb6:	e1c6      	b.n	1f46 <P2PTasks+0x4b2>
                                }
                                
                                // if new connection is not allowed, ignore 
                                // the request
                                if( ConnMode == DISABLE_ALL_CONN )
    1bb8:	4b9d      	ldr	r3, [pc, #628]	; (1e30 <P2PTasks+0x39c>)
    1bba:	781b      	ldrb	r3, [r3, #0]
    1bbc:	2b03      	cmp	r3, #3
    1bbe:	d102      	bne.n	1bc6 <P2PTasks+0x132>
                                { 
                                    MiMAC_DiscardPacket();
    1bc0:	4b9a      	ldr	r3, [pc, #616]	; (1e2c <P2PTasks+0x398>)
    1bc2:	4798      	blx	r3
                                    break;
    1bc4:	e1bf      	b.n	1f46 <P2PTasks+0x4b2>
                                }
                                
                                #if !defined(TARGET_SMALL) && defined(IEEE_802_15_4)
                                    // if PANID does not match, ignore the request
                                    if( rxMessage.SourcePANID.Val != 0xFFFF &&
    1bc6:	4b9b      	ldr	r3, [pc, #620]	; (1e34 <P2PTasks+0x3a0>)
    1bc8:	4298      	cmp	r0, r3
    1bca:	d007      	beq.n	1bdc <P2PTasks+0x148>
                                        rxMessage.SourcePANID.Val != myPANID.Val &&
    1bcc:	4b9a      	ldr	r3, [pc, #616]	; (1e38 <P2PTasks+0x3a4>)
                                    break;
                                }
                                
                                #if !defined(TARGET_SMALL) && defined(IEEE_802_15_4)
                                    // if PANID does not match, ignore the request
                                    if( rxMessage.SourcePANID.Val != 0xFFFF &&
    1bce:	881b      	ldrh	r3, [r3, #0]
    1bd0:	4283      	cmp	r3, r0
    1bd2:	d003      	beq.n	1bdc <P2PTasks+0x148>
                                        rxMessage.SourcePANID.Val != myPANID.Val &&
                                        rxMessage.PayloadSize > 2)
                                    {
                                        status = STATUS_NOT_SAME_PAN;
    1bd4:	23f2      	movs	r3, #242	; 0xf2
    1bd6:	4698      	mov	r8, r3
                                }
                                
                                #if !defined(TARGET_SMALL) && defined(IEEE_802_15_4)
                                    // if PANID does not match, ignore the request
                                    if( rxMessage.SourcePANID.Val != 0xFFFF &&
                                        rxMessage.SourcePANID.Val != myPANID.Val &&
    1bd8:	2902      	cmp	r1, #2
    1bda:	d802      	bhi.n	1be2 <P2PTasks+0x14e>
                                    else
                                #endif
                                {
                                    // request accepted, try to add the requesting
                                    // device into P2P Connection Entry
                                    status = AddConnection();
    1bdc:	4b97      	ldr	r3, [pc, #604]	; (1e3c <P2PTasks+0x3a8>)
    1bde:	4798      	blx	r3
    1be0:	4680      	mov	r8, r0
                                }
                                #if defined(PROTOCOL_STAR) && defined(ENABLE_LINK_STATUS) 
                                    uint8_t p;
                                    if (rxMessage.Payload[3] == 0xAA)
    1be2:	4b8f      	ldr	r3, [pc, #572]	; (1e20 <P2PTasks+0x38c>)
    1be4:	689b      	ldr	r3, [r3, #8]
    1be6:	78db      	ldrb	r3, [r3, #3]
    1be8:	2baa      	cmp	r3, #170	; 0xaa
    1bea:	d113      	bne.n	1c14 <P2PTasks+0x180>
                                    {
 
                                        for (p = 0 ;p <CONNECTION_SIZE;p++)
                                        {
                                            if (isSameAddress(rxMessage.SourceAddress, ConnectionTable[p].Address) )
    1bec:	4b8c      	ldr	r3, [pc, #560]	; (1e20 <P2PTasks+0x38c>)
    1bee:	685b      	ldr	r3, [r3, #4]
    1bf0:	9302      	str	r3, [sp, #8]
    1bf2:	4c93      	ldr	r4, [pc, #588]	; (1e40 <P2PTasks+0x3ac>)
    1bf4:	4d93      	ldr	r5, [pc, #588]	; (1e44 <P2PTasks+0x3b0>)
    1bf6:	4e94      	ldr	r6, [pc, #592]	; (1e48 <P2PTasks+0x3b4>)
    1bf8:	4f94      	ldr	r7, [pc, #592]	; (1e4c <P2PTasks+0x3b8>)
                                            {
                                               permanent_connections[p] = 0xFF;
    1bfa:	23ff      	movs	r3, #255	; 0xff
    1bfc:	469a      	mov	sl, r3
                                    if (rxMessage.Payload[3] == 0xAA)
                                    {
 
                                        for (p = 0 ;p <CONNECTION_SIZE;p++)
                                        {
                                            if (isSameAddress(rxMessage.SourceAddress, ConnectionTable[p].Address) )
    1bfe:	0021      	movs	r1, r4
    1c00:	9802      	ldr	r0, [sp, #8]
    1c02:	47b8      	blx	r7
    1c04:	2800      	cmp	r0, #0
    1c06:	d001      	beq.n	1c0c <P2PTasks+0x178>
                                            {
                                               permanent_connections[p] = 0xFF;
    1c08:	4653      	mov	r3, sl
    1c0a:	702b      	strb	r3, [r5, #0]
    1c0c:	340e      	adds	r4, #14
    1c0e:	3501      	adds	r5, #1
                                #if defined(PROTOCOL_STAR) && defined(ENABLE_LINK_STATUS) 
                                    uint8_t p;
                                    if (rxMessage.Payload[3] == 0xAA)
                                    {
 
                                        for (p = 0 ;p <CONNECTION_SIZE;p++)
    1c10:	42b4      	cmp	r4, r6
    1c12:	d1f4      	bne.n	1bfe <P2PTasks+0x16a>
                                            }

                                        }
                                    }
                                #endif
                                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    1c14:	4b86      	ldr	r3, [pc, #536]	; (1e30 <P2PTasks+0x39c>)
    1c16:	781b      	ldrb	r3, [r3, #0]
    1c18:	2b01      	cmp	r3, #1
    1c1a:	d105      	bne.n	1c28 <P2PTasks+0x194>
    1c1c:	4643      	mov	r3, r8
    1c1e:	3b01      	subs	r3, #1
    1c20:	b2db      	uxtb	r3, r3
    1c22:	2b01      	cmp	r3, #1
    1c24:	d900      	bls.n	1c28 <P2PTasks+0x194>
    1c26:	e1ad      	b.n	1f84 <P2PTasks+0x4f0>
                                }
                                    
                                
                                // prepare the P2P_CONNECTION_RESPONSE command
                                MiApp_FlushTx();
                                MiApp_WriteData(CMD_P2P_CONNECTION_RESPONSE);
    1c28:	4b89      	ldr	r3, [pc, #548]	; (1e50 <P2PTasks+0x3bc>)
    1c2a:	2291      	movs	r2, #145	; 0x91
    1c2c:	701a      	strb	r2, [r3, #0]
                                MiApp_WriteData(status);
    1c2e:	4642      	mov	r2, r8
    1c30:	705a      	strb	r2, [r3, #1]
                                MiApp_WriteData(MyindexinPC);
    1c32:	2103      	movs	r1, #3
    1c34:	4a87      	ldr	r2, [pc, #540]	; (1e54 <P2PTasks+0x3c0>)
    1c36:	7011      	strb	r1, [r2, #0]
    1c38:	4a87      	ldr	r2, [pc, #540]	; (1e58 <P2PTasks+0x3c4>)
    1c3a:	7812      	ldrb	r2, [r2, #0]
    1c3c:	709a      	strb	r2, [r3, #2]
                                if( status == STATUS_SUCCESS ||
    1c3e:	4643      	mov	r3, r8
    1c40:	2b01      	cmp	r3, #1
    1c42:	d806      	bhi.n	1c52 <P2PTasks+0x1be>
                                    status == STATUS_EXISTS )
                                {
                                    MiApp_WriteData(P2PCapacityInfo);
    1c44:	2204      	movs	r2, #4
    1c46:	4b83      	ldr	r3, [pc, #524]	; (1e54 <P2PTasks+0x3c0>)
    1c48:	701a      	strb	r2, [r3, #0]
    1c4a:	4b84      	ldr	r3, [pc, #528]	; (1e5c <P2PTasks+0x3c8>)
    1c4c:	781a      	ldrb	r2, [r3, #0]
    1c4e:	4b80      	ldr	r3, [pc, #512]	; (1e50 <P2PTasks+0x3bc>)
    1c50:	70da      	strb	r2, [r3, #3]
                                            MiApp_WriteData(AdditionalNodeID[i]);
                                        }
                                    #endif
                                }
                                
                                MiMAC_DiscardPacket();
    1c52:	4b76      	ldr	r3, [pc, #472]	; (1e2c <P2PTasks+0x398>)
    1c54:	4798      	blx	r3
                                        SendPacket(false, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
                                    #endif
                                #else
                                        
                                    #if defined(IEEE_802_15_4)
                                        SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
    1c56:	4b72      	ldr	r3, [pc, #456]	; (1e20 <P2PTasks+0x38c>)
    1c58:	685a      	ldr	r2, [r3, #4]
    1c5a:	8859      	ldrh	r1, [r3, #2]
    1c5c:	781b      	ldrb	r3, [r3, #0]
    1c5e:	071b      	lsls	r3, r3, #28
    1c60:	0fdb      	lsrs	r3, r3, #31
    1c62:	9300      	str	r3, [sp, #0]
    1c64:	2301      	movs	r3, #1
    1c66:	2000      	movs	r0, #0
    1c68:	4c7d      	ldr	r4, [pc, #500]	; (1e60 <P2PTasks+0x3cc>)
    1c6a:	47a0      	blx	r4
    1c6c:	e16b      	b.n	1f46 <P2PTasks+0x4b2>
                            #endif
							
							#if defined(PROTOCOL_STAR)
                              else
                              {
                                  MiMAC_DiscardPacket();
    1c6e:	4b6f      	ldr	r3, [pc, #444]	; (1e2c <P2PTasks+0x398>)
    1c70:	4798      	blx	r3
    1c72:	e168      	b.n	1f46 <P2PTasks+0x4b2>
                        }
                        break; 
               
                    case CMD_P2P_ACTIVE_SCAN_REQUEST:
                        {
                            if(ConnMode > ENABLE_ACTIVE_SCAN_RSP)
    1c74:	4b6e      	ldr	r3, [pc, #440]	; (1e30 <P2PTasks+0x39c>)
    1c76:	781b      	ldrb	r3, [r3, #0]
    1c78:	2b02      	cmp	r3, #2
    1c7a:	d902      	bls.n	1c82 <P2PTasks+0x1ee>
                            {
                                MiMAC_DiscardPacket();
    1c7c:	4b6b      	ldr	r3, [pc, #428]	; (1e2c <P2PTasks+0x398>)
    1c7e:	4798      	blx	r3
                                break;
    1c80:	e161      	b.n	1f46 <P2PTasks+0x4b2>
                            }
                            if( currentChannel != rxMessage.Payload[1] )
    1c82:	7862      	ldrb	r2, [r4, #1]
    1c84:	4b68      	ldr	r3, [pc, #416]	; (1e28 <P2PTasks+0x394>)
    1c86:	781b      	ldrb	r3, [r3, #0]
    1c88:	429a      	cmp	r2, r3
    1c8a:	d002      	beq.n	1c92 <P2PTasks+0x1fe>
                            {
                                MiMAC_DiscardPacket();
    1c8c:	4b67      	ldr	r3, [pc, #412]	; (1e2c <P2PTasks+0x398>)
    1c8e:	4798      	blx	r3
                                break;
    1c90:	e159      	b.n	1f46 <P2PTasks+0x4b2>
                            }
                            
                            MiApp_FlushTx();
                            MiApp_WriteData(CMD_P2P_ACTIVE_SCAN_RESPONSE);
    1c92:	4b6f      	ldr	r3, [pc, #444]	; (1e50 <P2PTasks+0x3bc>)
    1c94:	2297      	movs	r2, #151	; 0x97
    1c96:	701a      	strb	r2, [r3, #0]
                            MiApp_WriteData(P2PCapacityInfo);
    1c98:	2102      	movs	r1, #2
    1c9a:	4a6e      	ldr	r2, [pc, #440]	; (1e54 <P2PTasks+0x3c0>)
    1c9c:	7011      	strb	r1, [r2, #0]
    1c9e:	4a6f      	ldr	r2, [pc, #444]	; (1e5c <P2PTasks+0x3c8>)
    1ca0:	7812      	ldrb	r2, [r2, #0]
    1ca2:	705a      	strb	r2, [r3, #1]
                                for(i = 0; i < ADDITIONAL_NODE_ID_SIZE; i++)
                                {
                                    MiApp_WriteData(AdditionalNodeID[i]);
                                }
                            #endif
                            MiMAC_DiscardPacket();
    1ca4:	4b61      	ldr	r3, [pc, #388]	; (1e2c <P2PTasks+0x398>)
    1ca6:	4798      	blx	r3
                                #else
                                    SendPacket(false, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
                                #endif
                            #else
                                #if defined(IEEE_802_15_4)
                                    SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
    1ca8:	4b5d      	ldr	r3, [pc, #372]	; (1e20 <P2PTasks+0x38c>)
    1caa:	685a      	ldr	r2, [r3, #4]
    1cac:	8859      	ldrh	r1, [r3, #2]
    1cae:	781b      	ldrb	r3, [r3, #0]
    1cb0:	071b      	lsls	r3, r3, #28
    1cb2:	0fdb      	lsrs	r3, r3, #31
    1cb4:	9300      	str	r3, [sp, #0]
    1cb6:	2301      	movs	r3, #1
    1cb8:	2000      	movs	r0, #0
    1cba:	4c69      	ldr	r4, [pc, #420]	; (1e60 <P2PTasks+0x3cc>)
    1cbc:	47a0      	blx	r4
                                #else
                                    SendPacket(false, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
                                #endif
                            #endif
                        }
                        break;
    1cbe:	e142      	b.n	1f46 <P2PTasks+0x4b2>
                    
                    #ifndef TARGET_SMALL    
                    case CMD_P2P_CONNECTION_REMOVAL_REQUEST:
                        {         
                            MiApp_FlushTx();
                            MiApp_WriteData(CMD_P2P_CONNECTION_REMOVAL_RESPONSE);
    1cc0:	2201      	movs	r2, #1
    1cc2:	4b64      	ldr	r3, [pc, #400]	; (1e54 <P2PTasks+0x3c0>)
    1cc4:	701a      	strb	r2, [r3, #0]
    1cc6:	3291      	adds	r2, #145	; 0x91
    1cc8:	4b61      	ldr	r3, [pc, #388]	; (1e50 <P2PTasks+0x3bc>)
    1cca:	701a      	strb	r2, [r3, #0]
                            {
                                // if the record is valid
                                if( ConnectionTable[i].status.bits.isValid )
                                {
                                    // if the record is the same as the requesting device
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    1ccc:	4b54      	ldr	r3, [pc, #336]	; (1e20 <P2PTasks+0x38c>)
    1cce:	685b      	ldr	r3, [r3, #4]
    1cd0:	9303      	str	r3, [sp, #12]
    1cd2:	4e5b      	ldr	r6, [pc, #364]	; (1e40 <P2PTasks+0x3ac>)
    1cd4:	2400      	movs	r4, #0
                    case CMD_P2P_CONNECTION_REMOVAL_REQUEST:
                        {         
                            MiApp_FlushTx();
                            MiApp_WriteData(CMD_P2P_CONNECTION_REMOVAL_RESPONSE);

                            for(i = 0; i < CONNECTION_SIZE; i++)
    1cd6:	2700      	movs	r7, #0
                            {
                                // if the record is valid
                                if( ConnectionTable[i].status.bits.isValid )
    1cd8:	4d62      	ldr	r5, [pc, #392]	; (1e64 <P2PTasks+0x3d0>)
                                {
                                    // if the record is the same as the requesting device
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    1cda:	4b5c      	ldr	r3, [pc, #368]	; (1e4c <P2PTasks+0x3b8>)
    1cdc:	4698      	mov	r8, r3
                            MiApp_WriteData(CMD_P2P_CONNECTION_REMOVAL_RESPONSE);

                            for(i = 0; i < CONNECTION_SIZE; i++)
                            {
                                // if the record is valid
                                if( ConnectionTable[i].status.bits.isValid )
    1cde:	9402      	str	r4, [sp, #8]
    1ce0:	00e3      	lsls	r3, r4, #3
    1ce2:	1b1b      	subs	r3, r3, r4
    1ce4:	005b      	lsls	r3, r3, #1
    1ce6:	18eb      	adds	r3, r5, r3
    1ce8:	7b1b      	ldrb	r3, [r3, #12]
    1cea:	09db      	lsrs	r3, r3, #7
    1cec:	d016      	beq.n	1d1c <P2PTasks+0x288>
                                {
                                    // if the record is the same as the requesting device
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    1cee:	0031      	movs	r1, r6
    1cf0:	9803      	ldr	r0, [sp, #12]
    1cf2:	47c0      	blx	r8
    1cf4:	2800      	cmp	r0, #0
    1cf6:	d011      	beq.n	1d1c <P2PTasks+0x288>
                                    {
                                        // find the record. disable the record and
                                        // set status to be SUCCESS
                                        ConnectionTable[i].status.Val = 0;
    1cf8:	9a02      	ldr	r2, [sp, #8]
    1cfa:	00d3      	lsls	r3, r2, #3
    1cfc:	1a9d      	subs	r5, r3, r2
    1cfe:	006d      	lsls	r5, r5, #1
    1d00:	4b58      	ldr	r3, [pc, #352]	; (1e64 <P2PTasks+0x3d0>)
    1d02:	195b      	adds	r3, r3, r5
    1d04:	2200      	movs	r2, #0
    1d06:	731a      	strb	r2, [r3, #12]
                                        #if defined(ENABLE_NETWORK_FREEZER)
                                            nvmPutConnectionTableIndex(&(ConnectionTable[i]), i);
                                        #endif
                                        MiApp_WriteData(STATUS_SUCCESS);
    1d08:	2102      	movs	r1, #2
    1d0a:	4b52      	ldr	r3, [pc, #328]	; (1e54 <P2PTasks+0x3c0>)
    1d0c:	7019      	strb	r1, [r3, #0]
    1d0e:	4b50      	ldr	r3, [pc, #320]	; (1e50 <P2PTasks+0x3bc>)
    1d10:	705a      	strb	r2, [r3, #1]
                                        break;
                                    }
                                } 
                            }

                            MiMAC_DiscardPacket();
    1d12:	4b46      	ldr	r3, [pc, #280]	; (1e2c <P2PTasks+0x398>)
    1d14:	4798      	blx	r3

                            if( i == CONNECTION_SIZE ) 
    1d16:	2f14      	cmp	r7, #20
    1d18:	d10e      	bne.n	1d38 <P2PTasks+0x2a4>
    1d1a:	e006      	b.n	1d2a <P2PTasks+0x296>
                    case CMD_P2P_CONNECTION_REMOVAL_REQUEST:
                        {         
                            MiApp_FlushTx();
                            MiApp_WriteData(CMD_P2P_CONNECTION_REMOVAL_RESPONSE);

                            for(i = 0; i < CONNECTION_SIZE; i++)
    1d1c:	3701      	adds	r7, #1
    1d1e:	b2ff      	uxtb	r7, r7
    1d20:	3401      	adds	r4, #1
    1d22:	360e      	adds	r6, #14
    1d24:	2f14      	cmp	r7, #20
    1d26:	d1da      	bne.n	1cde <P2PTasks+0x24a>
    1d28:	e138      	b.n	1f9c <P2PTasks+0x508>
                            MiMAC_DiscardPacket();

                            if( i == CONNECTION_SIZE ) 
                            {
                                // not found, the requesting device is not my peer
                                MiApp_WriteData(STATUS_ENTRY_NOT_EXIST);
    1d2a:	4a4a      	ldr	r2, [pc, #296]	; (1e54 <P2PTasks+0x3c0>)
    1d2c:	7813      	ldrb	r3, [r2, #0]
    1d2e:	1c59      	adds	r1, r3, #1
    1d30:	7011      	strb	r1, [r2, #0]
    1d32:	21f0      	movs	r1, #240	; 0xf0
    1d34:	4a46      	ldr	r2, [pc, #280]	; (1e50 <P2PTasks+0x3bc>)
    1d36:	54d1      	strb	r1, [r2, r3]
                                #else
                                    SendPacket(false, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
                                #endif
                            #else
                                #if defined(IEEE_802_15_4)
                                    SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
    1d38:	4b39      	ldr	r3, [pc, #228]	; (1e20 <P2PTasks+0x38c>)
    1d3a:	685a      	ldr	r2, [r3, #4]
    1d3c:	8859      	ldrh	r1, [r3, #2]
    1d3e:	781b      	ldrb	r3, [r3, #0]
    1d40:	071b      	lsls	r3, r3, #28
    1d42:	0fdb      	lsrs	r3, r3, #31
    1d44:	9300      	str	r3, [sp, #0]
    1d46:	2301      	movs	r3, #1
    1d48:	2000      	movs	r0, #0
    1d4a:	4c45      	ldr	r4, [pc, #276]	; (1e60 <P2PTasks+0x3cc>)
    1d4c:	47a0      	blx	r4
                                    SendPacket(false, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
                                #endif
                            #endif

                        }
                            break;
    1d4e:	e0fa      	b.n	1f46 <P2PTasks+0x4b2>
                    #endif
                    
                    case CMD_P2P_CONNECTION_RESPONSE:
                        {
                            switch( rxMessage.Payload[1] )
    1d50:	7863      	ldrb	r3, [r4, #1]
    1d52:	2b01      	cmp	r3, #1
    1d54:	d816      	bhi.n	1d84 <P2PTasks+0x2f0>
                            {              
                                case STATUS_SUCCESS:
                                case STATUS_EXISTS:
                                    #if defined(IEEE_802_15_4)
                                        if( myPANID.Val == 0xFFFF )
    1d56:	4b38      	ldr	r3, [pc, #224]	; (1e38 <P2PTasks+0x3a4>)
    1d58:	881a      	ldrh	r2, [r3, #0]
    1d5a:	4b36      	ldr	r3, [pc, #216]	; (1e34 <P2PTasks+0x3a0>)
    1d5c:	429a      	cmp	r2, r3
    1d5e:	d10a      	bne.n	1d76 <P2PTasks+0x2e2>
                                        {
                                            myPANID.Val = rxMessage.SourcePANID.Val;
    1d60:	4935      	ldr	r1, [pc, #212]	; (1e38 <P2PTasks+0x3a4>)
    1d62:	8008      	strh	r0, [r1, #0]
                                            {
                                                uint16_t tmp = 0xFFFF;
    1d64:	200e      	movs	r0, #14
    1d66:	ab02      	add	r3, sp, #8
    1d68:	469c      	mov	ip, r3
    1d6a:	4460      	add	r0, ip
    1d6c:	2301      	movs	r3, #1
    1d6e:	425b      	negs	r3, r3
    1d70:	8003      	strh	r3, [r0, #0]
                                                MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    1d72:	4b3d      	ldr	r3, [pc, #244]	; (1e68 <P2PTasks+0x3d4>)
    1d74:	4798      	blx	r3
                                            #if defined(ENABLE_NETWORK_FREEZER)
                                                nvmPutMyPANID(myPANID.v);
                                            #endif
                                        }
                                    #endif
                                    AddConnection();
    1d76:	4b31      	ldr	r3, [pc, #196]	; (1e3c <P2PTasks+0x3a8>)
    1d78:	4798      	blx	r3
                                    #if defined(PROTOCOL_STAR)
                                        myConnectionIndex_in_PanCo = rxMessage.Payload[2];
    1d7a:	4b29      	ldr	r3, [pc, #164]	; (1e20 <P2PTasks+0x38c>)
    1d7c:	689b      	ldr	r3, [r3, #8]
    1d7e:	789a      	ldrb	r2, [r3, #2]
    1d80:	4b3a      	ldr	r3, [pc, #232]	; (1e6c <P2PTasks+0x3d8>)
    1d82:	701a      	strb	r2, [r3, #0]
                                    break;
                                default:
                                    break;
                            }                        
                        }
                        MiMAC_DiscardPacket();
    1d84:	4b29      	ldr	r3, [pc, #164]	; (1e2c <P2PTasks+0x398>)
    1d86:	4798      	blx	r3
                        break; 
    1d88:	e0dd      	b.n	1f46 <P2PTasks+0x4b2>
                    
                    
                    case CMD_P2P_ACTIVE_SCAN_RESPONSE:
                        {
                            if( P2PStatus.bits.Resync )
    1d8a:	4b21      	ldr	r3, [pc, #132]	; (1e10 <P2PTasks+0x37c>)
    1d8c:	781b      	ldrb	r3, [r3, #0]
    1d8e:	069b      	lsls	r3, r3, #26
    1d90:	d504      	bpl.n	1d9c <P2PTasks+0x308>
                            {
                                P2PStatus.bits.Resync = 0;   
    1d92:	4a1f      	ldr	r2, [pc, #124]	; (1e10 <P2PTasks+0x37c>)
    1d94:	7813      	ldrb	r3, [r2, #0]
    1d96:	2120      	movs	r1, #32
    1d98:	438b      	bics	r3, r1
    1d9a:	7013      	strb	r3, [r2, #0]
                                        ActiveScanResultIndex++;
                                    }
                                }
                            #endif

                            MiMAC_DiscardPacket(); 
    1d9c:	4b23      	ldr	r3, [pc, #140]	; (1e2c <P2PTasks+0x398>)
    1d9e:	4798      	blx	r3
                        }
                        break;                
    1da0:	e0d1      	b.n	1f46 <P2PTasks+0x4b2>
                    
                    #ifndef TARGET_SMALL
                    case CMD_P2P_CONNECTION_REMOVAL_RESPONSE:
                        {
                            if( rxMessage.Payload[1] == STATUS_SUCCESS )
    1da2:	7863      	ldrb	r3, [r4, #1]
    1da4:	2b00      	cmp	r3, #0
    1da6:	d167      	bne.n	1e78 <P2PTasks+0x3e4>
                                {
                                    // if the record is valid
                                    if( ConnectionTable[i].status.bits.isValid )
                                    {
                                        // if the record address is the same as the requesting device
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    1da8:	4b1d      	ldr	r3, [pc, #116]	; (1e20 <P2PTasks+0x38c>)
    1daa:	685b      	ldr	r3, [r3, #4]
    1dac:	9303      	str	r3, [sp, #12]
    1dae:	4f24      	ldr	r7, [pc, #144]	; (1e40 <P2PTasks+0x3ac>)
    1db0:	2600      	movs	r6, #0
                            if( rxMessage.Payload[1] == STATUS_SUCCESS )
                            {
                                for(i = 0; i < CONNECTION_SIZE; i++)
                                {
                                    // if the record is valid
                                    if( ConnectionTable[i].status.bits.isValid )
    1db2:	4c2c      	ldr	r4, [pc, #176]	; (1e64 <P2PTasks+0x3d0>)
                                    {
                                        // if the record address is the same as the requesting device
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    1db4:	4d25      	ldr	r5, [pc, #148]	; (1e4c <P2PTasks+0x3b8>)
                            if( rxMessage.Payload[1] == STATUS_SUCCESS )
                            {
                                for(i = 0; i < CONNECTION_SIZE; i++)
                                {
                                    // if the record is valid
                                    if( ConnectionTable[i].status.bits.isValid )
    1db6:	9602      	str	r6, [sp, #8]
    1db8:	00f3      	lsls	r3, r6, #3
    1dba:	1b9b      	subs	r3, r3, r6
    1dbc:	005b      	lsls	r3, r3, #1
    1dbe:	18e3      	adds	r3, r4, r3
    1dc0:	7b1b      	ldrb	r3, [r3, #12]
    1dc2:	09db      	lsrs	r3, r3, #7
    1dc4:	d054      	beq.n	1e70 <P2PTasks+0x3dc>
                                    {
                                        // if the record address is the same as the requesting device
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    1dc6:	0039      	movs	r1, r7
    1dc8:	9803      	ldr	r0, [sp, #12]
    1dca:	47a8      	blx	r5
    1dcc:	2800      	cmp	r0, #0
    1dce:	d04f      	beq.n	1e70 <P2PTasks+0x3dc>
                                        {
                                            // invalidate the record
                                            ConnectionTable[i].status.Val = 0;
    1dd0:	9a02      	ldr	r2, [sp, #8]
    1dd2:	00d3      	lsls	r3, r2, #3
    1dd4:	1a9c      	subs	r4, r3, r2
    1dd6:	0064      	lsls	r4, r4, #1
    1dd8:	4b22      	ldr	r3, [pc, #136]	; (1e64 <P2PTasks+0x3d0>)
    1dda:	191b      	adds	r3, r3, r4
    1ddc:	2200      	movs	r2, #0
    1dde:	731a      	strb	r2, [r3, #12]
                                            #if defined(ENABLE_NETWORK_FREEZER)
                                                nvmPutConnectionTableIndex(&(ConnectionTable[i]), i);
                                            #endif
                                            break;
    1de0:	e04a      	b.n	1e78 <P2PTasks+0x3e4>
    1de2:	46c0      	nop			; (mov r8, r8)
    1de4:	000023a1 	.word	0x000023a1
    1de8:	200004b8 	.word	0x200004b8
    1dec:	20000394 	.word	0x20000394
    1df0:	20000598 	.word	0x20000598
    1df4:	200004b4 	.word	0x200004b4
    1df8:	00009150 	.word	0x00009150
    1dfc:	00001a49 	.word	0x00001a49
    1e00:	2000059c 	.word	0x2000059c
    1e04:	00000744 	.word	0x00000744
    1e08:	00001629 	.word	0x00001629
    1e0c:	00001459 	.word	0x00001459
    1e10:	20000544 	.word	0x20000544
    1e14:	00000c39 	.word	0x00000c39
    1e18:	200004bc 	.word	0x200004bc
    1e1c:	200004ec 	.word	0x200004ec
    1e20:	200005dc 	.word	0x200005dc
    1e24:	00005e14 	.word	0x00005e14
    1e28:	20000131 	.word	0x20000131
    1e2c:	00000c1d 	.word	0x00000c1d
    1e30:	20000011 	.word	0x20000011
    1e34:	0000ffff 	.word	0x0000ffff
    1e38:	200004d4 	.word	0x200004d4
    1e3c:	00001871 	.word	0x00001871
    1e40:	200003a0 	.word	0x200003a0
    1e44:	200004d8 	.word	0x200004d8
    1e48:	200004b8 	.word	0x200004b8
    1e4c:	00001671 	.word	0x00001671
    1e50:	200005a0 	.word	0x200005a0
    1e54:	20000545 	.word	0x20000545
    1e58:	20000540 	.word	0x20000540
    1e5c:	200004d1 	.word	0x200004d1
    1e60:	00001321 	.word	0x00001321
    1e64:	2000039c 	.word	0x2000039c
    1e68:	0000045d 	.word	0x0000045d
    1e6c:	200004d0 	.word	0x200004d0
    1e70:	3601      	adds	r6, #1
    1e72:	370e      	adds	r7, #14
                    #ifndef TARGET_SMALL
                    case CMD_P2P_CONNECTION_REMOVAL_RESPONSE:
                        {
                            if( rxMessage.Payload[1] == STATUS_SUCCESS )
                            {
                                for(i = 0; i < CONNECTION_SIZE; i++)
    1e74:	2e14      	cmp	r6, #20
    1e76:	d19e      	bne.n	1db6 <P2PTasks+0x322>
                                        }
                                    } 
                                }
                            }
                        }
                        MiMAC_DiscardPacket();
    1e78:	4b4c      	ldr	r3, [pc, #304]	; (1fac <P2PTasks+0x518>)
    1e7a:	4798      	blx	r3
                        break;
    1e7c:	e063      	b.n	1f46 <P2PTasks+0x4b2>
                #endif

                #if defined (PROTOCOL_STAR)
                    case CMD_DATA_TO_ENDDEV_SUCCESS:
                        {
                            if (role == EndDevice)
    1e7e:	4b4c      	ldr	r3, [pc, #304]	; (1fb0 <P2PTasks+0x51c>)
    1e80:	781b      	ldrb	r3, [r3, #0]
    1e82:	2b01      	cmp	r3, #1
    1e84:	d105      	bne.n	1e92 <P2PTasks+0x3fe>
                            {
                                rec_ack = true;
    1e86:	2201      	movs	r2, #1
    1e88:	4b4a      	ldr	r3, [pc, #296]	; (1fb4 <P2PTasks+0x520>)
    1e8a:	701a      	strb	r2, [r3, #0]
                                MiMAC_DiscardPacket();
    1e8c:	4b47      	ldr	r3, [pc, #284]	; (1fac <P2PTasks+0x518>)
    1e8e:	4798      	blx	r3
    1e90:	e059      	b.n	1f46 <P2PTasks+0x4b2>
                            }
                            else
                            {
                                MiMAC_DiscardPacket();
    1e92:	4b46      	ldr	r3, [pc, #280]	; (1fac <P2PTasks+0x518>)
    1e94:	4798      	blx	r3
    1e96:	e056      	b.n	1f46 <P2PTasks+0x4b2>
                            }
                        }
                        break;
                    case CMD_SHARE_CONNECTION_TABLE:
                        {
                          if (role == EndDevice)
    1e98:	4b45      	ldr	r3, [pc, #276]	; (1fb0 <P2PTasks+0x51c>)
    1e9a:	781b      	ldrb	r3, [r3, #0]
    1e9c:	2b01      	cmp	r3, #1
    1e9e:	d109      	bne.n	1eb4 <P2PTasks+0x420>
                            {
                                // END_devices FFD|| RFD process this Packet
                                end_nodes = rxMessage.Payload[1]-1; 
    1ea0:	7863      	ldrb	r3, [r4, #1]
    1ea2:	3b01      	subs	r3, #1
    1ea4:	4a44      	ldr	r2, [pc, #272]	; (1fb8 <P2PTasks+0x524>)
    1ea6:	7013      	strb	r3, [r2, #0]
                                store_connection_tb(rxMessage.Payload);
    1ea8:	0020      	movs	r0, r4
    1eaa:	4b44      	ldr	r3, [pc, #272]	; (1fbc <P2PTasks+0x528>)
    1eac:	4798      	blx	r3
                                MiMAC_DiscardPacket();
    1eae:	4b3f      	ldr	r3, [pc, #252]	; (1fac <P2PTasks+0x518>)
    1eb0:	4798      	blx	r3
    1eb2:	e048      	b.n	1f46 <P2PTasks+0x4b2>
                            }
                          else
                              MiMAC_DiscardPacket();
    1eb4:	4b3d      	ldr	r3, [pc, #244]	; (1fac <P2PTasks+0x518>)
    1eb6:	4798      	blx	r3
    1eb8:	e045      	b.n	1f46 <P2PTasks+0x4b2>
                        }
                        break;

                    case CMD_FORWRD_PACKET:
                        {
                            if (role == PanCoordinator)
    1eba:	4b3d      	ldr	r3, [pc, #244]	; (1fb0 <P2PTasks+0x51c>)
    1ebc:	781b      	ldrb	r3, [r3, #0]
    1ebe:	2b00      	cmp	r3, #0
    1ec0:	d10f      	bne.n	1ee2 <P2PTasks+0x44e>
                            {
                                // PAN CO handles the Packet Forwards 
                                uint8_t final_index; // EDy Index which is the destination address
                                final_index = Find_Index(rxMessage.Payload); 
    1ec2:	0020      	movs	r0, r4
    1ec4:	4b3e      	ldr	r3, [pc, #248]	; (1fc0 <P2PTasks+0x52c>)
    1ec6:	4798      	blx	r3
                                if (final_index != 0xFF)
    1ec8:	28ff      	cmp	r0, #255	; 0xff
    1eca:	d007      	beq.n	1edc <P2PTasks+0x448>
                                {
                                    FW_Stat = Forward_Packet_PANCr_to_EDy (rxMessage.Payload , final_index , rxMessage.SourceAddress);
    1ecc:	4b3d      	ldr	r3, [pc, #244]	; (1fc4 <P2PTasks+0x530>)
    1ece:	685a      	ldr	r2, [r3, #4]
    1ed0:	0001      	movs	r1, r0
    1ed2:	0020      	movs	r0, r4
    1ed4:	4b3c      	ldr	r3, [pc, #240]	; (1fc8 <P2PTasks+0x534>)
    1ed6:	4798      	blx	r3
    1ed8:	4b3c      	ldr	r3, [pc, #240]	; (1fcc <P2PTasks+0x538>)
    1eda:	7018      	strb	r0, [r3, #0]
                                }

                                        MiMAC_DiscardPacket();
    1edc:	4b33      	ldr	r3, [pc, #204]	; (1fac <P2PTasks+0x518>)
    1ede:	4798      	blx	r3
    1ee0:	e031      	b.n	1f46 <P2PTasks+0x4b2>
                           }
                            
                            else
                                MiMAC_DiscardPacket();          
    1ee2:	4b32      	ldr	r3, [pc, #200]	; (1fac <P2PTasks+0x518>)
    1ee4:	4798      	blx	r3
    1ee6:	e02e      	b.n	1f46 <P2PTasks+0x4b2>
                        }
                        break;
                    #if defined(ENABLE_LINK_STATUS)
                        case CMD_IAM_ALIVE:
                        {
                            if (role == PanCoordinator)
    1ee8:	4b31      	ldr	r3, [pc, #196]	; (1fb0 <P2PTasks+0x51c>)
    1eea:	781b      	ldrb	r3, [r3, #0]
    1eec:	2b00      	cmp	r3, #0
    1eee:	d11c      	bne.n	1f2a <P2PTasks+0x496>
                            {
                                // PAN CP processes this packet to qualify it as alive , increments the link stat
                                uint8_t p;
                                for (p=0  ; p < CONNECTION_SIZE ; p++)
                                {
                                        if (ConnectionTable[p].Address[0] == rxMessage.SourceAddress[0] && ConnectionTable[p].Address[1] == rxMessage.SourceAddress[1]
    1ef0:	4b34      	ldr	r3, [pc, #208]	; (1fc4 <P2PTasks+0x530>)
    1ef2:	685f      	ldr	r7, [r3, #4]
    1ef4:	783c      	ldrb	r4, [r7, #0]
    1ef6:	4b36      	ldr	r3, [pc, #216]	; (1fd0 <P2PTasks+0x53c>)
    1ef8:	2200      	movs	r2, #0
    1efa:	0015      	movs	r5, r2
    1efc:	7819      	ldrb	r1, [r3, #0]
    1efe:	42a1      	cmp	r1, r4
    1f00:	d10c      	bne.n	1f1c <P2PTasks+0x488>
    1f02:	785e      	ldrb	r6, [r3, #1]
    1f04:	7879      	ldrb	r1, [r7, #1]
    1f06:	428e      	cmp	r6, r1
    1f08:	d108      	bne.n	1f1c <P2PTasks+0x488>
                                                && ConnectionTable[p].Address[2] == rxMessage.SourceAddress[2])
    1f0a:	7898      	ldrb	r0, [r3, #2]
    1f0c:	78b9      	ldrb	r1, [r7, #2]
    1f0e:	4288      	cmp	r0, r1
    1f10:	d104      	bne.n	1f1c <P2PTasks+0x488>
                                        {
                                            link_stat[p]++;
    1f12:	4a30      	ldr	r2, [pc, #192]	; (1fd4 <P2PTasks+0x540>)
    1f14:	5d53      	ldrb	r3, [r2, r5]
    1f16:	3301      	adds	r3, #1
    1f18:	5553      	strb	r3, [r2, r5]
                                            break;
    1f1a:	e003      	b.n	1f24 <P2PTasks+0x490>
    1f1c:	3201      	adds	r2, #1
    1f1e:	330e      	adds	r3, #14
                        {
                            if (role == PanCoordinator)
                            {
                                // PAN CP processes this packet to qualify it as alive , increments the link stat
                                uint8_t p;
                                for (p=0  ; p < CONNECTION_SIZE ; p++)
    1f20:	2a14      	cmp	r2, #20
    1f22:	d1ea      	bne.n	1efa <P2PTasks+0x466>
                                        {
                                            link_stat[p]++;
                                            break;
                                        }
                                }
                                MiMAC_DiscardPacket();
    1f24:	4b21      	ldr	r3, [pc, #132]	; (1fac <P2PTasks+0x518>)
    1f26:	4798      	blx	r3
    1f28:	e00d      	b.n	1f46 <P2PTasks+0x4b2>
                            }
                            else
                            {
                                MiMAC_DiscardPacket();
    1f2a:	4b20      	ldr	r3, [pc, #128]	; (1fac <P2PTasks+0x518>)
    1f2c:	4798      	blx	r3
    1f2e:	e00a      	b.n	1f46 <P2PTasks+0x4b2>
                #endif
                
                        
                default:
                    // let upper application layer to handle undefined command frame
                    P2PStatus.bits.RxHasUserData = 1;
    1f30:	4a29      	ldr	r2, [pc, #164]	; (1fd8 <P2PTasks+0x544>)
    1f32:	7811      	ldrb	r1, [r2, #0]
    1f34:	2308      	movs	r3, #8
    1f36:	430b      	orrs	r3, r1
    1f38:	7013      	strb	r3, [r2, #0]
                    break;
    1f3a:	e004      	b.n	1f46 <P2PTasks+0x4b2>
            }
        }
        else
        {
            P2PStatus.bits.RxHasUserData = 1;
    1f3c:	4a26      	ldr	r2, [pc, #152]	; (1fd8 <P2PTasks+0x544>)
    1f3e:	7811      	ldrb	r1, [r2, #0]
    1f40:	2308      	movs	r3, #8
    1f42:	430b      	orrs	r3, r1
    1f44:	7013      	strb	r3, [r2, #0]
            if( P2PStatus.bits.DataRequesting && P2PStatus.bits.RxHasUserData )
            {
                P2PStatus.bits.DataRequesting = 0;
            }
        #endif       
        if( rxMessage.PayloadSize == 0  || P2PStatus.bits.SearchConnection || P2PStatus.bits.Resync )
    1f46:	4b1f      	ldr	r3, [pc, #124]	; (1fc4 <P2PTasks+0x530>)
    1f48:	7b1b      	ldrb	r3, [r3, #12]
    1f4a:	2b00      	cmp	r3, #0
    1f4c:	d007      	beq.n	1f5e <P2PTasks+0x4ca>
    1f4e:	4b22      	ldr	r3, [pc, #136]	; (1fd8 <P2PTasks+0x544>)
    1f50:	781b      	ldrb	r3, [r3, #0]
    1f52:	06db      	lsls	r3, r3, #27
    1f54:	d403      	bmi.n	1f5e <P2PTasks+0x4ca>
    1f56:	4b20      	ldr	r3, [pc, #128]	; (1fd8 <P2PTasks+0x544>)
    1f58:	781b      	ldrb	r3, [r3, #0]
    1f5a:	069b      	lsls	r3, r3, #26
    1f5c:	d521      	bpl.n	1fa2 <P2PTasks+0x50e>
        {
            P2PStatus.bits.RxHasUserData = 0;
    1f5e:	4a1e      	ldr	r2, [pc, #120]	; (1fd8 <P2PTasks+0x544>)
    1f60:	7813      	ldrb	r3, [r2, #0]
    1f62:	2108      	movs	r1, #8
    1f64:	438b      	bics	r3, r1
    1f66:	7013      	strb	r3, [r2, #0]
            MiMAC_DiscardPacket();
    1f68:	4b10      	ldr	r3, [pc, #64]	; (1fac <P2PTasks+0x518>)
    1f6a:	4798      	blx	r3
        }   
            
    }   
}
    1f6c:	e019      	b.n	1fa2 <P2PTasks+0x50e>
                }
            }
        #endif

        #if defined(ENABLE_PERIODIC_CONNECTIONTABLE_SHARE)
            if( MiWi_TickGetDiff(tick2, tick1) > (SHARE_PEER_DEVICE_INFO_TIMEOUT) && role == PanCoordinator)
    1f6e:	4b1b      	ldr	r3, [pc, #108]	; (1fdc <P2PTasks+0x548>)
    1f70:	681b      	ldr	r3, [r3, #0]
    1f72:	4a1b      	ldr	r2, [pc, #108]	; (1fe0 <P2PTasks+0x54c>)
    1f74:	6812      	ldr	r2, [r2, #0]
    1f76:	1a9b      	subs	r3, r3, r2
    1f78:	229b      	movs	r2, #155	; 0x9b
    1f7a:	00d2      	lsls	r2, r2, #3
    1f7c:	4293      	cmp	r3, r2
    1f7e:	d800      	bhi.n	1f82 <P2PTasks+0x4ee>
    1f80:	e5c7      	b.n	1b12 <P2PTasks+0x7e>
    1f82:	e5c0      	b.n	1b06 <P2PTasks+0x72>
                                }
                                    
                                
                                // prepare the P2P_CONNECTION_RESPONSE command
                                MiApp_FlushTx();
                                MiApp_WriteData(CMD_P2P_CONNECTION_RESPONSE);
    1f84:	4b17      	ldr	r3, [pc, #92]	; (1fe4 <P2PTasks+0x550>)
    1f86:	2291      	movs	r2, #145	; 0x91
    1f88:	701a      	strb	r2, [r3, #0]
                                MiApp_WriteData(status);
    1f8a:	3262      	adds	r2, #98	; 0x62
    1f8c:	705a      	strb	r2, [r3, #1]
                                MiApp_WriteData(MyindexinPC);
    1f8e:	2103      	movs	r1, #3
    1f90:	4a15      	ldr	r2, [pc, #84]	; (1fe8 <P2PTasks+0x554>)
    1f92:	7011      	strb	r1, [r2, #0]
    1f94:	4a15      	ldr	r2, [pc, #84]	; (1fec <P2PTasks+0x558>)
    1f96:	7812      	ldrb	r2, [r2, #0]
    1f98:	709a      	strb	r2, [r3, #2]
    1f9a:	e65a      	b.n	1c52 <P2PTasks+0x1be>
                                        break;
                                    }
                                } 
                            }

                            MiMAC_DiscardPacket();
    1f9c:	4b03      	ldr	r3, [pc, #12]	; (1fac <P2PTasks+0x518>)
    1f9e:	4798      	blx	r3
    1fa0:	e6c3      	b.n	1d2a <P2PTasks+0x296>
            P2PStatus.bits.RxHasUserData = 0;
            MiMAC_DiscardPacket();
        }   
            
    }   
}
    1fa2:	b007      	add	sp, #28
    1fa4:	bc0c      	pop	{r2, r3}
    1fa6:	4690      	mov	r8, r2
    1fa8:	469a      	mov	sl, r3
    1faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fac:	00000c1d 	.word	0x00000c1d
    1fb0:	20000598 	.word	0x20000598
    1fb4:	20000398 	.word	0x20000398
    1fb8:	20000132 	.word	0x20000132
    1fbc:	000012dd 	.word	0x000012dd
    1fc0:	00001211 	.word	0x00001211
    1fc4:	200005dc 	.word	0x200005dc
    1fc8:	00001411 	.word	0x00001411
    1fcc:	200004ee 	.word	0x200004ee
    1fd0:	200003a0 	.word	0x200003a0
    1fd4:	200005c8 	.word	0x200005c8
    1fd8:	20000544 	.word	0x20000544
    1fdc:	200004b8 	.word	0x200004b8
    1fe0:	2000059c 	.word	0x2000059c
    1fe4:	200005a0 	.word	0x200005a0
    1fe8:	20000545 	.word	0x20000545
    1fec:	20000540 	.word	0x20000540

00001ff0 <MiApp_MessageAvailable>:
    return false;
}


bool MiApp_MessageAvailable(void)
{ 
    1ff0:	b510      	push	{r4, lr}
    P2PTasks(); 
    1ff2:	4b03      	ldr	r3, [pc, #12]	; (2000 <STACK_SIZE>)
    1ff4:	4798      	blx	r3
    
    return P2PStatus.bits.RxHasUserData;
    1ff6:	4b03      	ldr	r3, [pc, #12]	; (2004 <STACK_SIZE+0x4>)
    1ff8:	7818      	ldrb	r0, [r3, #0]
    1ffa:	0700      	lsls	r0, r0, #28
    1ffc:	0fc0      	lsrs	r0, r0, #31
}
    1ffe:	bd10      	pop	{r4, pc}
    2000:	00001a95 	.word	0x00001a95
    2004:	20000544 	.word	0x20000544

00002008 <MiApp_EstablishConnection>:
     *      If more than one connections have been established through this function call, the
     *      return value points to the index of one of the peer devices.
     *
     *****************************************************************************************/  
    uint8_t MiApp_EstablishConnection(INPUT uint8_t ActiveScanIndex, INPUT uint8_t Mode)
    {
    2008:	b5f0      	push	{r4, r5, r6, r7, lr}
    200a:	465f      	mov	r7, fp
    200c:	4656      	mov	r6, sl
    200e:	464d      	mov	r5, r9
    2010:	4644      	mov	r4, r8
    2012:	b4f0      	push	{r4, r5, r6, r7}
    2014:	b083      	sub	sp, #12
    2016:	000c      	movs	r4, r1
        uint8_t    tmpConnectionMode = ConnMode;
    2018:	4b35      	ldr	r3, [pc, #212]	; (20f0 <MiApp_EstablishConnection+0xe8>)
    201a:	781b      	ldrb	r3, [r3, #0]
    201c:	469b      	mov	fp, r3
        uint8_t    retry = CONNECTION_RETRY_TIMES;
        uint8_t    connectionInterval = 0;
        MIWI_TICK    t1, t2;
        #if defined(PROTOCOL_STAR)
            tick1 = MiWi_TickGet();
    201e:	4b35      	ldr	r3, [pc, #212]	; (20f4 <MiApp_EstablishConnection+0xec>)
    2020:	4798      	blx	r3
    2022:	4b35      	ldr	r3, [pc, #212]	; (20f8 <MiApp_EstablishConnection+0xf0>)
    2024:	6018      	str	r0, [r3, #0]
        #endif
        if( Mode == CONN_MODE_INDIRECT )
        {
            return 0xFF;
    2026:	20ff      	movs	r0, #255	; 0xff
        uint8_t    connectionInterval = 0;
        MIWI_TICK    t1, t2;
        #if defined(PROTOCOL_STAR)
            tick1 = MiWi_TickGet();
        #endif
        if( Mode == CONN_MODE_INDIRECT )
    2028:	2c01      	cmp	r4, #1
    202a:	d05a      	beq.n	20e2 <MiApp_EstablishConnection+0xda>
        {
            return 0xFF;
        }
       
        t1 = MiWi_TickGet();
    202c:	4b31      	ldr	r3, [pc, #196]	; (20f4 <MiApp_EstablishConnection+0xec>)
    202e:	4798      	blx	r3

        t1.Val -= (ONE_SECOND);
    2030:	387c      	subs	r0, #124	; 0x7c
    2032:	0006      	movs	r6, r0
        ConnMode = ENABLE_ALL_CONN;
    2034:	2200      	movs	r2, #0
    2036:	4b2e      	ldr	r3, [pc, #184]	; (20f0 <MiApp_EstablishConnection+0xe8>)
    2038:	701a      	strb	r2, [r3, #0]
        P2PStatus.bits.SearchConnection = 1;
    203a:	4a30      	ldr	r2, [pc, #192]	; (20fc <MiApp_EstablishConnection+0xf4>)
    203c:	7811      	ldrb	r1, [r2, #0]
    203e:	2310      	movs	r3, #16
    2040:	430b      	orrs	r3, r1
    2042:	7013      	strb	r3, [r2, #0]
     *****************************************************************************************/  
    uint8_t MiApp_EstablishConnection(INPUT uint8_t ActiveScanIndex, INPUT uint8_t Mode)
    {
        uint8_t    tmpConnectionMode = ConnMode;
        uint8_t    retry = CONNECTION_RETRY_TIMES;
        uint8_t    connectionInterval = 0;
    2044:	2500      	movs	r5, #0
     *
     *****************************************************************************************/  
    uint8_t MiApp_EstablishConnection(INPUT uint8_t ActiveScanIndex, INPUT uint8_t Mode)
    {
        uint8_t    tmpConnectionMode = ConnMode;
        uint8_t    retry = CONNECTION_RETRY_TIMES;
    2046:	2703      	movs	r7, #3
        t1 = MiWi_TickGet();

        t1.Val -= (ONE_SECOND);
        ConnMode = ENABLE_ALL_CONN;
        P2PStatus.bits.SearchConnection = 1;
        while( P2PStatus.bits.SearchConnection )
    2048:	4690      	mov	r8, r2
        {
            t2 = MiWi_TickGet();
    204a:	4b2a      	ldr	r3, [pc, #168]	; (20f4 <MiApp_EstablishConnection+0xec>)
    204c:	4699      	mov	r9, r3
}


bool MiApp_MessageAvailable(void)
{ 
    P2PTasks(); 
    204e:	4b2c      	ldr	r3, [pc, #176]	; (2100 <MiApp_EstablishConnection+0xf8>)
    2050:	469a      	mov	sl, r3
        t1 = MiWi_TickGet();

        t1.Val -= (ONE_SECOND);
        ConnMode = ENABLE_ALL_CONN;
        P2PStatus.bits.SearchConnection = 1;
        while( P2PStatus.bits.SearchConnection )
    2052:	e034      	b.n	20be <MiApp_EstablishConnection+0xb6>
        {
            t2 = MiWi_TickGet();
    2054:	47c8      	blx	r9
    2056:	0004      	movs	r4, r0
            if( MiWi_TickGetDiff(t2, t1) > (ONE_SECOND) )
    2058:	1b83      	subs	r3, r0, r6
    205a:	2b7c      	cmp	r3, #124	; 0x7c
    205c:	d928      	bls.n	20b0 <MiApp_EstablishConnection+0xa8>
            {   
                t1.Val = t2.Val;

                if( connectionInterval-- > 0 )
    205e:	2d00      	cmp	r5, #0
    2060:	d003      	beq.n	206a <MiApp_EstablishConnection+0x62>
    2062:	3d01      	subs	r5, #1
    2064:	b2ed      	uxtb	r5, r5
        while( P2PStatus.bits.SearchConnection )
        {
            t2 = MiWi_TickGet();
            if( MiWi_TickGetDiff(t2, t1) > (ONE_SECOND) )
            {   
                t1.Val = t2.Val;
    2066:	0006      	movs	r6, r0
    2068:	e029      	b.n	20be <MiApp_EstablishConnection+0xb6>
                if( connectionInterval-- > 0 )
                {
                    continue;
                }
                connectionInterval = CONNECTION_INTERVAL-1;
                if( retry-- == 0 )
    206a:	1e7d      	subs	r5, r7, #1
    206c:	b2ed      	uxtb	r5, r5
    206e:	2f00      	cmp	r7, #0
    2070:	d106      	bne.n	2080 <MiApp_EstablishConnection+0x78>
                {

                    P2PStatus.bits.SearchConnection = 0;
    2072:	4a22      	ldr	r2, [pc, #136]	; (20fc <MiApp_EstablishConnection+0xf4>)
    2074:	7813      	ldrb	r3, [r2, #0]
    2076:	2110      	movs	r1, #16
    2078:	438b      	bics	r3, r1
    207a:	7013      	strb	r3, [r2, #0]
                    return 0xFF;
    207c:	20ff      	movs	r0, #255	; 0xff
    207e:	e030      	b.n	20e2 <MiApp_EstablishConnection+0xda>
                }
                MiApp_FlushTx();
                MiApp_WriteData(CMD_P2P_CONNECTION_REQUEST);
    2080:	4b20      	ldr	r3, [pc, #128]	; (2104 <MiApp_EstablishConnection+0xfc>)
    2082:	2281      	movs	r2, #129	; 0x81
    2084:	701a      	strb	r2, [r3, #0]
                MiApp_WriteData(currentChannel);
    2086:	4a20      	ldr	r2, [pc, #128]	; (2108 <MiApp_EstablishConnection+0x100>)
    2088:	7812      	ldrb	r2, [r2, #0]
    208a:	705a      	strb	r2, [r3, #1]
                MiApp_WriteData(P2PCapacityInfo);
    208c:	2103      	movs	r1, #3
    208e:	4a1f      	ldr	r2, [pc, #124]	; (210c <MiApp_EstablishConnection+0x104>)
    2090:	7011      	strb	r1, [r2, #0]
    2092:	4a1f      	ldr	r2, [pc, #124]	; (2110 <MiApp_EstablishConnection+0x108>)
    2094:	7812      	ldrb	r2, [r2, #0]
    2096:	709a      	strb	r2, [r3, #2]
                        {
                            MiApp_SetChannel( ActiveScanResults[ActiveScanIndex].Channel );
                            SendPacket(false, ActiveScanResults[ActiveScanIndex].PANID, ActiveScanResults[ActiveScanIndex].Address, true, false);
                        }
                    #else
                        SendPacket(true, myPANID, NULL, true, false);
    2098:	4b1e      	ldr	r3, [pc, #120]	; (2114 <MiApp_EstablishConnection+0x10c>)
    209a:	8819      	ldrh	r1, [r3, #0]
    209c:	2300      	movs	r3, #0
    209e:	9300      	str	r3, [sp, #0]
    20a0:	3301      	adds	r3, #1
    20a2:	2200      	movs	r2, #0
    20a4:	2001      	movs	r0, #1
    20a6:	4e1c      	ldr	r6, [pc, #112]	; (2118 <MiApp_EstablishConnection+0x110>)
    20a8:	47b0      	blx	r6
        while( P2PStatus.bits.SearchConnection )
        {
            t2 = MiWi_TickGet();
            if( MiWi_TickGetDiff(t2, t1) > (ONE_SECOND) )
            {   
                t1.Val = t2.Val;
    20aa:	0026      	movs	r6, r4
                if( connectionInterval-- > 0 )
                {
                    continue;
                }
                connectionInterval = CONNECTION_INTERVAL-1;
                if( retry-- == 0 )
    20ac:	002f      	movs	r7, r5

                if( connectionInterval-- > 0 )
                {
                    continue;
                }
                connectionInterval = CONNECTION_INTERVAL-1;
    20ae:	2501      	movs	r5, #1
}


bool MiApp_MessageAvailable(void)
{ 
    P2PTasks(); 
    20b0:	47d0      	blx	sl
    
    return P2PStatus.bits.RxHasUserData;
    20b2:	4b12      	ldr	r3, [pc, #72]	; (20fc <MiApp_EstablishConnection+0xf4>)
    20b4:	781b      	ldrb	r3, [r3, #0]
                        SendPacket(true, NULL, true, false);
                    #endif
                #endif
            }
    
            if( MiApp_MessageAvailable())
    20b6:	071b      	lsls	r3, r3, #28
    20b8:	d501      	bpl.n	20be <MiApp_EstablishConnection+0xb6>
            {
                MiApp_DiscardMessage();
    20ba:	4b18      	ldr	r3, [pc, #96]	; (211c <MiApp_EstablishConnection+0x114>)
    20bc:	4798      	blx	r3
        t1 = MiWi_TickGet();

        t1.Val -= (ONE_SECOND);
        ConnMode = ENABLE_ALL_CONN;
        P2PStatus.bits.SearchConnection = 1;
        while( P2PStatus.bits.SearchConnection )
    20be:	4643      	mov	r3, r8
    20c0:	781b      	ldrb	r3, [r3, #0]
    20c2:	06db      	lsls	r3, r3, #27
    20c4:	d4c6      	bmi.n	2054 <MiApp_EstablishConnection+0x4c>
                MiApp_DiscardMessage();
            }     
            //P2PTasks();
        }
      
        ConnMode = tmpConnectionMode;
    20c6:	4b0a      	ldr	r3, [pc, #40]	; (20f0 <MiApp_EstablishConnection+0xe8>)
    20c8:	465a      	mov	r2, fp
    20ca:	701a      	strb	r2, [r3, #0]
        
        #if defined(ENABLE_TIME_SYNC) && !defined(ENABLE_SLEEP) && defined(ENABLE_INDIRECT_MESSAGE)
            TimeSyncTick = MiWi_TickGet();
        #endif
        #if defined(PROTOCOL_STAR)
            if (LatestConnection != 0xFF)
    20cc:	4b14      	ldr	r3, [pc, #80]	; (2120 <MiApp_EstablishConnection+0x118>)
    20ce:	7818      	ldrb	r0, [r3, #0]
    20d0:	28ff      	cmp	r0, #255	; 0xff
    20d2:	d003      	beq.n	20dc <MiApp_EstablishConnection+0xd4>
			 {
				 role = PanCoordinator;
			 }
			 else
			 {
				 role = EndDevice;
    20d4:	2201      	movs	r2, #1
    20d6:	4b13      	ldr	r3, [pc, #76]	; (2124 <MiApp_EstablishConnection+0x11c>)
    20d8:	701a      	strb	r2, [r3, #0]
    20da:	e002      	b.n	20e2 <MiApp_EstablishConnection+0xda>
            #endif  
        #endif
		#if defined (PROTOCOL_STAR)
			 if (LatestConnection == 0xFF)
			 {
				 role = PanCoordinator;
    20dc:	2200      	movs	r2, #0
    20de:	4b11      	ldr	r3, [pc, #68]	; (2124 <MiApp_EstablishConnection+0x11c>)
    20e0:	701a      	strb	r2, [r3, #0]
				 role = EndDevice;
			 }
		#endif
        return LatestConnection;
        
    }
    20e2:	b003      	add	sp, #12
    20e4:	bc3c      	pop	{r2, r3, r4, r5}
    20e6:	4690      	mov	r8, r2
    20e8:	4699      	mov	r9, r3
    20ea:	46a2      	mov	sl, r4
    20ec:	46ab      	mov	fp, r5
    20ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20f0:	20000011 	.word	0x20000011
    20f4:	000023a1 	.word	0x000023a1
    20f8:	2000059c 	.word	0x2000059c
    20fc:	20000544 	.word	0x20000544
    2100:	00001a95 	.word	0x00001a95
    2104:	200005a0 	.word	0x200005a0
    2108:	20000131 	.word	0x20000131
    210c:	20000545 	.word	0x20000545
    2110:	200004d1 	.word	0x200004d1
    2114:	200004d4 	.word	0x200004d4
    2118:	00001321 	.word	0x00001321
    211c:	000016f5 	.word	0x000016f5
    2120:	20000399 	.word	0x20000399
    2124:	20000598 	.word	0x20000598

00002128 <MiApp_ConnectionMode>:
 *      None
 *
 *****************************************************************************************/ 
void MiApp_ConnectionMode(INPUT uint8_t Mode)
{
    if( Mode > 3 )
    2128:	2803      	cmp	r0, #3
    212a:	d808      	bhi.n	213e <MiApp_ConnectionMode+0x16>
    {
        return;
    }
    ConnMode = Mode;
    212c:	4b04      	ldr	r3, [pc, #16]	; (2140 <MiApp_ConnectionMode+0x18>)
    212e:	7018      	strb	r0, [r3, #0]
    P2PCapacityInfo = (P2PCapacityInfo & 0x0F) | (ConnMode << 4);
    2130:	4a04      	ldr	r2, [pc, #16]	; (2144 <MiApp_ConnectionMode+0x1c>)
    2132:	7813      	ldrb	r3, [r2, #0]
    2134:	210f      	movs	r1, #15
    2136:	400b      	ands	r3, r1
    2138:	0100      	lsls	r0, r0, #4
    213a:	4318      	orrs	r0, r3
    213c:	7010      	strb	r0, [r2, #0]
    
    #if defined(ENABLE_NETWORK_FREEZER)
        nvmPutConnMode(&ConnMode);
    #endif
    213e:	4770      	bx	lr
    2140:	20000011 	.word	0x20000011
    2144:	200004d1 	.word	0x200004d1

00002148 <sal_aes_wrrd>:
 * @param[in]  idata  AES block to be en/decrypted
 * @param[out] odata  Result of previous operation
 *                    (odata may be NULL or equal to idata)
 */
void sal_aes_wrrd(uint8_t *idata, uint8_t *odata)
{
    2148:	b570      	push	{r4, r5, r6, lr}
    214a:	0003      	movs	r3, r0
    214c:	000d      	movs	r5, r1
	 * Write data and start the operation.
	 * AES_MODE in aes_buf[0] and aes_buf[AES_BLOCKSIZE+1] as well as
	 * AES_REQUEST in aes_buf[AES_BLOCKSIZE+1]
	 * were set before in sal_aes_setup()
	 */
	memcpy(aes_buf + 1, idata, AES_BLOCKSIZE);
    214e:	4c14      	ldr	r4, [pc, #80]	; (21a0 <sal_aes_wrrd+0x58>)
    2150:	1c60      	adds	r0, r4, #1
    2152:	2210      	movs	r2, #16
    2154:	0019      	movs	r1, r3
    2156:	4b13      	ldr	r3, [pc, #76]	; (21a4 <sal_aes_wrrd+0x5c>)
    2158:	4798      	blx	r3

	/* trx_aes_wrrd() overwrites aes_buf, the last byte must be saved.
	**/
	save_cmd = aes_buf[AES_BLOCKSIZE + 1];
    215a:	7c64      	ldrb	r4, [r4, #17]

	if (setup_flag) {
    215c:	4b12      	ldr	r3, [pc, #72]	; (21a8 <sal_aes_wrrd+0x60>)
    215e:	781b      	ldrb	r3, [r3, #0]
    2160:	2b00      	cmp	r3, #0
    2162:	d008      	beq.n	2176 <sal_aes_wrrd+0x2e>
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    2164:	2212      	movs	r2, #18
    2166:	490e      	ldr	r1, [pc, #56]	; (21a0 <sal_aes_wrrd+0x58>)
    2168:	2083      	movs	r0, #131	; 0x83
    216a:	4b10      	ldr	r3, [pc, #64]	; (21ac <sal_aes_wrrd+0x64>)
    216c:	4798      	blx	r3
				AES_BLOCKSIZE + 2);

		setup_flag = false;
    216e:	2200      	movs	r2, #0
    2170:	4b0d      	ldr	r3, [pc, #52]	; (21a8 <sal_aes_wrrd+0x60>)
    2172:	701a      	strb	r2, [r3, #0]
    2174:	e005      	b.n	2182 <sal_aes_wrrd+0x3a>
	} else {
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
    2176:	2211      	movs	r2, #17
    2178:	4909      	ldr	r1, [pc, #36]	; (21a0 <sal_aes_wrrd+0x58>)
    217a:	3101      	adds	r1, #1
    217c:	2084      	movs	r0, #132	; 0x84
    217e:	4b0b      	ldr	r3, [pc, #44]	; (21ac <sal_aes_wrrd+0x64>)
    2180:	4798      	blx	r3
				aes_buf + 1, AES_BLOCKSIZE + 1);
	}

	/* Restore the result. */
	if (odata != NULL) {
    2182:	2d00      	cmp	r5, #0
    2184:	d005      	beq.n	2192 <sal_aes_wrrd+0x4a>
		memcpy(odata, aes_buf + 1, AES_BLOCKSIZE);
    2186:	2210      	movs	r2, #16
    2188:	4905      	ldr	r1, [pc, #20]	; (21a0 <sal_aes_wrrd+0x58>)
    218a:	3101      	adds	r1, #1
    218c:	0028      	movs	r0, r5
    218e:	4b05      	ldr	r3, [pc, #20]	; (21a4 <sal_aes_wrrd+0x5c>)
    2190:	4798      	blx	r3
	}

	aes_buf[AES_BLOCKSIZE + 1] = save_cmd;
    2192:	4b03      	ldr	r3, [pc, #12]	; (21a0 <sal_aes_wrrd+0x58>)
    2194:	745c      	strb	r4, [r3, #17]

	/* Wait for the operation to finish for 24 us. */
	delay_us(24);
    2196:	2018      	movs	r0, #24
    2198:	4b05      	ldr	r3, [pc, #20]	; (21b0 <sal_aes_wrrd+0x68>)
    219a:	4798      	blx	r3
}
    219c:	bd70      	pop	{r4, r5, r6, pc}
    219e:	46c0      	nop			; (mov r8, r8)
    21a0:	20000158 	.word	0x20000158
    21a4:	00005611 	.word	0x00005611
    21a8:	2000016a 	.word	0x2000016a
    21ac:	00004eed 	.word	0x00004eed
    21b0:	000023f5 	.word	0x000023f5

000021b4 <sal_aes_setup>:
 * @return  False if some parameter was illegal, true else
 */
bool sal_aes_setup(uint8_t *key,
		uint8_t enc_mode,
		uint8_t dir)
{
    21b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    21b6:	4647      	mov	r7, r8
    21b8:	b480      	push	{r7}
    21ba:	b084      	sub	sp, #16
    21bc:	0006      	movs	r6, r0
    21be:	000d      	movs	r5, r1
    21c0:	0014      	movs	r4, r2
	if (key != NULL) {
    21c2:	2800      	cmp	r0, #0
    21c4:	d017      	beq.n	21f6 <sal_aes_setup+0x42>
		/* Setup key. */
		dec_initialized = false;
    21c6:	2200      	movs	r2, #0
    21c8:	4b3e      	ldr	r3, [pc, #248]	; (22c4 <sal_aes_setup+0x110>)
    21ca:	701a      	strb	r2, [r3, #0]

		last_dir = AES_DIR_VOID;
    21cc:	3202      	adds	r2, #2
    21ce:	4b3e      	ldr	r3, [pc, #248]	; (22c8 <sal_aes_setup+0x114>)
    21d0:	701a      	strb	r2, [r3, #0]

		/* Save key for later use after decryption or sleep. */
		memcpy(enc_key, key, AES_KEYSIZE);
    21d2:	320e      	adds	r2, #14
    21d4:	0001      	movs	r1, r0
    21d6:	483d      	ldr	r0, [pc, #244]	; (22cc <sal_aes_setup+0x118>)
    21d8:	4b3d      	ldr	r3, [pc, #244]	; (22d0 <sal_aes_setup+0x11c>)
    21da:	4698      	mov	r8, r3
    21dc:	4798      	blx	r3

		/* Set subregister AES_MODE (Bits 4:6 in AES_CON) to 1: KEY
		 * SETUP. */
		aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    21de:	4f3d      	ldr	r7, [pc, #244]	; (22d4 <sal_aes_setup+0x120>)
    21e0:	2310      	movs	r3, #16
    21e2:	703b      	strb	r3, [r7, #0]

		/* Fill in key. */
		memcpy(aes_buf + 1, key, AES_KEYSIZE);
    21e4:	1c78      	adds	r0, r7, #1
    21e6:	2210      	movs	r2, #16
    21e8:	0031      	movs	r1, r6
    21ea:	47c0      	blx	r8

		/* Write to SRAM in one step. */
		trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    21ec:	2211      	movs	r2, #17
    21ee:	0039      	movs	r1, r7
    21f0:	2083      	movs	r0, #131	; 0x83
    21f2:	4b39      	ldr	r3, [pc, #228]	; (22d8 <sal_aes_setup+0x124>)
    21f4:	4798      	blx	r3
				AES_BLOCKSIZE + 1);
	}

	/* Set encryption direction. */
	switch (dir) {
    21f6:	2c00      	cmp	r4, #0
    21f8:	d002      	beq.n	2200 <sal_aes_setup+0x4c>
    21fa:	2c01      	cmp	r4, #1
    21fc:	d012      	beq.n	2224 <sal_aes_setup+0x70>
    21fe:	e05a      	b.n	22b6 <sal_aes_setup+0x102>
	case AES_DIR_ENCRYPT:
		if (last_dir == AES_DIR_DECRYPT) {
    2200:	4b31      	ldr	r3, [pc, #196]	; (22c8 <sal_aes_setup+0x114>)
    2202:	781b      	ldrb	r3, [r3, #0]
    2204:	2b01      	cmp	r3, #1
    2206:	d13d      	bne.n	2284 <sal_aes_setup+0xd0>
			/*
			 * If the last operation was decryption, the encryption
			 * key must be stored in enc_key, so re-initialize it.
			 */
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    2208:	4e32      	ldr	r6, [pc, #200]	; (22d4 <sal_aes_setup+0x120>)
    220a:	330f      	adds	r3, #15
    220c:	7033      	strb	r3, [r6, #0]

			/* Fill in key. */
			memcpy(aes_buf + 1, enc_key, AES_KEYSIZE);
    220e:	1c70      	adds	r0, r6, #1
    2210:	2210      	movs	r2, #16
    2212:	492e      	ldr	r1, [pc, #184]	; (22cc <sal_aes_setup+0x118>)
    2214:	4b2e      	ldr	r3, [pc, #184]	; (22d0 <sal_aes_setup+0x11c>)
    2216:	4798      	blx	r3

			/* Write to SRAM in one step. */
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    2218:	2211      	movs	r2, #17
    221a:	0031      	movs	r1, r6
    221c:	2083      	movs	r0, #131	; 0x83
    221e:	4b2e      	ldr	r3, [pc, #184]	; (22d8 <sal_aes_setup+0x124>)
    2220:	4798      	blx	r3
    2222:	e02f      	b.n	2284 <sal_aes_setup+0xd0>
		}

		break;

	case AES_DIR_DECRYPT:
		if (last_dir != AES_DIR_DECRYPT) {
    2224:	4b28      	ldr	r3, [pc, #160]	; (22c8 <sal_aes_setup+0x114>)
    2226:	781b      	ldrb	r3, [r3, #0]
    2228:	2b01      	cmp	r3, #1
    222a:	d02b      	beq.n	2284 <sal_aes_setup+0xd0>
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    222c:	2210      	movs	r2, #16
    222e:	4b29      	ldr	r3, [pc, #164]	; (22d4 <sal_aes_setup+0x120>)
    2230:	701a      	strb	r2, [r3, #0]

			if (!dec_initialized) {
    2232:	4b24      	ldr	r3, [pc, #144]	; (22c4 <sal_aes_setup+0x110>)
    2234:	781b      	ldrb	r3, [r3, #0]
    2236:	2b00      	cmp	r3, #0
    2238:	d116      	bne.n	2268 <sal_aes_setup+0xb4>

				/* Compute decryption key and initialize unit
				 * with it. */

				/* Dummy ECB encryption. */
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_ECB);
    223a:	4e26      	ldr	r6, [pc, #152]	; (22d4 <sal_aes_setup+0x120>)
    223c:	7033      	strb	r3, [r6, #0]
				aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(
    223e:	3380      	adds	r3, #128	; 0x80
    2240:	7473      	strb	r3, [r6, #17]
						SR_AES_MODE, AES_MODE_ECB) |
						SR_MASK(SR_AES_REQUEST,
						AES_REQUEST);

				setup_flag = true; /* Needed in sal_aes_wrrd().
    2242:	3a0f      	subs	r2, #15
    2244:	4b25      	ldr	r3, [pc, #148]	; (22dc <sal_aes_setup+0x128>)
    2246:	701a      	strb	r2, [r3, #0]
				                   **/
				sal_aes_wrrd(dummy, NULL);
    2248:	2100      	movs	r1, #0
    224a:	4668      	mov	r0, sp
    224c:	4b24      	ldr	r3, [pc, #144]	; (22e0 <sal_aes_setup+0x12c>)
    224e:	4798      	blx	r3

				/* Read last round key: */

				/* Set to key mode. */
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    2250:	2310      	movs	r3, #16
    2252:	7033      	strb	r3, [r6, #0]
				trx_sram_write(
    2254:	2201      	movs	r2, #1
    2256:	0031      	movs	r1, r6
    2258:	2083      	movs	r0, #131	; 0x83
    225a:	4b1f      	ldr	r3, [pc, #124]	; (22d8 <sal_aes_setup+0x124>)
    225c:	4798      	blx	r3
						(AES_BASE_ADDR + RG_AES_CTRL),
						aes_buf, 1);

				/* Read the key. */
				trx_sram_read((AES_BASE_ADDR +
    225e:	2210      	movs	r2, #16
    2260:	4920      	ldr	r1, [pc, #128]	; (22e4 <sal_aes_setup+0x130>)
    2262:	2084      	movs	r0, #132	; 0x84
    2264:	4b20      	ldr	r3, [pc, #128]	; (22e8 <sal_aes_setup+0x134>)
    2266:	4798      	blx	r3
			 * simply re-initialize the unit;
			 * aes_buf[0] is AES_MODE_KEY
			 */

			/* Fill in key. */
			memcpy(aes_buf + 1, dec_key, AES_KEYSIZE);
    2268:	4e1a      	ldr	r6, [pc, #104]	; (22d4 <sal_aes_setup+0x120>)
    226a:	1c70      	adds	r0, r6, #1
    226c:	2210      	movs	r2, #16
    226e:	491d      	ldr	r1, [pc, #116]	; (22e4 <sal_aes_setup+0x130>)
    2270:	4b17      	ldr	r3, [pc, #92]	; (22d0 <sal_aes_setup+0x11c>)
    2272:	4798      	blx	r3

			/* Write to SRAM in one step. */
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    2274:	2211      	movs	r2, #17
    2276:	0031      	movs	r1, r6
    2278:	2083      	movs	r0, #131	; 0x83
    227a:	4b17      	ldr	r3, [pc, #92]	; (22d8 <sal_aes_setup+0x124>)
    227c:	4798      	blx	r3
					aes_buf, AES_BLOCKSIZE + 1);

			dec_initialized = true;
    227e:	4b11      	ldr	r3, [pc, #68]	; (22c4 <sal_aes_setup+0x110>)
    2280:	2201      	movs	r2, #1
    2282:	701a      	strb	r2, [r3, #0]

	default:
		return false;
	}

	last_dir = dir;
    2284:	4b10      	ldr	r3, [pc, #64]	; (22c8 <sal_aes_setup+0x114>)
    2286:	701c      	strb	r4, [r3, #0]

	/* Set encryption mode. */
	switch (enc_mode) {
    2288:	2d00      	cmp	r5, #0
    228a:	d002      	beq.n	2292 <sal_aes_setup+0xde>
				SR_MASK(SR_AES_REQUEST, AES_REQUEST);
	}
	break;

	default:
		return (false);
    228c:	2000      	movs	r0, #0
	}

	last_dir = dir;

	/* Set encryption mode. */
	switch (enc_mode) {
    228e:	2d02      	cmp	r5, #2
    2290:	d113      	bne.n	22ba <sal_aes_setup+0x106>
	case AES_MODE_ECB:
	case AES_MODE_CBC:
	{
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    2292:	012d      	lsls	r5, r5, #4
    2294:	2370      	movs	r3, #112	; 0x70
    2296:	401d      	ands	r5, r3
    2298:	00e3      	lsls	r3, r4, #3
    229a:	2408      	movs	r4, #8
    229c:	401c      	ands	r4, r3
    229e:	432c      	orrs	r4, r5
    22a0:	4b0c      	ldr	r3, [pc, #48]	; (22d4 <sal_aes_setup+0x120>)
    22a2:	701c      	strb	r4, [r3, #0]
				SR_MASK(SR_AES_DIR, dir);
		aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(SR_AES_MODE, enc_mode) |
    22a4:	2280      	movs	r2, #128	; 0x80
    22a6:	4252      	negs	r2, r2
    22a8:	4314      	orrs	r4, r2
    22aa:	745c      	strb	r4, [r3, #17]

	default:
		return (false);
	}

	setup_flag = true;
    22ac:	3281      	adds	r2, #129	; 0x81
    22ae:	4b0b      	ldr	r3, [pc, #44]	; (22dc <sal_aes_setup+0x128>)
    22b0:	701a      	strb	r2, [r3, #0]

	return (true);
    22b2:	2001      	movs	r0, #1
    22b4:	e001      	b.n	22ba <sal_aes_setup+0x106>
		}

		break;

	default:
		return false;
    22b6:	2000      	movs	r0, #0
    22b8:	e7ff      	b.n	22ba <sal_aes_setup+0x106>
	}

	setup_flag = true;

	return (true);
}
    22ba:	b004      	add	sp, #16
    22bc:	bc04      	pop	{r2}
    22be:	4690      	mov	r8, r2
    22c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22c2:	46c0      	nop			; (mov r8, r8)
    22c4:	20000134 	.word	0x20000134
    22c8:	2000001c 	.word	0x2000001c
    22cc:	20000148 	.word	0x20000148
    22d0:	00005611 	.word	0x00005611
    22d4:	20000158 	.word	0x20000158
    22d8:	00004bfd 	.word	0x00004bfd
    22dc:	2000016a 	.word	0x2000016a
    22e0:	00002149 	.word	0x00002149
    22e4:	20000138 	.word	0x20000138
    22e8:	00004d65 	.word	0x00004d65

000022ec <sal_aes_read>:
 * of a series of sal_aes_wrrd() calls.
 *
 * @param[out] data     - result of previous operation
 */
void sal_aes_read(uint8_t *data)
{
    22ec:	b510      	push	{r4, lr}
    22ee:	0001      	movs	r1, r0
	trx_sram_read((AES_BASE_ADDR + RG_AES_STATE_KEY_0), data,
    22f0:	2210      	movs	r2, #16
    22f2:	2084      	movs	r0, #132	; 0x84
    22f4:	4b01      	ldr	r3, [pc, #4]	; (22fc <sal_aes_read+0x10>)
    22f6:	4798      	blx	r3
			AES_BLOCKSIZE);
}
    22f8:	bd10      	pop	{r4, pc}
    22fa:	46c0      	nop			; (mov r8, r8)
    22fc:	00004d65 	.word	0x00004d65

00002300 <configure_tc>:
}
//! [callback_funcs]

//! [setup]
void configure_tc(void)
{
    2300:	b510      	push	{r4, lr}
    2302:	b08e      	sub	sp, #56	; 0x38
	//! [setup_config]
	struct tc_config config_tc;
	//! [setup_config]
	//! [setup_config_defaults]
	tc_reset(&tc_instance);
    2304:	4c21      	ldr	r4, [pc, #132]	; (238c <configure_tc+0x8c>)
    2306:	0020      	movs	r0, r4
    2308:	4b21      	ldr	r3, [pc, #132]	; (2390 <configure_tc+0x90>)
    230a:	4798      	blx	r3

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    230c:	2300      	movs	r3, #0
    230e:	466a      	mov	r2, sp
    2310:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    2312:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = false;
    2314:	7053      	strb	r3, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
    2316:	7093      	strb	r3, [r2, #2]
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    2318:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    231a:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    231c:	7293      	strb	r3, [r2, #10]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    231e:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    2320:	7313      	strb	r3, [r2, #12]
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    2322:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    2324:	7353      	strb	r3, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    2326:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    2328:	9305      	str	r3, [sp, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    232a:	9306      	str	r3, [sp, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    232c:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    232e:	9308      	str	r3, [sp, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    2330:	9309      	str	r3, [sp, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    2332:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    2334:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    2336:	8593      	strh	r3, [r2, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
    2338:	3334      	adds	r3, #52	; 0x34
    233a:	2200      	movs	r2, #0
    233c:	4669      	mov	r1, sp
    233e:	54ca      	strb	r2, [r1, r3]
	tc_get_config_defaults(&config_tc);
	//! [setup_config_defaults]

	//! [setup_change_config]  // 32 bit Timer 
	config_tc.counter_size = TC_COUNTER_SIZE_32BIT;
    2340:	3b2c      	subs	r3, #44	; 0x2c
    2342:	466a      	mov	r2, sp
    2344:	70cb      	strb	r3, [r1, #3]
	config_tc.clock_source = GCLK_GENERATOR_1;
    2346:	3b07      	subs	r3, #7
    2348:	700b      	strb	r3, [r1, #0]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV256;
    234a:	23c0      	movs	r3, #192	; 0xc0
    234c:	00db      	lsls	r3, r3, #3
    234e:	808b      	strh	r3, [r1, #4]

	//! [setup_set_config]
	tc_init(&tc_instance, CONF_TC_MODULE, &config_tc);
    2350:	4910      	ldr	r1, [pc, #64]	; (2394 <configure_tc+0x94>)
    2352:	0020      	movs	r0, r4
    2354:	4b10      	ldr	r3, [pc, #64]	; (2398 <configure_tc+0x98>)
    2356:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2358:	6822      	ldr	r2, [r4, #0]

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    235a:	6913      	ldr	r3, [r2, #16]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    235c:	2b00      	cmp	r3, #0
    235e:	d1fc      	bne.n	235a <configure_tc+0x5a>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    2360:	6811      	ldr	r1, [r2, #0]
    2362:	3302      	adds	r3, #2
    2364:	430b      	orrs	r3, r1
    2366:	6013      	str	r3, [r2, #0]

	//! [setup_enable]
	tc_enable(&tc_instance);
	//! [setup_enable]
	// Set the Timer Counter value to Zero 
	tc_set_count_value(&tc_instance, 0);
    2368:	4c08      	ldr	r4, [pc, #32]	; (238c <configure_tc+0x8c>)
    236a:	2100      	movs	r1, #0
    236c:	0020      	movs	r0, r4
    236e:	4b0b      	ldr	r3, [pc, #44]	; (239c <configure_tc+0x9c>)
    2370:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2372:	6823      	ldr	r3, [r4, #0]

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    2374:	691a      	ldr	r2, [r3, #16]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    2376:	2a00      	cmp	r2, #0
    2378:	d1fc      	bne.n	2374 <configure_tc+0x74>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    237a:	711a      	strb	r2, [r3, #4]

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    237c:	691a      	ldr	r2, [r3, #16]
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;

	while (tc_is_syncing(module_inst)) {
    237e:	2a00      	cmp	r2, #0
    2380:	d1fc      	bne.n	237c <configure_tc+0x7c>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
    2382:	3220      	adds	r2, #32
    2384:	715a      	strb	r2, [r3, #5]
		
	/* Start timer */
	tc_start_counter(&tc_instance);
}
    2386:	b00e      	add	sp, #56	; 0x38
    2388:	bd10      	pop	{r4, pc}
    238a:	46c0      	nop			; (mov r8, r8)
    238c:	200005ec 	.word	0x200005ec
    2390:	00004265 	.word	0x00004265
    2394:	43000800 	.word	0x43000800
    2398:	00003f19 	.word	0x00003f19
    239c:	000041f1 	.word	0x000041f1

000023a0 <MiWi_TickGet>:
{
	return tc_get_count_value(&tc_instance);
}

MIWI_TICK MiWi_TickGet(void)
{
    23a0:	b510      	push	{r4, lr}
	MIWI_TICK count;
	count.Val = tc_get_count_value(&tc_instance);
    23a2:	4802      	ldr	r0, [pc, #8]	; (23ac <MiWi_TickGet+0xc>)
    23a4:	4b02      	ldr	r3, [pc, #8]	; (23b0 <MiWi_TickGet+0x10>)
    23a6:	4798      	blx	r3
	return count;
}
    23a8:	bd10      	pop	{r4, pc}
    23aa:	46c0      	nop			; (mov r8, r8)
    23ac:	200005ec 	.word	0x200005ec
    23b0:	00004225 	.word	0x00004225

000023b4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    23b4:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    23b6:	2000      	movs	r0, #0
    23b8:	4b08      	ldr	r3, [pc, #32]	; (23dc <delay_init+0x28>)
    23ba:	4798      	blx	r3
    23bc:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    23be:	4c08      	ldr	r4, [pc, #32]	; (23e0 <delay_init+0x2c>)
    23c0:	21fa      	movs	r1, #250	; 0xfa
    23c2:	0089      	lsls	r1, r1, #2
    23c4:	47a0      	blx	r4
    23c6:	4b07      	ldr	r3, [pc, #28]	; (23e4 <delay_init+0x30>)
    23c8:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    23ca:	4907      	ldr	r1, [pc, #28]	; (23e8 <delay_init+0x34>)
    23cc:	0028      	movs	r0, r5
    23ce:	47a0      	blx	r4
    23d0:	4b06      	ldr	r3, [pc, #24]	; (23ec <delay_init+0x38>)
    23d2:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    23d4:	2205      	movs	r2, #5
    23d6:	4b06      	ldr	r3, [pc, #24]	; (23f0 <delay_init+0x3c>)
    23d8:	601a      	str	r2, [r3, #0]
}
    23da:	bd70      	pop	{r4, r5, r6, pc}
    23dc:	00003c1d 	.word	0x00003c1d
    23e0:	00005281 	.word	0x00005281
    23e4:	20000024 	.word	0x20000024
    23e8:	000f4240 	.word	0x000f4240
    23ec:	20000020 	.word	0x20000020
    23f0:	e000e010 	.word	0xe000e010

000023f4 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    23f4:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    23f6:	4b08      	ldr	r3, [pc, #32]	; (2418 <delay_cycles_us+0x24>)
    23f8:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    23fa:	4a08      	ldr	r2, [pc, #32]	; (241c <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    23fc:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    23fe:	2180      	movs	r1, #128	; 0x80
    2400:	0249      	lsls	r1, r1, #9
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
	while (n--) {
    2402:	e006      	b.n	2412 <delay_cycles_us+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
    2404:	2c00      	cmp	r4, #0
    2406:	d004      	beq.n	2412 <delay_cycles_us+0x1e>
		SysTick->LOAD = n;
    2408:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    240a:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    240c:	6813      	ldr	r3, [r2, #0]
    240e:	420b      	tst	r3, r1
    2410:	d0fc      	beq.n	240c <delay_cycles_us+0x18>
    2412:	3801      	subs	r0, #1
    2414:	d2f6      	bcs.n	2404 <delay_cycles_us+0x10>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
	}
}
    2416:	bd30      	pop	{r4, r5, pc}
    2418:	20000020 	.word	0x20000020
    241c:	e000e010 	.word	0xe000e010

00002420 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    2420:	4b0c      	ldr	r3, [pc, #48]	; (2454 <cpu_irq_enter_critical+0x34>)
    2422:	681b      	ldr	r3, [r3, #0]
    2424:	2b00      	cmp	r3, #0
    2426:	d110      	bne.n	244a <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2428:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    242c:	2b00      	cmp	r3, #0
    242e:	d109      	bne.n	2444 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2430:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2432:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2436:	2200      	movs	r2, #0
    2438:	4b07      	ldr	r3, [pc, #28]	; (2458 <cpu_irq_enter_critical+0x38>)
    243a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    243c:	3201      	adds	r2, #1
    243e:	4b07      	ldr	r3, [pc, #28]	; (245c <cpu_irq_enter_critical+0x3c>)
    2440:	701a      	strb	r2, [r3, #0]
    2442:	e002      	b.n	244a <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2444:	2200      	movs	r2, #0
    2446:	4b05      	ldr	r3, [pc, #20]	; (245c <cpu_irq_enter_critical+0x3c>)
    2448:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    244a:	4a02      	ldr	r2, [pc, #8]	; (2454 <cpu_irq_enter_critical+0x34>)
    244c:	6813      	ldr	r3, [r2, #0]
    244e:	3301      	adds	r3, #1
    2450:	6013      	str	r3, [r2, #0]
}
    2452:	4770      	bx	lr
    2454:	2000016c 	.word	0x2000016c
    2458:	20000028 	.word	0x20000028
    245c:	20000170 	.word	0x20000170

00002460 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2460:	4b08      	ldr	r3, [pc, #32]	; (2484 <cpu_irq_leave_critical+0x24>)
    2462:	681a      	ldr	r2, [r3, #0]
    2464:	3a01      	subs	r2, #1
    2466:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2468:	681b      	ldr	r3, [r3, #0]
    246a:	2b00      	cmp	r3, #0
    246c:	d109      	bne.n	2482 <cpu_irq_leave_critical+0x22>
    246e:	4b06      	ldr	r3, [pc, #24]	; (2488 <cpu_irq_leave_critical+0x28>)
    2470:	781b      	ldrb	r3, [r3, #0]
    2472:	2b00      	cmp	r3, #0
    2474:	d005      	beq.n	2482 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    2476:	2201      	movs	r2, #1
    2478:	4b04      	ldr	r3, [pc, #16]	; (248c <cpu_irq_leave_critical+0x2c>)
    247a:	701a      	strb	r2, [r3, #0]
    247c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2480:	b662      	cpsie	i
	}
}
    2482:	4770      	bx	lr
    2484:	2000016c 	.word	0x2000016c
    2488:	20000170 	.word	0x20000170
    248c:	20000028 	.word	0x20000028

00002490 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    2490:	b5f0      	push	{r4, r5, r6, r7, lr}
    2492:	464f      	mov	r7, r9
    2494:	4646      	mov	r6, r8
    2496:	b4c0      	push	{r6, r7}
    2498:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    249a:	ac01      	add	r4, sp, #4
    249c:	2601      	movs	r6, #1
    249e:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    24a0:	2700      	movs	r7, #0
    24a2:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    24a4:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    24a6:	0021      	movs	r1, r4
    24a8:	2013      	movs	r0, #19
    24aa:	4d2d      	ldr	r5, [pc, #180]	; (2560 <system_board_init+0xd0>)
    24ac:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    24ae:	4b2d      	ldr	r3, [pc, #180]	; (2564 <system_board_init+0xd4>)
    24b0:	4698      	mov	r8, r3
    24b2:	2380      	movs	r3, #128	; 0x80
    24b4:	031b      	lsls	r3, r3, #12
    24b6:	4642      	mov	r2, r8
    24b8:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    24ba:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_1_PIN, &pin_conf);
    24bc:	0021      	movs	r1, r4
    24be:	2012      	movs	r0, #18
    24c0:	47a8      	blx	r5
    24c2:	2380      	movs	r3, #128	; 0x80
    24c4:	02db      	lsls	r3, r3, #11
    24c6:	4699      	mov	r9, r3
    24c8:	4643      	mov	r3, r8
    24ca:	464a      	mov	r2, r9
    24cc:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    24ce:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    24d0:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    24d2:	0021      	movs	r1, r4
    24d4:	201c      	movs	r0, #28
    24d6:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    24d8:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    24da:	70a7      	strb	r7, [r4, #2]

	
#ifdef CONF_BOARD_AT86RFX
	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    24dc:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
    24de:	0021      	movs	r1, r4
    24e0:	2052      	movs	r0, #82	; 0x52
    24e2:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
    24e4:	0021      	movs	r1, r4
    24e6:	203e      	movs	r0, #62	; 0x3e
    24e8:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
    24ea:	0021      	movs	r1, r4
    24ec:	203f      	movs	r0, #63	; 0x3f
    24ee:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
    24f0:	0021      	movs	r1, r4
    24f2:	202f      	movs	r0, #47	; 0x2f
    24f4:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
    24f6:	0021      	movs	r1, r4
    24f8:	2014      	movs	r0, #20
    24fa:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    24fc:	4b1a      	ldr	r3, [pc, #104]	; (2568 <system_board_init+0xd8>)
    24fe:	464a      	mov	r2, r9
    2500:	619a      	str	r2, [r3, #24]
    2502:	3b80      	subs	r3, #128	; 0x80
    2504:	2280      	movs	r2, #128	; 0x80
    2506:	05d2      	lsls	r2, r2, #23
    2508:	619a      	str	r2, [r3, #24]
    250a:	2280      	movs	r2, #128	; 0x80
    250c:	0612      	lsls	r2, r2, #24
    250e:	619a      	str	r2, [r3, #24]
    2510:	2280      	movs	r2, #128	; 0x80
    2512:	0212      	lsls	r2, r2, #8
    2514:	4691      	mov	r9, r2
    2516:	619a      	str	r2, [r3, #24]
    2518:	2380      	movs	r3, #128	; 0x80
    251a:	035b      	lsls	r3, r3, #13
    251c:	4642      	mov	r2, r8
    251e:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(AT86RFX_SPI_SCK, true);
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    2520:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
    2522:	0021      	movs	r1, r4
    2524:	2053      	movs	r0, #83	; 0x53
    2526:	47a8      	blx	r5
	
	/* SAMR30 Antenna Diversity Configuration */

	MCLK->APBCMASK.reg |= (1<<MCLK_APBCMASK_RFCTRL_Pos);
    2528:	4a10      	ldr	r2, [pc, #64]	; (256c <system_board_init+0xdc>)
    252a:	69d3      	ldr	r3, [r2, #28]
    252c:	4649      	mov	r1, r9
    252e:	430b      	orrs	r3, r1
    2530:	61d3      	str	r3, [r2, #28]
		
	/*Pins  PA12/RFCTRL2 and PA09/RFCTRL1 are used as DIG1 and DIG2 pins respectively in SAMR30 Xplained Pro*/	
	
	/* FECTRL register is Written with value 4 => F2CFG = 00 and F1CFG = 01 */	
	REG_RFCTRL_FECFG = RFCTRL_CFG_ANT_DIV;
    2532:	2204      	movs	r2, #4
    2534:	4b0e      	ldr	r3, [pc, #56]	; (2570 <system_board_init+0xe0>)
    2536:	801a      	strh	r2, [r3, #0]
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2538:	466b      	mov	r3, sp
    253a:	709e      	strb	r6, [r3, #2]
	config->powersave    = false;
    253c:	70df      	strb	r7, [r3, #3]
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	
	/*MUX Position is 'F' i.e 5 for FECTRL Function and is same for all  FECTRL supported pins
	 * as provided in the data sheet */
	config_pinmux.mux_position = MUX_PA09F_RFCTRL_FECTRL1 ;
    253e:	2305      	movs	r3, #5
    2540:	466a      	mov	r2, sp
    2542:	7013      	strb	r3, [r2, #0]
	
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
    2544:	7056      	strb	r6, [r2, #1]
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
    2546:	4669      	mov	r1, sp
    2548:	2009      	movs	r0, #9
    254a:	4c0a      	ldr	r4, [pc, #40]	; (2574 <system_board_init+0xe4>)
    254c:	47a0      	blx	r4
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
    254e:	4669      	mov	r1, sp
    2550:	200c      	movs	r0, #12
    2552:	47a0      	blx	r4
#endif	
}
    2554:	b003      	add	sp, #12
    2556:	bc0c      	pop	{r2, r3}
    2558:	4690      	mov	r8, r2
    255a:	4699      	mov	r9, r3
    255c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    255e:	46c0      	nop			; (mov r8, r8)
    2560:	00002791 	.word	0x00002791
    2564:	40002800 	.word	0x40002800
    2568:	40002900 	.word	0x40002900
    256c:	40000400 	.word	0x40000400
    2570:	42003c00 	.word	0x42003c00
    2574:	00003df5 	.word	0x00003df5

00002578 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2578:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    257a:	2a00      	cmp	r2, #0
    257c:	d10d      	bne.n	259a <extint_register_callback+0x22>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    257e:	008b      	lsls	r3, r1, #2
    2580:	4a07      	ldr	r2, [pc, #28]	; (25a0 <extint_register_callback+0x28>)
    2582:	589b      	ldr	r3, [r3, r2]
    2584:	2b00      	cmp	r3, #0
    2586:	d103      	bne.n	2590 <extint_register_callback+0x18>
		_extint_dev.callbacks[channel] = callback;
    2588:	0089      	lsls	r1, r1, #2
    258a:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    258c:	2300      	movs	r3, #0
    258e:	e004      	b.n	259a <extint_register_callback+0x22>
	} else if (_extint_dev.callbacks[channel] == callback) {
    2590:	4283      	cmp	r3, r0
    2592:	d001      	beq.n	2598 <extint_register_callback+0x20>
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    2594:	231d      	movs	r3, #29
    2596:	e000      	b.n	259a <extint_register_callback+0x22>

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
    2598:	2300      	movs	r3, #0
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    259a:	0018      	movs	r0, r3
    259c:	4770      	bx	lr
    259e:	46c0      	nop			; (mov r8, r8)
    25a0:	2000060c 	.word	0x2000060c

000025a4 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    25a4:	2317      	movs	r3, #23
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    25a6:	2900      	cmp	r1, #0
    25a8:	d107      	bne.n	25ba <extint_chan_enable_callback+0x16>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    25aa:	2200      	movs	r2, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    25ac:	281f      	cmp	r0, #31
    25ae:	d800      	bhi.n	25b2 <extint_chan_enable_callback+0xe>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    25b0:	4a03      	ldr	r2, [pc, #12]	; (25c0 <extint_chan_enable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENSET.reg = (1UL << channel);
    25b2:	2301      	movs	r3, #1
    25b4:	4083      	lsls	r3, r0
    25b6:	6113      	str	r3, [r2, #16]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    25b8:	2300      	movs	r3, #0
}
    25ba:	0018      	movs	r0, r3
    25bc:	4770      	bx	lr
    25be:	46c0      	nop			; (mov r8, r8)
    25c0:	40002400 	.word	0x40002400

000025c4 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    25c4:	2317      	movs	r3, #23
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    25c6:	2900      	cmp	r1, #0
    25c8:	d107      	bne.n	25da <extint_chan_disable_callback+0x16>
	} else {
		Assert(false);
		return NULL;
    25ca:	2200      	movs	r2, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    25cc:	281f      	cmp	r0, #31
    25ce:	d800      	bhi.n	25d2 <extint_chan_disable_callback+0xe>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    25d0:	4a03      	ldr	r2, [pc, #12]	; (25e0 <extint_chan_disable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENCLR.reg = (1UL << channel);
    25d2:	2301      	movs	r3, #1
    25d4:	4083      	lsls	r3, r0
    25d6:	60d3      	str	r3, [r2, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    25d8:	2300      	movs	r3, #0
}
    25da:	0018      	movs	r0, r3
    25dc:	4770      	bx	lr
    25de:	46c0      	nop			; (mov r8, r8)
    25e0:	40002400 	.word	0x40002400

000025e4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    25e4:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    25e6:	2200      	movs	r2, #0
    25e8:	4b15      	ldr	r3, [pc, #84]	; (2640 <EIC_Handler+0x5c>)
    25ea:	701a      	strb	r2, [r3, #0]
    25ec:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    25ee:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    25f0:	4e14      	ldr	r6, [pc, #80]	; (2644 <EIC_Handler+0x60>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    25f2:	4c13      	ldr	r4, [pc, #76]	; (2640 <EIC_Handler+0x5c>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    25f4:	2b1f      	cmp	r3, #31
    25f6:	d919      	bls.n	262c <EIC_Handler+0x48>
    25f8:	e00f      	b.n	261a <EIC_Handler+0x36>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    25fa:	2100      	movs	r1, #0
    25fc:	e000      	b.n	2600 <EIC_Handler+0x1c>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    25fe:	4912      	ldr	r1, [pc, #72]	; (2648 <EIC_Handler+0x64>)
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    2600:	614a      	str	r2, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    2602:	009b      	lsls	r3, r3, #2
    2604:	599b      	ldr	r3, [r3, r6]
    2606:	2b00      	cmp	r3, #0
    2608:	d000      	beq.n	260c <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    260a:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    260c:	7823      	ldrb	r3, [r4, #0]
    260e:	3301      	adds	r3, #1
    2610:	b2db      	uxtb	r3, r3
    2612:	7023      	strb	r3, [r4, #0]
    2614:	2b0f      	cmp	r3, #15
    2616:	d9ed      	bls.n	25f4 <EIC_Handler+0x10>
    2618:	e011      	b.n	263e <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    261a:	0029      	movs	r1, r5
    261c:	4019      	ands	r1, r3
    261e:	2201      	movs	r2, #1
    2620:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
    2622:	2100      	movs	r1, #0
    2624:	6949      	ldr	r1, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
    2626:	4211      	tst	r1, r2
    2628:	d1e7      	bne.n	25fa <EIC_Handler+0x16>
    262a:	e7ef      	b.n	260c <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    262c:	0029      	movs	r1, r5
    262e:	4019      	ands	r1, r3
    2630:	2201      	movs	r2, #1
    2632:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
    2634:	4904      	ldr	r1, [pc, #16]	; (2648 <EIC_Handler+0x64>)
    2636:	6949      	ldr	r1, [r1, #20]
    2638:	4211      	tst	r1, r2
    263a:	d1e0      	bne.n	25fe <EIC_Handler+0x1a>
    263c:	e7e6      	b.n	260c <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    263e:	bd70      	pop	{r4, r5, r6, pc}
    2640:	20000608 	.word	0x20000608
    2644:	2000060c 	.word	0x2000060c
    2648:	40002400 	.word	0x40002400

0000264c <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    264c:	4a06      	ldr	r2, [pc, #24]	; (2668 <_extint_enable+0x1c>)
    264e:	7811      	ldrb	r1, [r2, #0]
    2650:	2302      	movs	r3, #2
    2652:	430b      	orrs	r3, r1
    2654:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    2656:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    2658:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    265a:	6853      	ldr	r3, [r2, #4]
    265c:	4219      	tst	r1, r3
    265e:	d1fc      	bne.n	265a <_extint_enable+0xe>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    2660:	6853      	ldr	r3, [r2, #4]
    2662:	4218      	tst	r0, r3
    2664:	d1f9      	bne.n	265a <_extint_enable+0xe>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    2666:	4770      	bx	lr
    2668:	40002400 	.word	0x40002400

0000266c <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    266c:	4a06      	ldr	r2, [pc, #24]	; (2688 <_extint_disable+0x1c>)
    266e:	7813      	ldrb	r3, [r2, #0]
    2670:	2102      	movs	r1, #2
    2672:	438b      	bics	r3, r1
    2674:	7013      	strb	r3, [r2, #0]
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    2676:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    2678:	6853      	ldr	r3, [r2, #4]
    267a:	4219      	tst	r1, r3
    267c:	d1fc      	bne.n	2678 <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    267e:	6853      	ldr	r3, [r2, #4]
    2680:	4218      	tst	r0, r3
    2682:	d1f9      	bne.n	2678 <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    2684:	4770      	bx	lr
    2686:	46c0      	nop			; (mov r8, r8)
    2688:	40002400 	.word	0x40002400

0000268c <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    268c:	b510      	push	{r4, lr}
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    268e:	4a14      	ldr	r2, [pc, #80]	; (26e0 <_system_extint_init+0x54>)
    2690:	6953      	ldr	r3, [r2, #20]
    2692:	2180      	movs	r1, #128	; 0x80
    2694:	0089      	lsls	r1, r1, #2
    2696:	430b      	orrs	r3, r1
    2698:	6153      	str	r3, [r2, #20]
	system_gclk_chan_enable(EIC_GCLK_ID);
#endif

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
    269a:	4a12      	ldr	r2, [pc, #72]	; (26e4 <_system_extint_init+0x58>)
    269c:	7811      	ldrb	r1, [r2, #0]
    269e:	2301      	movs	r3, #1
    26a0:	430b      	orrs	r3, r1
    26a2:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    26a4:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    26a6:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    26a8:	6853      	ldr	r3, [r2, #4]
    26aa:	4219      	tst	r1, r3
    26ac:	d1fc      	bne.n	26a8 <_system_extint_init+0x1c>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    26ae:	6853      	ldr	r3, [r2, #4]
    26b0:	4218      	tst	r0, r3
    26b2:	d009      	beq.n	26c8 <_system_extint_init+0x3c>
    26b4:	e7f8      	b.n	26a8 <_system_extint_init+0x1c>

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
    26b6:	c304      	stmia	r3!, {r2}
#endif

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    26b8:	428b      	cmp	r3, r1
    26ba:	d1fc      	bne.n	26b6 <_system_extint_init+0x2a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    26bc:	2208      	movs	r2, #8
    26be:	4b0a      	ldr	r3, [pc, #40]	; (26e8 <_system_extint_init+0x5c>)
    26c0:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
    26c2:	4b0a      	ldr	r3, [pc, #40]	; (26ec <_system_extint_init+0x60>)
    26c4:	4798      	blx	r3
}
    26c6:	e009      	b.n	26dc <_system_extint_init+0x50>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
	}
#else
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_ULP32K;
    26c8:	4a06      	ldr	r2, [pc, #24]	; (26e4 <_system_extint_init+0x58>)
    26ca:	7811      	ldrb	r1, [r2, #0]
    26cc:	2310      	movs	r3, #16
    26ce:	430b      	orrs	r3, r1
    26d0:	7013      	strb	r3, [r2, #0]
    26d2:	4b07      	ldr	r3, [pc, #28]	; (26f0 <_system_extint_init+0x64>)
    26d4:	0019      	movs	r1, r3
    26d6:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
    26d8:	2200      	movs	r2, #0
    26da:	e7ec      	b.n	26b6 <_system_extint_init+0x2a>
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
}
    26dc:	bd10      	pop	{r4, pc}
    26de:	46c0      	nop			; (mov r8, r8)
    26e0:	40000400 	.word	0x40000400
    26e4:	40002400 	.word	0x40002400
    26e8:	e000e100 	.word	0xe000e100
    26ec:	0000264d 	.word	0x0000264d
    26f0:	2000060c 	.word	0x2000060c

000026f4 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    26f4:	2300      	movs	r3, #0
    26f6:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    26f8:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    26fa:	2201      	movs	r2, #1
    26fc:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
    26fe:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    2700:	3201      	adds	r2, #1
    2702:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
    2704:	7243      	strb	r3, [r0, #9]
}
    2706:	4770      	bx	lr

00002708 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    2708:	b5f0      	push	{r4, r5, r6, r7, lr}
    270a:	b083      	sub	sp, #12
    270c:	0005      	movs	r5, r0
    270e:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
    2710:	4b1b      	ldr	r3, [pc, #108]	; (2780 <extint_chan_set_config+0x78>)
    2712:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2714:	a901      	add	r1, sp, #4
    2716:	2300      	movs	r3, #0
    2718:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    271a:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    271c:	7923      	ldrb	r3, [r4, #4]
    271e:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    2720:	7a23      	ldrb	r3, [r4, #8]
    2722:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    2724:	7820      	ldrb	r0, [r4, #0]
    2726:	4b17      	ldr	r3, [pc, #92]	; (2784 <extint_chan_set_config+0x7c>)
    2728:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    272a:	2000      	movs	r0, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    272c:	2d1f      	cmp	r5, #31
    272e:	d800      	bhi.n	2732 <extint_chan_set_config+0x2a>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    2730:	4815      	ldr	r0, [pc, #84]	; (2788 <extint_chan_set_config+0x80>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    2732:	2107      	movs	r1, #7
    2734:	4029      	ands	r1, r5
    2736:	0089      	lsls	r1, r1, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    2738:	7ae2      	ldrb	r2, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    273a:	7aa3      	ldrb	r3, [r4, #10]
    273c:	2b00      	cmp	r3, #0
    273e:	d001      	beq.n	2744 <extint_chan_set_config+0x3c>
		new_config |= EIC_CONFIG_FILTEN0;
    2740:	2308      	movs	r3, #8
    2742:	431a      	orrs	r2, r3
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    2744:	08eb      	lsrs	r3, r5, #3
    2746:	009b      	lsls	r3, r3, #2
    2748:	18c3      	adds	r3, r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    274a:	69de      	ldr	r6, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    274c:	270f      	movs	r7, #15
    274e:	408f      	lsls	r7, r1
    2750:	43be      	bics	r6, r7
    2752:	408a      	lsls	r2, r1
    2754:	4332      	orrs	r2, r6
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    2756:	61da      	str	r2, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
    2758:	7a63      	ldrb	r3, [r4, #9]
    275a:	2b00      	cmp	r3, #0
    275c:	d005      	beq.n	276a <extint_chan_set_config+0x62>
		EIC_module->ASYNCH.reg |= (1UL << channel);
    275e:	6982      	ldr	r2, [r0, #24]
    2760:	2301      	movs	r3, #1
    2762:	40ab      	lsls	r3, r5
    2764:	4313      	orrs	r3, r2
    2766:	6183      	str	r3, [r0, #24]
    2768:	e006      	b.n	2778 <extint_chan_set_config+0x70>
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
    276a:	6983      	ldr	r3, [r0, #24]
    276c:	2201      	movs	r2, #1
    276e:	40aa      	lsls	r2, r5
    2770:	041b      	lsls	r3, r3, #16
    2772:	0c1b      	lsrs	r3, r3, #16
    2774:	4393      	bics	r3, r2
    2776:	6183      	str	r3, [r0, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
    2778:	4b04      	ldr	r3, [pc, #16]	; (278c <extint_chan_set_config+0x84>)
    277a:	4798      	blx	r3
}
    277c:	b003      	add	sp, #12
    277e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2780:	0000266d 	.word	0x0000266d
    2784:	00003df5 	.word	0x00003df5
    2788:	40002400 	.word	0x40002400
    278c:	0000264d 	.word	0x0000264d

00002790 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    2790:	b500      	push	{lr}
    2792:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2794:	ab01      	add	r3, sp, #4
    2796:	2280      	movs	r2, #128	; 0x80
    2798:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    279a:	780a      	ldrb	r2, [r1, #0]
    279c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    279e:	784a      	ldrb	r2, [r1, #1]
    27a0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    27a2:	788a      	ldrb	r2, [r1, #2]
    27a4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    27a6:	0019      	movs	r1, r3
    27a8:	4b01      	ldr	r3, [pc, #4]	; (27b0 <port_pin_set_config+0x20>)
    27aa:	4798      	blx	r3
}
    27ac:	b003      	add	sp, #12
    27ae:	bd00      	pop	{pc}
    27b0:	00003df5 	.word	0x00003df5

000027b4 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    27b4:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    27b6:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    27b8:	2340      	movs	r3, #64	; 0x40
    27ba:	2400      	movs	r4, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    27bc:	4281      	cmp	r1, r0
    27be:	d201      	bcs.n	27c4 <_sercom_get_sync_baud_val+0x10>
    27c0:	e00a      	b.n	27d8 <_sercom_get_sync_baud_val+0x24>

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
		baud_calculated++;
    27c2:	001c      	movs	r4, r3
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
    27c4:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    27c6:	1c63      	adds	r3, r4, #1
    27c8:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    27ca:	4288      	cmp	r0, r1
    27cc:	d9f9      	bls.n	27c2 <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    27ce:	2340      	movs	r3, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    27d0:	2cff      	cmp	r4, #255	; 0xff
    27d2:	d801      	bhi.n	27d8 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
    27d4:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    27d6:	2300      	movs	r3, #0
	}
}
    27d8:	0018      	movs	r0, r3
    27da:	bd10      	pop	{r4, pc}

000027dc <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    27dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    27de:	465f      	mov	r7, fp
    27e0:	4656      	mov	r6, sl
    27e2:	464d      	mov	r5, r9
    27e4:	4644      	mov	r4, r8
    27e6:	b4f0      	push	{r4, r5, r6, r7}
    27e8:	b089      	sub	sp, #36	; 0x24
    27ea:	000c      	movs	r4, r1
    27ec:	9205      	str	r2, [sp, #20]
    27ee:	aa12      	add	r2, sp, #72	; 0x48
    27f0:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    27f2:	0002      	movs	r2, r0
    27f4:	434a      	muls	r2, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    27f6:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    27f8:	42a2      	cmp	r2, r4
    27fa:	d900      	bls.n	27fe <_sercom_get_async_baud_val+0x22>
    27fc:	e0c6      	b.n	298c <_sercom_get_async_baud_val+0x1b0>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    27fe:	2b00      	cmp	r3, #0
    2800:	d151      	bne.n	28a6 <_sercom_get_async_baud_val+0xca>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    2802:	0002      	movs	r2, r0
    2804:	0008      	movs	r0, r1
    2806:	2100      	movs	r1, #0
    2808:	4d64      	ldr	r5, [pc, #400]	; (299c <_sercom_get_async_baud_val+0x1c0>)
    280a:	47a8      	blx	r5
    280c:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
    280e:	0026      	movs	r6, r4
    2810:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    2812:	2300      	movs	r3, #0
    2814:	2400      	movs	r4, #0
    2816:	9300      	str	r3, [sp, #0]
    2818:	9401      	str	r4, [sp, #4]
    281a:	2200      	movs	r2, #0
    281c:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    281e:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    2820:	2120      	movs	r1, #32
    2822:	468c      	mov	ip, r1
    2824:	391f      	subs	r1, #31
    2826:	9602      	str	r6, [sp, #8]
    2828:	9703      	str	r7, [sp, #12]
    282a:	2420      	movs	r4, #32
    282c:	4264      	negs	r4, r4
    282e:	1904      	adds	r4, r0, r4
    2830:	d403      	bmi.n	283a <_sercom_get_async_baud_val+0x5e>
    2832:	000d      	movs	r5, r1
    2834:	40a5      	lsls	r5, r4
    2836:	46a8      	mov	r8, r5
    2838:	e004      	b.n	2844 <_sercom_get_async_baud_val+0x68>
    283a:	4664      	mov	r4, ip
    283c:	1a24      	subs	r4, r4, r0
    283e:	000d      	movs	r5, r1
    2840:	40e5      	lsrs	r5, r4
    2842:	46a8      	mov	r8, r5
    2844:	000c      	movs	r4, r1
    2846:	4084      	lsls	r4, r0
    2848:	46a1      	mov	r9, r4

		r = r << 1;
    284a:	0014      	movs	r4, r2
    284c:	001d      	movs	r5, r3
    284e:	18a4      	adds	r4, r4, r2
    2850:	415d      	adcs	r5, r3
    2852:	0022      	movs	r2, r4
    2854:	002b      	movs	r3, r5

		if (n & bit_shift) {
    2856:	4646      	mov	r6, r8
    2858:	465f      	mov	r7, fp
    285a:	423e      	tst	r6, r7
    285c:	d003      	beq.n	2866 <_sercom_get_async_baud_val+0x8a>
			r |= 0x01;
    285e:	000e      	movs	r6, r1
    2860:	4326      	orrs	r6, r4
    2862:	0032      	movs	r2, r6
    2864:	002b      	movs	r3, r5
		}

		if (r >= d) {
    2866:	9c02      	ldr	r4, [sp, #8]
    2868:	9d03      	ldr	r5, [sp, #12]
    286a:	429d      	cmp	r5, r3
    286c:	d80f      	bhi.n	288e <_sercom_get_async_baud_val+0xb2>
    286e:	d101      	bne.n	2874 <_sercom_get_async_baud_val+0x98>
    2870:	4294      	cmp	r4, r2
    2872:	d80c      	bhi.n	288e <_sercom_get_async_baud_val+0xb2>
			r = r - d;
    2874:	9c02      	ldr	r4, [sp, #8]
    2876:	9d03      	ldr	r5, [sp, #12]
    2878:	1b12      	subs	r2, r2, r4
    287a:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    287c:	464d      	mov	r5, r9
    287e:	9e00      	ldr	r6, [sp, #0]
    2880:	9f01      	ldr	r7, [sp, #4]
    2882:	4335      	orrs	r5, r6
    2884:	003c      	movs	r4, r7
    2886:	4646      	mov	r6, r8
    2888:	4334      	orrs	r4, r6
    288a:	9500      	str	r5, [sp, #0]
    288c:	9401      	str	r4, [sp, #4]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    288e:	3801      	subs	r0, #1
    2890:	d2cb      	bcs.n	282a <_sercom_get_async_baud_val+0x4e>
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
    2892:	2200      	movs	r2, #0
    2894:	2301      	movs	r3, #1
    2896:	9800      	ldr	r0, [sp, #0]
    2898:	9901      	ldr	r1, [sp, #4]
    289a:	1a12      	subs	r2, r2, r0
    289c:	418b      	sbcs	r3, r1
    289e:	0c12      	lsrs	r2, r2, #16
    28a0:	041b      	lsls	r3, r3, #16
    28a2:	431a      	orrs	r2, r3
    28a4:	e06f      	b.n	2986 <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
    28a6:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    28a8:	2b01      	cmp	r3, #1
    28aa:	d16c      	bne.n	2986 <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    28ac:	0f63      	lsrs	r3, r4, #29
    28ae:	9304      	str	r3, [sp, #16]
    28b0:	00e3      	lsls	r3, r4, #3
    28b2:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
    28b4:	000a      	movs	r2, r1
    28b6:	2300      	movs	r3, #0
    28b8:	2100      	movs	r1, #0
    28ba:	4c38      	ldr	r4, [pc, #224]	; (299c <_sercom_get_async_baud_val+0x1c0>)
    28bc:	47a0      	blx	r4
    28be:	0004      	movs	r4, r0
    28c0:	000d      	movs	r5, r1
    28c2:	2300      	movs	r3, #0
    28c4:	469c      	mov	ip, r3
    28c6:	9306      	str	r3, [sp, #24]
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
    28c8:	3320      	adds	r3, #32
    28ca:	469b      	mov	fp, r3
    28cc:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
    28ce:	4663      	mov	r3, ip
    28d0:	9307      	str	r3, [sp, #28]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    28d2:	2300      	movs	r3, #0
    28d4:	9302      	str	r3, [sp, #8]
    28d6:	2200      	movs	r2, #0
    28d8:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    28da:	213f      	movs	r1, #63	; 0x3f
    28dc:	9400      	str	r4, [sp, #0]
    28de:	9501      	str	r5, [sp, #4]
    28e0:	000f      	movs	r7, r1
		bit_shift = (uint64_t)1 << i;
    28e2:	2120      	movs	r1, #32
    28e4:	4249      	negs	r1, r1
    28e6:	1879      	adds	r1, r7, r1
    28e8:	d403      	bmi.n	28f2 <_sercom_get_async_baud_val+0x116>
    28ea:	0030      	movs	r0, r6
    28ec:	4088      	lsls	r0, r1
    28ee:	4684      	mov	ip, r0
    28f0:	e004      	b.n	28fc <_sercom_get_async_baud_val+0x120>
    28f2:	4659      	mov	r1, fp
    28f4:	1bc9      	subs	r1, r1, r7
    28f6:	0030      	movs	r0, r6
    28f8:	40c8      	lsrs	r0, r1
    28fa:	4684      	mov	ip, r0
    28fc:	0031      	movs	r1, r6
    28fe:	40b9      	lsls	r1, r7
    2900:	4689      	mov	r9, r1

		r = r << 1;
    2902:	0010      	movs	r0, r2
    2904:	0019      	movs	r1, r3
    2906:	1880      	adds	r0, r0, r2
    2908:	4159      	adcs	r1, r3
    290a:	0002      	movs	r2, r0
    290c:	000b      	movs	r3, r1

		if (n & bit_shift) {
    290e:	4644      	mov	r4, r8
    2910:	464d      	mov	r5, r9
    2912:	402c      	ands	r4, r5
    2914:	46a2      	mov	sl, r4
    2916:	4664      	mov	r4, ip
    2918:	9d04      	ldr	r5, [sp, #16]
    291a:	402c      	ands	r4, r5
    291c:	46a4      	mov	ip, r4
    291e:	4654      	mov	r4, sl
    2920:	4665      	mov	r5, ip
    2922:	432c      	orrs	r4, r5
    2924:	d003      	beq.n	292e <_sercom_get_async_baud_val+0x152>
			r |= 0x01;
    2926:	0034      	movs	r4, r6
    2928:	4304      	orrs	r4, r0
    292a:	0022      	movs	r2, r4
    292c:	000b      	movs	r3, r1
		}

		if (r >= d) {
    292e:	9800      	ldr	r0, [sp, #0]
    2930:	9901      	ldr	r1, [sp, #4]
    2932:	4299      	cmp	r1, r3
    2934:	d80a      	bhi.n	294c <_sercom_get_async_baud_val+0x170>
    2936:	d101      	bne.n	293c <_sercom_get_async_baud_val+0x160>
    2938:	4290      	cmp	r0, r2
    293a:	d807      	bhi.n	294c <_sercom_get_async_baud_val+0x170>
			r = r - d;
    293c:	9800      	ldr	r0, [sp, #0]
    293e:	9901      	ldr	r1, [sp, #4]
    2940:	1a12      	subs	r2, r2, r0
    2942:	418b      	sbcs	r3, r1
			q |= bit_shift;
    2944:	9902      	ldr	r1, [sp, #8]
    2946:	4648      	mov	r0, r9
    2948:	4301      	orrs	r1, r0
    294a:	9102      	str	r1, [sp, #8]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    294c:	3f01      	subs	r7, #1
    294e:	d2c8      	bcs.n	28e2 <_sercom_get_async_baud_val+0x106>
    2950:	9c00      	ldr	r4, [sp, #0]
    2952:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
    2954:	9902      	ldr	r1, [sp, #8]
    2956:	9a07      	ldr	r2, [sp, #28]
    2958:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
    295a:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
    295c:	4910      	ldr	r1, [pc, #64]	; (29a0 <_sercom_get_async_baud_val+0x1c4>)
    295e:	428b      	cmp	r3, r1
    2960:	d90b      	bls.n	297a <_sercom_get_async_baud_val+0x19e>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    2962:	9b06      	ldr	r3, [sp, #24]
    2964:	3301      	adds	r3, #1
    2966:	b2db      	uxtb	r3, r3
    2968:	0019      	movs	r1, r3
    296a:	9306      	str	r3, [sp, #24]
    296c:	0013      	movs	r3, r2
    296e:	3301      	adds	r3, #1
    2970:	9307      	str	r3, [sp, #28]
    2972:	2908      	cmp	r1, #8
    2974:	d1ad      	bne.n	28d2 <_sercom_get_async_baud_val+0xf6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2976:	2540      	movs	r5, #64	; 0x40
    2978:	e008      	b.n	298c <_sercom_get_async_baud_val+0x1b0>
    297a:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    297c:	9a06      	ldr	r2, [sp, #24]
    297e:	2a08      	cmp	r2, #8
    2980:	d004      	beq.n	298c <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
    2982:	0352      	lsls	r2, r2, #13
    2984:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
    2986:	9b05      	ldr	r3, [sp, #20]
    2988:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    298a:	2500      	movs	r5, #0
}
    298c:	0028      	movs	r0, r5
    298e:	b009      	add	sp, #36	; 0x24
    2990:	bc3c      	pop	{r2, r3, r4, r5}
    2992:	4690      	mov	r8, r2
    2994:	4699      	mov	r9, r3
    2996:	46a2      	mov	sl, r4
    2998:	46ab      	mov	fp, r5
    299a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    299c:	0000556d 	.word	0x0000556d
    29a0:	00001fff 	.word	0x00001fff

000029a4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    29a4:	b510      	push	{r4, lr}
    29a6:	b082      	sub	sp, #8
    29a8:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    29aa:	4b0e      	ldr	r3, [pc, #56]	; (29e4 <sercom_set_gclk_generator+0x40>)
    29ac:	781b      	ldrb	r3, [r3, #0]
    29ae:	2b00      	cmp	r3, #0
    29b0:	d001      	beq.n	29b6 <sercom_set_gclk_generator+0x12>
    29b2:	2900      	cmp	r1, #0
    29b4:	d00d      	beq.n	29d2 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
    29b6:	a901      	add	r1, sp, #4
    29b8:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    29ba:	2011      	movs	r0, #17
    29bc:	4b0a      	ldr	r3, [pc, #40]	; (29e8 <sercom_set_gclk_generator+0x44>)
    29be:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    29c0:	2011      	movs	r0, #17
    29c2:	4b0a      	ldr	r3, [pc, #40]	; (29ec <sercom_set_gclk_generator+0x48>)
    29c4:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    29c6:	4b07      	ldr	r3, [pc, #28]	; (29e4 <sercom_set_gclk_generator+0x40>)
    29c8:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    29ca:	2201      	movs	r2, #1
    29cc:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    29ce:	2000      	movs	r0, #0
    29d0:	e006      	b.n	29e0 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
    29d2:	4b04      	ldr	r3, [pc, #16]	; (29e4 <sercom_set_gclk_generator+0x40>)
    29d4:	785b      	ldrb	r3, [r3, #1]
    29d6:	4283      	cmp	r3, r0
    29d8:	d001      	beq.n	29de <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    29da:	201d      	movs	r0, #29
    29dc:	e000      	b.n	29e0 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
    29de:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
    29e0:	b002      	add	sp, #8
    29e2:	bd10      	pop	{r4, pc}
    29e4:	20000174 	.word	0x20000174
    29e8:	00003cf9 	.word	0x00003cf9
    29ec:	00003c89 	.word	0x00003c89

000029f0 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    29f0:	4b44      	ldr	r3, [pc, #272]	; (2b04 <_sercom_get_default_pad+0x114>)
    29f2:	4298      	cmp	r0, r3
    29f4:	d034      	beq.n	2a60 <_sercom_get_default_pad+0x70>
    29f6:	d807      	bhi.n	2a08 <_sercom_get_default_pad+0x18>
    29f8:	2384      	movs	r3, #132	; 0x84
    29fa:	05db      	lsls	r3, r3, #23
    29fc:	4298      	cmp	r0, r3
    29fe:	d00d      	beq.n	2a1c <_sercom_get_default_pad+0x2c>
    2a00:	4b41      	ldr	r3, [pc, #260]	; (2b08 <_sercom_get_default_pad+0x118>)
    2a02:	4298      	cmp	r0, r3
    2a04:	d01b      	beq.n	2a3e <_sercom_get_default_pad+0x4e>
    2a06:	e06f      	b.n	2ae8 <_sercom_get_default_pad+0xf8>
    2a08:	4b40      	ldr	r3, [pc, #256]	; (2b0c <_sercom_get_default_pad+0x11c>)
    2a0a:	4298      	cmp	r0, r3
    2a0c:	d04a      	beq.n	2aa4 <_sercom_get_default_pad+0xb4>
    2a0e:	4b40      	ldr	r3, [pc, #256]	; (2b10 <_sercom_get_default_pad+0x120>)
    2a10:	4298      	cmp	r0, r3
    2a12:	d058      	beq.n	2ac6 <_sercom_get_default_pad+0xd6>
    2a14:	4b3f      	ldr	r3, [pc, #252]	; (2b14 <_sercom_get_default_pad+0x124>)
    2a16:	4298      	cmp	r0, r3
    2a18:	d166      	bne.n	2ae8 <_sercom_get_default_pad+0xf8>
    2a1a:	e032      	b.n	2a82 <_sercom_get_default_pad+0x92>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2a1c:	2901      	cmp	r1, #1
    2a1e:	d006      	beq.n	2a2e <_sercom_get_default_pad+0x3e>
    2a20:	2900      	cmp	r1, #0
    2a22:	d063      	beq.n	2aec <_sercom_get_default_pad+0xfc>
    2a24:	2902      	cmp	r1, #2
    2a26:	d006      	beq.n	2a36 <_sercom_get_default_pad+0x46>
    2a28:	2903      	cmp	r1, #3
    2a2a:	d006      	beq.n	2a3a <_sercom_get_default_pad+0x4a>
    2a2c:	e001      	b.n	2a32 <_sercom_get_default_pad+0x42>
    2a2e:	483a      	ldr	r0, [pc, #232]	; (2b18 <_sercom_get_default_pad+0x128>)
    2a30:	e067      	b.n	2b02 <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
    2a32:	2000      	movs	r0, #0
    2a34:	e065      	b.n	2b02 <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2a36:	4839      	ldr	r0, [pc, #228]	; (2b1c <_sercom_get_default_pad+0x12c>)
    2a38:	e063      	b.n	2b02 <_sercom_get_default_pad+0x112>
    2a3a:	4839      	ldr	r0, [pc, #228]	; (2b20 <_sercom_get_default_pad+0x130>)
    2a3c:	e061      	b.n	2b02 <_sercom_get_default_pad+0x112>
    2a3e:	2901      	cmp	r1, #1
    2a40:	d006      	beq.n	2a50 <_sercom_get_default_pad+0x60>
    2a42:	2900      	cmp	r1, #0
    2a44:	d054      	beq.n	2af0 <_sercom_get_default_pad+0x100>
    2a46:	2902      	cmp	r1, #2
    2a48:	d006      	beq.n	2a58 <_sercom_get_default_pad+0x68>
    2a4a:	2903      	cmp	r1, #3
    2a4c:	d006      	beq.n	2a5c <_sercom_get_default_pad+0x6c>
    2a4e:	e001      	b.n	2a54 <_sercom_get_default_pad+0x64>
    2a50:	4834      	ldr	r0, [pc, #208]	; (2b24 <_sercom_get_default_pad+0x134>)
    2a52:	e056      	b.n	2b02 <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
    2a54:	2000      	movs	r0, #0
    2a56:	e054      	b.n	2b02 <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2a58:	4833      	ldr	r0, [pc, #204]	; (2b28 <_sercom_get_default_pad+0x138>)
    2a5a:	e052      	b.n	2b02 <_sercom_get_default_pad+0x112>
    2a5c:	4833      	ldr	r0, [pc, #204]	; (2b2c <_sercom_get_default_pad+0x13c>)
    2a5e:	e050      	b.n	2b02 <_sercom_get_default_pad+0x112>
    2a60:	2901      	cmp	r1, #1
    2a62:	d006      	beq.n	2a72 <_sercom_get_default_pad+0x82>
    2a64:	2900      	cmp	r1, #0
    2a66:	d045      	beq.n	2af4 <_sercom_get_default_pad+0x104>
    2a68:	2902      	cmp	r1, #2
    2a6a:	d006      	beq.n	2a7a <_sercom_get_default_pad+0x8a>
    2a6c:	2903      	cmp	r1, #3
    2a6e:	d006      	beq.n	2a7e <_sercom_get_default_pad+0x8e>
    2a70:	e001      	b.n	2a76 <_sercom_get_default_pad+0x86>
    2a72:	482f      	ldr	r0, [pc, #188]	; (2b30 <_sercom_get_default_pad+0x140>)
    2a74:	e045      	b.n	2b02 <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
    2a76:	2000      	movs	r0, #0
    2a78:	e043      	b.n	2b02 <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2a7a:	482e      	ldr	r0, [pc, #184]	; (2b34 <_sercom_get_default_pad+0x144>)
    2a7c:	e041      	b.n	2b02 <_sercom_get_default_pad+0x112>
    2a7e:	482e      	ldr	r0, [pc, #184]	; (2b38 <_sercom_get_default_pad+0x148>)
    2a80:	e03f      	b.n	2b02 <_sercom_get_default_pad+0x112>
    2a82:	2901      	cmp	r1, #1
    2a84:	d006      	beq.n	2a94 <_sercom_get_default_pad+0xa4>
    2a86:	2900      	cmp	r1, #0
    2a88:	d036      	beq.n	2af8 <_sercom_get_default_pad+0x108>
    2a8a:	2902      	cmp	r1, #2
    2a8c:	d006      	beq.n	2a9c <_sercom_get_default_pad+0xac>
    2a8e:	2903      	cmp	r1, #3
    2a90:	d006      	beq.n	2aa0 <_sercom_get_default_pad+0xb0>
    2a92:	e001      	b.n	2a98 <_sercom_get_default_pad+0xa8>
    2a94:	4829      	ldr	r0, [pc, #164]	; (2b3c <_sercom_get_default_pad+0x14c>)
    2a96:	e034      	b.n	2b02 <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
    2a98:	2000      	movs	r0, #0
    2a9a:	e032      	b.n	2b02 <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2a9c:	4828      	ldr	r0, [pc, #160]	; (2b40 <_sercom_get_default_pad+0x150>)
    2a9e:	e030      	b.n	2b02 <_sercom_get_default_pad+0x112>
    2aa0:	4828      	ldr	r0, [pc, #160]	; (2b44 <_sercom_get_default_pad+0x154>)
    2aa2:	e02e      	b.n	2b02 <_sercom_get_default_pad+0x112>
    2aa4:	2901      	cmp	r1, #1
    2aa6:	d006      	beq.n	2ab6 <_sercom_get_default_pad+0xc6>
    2aa8:	2900      	cmp	r1, #0
    2aaa:	d027      	beq.n	2afc <_sercom_get_default_pad+0x10c>
    2aac:	2902      	cmp	r1, #2
    2aae:	d006      	beq.n	2abe <_sercom_get_default_pad+0xce>
    2ab0:	2903      	cmp	r1, #3
    2ab2:	d006      	beq.n	2ac2 <_sercom_get_default_pad+0xd2>
    2ab4:	e001      	b.n	2aba <_sercom_get_default_pad+0xca>
    2ab6:	4824      	ldr	r0, [pc, #144]	; (2b48 <_sercom_get_default_pad+0x158>)
    2ab8:	e023      	b.n	2b02 <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
    2aba:	2000      	movs	r0, #0
    2abc:	e021      	b.n	2b02 <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2abe:	4823      	ldr	r0, [pc, #140]	; (2b4c <_sercom_get_default_pad+0x15c>)
    2ac0:	e01f      	b.n	2b02 <_sercom_get_default_pad+0x112>
    2ac2:	4823      	ldr	r0, [pc, #140]	; (2b50 <_sercom_get_default_pad+0x160>)
    2ac4:	e01d      	b.n	2b02 <_sercom_get_default_pad+0x112>
    2ac6:	2901      	cmp	r1, #1
    2ac8:	d006      	beq.n	2ad8 <_sercom_get_default_pad+0xe8>
    2aca:	2900      	cmp	r1, #0
    2acc:	d018      	beq.n	2b00 <_sercom_get_default_pad+0x110>
    2ace:	2902      	cmp	r1, #2
    2ad0:	d006      	beq.n	2ae0 <_sercom_get_default_pad+0xf0>
    2ad2:	2903      	cmp	r1, #3
    2ad4:	d006      	beq.n	2ae4 <_sercom_get_default_pad+0xf4>
    2ad6:	e001      	b.n	2adc <_sercom_get_default_pad+0xec>
    2ad8:	481e      	ldr	r0, [pc, #120]	; (2b54 <_sercom_get_default_pad+0x164>)
    2ada:	e012      	b.n	2b02 <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
    2adc:	2000      	movs	r0, #0
    2ade:	e010      	b.n	2b02 <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2ae0:	481d      	ldr	r0, [pc, #116]	; (2b58 <_sercom_get_default_pad+0x168>)
    2ae2:	e00e      	b.n	2b02 <_sercom_get_default_pad+0x112>
    2ae4:	481d      	ldr	r0, [pc, #116]	; (2b5c <_sercom_get_default_pad+0x16c>)
    2ae6:	e00c      	b.n	2b02 <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
    2ae8:	2000      	movs	r0, #0
    2aea:	e00a      	b.n	2b02 <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2aec:	481c      	ldr	r0, [pc, #112]	; (2b60 <_sercom_get_default_pad+0x170>)
    2aee:	e008      	b.n	2b02 <_sercom_get_default_pad+0x112>
    2af0:	2003      	movs	r0, #3
    2af2:	e006      	b.n	2b02 <_sercom_get_default_pad+0x112>
    2af4:	481b      	ldr	r0, [pc, #108]	; (2b64 <_sercom_get_default_pad+0x174>)
    2af6:	e004      	b.n	2b02 <_sercom_get_default_pad+0x112>
    2af8:	481b      	ldr	r0, [pc, #108]	; (2b68 <_sercom_get_default_pad+0x178>)
    2afa:	e002      	b.n	2b02 <_sercom_get_default_pad+0x112>
    2afc:	481b      	ldr	r0, [pc, #108]	; (2b6c <_sercom_get_default_pad+0x17c>)
    2afe:	e000      	b.n	2b02 <_sercom_get_default_pad+0x112>
    2b00:	481b      	ldr	r0, [pc, #108]	; (2b70 <_sercom_get_default_pad+0x180>)
	}

	Assert(false);
	return 0;
}
    2b02:	4770      	bx	lr
    2b04:	42000800 	.word	0x42000800
    2b08:	42000400 	.word	0x42000400
    2b0c:	42001000 	.word	0x42001000
    2b10:	43000400 	.word	0x43000400
    2b14:	42000c00 	.word	0x42000c00
    2b18:	00050003 	.word	0x00050003
    2b1c:	00060003 	.word	0x00060003
    2b20:	00070003 	.word	0x00070003
    2b24:	00010003 	.word	0x00010003
    2b28:	001e0003 	.word	0x001e0003
    2b2c:	001f0003 	.word	0x001f0003
    2b30:	00090003 	.word	0x00090003
    2b34:	000a0003 	.word	0x000a0003
    2b38:	000b0003 	.word	0x000b0003
    2b3c:	00110003 	.word	0x00110003
    2b40:	00120003 	.word	0x00120003
    2b44:	00130003 	.word	0x00130003
    2b48:	000d0003 	.word	0x000d0003
    2b4c:	000e0003 	.word	0x000e0003
    2b50:	000f0003 	.word	0x000f0003
    2b54:	00170003 	.word	0x00170003
    2b58:	00180003 	.word	0x00180003
    2b5c:	00190003 	.word	0x00190003
    2b60:	00040003 	.word	0x00040003
    2b64:	00080003 	.word	0x00080003
    2b68:	00100003 	.word	0x00100003
    2b6c:	000c0003 	.word	0x000c0003
    2b70:	00160003 	.word	0x00160003

00002b74 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    2b74:	b530      	push	{r4, r5, lr}
    2b76:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    2b78:	4b0c      	ldr	r3, [pc, #48]	; (2bac <_sercom_get_sercom_inst_index+0x38>)
    2b7a:	466a      	mov	r2, sp
    2b7c:	cb32      	ldmia	r3!, {r1, r4, r5}
    2b7e:	c232      	stmia	r2!, {r1, r4, r5}
    2b80:	cb32      	ldmia	r3!, {r1, r4, r5}
    2b82:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2b84:	9b00      	ldr	r3, [sp, #0]
    2b86:	4283      	cmp	r3, r0
    2b88:	d006      	beq.n	2b98 <_sercom_get_sercom_inst_index+0x24>
    2b8a:	2301      	movs	r3, #1
    2b8c:	009a      	lsls	r2, r3, #2
    2b8e:	4669      	mov	r1, sp
    2b90:	5852      	ldr	r2, [r2, r1]
    2b92:	4282      	cmp	r2, r0
    2b94:	d103      	bne.n	2b9e <_sercom_get_sercom_inst_index+0x2a>
    2b96:	e000      	b.n	2b9a <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2b98:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
    2b9a:	b2d8      	uxtb	r0, r3
    2b9c:	e003      	b.n	2ba6 <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2b9e:	3301      	adds	r3, #1
    2ba0:	2b06      	cmp	r3, #6
    2ba2:	d1f3      	bne.n	2b8c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    2ba4:	2000      	movs	r0, #0
}
    2ba6:	b007      	add	sp, #28
    2ba8:	bd30      	pop	{r4, r5, pc}
    2baa:	46c0      	nop			; (mov r8, r8)
    2bac:	00005fa4 	.word	0x00005fa4

00002bb0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2bb0:	4770      	bx	lr
    2bb2:	46c0      	nop			; (mov r8, r8)

00002bb4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    2bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    2bb6:	4b0a      	ldr	r3, [pc, #40]	; (2be0 <_sercom_set_handler+0x2c>)
    2bb8:	781b      	ldrb	r3, [r3, #0]
    2bba:	2b00      	cmp	r3, #0
    2bbc:	d10c      	bne.n	2bd8 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2bbe:	4f09      	ldr	r7, [pc, #36]	; (2be4 <_sercom_set_handler+0x30>)
    2bc0:	4e09      	ldr	r6, [pc, #36]	; (2be8 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    2bc2:	4d0a      	ldr	r5, [pc, #40]	; (2bec <_sercom_set_handler+0x38>)
    2bc4:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2bc6:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    2bc8:	195a      	adds	r2, r3, r5
    2bca:	6014      	str	r4, [r2, #0]
    2bcc:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2bce:	2b18      	cmp	r3, #24
    2bd0:	d1f9      	bne.n	2bc6 <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    2bd2:	2201      	movs	r2, #1
    2bd4:	4b02      	ldr	r3, [pc, #8]	; (2be0 <_sercom_set_handler+0x2c>)
    2bd6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2bd8:	0080      	lsls	r0, r0, #2
    2bda:	4b02      	ldr	r3, [pc, #8]	; (2be4 <_sercom_set_handler+0x30>)
    2bdc:	50c1      	str	r1, [r0, r3]
}
    2bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2be0:	20000176 	.word	0x20000176
    2be4:	20000178 	.word	0x20000178
    2be8:	00002bb1 	.word	0x00002bb1
    2bec:	2000064c 	.word	0x2000064c

00002bf0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2bf0:	b510      	push	{r4, lr}
    2bf2:	b082      	sub	sp, #8
    2bf4:	0004      	movs	r4, r0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    2bf6:	2206      	movs	r2, #6
    2bf8:	4905      	ldr	r1, [pc, #20]	; (2c10 <_sercom_get_interrupt_vector+0x20>)
    2bfa:	4668      	mov	r0, sp
    2bfc:	4b05      	ldr	r3, [pc, #20]	; (2c14 <_sercom_get_interrupt_vector+0x24>)
    2bfe:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    2c00:	0020      	movs	r0, r4
    2c02:	4b05      	ldr	r3, [pc, #20]	; (2c18 <_sercom_get_interrupt_vector+0x28>)
    2c04:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    2c06:	466b      	mov	r3, sp
    2c08:	5618      	ldrsb	r0, [r3, r0]
}
    2c0a:	b002      	add	sp, #8
    2c0c:	bd10      	pop	{r4, pc}
    2c0e:	46c0      	nop			; (mov r8, r8)
    2c10:	00005fbc 	.word	0x00005fbc
    2c14:	00005611 	.word	0x00005611
    2c18:	00002b75 	.word	0x00002b75

00002c1c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    2c1c:	b510      	push	{r4, lr}
    2c1e:	4b02      	ldr	r3, [pc, #8]	; (2c28 <SERCOM0_Handler+0xc>)
    2c20:	681b      	ldr	r3, [r3, #0]
    2c22:	2000      	movs	r0, #0
    2c24:	4798      	blx	r3
    2c26:	bd10      	pop	{r4, pc}
    2c28:	20000178 	.word	0x20000178

00002c2c <SERCOM1_Handler>:
    2c2c:	b510      	push	{r4, lr}
    2c2e:	4b02      	ldr	r3, [pc, #8]	; (2c38 <SERCOM1_Handler+0xc>)
    2c30:	685b      	ldr	r3, [r3, #4]
    2c32:	2001      	movs	r0, #1
    2c34:	4798      	blx	r3
    2c36:	bd10      	pop	{r4, pc}
    2c38:	20000178 	.word	0x20000178

00002c3c <SERCOM2_Handler>:
    2c3c:	b510      	push	{r4, lr}
    2c3e:	4b02      	ldr	r3, [pc, #8]	; (2c48 <SERCOM2_Handler+0xc>)
    2c40:	689b      	ldr	r3, [r3, #8]
    2c42:	2002      	movs	r0, #2
    2c44:	4798      	blx	r3
    2c46:	bd10      	pop	{r4, pc}
    2c48:	20000178 	.word	0x20000178

00002c4c <SERCOM3_Handler>:
    2c4c:	b510      	push	{r4, lr}
    2c4e:	4b02      	ldr	r3, [pc, #8]	; (2c58 <SERCOM3_Handler+0xc>)
    2c50:	68db      	ldr	r3, [r3, #12]
    2c52:	2003      	movs	r0, #3
    2c54:	4798      	blx	r3
    2c56:	bd10      	pop	{r4, pc}
    2c58:	20000178 	.word	0x20000178

00002c5c <SERCOM4_Handler>:
    2c5c:	b510      	push	{r4, lr}
    2c5e:	4b02      	ldr	r3, [pc, #8]	; (2c68 <SERCOM4_Handler+0xc>)
    2c60:	691b      	ldr	r3, [r3, #16]
    2c62:	2004      	movs	r0, #4
    2c64:	4798      	blx	r3
    2c66:	bd10      	pop	{r4, pc}
    2c68:	20000178 	.word	0x20000178

00002c6c <SERCOM5_Handler>:
    2c6c:	b510      	push	{r4, lr}
    2c6e:	4b02      	ldr	r3, [pc, #8]	; (2c78 <SERCOM5_Handler+0xc>)
    2c70:	695b      	ldr	r3, [r3, #20]
    2c72:	2005      	movs	r0, #5
    2c74:	4798      	blx	r3
    2c76:	bd10      	pop	{r4, pc}
    2c78:	20000178 	.word	0x20000178

00002c7c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    2c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c7e:	4657      	mov	r7, sl
    2c80:	464e      	mov	r6, r9
    2c82:	4645      	mov	r5, r8
    2c84:	b4e0      	push	{r5, r6, r7}
    2c86:	b088      	sub	sp, #32
    2c88:	4680      	mov	r8, r0
    2c8a:	000e      	movs	r6, r1
    2c8c:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    2c8e:	0003      	movs	r3, r0
    2c90:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    2c92:	680b      	ldr	r3, [r1, #0]
    2c94:	079b      	lsls	r3, r3, #30
    2c96:	d400      	bmi.n	2c9a <spi_init+0x1e>
    2c98:	e08c      	b.n	2db4 <spi_init+0x138>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    2c9a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2c9c:	9303      	str	r3, [sp, #12]
    2c9e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    2ca0:	9304      	str	r3, [sp, #16]
    2ca2:	6b13      	ldr	r3, [r2, #48]	; 0x30
    2ca4:	9305      	str	r3, [sp, #20]
    2ca6:	6b53      	ldr	r3, [r2, #52]	; 0x34
    2ca8:	9306      	str	r3, [sp, #24]
    2caa:	2700      	movs	r7, #0
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
    2cac:	231f      	movs	r3, #31
    2cae:	4699      	mov	r9, r3
    2cb0:	b2f9      	uxtb	r1, r7
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2cb2:	00bb      	lsls	r3, r7, #2
    2cb4:	aa03      	add	r2, sp, #12
    2cb6:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    2cb8:	2800      	cmp	r0, #0
    2cba:	d102      	bne.n	2cc2 <spi_init+0x46>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2cbc:	0030      	movs	r0, r6
    2cbe:	4b96      	ldr	r3, [pc, #600]	; (2f18 <spi_init+0x29c>)
    2cc0:	4798      	blx	r3
		}

		if (current_pinmux == PINMUX_UNUSED) {
    2cc2:	1c43      	adds	r3, r0, #1
    2cc4:	d027      	beq.n	2d16 <spi_init+0x9a>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    2cc6:	0402      	lsls	r2, r0, #16
    2cc8:	0c13      	lsrs	r3, r2, #16
    2cca:	469c      	mov	ip, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    2ccc:	0c00      	lsrs	r0, r0, #16
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2cce:	b2c1      	uxtb	r1, r0
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2cd0:	2500      	movs	r5, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2cd2:	0603      	lsls	r3, r0, #24
    2cd4:	d403      	bmi.n	2cde <spi_init+0x62>
		return &(ports[port_index]->Group[group_index]);
    2cd6:	094b      	lsrs	r3, r1, #5
    2cd8:	01db      	lsls	r3, r3, #7
    2cda:	4a90      	ldr	r2, [pc, #576]	; (2f1c <spi_init+0x2a0>)
    2cdc:	189d      	adds	r5, r3, r2
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
    2cde:	464b      	mov	r3, r9
    2ce0:	400b      	ands	r3, r1

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    2ce2:	18e8      	adds	r0, r5, r3
    2ce4:	3040      	adds	r0, #64	; 0x40
    2ce6:	7800      	ldrb	r0, [r0, #0]
    2ce8:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    2cea:	2080      	movs	r0, #128	; 0x80
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    2cec:	4652      	mov	r2, sl
    2cee:	07d2      	lsls	r2, r2, #31
    2cf0:	d50a      	bpl.n	2d08 <spi_init+0x8c>
		return SYSTEM_PINMUX_GPIO;
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    2cf2:	085b      	lsrs	r3, r3, #1
    2cf4:	18eb      	adds	r3, r5, r3
    2cf6:	3330      	adds	r3, #48	; 0x30
    2cf8:	7818      	ldrb	r0, [r3, #0]
    2cfa:	b2c0      	uxtb	r0, r0

	if (pin_index & 1) {
    2cfc:	07cb      	lsls	r3, r1, #31
    2cfe:	d501      	bpl.n	2d04 <spi_init+0x88>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    2d00:	0900      	lsrs	r0, r0, #4
    2d02:	e001      	b.n	2d08 <spi_init+0x8c>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    2d04:	230f      	movs	r3, #15
    2d06:	4018      	ands	r0, r3

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    2d08:	4584      	cmp	ip, r0
    2d0a:	d004      	beq.n	2d16 <spi_init+0x9a>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
    2d0c:	2300      	movs	r3, #0
    2d0e:	4642      	mov	r2, r8
    2d10:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
    2d12:	201c      	movs	r0, #28
    2d14:	e0f9      	b.n	2f0a <spi_init+0x28e>
    2d16:	3701      	adds	r7, #1
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    2d18:	2f04      	cmp	r7, #4
    2d1a:	d1c9      	bne.n	2cb0 <spi_init+0x34>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    2d1c:	2011      	movs	r0, #17
    2d1e:	4b80      	ldr	r3, [pc, #512]	; (2f20 <spi_init+0x2a4>)
    2d20:	4798      	blx	r3
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    2d22:	7822      	ldrb	r2, [r4, #0]
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
    2d24:	2500      	movs	r5, #0
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    2d26:	2a01      	cmp	r2, #1
    2d28:	d112      	bne.n	2d50 <spi_init+0xd4>
		enum status_code error_code = _sercom_get_sync_baud_val(
    2d2a:	aa02      	add	r2, sp, #8
    2d2c:	0001      	movs	r1, r0
    2d2e:	69a0      	ldr	r0, [r4, #24]
    2d30:	4b7c      	ldr	r3, [pc, #496]	; (2f24 <spi_init+0x2a8>)
    2d32:	4798      	blx	r3
    2d34:	0003      	movs	r3, r0
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    2d36:	2017      	movs	r0, #23
	if (config->mode == SPI_MODE_MASTER) {
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
    2d38:	2b00      	cmp	r3, #0
    2d3a:	d000      	beq.n	2d3e <spi_init+0xc2>
    2d3c:	e0e5      	b.n	2f0a <spi_init+0x28e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    2d3e:	7b33      	ldrb	r3, [r6, #12]
    2d40:	b2db      	uxtb	r3, r3
    2d42:	aa02      	add	r2, sp, #8
    2d44:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    2d46:	3005      	adds	r0, #5
		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    2d48:	429a      	cmp	r2, r3
    2d4a:	d000      	beq.n	2d4e <spi_init+0xd2>
    2d4c:	e0dd      	b.n	2f0a <spi_init+0x28e>
			return STATUS_ERR_DENIED;
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    2d4e:	350c      	adds	r5, #12

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    2d50:	6863      	ldr	r3, [r4, #4]
    2d52:	68a2      	ldr	r2, [r4, #8]
    2d54:	4313      	orrs	r3, r2
    2d56:	68e2      	ldr	r2, [r4, #12]
    2d58:	4313      	orrs	r3, r2
    2d5a:	432b      	orrs	r3, r5

	/* Set SPI character size */
	ctrlb |= config->character_size;
    2d5c:	7c21      	ldrb	r1, [r4, #16]

	if (config->run_in_standby) {
    2d5e:	7c62      	ldrb	r2, [r4, #17]
    2d60:	2a00      	cmp	r2, #0
    2d62:	d001      	beq.n	2d68 <spi_init+0xec>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    2d64:	2280      	movs	r2, #128	; 0x80
    2d66:	4313      	orrs	r3, r2
	}

	if (config->receiver_enable) {
    2d68:	7ca2      	ldrb	r2, [r4, #18]
    2d6a:	2a00      	cmp	r2, #0
    2d6c:	d002      	beq.n	2d74 <spi_init+0xf8>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    2d6e:	2280      	movs	r2, #128	; 0x80
    2d70:	0292      	lsls	r2, r2, #10
    2d72:	4311      	orrs	r1, r2
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    2d74:	7ce2      	ldrb	r2, [r4, #19]
    2d76:	2a00      	cmp	r2, #0
    2d78:	d002      	beq.n	2d80 <spi_init+0x104>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    2d7a:	2280      	movs	r2, #128	; 0x80
    2d7c:	0092      	lsls	r2, r2, #2
    2d7e:	4311      	orrs	r1, r2
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    2d80:	7d22      	ldrb	r2, [r4, #20]
    2d82:	2a00      	cmp	r2, #0
    2d84:	d002      	beq.n	2d8c <spi_init+0x110>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    2d86:	2280      	movs	r2, #128	; 0x80
    2d88:	0192      	lsls	r2, r2, #6
    2d8a:	4311      	orrs	r1, r2
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    2d8c:	6830      	ldr	r0, [r6, #0]
    2d8e:	2202      	movs	r2, #2
    2d90:	4313      	orrs	r3, r2
    2d92:	4283      	cmp	r3, r0
    2d94:	d109      	bne.n	2daa <spi_init+0x12e>
			spi_module->CTRLB.reg == ctrlb) {
    2d96:	6873      	ldr	r3, [r6, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    2d98:	428b      	cmp	r3, r1
    2d9a:	d106      	bne.n	2daa <spi_init+0x12e>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
    2d9c:	7823      	ldrb	r3, [r4, #0]
    2d9e:	4642      	mov	r2, r8
    2da0:	7153      	strb	r3, [r2, #5]
		module->character_size = config->character_size;
    2da2:	7c23      	ldrb	r3, [r4, #16]
    2da4:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
    2da6:	2000      	movs	r0, #0
    2da8:	e0af      	b.n	2f0a <spi_init+0x28e>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
    2daa:	2300      	movs	r3, #0
    2dac:	4642      	mov	r2, r8
    2dae:	6013      	str	r3, [r2, #0]

	return STATUS_ERR_DENIED;
    2db0:	201c      	movs	r0, #28
    2db2:	e0aa      	b.n	2f0a <spi_init+0x28e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    2db4:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    2db6:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    2db8:	07db      	lsls	r3, r3, #31
    2dba:	d500      	bpl.n	2dbe <spi_init+0x142>
    2dbc:	e0a5      	b.n	2f0a <spi_init+0x28e>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2dbe:	0008      	movs	r0, r1
    2dc0:	4b59      	ldr	r3, [pc, #356]	; (2f28 <spi_init+0x2ac>)
    2dc2:	4798      	blx	r3
	uint32_t pm_index, gclk_index;
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
    2dc4:	2805      	cmp	r0, #5
    2dc6:	d100      	bne.n	2dca <spi_init+0x14e>
    2dc8:	e098      	b.n	2efc <spi_init+0x280>
#  else
		return STATUS_ERR_INVALID_ARG;
#  endif
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2dca:	0003      	movs	r3, r0
    2dcc:	3312      	adds	r3, #18
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    2dce:	4d57      	ldr	r5, [pc, #348]	; (2f2c <spi_init+0x2b0>)
    2dd0:	69e9      	ldr	r1, [r5, #28]
    2dd2:	2201      	movs	r2, #1
    2dd4:	4082      	lsls	r2, r0
    2dd6:	430a      	orrs	r2, r1
    2dd8:	61ea      	str	r2, [r5, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    2dda:	a907      	add	r1, sp, #28
    2ddc:	2724      	movs	r7, #36	; 0x24
    2dde:	5de2      	ldrb	r2, [r4, r7]
    2de0:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2de2:	b2dd      	uxtb	r5, r3
    2de4:	0028      	movs	r0, r5
    2de6:	4b52      	ldr	r3, [pc, #328]	; (2f30 <spi_init+0x2b4>)
    2de8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2dea:	0028      	movs	r0, r5
    2dec:	4b51      	ldr	r3, [pc, #324]	; (2f34 <spi_init+0x2b8>)
    2dee:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2df0:	5de0      	ldrb	r0, [r4, r7]
    2df2:	2100      	movs	r1, #0
    2df4:	4b50      	ldr	r3, [pc, #320]	; (2f38 <spi_init+0x2bc>)
    2df6:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    2df8:	7823      	ldrb	r3, [r4, #0]
    2dfa:	2b01      	cmp	r3, #1
    2dfc:	d103      	bne.n	2e06 <spi_init+0x18a>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    2dfe:	6832      	ldr	r2, [r6, #0]
    2e00:	330b      	adds	r3, #11
    2e02:	4313      	orrs	r3, r2
    2e04:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2e06:	4643      	mov	r3, r8
    2e08:	681e      	ldr	r6, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2e0a:	ab02      	add	r3, sp, #8
    2e0c:	2280      	movs	r2, #128	; 0x80
    2e0e:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2e10:	2200      	movs	r2, #0
    2e12:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2e14:	2101      	movs	r1, #1
    2e16:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    2e18:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
    2e1a:	7823      	ldrb	r3, [r4, #0]
    2e1c:	2b00      	cmp	r3, #0
    2e1e:	d101      	bne.n	2e24 <spi_init+0x1a8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2e20:	ab02      	add	r3, sp, #8
    2e22:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
    2e24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2e26:	9303      	str	r3, [sp, #12]
    2e28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2e2a:	9304      	str	r3, [sp, #16]
    2e2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    2e2e:	9305      	str	r3, [sp, #20]
    2e30:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2e32:	9306      	str	r3, [sp, #24]
    2e34:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2e36:	ad02      	add	r5, sp, #8
    2e38:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2e3a:	00bb      	lsls	r3, r7, #2
    2e3c:	aa03      	add	r2, sp, #12
    2e3e:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    2e40:	2800      	cmp	r0, #0
    2e42:	d102      	bne.n	2e4a <spi_init+0x1ce>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2e44:	0030      	movs	r0, r6
    2e46:	4b34      	ldr	r3, [pc, #208]	; (2f18 <spi_init+0x29c>)
    2e48:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    2e4a:	1c43      	adds	r3, r0, #1
    2e4c:	d005      	beq.n	2e5a <spi_init+0x1de>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2e4e:	7028      	strb	r0, [r5, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2e50:	0c00      	lsrs	r0, r0, #16
    2e52:	b2c0      	uxtb	r0, r0
    2e54:	0029      	movs	r1, r5
    2e56:	4b39      	ldr	r3, [pc, #228]	; (2f3c <spi_init+0x2c0>)
    2e58:	4798      	blx	r3
    2e5a:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    2e5c:	2f04      	cmp	r7, #4
    2e5e:	d1eb      	bne.n	2e38 <spi_init+0x1bc>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    2e60:	7823      	ldrb	r3, [r4, #0]
    2e62:	4642      	mov	r2, r8
    2e64:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
    2e66:	7c23      	ldrb	r3, [r4, #16]
    2e68:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
    2e6a:	7ca3      	ldrb	r3, [r4, #18]
    2e6c:	71d3      	strb	r3, [r2, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    2e6e:	7d23      	ldrb	r3, [r4, #20]
    2e70:	7213      	strb	r3, [r2, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    2e72:	2200      	movs	r2, #0
    2e74:	466b      	mov	r3, sp
    2e76:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    2e78:	7823      	ldrb	r3, [r4, #0]
    2e7a:	2b01      	cmp	r3, #1
    2e7c:	d115      	bne.n	2eaa <spi_init+0x22e>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2e7e:	4643      	mov	r3, r8
    2e80:	6818      	ldr	r0, [r3, #0]
    2e82:	4b29      	ldr	r3, [pc, #164]	; (2f28 <spi_init+0x2ac>)
    2e84:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    2e86:	3012      	adds	r0, #18
    2e88:	b2c0      	uxtb	r0, r0
    2e8a:	4b25      	ldr	r3, [pc, #148]	; (2f20 <spi_init+0x2a4>)
    2e8c:	4798      	blx	r3
    2e8e:	0001      	movs	r1, r0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    2e90:	466b      	mov	r3, sp
    2e92:	1d9a      	adds	r2, r3, #6
    2e94:	69a0      	ldr	r0, [r4, #24]
    2e96:	4b23      	ldr	r3, [pc, #140]	; (2f24 <spi_init+0x2a8>)
    2e98:	4798      	blx	r3
    2e9a:	0003      	movs	r3, r0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    2e9c:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    2e9e:	2b00      	cmp	r3, #0
    2ea0:	d133      	bne.n	2f0a <spi_init+0x28e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    2ea2:	466b      	mov	r3, sp
    2ea4:	3306      	adds	r3, #6
    2ea6:	781b      	ldrb	r3, [r3, #0]
    2ea8:	7333      	strb	r3, [r6, #12]
# endif
	/* Set data order */
	ctrla |= config->data_order;

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    2eaa:	6863      	ldr	r3, [r4, #4]
    2eac:	68a2      	ldr	r2, [r4, #8]
    2eae:	4313      	orrs	r3, r2

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    2eb0:	68e2      	ldr	r2, [r4, #12]
    2eb2:	4313      	orrs	r3, r2

	/* Set SPI character size */
	ctrlb |= config->character_size;
    2eb4:	7c22      	ldrb	r2, [r4, #16]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    2eb6:	7c61      	ldrb	r1, [r4, #17]
    2eb8:	2900      	cmp	r1, #0
    2eba:	d103      	bne.n	2ec4 <spi_init+0x248>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    2ebc:	4920      	ldr	r1, [pc, #128]	; (2f40 <spi_init+0x2c4>)
    2ebe:	7889      	ldrb	r1, [r1, #2]
    2ec0:	0789      	lsls	r1, r1, #30
    2ec2:	d501      	bpl.n	2ec8 <spi_init+0x24c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    2ec4:	2180      	movs	r1, #128	; 0x80
    2ec6:	430b      	orrs	r3, r1
	}

	if (config->receiver_enable) {
    2ec8:	7ca1      	ldrb	r1, [r4, #18]
    2eca:	2900      	cmp	r1, #0
    2ecc:	d002      	beq.n	2ed4 <spi_init+0x258>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    2ece:	2180      	movs	r1, #128	; 0x80
    2ed0:	0289      	lsls	r1, r1, #10
    2ed2:	430a      	orrs	r2, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    2ed4:	7ce1      	ldrb	r1, [r4, #19]
    2ed6:	2900      	cmp	r1, #0
    2ed8:	d002      	beq.n	2ee0 <spi_init+0x264>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    2eda:	2180      	movs	r1, #128	; 0x80
    2edc:	0089      	lsls	r1, r1, #2
    2ede:	430a      	orrs	r2, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    2ee0:	7d21      	ldrb	r1, [r4, #20]
    2ee2:	2900      	cmp	r1, #0
    2ee4:	d002      	beq.n	2eec <spi_init+0x270>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    2ee6:	2180      	movs	r1, #128	; 0x80
    2ee8:	0189      	lsls	r1, r1, #6
    2eea:	430a      	orrs	r2, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    2eec:	6831      	ldr	r1, [r6, #0]
    2eee:	430b      	orrs	r3, r1
    2ef0:	6033      	str	r3, [r6, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    2ef2:	6873      	ldr	r3, [r6, #4]
    2ef4:	4313      	orrs	r3, r2
    2ef6:	6073      	str	r3, [r6, #4]

	return STATUS_OK;
    2ef8:	2000      	movs	r0, #0
    2efa:	e006      	b.n	2f0a <spi_init+0x28e>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    2efc:	4a0b      	ldr	r2, [pc, #44]	; (2f2c <spi_init+0x2b0>)
    2efe:	6a11      	ldr	r1, [r2, #32]
    2f00:	2302      	movs	r3, #2
    2f02:	430b      	orrs	r3, r1
    2f04:	6213      	str	r3, [r2, #32]
	uint32_t pm_index, gclk_index;
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
#  ifdef ID_SERCOM5
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
    2f06:	2318      	movs	r3, #24
    2f08:	e767      	b.n	2dda <spi_init+0x15e>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    2f0a:	b008      	add	sp, #32
    2f0c:	bc1c      	pop	{r2, r3, r4}
    2f0e:	4690      	mov	r8, r2
    2f10:	4699      	mov	r9, r3
    2f12:	46a2      	mov	sl, r4
    2f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f16:	46c0      	nop			; (mov r8, r8)
    2f18:	000029f1 	.word	0x000029f1
    2f1c:	40002800 	.word	0x40002800
    2f20:	00003d1d 	.word	0x00003d1d
    2f24:	000027b5 	.word	0x000027b5
    2f28:	00002b75 	.word	0x00002b75
    2f2c:	40000400 	.word	0x40000400
    2f30:	00003cf9 	.word	0x00003cf9
    2f34:	00003c89 	.word	0x00003c89
    2f38:	000029a5 	.word	0x000029a5
    2f3c:	00003df5 	.word	0x00003df5
    2f40:	41002000 	.word	0x41002000

00002f44 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    2f44:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    2f46:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    2f48:	2315      	movs	r3, #21
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    2f4a:	2c01      	cmp	r4, #1
    2f4c:	d16e      	bne.n	302c <spi_select_slave+0xe8>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    2f4e:	7a04      	ldrb	r4, [r0, #8]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    2f50:	2300      	movs	r3, #0
	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    2f52:	2c00      	cmp	r4, #0
    2f54:	d16a      	bne.n	302c <spi_select_slave+0xe8>
#  endif
	{
		if (select) {
    2f56:	2a00      	cmp	r2, #0
    2f58:	d058      	beq.n	300c <spi_select_slave+0xc8>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    2f5a:	784b      	ldrb	r3, [r1, #1]
    2f5c:	2b00      	cmp	r3, #0
    2f5e:	d044      	beq.n	2fea <spi_select_slave+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2f60:	6803      	ldr	r3, [r0, #0]
    2f62:	7e1b      	ldrb	r3, [r3, #24]
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    2f64:	07db      	lsls	r3, r3, #31
    2f66:	d410      	bmi.n	2f8a <spi_select_slave+0x46>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    2f68:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2f6a:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2f6c:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2f6e:	2900      	cmp	r1, #0
    2f70:	d104      	bne.n	2f7c <spi_select_slave+0x38>
		return &(ports[port_index]->Group[group_index]);
    2f72:	095a      	lsrs	r2, r3, #5
    2f74:	01d2      	lsls	r2, r2, #7
    2f76:	492e      	ldr	r1, [pc, #184]	; (3030 <spi_select_slave+0xec>)
    2f78:	468c      	mov	ip, r1
    2f7a:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2f7c:	211f      	movs	r1, #31
    2f7e:	400b      	ands	r3, r1
    2f80:	391e      	subs	r1, #30
    2f82:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2f84:	6191      	str	r1, [r2, #24]
					return STATUS_BUSY;
    2f86:	2305      	movs	r3, #5
    2f88:	e050      	b.n	302c <spi_select_slave+0xe8>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    2f8a:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2f8c:	09dc      	lsrs	r4, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2f8e:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2f90:	2c00      	cmp	r4, #0
    2f92:	d104      	bne.n	2f9e <spi_select_slave+0x5a>
		return &(ports[port_index]->Group[group_index]);
    2f94:	095a      	lsrs	r2, r3, #5
    2f96:	01d2      	lsls	r2, r2, #7
    2f98:	4c25      	ldr	r4, [pc, #148]	; (3030 <spi_select_slave+0xec>)
    2f9a:	46a4      	mov	ip, r4
    2f9c:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2f9e:	241f      	movs	r4, #31
    2fa0:	4023      	ands	r3, r4
    2fa2:	3c1e      	subs	r4, #30
    2fa4:	409c      	lsls	r4, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2fa6:	6154      	str	r4, [r2, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2fa8:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2faa:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2fac:	07d2      	lsls	r2, r2, #31
    2fae:	d501      	bpl.n	2fb4 <spi_select_slave+0x70>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2fb0:	788a      	ldrb	r2, [r1, #2]
    2fb2:	629a      	str	r2, [r3, #40]	; 0x28

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
    2fb4:	79c2      	ldrb	r2, [r0, #7]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    2fb6:	2300      	movs	r3, #0
				port_pin_set_output_level(slave->ss_pin, false);

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
    2fb8:	2a00      	cmp	r2, #0
    2fba:	d137      	bne.n	302c <spi_select_slave+0xe8>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2fbc:	6802      	ldr	r2, [r0, #0]
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    2fbe:	2104      	movs	r1, #4

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2fc0:	7e13      	ldrb	r3, [r2, #24]
    2fc2:	420b      	tst	r3, r1
    2fc4:	d0fc      	beq.n	2fc0 <spi_select_slave+0x7c>
    2fc6:	7e11      	ldrb	r1, [r2, #24]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    2fc8:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    2fca:	0749      	lsls	r1, r1, #29
    2fcc:	d52e      	bpl.n	302c <spi_select_slave+0xe8>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2fce:	8b53      	ldrh	r3, [r2, #26]
    2fd0:	075b      	lsls	r3, r3, #29
    2fd2:	d501      	bpl.n	2fd8 <spi_select_slave+0x94>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2fd4:	2304      	movs	r3, #4
    2fd6:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2fd8:	7983      	ldrb	r3, [r0, #6]
    2fda:	2b01      	cmp	r3, #1
    2fdc:	d102      	bne.n	2fe4 <spi_select_slave+0xa0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2fde:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2fe0:	2300      	movs	r3, #0
    2fe2:	e023      	b.n	302c <spi_select_slave+0xe8>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2fe4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2fe6:	2300      	movs	r3, #0
    2fe8:	e020      	b.n	302c <spi_select_slave+0xe8>
					uint16_t flush = 0;
					spi_read(module, &flush);
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    2fea:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2fec:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2fee:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2ff0:	2900      	cmp	r1, #0
    2ff2:	d104      	bne.n	2ffe <spi_select_slave+0xba>
		return &(ports[port_index]->Group[group_index]);
    2ff4:	095a      	lsrs	r2, r3, #5
    2ff6:	01d2      	lsls	r2, r2, #7
    2ff8:	490d      	ldr	r1, [pc, #52]	; (3030 <spi_select_slave+0xec>)
    2ffa:	468c      	mov	ip, r1
    2ffc:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2ffe:	211f      	movs	r1, #31
    3000:	400b      	ands	r3, r1
    3002:	391e      	subs	r1, #30
    3004:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3006:	6151      	str	r1, [r2, #20]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    3008:	2300      	movs	r3, #0
    300a:	e00f      	b.n	302c <spi_select_slave+0xe8>
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    300c:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    300e:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3010:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3012:	2900      	cmp	r1, #0
    3014:	d104      	bne.n	3020 <spi_select_slave+0xdc>
		return &(ports[port_index]->Group[group_index]);
    3016:	095a      	lsrs	r2, r3, #5
    3018:	01d2      	lsls	r2, r2, #7
    301a:	4905      	ldr	r1, [pc, #20]	; (3030 <spi_select_slave+0xec>)
    301c:	468c      	mov	ip, r1
    301e:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3020:	211f      	movs	r1, #31
    3022:	400b      	ands	r3, r1
    3024:	391e      	subs	r1, #30
    3026:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3028:	6191      	str	r1, [r2, #24]
		}
	}
	return STATUS_OK;
    302a:	2300      	movs	r3, #0
}
    302c:	0018      	movs	r0, r3
    302e:	bd10      	pop	{r4, pc}
    3030:	40002800 	.word	0x40002800

00003034 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    3034:	b5f0      	push	{r4, r5, r6, r7, lr}
    3036:	465f      	mov	r7, fp
    3038:	4656      	mov	r6, sl
    303a:	464d      	mov	r5, r9
    303c:	4644      	mov	r4, r8
    303e:	b4f0      	push	{r4, r5, r6, r7}
    3040:	b091      	sub	sp, #68	; 0x44
    3042:	0005      	movs	r5, r0
    3044:	000c      	movs	r4, r1
    3046:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    3048:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    304a:	0008      	movs	r0, r1
    304c:	4bc4      	ldr	r3, [pc, #784]	; (3360 <usart_init+0x32c>)
    304e:	4798      	blx	r3
    3050:	1e02      	subs	r2, r0, #0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
    3052:	2a05      	cmp	r2, #5
    3054:	d003      	beq.n	305e <usart_init+0x2a>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3056:	0007      	movs	r7, r0
    3058:	3712      	adds	r7, #18
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    305a:	0003      	movs	r3, r0
    305c:	e001      	b.n	3062 <usart_init+0x2e>
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    305e:	2718      	movs	r7, #24
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    3060:	2301      	movs	r3, #1
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    3062:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    3064:	2005      	movs	r0, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    3066:	07c9      	lsls	r1, r1, #31
    3068:	d500      	bpl.n	306c <usart_init+0x38>
    306a:	e171      	b.n	3350 <usart_init+0x31c>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    306c:	6821      	ldr	r1, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    306e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    3070:	0789      	lsls	r1, r1, #30
    3072:	d500      	bpl.n	3076 <usart_init+0x42>
    3074:	e16c      	b.n	3350 <usart_init+0x31c>
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
    3076:	2a05      	cmp	r2, #5
    3078:	d107      	bne.n	308a <usart_init+0x56>
    307a:	48ba      	ldr	r0, [pc, #744]	; (3364 <usart_init+0x330>)
    307c:	6a02      	ldr	r2, [r0, #32]
    307e:	2101      	movs	r1, #1
    3080:	4099      	lsls	r1, r3
    3082:	000b      	movs	r3, r1
    3084:	4313      	orrs	r3, r2
    3086:	6203      	str	r3, [r0, #32]
    3088:	e006      	b.n	3098 <usart_init+0x64>
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    308a:	48b6      	ldr	r0, [pc, #728]	; (3364 <usart_init+0x330>)
    308c:	69c2      	ldr	r2, [r0, #28]
    308e:	2101      	movs	r1, #1
    3090:	4099      	lsls	r1, r3
    3092:	000b      	movs	r3, r1
    3094:	4313      	orrs	r3, r2
    3096:	61c3      	str	r3, [r0, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    3098:	a90f      	add	r1, sp, #60	; 0x3c
    309a:	232d      	movs	r3, #45	; 0x2d
    309c:	4698      	mov	r8, r3
    309e:	5cf3      	ldrb	r3, [r6, r3]
    30a0:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    30a2:	b2ff      	uxtb	r7, r7
    30a4:	0038      	movs	r0, r7
    30a6:	4bb0      	ldr	r3, [pc, #704]	; (3368 <usart_init+0x334>)
    30a8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    30aa:	0038      	movs	r0, r7
    30ac:	4baf      	ldr	r3, [pc, #700]	; (336c <usart_init+0x338>)
    30ae:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    30b0:	4643      	mov	r3, r8
    30b2:	5cf0      	ldrb	r0, [r6, r3]
    30b4:	2100      	movs	r1, #0
    30b6:	4bae      	ldr	r3, [pc, #696]	; (3370 <usart_init+0x33c>)
    30b8:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    30ba:	7af3      	ldrb	r3, [r6, #11]
    30bc:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    30be:	2324      	movs	r3, #36	; 0x24
    30c0:	5cf3      	ldrb	r3, [r6, r3]
    30c2:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    30c4:	2325      	movs	r3, #37	; 0x25
    30c6:	5cf3      	ldrb	r3, [r6, r3]
    30c8:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    30ca:	7ef3      	ldrb	r3, [r6, #27]
    30cc:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    30ce:	7f33      	ldrb	r3, [r6, #28]
    30d0:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    30d2:	682b      	ldr	r3, [r5, #0]
    30d4:	4699      	mov	r9, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    30d6:	0018      	movs	r0, r3
    30d8:	4ba1      	ldr	r3, [pc, #644]	; (3360 <usart_init+0x32c>)
    30da:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    30dc:	3012      	adds	r0, #18
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    30de:	2200      	movs	r2, #0
    30e0:	230e      	movs	r3, #14
    30e2:	a906      	add	r1, sp, #24
    30e4:	468c      	mov	ip, r1
    30e6:	4463      	add	r3, ip
    30e8:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    30ea:	8a32      	ldrh	r2, [r6, #16]
    30ec:	9202      	str	r2, [sp, #8]
    30ee:	2380      	movs	r3, #128	; 0x80
    30f0:	01db      	lsls	r3, r3, #7
    30f2:	429a      	cmp	r2, r3
    30f4:	d01a      	beq.n	312c <usart_init+0xf8>
    30f6:	d804      	bhi.n	3102 <usart_init+0xce>
    30f8:	2380      	movs	r3, #128	; 0x80
    30fa:	019b      	lsls	r3, r3, #6
    30fc:	429a      	cmp	r2, r3
    30fe:	d00b      	beq.n	3118 <usart_init+0xe4>
    3100:	e107      	b.n	3312 <usart_init+0x2de>
    3102:	23c0      	movs	r3, #192	; 0xc0
    3104:	01db      	lsls	r3, r3, #7
    3106:	9a02      	ldr	r2, [sp, #8]
    3108:	429a      	cmp	r2, r3
    310a:	d00a      	beq.n	3122 <usart_init+0xee>
    310c:	2380      	movs	r3, #128	; 0x80
    310e:	021b      	lsls	r3, r3, #8
    3110:	429a      	cmp	r2, r3
    3112:	d100      	bne.n	3116 <usart_init+0xe2>
    3114:	e102      	b.n	331c <usart_init+0x2e8>
    3116:	e0fc      	b.n	3312 <usart_init+0x2de>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    3118:	2310      	movs	r3, #16
    311a:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    311c:	3b0f      	subs	r3, #15
    311e:	9307      	str	r3, [sp, #28]
    3120:	e100      	b.n	3324 <usart_init+0x2f0>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    3122:	2308      	movs	r3, #8
    3124:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    3126:	3b07      	subs	r3, #7
    3128:	9307      	str	r3, [sp, #28]
    312a:	e0fb      	b.n	3324 <usart_init+0x2f0>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    312c:	6833      	ldr	r3, [r6, #0]
    312e:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
    3130:	68f3      	ldr	r3, [r6, #12]
    3132:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    3134:	6973      	ldr	r3, [r6, #20]
    3136:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    3138:	7e33      	ldrb	r3, [r6, #24]
    313a:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    313c:	2326      	movs	r3, #38	; 0x26
    313e:	5cf3      	ldrb	r3, [r6, r3]
    3140:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    3142:	6873      	ldr	r3, [r6, #4]
    3144:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    3146:	2b00      	cmp	r3, #0
    3148:	d016      	beq.n	3178 <usart_init+0x144>
    314a:	2380      	movs	r3, #128	; 0x80
    314c:	055b      	lsls	r3, r3, #21
    314e:	459a      	cmp	sl, r3
    3150:	d139      	bne.n	31c6 <usart_init+0x192>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    3152:	2327      	movs	r3, #39	; 0x27
    3154:	5cf3      	ldrb	r3, [r6, r3]
    3156:	2b00      	cmp	r3, #0
    3158:	d139      	bne.n	31ce <usart_init+0x19a>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    315a:	6a33      	ldr	r3, [r6, #32]
    315c:	001f      	movs	r7, r3
    315e:	b2c0      	uxtb	r0, r0
    3160:	4b84      	ldr	r3, [pc, #528]	; (3374 <usart_init+0x340>)
    3162:	4798      	blx	r3
    3164:	0001      	movs	r1, r0
    3166:	220e      	movs	r2, #14
    3168:	ab06      	add	r3, sp, #24
    316a:	469c      	mov	ip, r3
    316c:	4462      	add	r2, ip
    316e:	0038      	movs	r0, r7
    3170:	4b81      	ldr	r3, [pc, #516]	; (3378 <usart_init+0x344>)
    3172:	4798      	blx	r3
    3174:	0003      	movs	r3, r0
    3176:	e027      	b.n	31c8 <usart_init+0x194>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    3178:	2308      	movs	r3, #8
    317a:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    317c:	2300      	movs	r3, #0
    317e:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    3180:	2327      	movs	r3, #39	; 0x27
    3182:	5cf3      	ldrb	r3, [r6, r3]
    3184:	2b00      	cmp	r3, #0
    3186:	d00c      	beq.n	31a2 <usart_init+0x16e>
				status_code =
    3188:	9b06      	ldr	r3, [sp, #24]
    318a:	9300      	str	r3, [sp, #0]
    318c:	9b07      	ldr	r3, [sp, #28]
    318e:	220e      	movs	r2, #14
    3190:	a906      	add	r1, sp, #24
    3192:	468c      	mov	ip, r1
    3194:	4462      	add	r2, ip
    3196:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    3198:	6a30      	ldr	r0, [r6, #32]
    319a:	4f78      	ldr	r7, [pc, #480]	; (337c <usart_init+0x348>)
    319c:	47b8      	blx	r7
    319e:	0003      	movs	r3, r0
    31a0:	e012      	b.n	31c8 <usart_init+0x194>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    31a2:	6a33      	ldr	r3, [r6, #32]
    31a4:	001f      	movs	r7, r3
    31a6:	b2c0      	uxtb	r0, r0
    31a8:	4b72      	ldr	r3, [pc, #456]	; (3374 <usart_init+0x340>)
    31aa:	4798      	blx	r3
    31ac:	0001      	movs	r1, r0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    31ae:	9b06      	ldr	r3, [sp, #24]
    31b0:	9300      	str	r3, [sp, #0]
    31b2:	9b07      	ldr	r3, [sp, #28]
    31b4:	220e      	movs	r2, #14
    31b6:	a806      	add	r0, sp, #24
    31b8:	4684      	mov	ip, r0
    31ba:	4462      	add	r2, ip
    31bc:	0038      	movs	r0, r7
    31be:	4f6f      	ldr	r7, [pc, #444]	; (337c <usart_init+0x348>)
    31c0:	47b8      	blx	r7
    31c2:	0003      	movs	r3, r0
    31c4:	e000      	b.n	31c8 <usart_init+0x194>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    31c6:	2300      	movs	r3, #0
    31c8:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    31ca:	d000      	beq.n	31ce <usart_init+0x19a>
    31cc:	e0c0      	b.n	3350 <usart_init+0x31c>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    31ce:	7e73      	ldrb	r3, [r6, #25]
    31d0:	2b00      	cmp	r3, #0
    31d2:	d002      	beq.n	31da <usart_init+0x1a6>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    31d4:	7eb3      	ldrb	r3, [r6, #26]
    31d6:	464a      	mov	r2, r9
    31d8:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    31da:	682a      	ldr	r2, [r5, #0]
    31dc:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    31de:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    31e0:	2b00      	cmp	r3, #0
    31e2:	d1fc      	bne.n	31de <usart_init+0x1aa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    31e4:	330e      	adds	r3, #14
    31e6:	aa06      	add	r2, sp, #24
    31e8:	4694      	mov	ip, r2
    31ea:	4463      	add	r3, ip
    31ec:	881b      	ldrh	r3, [r3, #0]
    31ee:	464a      	mov	r2, r9
    31f0:	8193      	strh	r3, [r2, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    31f2:	9b04      	ldr	r3, [sp, #16]
    31f4:	465a      	mov	r2, fp
    31f6:	4313      	orrs	r3, r2
    31f8:	9a03      	ldr	r2, [sp, #12]
    31fa:	4313      	orrs	r3, r2
    31fc:	4652      	mov	r2, sl
    31fe:	4313      	orrs	r3, r2
    3200:	433b      	orrs	r3, r7
    3202:	4642      	mov	r2, r8
    3204:	0212      	lsls	r2, r2, #8
    3206:	4313      	orrs	r3, r2
    3208:	9a05      	ldr	r2, [sp, #20]
    320a:	0757      	lsls	r7, r2, #29
    320c:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    320e:	2327      	movs	r3, #39	; 0x27
    3210:	5cf3      	ldrb	r3, [r6, r3]
    3212:	2b00      	cmp	r3, #0
    3214:	d101      	bne.n	321a <usart_init+0x1e6>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    3216:	3304      	adds	r3, #4
    3218:	431f      	orrs	r7, r3
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    321a:	7e71      	ldrb	r1, [r6, #25]
    321c:	0289      	lsls	r1, r1, #10
    321e:	7f33      	ldrb	r3, [r6, #28]
    3220:	025b      	lsls	r3, r3, #9
    3222:	4319      	orrs	r1, r3
    3224:	7f73      	ldrb	r3, [r6, #29]
    3226:	021b      	lsls	r3, r3, #8
    3228:	4319      	orrs	r1, r3
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    322a:	2324      	movs	r3, #36	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    322c:	5cf3      	ldrb	r3, [r6, r3]
    322e:	045b      	lsls	r3, r3, #17
    3230:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    3232:	2325      	movs	r3, #37	; 0x25
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    3234:	5cf2      	ldrb	r2, [r6, r3]
    3236:	0412      	lsls	r2, r2, #16
    3238:	4311      	orrs	r1, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    323a:	7af3      	ldrb	r3, [r6, #11]
    323c:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    323e:	8933      	ldrh	r3, [r6, #8]
    3240:	2bff      	cmp	r3, #255	; 0xff
    3242:	d004      	beq.n	324e <usart_init+0x21a>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    3244:	2280      	movs	r2, #128	; 0x80
    3246:	0452      	lsls	r2, r2, #17
    3248:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    324a:	4319      	orrs	r1, r3
    324c:	e005      	b.n	325a <usart_init+0x226>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    324e:	7ef3      	ldrb	r3, [r6, #27]
    3250:	2b00      	cmp	r3, #0
    3252:	d002      	beq.n	325a <usart_init+0x226>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    3254:	2380      	movs	r3, #128	; 0x80
    3256:	04db      	lsls	r3, r3, #19
    3258:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    325a:	232c      	movs	r3, #44	; 0x2c
    325c:	5cf3      	ldrb	r3, [r6, r3]
    325e:	2b00      	cmp	r3, #0
    3260:	d103      	bne.n	326a <usart_init+0x236>
    3262:	4b47      	ldr	r3, [pc, #284]	; (3380 <usart_init+0x34c>)
    3264:	789b      	ldrb	r3, [r3, #2]
    3266:	079b      	lsls	r3, r3, #30
    3268:	d501      	bpl.n	326e <usart_init+0x23a>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    326a:	2380      	movs	r3, #128	; 0x80
    326c:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    326e:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3270:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3272:	2b00      	cmp	r3, #0
    3274:	d1fc      	bne.n	3270 <usart_init+0x23c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    3276:	464b      	mov	r3, r9
    3278:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    327a:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    327c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    327e:	2b00      	cmp	r3, #0
    3280:	d1fc      	bne.n	327c <usart_init+0x248>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    3282:	464b      	mov	r3, r9
    3284:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3286:	ab0e      	add	r3, sp, #56	; 0x38
    3288:	2280      	movs	r2, #128	; 0x80
    328a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    328c:	2200      	movs	r2, #0
    328e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    3290:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    3292:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    3294:	6b33      	ldr	r3, [r6, #48]	; 0x30
    3296:	930a      	str	r3, [sp, #40]	; 0x28
    3298:	6b73      	ldr	r3, [r6, #52]	; 0x34
    329a:	930b      	str	r3, [sp, #44]	; 0x2c
    329c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    329e:	930c      	str	r3, [sp, #48]	; 0x30
    32a0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    32a2:	9302      	str	r3, [sp, #8]
    32a4:	930d      	str	r3, [sp, #52]	; 0x34
    32a6:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    32a8:	ae0e      	add	r6, sp, #56	; 0x38
    32aa:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    32ac:	00bb      	lsls	r3, r7, #2
    32ae:	aa0a      	add	r2, sp, #40	; 0x28
    32b0:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    32b2:	2800      	cmp	r0, #0
    32b4:	d102      	bne.n	32bc <usart_init+0x288>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    32b6:	0020      	movs	r0, r4
    32b8:	4b32      	ldr	r3, [pc, #200]	; (3384 <usart_init+0x350>)
    32ba:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    32bc:	1c43      	adds	r3, r0, #1
    32be:	d005      	beq.n	32cc <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    32c0:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    32c2:	0c00      	lsrs	r0, r0, #16
    32c4:	b2c0      	uxtb	r0, r0
    32c6:	0031      	movs	r1, r6
    32c8:	4b2f      	ldr	r3, [pc, #188]	; (3388 <usart_init+0x354>)
    32ca:	4798      	blx	r3
    32cc:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    32ce:	2f04      	cmp	r7, #4
    32d0:	d1eb      	bne.n	32aa <usart_init+0x276>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    32d2:	2300      	movs	r3, #0
    32d4:	60eb      	str	r3, [r5, #12]
    32d6:	612b      	str	r3, [r5, #16]
    32d8:	616b      	str	r3, [r5, #20]
    32da:	61ab      	str	r3, [r5, #24]
    32dc:	61eb      	str	r3, [r5, #28]
    32de:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    32e0:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    32e2:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    32e4:	2200      	movs	r2, #0
    32e6:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    32e8:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    32ea:	3330      	adds	r3, #48	; 0x30
    32ec:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    32ee:	3301      	adds	r3, #1
    32f0:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    32f2:	3301      	adds	r3, #1
    32f4:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    32f6:	3301      	adds	r3, #1
    32f8:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    32fa:	6828      	ldr	r0, [r5, #0]
    32fc:	4b18      	ldr	r3, [pc, #96]	; (3360 <usart_init+0x32c>)
    32fe:	4798      	blx	r3
    3300:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    3302:	4922      	ldr	r1, [pc, #136]	; (338c <usart_init+0x358>)
    3304:	4b22      	ldr	r3, [pc, #136]	; (3390 <usart_init+0x35c>)
    3306:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    3308:	00a4      	lsls	r4, r4, #2
    330a:	4b22      	ldr	r3, [pc, #136]	; (3394 <usart_init+0x360>)
    330c:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    330e:	2000      	movs	r0, #0
    3310:	e01e      	b.n	3350 <usart_init+0x31c>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    3312:	2310      	movs	r3, #16
    3314:	9306      	str	r3, [sp, #24]
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3316:	2300      	movs	r3, #0
    3318:	9307      	str	r3, [sp, #28]
    331a:	e003      	b.n	3324 <usart_init+0x2f0>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    331c:	2303      	movs	r3, #3
    331e:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3320:	2300      	movs	r3, #0
    3322:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    3324:	6833      	ldr	r3, [r6, #0]
    3326:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
    3328:	68f3      	ldr	r3, [r6, #12]
    332a:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    332c:	6973      	ldr	r3, [r6, #20]
    332e:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    3330:	7e33      	ldrb	r3, [r6, #24]
    3332:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    3334:	2326      	movs	r3, #38	; 0x26
    3336:	5cf3      	ldrb	r3, [r6, r3]
    3338:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    333a:	6873      	ldr	r3, [r6, #4]
    333c:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    333e:	2b00      	cmp	r3, #0
    3340:	d100      	bne.n	3344 <usart_init+0x310>
    3342:	e71d      	b.n	3180 <usart_init+0x14c>
    3344:	2380      	movs	r3, #128	; 0x80
    3346:	055b      	lsls	r3, r3, #21
    3348:	459a      	cmp	sl, r3
    334a:	d100      	bne.n	334e <usart_init+0x31a>
    334c:	e701      	b.n	3152 <usart_init+0x11e>
    334e:	e73e      	b.n	31ce <usart_init+0x19a>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    3350:	b011      	add	sp, #68	; 0x44
    3352:	bc3c      	pop	{r2, r3, r4, r5}
    3354:	4690      	mov	r8, r2
    3356:	4699      	mov	r9, r3
    3358:	46a2      	mov	sl, r4
    335a:	46ab      	mov	fp, r5
    335c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    335e:	46c0      	nop			; (mov r8, r8)
    3360:	00002b75 	.word	0x00002b75
    3364:	40000400 	.word	0x40000400
    3368:	00003cf9 	.word	0x00003cf9
    336c:	00003c89 	.word	0x00003c89
    3370:	000029a5 	.word	0x000029a5
    3374:	00003d1d 	.word	0x00003d1d
    3378:	000027b5 	.word	0x000027b5
    337c:	000027dd 	.word	0x000027dd
    3380:	41002000 	.word	0x41002000
    3384:	000029f1 	.word	0x000029f1
    3388:	00003df5 	.word	0x00003df5
    338c:	00003581 	.word	0x00003581
    3390:	00002bb5 	.word	0x00002bb5
    3394:	2000064c 	.word	0x2000064c

00003398 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    3398:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    339a:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    339c:	2a00      	cmp	r2, #0
    339e:	d00e      	beq.n	33be <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    33a0:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    33a2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    33a4:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    33a6:	2a00      	cmp	r2, #0
    33a8:	d109      	bne.n	33be <usart_write_wait+0x26>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    33aa:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    33ac:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    33ae:	2a00      	cmp	r2, #0
    33b0:	d1fc      	bne.n	33ac <usart_write_wait+0x14>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    33b2:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    33b4:	2102      	movs	r1, #2
    33b6:	7e1a      	ldrb	r2, [r3, #24]
    33b8:	420a      	tst	r2, r1
    33ba:	d0fc      	beq.n	33b6 <usart_write_wait+0x1e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    33bc:	2300      	movs	r3, #0
}
    33be:	0018      	movs	r0, r3
    33c0:	4770      	bx	lr
    33c2:	46c0      	nop			; (mov r8, r8)

000033c4 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    33c4:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    33c6:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    33c8:	2a00      	cmp	r2, #0
    33ca:	d030      	beq.n	342e <usart_read_wait+0x6a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    33cc:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    33ce:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    33d0:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    33d2:	2a00      	cmp	r2, #0
    33d4:	d12b      	bne.n	342e <usart_read_wait+0x6a>

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    33d6:	6802      	ldr	r2, [r0, #0]
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    33d8:	7e10      	ldrb	r0, [r2, #24]
    33da:	0740      	lsls	r0, r0, #29
    33dc:	d527      	bpl.n	342e <usart_read_wait+0x6a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    33de:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    33e0:	2b00      	cmp	r3, #0
    33e2:	d1fc      	bne.n	33de <usart_read_wait+0x1a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    33e4:	8b53      	ldrh	r3, [r2, #26]
    33e6:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    33e8:	0698      	lsls	r0, r3, #26
    33ea:	d01d      	beq.n	3428 <usart_read_wait+0x64>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    33ec:	0798      	lsls	r0, r3, #30
    33ee:	d503      	bpl.n	33f8 <usart_read_wait+0x34>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    33f0:	2302      	movs	r3, #2
    33f2:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_FORMAT;
    33f4:	3318      	adds	r3, #24
    33f6:	e01a      	b.n	342e <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    33f8:	0758      	lsls	r0, r3, #29
    33fa:	d503      	bpl.n	3404 <usart_read_wait+0x40>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    33fc:	2304      	movs	r3, #4
    33fe:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_OVERFLOW;
    3400:	331a      	adds	r3, #26
    3402:	e014      	b.n	342e <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    3404:	07d8      	lsls	r0, r3, #31
    3406:	d503      	bpl.n	3410 <usart_read_wait+0x4c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    3408:	2301      	movs	r3, #1
    340a:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_DATA;
    340c:	3312      	adds	r3, #18
    340e:	e00e      	b.n	342e <usart_read_wait+0x6a>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    3410:	06d8      	lsls	r0, r3, #27
    3412:	d503      	bpl.n	341c <usart_read_wait+0x58>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    3414:	2310      	movs	r3, #16
    3416:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PROTOCOL;
    3418:	3332      	adds	r3, #50	; 0x32
    341a:	e008      	b.n	342e <usart_read_wait+0x6a>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    341c:	069b      	lsls	r3, r3, #26
    341e:	d503      	bpl.n	3428 <usart_read_wait+0x64>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    3420:	2320      	movs	r3, #32
    3422:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PACKET_COLLISION;
    3424:	3321      	adds	r3, #33	; 0x21
    3426:	e002      	b.n	342e <usart_read_wait+0x6a>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    3428:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    342a:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    342c:	2300      	movs	r3, #0
}
    342e:	0018      	movs	r0, r3
    3430:	4770      	bx	lr
    3432:	46c0      	nop			; (mov r8, r8)

00003434 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    3434:	b5f0      	push	{r4, r5, r6, r7, lr}
    3436:	464f      	mov	r7, r9
    3438:	b480      	push	{r7}
    343a:	b082      	sub	sp, #8
    343c:	0004      	movs	r4, r0
    343e:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    3440:	2017      	movs	r0, #23
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    3442:	2a00      	cmp	r2, #0
    3444:	d049      	beq.n	34da <usart_write_buffer_wait+0xa6>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    3446:	79e3      	ldrb	r3, [r4, #7]
		return STATUS_ERR_DENIED;
    3448:	3005      	adds	r0, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    344a:	2b00      	cmp	r3, #0
    344c:	d045      	beq.n	34da <usart_write_buffer_wait+0xa6>
		return STATUS_ERR_DENIED;
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    344e:	6827      	ldr	r7, [r4, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3450:	69fb      	ldr	r3, [r7, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3452:	2b00      	cmp	r3, #0
    3454:	d1fc      	bne.n	3450 <usart_write_buffer_wait+0x1c>
    3456:	4691      	mov	r9, r2
    3458:	2500      	movs	r5, #0
	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    345a:	2601      	movs	r6, #1
    345c:	e020      	b.n	34a0 <usart_write_buffer_wait+0x6c>
    345e:	7e3a      	ldrb	r2, [r7, #24]
    3460:	4232      	tst	r2, r6
    3462:	d104      	bne.n	346e <usart_write_buffer_wait+0x3a>
				break;
			} else if (i == USART_TIMEOUT) {
    3464:	2b01      	cmp	r3, #1
    3466:	d02a      	beq.n	34be <usart_write_buffer_wait+0x8a>
    3468:	3b01      	subs	r3, #1

	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    346a:	2b00      	cmp	r3, #0
    346c:	d1f7      	bne.n	345e <usart_write_buffer_wait+0x2a>
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    346e:	1c6a      	adds	r2, r5, #1
    3470:	b292      	uxth	r2, r2
    3472:	9b01      	ldr	r3, [sp, #4]
    3474:	5d5b      	ldrb	r3, [r3, r5]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    3476:	7961      	ldrb	r1, [r4, #5]
    3478:	2901      	cmp	r1, #1
    347a:	d002      	beq.n	3482 <usart_write_buffer_wait+0x4e>
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    347c:	b299      	uxth	r1, r3
    347e:	0015      	movs	r5, r2
    3480:	e005      	b.n	348e <usart_write_buffer_wait+0x5a>

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
    3482:	1ca9      	adds	r1, r5, #2
    3484:	b28d      	uxth	r5, r1
    3486:	9901      	ldr	r1, [sp, #4]
    3488:	5c89      	ldrb	r1, [r1, r2]
    348a:	0209      	lsls	r1, r1, #8
    348c:	4319      	orrs	r1, r3
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
    348e:	0020      	movs	r0, r4
    3490:	4b14      	ldr	r3, [pc, #80]	; (34e4 <usart_write_buffer_wait+0xb0>)
    3492:	4798      	blx	r3
    3494:	464a      	mov	r2, r9
    3496:	3a01      	subs	r2, #1
    3498:	b293      	uxth	r3, r2
    349a:	4699      	mov	r9, r3
	_usart_wait_for_sync(module);

	uint16_t tx_pos = 0;

	/* Blocks while buffer is being transferred */
	while (length--) {
    349c:	2b00      	cmp	r3, #0
    349e:	d016      	beq.n	34ce <usart_write_buffer_wait+0x9a>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    34a0:	7e3b      	ldrb	r3, [r7, #24]
    34a2:	4233      	tst	r3, r6
    34a4:	d1e3      	bne.n	346e <usart_write_buffer_wait+0x3a>
    34a6:	4b10      	ldr	r3, [pc, #64]	; (34e8 <usart_write_buffer_wait+0xb4>)
    34a8:	e7d9      	b.n	345e <usart_write_buffer_wait+0x2a>
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    34aa:	7e3a      	ldrb	r2, [r7, #24]
    34ac:	420a      	tst	r2, r1
    34ae:	d108      	bne.n	34c2 <usart_write_buffer_wait+0x8e>
			break;
		} else if (i == USART_TIMEOUT) {
    34b0:	2b01      	cmp	r3, #1
    34b2:	d008      	beq.n	34c6 <usart_write_buffer_wait+0x92>
    34b4:	3b01      	subs	r3, #1
		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    34b6:	2b00      	cmp	r3, #0
    34b8:	d1f7      	bne.n	34aa <usart_write_buffer_wait+0x76>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
    34ba:	2000      	movs	r0, #0
    34bc:	e00d      	b.n	34da <usart_write_buffer_wait+0xa6>
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
				break;
			} else if (i == USART_TIMEOUT) {
				return STATUS_ERR_TIMEOUT;
    34be:	2012      	movs	r0, #18
    34c0:	e00b      	b.n	34da <usart_write_buffer_wait+0xa6>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
    34c2:	2000      	movs	r0, #0
    34c4:	e009      	b.n	34da <usart_write_buffer_wait+0xa6>
	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
			break;
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
    34c6:	2012      	movs	r0, #18
    34c8:	e007      	b.n	34da <usart_write_buffer_wait+0xa6>
		}
	}

	return STATUS_OK;
    34ca:	2000      	movs	r0, #0
    34cc:	e005      	b.n	34da <usart_write_buffer_wait+0xa6>
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    34ce:	7e3b      	ldrb	r3, [r7, #24]
    34d0:	079b      	lsls	r3, r3, #30
    34d2:	d4fa      	bmi.n	34ca <usart_write_buffer_wait+0x96>
    34d4:	4b04      	ldr	r3, [pc, #16]	; (34e8 <usart_write_buffer_wait+0xb4>)
    34d6:	2102      	movs	r1, #2
    34d8:	e7e7      	b.n	34aa <usart_write_buffer_wait+0x76>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    34da:	b002      	add	sp, #8
    34dc:	bc04      	pop	{r2}
    34de:	4691      	mov	r9, r2
    34e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34e2:	46c0      	nop			; (mov r8, r8)
    34e4:	00003399 	.word	0x00003399
    34e8:	0000ffff 	.word	0x0000ffff

000034ec <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    34ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    34ee:	4657      	mov	r7, sl
    34f0:	b480      	push	{r7}
    34f2:	b084      	sub	sp, #16
    34f4:	0004      	movs	r4, r0
    34f6:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    34f8:	2017      	movs	r0, #23
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    34fa:	2a00      	cmp	r2, #0
    34fc:	d038      	beq.n	3570 <usart_read_buffer_wait+0x84>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    34fe:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    3500:	3005      	adds	r0, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    3502:	2b00      	cmp	r3, #0
    3504:	d034      	beq.n	3570 <usart_read_buffer_wait+0x84>
		return STATUS_ERR_DENIED;
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3506:	6826      	ldr	r6, [r4, #0]
    3508:	4692      	mov	sl, r2
    350a:	2500      	movs	r5, #0
	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    350c:	2704      	movs	r7, #4
    350e:	e02a      	b.n	3566 <usart_read_buffer_wait+0x7a>
    3510:	7e32      	ldrb	r2, [r6, #24]
    3512:	423a      	tst	r2, r7
    3514:	d104      	bne.n	3520 <usart_read_buffer_wait+0x34>
				break;
			} else if (i == USART_TIMEOUT) {
    3516:	2b01      	cmp	r3, #1
    3518:	d023      	beq.n	3562 <usart_read_buffer_wait+0x76>
    351a:	3b01      	subs	r3, #1

	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    351c:	2b00      	cmp	r3, #0
    351e:	d1f7      	bne.n	3510 <usart_read_buffer_wait+0x24>
				return STATUS_ERR_TIMEOUT;
			}
		}

		enum status_code retval;
		uint16_t received_data = 0;
    3520:	2300      	movs	r3, #0
    3522:	aa02      	add	r2, sp, #8
    3524:	80d3      	strh	r3, [r2, #6]

		retval = usart_read_wait(module, &received_data);
    3526:	1d91      	adds	r1, r2, #6
    3528:	0020      	movs	r0, r4
    352a:	4b13      	ldr	r3, [pc, #76]	; (3578 <usart_read_buffer_wait+0x8c>)
    352c:	4798      	blx	r3

		if (retval != STATUS_OK) {
    352e:	2800      	cmp	r0, #0
    3530:	d11e      	bne.n	3570 <usart_read_buffer_wait+0x84>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    3532:	1c6b      	adds	r3, r5, #1
    3534:	b29b      	uxth	r3, r3
    3536:	aa02      	add	r2, sp, #8
    3538:	88d2      	ldrh	r2, [r2, #6]
    353a:	9901      	ldr	r1, [sp, #4]
    353c:	554a      	strb	r2, [r1, r5]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    353e:	7961      	ldrb	r1, [r4, #5]
    3540:	2901      	cmp	r1, #1
    3542:	d105      	bne.n	3550 <usart_read_buffer_wait+0x64>
			rx_data[rx_pos++] = (received_data >> 8);
    3544:	1ca9      	adds	r1, r5, #2
    3546:	b28d      	uxth	r5, r1
    3548:	0a12      	lsrs	r2, r2, #8
    354a:	9901      	ldr	r1, [sp, #4]
    354c:	54ca      	strb	r2, [r1, r3]
    354e:	e000      	b.n	3552 <usart_read_buffer_wait+0x66>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    3550:	001d      	movs	r5, r3
    3552:	4652      	mov	r2, sl
    3554:	3a01      	subs	r2, #1
    3556:	b293      	uxth	r3, r2
    3558:	469a      	mov	sl, r3
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint16_t rx_pos = 0;

	/* Blocks while buffer is being received */
	while (length--) {
    355a:	2b00      	cmp	r3, #0
    355c:	d103      	bne.n	3566 <usart_read_buffer_wait+0x7a>
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
    355e:	2000      	movs	r0, #0
    3560:	e006      	b.n	3570 <usart_read_buffer_wait+0x84>
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
				break;
			} else if (i == USART_TIMEOUT) {
				return STATUS_ERR_TIMEOUT;
    3562:	2012      	movs	r0, #18
    3564:	e004      	b.n	3570 <usart_read_buffer_wait+0x84>
	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    3566:	7e33      	ldrb	r3, [r6, #24]
    3568:	423b      	tst	r3, r7
    356a:	d1d9      	bne.n	3520 <usart_read_buffer_wait+0x34>
    356c:	4b03      	ldr	r3, [pc, #12]	; (357c <usart_read_buffer_wait+0x90>)
    356e:	e7cf      	b.n	3510 <usart_read_buffer_wait+0x24>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    3570:	b004      	add	sp, #16
    3572:	bc04      	pop	{r2}
    3574:	4692      	mov	sl, r2
    3576:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3578:	000033c5 	.word	0x000033c5
    357c:	0000ffff 	.word	0x0000ffff

00003580 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    3580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    3582:	0080      	lsls	r0, r0, #2
    3584:	4b60      	ldr	r3, [pc, #384]	; (3708 <_usart_interrupt_handler+0x188>)
    3586:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    3588:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    358a:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    358c:	2b00      	cmp	r3, #0
    358e:	d1fc      	bne.n	358a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    3590:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    3592:	7da6      	ldrb	r6, [r4, #22]
    3594:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    3596:	2330      	movs	r3, #48	; 0x30
    3598:	5ceb      	ldrb	r3, [r5, r3]
    359a:	2231      	movs	r2, #49	; 0x31
    359c:	5caf      	ldrb	r7, [r5, r2]
    359e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    35a0:	07f3      	lsls	r3, r6, #31
    35a2:	d522      	bpl.n	35ea <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    35a4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    35a6:	b29b      	uxth	r3, r3
    35a8:	2b00      	cmp	r3, #0
    35aa:	d01c      	beq.n	35e6 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    35ac:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    35ae:	7813      	ldrb	r3, [r2, #0]
    35b0:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    35b2:	1c51      	adds	r1, r2, #1
    35b4:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    35b6:	7969      	ldrb	r1, [r5, #5]
    35b8:	2901      	cmp	r1, #1
    35ba:	d001      	beq.n	35c0 <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    35bc:	b29b      	uxth	r3, r3
    35be:	e004      	b.n	35ca <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    35c0:	7851      	ldrb	r1, [r2, #1]
    35c2:	0209      	lsls	r1, r1, #8
    35c4:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    35c6:	3202      	adds	r2, #2
    35c8:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    35ca:	05db      	lsls	r3, r3, #23
    35cc:	0ddb      	lsrs	r3, r3, #23
    35ce:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    35d0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    35d2:	3b01      	subs	r3, #1
    35d4:	b29b      	uxth	r3, r3
    35d6:	85eb      	strh	r3, [r5, #46]	; 0x2e
    35d8:	2b00      	cmp	r3, #0
    35da:	d106      	bne.n	35ea <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    35dc:	3301      	adds	r3, #1
    35de:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    35e0:	3301      	adds	r3, #1
    35e2:	75a3      	strb	r3, [r4, #22]
    35e4:	e001      	b.n	35ea <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    35e6:	2301      	movs	r3, #1
    35e8:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    35ea:	07b3      	lsls	r3, r6, #30
    35ec:	d509      	bpl.n	3602 <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    35ee:	2302      	movs	r3, #2
    35f0:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    35f2:	2200      	movs	r2, #0
    35f4:	3331      	adds	r3, #49	; 0x31
    35f6:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    35f8:	07fb      	lsls	r3, r7, #31
    35fa:	d502      	bpl.n	3602 <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    35fc:	0028      	movs	r0, r5
    35fe:	68eb      	ldr	r3, [r5, #12]
    3600:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    3602:	0773      	lsls	r3, r6, #29
    3604:	d560      	bpl.n	36c8 <_usart_interrupt_handler+0x148>

		if (module->remaining_rx_buffer_length) {
    3606:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    3608:	b29b      	uxth	r3, r3
    360a:	2b00      	cmp	r3, #0
    360c:	d05a      	beq.n	36c4 <_usart_interrupt_handler+0x144>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    360e:	8b63      	ldrh	r3, [r4, #26]
    3610:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    3612:	071a      	lsls	r2, r3, #28
    3614:	d402      	bmi.n	361c <_usart_interrupt_handler+0x9c>
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    3616:	223f      	movs	r2, #63	; 0x3f
    3618:	4013      	ands	r3, r2
    361a:	e001      	b.n	3620 <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    361c:	2237      	movs	r2, #55	; 0x37
    361e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    3620:	2b00      	cmp	r3, #0
    3622:	d02d      	beq.n	3680 <_usart_interrupt_handler+0x100>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    3624:	079a      	lsls	r2, r3, #30
    3626:	d505      	bpl.n	3634 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    3628:	221a      	movs	r2, #26
    362a:	2332      	movs	r3, #50	; 0x32
    362c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    362e:	3b30      	subs	r3, #48	; 0x30
    3630:	8363      	strh	r3, [r4, #26]
    3632:	e01f      	b.n	3674 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    3634:	075a      	lsls	r2, r3, #29
    3636:	d505      	bpl.n	3644 <_usart_interrupt_handler+0xc4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    3638:	221e      	movs	r2, #30
    363a:	2332      	movs	r3, #50	; 0x32
    363c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    363e:	3b2e      	subs	r3, #46	; 0x2e
    3640:	8363      	strh	r3, [r4, #26]
    3642:	e017      	b.n	3674 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    3644:	07da      	lsls	r2, r3, #31
    3646:	d505      	bpl.n	3654 <_usart_interrupt_handler+0xd4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    3648:	2213      	movs	r2, #19
    364a:	2332      	movs	r3, #50	; 0x32
    364c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    364e:	3b31      	subs	r3, #49	; 0x31
    3650:	8363      	strh	r3, [r4, #26]
    3652:	e00f      	b.n	3674 <_usart_interrupt_handler+0xf4>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    3654:	06da      	lsls	r2, r3, #27
    3656:	d505      	bpl.n	3664 <_usart_interrupt_handler+0xe4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    3658:	2242      	movs	r2, #66	; 0x42
    365a:	2332      	movs	r3, #50	; 0x32
    365c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    365e:	3b22      	subs	r3, #34	; 0x22
    3660:	8363      	strh	r3, [r4, #26]
    3662:	e007      	b.n	3674 <_usart_interrupt_handler+0xf4>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    3664:	2220      	movs	r2, #32
    3666:	421a      	tst	r2, r3
    3668:	d004      	beq.n	3674 <_usart_interrupt_handler+0xf4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    366a:	3221      	adds	r2, #33	; 0x21
    366c:	2332      	movs	r3, #50	; 0x32
    366e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    3670:	3b12      	subs	r3, #18
    3672:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    3674:	077b      	lsls	r3, r7, #29
    3676:	d527      	bpl.n	36c8 <_usart_interrupt_handler+0x148>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    3678:	0028      	movs	r0, r5
    367a:	696b      	ldr	r3, [r5, #20]
    367c:	4798      	blx	r3
    367e:	e023      	b.n	36c8 <_usart_interrupt_handler+0x148>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    3680:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    3682:	05db      	lsls	r3, r3, #23
    3684:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    3686:	b2da      	uxtb	r2, r3
    3688:	6a69      	ldr	r1, [r5, #36]	; 0x24
    368a:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    368c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    368e:	1c51      	adds	r1, r2, #1
    3690:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    3692:	7969      	ldrb	r1, [r5, #5]
    3694:	2901      	cmp	r1, #1
    3696:	d104      	bne.n	36a2 <_usart_interrupt_handler+0x122>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    3698:	0a1b      	lsrs	r3, r3, #8
    369a:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    369c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    369e:	3301      	adds	r3, #1
    36a0:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    36a2:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    36a4:	3b01      	subs	r3, #1
    36a6:	b29b      	uxth	r3, r3
    36a8:	85ab      	strh	r3, [r5, #44]	; 0x2c
    36aa:	2b00      	cmp	r3, #0
    36ac:	d10c      	bne.n	36c8 <_usart_interrupt_handler+0x148>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    36ae:	3304      	adds	r3, #4
    36b0:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    36b2:	2200      	movs	r2, #0
    36b4:	332e      	adds	r3, #46	; 0x2e
    36b6:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    36b8:	07bb      	lsls	r3, r7, #30
    36ba:	d505      	bpl.n	36c8 <_usart_interrupt_handler+0x148>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    36bc:	0028      	movs	r0, r5
    36be:	692b      	ldr	r3, [r5, #16]
    36c0:	4798      	blx	r3
    36c2:	e001      	b.n	36c8 <_usart_interrupt_handler+0x148>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    36c4:	2304      	movs	r3, #4
    36c6:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    36c8:	06f3      	lsls	r3, r6, #27
    36ca:	d507      	bpl.n	36dc <_usart_interrupt_handler+0x15c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    36cc:	2310      	movs	r3, #16
    36ce:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    36d0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    36d2:	06fb      	lsls	r3, r7, #27
    36d4:	d502      	bpl.n	36dc <_usart_interrupt_handler+0x15c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    36d6:	0028      	movs	r0, r5
    36d8:	69eb      	ldr	r3, [r5, #28]
    36da:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    36dc:	06b3      	lsls	r3, r6, #26
    36de:	d507      	bpl.n	36f0 <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    36e0:	2320      	movs	r3, #32
    36e2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    36e4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    36e6:	073b      	lsls	r3, r7, #28
    36e8:	d502      	bpl.n	36f0 <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    36ea:	0028      	movs	r0, r5
    36ec:	69ab      	ldr	r3, [r5, #24]
    36ee:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    36f0:	0733      	lsls	r3, r6, #28
    36f2:	d507      	bpl.n	3704 <_usart_interrupt_handler+0x184>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    36f4:	2308      	movs	r3, #8
    36f6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    36f8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    36fa:	06bb      	lsls	r3, r7, #26
    36fc:	d502      	bpl.n	3704 <_usart_interrupt_handler+0x184>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    36fe:	6a2b      	ldr	r3, [r5, #32]
    3700:	0028      	movs	r0, r5
    3702:	4798      	blx	r3
		}
	}
#endif
}
    3704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3706:	46c0      	nop			; (mov r8, r8)
    3708:	2000064c 	.word	0x2000064c

0000370c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    370c:	b510      	push	{r4, lr}
	switch (clock_source) {
    370e:	2808      	cmp	r0, #8
    3710:	d803      	bhi.n	371a <system_clock_source_get_hz+0xe>
    3712:	0080      	lsls	r0, r0, #2
    3714:	4b1c      	ldr	r3, [pc, #112]	; (3788 <system_clock_source_get_hz+0x7c>)
    3716:	581b      	ldr	r3, [r3, r0]
    3718:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    371a:	2000      	movs	r0, #0
    371c:	e032      	b.n	3784 <system_clock_source_get_hz+0x78>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    371e:	4b1b      	ldr	r3, [pc, #108]	; (378c <system_clock_source_get_hz+0x80>)
    3720:	6918      	ldr	r0, [r3, #16]
    3722:	e02f      	b.n	3784 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    3724:	4b1a      	ldr	r3, [pc, #104]	; (3790 <system_clock_source_get_hz+0x84>)
    3726:	7d18      	ldrb	r0, [r3, #20]
    3728:	0700      	lsls	r0, r0, #28
    372a:	0f80      	lsrs	r0, r0, #30
    372c:	3001      	adds	r0, #1
    372e:	4b19      	ldr	r3, [pc, #100]	; (3794 <system_clock_source_get_hz+0x88>)
    3730:	4358      	muls	r0, r3
    3732:	e027      	b.n	3784 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    3734:	4b15      	ldr	r3, [pc, #84]	; (378c <system_clock_source_get_hz+0x80>)
    3736:	6958      	ldr	r0, [r3, #20]
    3738:	e024      	b.n	3784 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    373a:	4b14      	ldr	r3, [pc, #80]	; (378c <system_clock_source_get_hz+0x80>)
    373c:	681b      	ldr	r3, [r3, #0]
    373e:	2002      	movs	r0, #2
    3740:	4018      	ands	r0, r3
    3742:	d01f      	beq.n	3784 <system_clock_source_get_hz+0x78>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    3744:	4912      	ldr	r1, [pc, #72]	; (3790 <system_clock_source_get_hz+0x84>)
    3746:	2280      	movs	r2, #128	; 0x80
    3748:	0052      	lsls	r2, r2, #1
    374a:	68cb      	ldr	r3, [r1, #12]
    374c:	4213      	tst	r3, r2
    374e:	d0fc      	beq.n	374a <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    3750:	4b0e      	ldr	r3, [pc, #56]	; (378c <system_clock_source_get_hz+0x80>)
    3752:	681b      	ldr	r3, [r3, #0]
    3754:	075b      	lsls	r3, r3, #29
    3756:	d514      	bpl.n	3782 <system_clock_source_get_hz+0x76>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    3758:	2000      	movs	r0, #0
    375a:	4b0f      	ldr	r3, [pc, #60]	; (3798 <system_clock_source_get_hz+0x8c>)
    375c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    375e:	4b0b      	ldr	r3, [pc, #44]	; (378c <system_clock_source_get_hz+0x80>)
    3760:	689b      	ldr	r3, [r3, #8]
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    3762:	041b      	lsls	r3, r3, #16
    3764:	0c1b      	lsrs	r3, r3, #16
    3766:	4358      	muls	r0, r3
    3768:	e00c      	b.n	3784 <system_clock_source_get_hz+0x78>
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    376a:	2328      	movs	r3, #40	; 0x28
    376c:	4a08      	ldr	r2, [pc, #32]	; (3790 <system_clock_source_get_hz+0x84>)
    376e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    3770:	2000      	movs	r0, #0
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    3772:	079b      	lsls	r3, r3, #30
    3774:	d506      	bpl.n	3784 <system_clock_source_get_hz+0x78>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    3776:	4b05      	ldr	r3, [pc, #20]	; (378c <system_clock_source_get_hz+0x80>)
    3778:	68d8      	ldr	r0, [r3, #12]
    377a:	e003      	b.n	3784 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    377c:	2080      	movs	r0, #128	; 0x80
    377e:	0200      	lsls	r0, r0, #8
    3780:	e000      	b.n	3784 <system_clock_source_get_hz+0x78>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    3782:	4806      	ldr	r0, [pc, #24]	; (379c <system_clock_source_get_hz+0x90>)
		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
	}
}
    3784:	bd10      	pop	{r4, pc}
    3786:	46c0      	nop			; (mov r8, r8)
    3788:	00005fc4 	.word	0x00005fc4
    378c:	20000190 	.word	0x20000190
    3790:	40000c00 	.word	0x40000c00
    3794:	003d0900 	.word	0x003d0900
    3798:	00003d1d 	.word	0x00003d1d
    379c:	02dc6c00 	.word	0x02dc6c00

000037a0 <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
    37a0:	b530      	push	{r4, r5, lr}
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
    37a2:	4c0c      	ldr	r4, [pc, #48]	; (37d4 <system_clock_source_osc16m_set_config+0x34>)
    37a4:	7d23      	ldrb	r3, [r4, #20]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
	temp.bit.ONDEMAND = config->on_demand;
    37a6:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;
    37a8:	7841      	ldrb	r1, [r0, #1]

	OSCCTRL->OSC16MCTRL = temp;
    37aa:	7800      	ldrb	r0, [r0, #0]
    37ac:	2203      	movs	r2, #3
    37ae:	4010      	ands	r0, r2
    37b0:	0080      	lsls	r0, r0, #2
    37b2:	3209      	adds	r2, #9
    37b4:	4393      	bics	r3, r2
    37b6:	4303      	orrs	r3, r0
    37b8:	3a0b      	subs	r2, #11
    37ba:	4011      	ands	r1, r2
    37bc:	0189      	lsls	r1, r1, #6
    37be:	323f      	adds	r2, #63	; 0x3f
    37c0:	4393      	bics	r3, r2
    37c2:	430b      	orrs	r3, r1
    37c4:	001a      	movs	r2, r3
    37c6:	01e9      	lsls	r1, r5, #7
    37c8:	237f      	movs	r3, #127	; 0x7f
    37ca:	4013      	ands	r3, r2
    37cc:	430b      	orrs	r3, r1
    37ce:	7523      	strb	r3, [r4, #20]
}
    37d0:	bd30      	pop	{r4, r5, pc}
    37d2:	46c0      	nop			; (mov r8, r8)
    37d4:	40000c00 	.word	0x40000c00

000037d8 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    37d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    37da:	4657      	mov	r7, sl
    37dc:	464e      	mov	r6, r9
    37de:	4645      	mov	r5, r8
    37e0:	b4e0      	push	{r5, r6, r7}
	OSC32KCTRL_OSC32K_Type temp = OSC32KCTRL->OSC32K;
    37e2:	4e1c      	ldr	r6, [pc, #112]	; (3854 <system_clock_source_osc32k_set_config+0x7c>)
    37e4:	69b3      	ldr	r3, [r6, #24]
    37e6:	469c      	mov	ip, r3


	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    37e8:	7841      	ldrb	r1, [r0, #1]
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    37ea:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    37ec:	7907      	ldrb	r7, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    37ee:	78c3      	ldrb	r3, [r0, #3]
    37f0:	4699      	mov	r9, r3
	temp.bit.WRTLOCK  = config->write_once;
    37f2:	7944      	ldrb	r4, [r0, #5]

	OSC32KCTRL->OSC32K  = temp;
    37f4:	7883      	ldrb	r3, [r0, #2]
    37f6:	2001      	movs	r0, #1
    37f8:	4003      	ands	r3, r0
    37fa:	009b      	lsls	r3, r3, #2
    37fc:	469a      	mov	sl, r3
    37fe:	2204      	movs	r2, #4
    3800:	4690      	mov	r8, r2
    3802:	4662      	mov	r2, ip
    3804:	4643      	mov	r3, r8
    3806:	439a      	bics	r2, r3
    3808:	0013      	movs	r3, r2
    380a:	4652      	mov	r2, sl
    380c:	431a      	orrs	r2, r3
    380e:	0013      	movs	r3, r2
    3810:	4001      	ands	r1, r0
    3812:	00c9      	lsls	r1, r1, #3
    3814:	2208      	movs	r2, #8
    3816:	4393      	bics	r3, r2
    3818:	430b      	orrs	r3, r1
    381a:	464a      	mov	r2, r9
    381c:	4002      	ands	r2, r0
    381e:	0192      	lsls	r2, r2, #6
    3820:	2140      	movs	r1, #64	; 0x40
    3822:	438b      	bics	r3, r1
    3824:	4313      	orrs	r3, r2
    3826:	4007      	ands	r7, r0
    3828:	01ff      	lsls	r7, r7, #7
    382a:	2280      	movs	r2, #128	; 0x80
    382c:	4393      	bics	r3, r2
    382e:	433b      	orrs	r3, r7
    3830:	3a79      	subs	r2, #121	; 0x79
    3832:	4015      	ands	r5, r2
    3834:	022d      	lsls	r5, r5, #8
    3836:	4f08      	ldr	r7, [pc, #32]	; (3858 <system_clock_source_osc32k_set_config+0x80>)
    3838:	403b      	ands	r3, r7
    383a:	432b      	orrs	r3, r5
    383c:	4004      	ands	r4, r0
    383e:	0320      	lsls	r0, r4, #12
    3840:	4c06      	ldr	r4, [pc, #24]	; (385c <system_clock_source_osc32k_set_config+0x84>)
    3842:	401c      	ands	r4, r3
    3844:	4304      	orrs	r4, r0
    3846:	61b4      	str	r4, [r6, #24]
}
    3848:	bc1c      	pop	{r2, r3, r4}
    384a:	4690      	mov	r8, r2
    384c:	4699      	mov	r9, r3
    384e:	46a2      	mov	sl, r4
    3850:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3852:	46c0      	nop			; (mov r8, r8)
    3854:	40001000 	.word	0x40001000
    3858:	fffff8ff 	.word	0xfffff8ff
    385c:	ffffefff 	.word	0xffffefff

00003860 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    3860:	2808      	cmp	r0, #8
    3862:	d803      	bhi.n	386c <system_clock_source_enable+0xc>
    3864:	0080      	lsls	r0, r0, #2
    3866:	4b29      	ldr	r3, [pc, #164]	; (390c <system_clock_source_enable+0xac>)
    3868:	581b      	ldr	r3, [r3, r0]
    386a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    386c:	2017      	movs	r0, #23
    386e:	e04b      	b.n	3908 <system_clock_source_enable+0xa8>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    3870:	4a27      	ldr	r2, [pc, #156]	; (3910 <system_clock_source_enable+0xb0>)
    3872:	7d11      	ldrb	r1, [r2, #20]
    3874:	2302      	movs	r3, #2
    3876:	430b      	orrs	r3, r1
    3878:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    387a:	2000      	movs	r0, #0
    387c:	e044      	b.n	3908 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    387e:	4a25      	ldr	r2, [pc, #148]	; (3914 <system_clock_source_enable+0xb4>)
    3880:	6991      	ldr	r1, [r2, #24]
    3882:	2302      	movs	r3, #2
    3884:	430b      	orrs	r3, r1
    3886:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    3888:	2000      	movs	r0, #0
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
		break;
    388a:	e03d      	b.n	3908 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    388c:	4a20      	ldr	r2, [pc, #128]	; (3910 <system_clock_source_enable+0xb0>)
    388e:	8a11      	ldrh	r1, [r2, #16]
    3890:	2302      	movs	r3, #2
    3892:	430b      	orrs	r3, r1
    3894:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    3896:	2000      	movs	r0, #0
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
		break;
    3898:	e036      	b.n	3908 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    389a:	4a1e      	ldr	r2, [pc, #120]	; (3914 <system_clock_source_enable+0xb4>)
    389c:	6951      	ldr	r1, [r2, #20]
    389e:	2302      	movs	r3, #2
    38a0:	430b      	orrs	r3, r1
    38a2:	6153      	str	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    38a4:	2000      	movs	r0, #0
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
		break;
    38a6:	e02f      	b.n	3908 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    38a8:	491b      	ldr	r1, [pc, #108]	; (3918 <system_clock_source_enable+0xb8>)
    38aa:	680b      	ldr	r3, [r1, #0]
    38ac:	2202      	movs	r2, #2
    38ae:	4313      	orrs	r3, r2
    38b0:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    38b2:	4b17      	ldr	r3, [pc, #92]	; (3910 <system_clock_source_enable+0xb0>)
    38b4:	831a      	strh	r2, [r3, #24]
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    38b6:	0019      	movs	r1, r3
    38b8:	32fe      	adds	r2, #254	; 0xfe
    38ba:	68cb      	ldr	r3, [r1, #12]
    38bc:	4213      	tst	r3, r2
    38be:	d0fc      	beq.n	38ba <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    38c0:	4a15      	ldr	r2, [pc, #84]	; (3918 <system_clock_source_enable+0xb8>)
    38c2:	6891      	ldr	r1, [r2, #8]
    38c4:	4b12      	ldr	r3, [pc, #72]	; (3910 <system_clock_source_enable+0xb0>)
    38c6:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    38c8:	6852      	ldr	r2, [r2, #4]
    38ca:	61da      	str	r2, [r3, #28]

	/* Write full configuration to DFLL control register */
	OSCCTRL->DFLLCTRL.reg = 0;
    38cc:	2200      	movs	r2, #0
    38ce:	831a      	strh	r2, [r3, #24]
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    38d0:	0019      	movs	r1, r3
    38d2:	3201      	adds	r2, #1
    38d4:	32ff      	adds	r2, #255	; 0xff
    38d6:	68cb      	ldr	r3, [r1, #12]
    38d8:	4213      	tst	r3, r2
    38da:	d0fc      	beq.n	38d6 <system_clock_source_enable+0x76>
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	OSCCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    38dc:	4b0e      	ldr	r3, [pc, #56]	; (3918 <system_clock_source_enable+0xb8>)
    38de:	681b      	ldr	r3, [r3, #0]
    38e0:	b29b      	uxth	r3, r3
    38e2:	4a0b      	ldr	r2, [pc, #44]	; (3910 <system_clock_source_enable+0xb0>)
    38e4:	8313      	strh	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    38e6:	2000      	movs	r0, #0
    38e8:	e00e      	b.n	3908 <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
		_system_clock_source_dfll_set_config_errata_9905();
		break;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    38ea:	4909      	ldr	r1, [pc, #36]	; (3910 <system_clock_source_enable+0xb0>)
    38ec:	2228      	movs	r2, #40	; 0x28
    38ee:	5c88      	ldrb	r0, [r1, r2]
    38f0:	2302      	movs	r3, #2
    38f2:	4303      	orrs	r3, r0
    38f4:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    38f6:	0008      	movs	r0, r1
    38f8:	2138      	movs	r1, #56	; 0x38
    38fa:	3a26      	subs	r2, #38	; 0x26
    38fc:	5c43      	ldrb	r3, [r0, r1]
    38fe:	4213      	tst	r3, r2
    3900:	d1fc      	bne.n	38fc <system_clock_source_enable+0x9c>
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    3902:	2000      	movs	r0, #0
    3904:	e000      	b.n	3908 <system_clock_source_enable+0xa8>
		}
		break;

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    3906:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    3908:	4770      	bx	lr
    390a:	46c0      	nop			; (mov r8, r8)
    390c:	00005fe8 	.word	0x00005fe8
    3910:	40000c00 	.word	0x40000c00
    3914:	40001000 	.word	0x40001000
    3918:	20000190 	.word	0x20000190

0000391c <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    391c:	2808      	cmp	r0, #8
    391e:	d832      	bhi.n	3986 <system_clock_source_disable+0x6a>
    3920:	0080      	lsls	r0, r0, #2
    3922:	4b1a      	ldr	r3, [pc, #104]	; (398c <system_clock_source_disable+0x70>)
    3924:	581b      	ldr	r3, [r3, r0]
    3926:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    3928:	4a19      	ldr	r2, [pc, #100]	; (3990 <system_clock_source_disable+0x74>)
    392a:	7d13      	ldrb	r3, [r2, #20]
    392c:	2102      	movs	r1, #2
    392e:	438b      	bics	r3, r1
    3930:	7513      	strb	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    3932:	2000      	movs	r0, #0
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
		break;
    3934:	e028      	b.n	3988 <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    3936:	4a17      	ldr	r2, [pc, #92]	; (3994 <system_clock_source_disable+0x78>)
    3938:	6993      	ldr	r3, [r2, #24]
    393a:	2102      	movs	r1, #2
    393c:	438b      	bics	r3, r1
    393e:	6193      	str	r3, [r2, #24]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    3940:	2000      	movs	r0, #0
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
		break;
    3942:	e021      	b.n	3988 <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    3944:	4a12      	ldr	r2, [pc, #72]	; (3990 <system_clock_source_disable+0x74>)
    3946:	8a13      	ldrh	r3, [r2, #16]
    3948:	2102      	movs	r1, #2
    394a:	438b      	bics	r3, r1
    394c:	8213      	strh	r3, [r2, #16]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    394e:	2000      	movs	r0, #0
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
		break;
    3950:	e01a      	b.n	3988 <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    3952:	4a10      	ldr	r2, [pc, #64]	; (3994 <system_clock_source_disable+0x78>)
    3954:	6953      	ldr	r3, [r2, #20]
    3956:	2102      	movs	r1, #2
    3958:	438b      	bics	r3, r1
    395a:	6153      	str	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    395c:	2000      	movs	r0, #0
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
		break;
    395e:	e013      	b.n	3988 <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    3960:	4b0d      	ldr	r3, [pc, #52]	; (3998 <system_clock_source_disable+0x7c>)
    3962:	681a      	ldr	r2, [r3, #0]
    3964:	2102      	movs	r1, #2
    3966:	438a      	bics	r2, r1
    3968:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    396a:	681b      	ldr	r3, [r3, #0]
    396c:	b29b      	uxth	r3, r3
    396e:	4a08      	ldr	r2, [pc, #32]	; (3990 <system_clock_source_disable+0x74>)
    3970:	8313      	strh	r3, [r2, #24]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    3972:	2000      	movs	r0, #0
		break;

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
		break;
    3974:	e008      	b.n	3988 <system_clock_source_disable+0x6c>
	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    3976:	4906      	ldr	r1, [pc, #24]	; (3990 <system_clock_source_disable+0x74>)
    3978:	2228      	movs	r2, #40	; 0x28
    397a:	5c8b      	ldrb	r3, [r1, r2]
    397c:	2002      	movs	r0, #2
    397e:	4383      	bics	r3, r0
    3980:	548b      	strb	r3, [r1, r2]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    3982:	2000      	movs	r0, #0
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
		break;
	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
		break;
    3984:	e000      	b.n	3988 <system_clock_source_disable+0x6c>
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3986:	2017      	movs	r0, #23

	}

	return STATUS_OK;
}
    3988:	4770      	bx	lr
    398a:	46c0      	nop			; (mov r8, r8)
    398c:	0000600c 	.word	0x0000600c
    3990:	40000c00 	.word	0x40000c00
    3994:	40001000 	.word	0x40001000
    3998:	20000190 	.word	0x20000190

0000399c <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    399c:	b5f0      	push	{r4, r5, r6, r7, lr}
    399e:	4657      	mov	r7, sl
    39a0:	464e      	mov	r6, r9
    39a2:	4645      	mov	r5, r8
    39a4:	b4e0      	push	{r5, r6, r7}
    39a6:	b086      	sub	sp, #24
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    39a8:	2280      	movs	r2, #128	; 0x80
    39aa:	0052      	lsls	r2, r2, #1
    39ac:	4b49      	ldr	r3, [pc, #292]	; (3ad4 <system_clock_init+0x138>)
    39ae:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    39b0:	3afd      	subs	r2, #253	; 0xfd
    39b2:	4b49      	ldr	r3, [pc, #292]	; (3ad8 <system_clock_init+0x13c>)
    39b4:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    39b6:	4a49      	ldr	r2, [pc, #292]	; (3adc <system_clock_init+0x140>)
    39b8:	6853      	ldr	r3, [r2, #4]
    39ba:	211e      	movs	r1, #30
    39bc:	438b      	bics	r3, r1
    39be:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    39c0:	2380      	movs	r3, #128	; 0x80
    39c2:	05db      	lsls	r3, r3, #23
    39c4:	789b      	ldrb	r3, [r3, #2]
    39c6:	2b02      	cmp	r3, #2
    39c8:	d009      	beq.n	39de <system_clock_init+0x42>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    39ca:	2380      	movs	r3, #128	; 0x80
    39cc:	05db      	lsls	r3, r3, #23
    39ce:	2201      	movs	r2, #1
    39d0:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    39d2:	3201      	adds	r2, #1
    39d4:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    39d6:	001a      	movs	r2, r3
    39d8:	7993      	ldrb	r3, [r2, #6]
    39da:	2b00      	cmp	r3, #0
    39dc:	d0fc      	beq.n	39d8 <system_clock_init+0x3c>
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
	Assert(config);

	config->enable_1khz_output  = true;
    39de:	a804      	add	r0, sp, #16
    39e0:	2501      	movs	r5, #1
    39e2:	7045      	strb	r5, [r0, #1]
	config->enable_32khz_output = true;
    39e4:	7085      	strb	r5, [r0, #2]
	config->run_in_standby      = false;
    39e6:	2400      	movs	r4, #0
    39e8:	70c4      	strb	r4, [r0, #3]
	config->on_demand           = true;
    39ea:	7105      	strb	r5, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    39ec:	2307      	movs	r3, #7
    39ee:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
    39f0:	7144      	strb	r4, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    39f2:	4b3b      	ldr	r3, [pc, #236]	; (3ae0 <system_clock_init+0x144>)
    39f4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    39f6:	2004      	movs	r0, #4
    39f8:	4e3a      	ldr	r6, [pc, #232]	; (3ae4 <system_clock_init+0x148>)
    39fa:	47b0      	blx	r6
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    39fc:	a901      	add	r1, sp, #4
    39fe:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    3a00:	704c      	strb	r4, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    3a02:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    3a04:	724c      	strb	r4, [r1, #9]
	struct system_gclk_gen_config gclk_conf;
	struct system_clock_source_osc16m_config osc16m_conf;

	/* Select OSCULP32K as new clock source for mainclock temporarily */
	system_gclk_gen_get_config_defaults(&gclk_conf);
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    3a06:	2303      	movs	r3, #3
    3a08:	700b      	strb	r3, [r1, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    3a0a:	2000      	movs	r0, #0
    3a0c:	4b36      	ldr	r3, [pc, #216]	; (3ae8 <system_clock_init+0x14c>)
    3a0e:	4798      	blx	r3

	/* GCLK0 is enabled after POR */

	/* Disable OSC16M clock*/
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    3a10:	2006      	movs	r0, #6
    3a12:	4b36      	ldr	r3, [pc, #216]	; (3aec <system_clock_init+0x150>)
    3a14:	4798      	blx	r3
		struct system_clock_source_osc16m_config *const config)
{
	Assert(config);

	config->fsel = SYSTEM_OSC16M_4M;
	config->run_in_standby  = false;
    3a16:	466b      	mov	r3, sp
    3a18:	705c      	strb	r4, [r3, #1]

	/* Switch to new frequency selection and enable OSC16M */
	system_clock_source_osc16m_get_config_defaults(&osc16m_conf);
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    3a1a:	701d      	strb	r5, [r3, #0]
	osc16m_conf.on_demand       = 0;
    3a1c:	709c      	strb	r4, [r3, #2]
	osc16m_conf.run_in_standby  = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
	system_clock_source_osc16m_set_config(&osc16m_conf);
    3a1e:	4668      	mov	r0, sp
    3a20:	4b33      	ldr	r3, [pc, #204]	; (3af0 <system_clock_init+0x154>)
    3a22:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    3a24:	2006      	movs	r0, #6
    3a26:	47b0      	blx	r6
	uint32_t mask = 0;

	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		mask = OSCCTRL_STATUS_OSC16MRDY;
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    3a28:	492a      	ldr	r1, [pc, #168]	; (3ad4 <system_clock_init+0x138>)
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
	osc16m_conf.on_demand       = 0;
	osc16m_conf.run_in_standby  = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
	system_clock_source_osc16m_set_config(&osc16m_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    3a2a:	2210      	movs	r2, #16
	uint32_t mask = 0;

	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		mask = OSCCTRL_STATUS_OSC16MRDY;
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    3a2c:	68cb      	ldr	r3, [r1, #12]
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
	osc16m_conf.on_demand       = 0;
	osc16m_conf.run_in_standby  = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
	system_clock_source_osc16m_set_config(&osc16m_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    3a2e:	421a      	tst	r2, r3
    3a30:	d0fc      	beq.n	3a2c <system_clock_init+0x90>
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    3a32:	ac01      	add	r4, sp, #4
    3a34:	2601      	movs	r6, #1
    3a36:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    3a38:	2500      	movs	r5, #0
    3a3a:	7065      	strb	r5, [r4, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
    3a3c:	2306      	movs	r3, #6
    3a3e:	4699      	mov	r9, r3
    3a40:	7023      	strb	r3, [r4, #0]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    3a42:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    3a44:	7265      	strb	r5, [r4, #9]

	/* Select OSC16M for mainclock again */
	system_gclk_gen_get_config_defaults(&gclk_conf);
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_OSC16M;
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    3a46:	0021      	movs	r1, r4
    3a48:	2000      	movs	r0, #0
    3a4a:	4b27      	ldr	r3, [pc, #156]	; (3ae8 <system_clock_init+0x14c>)
    3a4c:	4698      	mov	r8, r3
    3a4e:	4798      	blx	r3
	if (CONF_CLOCK_OSC16M_ON_DEMAND){
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
    3a50:	4a20      	ldr	r2, [pc, #128]	; (3ad4 <system_clock_init+0x138>)
    3a52:	7d11      	ldrb	r1, [r2, #20]
    3a54:	2380      	movs	r3, #128	; 0x80
    3a56:	430b      	orrs	r3, r1
    3a58:	7513      	strb	r3, [r2, #20]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    3a5a:	4b26      	ldr	r3, [pc, #152]	; (3af4 <system_clock_init+0x158>)
    3a5c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    3a5e:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    3a60:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    3a62:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    3a64:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    3a66:	2304      	movs	r3, #4
    3a68:	7023      	strb	r3, [r4, #0]
    3a6a:	0021      	movs	r1, r4
    3a6c:	2001      	movs	r0, #1
    3a6e:	47c0      	blx	r8
    3a70:	2001      	movs	r0, #1
    3a72:	4b21      	ldr	r3, [pc, #132]	; (3af8 <system_clock_init+0x15c>)
    3a74:	469a      	mov	sl, r3
    3a76:	4798      	blx	r3
 * \param[in] divider  CPU clock divider
 */
static inline void system_backup_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    3a78:	4f20      	ldr	r7, [pc, #128]	; (3afc <system_clock_init+0x160>)
    3a7a:	71be      	strb	r6, [r7, #6]
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_low_power_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    3a7c:	717e      	strb	r6, [r7, #5]
 * \param[in] divider  CPU clock divider
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    3a7e:	713e      	strb	r6, [r7, #4]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    3a80:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    3a82:	7065      	strb	r5, [r4, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
    3a84:	464b      	mov	r3, r9
    3a86:	7023      	strb	r3, [r4, #0]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    3a88:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    3a8a:	7265      	strb	r5, [r4, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    3a8c:	0021      	movs	r1, r4
    3a8e:	2000      	movs	r0, #0
    3a90:	47c0      	blx	r8
    3a92:	2000      	movs	r0, #0
    3a94:	47d0      	blx	sl
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    3a96:	2000      	movs	r0, #0
    3a98:	4b19      	ldr	r3, [pc, #100]	; (3b00 <system_clock_init+0x164>)
    3a9a:	4798      	blx	r3
    3a9c:	7939      	ldrb	r1, [r7, #4]
    3a9e:	b2c9      	uxtb	r1, r1
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    3aa0:	4b18      	ldr	r3, [pc, #96]	; (3b04 <system_clock_init+0x168>)
    3aa2:	4798      	blx	r3
    3aa4:	4b18      	ldr	r3, [pc, #96]	; (3b08 <system_clock_init+0x16c>)
    3aa6:	4298      	cmp	r0, r3
    3aa8:	d80e      	bhi.n	3ac8 <system_clock_init+0x12c>
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    3aaa:	2380      	movs	r3, #128	; 0x80
    3aac:	05db      	lsls	r3, r3, #23
    3aae:	789b      	ldrb	r3, [r3, #2]
    3ab0:	2b00      	cmp	r3, #0
    3ab2:	d009      	beq.n	3ac8 <system_clock_init+0x12c>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    3ab4:	2380      	movs	r3, #128	; 0x80
    3ab6:	05db      	lsls	r3, r3, #23
    3ab8:	2201      	movs	r2, #1
    3aba:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    3abc:	2200      	movs	r2, #0
    3abe:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    3ac0:	001a      	movs	r2, r3
    3ac2:	7993      	ldrb	r3, [r2, #6]
    3ac4:	2b00      	cmp	r3, #0
    3ac6:	d0fc      	beq.n	3ac2 <system_clock_init+0x126>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    3ac8:	b006      	add	sp, #24
    3aca:	bc1c      	pop	{r2, r3, r4}
    3acc:	4690      	mov	r8, r2
    3ace:	4699      	mov	r9, r3
    3ad0:	46a2      	mov	sl, r4
    3ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ad4:	40000c00 	.word	0x40000c00
    3ad8:	40001400 	.word	0x40001400
    3adc:	41004000 	.word	0x41004000
    3ae0:	000037d9 	.word	0x000037d9
    3ae4:	00003861 	.word	0x00003861
    3ae8:	00003b31 	.word	0x00003b31
    3aec:	0000391d 	.word	0x0000391d
    3af0:	000037a1 	.word	0x000037a1
    3af4:	00003b0d 	.word	0x00003b0d
    3af8:	00003bdd 	.word	0x00003bdd
    3afc:	40000400 	.word	0x40000400
    3b00:	00003c1d 	.word	0x00003c1d
    3b04:	00005281 	.word	0x00005281
    3b08:	00b71b00 	.word	0x00b71b00

00003b0c <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    3b0c:	4a06      	ldr	r2, [pc, #24]	; (3b28 <system_gclk_init+0x1c>)
    3b0e:	6951      	ldr	r1, [r2, #20]
    3b10:	2340      	movs	r3, #64	; 0x40
    3b12:	430b      	orrs	r3, r1
    3b14:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    3b16:	2201      	movs	r2, #1
    3b18:	4b04      	ldr	r3, [pc, #16]	; (3b2c <system_gclk_init+0x20>)
    3b1a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    3b1c:	0019      	movs	r1, r3
    3b1e:	780b      	ldrb	r3, [r1, #0]
    3b20:	4213      	tst	r3, r2
    3b22:	d1fc      	bne.n	3b1e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    3b24:	4770      	bx	lr
    3b26:	46c0      	nop			; (mov r8, r8)
    3b28:	40000400 	.word	0x40000400
    3b2c:	40001800 	.word	0x40001800

00003b30 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    3b30:	b570      	push	{r4, r5, r6, lr}
    3b32:	0005      	movs	r5, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    3b34:	780c      	ldrb	r4, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    3b36:	784b      	ldrb	r3, [r1, #1]
    3b38:	2b00      	cmp	r3, #0
    3b3a:	d002      	beq.n	3b42 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    3b3c:	2380      	movs	r3, #128	; 0x80
    3b3e:	00db      	lsls	r3, r3, #3
    3b40:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    3b42:	7a4b      	ldrb	r3, [r1, #9]
    3b44:	2b00      	cmp	r3, #0
    3b46:	d002      	beq.n	3b4e <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    3b48:	2380      	movs	r3, #128	; 0x80
    3b4a:	011b      	lsls	r3, r3, #4
    3b4c:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    3b4e:	684a      	ldr	r2, [r1, #4]
    3b50:	2a01      	cmp	r2, #1
    3b52:	d917      	bls.n	3b84 <system_gclk_gen_set_config+0x54>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    3b54:	1e53      	subs	r3, r2, #1
    3b56:	421a      	tst	r2, r3
    3b58:	d10f      	bne.n	3b7a <system_gclk_gen_set_config+0x4a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3b5a:	2a02      	cmp	r2, #2
    3b5c:	d906      	bls.n	3b6c <system_gclk_gen_set_config+0x3c>
    3b5e:	2302      	movs	r3, #2
    3b60:	2000      	movs	r0, #0
						mask <<= 1) {
				div2_count++;
    3b62:	3001      	adds	r0, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    3b64:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3b66:	429a      	cmp	r2, r3
    3b68:	d8fb      	bhi.n	3b62 <system_gclk_gen_set_config+0x32>
    3b6a:	e000      	b.n	3b6e <system_gclk_gen_set_config+0x3e>
    3b6c:	2000      	movs	r0, #0
    3b6e:	2380      	movs	r3, #128	; 0x80
    3b70:	015b      	lsls	r3, r3, #5
    3b72:	431c      	orrs	r4, r3
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    3b74:	0400      	lsls	r0, r0, #16
    3b76:	4304      	orrs	r4, r0
    3b78:	e004      	b.n	3b84 <system_gclk_gen_set_config+0x54>

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    3b7a:	0412      	lsls	r2, r2, #16
    3b7c:	2380      	movs	r3, #128	; 0x80
    3b7e:	009b      	lsls	r3, r3, #2
    3b80:	431a      	orrs	r2, r3
    3b82:	4314      	orrs	r4, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    3b84:	7a0b      	ldrb	r3, [r1, #8]
    3b86:	2b00      	cmp	r3, #0
    3b88:	d002      	beq.n	3b90 <system_gclk_gen_set_config+0x60>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    3b8a:	2380      	movs	r3, #128	; 0x80
    3b8c:	019b      	lsls	r3, r3, #6
    3b8e:	431c      	orrs	r4, r3
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    3b90:	2604      	movs	r6, #4
    3b92:	40ae      	lsls	r6, r5
    3b94:	490d      	ldr	r1, [pc, #52]	; (3bcc <system_gclk_gen_set_config+0x9c>)
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
    3b96:	4a0e      	ldr	r2, [pc, #56]	; (3bd0 <system_gclk_gen_set_config+0xa0>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    3b98:	684b      	ldr	r3, [r1, #4]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
    3b9a:	4013      	ands	r3, r2
    3b9c:	421e      	tst	r6, r3
    3b9e:	d1fb      	bne.n	3b98 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    3ba0:	4b0c      	ldr	r3, [pc, #48]	; (3bd4 <system_gclk_gen_set_config+0xa4>)
    3ba2:	4798      	blx	r3
    3ba4:	00ad      	lsls	r5, r5, #2
    3ba6:	4b09      	ldr	r3, [pc, #36]	; (3bcc <system_gclk_gen_set_config+0x9c>)
    3ba8:	469c      	mov	ip, r3
    3baa:	4465      	add	r5, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    3bac:	6a28      	ldr	r0, [r5, #32]
    3bae:	2380      	movs	r3, #128	; 0x80
    3bb0:	005b      	lsls	r3, r3, #1
    3bb2:	4018      	ands	r0, r3
    3bb4:	4320      	orrs	r0, r4
    3bb6:	6228      	str	r0, [r5, #32]
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    3bb8:	4661      	mov	r1, ip

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
    3bba:	4a05      	ldr	r2, [pc, #20]	; (3bd0 <system_gclk_gen_set_config+0xa0>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    3bbc:	684b      	ldr	r3, [r1, #4]

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
    3bbe:	4013      	ands	r3, r2
    3bc0:	421e      	tst	r6, r3
    3bc2:	d1fb      	bne.n	3bbc <system_gclk_gen_set_config+0x8c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    3bc4:	4b04      	ldr	r3, [pc, #16]	; (3bd8 <system_gclk_gen_set_config+0xa8>)
    3bc6:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    3bc8:	bd70      	pop	{r4, r5, r6, pc}
    3bca:	46c0      	nop			; (mov r8, r8)
    3bcc:	40001800 	.word	0x40001800
    3bd0:	000007fc 	.word	0x000007fc
    3bd4:	00002421 	.word	0x00002421
    3bd8:	00002461 	.word	0x00002461

00003bdc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3bdc:	b510      	push	{r4, lr}
    3bde:	0004      	movs	r4, r0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    3be0:	2204      	movs	r2, #4
    3be2:	4082      	lsls	r2, r0
    3be4:	4809      	ldr	r0, [pc, #36]	; (3c0c <system_gclk_gen_enable+0x30>)
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    3be6:	490a      	ldr	r1, [pc, #40]	; (3c10 <system_gclk_gen_enable+0x34>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    3be8:	6843      	ldr	r3, [r0, #4]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    3bea:	400b      	ands	r3, r1
    3bec:	421a      	tst	r2, r3
    3bee:	d1fb      	bne.n	3be8 <system_gclk_gen_enable+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    3bf0:	4b08      	ldr	r3, [pc, #32]	; (3c14 <system_gclk_gen_enable+0x38>)
    3bf2:	4798      	blx	r3
    3bf4:	00a4      	lsls	r4, r4, #2
    3bf6:	4b05      	ldr	r3, [pc, #20]	; (3c0c <system_gclk_gen_enable+0x30>)
    3bf8:	469c      	mov	ip, r3
    3bfa:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    3bfc:	6a23      	ldr	r3, [r4, #32]
    3bfe:	2280      	movs	r2, #128	; 0x80
    3c00:	0052      	lsls	r2, r2, #1
    3c02:	4313      	orrs	r3, r2
    3c04:	6223      	str	r3, [r4, #32]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    3c06:	4b04      	ldr	r3, [pc, #16]	; (3c18 <system_gclk_gen_enable+0x3c>)
    3c08:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3c0a:	bd10      	pop	{r4, pc}
    3c0c:	40001800 	.word	0x40001800
    3c10:	000007fc 	.word	0x000007fc
    3c14:	00002421 	.word	0x00002421
    3c18:	00002461 	.word	0x00002461

00003c1c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c1e:	0004      	movs	r4, r0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    3c20:	2204      	movs	r2, #4
    3c22:	4082      	lsls	r2, r0
    3c24:	4812      	ldr	r0, [pc, #72]	; (3c70 <system_gclk_gen_get_hz+0x54>)
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    3c26:	4913      	ldr	r1, [pc, #76]	; (3c74 <system_gclk_gen_get_hz+0x58>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    3c28:	6843      	ldr	r3, [r0, #4]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    3c2a:	400b      	ands	r3, r1
    3c2c:	421a      	tst	r2, r3
    3c2e:	d1fb      	bne.n	3c28 <system_gclk_gen_get_hz+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    3c30:	4b11      	ldr	r3, [pc, #68]	; (3c78 <system_gclk_gen_get_hz+0x5c>)
    3c32:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    3c34:	4f0e      	ldr	r7, [pc, #56]	; (3c70 <system_gclk_gen_get_hz+0x54>)
    3c36:	3408      	adds	r4, #8
    3c38:	00a4      	lsls	r4, r4, #2
    3c3a:	59e0      	ldr	r0, [r4, r7]
    3c3c:	0700      	lsls	r0, r0, #28
    3c3e:	0f00      	lsrs	r0, r0, #28
	};

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    3c40:	4b0e      	ldr	r3, [pc, #56]	; (3c7c <system_gclk_gen_get_hz+0x60>)
    3c42:	4798      	blx	r3
    3c44:	0006      	movs	r6, r0
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    3c46:	59e5      	ldr	r5, [r4, r7]
    3c48:	04ed      	lsls	r5, r5, #19
    3c4a:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    3c4c:	59e4      	ldr	r4, [r4, r7]
    3c4e:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    3c50:	4b0b      	ldr	r3, [pc, #44]	; (3c80 <system_gclk_gen_get_hz+0x64>)
    3c52:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    3c54:	2d00      	cmp	r5, #0
    3c56:	d107      	bne.n	3c68 <system_gclk_gen_get_hz+0x4c>
    3c58:	2c01      	cmp	r4, #1
    3c5a:	d907      	bls.n	3c6c <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    3c5c:	0021      	movs	r1, r4
    3c5e:	0030      	movs	r0, r6
    3c60:	4b08      	ldr	r3, [pc, #32]	; (3c84 <system_gclk_gen_get_hz+0x68>)
    3c62:	4798      	blx	r3
    3c64:	0006      	movs	r6, r0
    3c66:	e001      	b.n	3c6c <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    3c68:	3401      	adds	r4, #1
    3c6a:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    3c6c:	0030      	movs	r0, r6
    3c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c70:	40001800 	.word	0x40001800
    3c74:	000007fc 	.word	0x000007fc
    3c78:	00002421 	.word	0x00002421
    3c7c:	0000370d 	.word	0x0000370d
    3c80:	00002461 	.word	0x00002461
    3c84:	00005281 	.word	0x00005281

00003c88 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    3c88:	b510      	push	{r4, lr}
    3c8a:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    3c8c:	4b09      	ldr	r3, [pc, #36]	; (3cb4 <system_gclk_chan_enable+0x2c>)
    3c8e:	4798      	blx	r3
    3c90:	00a0      	lsls	r0, r4, #2
    3c92:	4b09      	ldr	r3, [pc, #36]	; (3cb8 <system_gclk_chan_enable+0x30>)
    3c94:	469c      	mov	ip, r3
    3c96:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    3c98:	2280      	movs	r2, #128	; 0x80
    3c9a:	5881      	ldr	r1, [r0, r2]
    3c9c:	2340      	movs	r3, #64	; 0x40
    3c9e:	430b      	orrs	r3, r1
    3ca0:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    3ca2:	2180      	movs	r1, #128	; 0x80
    3ca4:	3a40      	subs	r2, #64	; 0x40
    3ca6:	5843      	ldr	r3, [r0, r1]
    3ca8:	421a      	tst	r2, r3
    3caa:	d0fc      	beq.n	3ca6 <system_gclk_chan_enable+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    3cac:	4b03      	ldr	r3, [pc, #12]	; (3cbc <system_gclk_chan_enable+0x34>)
    3cae:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    3cb0:	bd10      	pop	{r4, pc}
    3cb2:	46c0      	nop			; (mov r8, r8)
    3cb4:	00002421 	.word	0x00002421
    3cb8:	40001800 	.word	0x40001800
    3cbc:	00002461 	.word	0x00002461

00003cc0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    3cc0:	b510      	push	{r4, lr}
    3cc2:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    3cc4:	4b09      	ldr	r3, [pc, #36]	; (3cec <system_gclk_chan_disable+0x2c>)
    3cc6:	4798      	blx	r3
    3cc8:	00a0      	lsls	r0, r4, #2
    3cca:	4b09      	ldr	r3, [pc, #36]	; (3cf0 <system_gclk_chan_disable+0x30>)
    3ccc:	469c      	mov	ip, r3
    3cce:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    3cd0:	2280      	movs	r2, #128	; 0x80
    3cd2:	5883      	ldr	r3, [r0, r2]
    3cd4:	2140      	movs	r1, #64	; 0x40
    3cd6:	438b      	bics	r3, r1
    3cd8:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    3cda:	3140      	adds	r1, #64	; 0x40
    3cdc:	3a40      	subs	r2, #64	; 0x40
    3cde:	5843      	ldr	r3, [r0, r1]
    3ce0:	421a      	tst	r2, r3
    3ce2:	d1fc      	bne.n	3cde <system_gclk_chan_disable+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    3ce4:	4b03      	ldr	r3, [pc, #12]	; (3cf4 <system_gclk_chan_disable+0x34>)
    3ce6:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    3ce8:	bd10      	pop	{r4, pc}
    3cea:	46c0      	nop			; (mov r8, r8)
    3cec:	00002421 	.word	0x00002421
    3cf0:	40001800 	.word	0x40001800
    3cf4:	00002461 	.word	0x00002461

00003cf8 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    3cf8:	b570      	push	{r4, r5, r6, lr}
    3cfa:	0004      	movs	r4, r0
    3cfc:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    3cfe:	4b05      	ldr	r3, [pc, #20]	; (3d14 <system_gclk_chan_set_config+0x1c>)
    3d00:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    3d02:	782b      	ldrb	r3, [r5, #0]
    3d04:	220f      	movs	r2, #15
    3d06:	4013      	ands	r3, r2
    3d08:	3420      	adds	r4, #32
    3d0a:	00a4      	lsls	r4, r4, #2
    3d0c:	4a02      	ldr	r2, [pc, #8]	; (3d18 <system_gclk_chan_set_config+0x20>)
    3d0e:	50a3      	str	r3, [r4, r2]


}
    3d10:	bd70      	pop	{r4, r5, r6, pc}
    3d12:	46c0      	nop			; (mov r8, r8)
    3d14:	00003cc1 	.word	0x00003cc1
    3d18:	40001800 	.word	0x40001800

00003d1c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3d1c:	b510      	push	{r4, lr}
    3d1e:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    3d20:	4b06      	ldr	r3, [pc, #24]	; (3d3c <system_gclk_chan_get_hz+0x20>)
    3d22:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    3d24:	3420      	adds	r4, #32
    3d26:	00a4      	lsls	r4, r4, #2
    3d28:	4b05      	ldr	r3, [pc, #20]	; (3d40 <system_gclk_chan_get_hz+0x24>)
    3d2a:	58e4      	ldr	r4, [r4, r3]
    3d2c:	0724      	lsls	r4, r4, #28
    3d2e:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    3d30:	4b04      	ldr	r3, [pc, #16]	; (3d44 <system_gclk_chan_get_hz+0x28>)
    3d32:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    3d34:	0020      	movs	r0, r4
    3d36:	4b04      	ldr	r3, [pc, #16]	; (3d48 <system_gclk_chan_get_hz+0x2c>)
    3d38:	4798      	blx	r3
}
    3d3a:	bd10      	pop	{r4, pc}
    3d3c:	00002421 	.word	0x00002421
    3d40:	40001800 	.word	0x40001800
    3d44:	00002461 	.word	0x00002461
    3d48:	00003c1d 	.word	0x00003c1d

00003d4c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    3d4c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    3d4e:	78d3      	ldrb	r3, [r2, #3]
    3d50:	2b00      	cmp	r3, #0
    3d52:	d11e      	bne.n	3d92 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    3d54:	7813      	ldrb	r3, [r2, #0]
    3d56:	2b80      	cmp	r3, #128	; 0x80
    3d58:	d004      	beq.n	3d64 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    3d5a:	061b      	lsls	r3, r3, #24
    3d5c:	2480      	movs	r4, #128	; 0x80
    3d5e:	0264      	lsls	r4, r4, #9
    3d60:	4323      	orrs	r3, r4
    3d62:	e000      	b.n	3d66 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    3d64:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    3d66:	7854      	ldrb	r4, [r2, #1]
    3d68:	2502      	movs	r5, #2
    3d6a:	43ac      	bics	r4, r5
    3d6c:	d10a      	bne.n	3d84 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    3d6e:	7894      	ldrb	r4, [r2, #2]
    3d70:	2c00      	cmp	r4, #0
    3d72:	d103      	bne.n	3d7c <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    3d74:	2480      	movs	r4, #128	; 0x80
    3d76:	02a4      	lsls	r4, r4, #10
    3d78:	4323      	orrs	r3, r4
    3d7a:	e002      	b.n	3d82 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    3d7c:	24c0      	movs	r4, #192	; 0xc0
    3d7e:	02e4      	lsls	r4, r4, #11
    3d80:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    3d82:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3d84:	7854      	ldrb	r4, [r2, #1]
    3d86:	3c01      	subs	r4, #1
    3d88:	2c01      	cmp	r4, #1
    3d8a:	d812      	bhi.n	3db2 <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    3d8c:	4c18      	ldr	r4, [pc, #96]	; (3df0 <_system_pinmux_config+0xa4>)
    3d8e:	4023      	ands	r3, r4
    3d90:	e00f      	b.n	3db2 <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    3d92:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3d94:	040b      	lsls	r3, r1, #16
    3d96:	0c1b      	lsrs	r3, r3, #16
    3d98:	24a0      	movs	r4, #160	; 0xa0
    3d9a:	05e4      	lsls	r4, r4, #23
    3d9c:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3d9e:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3da0:	0c0b      	lsrs	r3, r1, #16
    3da2:	24d0      	movs	r4, #208	; 0xd0
    3da4:	0624      	lsls	r4, r4, #24
    3da6:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3da8:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    3daa:	78d3      	ldrb	r3, [r2, #3]
    3dac:	2b00      	cmp	r3, #0
    3dae:	d018      	beq.n	3de2 <_system_pinmux_config+0x96>
    3db0:	e01c      	b.n	3dec <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3db2:	040c      	lsls	r4, r1, #16
    3db4:	0c24      	lsrs	r4, r4, #16
    3db6:	25a0      	movs	r5, #160	; 0xa0
    3db8:	05ed      	lsls	r5, r5, #23
    3dba:	432c      	orrs	r4, r5
    3dbc:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3dbe:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3dc0:	0c0c      	lsrs	r4, r1, #16
    3dc2:	25d0      	movs	r5, #208	; 0xd0
    3dc4:	062d      	lsls	r5, r5, #24
    3dc6:	432c      	orrs	r4, r5
    3dc8:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3dca:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    3dcc:	78d4      	ldrb	r4, [r2, #3]
    3dce:	2c00      	cmp	r4, #0
    3dd0:	d10c      	bne.n	3dec <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    3dd2:	035b      	lsls	r3, r3, #13
    3dd4:	d505      	bpl.n	3de2 <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    3dd6:	7893      	ldrb	r3, [r2, #2]
    3dd8:	2b01      	cmp	r3, #1
    3dda:	d101      	bne.n	3de0 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    3ddc:	6181      	str	r1, [r0, #24]
    3dde:	e000      	b.n	3de2 <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    3de0:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3de2:	7853      	ldrb	r3, [r2, #1]
    3de4:	3b01      	subs	r3, #1
    3de6:	2b01      	cmp	r3, #1
    3de8:	d800      	bhi.n	3dec <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    3dea:	6081      	str	r1, [r0, #8]
		}
	}
}
    3dec:	bd30      	pop	{r4, r5, pc}
    3dee:	46c0      	nop			; (mov r8, r8)
    3df0:	fffbffff 	.word	0xfffbffff

00003df4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    3df4:	b510      	push	{r4, lr}
    3df6:	0003      	movs	r3, r0
    3df8:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3dfa:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3dfc:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3dfe:	2900      	cmp	r1, #0
    3e00:	d104      	bne.n	3e0c <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    3e02:	0958      	lsrs	r0, r3, #5
    3e04:	01c0      	lsls	r0, r0, #7
    3e06:	4905      	ldr	r1, [pc, #20]	; (3e1c <system_pinmux_pin_set_config+0x28>)
    3e08:	468c      	mov	ip, r1
    3e0a:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
    3e0c:	211f      	movs	r1, #31
    3e0e:	400b      	ands	r3, r1
    3e10:	391e      	subs	r1, #30
    3e12:	4099      	lsls	r1, r3
    3e14:	4b02      	ldr	r3, [pc, #8]	; (3e20 <system_pinmux_pin_set_config+0x2c>)
    3e16:	4798      	blx	r3
}
    3e18:	bd10      	pop	{r4, pc}
    3e1a:	46c0      	nop			; (mov r8, r8)
    3e1c:	40002800 	.word	0x40002800
    3e20:	00003d4d 	.word	0x00003d4d

00003e24 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    3e24:	4770      	bx	lr
    3e26:	46c0      	nop			; (mov r8, r8)

00003e28 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3e28:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    3e2a:	4b05      	ldr	r3, [pc, #20]	; (3e40 <system_init+0x18>)
    3e2c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    3e2e:	4b05      	ldr	r3, [pc, #20]	; (3e44 <system_init+0x1c>)
    3e30:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    3e32:	4b05      	ldr	r3, [pc, #20]	; (3e48 <system_init+0x20>)
    3e34:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    3e36:	4b05      	ldr	r3, [pc, #20]	; (3e4c <system_init+0x24>)
    3e38:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    3e3a:	4b05      	ldr	r3, [pc, #20]	; (3e50 <system_init+0x28>)
    3e3c:	4798      	blx	r3
}
    3e3e:	bd10      	pop	{r4, pc}
    3e40:	0000399d 	.word	0x0000399d
    3e44:	00002491 	.word	0x00002491
    3e48:	00003e25 	.word	0x00003e25
    3e4c:	0000268d 	.word	0x0000268d
    3e50:	00003e25 	.word	0x00003e25

00003e54 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    3e54:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    3e56:	0080      	lsls	r0, r0, #2
    3e58:	4b14      	ldr	r3, [pc, #80]	; (3eac <_tc_interrupt_handler+0x58>)
    3e5a:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    3e5c:	682b      	ldr	r3, [r5, #0]
    3e5e:	7a9c      	ldrb	r4, [r3, #10]
    3e60:	7e2b      	ldrb	r3, [r5, #24]
    3e62:	401c      	ands	r4, r3
    3e64:	7e6b      	ldrb	r3, [r5, #25]
    3e66:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    3e68:	07e3      	lsls	r3, r4, #31
    3e6a:	d505      	bpl.n	3e78 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    3e6c:	0028      	movs	r0, r5
    3e6e:	68ab      	ldr	r3, [r5, #8]
    3e70:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    3e72:	2301      	movs	r3, #1
    3e74:	682a      	ldr	r2, [r5, #0]
    3e76:	7293      	strb	r3, [r2, #10]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    3e78:	07a3      	lsls	r3, r4, #30
    3e7a:	d505      	bpl.n	3e88 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    3e7c:	0028      	movs	r0, r5
    3e7e:	68eb      	ldr	r3, [r5, #12]
    3e80:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    3e82:	2302      	movs	r3, #2
    3e84:	682a      	ldr	r2, [r5, #0]
    3e86:	7293      	strb	r3, [r2, #10]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    3e88:	06e3      	lsls	r3, r4, #27
    3e8a:	d505      	bpl.n	3e98 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    3e8c:	0028      	movs	r0, r5
    3e8e:	692b      	ldr	r3, [r5, #16]
    3e90:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    3e92:	2310      	movs	r3, #16
    3e94:	682a      	ldr	r2, [r5, #0]
    3e96:	7293      	strb	r3, [r2, #10]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    3e98:	06a3      	lsls	r3, r4, #26
    3e9a:	d505      	bpl.n	3ea8 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    3e9c:	0028      	movs	r0, r5
    3e9e:	696b      	ldr	r3, [r5, #20]
    3ea0:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    3ea2:	682b      	ldr	r3, [r5, #0]
    3ea4:	2220      	movs	r2, #32
    3ea6:	729a      	strb	r2, [r3, #10]
	}
}
    3ea8:	bd70      	pop	{r4, r5, r6, pc}
    3eaa:	46c0      	nop			; (mov r8, r8)
    3eac:	20000664 	.word	0x20000664

00003eb0 <TC0_Handler>:
		{ \
			_tc_interrupt_handler(m); \
		}

#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
    3eb0:	b510      	push	{r4, lr}
    3eb2:	2000      	movs	r0, #0
    3eb4:	4b01      	ldr	r3, [pc, #4]	; (3ebc <TC0_Handler+0xc>)
    3eb6:	4798      	blx	r3
    3eb8:	bd10      	pop	{r4, pc}
    3eba:	46c0      	nop			; (mov r8, r8)
    3ebc:	00003e55 	.word	0x00003e55

00003ec0 <TC1_Handler>:
	_TC_INTERRUPT_HANDLER(1,1)
    3ec0:	b510      	push	{r4, lr}
    3ec2:	2001      	movs	r0, #1
    3ec4:	4b01      	ldr	r3, [pc, #4]	; (3ecc <TC1_Handler+0xc>)
    3ec6:	4798      	blx	r3
    3ec8:	bd10      	pop	{r4, pc}
    3eca:	46c0      	nop			; (mov r8, r8)
    3ecc:	00003e55 	.word	0x00003e55

00003ed0 <TC4_Handler>:
	_TC_INTERRUPT_HANDLER(4,2)
    3ed0:	b510      	push	{r4, lr}
    3ed2:	2002      	movs	r0, #2
    3ed4:	4b01      	ldr	r3, [pc, #4]	; (3edc <TC4_Handler+0xc>)
    3ed6:	4798      	blx	r3
    3ed8:	bd10      	pop	{r4, pc}
    3eda:	46c0      	nop			; (mov r8, r8)
    3edc:	00003e55 	.word	0x00003e55

00003ee0 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    3ee0:	b530      	push	{r4, r5, lr}
    3ee2:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    3ee4:	aa01      	add	r2, sp, #4
    3ee6:	4b0b      	ldr	r3, [pc, #44]	; (3f14 <_tc_get_inst_index+0x34>)
    3ee8:	cb32      	ldmia	r3!, {r1, r4, r5}
    3eea:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    3eec:	9b01      	ldr	r3, [sp, #4]
    3eee:	4298      	cmp	r0, r3
    3ef0:	d00a      	beq.n	3f08 <_tc_get_inst_index+0x28>
    3ef2:	9b02      	ldr	r3, [sp, #8]
    3ef4:	4298      	cmp	r0, r3
    3ef6:	d005      	beq.n	3f04 <_tc_get_inst_index+0x24>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    3ef8:	2300      	movs	r3, #0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    3efa:	9a03      	ldr	r2, [sp, #12]
    3efc:	4282      	cmp	r2, r0
    3efe:	d105      	bne.n	3f0c <_tc_get_inst_index+0x2c>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    3f00:	3302      	adds	r3, #2
    3f02:	e002      	b.n	3f0a <_tc_get_inst_index+0x2a>
    3f04:	2301      	movs	r3, #1
    3f06:	e000      	b.n	3f0a <_tc_get_inst_index+0x2a>
    3f08:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
			return i;
    3f0a:	b2db      	uxtb	r3, r3
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    3f0c:	0018      	movs	r0, r3
    3f0e:	b005      	add	sp, #20
    3f10:	bd30      	pop	{r4, r5, pc}
    3f12:	46c0      	nop			; (mov r8, r8)
    3f14:	00006058 	.word	0x00006058

00003f18 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    3f18:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f1a:	4647      	mov	r7, r8
    3f1c:	b480      	push	{r7}
    3f1e:	b08a      	sub	sp, #40	; 0x28
    3f20:	0005      	movs	r5, r0
    3f22:	000e      	movs	r6, r1
    3f24:	0017      	movs	r7, r2
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    3f26:	0008      	movs	r0, r1
    3f28:	4ba7      	ldr	r3, [pc, #668]	; (41c8 <tc_init+0x2b0>)
    3f2a:	4798      	blx	r3
    3f2c:	4680      	mov	r8, r0
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC1,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3};
#else
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC4_GCLK_ID};
    3f2e:	4ca7      	ldr	r4, [pc, #668]	; (41cc <tc_init+0x2b4>)
    3f30:	0021      	movs	r1, r4
    3f32:	310c      	adds	r1, #12
    3f34:	2203      	movs	r2, #3
    3f36:	a809      	add	r0, sp, #36	; 0x24
    3f38:	4ba5      	ldr	r3, [pc, #660]	; (41d0 <tc_init+0x2b8>)
    3f3a:	4798      	blx	r3
	/* Array of PM APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    3f3c:	a903      	add	r1, sp, #12
    3f3e:	0023      	movs	r3, r4
    3f40:	3310      	adds	r3, #16
    3f42:	000a      	movs	r2, r1
    3f44:	cb13      	ldmia	r3!, {r0, r1, r4}
    3f46:	c213      	stmia	r2!, {r0, r1, r4}
    3f48:	cb13      	ldmia	r3!, {r0, r1, r4}
    3f4a:	c213      	stmia	r2!, {r0, r1, r4}
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    3f4c:	2300      	movs	r3, #0
    3f4e:	60ab      	str	r3, [r5, #8]
    3f50:	60eb      	str	r3, [r5, #12]
    3f52:	612b      	str	r3, [r5, #16]
    3f54:	616b      	str	r3, [r5, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    3f56:	762b      	strb	r3, [r5, #24]
	module_inst->enable_callback_mask       = 0x00;
    3f58:	766b      	strb	r3, [r5, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    3f5a:	4643      	mov	r3, r8
    3f5c:	009a      	lsls	r2, r3, #2
    3f5e:	4b9d      	ldr	r3, [pc, #628]	; (41d4 <tc_init+0x2bc>)
    3f60:	50d5      	str	r5, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    3f62:	602e      	str	r6, [r5, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    3f64:	2334      	movs	r3, #52	; 0x34
    3f66:	5cfb      	ldrb	r3, [r7, r3]
    3f68:	76ab      	strb	r3, [r5, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    3f6a:	78fb      	ldrb	r3, [r7, #3]
    3f6c:	2b08      	cmp	r3, #8
    3f6e:	d104      	bne.n	3f7a <tc_init+0x62>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3f70:	2017      	movs	r0, #23

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    3f72:	4642      	mov	r2, r8
    3f74:	07d2      	lsls	r2, r2, #31
    3f76:	d500      	bpl.n	3f7a <tc_init+0x62>
    3f78:	e122      	b.n	41c0 <tc_init+0x2a8>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    3f7a:	712b      	strb	r3, [r5, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    3f7c:	6833      	ldr	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    3f7e:	2005      	movs	r0, #5
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    3f80:	07db      	lsls	r3, r3, #31
    3f82:	d500      	bpl.n	3f86 <tc_init+0x6e>
    3f84:	e11c      	b.n	41c0 <tc_init+0x2a8>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    3f86:	7af3      	ldrb	r3, [r6, #11]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    3f88:	3017      	adds	r0, #23
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    3f8a:	079b      	lsls	r3, r3, #30
    3f8c:	d500      	bpl.n	3f90 <tc_init+0x78>
    3f8e:	e117      	b.n	41c0 <tc_init+0x2a8>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    3f90:	6833      	ldr	r3, [r6, #0]
    3f92:	079b      	lsls	r3, r3, #30
    3f94:	d500      	bpl.n	3f98 <tc_init+0x80>
    3f96:	e113      	b.n	41c0 <tc_init+0x2a8>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    3f98:	7c3b      	ldrb	r3, [r7, #16]
    3f9a:	2b00      	cmp	r3, #0
    3f9c:	d00a      	beq.n	3fb4 <tc_init+0x9c>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3f9e:	a902      	add	r1, sp, #8
    3fa0:	2301      	movs	r3, #1
    3fa2:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    3fa4:	2200      	movs	r2, #0
    3fa6:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    3fa8:	7e3a      	ldrb	r2, [r7, #24]
    3faa:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    3fac:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    3fae:	7d38      	ldrb	r0, [r7, #20]
    3fb0:	4b89      	ldr	r3, [pc, #548]	; (41d8 <tc_init+0x2c0>)
    3fb2:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    3fb4:	7f3b      	ldrb	r3, [r7, #28]
    3fb6:	2b00      	cmp	r3, #0
    3fb8:	d00b      	beq.n	3fd2 <tc_init+0xba>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3fba:	a902      	add	r1, sp, #8
    3fbc:	2301      	movs	r3, #1
    3fbe:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    3fc0:	2200      	movs	r2, #0
    3fc2:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    3fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3fc6:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    3fc8:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    3fca:	6a3b      	ldr	r3, [r7, #32]
    3fcc:	b2d8      	uxtb	r0, r3
    3fce:	4b82      	ldr	r3, [pc, #520]	; (41d8 <tc_init+0x2c0>)
    3fd0:	4798      	blx	r3
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the MCLK */
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    3fd2:	4643      	mov	r3, r8
    3fd4:	005a      	lsls	r2, r3, #1
    3fd6:	a903      	add	r1, sp, #12
    3fd8:	1c53      	adds	r3, r2, #1
    3fda:	009b      	lsls	r3, r3, #2
    3fdc:	5858      	ldr	r0, [r3, r1]
    3fde:	4643      	mov	r3, r8
    3fe0:	00db      	lsls	r3, r3, #3
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
    3fe2:	585b      	ldr	r3, [r3, r1]
    3fe4:	b2d9      	uxtb	r1, r3
    3fe6:	2904      	cmp	r1, #4
    3fe8:	d81b      	bhi.n	4022 <tc_init+0x10a>
    3fea:	008b      	lsls	r3, r1, #2
    3fec:	497b      	ldr	r1, [pc, #492]	; (41dc <tc_init+0x2c4>)
    3fee:	58cb      	ldr	r3, [r1, r3]
    3ff0:	469f      	mov	pc, r3
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    3ff2:	497b      	ldr	r1, [pc, #492]	; (41e0 <tc_init+0x2c8>)
    3ff4:	694b      	ldr	r3, [r1, #20]
    3ff6:	4318      	orrs	r0, r3
    3ff8:	6148      	str	r0, [r1, #20]
    3ffa:	e012      	b.n	4022 <tc_init+0x10a>
			break;

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
    3ffc:	4978      	ldr	r1, [pc, #480]	; (41e0 <tc_init+0x2c8>)
    3ffe:	698b      	ldr	r3, [r1, #24]
    4000:	4318      	orrs	r0, r3
    4002:	6188      	str	r0, [r1, #24]
    4004:	e00d      	b.n	4022 <tc_init+0x10a>
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    4006:	4976      	ldr	r1, [pc, #472]	; (41e0 <tc_init+0x2c8>)
    4008:	69cb      	ldr	r3, [r1, #28]
    400a:	4318      	orrs	r0, r3
    400c:	61c8      	str	r0, [r1, #28]
    400e:	e008      	b.n	4022 <tc_init+0x10a>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    4010:	4973      	ldr	r1, [pc, #460]	; (41e0 <tc_init+0x2c8>)
    4012:	6a0b      	ldr	r3, [r1, #32]
    4014:	4318      	orrs	r0, r3
    4016:	6208      	str	r0, [r1, #32]
    4018:	e003      	b.n	4022 <tc_init+0x10a>
			break;
		case SYSTEM_CLOCK_APB_APBE:
			MCLK->APBEMASK.reg |= mask;
    401a:	4971      	ldr	r1, [pc, #452]	; (41e0 <tc_init+0x2c8>)
    401c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    401e:	4318      	orrs	r0, r3
    4020:	6248      	str	r0, [r1, #36]	; 0x24
			inst_mclk_apbmask[2*instance+1]);

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    4022:	78fb      	ldrb	r3, [r7, #3]
    4024:	2b08      	cmp	r3, #8
    4026:	d129      	bne.n	407c <tc_init+0x164>
    4028:	4643      	mov	r3, r8
    402a:	3301      	adds	r3, #1
    402c:	2b02      	cmp	r3, #2
    402e:	dc25      	bgt.n	407c <tc_init+0x164>
	{
		/* Enable the user interface clock in the MCLK */
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    4030:	a903      	add	r1, sp, #12
    4032:	1cd3      	adds	r3, r2, #3
    4034:	009b      	lsls	r3, r3, #2
    4036:	5858      	ldr	r0, [r3, r1]
    4038:	1c93      	adds	r3, r2, #2
    403a:	009b      	lsls	r3, r3, #2
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
    403c:	585b      	ldr	r3, [r3, r1]
    403e:	b2da      	uxtb	r2, r3
    4040:	2a04      	cmp	r2, #4
    4042:	d81b      	bhi.n	407c <tc_init+0x164>
    4044:	0093      	lsls	r3, r2, #2
    4046:	4a67      	ldr	r2, [pc, #412]	; (41e4 <tc_init+0x2cc>)
    4048:	58d3      	ldr	r3, [r2, r3]
    404a:	469f      	mov	pc, r3
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    404c:	4a64      	ldr	r2, [pc, #400]	; (41e0 <tc_init+0x2c8>)
    404e:	6953      	ldr	r3, [r2, #20]
    4050:	4318      	orrs	r0, r3
    4052:	6150      	str	r0, [r2, #20]
    4054:	e012      	b.n	407c <tc_init+0x164>
			break;

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
    4056:	4a62      	ldr	r2, [pc, #392]	; (41e0 <tc_init+0x2c8>)
    4058:	6993      	ldr	r3, [r2, #24]
    405a:	4318      	orrs	r0, r3
    405c:	6190      	str	r0, [r2, #24]
    405e:	e00d      	b.n	407c <tc_init+0x164>
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    4060:	4a5f      	ldr	r2, [pc, #380]	; (41e0 <tc_init+0x2c8>)
    4062:	69d3      	ldr	r3, [r2, #28]
    4064:	4318      	orrs	r0, r3
    4066:	61d0      	str	r0, [r2, #28]
    4068:	e008      	b.n	407c <tc_init+0x164>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    406a:	4a5d      	ldr	r2, [pc, #372]	; (41e0 <tc_init+0x2c8>)
    406c:	6a13      	ldr	r3, [r2, #32]
    406e:	4318      	orrs	r0, r3
    4070:	6210      	str	r0, [r2, #32]
    4072:	e003      	b.n	407c <tc_init+0x164>
			break;
		case SYSTEM_CLOCK_APB_APBE:
			MCLK->APBEMASK.reg |= mask;
    4074:	4a5a      	ldr	r2, [pc, #360]	; (41e0 <tc_init+0x2c8>)
    4076:	6a53      	ldr	r3, [r2, #36]	; 0x24
    4078:	4318      	orrs	r0, r3
    407a:	6250      	str	r0, [r2, #36]	; 0x24
	}


	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    407c:	a901      	add	r1, sp, #4
    407e:	783b      	ldrb	r3, [r7, #0]
    4080:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    4082:	ab09      	add	r3, sp, #36	; 0x24
    4084:	4642      	mov	r2, r8
    4086:	5c9c      	ldrb	r4, [r3, r2]
    4088:	0020      	movs	r0, r4
    408a:	4b57      	ldr	r3, [pc, #348]	; (41e8 <tc_init+0x2d0>)
    408c:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    408e:	0020      	movs	r0, r4
    4090:	4b56      	ldr	r3, [pc, #344]	; (41ec <tc_init+0x2d4>)
    4092:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
    4094:	78fa      	ldrb	r2, [r7, #3]
    4096:	79fb      	ldrb	r3, [r7, #7]
    4098:	4313      	orrs	r3, r2
    409a:	88ba      	ldrh	r2, [r7, #4]
    409c:	4313      	orrs	r3, r2
			(uint32_t)config->counter_size |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    409e:	7a7a      	ldrb	r2, [r7, #9]
    40a0:	2a00      	cmp	r2, #0
    40a2:	d002      	beq.n	40aa <tc_init+0x192>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    40a4:	2280      	movs	r2, #128	; 0x80
    40a6:	0252      	lsls	r2, r2, #9
    40a8:	4313      	orrs	r3, r2
			(uint32_t)config->counter_size |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    40aa:	7aba      	ldrb	r2, [r7, #10]
    40ac:	2a00      	cmp	r2, #0
    40ae:	d002      	beq.n	40b6 <tc_init+0x19e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    40b0:	2280      	movs	r2, #128	; 0x80
    40b2:	0292      	lsls	r2, r2, #10
    40b4:	4313      	orrs	r3, r2
		}
	}

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_IO[i] == true) {
    40b6:	7afa      	ldrb	r2, [r7, #11]
    40b8:	2a00      	cmp	r2, #0
    40ba:	d002      	beq.n	40c2 <tc_init+0x1aa>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    40bc:	2280      	movs	r2, #128	; 0x80
    40be:	0352      	lsls	r2, r2, #13
    40c0:	4313      	orrs	r3, r2
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
		}
	}

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_IO[i] == true) {
    40c2:	7b3a      	ldrb	r2, [r7, #12]
    40c4:	2a00      	cmp	r2, #0
    40c6:	d002      	beq.n	40ce <tc_init+0x1b6>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    40c8:	2280      	movs	r2, #128	; 0x80
    40ca:	0392      	lsls	r2, r2, #14
    40cc:	4313      	orrs	r3, r2
		}
	}

	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    40ce:	7879      	ldrb	r1, [r7, #1]
    40d0:	0189      	lsls	r1, r1, #6
    40d2:	78ba      	ldrb	r2, [r7, #2]
    40d4:	01d2      	lsls	r2, r2, #7
    40d6:	4311      	orrs	r1, r2
    40d8:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    40da:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    40dc:	6913      	ldr	r3, [r2, #16]
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    40de:	2b00      	cmp	r3, #0
    40e0:	d1fc      	bne.n	40dc <tc_init+0x1c4>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    40e2:	6031      	str	r1, [r6, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    40e4:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    40e6:	6913      	ldr	r3, [r2, #16]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    40e8:	2b00      	cmp	r3, #0
    40ea:	d1fc      	bne.n	40e6 <tc_init+0x1ce>
		/* Wait for sync */
	}
	hw->COUNT8.WAVE.reg = config->wave_generation;
    40ec:	79bb      	ldrb	r3, [r7, #6]
    40ee:	7333      	strb	r3, [r6, #12]

	/* Set ctrlb register */
	if (config->oneshot) {
    40f0:	7b79      	ldrb	r1, [r7, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    40f2:	1e4b      	subs	r3, r1, #1
    40f4:	4199      	sbcs	r1, r3
    40f6:	0089      	lsls	r1, r1, #2
	}

	if (config->count_direction) {
    40f8:	7bbb      	ldrb	r3, [r7, #14]
    40fa:	2b00      	cmp	r3, #0
    40fc:	d001      	beq.n	4102 <tc_init+0x1ea>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    40fe:	2301      	movs	r3, #1
    4100:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4102:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    4104:	6913      	ldr	r3, [r2, #16]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    4106:	2b00      	cmp	r3, #0
    4108:	d1fc      	bne.n	4104 <tc_init+0x1ec>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    410a:	33ff      	adds	r3, #255	; 0xff
    410c:	7133      	strb	r3, [r6, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    410e:	2900      	cmp	r1, #0
    4110:	d004      	beq.n	411c <tc_init+0x204>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4112:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    4114:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
    4116:	2b00      	cmp	r3, #0
    4118:	d1fc      	bne.n	4114 <tc_init+0x1fc>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    411a:	7171      	strb	r1, [r6, #5]
	}

	/* Set drvvtrl register*/
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    411c:	7a3b      	ldrb	r3, [r7, #8]
    411e:	7373      	strb	r3, [r6, #13]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4120:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    4122:	6913      	ldr	r3, [r2, #16]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    4124:	2b00      	cmp	r3, #0
    4126:	d1fc      	bne.n	4122 <tc_init+0x20a>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    4128:	792b      	ldrb	r3, [r5, #4]
    412a:	2b04      	cmp	r3, #4
    412c:	d005      	beq.n	413a <tc_init+0x222>
    412e:	2b08      	cmp	r3, #8
    4130:	d033      	beq.n	419a <tc_init+0x282>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    4132:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    4134:	2b00      	cmp	r3, #0
    4136:	d143      	bne.n	41c0 <tc_init+0x2a8>
    4138:	e01c      	b.n	4174 <tc_init+0x25c>
    413a:	6913      	ldr	r3, [r2, #16]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    413c:	2b00      	cmp	r3, #0
    413e:	d1fc      	bne.n	413a <tc_init+0x222>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    4140:	3328      	adds	r3, #40	; 0x28
    4142:	5cfb      	ldrb	r3, [r7, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    4144:	7533      	strb	r3, [r6, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4146:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    4148:	6913      	ldr	r3, [r2, #16]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    414a:	2b00      	cmp	r3, #0
    414c:	d1fc      	bne.n	4148 <tc_init+0x230>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    414e:	3329      	adds	r3, #41	; 0x29
    4150:	5cfb      	ldrb	r3, [r7, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    4152:	76f3      	strb	r3, [r6, #27]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4154:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    4156:	6913      	ldr	r3, [r2, #16]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    4158:	2b00      	cmp	r3, #0
    415a:	d1fc      	bne.n	4156 <tc_init+0x23e>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    415c:	332a      	adds	r3, #42	; 0x2a
    415e:	5cfb      	ldrb	r3, [r7, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    4160:	7733      	strb	r3, [r6, #28]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4162:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    4164:	6913      	ldr	r3, [r2, #16]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    4166:	2b00      	cmp	r3, #0
    4168:	d1fc      	bne.n	4164 <tc_init+0x24c>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    416a:	332b      	adds	r3, #43	; 0x2b
    416c:	5cfb      	ldrb	r3, [r7, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    416e:	7773      	strb	r3, [r6, #29]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    4170:	2000      	movs	r0, #0
    4172:	e025      	b.n	41c0 <tc_init+0x2a8>
    4174:	6913      	ldr	r3, [r2, #16]

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    4176:	2b00      	cmp	r3, #0
    4178:	d1fc      	bne.n	4174 <tc_init+0x25c>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    417a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    417c:	82b3      	strh	r3, [r6, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    417e:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    4180:	6913      	ldr	r3, [r2, #16]

			while (tc_is_syncing(module_inst)) {
    4182:	2b00      	cmp	r3, #0
    4184:	d1fc      	bne.n	4180 <tc_init+0x268>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    4186:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    4188:	83b3      	strh	r3, [r6, #28]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    418a:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    418c:	6913      	ldr	r3, [r2, #16]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    418e:	2b00      	cmp	r3, #0
    4190:	d1fc      	bne.n	418c <tc_init+0x274>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    4192:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    4194:	83f3      	strh	r3, [r6, #30]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    4196:	2000      	movs	r0, #0
    4198:	e012      	b.n	41c0 <tc_init+0x2a8>
    419a:	6913      	ldr	r3, [r2, #16]

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    419c:	2b00      	cmp	r3, #0
    419e:	d1fc      	bne.n	419a <tc_init+0x282>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    41a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    41a2:	6173      	str	r3, [r6, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    41a4:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    41a6:	6913      	ldr	r3, [r2, #16]

			while (tc_is_syncing(module_inst)) {
    41a8:	2b00      	cmp	r3, #0
    41aa:	d1fc      	bne.n	41a6 <tc_init+0x28e>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    41ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    41ae:	61f3      	str	r3, [r6, #28]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    41b0:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    41b2:	6913      	ldr	r3, [r2, #16]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    41b4:	2b00      	cmp	r3, #0
    41b6:	d1fc      	bne.n	41b2 <tc_init+0x29a>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    41b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    41ba:	6233      	str	r3, [r6, #32]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    41bc:	2000      	movs	r0, #0
    41be:	e7ff      	b.n	41c0 <tc_init+0x2a8>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    41c0:	b00a      	add	sp, #40	; 0x28
    41c2:	bc04      	pop	{r2}
    41c4:	4690      	mov	r8, r2
    41c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    41c8:	00003ee1 	.word	0x00003ee1
    41cc:	00006058 	.word	0x00006058
    41d0:	00005611 	.word	0x00005611
    41d4:	20000664 	.word	0x20000664
    41d8:	00003df5 	.word	0x00003df5
    41dc:	00006030 	.word	0x00006030
    41e0:	40000400 	.word	0x40000400
    41e4:	00006044 	.word	0x00006044
    41e8:	00003cf9 	.word	0x00003cf9
    41ec:	00003c89 	.word	0x00003c89

000041f0 <tc_set_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance*/
	Tc *const tc_module = module_inst->hw;
    41f0:	6802      	ldr	r2, [r0, #0]
    41f2:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    41f4:	2b00      	cmp	r3, #0
    41f6:	d1fc      	bne.n	41f2 <tc_set_count_value+0x2>
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
    41f8:	7903      	ldrb	r3, [r0, #4]
    41fa:	2b04      	cmp	r3, #4
    41fc:	d005      	beq.n	420a <tc_set_count_value+0x1a>
    41fe:	2b08      	cmp	r3, #8
    4200:	d00b      	beq.n	421a <tc_set_count_value+0x2a>
		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
			return STATUS_OK;

		default:
			return STATUS_ERR_INVALID_ARG;
    4202:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
    4204:	2b00      	cmp	r3, #0
    4206:	d10b      	bne.n	4220 <tc_set_count_value+0x30>
    4208:	e003      	b.n	4212 <tc_set_count_value+0x22>
		case TC_COUNTER_SIZE_8BIT:
			tc_module->COUNT8.COUNT.reg  = (uint8_t)count;
    420a:	b2c9      	uxtb	r1, r1
    420c:	7511      	strb	r1, [r2, #20]
			return STATUS_OK;
    420e:	2000      	movs	r0, #0
    4210:	e006      	b.n	4220 <tc_set_count_value+0x30>

		case TC_COUNTER_SIZE_16BIT:
			tc_module->COUNT16.COUNT.reg = (uint16_t)count;
    4212:	b289      	uxth	r1, r1
    4214:	8291      	strh	r1, [r2, #20]
			return STATUS_OK;
    4216:	2000      	movs	r0, #0
    4218:	e002      	b.n	4220 <tc_set_count_value+0x30>

		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
    421a:	6151      	str	r1, [r2, #20]
			return STATUS_OK;
    421c:	2000      	movs	r0, #0
    421e:	e7ff      	b.n	4220 <tc_set_count_value+0x30>

		default:
			return STATUS_ERR_INVALID_ARG;
	}
}
    4220:	4770      	bx	lr
    4222:	46c0      	nop			; (mov r8, r8)

00004224 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4224:	6802      	ldr	r2, [r0, #0]

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    4226:	6913      	ldr	r3, [r2, #16]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    4228:	2b00      	cmp	r3, #0
    422a:	d1fc      	bne.n	4226 <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    422c:	7113      	strb	r3, [r2, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    422e:	6801      	ldr	r1, [r0, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    4230:	690b      	ldr	r3, [r1, #16]
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;

	while (tc_is_syncing(module_inst)) {
    4232:	2b00      	cmp	r3, #0
    4234:	d1fc      	bne.n	4230 <tc_get_count_value+0xc>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_READSYNC_Val);
    4236:	3380      	adds	r3, #128	; 0x80
    4238:	7153      	strb	r3, [r2, #5]

	/* Read synchronization */
	tc_sync_read_count(module_inst);
	
	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    423a:	6802      	ldr	r2, [r0, #0]

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    423c:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    423e:	2b00      	cmp	r3, #0
    4240:	d1fc      	bne.n	423c <tc_get_count_value+0x18>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    4242:	7901      	ldrb	r1, [r0, #4]
    4244:	2904      	cmp	r1, #4
    4246:	d004      	beq.n	4252 <tc_get_count_value+0x2e>
    4248:	2908      	cmp	r1, #8
    424a:	d008      	beq.n	425e <tc_get_count_value+0x3a>
    424c:	2900      	cmp	r1, #0
    424e:	d107      	bne.n	4260 <tc_get_count_value+0x3c>
    4250:	e002      	b.n	4258 <tc_get_count_value+0x34>
		case TC_COUNTER_SIZE_8BIT:
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    4252:	7d13      	ldrb	r3, [r2, #20]
    4254:	b2db      	uxtb	r3, r3
    4256:	e003      	b.n	4260 <tc_get_count_value+0x3c>

		case TC_COUNTER_SIZE_16BIT:
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    4258:	8a93      	ldrh	r3, [r2, #20]
    425a:	b29b      	uxth	r3, r3
    425c:	e000      	b.n	4260 <tc_get_count_value+0x3c>

		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
    425e:	6953      	ldr	r3, [r2, #20]
	}

	Assert(false);
	return 0;
}
    4260:	0018      	movs	r0, r3
    4262:	4770      	bx	lr

00004264 <tc_reset>:
	/* Sanity check arguments  */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4264:	6803      	ldr	r3, [r0, #0]

	if (tc_module->STATUS.reg & TC_STATUS_SLAVE) {
    4266:	7ad9      	ldrb	r1, [r3, #11]
		return STATUS_ERR_UNSUPPORTED_DEV;
    4268:	2215      	movs	r2, #21
	Assert(module_inst->hw);

	/* Get a pointer to the module hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	if (tc_module->STATUS.reg & TC_STATUS_SLAVE) {
    426a:	0789      	lsls	r1, r1, #30
    426c:	d415      	bmi.n	429a <tc_reset+0x36>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}

	/* Disable this module if it is running */
	if (tc_module->CTRLA.reg & TC_CTRLA_ENABLE) {
    426e:	681a      	ldr	r2, [r3, #0]
    4270:	0792      	lsls	r2, r2, #30
    4272:	d50d      	bpl.n	4290 <tc_reset+0x2c>
    4274:	691a      	ldr	r2, [r3, #16]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    4276:	2a00      	cmp	r2, #0
    4278:	d1fc      	bne.n	4274 <tc_reset+0x10>
		/* Wait for sync */
	}

	/* Disbale interrupt */
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    427a:	3233      	adds	r2, #51	; 0x33
    427c:	721a      	strb	r2, [r3, #8]
	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    427e:	729a      	strb	r2, [r3, #10]

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    4280:	681a      	ldr	r2, [r3, #0]
    4282:	2102      	movs	r1, #2
    4284:	438a      	bics	r2, r1
    4286:	601a      	str	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4288:	6801      	ldr	r1, [r0, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    428a:	690a      	ldr	r2, [r1, #16]
		tc_disable(module_inst);
		while (tc_is_syncing(module_inst)) {
    428c:	2a00      	cmp	r2, #0
    428e:	d1fc      	bne.n	428a <tc_reset+0x26>
			/* wait while module is disabling */
		}
	}

	/* Reset this TC module */
	tc_module->CTRLA.reg  |= TC_CTRLA_SWRST;
    4290:	6819      	ldr	r1, [r3, #0]
    4292:	2201      	movs	r2, #1
    4294:	430a      	orrs	r2, r1
    4296:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    4298:	2200      	movs	r2, #0
}
    429a:	0010      	movs	r0, r2
    429c:	4770      	bx	lr
    429e:	46c0      	nop			; (mov r8, r8)

000042a0 <Dummy_Handler>:
void Dummy_Handler(void)
{
	//while(1) {
		//phantomISR = __get_IPSR();
	//}
}
    42a0:	4770      	bx	lr
    42a2:	46c0      	nop			; (mov r8, r8)

000042a4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    42a4:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    42a6:	4b1d      	ldr	r3, [pc, #116]	; (431c <Reset_Handler+0x78>)
    42a8:	4a1d      	ldr	r2, [pc, #116]	; (4320 <Reset_Handler+0x7c>)
    42aa:	429a      	cmp	r2, r3
    42ac:	d003      	beq.n	42b6 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    42ae:	4b1d      	ldr	r3, [pc, #116]	; (4324 <Reset_Handler+0x80>)
    42b0:	4a1a      	ldr	r2, [pc, #104]	; (431c <Reset_Handler+0x78>)
    42b2:	429a      	cmp	r2, r3
    42b4:	d304      	bcc.n	42c0 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    42b6:	4b1c      	ldr	r3, [pc, #112]	; (4328 <Reset_Handler+0x84>)
    42b8:	4a1c      	ldr	r2, [pc, #112]	; (432c <Reset_Handler+0x88>)
    42ba:	429a      	cmp	r2, r3
    42bc:	d310      	bcc.n	42e0 <Reset_Handler+0x3c>
    42be:	e01e      	b.n	42fe <Reset_Handler+0x5a>
    42c0:	4a1b      	ldr	r2, [pc, #108]	; (4330 <Reset_Handler+0x8c>)
    42c2:	4b18      	ldr	r3, [pc, #96]	; (4324 <Reset_Handler+0x80>)
    42c4:	3303      	adds	r3, #3
    42c6:	1a9b      	subs	r3, r3, r2
    42c8:	089b      	lsrs	r3, r3, #2
    42ca:	3301      	adds	r3, #1
    42cc:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    42ce:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    42d0:	4812      	ldr	r0, [pc, #72]	; (431c <Reset_Handler+0x78>)
    42d2:	4913      	ldr	r1, [pc, #76]	; (4320 <Reset_Handler+0x7c>)
    42d4:	588c      	ldr	r4, [r1, r2]
    42d6:	5084      	str	r4, [r0, r2]
    42d8:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    42da:	429a      	cmp	r2, r3
    42dc:	d1fa      	bne.n	42d4 <Reset_Handler+0x30>
    42de:	e7ea      	b.n	42b6 <Reset_Handler+0x12>
    42e0:	4a14      	ldr	r2, [pc, #80]	; (4334 <Reset_Handler+0x90>)
    42e2:	4b11      	ldr	r3, [pc, #68]	; (4328 <Reset_Handler+0x84>)
    42e4:	3303      	adds	r3, #3
    42e6:	1a9b      	subs	r3, r3, r2
    42e8:	089b      	lsrs	r3, r3, #2
    42ea:	3301      	adds	r3, #1
    42ec:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    42ee:	2200      	movs	r2, #0
                *pDest++ = 0;
    42f0:	480e      	ldr	r0, [pc, #56]	; (432c <Reset_Handler+0x88>)
    42f2:	2100      	movs	r1, #0
    42f4:	1814      	adds	r4, r2, r0
    42f6:	6021      	str	r1, [r4, #0]
    42f8:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    42fa:	429a      	cmp	r2, r3
    42fc:	d1fa      	bne.n	42f4 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    42fe:	4a0e      	ldr	r2, [pc, #56]	; (4338 <Reset_Handler+0x94>)
    4300:	21ff      	movs	r1, #255	; 0xff
    4302:	4b0e      	ldr	r3, [pc, #56]	; (433c <Reset_Handler+0x98>)
    4304:	438b      	bics	r3, r1
    4306:	6093      	str	r3, [r2, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    4308:	4a0d      	ldr	r2, [pc, #52]	; (4340 <Reset_Handler+0x9c>)
    430a:	6851      	ldr	r1, [r2, #4]
    430c:	2380      	movs	r3, #128	; 0x80
    430e:	430b      	orrs	r3, r1
    4310:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    4312:	4b0c      	ldr	r3, [pc, #48]	; (4344 <Reset_Handler+0xa0>)
    4314:	4798      	blx	r3

        /* Branch to main function */
        main();
    4316:	4b0c      	ldr	r3, [pc, #48]	; (4348 <Reset_Handler+0xa4>)
    4318:	4798      	blx	r3
    431a:	e7fe      	b.n	431a <Reset_Handler+0x76>
    431c:	20000000 	.word	0x20000000
    4320:	000061c8 	.word	0x000061c8
    4324:	20000090 	.word	0x20000090
    4328:	200006d0 	.word	0x200006d0
    432c:	20000090 	.word	0x20000090
    4330:	20000004 	.word	0x20000004
    4334:	20000094 	.word	0x20000094
    4338:	e000ed00 	.word	0xe000ed00
    433c:	00000000 	.word	0x00000000
    4340:	41004000 	.word	0x41004000
    4344:	000055c5 	.word	0x000055c5
    4348:	000050f5 	.word	0x000050f5

0000434c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    434c:	b5f0      	push	{r4, r5, r6, r7, lr}
    434e:	4647      	mov	r7, r8
    4350:	b480      	push	{r7}
    4352:	000c      	movs	r4, r1
    4354:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    4356:	2800      	cmp	r0, #0
    4358:	d10d      	bne.n	4376 <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
    435a:	2a00      	cmp	r2, #0
    435c:	dd0e      	ble.n	437c <_read+0x30>
    435e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    4360:	4e08      	ldr	r6, [pc, #32]	; (4384 <_read+0x38>)
    4362:	4d09      	ldr	r5, [pc, #36]	; (4388 <_read+0x3c>)
    4364:	6830      	ldr	r0, [r6, #0]
    4366:	0021      	movs	r1, r4
    4368:	682b      	ldr	r3, [r5, #0]
    436a:	4798      	blx	r3
		ptr++;
    436c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    436e:	42a7      	cmp	r7, r4
    4370:	d1f8      	bne.n	4364 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
    4372:	4640      	mov	r0, r8
    4374:	e003      	b.n	437e <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    4376:	2001      	movs	r0, #1
    4378:	4240      	negs	r0, r0
    437a:	e000      	b.n	437e <_read+0x32>
	}

	for (; len > 0; --len) {
    437c:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
    437e:	bc04      	pop	{r2}
    4380:	4690      	mov	r8, r2
    4382:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4384:	20000678 	.word	0x20000678
    4388:	20000670 	.word	0x20000670

0000438c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    438c:	b5f0      	push	{r4, r5, r6, r7, lr}
    438e:	4647      	mov	r7, r8
    4390:	b480      	push	{r7}
    4392:	000e      	movs	r6, r1
    4394:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    4396:	3801      	subs	r0, #1
    4398:	2802      	cmp	r0, #2
    439a:	d811      	bhi.n	43c0 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
    439c:	2a00      	cmp	r2, #0
    439e:	d012      	beq.n	43c6 <_write+0x3a>
    43a0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    43a2:	4b0c      	ldr	r3, [pc, #48]	; (43d4 <_write+0x48>)
    43a4:	4698      	mov	r8, r3
    43a6:	4f0c      	ldr	r7, [pc, #48]	; (43d8 <_write+0x4c>)
    43a8:	4643      	mov	r3, r8
    43aa:	6818      	ldr	r0, [r3, #0]
    43ac:	5d31      	ldrb	r1, [r6, r4]
    43ae:	683b      	ldr	r3, [r7, #0]
    43b0:	4798      	blx	r3
    43b2:	2800      	cmp	r0, #0
    43b4:	db09      	blt.n	43ca <_write+0x3e>
			return -1;
		}
		++nChars;
    43b6:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    43b8:	42a5      	cmp	r5, r4
    43ba:	d1f5      	bne.n	43a8 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
    43bc:	0020      	movs	r0, r4
    43be:	e006      	b.n	43ce <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    43c0:	2001      	movs	r0, #1
    43c2:	4240      	negs	r0, r0
    43c4:	e003      	b.n	43ce <_write+0x42>
	}

	for (; len != 0; --len) {
    43c6:	2000      	movs	r0, #0
    43c8:	e001      	b.n	43ce <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    43ca:	2001      	movs	r0, #1
    43cc:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
    43ce:	bc04      	pop	{r2}
    43d0:	4690      	mov	r8, r2
    43d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    43d4:	20000678 	.word	0x20000678
    43d8:	20000674 	.word	0x20000674

000043dc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    43dc:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    43de:	4a06      	ldr	r2, [pc, #24]	; (43f8 <_sbrk+0x1c>)
    43e0:	6812      	ldr	r2, [r2, #0]
    43e2:	2a00      	cmp	r2, #0
    43e4:	d102      	bne.n	43ec <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    43e6:	4905      	ldr	r1, [pc, #20]	; (43fc <_sbrk+0x20>)
    43e8:	4a03      	ldr	r2, [pc, #12]	; (43f8 <_sbrk+0x1c>)
    43ea:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    43ec:	4a02      	ldr	r2, [pc, #8]	; (43f8 <_sbrk+0x1c>)
    43ee:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    43f0:	18c3      	adds	r3, r0, r3
    43f2:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    43f4:	4770      	bx	lr
    43f6:	46c0      	nop			; (mov r8, r8)
    43f8:	200001a8 	.word	0x200001a8
    43fc:	200026d0 	.word	0x200026d0

00004400 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    4400:	2001      	movs	r0, #1
    4402:	4240      	negs	r0, r0
    4404:	4770      	bx	lr
    4406:	46c0      	nop			; (mov r8, r8)

00004408 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    4408:	2380      	movs	r3, #128	; 0x80
    440a:	019b      	lsls	r3, r3, #6
    440c:	604b      	str	r3, [r1, #4]

	return 0;
}
    440e:	2000      	movs	r0, #0
    4410:	4770      	bx	lr
    4412:	46c0      	nop			; (mov r8, r8)

00004414 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    4414:	2000      	movs	r0, #0
    4416:	4770      	bx	lr

00004418 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    4418:	b570      	push	{r4, r5, r6, lr}
    441a:	b082      	sub	sp, #8
    441c:	0005      	movs	r5, r0
    441e:	000e      	movs	r6, r1
	uint16_t temp = 0;
    4420:	2200      	movs	r2, #0
    4422:	466b      	mov	r3, sp
    4424:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    4426:	4c06      	ldr	r4, [pc, #24]	; (4440 <usart_serial_getchar+0x28>)
    4428:	466b      	mov	r3, sp
    442a:	1d99      	adds	r1, r3, #6
    442c:	0028      	movs	r0, r5
    442e:	47a0      	blx	r4
    4430:	2800      	cmp	r0, #0
    4432:	d1f9      	bne.n	4428 <usart_serial_getchar+0x10>

	*c = temp;
    4434:	466b      	mov	r3, sp
    4436:	3306      	adds	r3, #6
    4438:	881b      	ldrh	r3, [r3, #0]
    443a:	7033      	strb	r3, [r6, #0]
}
    443c:	b002      	add	sp, #8
    443e:	bd70      	pop	{r4, r5, r6, pc}
    4440:	000033c5 	.word	0x000033c5

00004444 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    4444:	b570      	push	{r4, r5, r6, lr}
    4446:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    4448:	b28c      	uxth	r4, r1
    444a:	4e03      	ldr	r6, [pc, #12]	; (4458 <usart_serial_putchar+0x14>)
    444c:	0021      	movs	r1, r4
    444e:	0028      	movs	r0, r5
    4450:	47b0      	blx	r6
    4452:	2800      	cmp	r0, #0
    4454:	d1fa      	bne.n	444c <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    4456:	bd70      	pop	{r4, r5, r6, pc}
    4458:	00003399 	.word	0x00003399

0000445c <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    445c:	b510      	push	{r4, lr}
    445e:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    4460:	466b      	mov	r3, sp
    4462:	1ddc      	adds	r4, r3, #7
    4464:	2201      	movs	r2, #1
    4466:	0021      	movs	r1, r4
    4468:	480f      	ldr	r0, [pc, #60]	; (44a8 <USART_HOST_ISR_VECT+0x4c>)
    446a:	4b10      	ldr	r3, [pc, #64]	; (44ac <USART_HOST_ISR_VECT+0x50>)
    446c:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    446e:	b672      	cpsid	i
    4470:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    4474:	2200      	movs	r2, #0
    4476:	4b0e      	ldr	r3, [pc, #56]	; (44b0 <USART_HOST_ISR_VECT+0x54>)
    4478:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    447a:	4b0e      	ldr	r3, [pc, #56]	; (44b4 <USART_HOST_ISR_VECT+0x58>)
    447c:	781b      	ldrb	r3, [r3, #0]
    447e:	7821      	ldrb	r1, [r4, #0]
    4480:	4a0d      	ldr	r2, [pc, #52]	; (44b8 <USART_HOST_ISR_VECT+0x5c>)
    4482:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    4484:	2b9b      	cmp	r3, #155	; 0x9b
    4486:	d103      	bne.n	4490 <USART_HOST_ISR_VECT+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
    4488:	2200      	movs	r2, #0
    448a:	4b0a      	ldr	r3, [pc, #40]	; (44b4 <USART_HOST_ISR_VECT+0x58>)
    448c:	701a      	strb	r2, [r3, #0]
    448e:	e002      	b.n	4496 <USART_HOST_ISR_VECT+0x3a>
	} else {
		serial_rx_buf_tail++;
    4490:	3301      	adds	r3, #1
    4492:	4a08      	ldr	r2, [pc, #32]	; (44b4 <USART_HOST_ISR_VECT+0x58>)
    4494:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    4496:	2201      	movs	r2, #1
    4498:	4b05      	ldr	r3, [pc, #20]	; (44b0 <USART_HOST_ISR_VECT+0x54>)
    449a:	701a      	strb	r2, [r3, #0]
    449c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    44a0:	b662      	cpsie	i
}
    44a2:	b002      	add	sp, #8
    44a4:	bd10      	pop	{r4, pc}
    44a6:	46c0      	nop			; (mov r8, r8)
    44a8:	20000248 	.word	0x20000248
    44ac:	000034ed 	.word	0x000034ed
    44b0:	20000028 	.word	0x20000028
    44b4:	2000027c 	.word	0x2000027c
    44b8:	200001ac 	.word	0x200001ac

000044bc <sio2host_init>:
static uint8_t serial_rx_count;

/* === IMPLEMENTATION ====================================================== */

void sio2host_init(void)
{
    44bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    44be:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    44c0:	2380      	movs	r3, #128	; 0x80
    44c2:	05db      	lsls	r3, r3, #23
    44c4:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    44c6:	2300      	movs	r3, #0
    44c8:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    44ca:	22ff      	movs	r2, #255	; 0xff
    44cc:	4669      	mov	r1, sp
    44ce:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    44d0:	2200      	movs	r2, #0
    44d2:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    44d4:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    44d6:	2196      	movs	r1, #150	; 0x96
    44d8:	0189      	lsls	r1, r1, #6
    44da:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    44dc:	2401      	movs	r4, #1
    44de:	2124      	movs	r1, #36	; 0x24
    44e0:	4668      	mov	r0, sp
    44e2:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    44e4:	3101      	adds	r1, #1
    44e6:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    44e8:	3101      	adds	r1, #1
    44ea:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    44ec:	3101      	adds	r1, #1
    44ee:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    44f0:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    44f2:	3105      	adds	r1, #5
    44f4:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    44f6:	3101      	adds	r1, #1
    44f8:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    44fa:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    44fc:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    44fe:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    4500:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    4502:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    4504:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    4506:	2313      	movs	r3, #19
    4508:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    450a:	7742      	strb	r2, [r0, #29]
#if SAMD || SAMR21 || SAML21 || SAMR30
	struct usart_config host_uart_config;
	/* Configure USART for unit test output */
	usart_get_config_defaults(&host_uart_config);
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    450c:	2380      	movs	r3, #128	; 0x80
    450e:	035b      	lsls	r3, r3, #13
    4510:	9303      	str	r3, [sp, #12]

	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    4512:	4b2e      	ldr	r3, [pc, #184]	; (45cc <sio2host_init+0x110>)
    4514:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    4516:	4b2e      	ldr	r3, [pc, #184]	; (45d0 <sio2host_init+0x114>)
    4518:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    451a:	2301      	movs	r3, #1
    451c:	425b      	negs	r3, r3
    451e:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    4520:	930f      	str	r3, [sp, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    4522:	4d2c      	ldr	r5, [pc, #176]	; (45d4 <sio2host_init+0x118>)
    4524:	4b2c      	ldr	r3, [pc, #176]	; (45d8 <sio2host_init+0x11c>)
    4526:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    4528:	4a2c      	ldr	r2, [pc, #176]	; (45dc <sio2host_init+0x120>)
    452a:	4b2d      	ldr	r3, [pc, #180]	; (45e0 <sio2host_init+0x124>)
    452c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    452e:	4a2d      	ldr	r2, [pc, #180]	; (45e4 <sio2host_init+0x128>)
    4530:	4b2d      	ldr	r3, [pc, #180]	; (45e8 <sio2host_init+0x12c>)
    4532:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    4534:	466a      	mov	r2, sp
    4536:	2184      	movs	r1, #132	; 0x84
    4538:	05c9      	lsls	r1, r1, #23
    453a:	0028      	movs	r0, r5
    453c:	4b2b      	ldr	r3, [pc, #172]	; (45ec <sio2host_init+0x130>)
    453e:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    4540:	4f2b      	ldr	r7, [pc, #172]	; (45f0 <sio2host_init+0x134>)
    4542:	683b      	ldr	r3, [r7, #0]
    4544:	6898      	ldr	r0, [r3, #8]
    4546:	2100      	movs	r1, #0
    4548:	4e2a      	ldr	r6, [pc, #168]	; (45f4 <sio2host_init+0x138>)
    454a:	47b0      	blx	r6
	setbuf(stdin, NULL);
    454c:	683b      	ldr	r3, [r7, #0]
    454e:	6858      	ldr	r0, [r3, #4]
    4550:	2100      	movs	r1, #0
    4552:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4554:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    4556:	0030      	movs	r0, r6
    4558:	4b27      	ldr	r3, [pc, #156]	; (45f8 <sio2host_init+0x13c>)
    455a:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    455c:	231f      	movs	r3, #31
    455e:	4018      	ands	r0, r3
    4560:	4084      	lsls	r4, r0
    4562:	4b26      	ldr	r3, [pc, #152]	; (45fc <sio2host_init+0x140>)
    4564:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    4566:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4568:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    456a:	2b00      	cmp	r3, #0
    456c:	d1fc      	bne.n	4568 <sio2host_init+0xac>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    456e:	6832      	ldr	r2, [r6, #0]
    4570:	3302      	adds	r3, #2
    4572:	4313      	orrs	r3, r2
    4574:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4576:	4b17      	ldr	r3, [pc, #92]	; (45d4 <sio2host_init+0x118>)
    4578:	681b      	ldr	r3, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    457a:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    457c:	2a00      	cmp	r2, #0
    457e:	d1fc      	bne.n	457a <sio2host_init+0xbe>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    4580:	685a      	ldr	r2, [r3, #4]
    4582:	2180      	movs	r1, #128	; 0x80
    4584:	0249      	lsls	r1, r1, #9
    4586:	430a      	orrs	r2, r1
    4588:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    458a:	2101      	movs	r1, #1
    458c:	4a11      	ldr	r2, [pc, #68]	; (45d4 <sio2host_init+0x118>)
    458e:	71d1      	strb	r1, [r2, #7]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4590:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    4592:	2a00      	cmp	r2, #0
    4594:	d1fc      	bne.n	4590 <sio2host_init+0xd4>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4596:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    4598:	2a00      	cmp	r2, #0
    459a:	d1fc      	bne.n	4596 <sio2host_init+0xda>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Enable RX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    459c:	685a      	ldr	r2, [r3, #4]
    459e:	2180      	movs	r1, #128	; 0x80
    45a0:	0289      	lsls	r1, r1, #10
    45a2:	430a      	orrs	r2, r1
    45a4:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    45a6:	2101      	movs	r1, #1
    45a8:	4a0a      	ldr	r2, [pc, #40]	; (45d4 <sio2host_init+0x118>)
    45aa:	7191      	strb	r1, [r2, #6]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    45ac:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    45ae:	2a00      	cmp	r2, #0
    45b0:	d1fc      	bne.n	45ac <sio2host_init+0xf0>
	usart_enable_transceiver(&host_uart_module, USART_TRANSCEIVER_TX);
	usart_enable_transceiver(&host_uart_module, USART_TRANSCEIVER_RX);
#else
	stdio_serial_init(USART_HOST, &usart_serial_options);
#endif
	USART_HOST_RX_ISR_ENABLE();
    45b2:	4913      	ldr	r1, [pc, #76]	; (4600 <sio2host_init+0x144>)
    45b4:	2000      	movs	r0, #0
    45b6:	4b13      	ldr	r3, [pc, #76]	; (4604 <sio2host_init+0x148>)
    45b8:	4798      	blx	r3
    45ba:	2204      	movs	r2, #4
    45bc:	2384      	movs	r3, #132	; 0x84
    45be:	05db      	lsls	r3, r3, #23
    45c0:	759a      	strb	r2, [r3, #22]
    45c2:	32fc      	adds	r2, #252	; 0xfc
    45c4:	4b0d      	ldr	r3, [pc, #52]	; (45fc <sio2host_init+0x140>)
    45c6:	601a      	str	r2, [r3, #0]
}
    45c8:	b011      	add	sp, #68	; 0x44
    45ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    45cc:	00040003 	.word	0x00040003
    45d0:	00050003 	.word	0x00050003
    45d4:	20000248 	.word	0x20000248
    45d8:	20000678 	.word	0x20000678
    45dc:	00004445 	.word	0x00004445
    45e0:	20000674 	.word	0x20000674
    45e4:	00004419 	.word	0x00004419
    45e8:	20000670 	.word	0x20000670
    45ec:	00003035 	.word	0x00003035
    45f0:	2000008c 	.word	0x2000008c
    45f4:	00005633 	.word	0x00005633
    45f8:	00002bf1 	.word	0x00002bf1
    45fc:	e000e100 	.word	0xe000e100
    4600:	0000445d 	.word	0x0000445d
    4604:	00002bb5 	.word	0x00002bb5

00004608 <sio2host_tx>:

uint8_t sio2host_tx(uint8_t *data, uint8_t length)
{
    4608:	b5f0      	push	{r4, r5, r6, r7, lr}
    460a:	b083      	sub	sp, #12
    460c:	0006      	movs	r6, r0
    460e:	9101      	str	r1, [sp, #4]
static inline enum status_code usart_serial_write_packet(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
	return usart_write_buffer_wait(module, tx_data, length);
    4610:	466b      	mov	r3, sp
    4612:	889d      	ldrh	r5, [r3, #4]
    4614:	4c05      	ldr	r4, [pc, #20]	; (462c <sio2host_tx+0x24>)
    4616:	4f06      	ldr	r7, [pc, #24]	; (4630 <sio2host_tx+0x28>)
    4618:	002a      	movs	r2, r5
    461a:	0031      	movs	r1, r6
    461c:	0020      	movs	r0, r4
    461e:	47b8      	blx	r7
#else
	    status = usart_serial_write_packet(USART_HOST,
				(const uint8_t *)data,
				length);
#endif
	} while (status != STATUS_OK);
    4620:	2800      	cmp	r0, #0
    4622:	d1f9      	bne.n	4618 <sio2host_tx+0x10>
	return length;
}
    4624:	9801      	ldr	r0, [sp, #4]
    4626:	b003      	add	sp, #12
    4628:	bdf0      	pop	{r4, r5, r6, r7, pc}
    462a:	46c0      	nop			; (mov r8, r8)
    462c:	20000248 	.word	0x20000248
    4630:	00003435 	.word	0x00003435

00004634 <sio2host_putchar>:
	}
	return c;
}

void sio2host_putchar(uint8_t ch)
{
    4634:	b500      	push	{lr}
    4636:	b083      	sub	sp, #12
    4638:	466b      	mov	r3, sp
    463a:	71d8      	strb	r0, [r3, #7]
    463c:	3307      	adds	r3, #7
	sio2host_tx(&ch, 1);
    463e:	2101      	movs	r1, #1
    4640:	0018      	movs	r0, r3
    4642:	4b02      	ldr	r3, [pc, #8]	; (464c <sio2host_putchar+0x18>)
    4644:	4798      	blx	r3
}
    4646:	b003      	add	sp, #12
    4648:	bd00      	pop	{pc}
    464a:	46c0      	nop			; (mov r8, r8)
    464c:	00004609 	.word	0x00004609

00004650 <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    4650:	b510      	push	{r4, lr}
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    4652:	2201      	movs	r2, #1
    4654:	4b02      	ldr	r3, [pc, #8]	; (4660 <AT86RFX_ISR+0x10>)
    4656:	615a      	str	r2, [r3, #20]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
	PHY_PacketReceieved();
    4658:	4b02      	ldr	r3, [pc, #8]	; (4664 <AT86RFX_ISR+0x14>)
    465a:	4798      	blx	r3

}
    465c:	bd10      	pop	{r4, pc}
    465e:	46c0      	nop			; (mov r8, r8)
    4660:	40002400 	.word	0x40002400
    4664:	000010e5 	.word	0x000010e5

00004668 <trx_spi_init>:

void trx_spi_init(void)
{
    4668:	b530      	push	{r4, r5, lr}
    466a:	b085      	sub	sp, #20
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = 10;
	config->address_enabled = false;
    466c:	4a34      	ldr	r2, [pc, #208]	; (4740 <trx_spi_init+0xd8>)
    466e:	2300      	movs	r3, #0
    4670:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    4672:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    4674:	213f      	movs	r1, #63	; 0x3f
    4676:	7011      	strb	r1, [r2, #0]
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    4678:	4c32      	ldr	r4, [pc, #200]	; (4744 <trx_spi_init+0xdc>)
    467a:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    467c:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    467e:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    4680:	2201      	movs	r2, #1
    4682:	4669      	mov	r1, sp
    4684:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    4686:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    4688:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    468a:	203f      	movs	r0, #63	; 0x3f
    468c:	4b2e      	ldr	r3, [pc, #184]	; (4748 <trx_spi_init+0xe0>)
    468e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    4690:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    4692:	09da      	lsrs	r2, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    4694:	2100      	movs	r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    4696:	2a00      	cmp	r2, #0
    4698:	d104      	bne.n	46a4 <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    469a:	0959      	lsrs	r1, r3, #5
    469c:	01c9      	lsls	r1, r1, #7
    469e:	4a2b      	ldr	r2, [pc, #172]	; (474c <trx_spi_init+0xe4>)
    46a0:	4694      	mov	ip, r2
    46a2:	4461      	add	r1, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    46a4:	221f      	movs	r2, #31
    46a6:	4013      	ands	r3, r2
    46a8:	3a1e      	subs	r2, #30
    46aa:	0010      	movs	r0, r2
    46ac:	4098      	lsls	r0, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    46ae:	6188      	str	r0, [r1, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    46b0:	4c27      	ldr	r4, [pc, #156]	; (4750 <trx_spi_init+0xe8>)
    46b2:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    46b4:	2300      	movs	r3, #0
    46b6:	6063      	str	r3, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    46b8:	60a3      	str	r3, [r4, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    46ba:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    46bc:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    46be:	74a2      	strb	r2, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    46c0:	74e2      	strb	r2, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    46c2:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    46c4:	3223      	adds	r2, #35	; 0x23
    46c6:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    46c8:	0020      	movs	r0, r4
    46ca:	3018      	adds	r0, #24
    46cc:	3a18      	subs	r2, #24
    46ce:	2100      	movs	r1, #0
    46d0:	4b20      	ldr	r3, [pc, #128]	; (4754 <trx_spi_init+0xec>)
    46d2:	4798      	blx	r3
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    46d4:	2380      	movs	r3, #128	; 0x80
    46d6:	025b      	lsls	r3, r3, #9
    46d8:	60e3      	str	r3, [r4, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    46da:	4b1f      	ldr	r3, [pc, #124]	; (4758 <trx_spi_init+0xf0>)
    46dc:	61a3      	str	r3, [r4, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    46de:	4b1f      	ldr	r3, [pc, #124]	; (475c <trx_spi_init+0xf4>)
    46e0:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    46e2:	2301      	movs	r3, #1
    46e4:	425b      	negs	r3, r3
    46e6:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    46e8:	4b1d      	ldr	r3, [pc, #116]	; (4760 <trx_spi_init+0xf8>)
    46ea:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    46ec:	4b1d      	ldr	r3, [pc, #116]	; (4764 <trx_spi_init+0xfc>)
    46ee:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    46f0:	4d1d      	ldr	r5, [pc, #116]	; (4768 <trx_spi_init+0x100>)
    46f2:	0022      	movs	r2, r4
    46f4:	491d      	ldr	r1, [pc, #116]	; (476c <trx_spi_init+0x104>)
    46f6:	0028      	movs	r0, r5
    46f8:	4b1d      	ldr	r3, [pc, #116]	; (4770 <trx_spi_init+0x108>)
    46fa:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    46fc:	682a      	ldr	r2, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    46fe:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    4700:	2b00      	cmp	r3, #0
    4702:	d1fc      	bne.n	46fe <trx_spi_init+0x96>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    4704:	6813      	ldr	r3, [r2, #0]
    4706:	2502      	movs	r5, #2
    4708:	432b      	orrs	r3, r5
    470a:	6013      	str	r3, [r2, #0]
	spi_enable(&master);

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    470c:	ac01      	add	r4, sp, #4
    470e:	0020      	movs	r0, r4
    4710:	4b18      	ldr	r3, [pc, #96]	; (4774 <trx_spi_init+0x10c>)
    4712:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    4714:	2320      	movs	r3, #32
    4716:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
    4718:	2380      	movs	r3, #128	; 0x80
    471a:	039b      	lsls	r3, r3, #14
    471c:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    471e:	7225      	strb	r5, [r4, #8]
	#if (SAML21 || SAMR30)
	eint_chan_conf.enable_async_edge_detection = false;
    4720:	2300      	movs	r3, #0
    4722:	7263      	strb	r3, [r4, #9]
	#else
	eint_chan_conf.wake_if_sleeping    = true;
	#endif
	eint_chan_conf.filter_input_signal = false;
    4724:	72a3      	strb	r3, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    4726:	3301      	adds	r3, #1
    4728:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    472a:	0021      	movs	r1, r4
    472c:	2000      	movs	r0, #0
    472e:	4b12      	ldr	r3, [pc, #72]	; (4778 <trx_spi_init+0x110>)
    4730:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    4732:	2200      	movs	r2, #0
    4734:	2100      	movs	r1, #0
    4736:	4811      	ldr	r0, [pc, #68]	; (477c <trx_spi_init+0x114>)
    4738:	4b11      	ldr	r3, [pc, #68]	; (4780 <trx_spi_init+0x118>)
    473a:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    473c:	b005      	add	sp, #20
    473e:	bd30      	pop	{r4, r5, pc}
    4740:	20000680 	.word	0x20000680
    4744:	20000684 	.word	0x20000684
    4748:	00002791 	.word	0x00002791
    474c:	40002800 	.word	0x40002800
    4750:	20000688 	.word	0x20000688
    4754:	00005623 	.word	0x00005623
    4758:	003d0900 	.word	0x003d0900
    475c:	00530005 	.word	0x00530005
    4760:	003e0005 	.word	0x003e0005
    4764:	00520005 	.word	0x00520005
    4768:	200006c0 	.word	0x200006c0
    476c:	42001000 	.word	0x42001000
    4770:	00002c7d 	.word	0x00002c7d
    4774:	000026f5 	.word	0x000026f5
    4778:	00002709 	.word	0x00002709
    477c:	00004651 	.word	0x00004651
    4780:	00002579 	.word	0x00002579

00004784 <PhyReset>:

void PhyReset(void)
{
    4784:	b570      	push	{r4, r5, r6, lr}
    4786:	4b09      	ldr	r3, [pc, #36]	; (47ac <PhyReset+0x28>)
    4788:	001c      	movs	r4, r3
    478a:	3480      	adds	r4, #128	; 0x80
    478c:	2580      	movs	r5, #128	; 0x80
    478e:	022d      	lsls	r5, r5, #8
    4790:	61a5      	str	r5, [r4, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    4792:	2280      	movs	r2, #128	; 0x80
    4794:	0352      	lsls	r2, r2, #13
    4796:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    4798:	20a5      	movs	r0, #165	; 0xa5
    479a:	0040      	lsls	r0, r0, #1
    479c:	4e04      	ldr	r6, [pc, #16]	; (47b0 <PhyReset+0x2c>)
    479e:	47b0      	blx	r6
    47a0:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    47a2:	200a      	movs	r0, #10
    47a4:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    47a6:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    47a8:	bd70      	pop	{r4, r5, r6, pc}
    47aa:	46c0      	nop			; (mov r8, r8)
    47ac:	40002800 	.word	0x40002800
    47b0:	000023f5 	.word	0x000023f5

000047b4 <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    47b4:	b570      	push	{r4, r5, r6, lr}
    47b6:	b082      	sub	sp, #8
    47b8:	0005      	movs	r5, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    47ba:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    47be:	425a      	negs	r2, r3
    47c0:	4153      	adcs	r3, r2
    47c2:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    47c4:	b672      	cpsid	i
    47c6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    47ca:	2200      	movs	r2, #0
    47cc:	4b33      	ldr	r3, [pc, #204]	; (489c <trx_reg_read+0xe8>)
    47ce:	701a      	strb	r2, [r3, #0]
	return flags;
    47d0:	9c01      	ldr	r4, [sp, #4]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    47d2:	4e33      	ldr	r6, [pc, #204]	; (48a0 <trx_reg_read+0xec>)
    47d4:	3201      	adds	r2, #1
    47d6:	4933      	ldr	r1, [pc, #204]	; (48a4 <trx_reg_read+0xf0>)
    47d8:	0030      	movs	r0, r6
    47da:	4b33      	ldr	r3, [pc, #204]	; (48a8 <trx_reg_read+0xf4>)
    47dc:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    47de:	6833      	ldr	r3, [r6, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    47e0:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    47e2:	7e1a      	ldrb	r2, [r3, #24]
    47e4:	420a      	tst	r2, r1
    47e6:	d0fc      	beq.n	47e2 <trx_reg_read+0x2e>
    47e8:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    47ea:	07d2      	lsls	r2, r2, #31
    47ec:	d502      	bpl.n	47f4 <trx_reg_read+0x40>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    47ee:	2280      	movs	r2, #128	; 0x80
    47f0:	4315      	orrs	r5, r2
    47f2:	629d      	str	r5, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    47f4:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    47f6:	7e1a      	ldrb	r2, [r3, #24]
    47f8:	420a      	tst	r2, r1
    47fa:	d0fc      	beq.n	47f6 <trx_reg_read+0x42>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    47fc:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    47fe:	7e1a      	ldrb	r2, [r3, #24]
    4800:	420a      	tst	r2, r1
    4802:	d0fc      	beq.n	47fe <trx_reg_read+0x4a>
    4804:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4806:	0752      	lsls	r2, r2, #29
    4808:	d512      	bpl.n	4830 <trx_reg_read+0x7c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    480a:	8b5a      	ldrh	r2, [r3, #26]
    480c:	0752      	lsls	r2, r2, #29
    480e:	d501      	bpl.n	4814 <trx_reg_read+0x60>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4810:	2204      	movs	r2, #4
    4812:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4814:	4a22      	ldr	r2, [pc, #136]	; (48a0 <trx_reg_read+0xec>)
    4816:	7992      	ldrb	r2, [r2, #6]
    4818:	2a01      	cmp	r2, #1
    481a:	d105      	bne.n	4828 <trx_reg_read+0x74>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    481c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    481e:	05d2      	lsls	r2, r2, #23
    4820:	0dd2      	lsrs	r2, r2, #23
    4822:	4922      	ldr	r1, [pc, #136]	; (48ac <trx_reg_read+0xf8>)
    4824:	800a      	strh	r2, [r1, #0]
    4826:	e003      	b.n	4830 <trx_reg_read+0x7c>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4828:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    482a:	b2d2      	uxtb	r2, r2
    482c:	491f      	ldr	r1, [pc, #124]	; (48ac <trx_reg_read+0xf8>)
    482e:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    4830:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4832:	7e1a      	ldrb	r2, [r3, #24]
    4834:	420a      	tst	r2, r1
    4836:	d0fc      	beq.n	4832 <trx_reg_read+0x7e>
    4838:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    483a:	07d2      	lsls	r2, r2, #31
    483c:	d501      	bpl.n	4842 <trx_reg_read+0x8e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    483e:	2200      	movs	r2, #0
    4840:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    4842:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4844:	7e1a      	ldrb	r2, [r3, #24]
    4846:	420a      	tst	r2, r1
    4848:	d0fc      	beq.n	4844 <trx_reg_read+0x90>
	}
	while (!spi_is_ready_to_read(&master)) {
    484a:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    484c:	7e1a      	ldrb	r2, [r3, #24]
    484e:	420a      	tst	r2, r1
    4850:	d0fc      	beq.n	484c <trx_reg_read+0x98>
    4852:	7e1a      	ldrb	r2, [r3, #24]
}

uint8_t trx_reg_read(uint8_t addr)
{
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t register_value = 0;
    4854:	2500      	movs	r5, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4856:	0752      	lsls	r2, r2, #29
    4858:	d50e      	bpl.n	4878 <trx_reg_read+0xc4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    485a:	8b5a      	ldrh	r2, [r3, #26]
    485c:	0752      	lsls	r2, r2, #29
    485e:	d501      	bpl.n	4864 <trx_reg_read+0xb0>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4860:	2204      	movs	r2, #4
    4862:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4864:	4a0e      	ldr	r2, [pc, #56]	; (48a0 <trx_reg_read+0xec>)
    4866:	7992      	ldrb	r2, [r2, #6]
    4868:	2a01      	cmp	r2, #1
    486a:	d103      	bne.n	4874 <trx_reg_read+0xc0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    486c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    486e:	05ed      	lsls	r5, r5, #23
    4870:	0ded      	lsrs	r5, r5, #23
    4872:	e001      	b.n	4878 <trx_reg_read+0xc4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4874:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    4876:	b2ed      	uxtb	r5, r5
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4878:	2200      	movs	r2, #0
    487a:	490a      	ldr	r1, [pc, #40]	; (48a4 <trx_reg_read+0xf0>)
    487c:	4808      	ldr	r0, [pc, #32]	; (48a0 <trx_reg_read+0xec>)
    487e:	4b0a      	ldr	r3, [pc, #40]	; (48a8 <trx_reg_read+0xf4>)
    4880:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    4882:	23ff      	movs	r3, #255	; 0xff
    4884:	4223      	tst	r3, r4
    4886:	d005      	beq.n	4894 <trx_reg_read+0xe0>
		cpu_irq_enable();
    4888:	2201      	movs	r2, #1
    488a:	4b04      	ldr	r3, [pc, #16]	; (489c <trx_reg_read+0xe8>)
    488c:	701a      	strb	r2, [r3, #0]
    488e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    4892:	b662      	cpsie	i

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    4894:	b2e8      	uxtb	r0, r5
}
    4896:	b002      	add	sp, #8
    4898:	bd70      	pop	{r4, r5, r6, pc}
    489a:	46c0      	nop			; (mov r8, r8)
    489c:	20000028 	.word	0x20000028
    48a0:	200006c0 	.word	0x200006c0
    48a4:	20000684 	.word	0x20000684
    48a8:	00002f45 	.word	0x00002f45
    48ac:	2000067c 	.word	0x2000067c

000048b0 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    48b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    48b2:	b083      	sub	sp, #12
    48b4:	0006      	movs	r6, r0
    48b6:	000c      	movs	r4, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    48b8:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    48bc:	425a      	negs	r2, r3
    48be:	4153      	adcs	r3, r2
    48c0:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    48c2:	b672      	cpsid	i
    48c4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    48c8:	2200      	movs	r2, #0
    48ca:	4b34      	ldr	r3, [pc, #208]	; (499c <trx_reg_write+0xec>)
    48cc:	701a      	strb	r2, [r3, #0]
	return flags;
    48ce:	9d01      	ldr	r5, [sp, #4]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    48d0:	4f33      	ldr	r7, [pc, #204]	; (49a0 <trx_reg_write+0xf0>)
    48d2:	3201      	adds	r2, #1
    48d4:	4933      	ldr	r1, [pc, #204]	; (49a4 <trx_reg_write+0xf4>)
    48d6:	0038      	movs	r0, r7
    48d8:	4b33      	ldr	r3, [pc, #204]	; (49a8 <trx_reg_write+0xf8>)
    48da:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    48dc:	683b      	ldr	r3, [r7, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    48de:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    48e0:	7e1a      	ldrb	r2, [r3, #24]
    48e2:	420a      	tst	r2, r1
    48e4:	d0fc      	beq.n	48e0 <trx_reg_write+0x30>
    48e6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    48e8:	07d2      	lsls	r2, r2, #31
    48ea:	d502      	bpl.n	48f2 <trx_reg_write+0x42>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    48ec:	22c0      	movs	r2, #192	; 0xc0
    48ee:	4316      	orrs	r6, r2
    48f0:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    48f2:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    48f4:	7e1a      	ldrb	r2, [r3, #24]
    48f6:	420a      	tst	r2, r1
    48f8:	d0fc      	beq.n	48f4 <trx_reg_write+0x44>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    48fa:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    48fc:	7e1a      	ldrb	r2, [r3, #24]
    48fe:	420a      	tst	r2, r1
    4900:	d0fc      	beq.n	48fc <trx_reg_write+0x4c>
    4902:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4904:	0752      	lsls	r2, r2, #29
    4906:	d512      	bpl.n	492e <trx_reg_write+0x7e>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4908:	8b5a      	ldrh	r2, [r3, #26]
    490a:	0752      	lsls	r2, r2, #29
    490c:	d501      	bpl.n	4912 <trx_reg_write+0x62>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    490e:	2204      	movs	r2, #4
    4910:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4912:	4a23      	ldr	r2, [pc, #140]	; (49a0 <trx_reg_write+0xf0>)
    4914:	7992      	ldrb	r2, [r2, #6]
    4916:	2a01      	cmp	r2, #1
    4918:	d105      	bne.n	4926 <trx_reg_write+0x76>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    491a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    491c:	05d2      	lsls	r2, r2, #23
    491e:	0dd2      	lsrs	r2, r2, #23
    4920:	4922      	ldr	r1, [pc, #136]	; (49ac <trx_reg_write+0xfc>)
    4922:	800a      	strh	r2, [r1, #0]
    4924:	e003      	b.n	492e <trx_reg_write+0x7e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4926:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4928:	b2d2      	uxtb	r2, r2
    492a:	4920      	ldr	r1, [pc, #128]	; (49ac <trx_reg_write+0xfc>)
    492c:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    492e:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4930:	7e1a      	ldrb	r2, [r3, #24]
    4932:	420a      	tst	r2, r1
    4934:	d0fc      	beq.n	4930 <trx_reg_write+0x80>
    4936:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4938:	07d2      	lsls	r2, r2, #31
    493a:	d500      	bpl.n	493e <trx_reg_write+0x8e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    493c:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    493e:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4940:	7e1a      	ldrb	r2, [r3, #24]
    4942:	420a      	tst	r2, r1
    4944:	d0fc      	beq.n	4940 <trx_reg_write+0x90>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4946:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4948:	7e1a      	ldrb	r2, [r3, #24]
    494a:	420a      	tst	r2, r1
    494c:	d0fc      	beq.n	4948 <trx_reg_write+0x98>
    494e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4950:	0752      	lsls	r2, r2, #29
    4952:	d512      	bpl.n	497a <trx_reg_write+0xca>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4954:	8b5a      	ldrh	r2, [r3, #26]
    4956:	0752      	lsls	r2, r2, #29
    4958:	d501      	bpl.n	495e <trx_reg_write+0xae>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    495a:	2204      	movs	r2, #4
    495c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    495e:	4a10      	ldr	r2, [pc, #64]	; (49a0 <trx_reg_write+0xf0>)
    4960:	7992      	ldrb	r2, [r2, #6]
    4962:	2a01      	cmp	r2, #1
    4964:	d105      	bne.n	4972 <trx_reg_write+0xc2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4968:	05db      	lsls	r3, r3, #23
    496a:	0ddb      	lsrs	r3, r3, #23
    496c:	4a0f      	ldr	r2, [pc, #60]	; (49ac <trx_reg_write+0xfc>)
    496e:	8013      	strh	r3, [r2, #0]
    4970:	e003      	b.n	497a <trx_reg_write+0xca>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4974:	b2db      	uxtb	r3, r3
    4976:	4a0d      	ldr	r2, [pc, #52]	; (49ac <trx_reg_write+0xfc>)
    4978:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    497a:	2200      	movs	r2, #0
    497c:	4909      	ldr	r1, [pc, #36]	; (49a4 <trx_reg_write+0xf4>)
    497e:	4808      	ldr	r0, [pc, #32]	; (49a0 <trx_reg_write+0xf0>)
    4980:	4b09      	ldr	r3, [pc, #36]	; (49a8 <trx_reg_write+0xf8>)
    4982:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    4984:	23ff      	movs	r3, #255	; 0xff
    4986:	422b      	tst	r3, r5
    4988:	d005      	beq.n	4996 <trx_reg_write+0xe6>
		cpu_irq_enable();
    498a:	2201      	movs	r2, #1
    498c:	4b03      	ldr	r3, [pc, #12]	; (499c <trx_reg_write+0xec>)
    498e:	701a      	strb	r2, [r3, #0]
    4990:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    4994:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    4996:	b003      	add	sp, #12
    4998:	bdf0      	pop	{r4, r5, r6, r7, pc}
    499a:	46c0      	nop			; (mov r8, r8)
    499c:	20000028 	.word	0x20000028
    49a0:	200006c0 	.word	0x200006c0
    49a4:	20000684 	.word	0x20000684
    49a8:	00002f45 	.word	0x00002f45
    49ac:	2000067c 	.word	0x2000067c

000049b0 <trx_frame_read>:
	new_value |= current_reg_value;
	trx_reg_write(reg_addr, new_value);
}

void trx_frame_read(uint8_t *data, uint8_t length)
{
    49b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    49b2:	4657      	mov	r7, sl
    49b4:	464e      	mov	r6, r9
    49b6:	4645      	mov	r5, r8
    49b8:	b4e0      	push	{r5, r6, r7}
    49ba:	b082      	sub	sp, #8
    49bc:	0005      	movs	r5, r0
    49be:	000c      	movs	r4, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    49c0:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    49c4:	425a      	negs	r2, r3
    49c6:	4153      	adcs	r3, r2
    49c8:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    49ca:	b672      	cpsid	i
    49cc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    49d0:	2200      	movs	r2, #0
    49d2:	4b3e      	ldr	r3, [pc, #248]	; (4acc <trx_frame_read+0x11c>)
    49d4:	701a      	strb	r2, [r3, #0]
	return flags;
    49d6:	9b01      	ldr	r3, [sp, #4]
    49d8:	4698      	mov	r8, r3
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    49da:	4f3d      	ldr	r7, [pc, #244]	; (4ad0 <trx_frame_read+0x120>)
    49dc:	3201      	adds	r2, #1
    49de:	493d      	ldr	r1, [pc, #244]	; (4ad4 <trx_frame_read+0x124>)
    49e0:	0038      	movs	r0, r7
    49e2:	4b3d      	ldr	r3, [pc, #244]	; (4ad8 <trx_frame_read+0x128>)
    49e4:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    49e6:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    49e8:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    49ea:	7e1a      	ldrb	r2, [r3, #24]
    49ec:	420a      	tst	r2, r1
    49ee:	d0fc      	beq.n	49ea <trx_frame_read+0x3a>
    49f0:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    49f2:	07d2      	lsls	r2, r2, #31
    49f4:	d501      	bpl.n	49fa <trx_frame_read+0x4a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    49f6:	2220      	movs	r2, #32
    49f8:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    49fa:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    49fc:	7e1a      	ldrb	r2, [r3, #24]
    49fe:	420a      	tst	r2, r1
    4a00:	d0fc      	beq.n	49fc <trx_frame_read+0x4c>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4a02:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4a04:	7e1a      	ldrb	r2, [r3, #24]
    4a06:	420a      	tst	r2, r1
    4a08:	d0fc      	beq.n	4a04 <trx_frame_read+0x54>
    4a0a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4a0c:	0752      	lsls	r2, r2, #29
    4a0e:	d512      	bpl.n	4a36 <trx_frame_read+0x86>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4a10:	8b5a      	ldrh	r2, [r3, #26]
    4a12:	0752      	lsls	r2, r2, #29
    4a14:	d501      	bpl.n	4a1a <trx_frame_read+0x6a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4a16:	2204      	movs	r2, #4
    4a18:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4a1a:	4a2d      	ldr	r2, [pc, #180]	; (4ad0 <trx_frame_read+0x120>)
    4a1c:	7992      	ldrb	r2, [r2, #6]
    4a1e:	2a01      	cmp	r2, #1
    4a20:	d105      	bne.n	4a2e <trx_frame_read+0x7e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4a24:	05db      	lsls	r3, r3, #23
    4a26:	0ddb      	lsrs	r3, r3, #23
    4a28:	4a2c      	ldr	r2, [pc, #176]	; (4adc <trx_frame_read+0x12c>)
    4a2a:	8013      	strh	r3, [r2, #0]
    4a2c:	e003      	b.n	4a36 <trx_frame_read+0x86>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4a30:	b2db      	uxtb	r3, r3
    4a32:	4a2a      	ldr	r2, [pc, #168]	; (4adc <trx_frame_read+0x12c>)
    4a34:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    4a36:	1e63      	subs	r3, r4, #1
    4a38:	b2db      	uxtb	r3, r3
    4a3a:	2c00      	cmp	r4, #0
    4a3c:	d030      	beq.n	4aa0 <trx_frame_read+0xf0>
    4a3e:	3301      	adds	r3, #1
    4a40:	469c      	mov	ip, r3
    4a42:	44ac      	add	ip, r5
    4a44:	2720      	movs	r7, #32
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4a46:	4e22      	ldr	r6, [pc, #136]	; (4ad0 <trx_frame_read+0x120>)
		while (!spi_is_ready_to_write(&master)) {
    4a48:	2001      	movs	r0, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4a4a:	2300      	movs	r3, #0
    4a4c:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    4a4e:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4a50:	2104      	movs	r1, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4a52:	46b1      	mov	r9, r6
    4a54:	e022      	b.n	4a9c <trx_frame_read+0xec>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4a56:	7e1a      	ldrb	r2, [r3, #24]
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    4a58:	4202      	tst	r2, r0
    4a5a:	d0fc      	beq.n	4a56 <trx_frame_read+0xa6>
    4a5c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4a5e:	4202      	tst	r2, r0
    4a60:	d001      	beq.n	4a66 <trx_frame_read+0xb6>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4a62:	4652      	mov	r2, sl
    4a64:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4a66:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    4a68:	4222      	tst	r2, r4
    4a6a:	d0fc      	beq.n	4a66 <trx_frame_read+0xb6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4a6c:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4a6e:	420a      	tst	r2, r1
    4a70:	d0fc      	beq.n	4a6c <trx_frame_read+0xbc>
    4a72:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4a74:	420a      	tst	r2, r1
    4a76:	d00d      	beq.n	4a94 <trx_frame_read+0xe4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4a78:	8b5a      	ldrh	r2, [r3, #26]
    4a7a:	420a      	tst	r2, r1
    4a7c:	d000      	beq.n	4a80 <trx_frame_read+0xd0>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4a7e:	8359      	strh	r1, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4a80:	464a      	mov	r2, r9
    4a82:	7992      	ldrb	r2, [r2, #6]
    4a84:	2a01      	cmp	r2, #1
    4a86:	d103      	bne.n	4a90 <trx_frame_read+0xe0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4a88:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    4a8a:	05ff      	lsls	r7, r7, #23
    4a8c:	0dff      	lsrs	r7, r7, #23
    4a8e:	e001      	b.n	4a94 <trx_frame_read+0xe4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4a90:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    4a92:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    4a94:	702f      	strb	r7, [r5, #0]
		data++;
    4a96:	3501      	adds	r5, #1
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    4a98:	45ac      	cmp	ip, r5
    4a9a:	d001      	beq.n	4aa0 <trx_frame_read+0xf0>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4a9c:	6833      	ldr	r3, [r6, #0]
    4a9e:	e7da      	b.n	4a56 <trx_frame_read+0xa6>
		*data = temp;
		data++;
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4aa0:	2200      	movs	r2, #0
    4aa2:	490c      	ldr	r1, [pc, #48]	; (4ad4 <trx_frame_read+0x124>)
    4aa4:	480a      	ldr	r0, [pc, #40]	; (4ad0 <trx_frame_read+0x120>)
    4aa6:	4b0c      	ldr	r3, [pc, #48]	; (4ad8 <trx_frame_read+0x128>)
    4aa8:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    4aaa:	23ff      	movs	r3, #255	; 0xff
    4aac:	4642      	mov	r2, r8
    4aae:	4213      	tst	r3, r2
    4ab0:	d005      	beq.n	4abe <trx_frame_read+0x10e>
		cpu_irq_enable();
    4ab2:	2201      	movs	r2, #1
    4ab4:	4b05      	ldr	r3, [pc, #20]	; (4acc <trx_frame_read+0x11c>)
    4ab6:	701a      	strb	r2, [r3, #0]
    4ab8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    4abc:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    4abe:	b002      	add	sp, #8
    4ac0:	bc1c      	pop	{r2, r3, r4}
    4ac2:	4690      	mov	r8, r2
    4ac4:	4699      	mov	r9, r3
    4ac6:	46a2      	mov	sl, r4
    4ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4aca:	46c0      	nop			; (mov r8, r8)
    4acc:	20000028 	.word	0x20000028
    4ad0:	200006c0 	.word	0x200006c0
    4ad4:	20000684 	.word	0x20000684
    4ad8:	00002f45 	.word	0x00002f45
    4adc:	2000067c 	.word	0x2000067c

00004ae0 <trx_frame_write>:

void trx_frame_write(uint8_t *data, uint8_t length)
{
    4ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ae2:	4647      	mov	r7, r8
    4ae4:	b480      	push	{r7}
    4ae6:	b082      	sub	sp, #8
    4ae8:	0004      	movs	r4, r0
    4aea:	000d      	movs	r5, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4aec:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    4af0:	425a      	negs	r2, r3
    4af2:	4153      	adcs	r3, r2
    4af4:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    4af6:	b672      	cpsid	i
    4af8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4afc:	2200      	movs	r2, #0
    4afe:	4b3a      	ldr	r3, [pc, #232]	; (4be8 <trx_frame_write+0x108>)
    4b00:	701a      	strb	r2, [r3, #0]
	return flags;
    4b02:	9b01      	ldr	r3, [sp, #4]
    4b04:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4b06:	4f39      	ldr	r7, [pc, #228]	; (4bec <trx_frame_write+0x10c>)
    4b08:	3201      	adds	r2, #1
    4b0a:	4939      	ldr	r1, [pc, #228]	; (4bf0 <trx_frame_write+0x110>)
    4b0c:	0038      	movs	r0, r7
    4b0e:	4b39      	ldr	r3, [pc, #228]	; (4bf4 <trx_frame_write+0x114>)
    4b10:	4798      	blx	r3
    4b12:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    4b14:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4b16:	7e1a      	ldrb	r2, [r3, #24]
    4b18:	420a      	tst	r2, r1
    4b1a:	d0fc      	beq.n	4b16 <trx_frame_write+0x36>
    4b1c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4b1e:	07d2      	lsls	r2, r2, #31
    4b20:	d501      	bpl.n	4b26 <trx_frame_write+0x46>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4b22:	2260      	movs	r2, #96	; 0x60
    4b24:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    4b26:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4b28:	7e1a      	ldrb	r2, [r3, #24]
    4b2a:	420a      	tst	r2, r1
    4b2c:	d0fc      	beq.n	4b28 <trx_frame_write+0x48>
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4b2e:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4b30:	7e1a      	ldrb	r2, [r3, #24]
    4b32:	420a      	tst	r2, r1
    4b34:	d0fc      	beq.n	4b30 <trx_frame_write+0x50>
    4b36:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4b38:	0752      	lsls	r2, r2, #29
    4b3a:	d512      	bpl.n	4b62 <trx_frame_write+0x82>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4b3c:	8b5a      	ldrh	r2, [r3, #26]
    4b3e:	0752      	lsls	r2, r2, #29
    4b40:	d501      	bpl.n	4b46 <trx_frame_write+0x66>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4b42:	2204      	movs	r2, #4
    4b44:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4b46:	4a29      	ldr	r2, [pc, #164]	; (4bec <trx_frame_write+0x10c>)
    4b48:	7992      	ldrb	r2, [r2, #6]
    4b4a:	2a01      	cmp	r2, #1
    4b4c:	d105      	bne.n	4b5a <trx_frame_write+0x7a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4b4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4b50:	05d2      	lsls	r2, r2, #23
    4b52:	0dd2      	lsrs	r2, r2, #23
    4b54:	4928      	ldr	r1, [pc, #160]	; (4bf8 <trx_frame_write+0x118>)
    4b56:	800a      	strh	r2, [r1, #0]
    4b58:	e003      	b.n	4b62 <trx_frame_write+0x82>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4b5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4b5c:	b2d2      	uxtb	r2, r2
    4b5e:	4926      	ldr	r1, [pc, #152]	; (4bf8 <trx_frame_write+0x118>)
    4b60:	800a      	strh	r2, [r1, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4b62:	4a22      	ldr	r2, [pc, #136]	; (4bec <trx_frame_write+0x10c>)
    4b64:	7992      	ldrb	r2, [r2, #6]
    4b66:	4694      	mov	ip, r2
    4b68:	0021      	movs	r1, r4
	}
	spi_read(&master, &dummy_read);
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    4b6a:	2701      	movs	r7, #1
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    4b6c:	2002      	movs	r0, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4b6e:	2404      	movs	r4, #4
    4b70:	e022      	b.n	4bb8 <trx_frame_write+0xd8>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4b72:	7e1a      	ldrb	r2, [r3, #24]
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    4b74:	423a      	tst	r2, r7
    4b76:	d0fc      	beq.n	4b72 <trx_frame_write+0x92>
    4b78:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4b7a:	423a      	tst	r2, r7
    4b7c:	d001      	beq.n	4b82 <trx_frame_write+0xa2>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4b7e:	780a      	ldrb	r2, [r1, #0]
    4b80:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4b82:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    4b84:	4202      	tst	r2, r0
    4b86:	d0fc      	beq.n	4b82 <trx_frame_write+0xa2>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4b88:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4b8a:	4222      	tst	r2, r4
    4b8c:	d0fc      	beq.n	4b88 <trx_frame_write+0xa8>
    4b8e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4b90:	4222      	tst	r2, r4
    4b92:	d010      	beq.n	4bb6 <trx_frame_write+0xd6>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4b94:	8b5a      	ldrh	r2, [r3, #26]
    4b96:	4222      	tst	r2, r4
    4b98:	d000      	beq.n	4b9c <trx_frame_write+0xbc>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4b9a:	835c      	strh	r4, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4b9c:	4662      	mov	r2, ip
    4b9e:	2a01      	cmp	r2, #1
    4ba0:	d105      	bne.n	4bae <trx_frame_write+0xce>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4ba2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4ba4:	05d2      	lsls	r2, r2, #23
    4ba6:	0dd2      	lsrs	r2, r2, #23
    4ba8:	4e13      	ldr	r6, [pc, #76]	; (4bf8 <trx_frame_write+0x118>)
    4baa:	8032      	strh	r2, [r6, #0]
    4bac:	e003      	b.n	4bb6 <trx_frame_write+0xd6>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4bae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4bb0:	b2d2      	uxtb	r2, r2
    4bb2:	4e11      	ldr	r6, [pc, #68]	; (4bf8 <trx_frame_write+0x118>)
    4bb4:	8032      	strh	r2, [r6, #0]
    4bb6:	3101      	adds	r1, #1
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);
	while (length--) {
    4bb8:	3d01      	subs	r5, #1
    4bba:	b2ed      	uxtb	r5, r5
    4bbc:	2dff      	cmp	r5, #255	; 0xff
    4bbe:	d1d8      	bne.n	4b72 <trx_frame_write+0x92>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4bc0:	2200      	movs	r2, #0
    4bc2:	490b      	ldr	r1, [pc, #44]	; (4bf0 <trx_frame_write+0x110>)
    4bc4:	4809      	ldr	r0, [pc, #36]	; (4bec <trx_frame_write+0x10c>)
    4bc6:	4b0b      	ldr	r3, [pc, #44]	; (4bf4 <trx_frame_write+0x114>)
    4bc8:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    4bca:	23ff      	movs	r3, #255	; 0xff
    4bcc:	4642      	mov	r2, r8
    4bce:	4213      	tst	r3, r2
    4bd0:	d005      	beq.n	4bde <trx_frame_write+0xfe>
		cpu_irq_enable();
    4bd2:	2201      	movs	r2, #1
    4bd4:	4b04      	ldr	r3, [pc, #16]	; (4be8 <trx_frame_write+0x108>)
    4bd6:	701a      	strb	r2, [r3, #0]
    4bd8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    4bdc:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    4bde:	b002      	add	sp, #8
    4be0:	bc04      	pop	{r2}
    4be2:	4690      	mov	r8, r2
    4be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4be6:	46c0      	nop			; (mov r8, r8)
    4be8:	20000028 	.word	0x20000028
    4bec:	200006c0 	.word	0x200006c0
    4bf0:	20000684 	.word	0x20000684
    4bf4:	00002f45 	.word	0x00002f45
    4bf8:	2000067c 	.word	0x2000067c

00004bfc <trx_sram_write>:
 * @param addr Start address in the SRAM for the write operation
 * @param data Pointer to the data to be written into SRAM
 * @param length Number of bytes to be written into SRAM
 */
void trx_sram_write(uint8_t addr, uint8_t *data, uint8_t length)
{
    4bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    4bfe:	4647      	mov	r7, r8
    4c00:	b480      	push	{r7}
    4c02:	b082      	sub	sp, #8
    4c04:	0006      	movs	r6, r0
    4c06:	000d      	movs	r5, r1
    4c08:	0014      	movs	r4, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4c0a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    4c0e:	425a      	negs	r2, r3
    4c10:	4153      	adcs	r3, r2
    4c12:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    4c14:	b672      	cpsid	i
    4c16:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4c1a:	2200      	movs	r2, #0
    4c1c:	4b4c      	ldr	r3, [pc, #304]	; (4d50 <trx_sram_write+0x154>)
    4c1e:	701a      	strb	r2, [r3, #0]
	return flags;
    4c20:	9b01      	ldr	r3, [sp, #4]
    4c22:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4c24:	4f4b      	ldr	r7, [pc, #300]	; (4d54 <trx_sram_write+0x158>)
    4c26:	3201      	adds	r2, #1
    4c28:	494b      	ldr	r1, [pc, #300]	; (4d58 <trx_sram_write+0x15c>)
    4c2a:	0038      	movs	r0, r7
    4c2c:	4b4b      	ldr	r3, [pc, #300]	; (4d5c <trx_sram_write+0x160>)
    4c2e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4c30:	683b      	ldr	r3, [r7, #0]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    4c32:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4c34:	7e1a      	ldrb	r2, [r3, #24]
    4c36:	420a      	tst	r2, r1
    4c38:	d0fc      	beq.n	4c34 <trx_sram_write+0x38>
    4c3a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4c3c:	07d2      	lsls	r2, r2, #31
    4c3e:	d501      	bpl.n	4c44 <trx_sram_write+0x48>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4c40:	2240      	movs	r2, #64	; 0x40
    4c42:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    4c44:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4c46:	7e1a      	ldrb	r2, [r3, #24]
    4c48:	420a      	tst	r2, r1
    4c4a:	d0fc      	beq.n	4c46 <trx_sram_write+0x4a>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4c4c:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4c4e:	7e1a      	ldrb	r2, [r3, #24]
    4c50:	420a      	tst	r2, r1
    4c52:	d0fc      	beq.n	4c4e <trx_sram_write+0x52>
    4c54:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4c56:	0752      	lsls	r2, r2, #29
    4c58:	d512      	bpl.n	4c80 <trx_sram_write+0x84>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4c5a:	8b5a      	ldrh	r2, [r3, #26]
    4c5c:	0752      	lsls	r2, r2, #29
    4c5e:	d501      	bpl.n	4c64 <trx_sram_write+0x68>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4c60:	2204      	movs	r2, #4
    4c62:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4c64:	4a3b      	ldr	r2, [pc, #236]	; (4d54 <trx_sram_write+0x158>)
    4c66:	7992      	ldrb	r2, [r2, #6]
    4c68:	2a01      	cmp	r2, #1
    4c6a:	d105      	bne.n	4c78 <trx_sram_write+0x7c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4c6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4c6e:	05d2      	lsls	r2, r2, #23
    4c70:	0dd2      	lsrs	r2, r2, #23
    4c72:	493b      	ldr	r1, [pc, #236]	; (4d60 <trx_sram_write+0x164>)
    4c74:	800a      	strh	r2, [r1, #0]
    4c76:	e003      	b.n	4c80 <trx_sram_write+0x84>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4c78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4c7a:	b2d2      	uxtb	r2, r2
    4c7c:	4938      	ldr	r1, [pc, #224]	; (4d60 <trx_sram_write+0x164>)
    4c7e:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the write operation should start */
	while (!spi_is_ready_to_write(&master)) {
    4c80:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4c82:	7e1a      	ldrb	r2, [r3, #24]
    4c84:	420a      	tst	r2, r1
    4c86:	d0fc      	beq.n	4c82 <trx_sram_write+0x86>
    4c88:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4c8a:	07d2      	lsls	r2, r2, #31
    4c8c:	d500      	bpl.n	4c90 <trx_sram_write+0x94>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4c8e:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    4c90:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4c92:	7e1a      	ldrb	r2, [r3, #24]
    4c94:	420a      	tst	r2, r1
    4c96:	d0fc      	beq.n	4c92 <trx_sram_write+0x96>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4c98:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4c9a:	7e1a      	ldrb	r2, [r3, #24]
    4c9c:	420a      	tst	r2, r1
    4c9e:	d0fc      	beq.n	4c9a <trx_sram_write+0x9e>
    4ca0:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4ca2:	0752      	lsls	r2, r2, #29
    4ca4:	d512      	bpl.n	4ccc <trx_sram_write+0xd0>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4ca6:	8b5a      	ldrh	r2, [r3, #26]
    4ca8:	0752      	lsls	r2, r2, #29
    4caa:	d501      	bpl.n	4cb0 <trx_sram_write+0xb4>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4cac:	2204      	movs	r2, #4
    4cae:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4cb0:	4a28      	ldr	r2, [pc, #160]	; (4d54 <trx_sram_write+0x158>)
    4cb2:	7992      	ldrb	r2, [r2, #6]
    4cb4:	2a01      	cmp	r2, #1
    4cb6:	d105      	bne.n	4cc4 <trx_sram_write+0xc8>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4cb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4cba:	05d2      	lsls	r2, r2, #23
    4cbc:	0dd2      	lsrs	r2, r2, #23
    4cbe:	4928      	ldr	r1, [pc, #160]	; (4d60 <trx_sram_write+0x164>)
    4cc0:	800a      	strh	r2, [r1, #0]
    4cc2:	e003      	b.n	4ccc <trx_sram_write+0xd0>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4cc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4cc6:	b2d2      	uxtb	r2, r2
    4cc8:	4925      	ldr	r1, [pc, #148]	; (4d60 <trx_sram_write+0x164>)
    4cca:	800a      	strh	r2, [r1, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4ccc:	4a21      	ldr	r2, [pc, #132]	; (4d54 <trx_sram_write+0x158>)
    4cce:	7992      	ldrb	r2, [r2, #6]
    4cd0:	4694      	mov	ip, r2
    4cd2:	0028      	movs	r0, r5
	}
	spi_read(&master, &dummy_read);

	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    4cd4:	2601      	movs	r6, #1
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    4cd6:	2502      	movs	r5, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4cd8:	2104      	movs	r1, #4
    4cda:	e022      	b.n	4d22 <trx_sram_write+0x126>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4cdc:	7e1a      	ldrb	r2, [r3, #24]
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    4cde:	4232      	tst	r2, r6
    4ce0:	d0fc      	beq.n	4cdc <trx_sram_write+0xe0>
    4ce2:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4ce4:	4232      	tst	r2, r6
    4ce6:	d001      	beq.n	4cec <trx_sram_write+0xf0>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4ce8:	7802      	ldrb	r2, [r0, #0]
    4cea:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4cec:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    4cee:	422a      	tst	r2, r5
    4cf0:	d0fc      	beq.n	4cec <trx_sram_write+0xf0>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4cf2:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4cf4:	420a      	tst	r2, r1
    4cf6:	d0fc      	beq.n	4cf2 <trx_sram_write+0xf6>
    4cf8:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4cfa:	420a      	tst	r2, r1
    4cfc:	d010      	beq.n	4d20 <trx_sram_write+0x124>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4cfe:	8b5a      	ldrh	r2, [r3, #26]
    4d00:	420a      	tst	r2, r1
    4d02:	d000      	beq.n	4d06 <trx_sram_write+0x10a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4d04:	8359      	strh	r1, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4d06:	4662      	mov	r2, ip
    4d08:	2a01      	cmp	r2, #1
    4d0a:	d105      	bne.n	4d18 <trx_sram_write+0x11c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4d0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4d0e:	05d2      	lsls	r2, r2, #23
    4d10:	0dd2      	lsrs	r2, r2, #23
    4d12:	4f13      	ldr	r7, [pc, #76]	; (4d60 <trx_sram_write+0x164>)
    4d14:	803a      	strh	r2, [r7, #0]
    4d16:	e003      	b.n	4d20 <trx_sram_write+0x124>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4d18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4d1a:	b2d2      	uxtb	r2, r2
    4d1c:	4f10      	ldr	r7, [pc, #64]	; (4d60 <trx_sram_write+0x164>)
    4d1e:	803a      	strh	r2, [r7, #0]
    4d20:	3001      	adds	r0, #1
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    4d22:	3c01      	subs	r4, #1
    4d24:	b2e4      	uxtb	r4, r4
    4d26:	2cff      	cmp	r4, #255	; 0xff
    4d28:	d1d8      	bne.n	4cdc <trx_sram_write+0xe0>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4d2a:	2200      	movs	r2, #0
    4d2c:	490a      	ldr	r1, [pc, #40]	; (4d58 <trx_sram_write+0x15c>)
    4d2e:	4809      	ldr	r0, [pc, #36]	; (4d54 <trx_sram_write+0x158>)
    4d30:	4b0a      	ldr	r3, [pc, #40]	; (4d5c <trx_sram_write+0x160>)
    4d32:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    4d34:	23ff      	movs	r3, #255	; 0xff
    4d36:	4642      	mov	r2, r8
    4d38:	4213      	tst	r3, r2
    4d3a:	d005      	beq.n	4d48 <trx_sram_write+0x14c>
		cpu_irq_enable();
    4d3c:	2201      	movs	r2, #1
    4d3e:	4b04      	ldr	r3, [pc, #16]	; (4d50 <trx_sram_write+0x154>)
    4d40:	701a      	strb	r2, [r3, #0]
    4d42:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    4d46:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    4d48:	b002      	add	sp, #8
    4d4a:	bc04      	pop	{r2}
    4d4c:	4690      	mov	r8, r2
    4d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d50:	20000028 	.word	0x20000028
    4d54:	200006c0 	.word	0x200006c0
    4d58:	20000684 	.word	0x20000684
    4d5c:	00002f45 	.word	0x00002f45
    4d60:	2000067c 	.word	0x2000067c

00004d64 <trx_sram_read>:
 * @param[in] addr Start address in SRAM for read operation
 * @param[out] data Pointer to the location where data stored
 * @param[in] length Number of bytes to be read from SRAM
 */
void trx_sram_read(uint8_t addr, uint8_t *data, uint8_t length)
{
    4d64:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d66:	4657      	mov	r7, sl
    4d68:	464e      	mov	r6, r9
    4d6a:	4645      	mov	r5, r8
    4d6c:	b4e0      	push	{r5, r6, r7}
    4d6e:	b082      	sub	sp, #8
    4d70:	0004      	movs	r4, r0
    4d72:	000d      	movs	r5, r1
    4d74:	0017      	movs	r7, r2
	delay_us(1); /* wap_rf4ce */
    4d76:	2001      	movs	r0, #1
    4d78:	4b56      	ldr	r3, [pc, #344]	; (4ed4 <trx_sram_read+0x170>)
    4d7a:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4d7c:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    4d80:	425a      	negs	r2, r3
    4d82:	4153      	adcs	r3, r2
    4d84:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    4d86:	b672      	cpsid	i
    4d88:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4d8c:	2200      	movs	r2, #0
    4d8e:	4b52      	ldr	r3, [pc, #328]	; (4ed8 <trx_sram_read+0x174>)
    4d90:	701a      	strb	r2, [r3, #0]
	return flags;
    4d92:	9b01      	ldr	r3, [sp, #4]
    4d94:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4d96:	4e51      	ldr	r6, [pc, #324]	; (4edc <trx_sram_read+0x178>)
    4d98:	3201      	adds	r2, #1
    4d9a:	4951      	ldr	r1, [pc, #324]	; (4ee0 <trx_sram_read+0x17c>)
    4d9c:	0030      	movs	r0, r6
    4d9e:	4b51      	ldr	r3, [pc, #324]	; (4ee4 <trx_sram_read+0x180>)
    4da0:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4da2:	6833      	ldr	r3, [r6, #0]

	temp = TRX_CMD_SR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    4da4:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4da6:	7e1a      	ldrb	r2, [r3, #24]
    4da8:	420a      	tst	r2, r1
    4daa:	d0fc      	beq.n	4da6 <trx_sram_read+0x42>
    4dac:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4dae:	07d2      	lsls	r2, r2, #31
    4db0:	d501      	bpl.n	4db6 <trx_sram_read+0x52>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4db2:	2200      	movs	r2, #0
    4db4:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    4db6:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4db8:	7e1a      	ldrb	r2, [r3, #24]
    4dba:	420a      	tst	r2, r1
    4dbc:	d0fc      	beq.n	4db8 <trx_sram_read+0x54>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4dbe:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4dc0:	7e1a      	ldrb	r2, [r3, #24]
    4dc2:	420a      	tst	r2, r1
    4dc4:	d0fc      	beq.n	4dc0 <trx_sram_read+0x5c>
    4dc6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4dc8:	0752      	lsls	r2, r2, #29
    4dca:	d512      	bpl.n	4df2 <trx_sram_read+0x8e>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4dcc:	8b5a      	ldrh	r2, [r3, #26]
    4dce:	0752      	lsls	r2, r2, #29
    4dd0:	d501      	bpl.n	4dd6 <trx_sram_read+0x72>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4dd2:	2204      	movs	r2, #4
    4dd4:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4dd6:	4a41      	ldr	r2, [pc, #260]	; (4edc <trx_sram_read+0x178>)
    4dd8:	7992      	ldrb	r2, [r2, #6]
    4dda:	2a01      	cmp	r2, #1
    4ddc:	d105      	bne.n	4dea <trx_sram_read+0x86>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4dde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4de0:	05d2      	lsls	r2, r2, #23
    4de2:	0dd2      	lsrs	r2, r2, #23
    4de4:	4940      	ldr	r1, [pc, #256]	; (4ee8 <trx_sram_read+0x184>)
    4de6:	800a      	strh	r2, [r1, #0]
    4de8:	e003      	b.n	4df2 <trx_sram_read+0x8e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4dea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4dec:	b2d2      	uxtb	r2, r2
    4dee:	493e      	ldr	r1, [pc, #248]	; (4ee8 <trx_sram_read+0x184>)
    4df0:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the read operation should start */
	while (!spi_is_ready_to_write(&master)) {
    4df2:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4df4:	7e1a      	ldrb	r2, [r3, #24]
    4df6:	420a      	tst	r2, r1
    4df8:	d0fc      	beq.n	4df4 <trx_sram_read+0x90>
    4dfa:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4dfc:	07d2      	lsls	r2, r2, #31
    4dfe:	d500      	bpl.n	4e02 <trx_sram_read+0x9e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4e00:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    4e02:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4e04:	7e1a      	ldrb	r2, [r3, #24]
    4e06:	420a      	tst	r2, r1
    4e08:	d0fc      	beq.n	4e04 <trx_sram_read+0xa0>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4e0a:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4e0c:	7e1a      	ldrb	r2, [r3, #24]
    4e0e:	420a      	tst	r2, r1
    4e10:	d0fc      	beq.n	4e0c <trx_sram_read+0xa8>
    4e12:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4e14:	0752      	lsls	r2, r2, #29
    4e16:	d512      	bpl.n	4e3e <trx_sram_read+0xda>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4e18:	8b5a      	ldrh	r2, [r3, #26]
    4e1a:	0752      	lsls	r2, r2, #29
    4e1c:	d501      	bpl.n	4e22 <trx_sram_read+0xbe>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4e1e:	2204      	movs	r2, #4
    4e20:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4e22:	4a2e      	ldr	r2, [pc, #184]	; (4edc <trx_sram_read+0x178>)
    4e24:	7992      	ldrb	r2, [r2, #6]
    4e26:	2a01      	cmp	r2, #1
    4e28:	d105      	bne.n	4e36 <trx_sram_read+0xd2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4e2c:	05db      	lsls	r3, r3, #23
    4e2e:	0ddb      	lsrs	r3, r3, #23
    4e30:	4a2d      	ldr	r2, [pc, #180]	; (4ee8 <trx_sram_read+0x184>)
    4e32:	8013      	strh	r3, [r2, #0]
    4e34:	e003      	b.n	4e3e <trx_sram_read+0xda>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4e38:	b2db      	uxtb	r3, r3
    4e3a:	4a2b      	ldr	r2, [pc, #172]	; (4ee8 <trx_sram_read+0x184>)
    4e3c:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    4e3e:	1e7b      	subs	r3, r7, #1
    4e40:	b2db      	uxtb	r3, r3
    4e42:	2f00      	cmp	r7, #0
    4e44:	d030      	beq.n	4ea8 <trx_sram_read+0x144>
    4e46:	3301      	adds	r3, #1
    4e48:	469c      	mov	ip, r3
    4e4a:	44ac      	add	ip, r5
    4e4c:	2700      	movs	r7, #0
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4e4e:	4e23      	ldr	r6, [pc, #140]	; (4edc <trx_sram_read+0x178>)
		while (!spi_is_ready_to_write(&master)) {
    4e50:	2001      	movs	r0, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4e52:	2300      	movs	r3, #0
    4e54:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    4e56:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4e58:	2104      	movs	r1, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4e5a:	46b1      	mov	r9, r6
    4e5c:	e022      	b.n	4ea4 <trx_sram_read+0x140>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4e5e:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    4e60:	4202      	tst	r2, r0
    4e62:	d0fc      	beq.n	4e5e <trx_sram_read+0xfa>
    4e64:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4e66:	4202      	tst	r2, r0
    4e68:	d001      	beq.n	4e6e <trx_sram_read+0x10a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4e6a:	4652      	mov	r2, sl
    4e6c:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4e6e:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    4e70:	4222      	tst	r2, r4
    4e72:	d0fc      	beq.n	4e6e <trx_sram_read+0x10a>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4e74:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4e76:	420a      	tst	r2, r1
    4e78:	d0fc      	beq.n	4e74 <trx_sram_read+0x110>
    4e7a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4e7c:	420a      	tst	r2, r1
    4e7e:	d00d      	beq.n	4e9c <trx_sram_read+0x138>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4e80:	8b5a      	ldrh	r2, [r3, #26]
    4e82:	420a      	tst	r2, r1
    4e84:	d000      	beq.n	4e88 <trx_sram_read+0x124>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4e86:	8359      	strh	r1, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4e88:	464a      	mov	r2, r9
    4e8a:	7992      	ldrb	r2, [r2, #6]
    4e8c:	2a01      	cmp	r2, #1
    4e8e:	d103      	bne.n	4e98 <trx_sram_read+0x134>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4e90:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    4e92:	05ff      	lsls	r7, r7, #23
    4e94:	0dff      	lsrs	r7, r7, #23
    4e96:	e001      	b.n	4e9c <trx_sram_read+0x138>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4e98:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    4e9a:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    4e9c:	702f      	strb	r7, [r5, #0]
		data++;
    4e9e:	3501      	adds	r5, #1
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    4ea0:	45ac      	cmp	ip, r5
    4ea2:	d001      	beq.n	4ea8 <trx_sram_read+0x144>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4ea4:	6833      	ldr	r3, [r6, #0]
    4ea6:	e7da      	b.n	4e5e <trx_sram_read+0xfa>
		*data = temp;
		data++;
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4ea8:	2200      	movs	r2, #0
    4eaa:	490d      	ldr	r1, [pc, #52]	; (4ee0 <trx_sram_read+0x17c>)
    4eac:	480b      	ldr	r0, [pc, #44]	; (4edc <trx_sram_read+0x178>)
    4eae:	4b0d      	ldr	r3, [pc, #52]	; (4ee4 <trx_sram_read+0x180>)
    4eb0:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    4eb2:	23ff      	movs	r3, #255	; 0xff
    4eb4:	4642      	mov	r2, r8
    4eb6:	4213      	tst	r3, r2
    4eb8:	d005      	beq.n	4ec6 <trx_sram_read+0x162>
		cpu_irq_enable();
    4eba:	2201      	movs	r2, #1
    4ebc:	4b06      	ldr	r3, [pc, #24]	; (4ed8 <trx_sram_read+0x174>)
    4ebe:	701a      	strb	r2, [r3, #0]
    4ec0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    4ec4:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    4ec6:	b002      	add	sp, #8
    4ec8:	bc1c      	pop	{r2, r3, r4}
    4eca:	4690      	mov	r8, r2
    4ecc:	4699      	mov	r9, r3
    4ece:	46a2      	mov	sl, r4
    4ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ed2:	46c0      	nop			; (mov r8, r8)
    4ed4:	000023f5 	.word	0x000023f5
    4ed8:	20000028 	.word	0x20000028
    4edc:	200006c0 	.word	0x200006c0
    4ee0:	20000684 	.word	0x20000684
    4ee4:	00002f45 	.word	0x00002f45
    4ee8:	2000067c 	.word	0x2000067c

00004eec <trx_aes_wrrd>:
 * @param addr Start address in the SRAM for the write operation
 * @param idata Pointer to the data written/read into/from SRAM
 * @param length Number of bytes written/read into/from SRAM
 */
void trx_aes_wrrd(uint8_t addr, uint8_t *idata, uint8_t length)
{
    4eec:	b5f0      	push	{r4, r5, r6, r7, lr}
    4eee:	4657      	mov	r7, sl
    4ef0:	464e      	mov	r6, r9
    4ef2:	4645      	mov	r5, r8
    4ef4:	b4e0      	push	{r5, r6, r7}
    4ef6:	0006      	movs	r6, r0
    4ef8:	468a      	mov	sl, r1
    4efa:	0014      	movs	r4, r2
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t odata_var = 0;
#endif
	uint8_t temp;

	delay_us(1); /* wap_rf4ce */
    4efc:	2001      	movs	r0, #1
    4efe:	4b76      	ldr	r3, [pc, #472]	; (50d8 <trx_aes_wrrd+0x1ec>)
    4f00:	4798      	blx	r3

	ENTER_TRX_REGION();
    4f02:	2100      	movs	r1, #0
    4f04:	2000      	movs	r0, #0
    4f06:	4b75      	ldr	r3, [pc, #468]	; (50dc <trx_aes_wrrd+0x1f0>)
    4f08:	4798      	blx	r3
		/* wait until SPI gets available */
	}
#endif
#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4f0a:	4f75      	ldr	r7, [pc, #468]	; (50e0 <trx_aes_wrrd+0x1f4>)
    4f0c:	2201      	movs	r2, #1
    4f0e:	4975      	ldr	r1, [pc, #468]	; (50e4 <trx_aes_wrrd+0x1f8>)
    4f10:	0038      	movs	r0, r7
    4f12:	4b75      	ldr	r3, [pc, #468]	; (50e8 <trx_aes_wrrd+0x1fc>)
    4f14:	4798      	blx	r3
    4f16:	683b      	ldr	r3, [r7, #0]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	while (!spi_is_ready_to_write(&master)) {
    4f18:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4f1a:	7e1a      	ldrb	r2, [r3, #24]
    4f1c:	420a      	tst	r2, r1
    4f1e:	d0fc      	beq.n	4f1a <trx_aes_wrrd+0x2e>
    4f20:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4f22:	07d2      	lsls	r2, r2, #31
    4f24:	d501      	bpl.n	4f2a <trx_aes_wrrd+0x3e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4f26:	2240      	movs	r2, #64	; 0x40
    4f28:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    4f2a:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4f2c:	7e1a      	ldrb	r2, [r3, #24]
    4f2e:	420a      	tst	r2, r1
    4f30:	d0fc      	beq.n	4f2c <trx_aes_wrrd+0x40>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4f32:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4f34:	7e1a      	ldrb	r2, [r3, #24]
    4f36:	420a      	tst	r2, r1
    4f38:	d0fc      	beq.n	4f34 <trx_aes_wrrd+0x48>
    4f3a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4f3c:	0752      	lsls	r2, r2, #29
    4f3e:	d512      	bpl.n	4f66 <trx_aes_wrrd+0x7a>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4f40:	8b5a      	ldrh	r2, [r3, #26]
    4f42:	0752      	lsls	r2, r2, #29
    4f44:	d501      	bpl.n	4f4a <trx_aes_wrrd+0x5e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4f46:	2204      	movs	r2, #4
    4f48:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4f4a:	4a65      	ldr	r2, [pc, #404]	; (50e0 <trx_aes_wrrd+0x1f4>)
    4f4c:	7992      	ldrb	r2, [r2, #6]
    4f4e:	2a01      	cmp	r2, #1
    4f50:	d105      	bne.n	4f5e <trx_aes_wrrd+0x72>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4f52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4f54:	05d2      	lsls	r2, r2, #23
    4f56:	0dd2      	lsrs	r2, r2, #23
    4f58:	4964      	ldr	r1, [pc, #400]	; (50ec <trx_aes_wrrd+0x200>)
    4f5a:	800a      	strh	r2, [r1, #0]
    4f5c:	e003      	b.n	4f66 <trx_aes_wrrd+0x7a>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4f5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4f60:	b2d2      	uxtb	r2, r2
    4f62:	4962      	ldr	r1, [pc, #392]	; (50ec <trx_aes_wrrd+0x200>)
    4f64:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* write SRAM start address */
	while (!spi_is_ready_to_write(&master)) {
    4f66:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4f68:	7e1a      	ldrb	r2, [r3, #24]
    4f6a:	420a      	tst	r2, r1
    4f6c:	d0fc      	beq.n	4f68 <trx_aes_wrrd+0x7c>
    4f6e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4f70:	07d2      	lsls	r2, r2, #31
    4f72:	d500      	bpl.n	4f76 <trx_aes_wrrd+0x8a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4f74:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    4f76:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4f78:	7e1a      	ldrb	r2, [r3, #24]
    4f7a:	420a      	tst	r2, r1
    4f7c:	d0fc      	beq.n	4f78 <trx_aes_wrrd+0x8c>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4f7e:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4f80:	7e1a      	ldrb	r2, [r3, #24]
    4f82:	420a      	tst	r2, r1
    4f84:	d0fc      	beq.n	4f80 <trx_aes_wrrd+0x94>
    4f86:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4f88:	0752      	lsls	r2, r2, #29
    4f8a:	d512      	bpl.n	4fb2 <trx_aes_wrrd+0xc6>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4f8c:	8b5a      	ldrh	r2, [r3, #26]
    4f8e:	0752      	lsls	r2, r2, #29
    4f90:	d501      	bpl.n	4f96 <trx_aes_wrrd+0xaa>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4f92:	2204      	movs	r2, #4
    4f94:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4f96:	4a52      	ldr	r2, [pc, #328]	; (50e0 <trx_aes_wrrd+0x1f4>)
    4f98:	7992      	ldrb	r2, [r2, #6]
    4f9a:	2a01      	cmp	r2, #1
    4f9c:	d105      	bne.n	4faa <trx_aes_wrrd+0xbe>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4f9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4fa0:	05d2      	lsls	r2, r2, #23
    4fa2:	0dd2      	lsrs	r2, r2, #23
    4fa4:	4951      	ldr	r1, [pc, #324]	; (50ec <trx_aes_wrrd+0x200>)
    4fa6:	800a      	strh	r2, [r1, #0]
    4fa8:	e003      	b.n	4fb2 <trx_aes_wrrd+0xc6>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4faa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4fac:	b2d2      	uxtb	r2, r2
    4fae:	494f      	ldr	r1, [pc, #316]	; (50ec <trx_aes_wrrd+0x200>)
    4fb0:	800a      	strh	r2, [r1, #0]

	/* now transfer data */
	odata = idata;

	/* write data byte 0 - the obtained value in SPDR is meaningless */
	while (!spi_is_ready_to_write(&master)) {
    4fb2:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4fb4:	7e1a      	ldrb	r2, [r3, #24]
    4fb6:	420a      	tst	r2, r1
    4fb8:	d0fc      	beq.n	4fb4 <trx_aes_wrrd+0xc8>
    4fba:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4fbc:	07d2      	lsls	r2, r2, #31
    4fbe:	d502      	bpl.n	4fc6 <trx_aes_wrrd+0xda>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4fc0:	4652      	mov	r2, sl
    4fc2:	7812      	ldrb	r2, [r2, #0]
    4fc4:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, *idata++);
	while (!spi_is_write_complete(&master)) {
    4fc6:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4fc8:	7e1a      	ldrb	r2, [r3, #24]
    4fca:	420a      	tst	r2, r1
    4fcc:	d0fc      	beq.n	4fc8 <trx_aes_wrrd+0xdc>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4fce:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4fd0:	7e1a      	ldrb	r2, [r3, #24]
    4fd2:	420a      	tst	r2, r1
    4fd4:	d0fc      	beq.n	4fd0 <trx_aes_wrrd+0xe4>
    4fd6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4fd8:	0752      	lsls	r2, r2, #29
    4fda:	d512      	bpl.n	5002 <trx_aes_wrrd+0x116>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4fdc:	8b5a      	ldrh	r2, [r3, #26]
    4fde:	0752      	lsls	r2, r2, #29
    4fe0:	d501      	bpl.n	4fe6 <trx_aes_wrrd+0xfa>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4fe2:	2204      	movs	r2, #4
    4fe4:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4fe6:	4a3e      	ldr	r2, [pc, #248]	; (50e0 <trx_aes_wrrd+0x1f4>)
    4fe8:	7992      	ldrb	r2, [r2, #6]
    4fea:	2a01      	cmp	r2, #1
    4fec:	d105      	bne.n	4ffa <trx_aes_wrrd+0x10e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4ff0:	05db      	lsls	r3, r3, #23
    4ff2:	0ddb      	lsrs	r3, r3, #23
    4ff4:	4a3d      	ldr	r2, [pc, #244]	; (50ec <trx_aes_wrrd+0x200>)
    4ff6:	8013      	strh	r3, [r2, #0]
    4ff8:	e003      	b.n	5002 <trx_aes_wrrd+0x116>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4ffc:	b2db      	uxtb	r3, r3
    4ffe:	4a3b      	ldr	r2, [pc, #236]	; (50ec <trx_aes_wrrd+0x200>)
    5000:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    5002:	2c00      	cmp	r4, #0
    5004:	d031      	beq.n	506a <trx_aes_wrrd+0x17e>
    5006:	4656      	mov	r6, sl
    5008:	3c01      	subs	r4, #1
    500a:	b2e4      	uxtb	r4, r4
    500c:	3401      	adds	r4, #1
    500e:	44a2      	add	sl, r4
    5010:	46d0      	mov	r8, sl
    5012:	2700      	movs	r7, #0
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5014:	4d32      	ldr	r5, [pc, #200]	; (50e0 <trx_aes_wrrd+0x1f4>)
		while (!spi_is_ready_to_write(&master)) {
    5016:	2001      	movs	r0, #1
		}
		spi_write(&master, *idata++);
		while (!spi_is_write_complete(&master)) {
    5018:	2402      	movs	r4, #2
		}
		while (!spi_is_ready_to_read(&master)) {
    501a:	2104      	movs	r1, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    501c:	46a9      	mov	r9, r5
    501e:	e022      	b.n	5066 <trx_aes_wrrd+0x17a>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5020:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
		while (!spi_is_ready_to_write(&master)) {
    5022:	4202      	tst	r2, r0
    5024:	d0fc      	beq.n	5020 <trx_aes_wrrd+0x134>
    5026:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    5028:	4202      	tst	r2, r0
    502a:	d001      	beq.n	5030 <trx_aes_wrrd+0x144>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    502c:	7872      	ldrb	r2, [r6, #1]
    502e:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5030:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, *idata++);
		while (!spi_is_write_complete(&master)) {
    5032:	4222      	tst	r2, r4
    5034:	d0fc      	beq.n	5030 <trx_aes_wrrd+0x144>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5036:	7e1a      	ldrb	r2, [r3, #24]
		}
		while (!spi_is_ready_to_read(&master)) {
    5038:	420a      	tst	r2, r1
    503a:	d0fc      	beq.n	5036 <trx_aes_wrrd+0x14a>
    503c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    503e:	420a      	tst	r2, r1
    5040:	d00d      	beq.n	505e <trx_aes_wrrd+0x172>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5042:	8b5a      	ldrh	r2, [r3, #26]
    5044:	420a      	tst	r2, r1
    5046:	d000      	beq.n	504a <trx_aes_wrrd+0x15e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5048:	8359      	strh	r1, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    504a:	464a      	mov	r2, r9
    504c:	7992      	ldrb	r2, [r2, #6]
    504e:	2a01      	cmp	r2, #1
    5050:	d103      	bne.n	505a <trx_aes_wrrd+0x16e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5052:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    5054:	05ff      	lsls	r7, r7, #23
    5056:	0dff      	lsrs	r7, r7, #23
    5058:	e001      	b.n	505e <trx_aes_wrrd+0x172>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    505a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    505c:	b2ff      	uxtb	r7, r7
		}

#if SAMD || SAMR21 || SAML21 || SAMR30
		spi_read(&master, &odata_var);
		*odata++ = (uint8_t)odata_var;
    505e:	7037      	strb	r7, [r6, #0]
    5060:	3601      	adds	r6, #1
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    5062:	4546      	cmp	r6, r8
    5064:	d002      	beq.n	506c <trx_aes_wrrd+0x180>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5066:	682b      	ldr	r3, [r5, #0]
    5068:	e7da      	b.n	5020 <trx_aes_wrrd+0x134>
    506a:	2700      	movs	r7, #0
    506c:	4b1c      	ldr	r3, [pc, #112]	; (50e0 <trx_aes_wrrd+0x1f4>)
    506e:	681b      	ldr	r3, [r3, #0]
#endif
		length--;
	}

	/* To get the last data byte, write some dummy byte */
	while (!spi_is_ready_to_write(&master)) {
    5070:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5072:	7e1a      	ldrb	r2, [r3, #24]
    5074:	420a      	tst	r2, r1
    5076:	d0fc      	beq.n	5072 <trx_aes_wrrd+0x186>
    5078:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    507a:	07d2      	lsls	r2, r2, #31
    507c:	d501      	bpl.n	5082 <trx_aes_wrrd+0x196>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    507e:	2200      	movs	r2, #0
    5080:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    5082:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5084:	7e1a      	ldrb	r2, [r3, #24]
    5086:	420a      	tst	r2, r1
    5088:	d0fc      	beq.n	5084 <trx_aes_wrrd+0x198>
	}
	while (!spi_is_ready_to_read(&master)) {
    508a:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    508c:	7e1a      	ldrb	r2, [r3, #24]
    508e:	420a      	tst	r2, r1
    5090:	d0fc      	beq.n	508c <trx_aes_wrrd+0x1a0>
    5092:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    5094:	0752      	lsls	r2, r2, #29
    5096:	d50e      	bpl.n	50b6 <trx_aes_wrrd+0x1ca>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5098:	8b5a      	ldrh	r2, [r3, #26]
    509a:	0752      	lsls	r2, r2, #29
    509c:	d501      	bpl.n	50a2 <trx_aes_wrrd+0x1b6>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    509e:	2204      	movs	r2, #4
    50a0:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    50a2:	4a0f      	ldr	r2, [pc, #60]	; (50e0 <trx_aes_wrrd+0x1f4>)
    50a4:	7992      	ldrb	r2, [r2, #6]
    50a6:	2a01      	cmp	r2, #1
    50a8:	d103      	bne.n	50b2 <trx_aes_wrrd+0x1c6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    50aa:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    50ac:	05ff      	lsls	r7, r7, #23
    50ae:	0dff      	lsrs	r7, r7, #23
    50b0:	e001      	b.n	50b6 <trx_aes_wrrd+0x1ca>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    50b2:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    50b4:	b2ff      	uxtb	r7, r7
	}
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_read(&master, &odata_var);
	*odata = (uint8_t)odata_var;
    50b6:	4653      	mov	r3, sl
    50b8:	701f      	strb	r7, [r3, #0]
#else
	spi_read(&master, (uint16_t *)odata);
#endif

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    50ba:	2200      	movs	r2, #0
    50bc:	4909      	ldr	r1, [pc, #36]	; (50e4 <trx_aes_wrrd+0x1f8>)
    50be:	4808      	ldr	r0, [pc, #32]	; (50e0 <trx_aes_wrrd+0x1f4>)
    50c0:	4b09      	ldr	r3, [pc, #36]	; (50e8 <trx_aes_wrrd+0x1fc>)
    50c2:	4798      	blx	r3
	spi_read_packet(AT86RFX_SPI, odata, 1);

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	LEAVE_TRX_REGION();
    50c4:	2100      	movs	r1, #0
    50c6:	2000      	movs	r0, #0
    50c8:	4b09      	ldr	r3, [pc, #36]	; (50f0 <trx_aes_wrrd+0x204>)
    50ca:	4798      	blx	r3
}
    50cc:	bc1c      	pop	{r2, r3, r4}
    50ce:	4690      	mov	r8, r2
    50d0:	4699      	mov	r9, r3
    50d2:	46a2      	mov	sl, r4
    50d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    50d6:	46c0      	nop			; (mov r8, r8)
    50d8:	000023f5 	.word	0x000023f5
    50dc:	000025c5 	.word	0x000025c5
    50e0:	200006c0 	.word	0x200006c0
    50e4:	20000684 	.word	0x20000684
    50e8:	00002f45 	.word	0x00002f45
    50ec:	2000067c 	.word	0x2000067c
    50f0:	000025a5 	.word	0x000025a5

000050f4 <main>:
	{0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0D,0x0A}
};


int main(void)
{	
    50f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    50f6:	4657      	mov	r7, sl
    50f8:	464e      	mov	r6, r9
    50fa:	4645      	mov	r5, r8
    50fc:	b4e0      	push	{r5, r6, r7}
	uint8_t i , TxCount , button_press;
	uint8_t connection_index , TxSynCount2 = 0;
	MIWI_TICK t1 , t2;
	// Hardware Init
	system_init();
    50fe:	4b48      	ldr	r3, [pc, #288]	; (5220 <main+0x12c>)
    5100:	4798      	blx	r3
	delay_init();
    5102:	4b48      	ldr	r3, [pc, #288]	; (5224 <main+0x130>)
    5104:	4798      	blx	r3
	sio2host_init();
    5106:	4b48      	ldr	r3, [pc, #288]	; (5228 <main+0x134>)
    5108:	4798      	blx	r3
	configure_tc();
    510a:	4b48      	ldr	r3, [pc, #288]	; (522c <main+0x138>)
    510c:	4798      	blx	r3
	// Function MiApp_ProtocolInit initialize the protocol stack. The
	// only input parameter indicates if previous network configuration
	// should be restored. In this simple example, we assume that the
	// network starts from scratch.
	/*******************************************************************/
	MiApp_ProtocolInit(false);
    510e:	2000      	movs	r0, #0
    5110:	4b47      	ldr	r3, [pc, #284]	; (5230 <main+0x13c>)
    5112:	4798      	blx	r3
	// Set the Channel 
	MiApp_SetChannel(APP_CHANNEL_SEL);
    5114:	2019      	movs	r0, #25
    5116:	4b47      	ldr	r3, [pc, #284]	; (5234 <main+0x140>)
    5118:	4798      	blx	r3
	//  ENABLE_PREV_CONN:   Only allow connection already exists in
	//                      connection table
	//  ENABL_ACTIVE_SCAN_RSP:  Allow response to Active scan
	//  DISABLE_ALL_CONN:   Disable all connections.
	/*******************************************************************/
	MiApp_ConnectionMode(ENABLE_ALL_CONN);
    511a:	2000      	movs	r0, #0
    511c:	4b46      	ldr	r3, [pc, #280]	; (5238 <main+0x144>)
    511e:	4798      	blx	r3
	// Enable Transceiver Interrupt 
	ENABLE_TRX_IRQ();
    5120:	2100      	movs	r1, #0
    5122:	2000      	movs	r0, #0
    5124:	4b45      	ldr	r3, [pc, #276]	; (523c <main+0x148>)
    5126:	4798      	blx	r3
	// Enable All cpu interrupts 
	cpu_irq_enable();
    5128:	2201      	movs	r2, #1
    512a:	4b45      	ldr	r3, [pc, #276]	; (5240 <main+0x14c>)
    512c:	701a      	strb	r2, [r3, #0]
    512e:	f3bf 8f5f 	dmb	sy
    5132:	b662      	cpsie	i
	uint8_t button  = 0;
	i = MiApp_EstablishConnection(0xFF, CONN_MODE_DIRECT);
    5134:	2100      	movs	r1, #0
    5136:	20ff      	movs	r0, #255	; 0xff
    5138:	4b42      	ldr	r3, [pc, #264]	; (5244 <main+0x150>)
    513a:	4798      	blx	r3

	/*******************************************************************/
	// Display current opertion on LCD of demo board, if applicable
	/*******************************************************************/
	if( i != 0xFF )
    513c:	28ff      	cmp	r0, #255	; 0xff
    513e:	d004      	beq.n	514a <main+0x56>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    5140:	2280      	movs	r2, #128	; 0x80
    5142:	0312      	lsls	r2, r2, #12
    5144:	4b40      	ldr	r3, [pc, #256]	; (5248 <main+0x154>)
    5146:	615a      	str	r2, [r3, #20]
    5148:	e008      	b.n	515c <main+0x68>
		//     channel 26. As the result, the bit map is 0x07FFF800. Stack
		//     will filter out all invalid channels, so the application
		//     only needs to pay attention to the channels that are not
		//     preferred.
		/*******************************************************************/
		MiApp_StartConnection(START_CONN_DIRECT, 10, 0);
    514a:	2200      	movs	r2, #0
    514c:	210a      	movs	r1, #10
    514e:	2000      	movs	r0, #0
    5150:	4b3e      	ldr	r3, [pc, #248]	; (524c <main+0x158>)
    5152:	4798      	blx	r3
    5154:	2280      	movs	r2, #128	; 0x80
    5156:	02d2      	lsls	r2, r2, #11
    5158:	4b3b      	ldr	r3, [pc, #236]	; (5248 <main+0x154>)
    515a:	615a      	str	r2, [r3, #20]
		LED_On(LED1);
	}
	t1 = MiWi_TickGet();
    515c:	4b3c      	ldr	r3, [pc, #240]	; (5250 <main+0x15c>)
    515e:	4798      	blx	r3
    5160:	4682      	mov	sl, r0


int main(void)
{	
	uint8_t i , TxCount , button_press;
	uint8_t connection_index , TxSynCount2 = 0;
    5162:	2500      	movs	r5, #0
	// 1.Check for a received Data Packet  2. Check if button is pressed , if pressed Transmit a Unicast Packet to node indexed at 0
	// 3. Every 5 seconds Transmit a Broadcast type packet
	while (1) {
		// Data Packet Available
		
		if (MiApp_MessageAvailable())
    5164:	4f3b      	ldr	r7, [pc, #236]	; (5254 <main+0x160>)
		{
			// if received a data packet toggle led
			LED_Toggle(LED1);
			// UART_Display_Received_Message
			print_rx_message();
    5166:	4b3c      	ldr	r3, [pc, #240]	; (5258 <main+0x164>)
    5168:	4699      	mov	r9, r3
			// Function MiApp_DiscardMessage is used to release the current
			//  received packet.
			// After calling this function, the stack can start to process the
			//  next received frame
			/*******************************************************************/
			MiApp_DiscardMessage();
    516a:	4b3c      	ldr	r3, [pc, #240]	; (525c <main+0x168>)
    516c:	4698      	mov	r8, r3
	// 1.Check for a received Data Packet  2. Check if button is pressed , if pressed Transmit a Unicast Packet to node indexed at 0
	// 3. Every 5 seconds Transmit a Broadcast type packet
	while (1) {
		// Data Packet Available
		
		if (MiApp_MessageAvailable())
    516e:	47b8      	blx	r7
    5170:	2800      	cmp	r0, #0
    5172:	d005      	beq.n	5180 <main+0x8c>
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    5174:	2280      	movs	r2, #128	; 0x80
    5176:	02d2      	lsls	r2, r2, #11
    5178:	4b33      	ldr	r3, [pc, #204]	; (5248 <main+0x154>)
    517a:	61da      	str	r2, [r3, #28]
		{
			// if received a data packet toggle led
			LED_Toggle(LED1);
			// UART_Display_Received_Message
			print_rx_message();
    517c:	47c8      	blx	r9
			// Function MiApp_DiscardMessage is used to release the current
			//  received packet.
			// After calling this function, the stack can start to process the
			//  next received frame
			/*******************************************************************/
			MiApp_DiscardMessage();
    517e:	47c0      	blx	r8

		}
		t2 = MiWi_TickGet();
    5180:	4b33      	ldr	r3, [pc, #204]	; (5250 <main+0x15c>)
    5182:	4798      	blx	r3
    5184:	0004      	movs	r4, r0
		button_press = ButtonPressed();
    5186:	4b36      	ldr	r3, [pc, #216]	; (5260 <main+0x16c>)
    5188:	4798      	blx	r3
		if (button_press)
    518a:	2800      	cmp	r0, #0
    518c:	d020      	beq.n	51d0 <main+0xdc>
    518e:	2280      	movs	r2, #128	; 0x80
    5190:	0312      	lsls	r2, r2, #12
    5192:	4b2d      	ldr	r3, [pc, #180]	; (5248 <main+0x154>)
    5194:	61da      	str	r2, [r3, #28]
			MiApp_FlushTx();
			LED_Toggle(LED0);
			for(i = 0; i < 11; i++)
			{
				// Tx Buffer User Data
				MiApp_WriteData(DE[(TxSynCount2%6)][i]);
    5196:	2106      	movs	r1, #6
    5198:	0028      	movs	r0, r5
    519a:	4b32      	ldr	r3, [pc, #200]	; (5264 <main+0x170>)
    519c:	4798      	blx	r3
    519e:	b2cb      	uxtb	r3, r1
    51a0:	0099      	lsls	r1, r3, #2
    51a2:	18c9      	adds	r1, r1, r3
    51a4:	0049      	lsls	r1, r1, #1
    51a6:	18cb      	adds	r3, r1, r3
    51a8:	492f      	ldr	r1, [pc, #188]	; (5268 <main+0x174>)
    51aa:	18c9      	adds	r1, r1, r3
    51ac:	2300      	movs	r3, #0
    51ae:	482f      	ldr	r0, [pc, #188]	; (526c <main+0x178>)
    51b0:	780a      	ldrb	r2, [r1, #0]
    51b2:	54c2      	strb	r2, [r0, r3]
    51b4:	3301      	adds	r3, #1
    51b6:	b2db      	uxtb	r3, r3
    51b8:	3101      	adds	r1, #1
		button_press = ButtonPressed();
		if (button_press)
		{
			MiApp_FlushTx();
			LED_Toggle(LED0);
			for(i = 0; i < 11; i++)
    51ba:	2b0b      	cmp	r3, #11
    51bc:	d1f8      	bne.n	51b0 <main+0xbc>
    51be:	220b      	movs	r2, #11
    51c0:	4b2b      	ldr	r3, [pc, #172]	; (5270 <main+0x17c>)
    51c2:	701a      	strb	r2, [r3, #0]
			{
				// Tx Buffer User Data
				MiApp_WriteData(DE[(TxSynCount2%6)][i]);
			}
			TxSynCount2++;
    51c4:	3501      	adds	r5, #1
    51c6:	b2ed      	uxtb	r5, r5
			//This function unicasts a message in the TxBuffer to the first connected peer device
			// indexed at 0 in connection table
			MiApp_UnicastConnection(0,true);
    51c8:	2101      	movs	r1, #1
    51ca:	2000      	movs	r0, #0
    51cc:	4b29      	ldr	r3, [pc, #164]	; (5274 <main+0x180>)
    51ce:	4798      	blx	r3
		}
		if( MiWi_TickGetDiff(t2, t1) > (ONE_SECOND * 5) )
    51d0:	4653      	mov	r3, sl
    51d2:	1ae3      	subs	r3, r4, r3
    51d4:	229b      	movs	r2, #155	; 0x9b
    51d6:	0092      	lsls	r2, r2, #2
    51d8:	4293      	cmp	r3, r2
    51da:	d9c8      	bls.n	516e <main+0x7a>
    51dc:	2280      	movs	r2, #128	; 0x80
    51de:	0312      	lsls	r2, r2, #12
    51e0:	4b19      	ldr	r3, [pc, #100]	; (5248 <main+0x154>)
    51e2:	61da      	str	r2, [r3, #28]
			/*******************************************************************/
			MiApp_FlushTx();
			
			for (i = 0 ; i < 21 ; i++)
			{	//Tx_Buffer User Data
				MiApp_WriteData(MiWi_Data[(TxCount%6)][i]);
    51e4:	2106      	movs	r1, #6
    51e6:	0030      	movs	r0, r6
    51e8:	4b1e      	ldr	r3, [pc, #120]	; (5264 <main+0x170>)
    51ea:	4798      	blx	r3
    51ec:	b2c9      	uxtb	r1, r1
    51ee:	004a      	lsls	r2, r1, #1
    51f0:	1852      	adds	r2, r2, r1
    51f2:	00d0      	lsls	r0, r2, #3
    51f4:	1a83      	subs	r3, r0, r2
    51f6:	4a20      	ldr	r2, [pc, #128]	; (5278 <main+0x184>)
    51f8:	18d2      	adds	r2, r2, r3
    51fa:	2300      	movs	r3, #0
    51fc:	481b      	ldr	r0, [pc, #108]	; (526c <main+0x178>)
    51fe:	7811      	ldrb	r1, [r2, #0]
    5200:	54c1      	strb	r1, [r0, r3]
    5202:	3301      	adds	r3, #1
    5204:	b2db      	uxtb	r3, r3
    5206:	3201      	adds	r2, #1
			// the buffer one byte by one byte by calling function
			// MiApp_WriteData
			/*******************************************************************/
			MiApp_FlushTx();
			
			for (i = 0 ; i < 21 ; i++)
    5208:	2b15      	cmp	r3, #21
    520a:	d1f8      	bne.n	51fe <main+0x10a>
    520c:	2215      	movs	r2, #21
    520e:	4b18      	ldr	r3, [pc, #96]	; (5270 <main+0x17c>)
    5210:	701a      	strb	r2, [r3, #0]
			{	//Tx_Buffer User Data
				MiApp_WriteData(MiWi_Data[(TxCount%6)][i]);
				//MiApp_WriteData(0);
			}
			TxCount++;
    5212:	3601      	adds	r6, #1
    5214:	b2f6      	uxtb	r6, r6
			//This function broadcast a message in the TxBuffer.
			MiApp_BroadcastPacket(true);
    5216:	2001      	movs	r0, #1
    5218:	4b18      	ldr	r3, [pc, #96]	; (527c <main+0x188>)
    521a:	4798      	blx	r3
			MiApp_UnicastConnection(0,true);
		}
		if( MiWi_TickGetDiff(t2, t1) > (ONE_SECOND * 5) )
		{
			// Reset the value of t1
			t1 = t2;
    521c:	46a2      	mov	sl, r4
    521e:	e7a6      	b.n	516e <main+0x7a>
    5220:	00003e29 	.word	0x00003e29
    5224:	000023b5 	.word	0x000023b5
    5228:	000044bd 	.word	0x000044bd
    522c:	00002301 	.word	0x00002301
    5230:	0000172d 	.word	0x0000172d
    5234:	00001711 	.word	0x00001711
    5238:	00002129 	.word	0x00002129
    523c:	000025a5 	.word	0x000025a5
    5240:	20000028 	.word	0x20000028
    5244:	00002009 	.word	0x00002009
    5248:	40002800 	.word	0x40002800
    524c:	0000169d 	.word	0x0000169d
    5250:	000023a1 	.word	0x000023a1
    5254:	00001ff1 	.word	0x00001ff1
    5258:	000001b9 	.word	0x000001b9
    525c:	000016f5 	.word	0x000016f5
    5260:	00000115 	.word	0x00000115
    5264:	0000538d 	.word	0x0000538d
    5268:	00006080 	.word	0x00006080
    526c:	200005a0 	.word	0x200005a0
    5270:	20000545 	.word	0x20000545
    5274:	000013d9 	.word	0x000013d9
    5278:	000060c4 	.word	0x000060c4
    527c:	00001399 	.word	0x00001399

00005280 <__aeabi_uidiv>:
    5280:	2200      	movs	r2, #0
    5282:	0843      	lsrs	r3, r0, #1
    5284:	428b      	cmp	r3, r1
    5286:	d374      	bcc.n	5372 <__aeabi_uidiv+0xf2>
    5288:	0903      	lsrs	r3, r0, #4
    528a:	428b      	cmp	r3, r1
    528c:	d35f      	bcc.n	534e <__aeabi_uidiv+0xce>
    528e:	0a03      	lsrs	r3, r0, #8
    5290:	428b      	cmp	r3, r1
    5292:	d344      	bcc.n	531e <__aeabi_uidiv+0x9e>
    5294:	0b03      	lsrs	r3, r0, #12
    5296:	428b      	cmp	r3, r1
    5298:	d328      	bcc.n	52ec <__aeabi_uidiv+0x6c>
    529a:	0c03      	lsrs	r3, r0, #16
    529c:	428b      	cmp	r3, r1
    529e:	d30d      	bcc.n	52bc <__aeabi_uidiv+0x3c>
    52a0:	22ff      	movs	r2, #255	; 0xff
    52a2:	0209      	lsls	r1, r1, #8
    52a4:	ba12      	rev	r2, r2
    52a6:	0c03      	lsrs	r3, r0, #16
    52a8:	428b      	cmp	r3, r1
    52aa:	d302      	bcc.n	52b2 <__aeabi_uidiv+0x32>
    52ac:	1212      	asrs	r2, r2, #8
    52ae:	0209      	lsls	r1, r1, #8
    52b0:	d065      	beq.n	537e <__aeabi_uidiv+0xfe>
    52b2:	0b03      	lsrs	r3, r0, #12
    52b4:	428b      	cmp	r3, r1
    52b6:	d319      	bcc.n	52ec <__aeabi_uidiv+0x6c>
    52b8:	e000      	b.n	52bc <__aeabi_uidiv+0x3c>
    52ba:	0a09      	lsrs	r1, r1, #8
    52bc:	0bc3      	lsrs	r3, r0, #15
    52be:	428b      	cmp	r3, r1
    52c0:	d301      	bcc.n	52c6 <__aeabi_uidiv+0x46>
    52c2:	03cb      	lsls	r3, r1, #15
    52c4:	1ac0      	subs	r0, r0, r3
    52c6:	4152      	adcs	r2, r2
    52c8:	0b83      	lsrs	r3, r0, #14
    52ca:	428b      	cmp	r3, r1
    52cc:	d301      	bcc.n	52d2 <__aeabi_uidiv+0x52>
    52ce:	038b      	lsls	r3, r1, #14
    52d0:	1ac0      	subs	r0, r0, r3
    52d2:	4152      	adcs	r2, r2
    52d4:	0b43      	lsrs	r3, r0, #13
    52d6:	428b      	cmp	r3, r1
    52d8:	d301      	bcc.n	52de <__aeabi_uidiv+0x5e>
    52da:	034b      	lsls	r3, r1, #13
    52dc:	1ac0      	subs	r0, r0, r3
    52de:	4152      	adcs	r2, r2
    52e0:	0b03      	lsrs	r3, r0, #12
    52e2:	428b      	cmp	r3, r1
    52e4:	d301      	bcc.n	52ea <__aeabi_uidiv+0x6a>
    52e6:	030b      	lsls	r3, r1, #12
    52e8:	1ac0      	subs	r0, r0, r3
    52ea:	4152      	adcs	r2, r2
    52ec:	0ac3      	lsrs	r3, r0, #11
    52ee:	428b      	cmp	r3, r1
    52f0:	d301      	bcc.n	52f6 <__aeabi_uidiv+0x76>
    52f2:	02cb      	lsls	r3, r1, #11
    52f4:	1ac0      	subs	r0, r0, r3
    52f6:	4152      	adcs	r2, r2
    52f8:	0a83      	lsrs	r3, r0, #10
    52fa:	428b      	cmp	r3, r1
    52fc:	d301      	bcc.n	5302 <__aeabi_uidiv+0x82>
    52fe:	028b      	lsls	r3, r1, #10
    5300:	1ac0      	subs	r0, r0, r3
    5302:	4152      	adcs	r2, r2
    5304:	0a43      	lsrs	r3, r0, #9
    5306:	428b      	cmp	r3, r1
    5308:	d301      	bcc.n	530e <__aeabi_uidiv+0x8e>
    530a:	024b      	lsls	r3, r1, #9
    530c:	1ac0      	subs	r0, r0, r3
    530e:	4152      	adcs	r2, r2
    5310:	0a03      	lsrs	r3, r0, #8
    5312:	428b      	cmp	r3, r1
    5314:	d301      	bcc.n	531a <__aeabi_uidiv+0x9a>
    5316:	020b      	lsls	r3, r1, #8
    5318:	1ac0      	subs	r0, r0, r3
    531a:	4152      	adcs	r2, r2
    531c:	d2cd      	bcs.n	52ba <__aeabi_uidiv+0x3a>
    531e:	09c3      	lsrs	r3, r0, #7
    5320:	428b      	cmp	r3, r1
    5322:	d301      	bcc.n	5328 <__aeabi_uidiv+0xa8>
    5324:	01cb      	lsls	r3, r1, #7
    5326:	1ac0      	subs	r0, r0, r3
    5328:	4152      	adcs	r2, r2
    532a:	0983      	lsrs	r3, r0, #6
    532c:	428b      	cmp	r3, r1
    532e:	d301      	bcc.n	5334 <__aeabi_uidiv+0xb4>
    5330:	018b      	lsls	r3, r1, #6
    5332:	1ac0      	subs	r0, r0, r3
    5334:	4152      	adcs	r2, r2
    5336:	0943      	lsrs	r3, r0, #5
    5338:	428b      	cmp	r3, r1
    533a:	d301      	bcc.n	5340 <__aeabi_uidiv+0xc0>
    533c:	014b      	lsls	r3, r1, #5
    533e:	1ac0      	subs	r0, r0, r3
    5340:	4152      	adcs	r2, r2
    5342:	0903      	lsrs	r3, r0, #4
    5344:	428b      	cmp	r3, r1
    5346:	d301      	bcc.n	534c <__aeabi_uidiv+0xcc>
    5348:	010b      	lsls	r3, r1, #4
    534a:	1ac0      	subs	r0, r0, r3
    534c:	4152      	adcs	r2, r2
    534e:	08c3      	lsrs	r3, r0, #3
    5350:	428b      	cmp	r3, r1
    5352:	d301      	bcc.n	5358 <__aeabi_uidiv+0xd8>
    5354:	00cb      	lsls	r3, r1, #3
    5356:	1ac0      	subs	r0, r0, r3
    5358:	4152      	adcs	r2, r2
    535a:	0883      	lsrs	r3, r0, #2
    535c:	428b      	cmp	r3, r1
    535e:	d301      	bcc.n	5364 <__aeabi_uidiv+0xe4>
    5360:	008b      	lsls	r3, r1, #2
    5362:	1ac0      	subs	r0, r0, r3
    5364:	4152      	adcs	r2, r2
    5366:	0843      	lsrs	r3, r0, #1
    5368:	428b      	cmp	r3, r1
    536a:	d301      	bcc.n	5370 <__aeabi_uidiv+0xf0>
    536c:	004b      	lsls	r3, r1, #1
    536e:	1ac0      	subs	r0, r0, r3
    5370:	4152      	adcs	r2, r2
    5372:	1a41      	subs	r1, r0, r1
    5374:	d200      	bcs.n	5378 <__aeabi_uidiv+0xf8>
    5376:	4601      	mov	r1, r0
    5378:	4152      	adcs	r2, r2
    537a:	4610      	mov	r0, r2
    537c:	4770      	bx	lr
    537e:	e7ff      	b.n	5380 <__aeabi_uidiv+0x100>
    5380:	b501      	push	{r0, lr}
    5382:	2000      	movs	r0, #0
    5384:	f000 f8f0 	bl	5568 <__aeabi_idiv0>
    5388:	bd02      	pop	{r1, pc}
    538a:	46c0      	nop			; (mov r8, r8)

0000538c <__aeabi_uidivmod>:
    538c:	2900      	cmp	r1, #0
    538e:	d0f7      	beq.n	5380 <__aeabi_uidiv+0x100>
    5390:	e776      	b.n	5280 <__aeabi_uidiv>
    5392:	4770      	bx	lr

00005394 <__aeabi_idiv>:
    5394:	4603      	mov	r3, r0
    5396:	430b      	orrs	r3, r1
    5398:	d47f      	bmi.n	549a <__aeabi_idiv+0x106>
    539a:	2200      	movs	r2, #0
    539c:	0843      	lsrs	r3, r0, #1
    539e:	428b      	cmp	r3, r1
    53a0:	d374      	bcc.n	548c <__aeabi_idiv+0xf8>
    53a2:	0903      	lsrs	r3, r0, #4
    53a4:	428b      	cmp	r3, r1
    53a6:	d35f      	bcc.n	5468 <__aeabi_idiv+0xd4>
    53a8:	0a03      	lsrs	r3, r0, #8
    53aa:	428b      	cmp	r3, r1
    53ac:	d344      	bcc.n	5438 <__aeabi_idiv+0xa4>
    53ae:	0b03      	lsrs	r3, r0, #12
    53b0:	428b      	cmp	r3, r1
    53b2:	d328      	bcc.n	5406 <__aeabi_idiv+0x72>
    53b4:	0c03      	lsrs	r3, r0, #16
    53b6:	428b      	cmp	r3, r1
    53b8:	d30d      	bcc.n	53d6 <__aeabi_idiv+0x42>
    53ba:	22ff      	movs	r2, #255	; 0xff
    53bc:	0209      	lsls	r1, r1, #8
    53be:	ba12      	rev	r2, r2
    53c0:	0c03      	lsrs	r3, r0, #16
    53c2:	428b      	cmp	r3, r1
    53c4:	d302      	bcc.n	53cc <__aeabi_idiv+0x38>
    53c6:	1212      	asrs	r2, r2, #8
    53c8:	0209      	lsls	r1, r1, #8
    53ca:	d065      	beq.n	5498 <__aeabi_idiv+0x104>
    53cc:	0b03      	lsrs	r3, r0, #12
    53ce:	428b      	cmp	r3, r1
    53d0:	d319      	bcc.n	5406 <__aeabi_idiv+0x72>
    53d2:	e000      	b.n	53d6 <__aeabi_idiv+0x42>
    53d4:	0a09      	lsrs	r1, r1, #8
    53d6:	0bc3      	lsrs	r3, r0, #15
    53d8:	428b      	cmp	r3, r1
    53da:	d301      	bcc.n	53e0 <__aeabi_idiv+0x4c>
    53dc:	03cb      	lsls	r3, r1, #15
    53de:	1ac0      	subs	r0, r0, r3
    53e0:	4152      	adcs	r2, r2
    53e2:	0b83      	lsrs	r3, r0, #14
    53e4:	428b      	cmp	r3, r1
    53e6:	d301      	bcc.n	53ec <__aeabi_idiv+0x58>
    53e8:	038b      	lsls	r3, r1, #14
    53ea:	1ac0      	subs	r0, r0, r3
    53ec:	4152      	adcs	r2, r2
    53ee:	0b43      	lsrs	r3, r0, #13
    53f0:	428b      	cmp	r3, r1
    53f2:	d301      	bcc.n	53f8 <__aeabi_idiv+0x64>
    53f4:	034b      	lsls	r3, r1, #13
    53f6:	1ac0      	subs	r0, r0, r3
    53f8:	4152      	adcs	r2, r2
    53fa:	0b03      	lsrs	r3, r0, #12
    53fc:	428b      	cmp	r3, r1
    53fe:	d301      	bcc.n	5404 <__aeabi_idiv+0x70>
    5400:	030b      	lsls	r3, r1, #12
    5402:	1ac0      	subs	r0, r0, r3
    5404:	4152      	adcs	r2, r2
    5406:	0ac3      	lsrs	r3, r0, #11
    5408:	428b      	cmp	r3, r1
    540a:	d301      	bcc.n	5410 <__aeabi_idiv+0x7c>
    540c:	02cb      	lsls	r3, r1, #11
    540e:	1ac0      	subs	r0, r0, r3
    5410:	4152      	adcs	r2, r2
    5412:	0a83      	lsrs	r3, r0, #10
    5414:	428b      	cmp	r3, r1
    5416:	d301      	bcc.n	541c <__aeabi_idiv+0x88>
    5418:	028b      	lsls	r3, r1, #10
    541a:	1ac0      	subs	r0, r0, r3
    541c:	4152      	adcs	r2, r2
    541e:	0a43      	lsrs	r3, r0, #9
    5420:	428b      	cmp	r3, r1
    5422:	d301      	bcc.n	5428 <__aeabi_idiv+0x94>
    5424:	024b      	lsls	r3, r1, #9
    5426:	1ac0      	subs	r0, r0, r3
    5428:	4152      	adcs	r2, r2
    542a:	0a03      	lsrs	r3, r0, #8
    542c:	428b      	cmp	r3, r1
    542e:	d301      	bcc.n	5434 <__aeabi_idiv+0xa0>
    5430:	020b      	lsls	r3, r1, #8
    5432:	1ac0      	subs	r0, r0, r3
    5434:	4152      	adcs	r2, r2
    5436:	d2cd      	bcs.n	53d4 <__aeabi_idiv+0x40>
    5438:	09c3      	lsrs	r3, r0, #7
    543a:	428b      	cmp	r3, r1
    543c:	d301      	bcc.n	5442 <__aeabi_idiv+0xae>
    543e:	01cb      	lsls	r3, r1, #7
    5440:	1ac0      	subs	r0, r0, r3
    5442:	4152      	adcs	r2, r2
    5444:	0983      	lsrs	r3, r0, #6
    5446:	428b      	cmp	r3, r1
    5448:	d301      	bcc.n	544e <__aeabi_idiv+0xba>
    544a:	018b      	lsls	r3, r1, #6
    544c:	1ac0      	subs	r0, r0, r3
    544e:	4152      	adcs	r2, r2
    5450:	0943      	lsrs	r3, r0, #5
    5452:	428b      	cmp	r3, r1
    5454:	d301      	bcc.n	545a <__aeabi_idiv+0xc6>
    5456:	014b      	lsls	r3, r1, #5
    5458:	1ac0      	subs	r0, r0, r3
    545a:	4152      	adcs	r2, r2
    545c:	0903      	lsrs	r3, r0, #4
    545e:	428b      	cmp	r3, r1
    5460:	d301      	bcc.n	5466 <__aeabi_idiv+0xd2>
    5462:	010b      	lsls	r3, r1, #4
    5464:	1ac0      	subs	r0, r0, r3
    5466:	4152      	adcs	r2, r2
    5468:	08c3      	lsrs	r3, r0, #3
    546a:	428b      	cmp	r3, r1
    546c:	d301      	bcc.n	5472 <__aeabi_idiv+0xde>
    546e:	00cb      	lsls	r3, r1, #3
    5470:	1ac0      	subs	r0, r0, r3
    5472:	4152      	adcs	r2, r2
    5474:	0883      	lsrs	r3, r0, #2
    5476:	428b      	cmp	r3, r1
    5478:	d301      	bcc.n	547e <__aeabi_idiv+0xea>
    547a:	008b      	lsls	r3, r1, #2
    547c:	1ac0      	subs	r0, r0, r3
    547e:	4152      	adcs	r2, r2
    5480:	0843      	lsrs	r3, r0, #1
    5482:	428b      	cmp	r3, r1
    5484:	d301      	bcc.n	548a <__aeabi_idiv+0xf6>
    5486:	004b      	lsls	r3, r1, #1
    5488:	1ac0      	subs	r0, r0, r3
    548a:	4152      	adcs	r2, r2
    548c:	1a41      	subs	r1, r0, r1
    548e:	d200      	bcs.n	5492 <__aeabi_idiv+0xfe>
    5490:	4601      	mov	r1, r0
    5492:	4152      	adcs	r2, r2
    5494:	4610      	mov	r0, r2
    5496:	4770      	bx	lr
    5498:	e05d      	b.n	5556 <__aeabi_idiv+0x1c2>
    549a:	0fca      	lsrs	r2, r1, #31
    549c:	d000      	beq.n	54a0 <__aeabi_idiv+0x10c>
    549e:	4249      	negs	r1, r1
    54a0:	1003      	asrs	r3, r0, #32
    54a2:	d300      	bcc.n	54a6 <__aeabi_idiv+0x112>
    54a4:	4240      	negs	r0, r0
    54a6:	4053      	eors	r3, r2
    54a8:	2200      	movs	r2, #0
    54aa:	469c      	mov	ip, r3
    54ac:	0903      	lsrs	r3, r0, #4
    54ae:	428b      	cmp	r3, r1
    54b0:	d32d      	bcc.n	550e <__aeabi_idiv+0x17a>
    54b2:	0a03      	lsrs	r3, r0, #8
    54b4:	428b      	cmp	r3, r1
    54b6:	d312      	bcc.n	54de <__aeabi_idiv+0x14a>
    54b8:	22fc      	movs	r2, #252	; 0xfc
    54ba:	0189      	lsls	r1, r1, #6
    54bc:	ba12      	rev	r2, r2
    54be:	0a03      	lsrs	r3, r0, #8
    54c0:	428b      	cmp	r3, r1
    54c2:	d30c      	bcc.n	54de <__aeabi_idiv+0x14a>
    54c4:	0189      	lsls	r1, r1, #6
    54c6:	1192      	asrs	r2, r2, #6
    54c8:	428b      	cmp	r3, r1
    54ca:	d308      	bcc.n	54de <__aeabi_idiv+0x14a>
    54cc:	0189      	lsls	r1, r1, #6
    54ce:	1192      	asrs	r2, r2, #6
    54d0:	428b      	cmp	r3, r1
    54d2:	d304      	bcc.n	54de <__aeabi_idiv+0x14a>
    54d4:	0189      	lsls	r1, r1, #6
    54d6:	d03a      	beq.n	554e <__aeabi_idiv+0x1ba>
    54d8:	1192      	asrs	r2, r2, #6
    54da:	e000      	b.n	54de <__aeabi_idiv+0x14a>
    54dc:	0989      	lsrs	r1, r1, #6
    54de:	09c3      	lsrs	r3, r0, #7
    54e0:	428b      	cmp	r3, r1
    54e2:	d301      	bcc.n	54e8 <__aeabi_idiv+0x154>
    54e4:	01cb      	lsls	r3, r1, #7
    54e6:	1ac0      	subs	r0, r0, r3
    54e8:	4152      	adcs	r2, r2
    54ea:	0983      	lsrs	r3, r0, #6
    54ec:	428b      	cmp	r3, r1
    54ee:	d301      	bcc.n	54f4 <__aeabi_idiv+0x160>
    54f0:	018b      	lsls	r3, r1, #6
    54f2:	1ac0      	subs	r0, r0, r3
    54f4:	4152      	adcs	r2, r2
    54f6:	0943      	lsrs	r3, r0, #5
    54f8:	428b      	cmp	r3, r1
    54fa:	d301      	bcc.n	5500 <__aeabi_idiv+0x16c>
    54fc:	014b      	lsls	r3, r1, #5
    54fe:	1ac0      	subs	r0, r0, r3
    5500:	4152      	adcs	r2, r2
    5502:	0903      	lsrs	r3, r0, #4
    5504:	428b      	cmp	r3, r1
    5506:	d301      	bcc.n	550c <__aeabi_idiv+0x178>
    5508:	010b      	lsls	r3, r1, #4
    550a:	1ac0      	subs	r0, r0, r3
    550c:	4152      	adcs	r2, r2
    550e:	08c3      	lsrs	r3, r0, #3
    5510:	428b      	cmp	r3, r1
    5512:	d301      	bcc.n	5518 <__aeabi_idiv+0x184>
    5514:	00cb      	lsls	r3, r1, #3
    5516:	1ac0      	subs	r0, r0, r3
    5518:	4152      	adcs	r2, r2
    551a:	0883      	lsrs	r3, r0, #2
    551c:	428b      	cmp	r3, r1
    551e:	d301      	bcc.n	5524 <__aeabi_idiv+0x190>
    5520:	008b      	lsls	r3, r1, #2
    5522:	1ac0      	subs	r0, r0, r3
    5524:	4152      	adcs	r2, r2
    5526:	d2d9      	bcs.n	54dc <__aeabi_idiv+0x148>
    5528:	0843      	lsrs	r3, r0, #1
    552a:	428b      	cmp	r3, r1
    552c:	d301      	bcc.n	5532 <__aeabi_idiv+0x19e>
    552e:	004b      	lsls	r3, r1, #1
    5530:	1ac0      	subs	r0, r0, r3
    5532:	4152      	adcs	r2, r2
    5534:	1a41      	subs	r1, r0, r1
    5536:	d200      	bcs.n	553a <__aeabi_idiv+0x1a6>
    5538:	4601      	mov	r1, r0
    553a:	4663      	mov	r3, ip
    553c:	4152      	adcs	r2, r2
    553e:	105b      	asrs	r3, r3, #1
    5540:	4610      	mov	r0, r2
    5542:	d301      	bcc.n	5548 <__aeabi_idiv+0x1b4>
    5544:	4240      	negs	r0, r0
    5546:	2b00      	cmp	r3, #0
    5548:	d500      	bpl.n	554c <__aeabi_idiv+0x1b8>
    554a:	4249      	negs	r1, r1
    554c:	4770      	bx	lr
    554e:	4663      	mov	r3, ip
    5550:	105b      	asrs	r3, r3, #1
    5552:	d300      	bcc.n	5556 <__aeabi_idiv+0x1c2>
    5554:	4240      	negs	r0, r0
    5556:	b501      	push	{r0, lr}
    5558:	2000      	movs	r0, #0
    555a:	f000 f805 	bl	5568 <__aeabi_idiv0>
    555e:	bd02      	pop	{r1, pc}

00005560 <__aeabi_idivmod>:
    5560:	2900      	cmp	r1, #0
    5562:	d0f8      	beq.n	5556 <__aeabi_idiv+0x1c2>
    5564:	e716      	b.n	5394 <__aeabi_idiv>
    5566:	4770      	bx	lr

00005568 <__aeabi_idiv0>:
    5568:	4770      	bx	lr
    556a:	46c0      	nop			; (mov r8, r8)

0000556c <__aeabi_lmul>:
    556c:	b5f0      	push	{r4, r5, r6, r7, lr}
    556e:	464f      	mov	r7, r9
    5570:	4646      	mov	r6, r8
    5572:	b4c0      	push	{r6, r7}
    5574:	0416      	lsls	r6, r2, #16
    5576:	0c36      	lsrs	r6, r6, #16
    5578:	4699      	mov	r9, r3
    557a:	0033      	movs	r3, r6
    557c:	0405      	lsls	r5, r0, #16
    557e:	0c2c      	lsrs	r4, r5, #16
    5580:	0c07      	lsrs	r7, r0, #16
    5582:	0c15      	lsrs	r5, r2, #16
    5584:	4363      	muls	r3, r4
    5586:	437e      	muls	r6, r7
    5588:	436f      	muls	r7, r5
    558a:	4365      	muls	r5, r4
    558c:	0c1c      	lsrs	r4, r3, #16
    558e:	19ad      	adds	r5, r5, r6
    5590:	1964      	adds	r4, r4, r5
    5592:	469c      	mov	ip, r3
    5594:	42a6      	cmp	r6, r4
    5596:	d903      	bls.n	55a0 <__aeabi_lmul+0x34>
    5598:	2380      	movs	r3, #128	; 0x80
    559a:	025b      	lsls	r3, r3, #9
    559c:	4698      	mov	r8, r3
    559e:	4447      	add	r7, r8
    55a0:	4663      	mov	r3, ip
    55a2:	0c25      	lsrs	r5, r4, #16
    55a4:	19ef      	adds	r7, r5, r7
    55a6:	041d      	lsls	r5, r3, #16
    55a8:	464b      	mov	r3, r9
    55aa:	434a      	muls	r2, r1
    55ac:	4343      	muls	r3, r0
    55ae:	0c2d      	lsrs	r5, r5, #16
    55b0:	0424      	lsls	r4, r4, #16
    55b2:	1964      	adds	r4, r4, r5
    55b4:	1899      	adds	r1, r3, r2
    55b6:	19c9      	adds	r1, r1, r7
    55b8:	0020      	movs	r0, r4
    55ba:	bc0c      	pop	{r2, r3}
    55bc:	4690      	mov	r8, r2
    55be:	4699      	mov	r9, r3
    55c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    55c2:	46c0      	nop			; (mov r8, r8)

000055c4 <__libc_init_array>:
    55c4:	4b0e      	ldr	r3, [pc, #56]	; (5600 <__libc_init_array+0x3c>)
    55c6:	b570      	push	{r4, r5, r6, lr}
    55c8:	2500      	movs	r5, #0
    55ca:	001e      	movs	r6, r3
    55cc:	4c0d      	ldr	r4, [pc, #52]	; (5604 <__libc_init_array+0x40>)
    55ce:	1ae4      	subs	r4, r4, r3
    55d0:	10a4      	asrs	r4, r4, #2
    55d2:	42a5      	cmp	r5, r4
    55d4:	d004      	beq.n	55e0 <__libc_init_array+0x1c>
    55d6:	00ab      	lsls	r3, r5, #2
    55d8:	58f3      	ldr	r3, [r6, r3]
    55da:	4798      	blx	r3
    55dc:	3501      	adds	r5, #1
    55de:	e7f8      	b.n	55d2 <__libc_init_array+0xe>
    55e0:	f000 fde2 	bl	61a8 <_init>
    55e4:	4b08      	ldr	r3, [pc, #32]	; (5608 <__libc_init_array+0x44>)
    55e6:	2500      	movs	r5, #0
    55e8:	001e      	movs	r6, r3
    55ea:	4c08      	ldr	r4, [pc, #32]	; (560c <__libc_init_array+0x48>)
    55ec:	1ae4      	subs	r4, r4, r3
    55ee:	10a4      	asrs	r4, r4, #2
    55f0:	42a5      	cmp	r5, r4
    55f2:	d004      	beq.n	55fe <__libc_init_array+0x3a>
    55f4:	00ab      	lsls	r3, r5, #2
    55f6:	58f3      	ldr	r3, [r6, r3]
    55f8:	4798      	blx	r3
    55fa:	3501      	adds	r5, #1
    55fc:	e7f8      	b.n	55f0 <__libc_init_array+0x2c>
    55fe:	bd70      	pop	{r4, r5, r6, pc}
    5600:	000061b4 	.word	0x000061b4
    5604:	000061b4 	.word	0x000061b4
    5608:	000061b4 	.word	0x000061b4
    560c:	000061b8 	.word	0x000061b8

00005610 <memcpy>:
    5610:	2300      	movs	r3, #0
    5612:	b510      	push	{r4, lr}
    5614:	429a      	cmp	r2, r3
    5616:	d003      	beq.n	5620 <memcpy+0x10>
    5618:	5ccc      	ldrb	r4, [r1, r3]
    561a:	54c4      	strb	r4, [r0, r3]
    561c:	3301      	adds	r3, #1
    561e:	e7f9      	b.n	5614 <memcpy+0x4>
    5620:	bd10      	pop	{r4, pc}

00005622 <memset>:
    5622:	0003      	movs	r3, r0
    5624:	1882      	adds	r2, r0, r2
    5626:	4293      	cmp	r3, r2
    5628:	d002      	beq.n	5630 <memset+0xe>
    562a:	7019      	strb	r1, [r3, #0]
    562c:	3301      	adds	r3, #1
    562e:	e7fa      	b.n	5626 <memset+0x4>
    5630:	4770      	bx	lr

00005632 <setbuf>:
    5632:	424a      	negs	r2, r1
    5634:	414a      	adcs	r2, r1
    5636:	2380      	movs	r3, #128	; 0x80
    5638:	b510      	push	{r4, lr}
    563a:	0052      	lsls	r2, r2, #1
    563c:	00db      	lsls	r3, r3, #3
    563e:	f000 f801 	bl	5644 <setvbuf>
    5642:	bd10      	pop	{r4, pc}

00005644 <setvbuf>:
    5644:	b5f0      	push	{r4, r5, r6, r7, lr}
    5646:	001d      	movs	r5, r3
    5648:	4b51      	ldr	r3, [pc, #324]	; (5790 <setvbuf+0x14c>)
    564a:	b085      	sub	sp, #20
    564c:	681e      	ldr	r6, [r3, #0]
    564e:	0004      	movs	r4, r0
    5650:	000f      	movs	r7, r1
    5652:	9200      	str	r2, [sp, #0]
    5654:	2e00      	cmp	r6, #0
    5656:	d005      	beq.n	5664 <setvbuf+0x20>
    5658:	69b3      	ldr	r3, [r6, #24]
    565a:	2b00      	cmp	r3, #0
    565c:	d102      	bne.n	5664 <setvbuf+0x20>
    565e:	0030      	movs	r0, r6
    5660:	f000 f994 	bl	598c <__sinit>
    5664:	4b4b      	ldr	r3, [pc, #300]	; (5794 <setvbuf+0x150>)
    5666:	429c      	cmp	r4, r3
    5668:	d101      	bne.n	566e <setvbuf+0x2a>
    566a:	6874      	ldr	r4, [r6, #4]
    566c:	e008      	b.n	5680 <setvbuf+0x3c>
    566e:	4b4a      	ldr	r3, [pc, #296]	; (5798 <setvbuf+0x154>)
    5670:	429c      	cmp	r4, r3
    5672:	d101      	bne.n	5678 <setvbuf+0x34>
    5674:	68b4      	ldr	r4, [r6, #8]
    5676:	e003      	b.n	5680 <setvbuf+0x3c>
    5678:	4b48      	ldr	r3, [pc, #288]	; (579c <setvbuf+0x158>)
    567a:	429c      	cmp	r4, r3
    567c:	d100      	bne.n	5680 <setvbuf+0x3c>
    567e:	68f4      	ldr	r4, [r6, #12]
    5680:	9b00      	ldr	r3, [sp, #0]
    5682:	2b02      	cmp	r3, #2
    5684:	d005      	beq.n	5692 <setvbuf+0x4e>
    5686:	2b01      	cmp	r3, #1
    5688:	d900      	bls.n	568c <setvbuf+0x48>
    568a:	e07c      	b.n	5786 <setvbuf+0x142>
    568c:	2d00      	cmp	r5, #0
    568e:	da00      	bge.n	5692 <setvbuf+0x4e>
    5690:	e079      	b.n	5786 <setvbuf+0x142>
    5692:	0021      	movs	r1, r4
    5694:	0030      	movs	r0, r6
    5696:	f000 f90b 	bl	58b0 <_fflush_r>
    569a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    569c:	2900      	cmp	r1, #0
    569e:	d008      	beq.n	56b2 <setvbuf+0x6e>
    56a0:	0023      	movs	r3, r4
    56a2:	3344      	adds	r3, #68	; 0x44
    56a4:	4299      	cmp	r1, r3
    56a6:	d002      	beq.n	56ae <setvbuf+0x6a>
    56a8:	0030      	movs	r0, r6
    56aa:	f000 fa33 	bl	5b14 <_free_r>
    56ae:	2300      	movs	r3, #0
    56b0:	6363      	str	r3, [r4, #52]	; 0x34
    56b2:	2300      	movs	r3, #0
    56b4:	61a3      	str	r3, [r4, #24]
    56b6:	6063      	str	r3, [r4, #4]
    56b8:	89a3      	ldrh	r3, [r4, #12]
    56ba:	061b      	lsls	r3, r3, #24
    56bc:	d503      	bpl.n	56c6 <setvbuf+0x82>
    56be:	6921      	ldr	r1, [r4, #16]
    56c0:	0030      	movs	r0, r6
    56c2:	f000 fa27 	bl	5b14 <_free_r>
    56c6:	89a2      	ldrh	r2, [r4, #12]
    56c8:	4b35      	ldr	r3, [pc, #212]	; (57a0 <setvbuf+0x15c>)
    56ca:	4013      	ands	r3, r2
    56cc:	81a3      	strh	r3, [r4, #12]
    56ce:	9b00      	ldr	r3, [sp, #0]
    56d0:	2b02      	cmp	r3, #2
    56d2:	d021      	beq.n	5718 <setvbuf+0xd4>
    56d4:	ab03      	add	r3, sp, #12
    56d6:	aa02      	add	r2, sp, #8
    56d8:	0021      	movs	r1, r4
    56da:	0030      	movs	r0, r6
    56dc:	f000 f9ea 	bl	5ab4 <__swhatbuf_r>
    56e0:	89a3      	ldrh	r3, [r4, #12]
    56e2:	4318      	orrs	r0, r3
    56e4:	81a0      	strh	r0, [r4, #12]
    56e6:	2d00      	cmp	r5, #0
    56e8:	d101      	bne.n	56ee <setvbuf+0xaa>
    56ea:	9d02      	ldr	r5, [sp, #8]
    56ec:	e001      	b.n	56f2 <setvbuf+0xae>
    56ee:	2f00      	cmp	r7, #0
    56f0:	d125      	bne.n	573e <setvbuf+0xfa>
    56f2:	0028      	movs	r0, r5
    56f4:	f000 fa04 	bl	5b00 <malloc>
    56f8:	9501      	str	r5, [sp, #4]
    56fa:	1e07      	subs	r7, r0, #0
    56fc:	d11a      	bne.n	5734 <setvbuf+0xf0>
    56fe:	9b02      	ldr	r3, [sp, #8]
    5700:	9301      	str	r3, [sp, #4]
    5702:	42ab      	cmp	r3, r5
    5704:	d102      	bne.n	570c <setvbuf+0xc8>
    5706:	2001      	movs	r0, #1
    5708:	4240      	negs	r0, r0
    570a:	e006      	b.n	571a <setvbuf+0xd6>
    570c:	9801      	ldr	r0, [sp, #4]
    570e:	f000 f9f7 	bl	5b00 <malloc>
    5712:	1e07      	subs	r7, r0, #0
    5714:	d10e      	bne.n	5734 <setvbuf+0xf0>
    5716:	e7f6      	b.n	5706 <setvbuf+0xc2>
    5718:	2000      	movs	r0, #0
    571a:	2202      	movs	r2, #2
    571c:	89a3      	ldrh	r3, [r4, #12]
    571e:	4313      	orrs	r3, r2
    5720:	81a3      	strh	r3, [r4, #12]
    5722:	2300      	movs	r3, #0
    5724:	60a3      	str	r3, [r4, #8]
    5726:	0023      	movs	r3, r4
    5728:	3347      	adds	r3, #71	; 0x47
    572a:	6023      	str	r3, [r4, #0]
    572c:	6123      	str	r3, [r4, #16]
    572e:	2301      	movs	r3, #1
    5730:	6163      	str	r3, [r4, #20]
    5732:	e02a      	b.n	578a <setvbuf+0x146>
    5734:	2280      	movs	r2, #128	; 0x80
    5736:	89a3      	ldrh	r3, [r4, #12]
    5738:	9d01      	ldr	r5, [sp, #4]
    573a:	4313      	orrs	r3, r2
    573c:	81a3      	strh	r3, [r4, #12]
    573e:	69b3      	ldr	r3, [r6, #24]
    5740:	2b00      	cmp	r3, #0
    5742:	d102      	bne.n	574a <setvbuf+0x106>
    5744:	0030      	movs	r0, r6
    5746:	f000 f921 	bl	598c <__sinit>
    574a:	9b00      	ldr	r3, [sp, #0]
    574c:	2b01      	cmp	r3, #1
    574e:	d103      	bne.n	5758 <setvbuf+0x114>
    5750:	89a3      	ldrh	r3, [r4, #12]
    5752:	9a00      	ldr	r2, [sp, #0]
    5754:	431a      	orrs	r2, r3
    5756:	81a2      	strh	r2, [r4, #12]
    5758:	2308      	movs	r3, #8
    575a:	89a2      	ldrh	r2, [r4, #12]
    575c:	6027      	str	r7, [r4, #0]
    575e:	4013      	ands	r3, r2
    5760:	6127      	str	r7, [r4, #16]
    5762:	6165      	str	r5, [r4, #20]
    5764:	1e18      	subs	r0, r3, #0
    5766:	d00c      	beq.n	5782 <setvbuf+0x13e>
    5768:	2301      	movs	r3, #1
    576a:	401a      	ands	r2, r3
    576c:	2300      	movs	r3, #0
    576e:	1e10      	subs	r0, r2, #0
    5770:	4298      	cmp	r0, r3
    5772:	d004      	beq.n	577e <setvbuf+0x13a>
    5774:	426d      	negs	r5, r5
    5776:	60a3      	str	r3, [r4, #8]
    5778:	61a5      	str	r5, [r4, #24]
    577a:	0018      	movs	r0, r3
    577c:	e005      	b.n	578a <setvbuf+0x146>
    577e:	60a5      	str	r5, [r4, #8]
    5780:	e003      	b.n	578a <setvbuf+0x146>
    5782:	60a3      	str	r3, [r4, #8]
    5784:	e001      	b.n	578a <setvbuf+0x146>
    5786:	2001      	movs	r0, #1
    5788:	4240      	negs	r0, r0
    578a:	b005      	add	sp, #20
    578c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    578e:	46c0      	nop			; (mov r8, r8)
    5790:	2000008c 	.word	0x2000008c
    5794:	00006148 	.word	0x00006148
    5798:	00006168 	.word	0x00006168
    579c:	00006188 	.word	0x00006188
    57a0:	fffff35c 	.word	0xfffff35c

000057a4 <__sflush_r>:
    57a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    57a6:	898a      	ldrh	r2, [r1, #12]
    57a8:	0005      	movs	r5, r0
    57aa:	000c      	movs	r4, r1
    57ac:	0713      	lsls	r3, r2, #28
    57ae:	d45a      	bmi.n	5866 <__sflush_r+0xc2>
    57b0:	684b      	ldr	r3, [r1, #4]
    57b2:	2b00      	cmp	r3, #0
    57b4:	dc02      	bgt.n	57bc <__sflush_r+0x18>
    57b6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    57b8:	2b00      	cmp	r3, #0
    57ba:	dd19      	ble.n	57f0 <__sflush_r+0x4c>
    57bc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    57be:	2f00      	cmp	r7, #0
    57c0:	d016      	beq.n	57f0 <__sflush_r+0x4c>
    57c2:	2300      	movs	r3, #0
    57c4:	682e      	ldr	r6, [r5, #0]
    57c6:	602b      	str	r3, [r5, #0]
    57c8:	2380      	movs	r3, #128	; 0x80
    57ca:	015b      	lsls	r3, r3, #5
    57cc:	401a      	ands	r2, r3
    57ce:	d001      	beq.n	57d4 <__sflush_r+0x30>
    57d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
    57d2:	e014      	b.n	57fe <__sflush_r+0x5a>
    57d4:	2301      	movs	r3, #1
    57d6:	6a21      	ldr	r1, [r4, #32]
    57d8:	0028      	movs	r0, r5
    57da:	47b8      	blx	r7
    57dc:	1c43      	adds	r3, r0, #1
    57de:	d10e      	bne.n	57fe <__sflush_r+0x5a>
    57e0:	682b      	ldr	r3, [r5, #0]
    57e2:	2b00      	cmp	r3, #0
    57e4:	d00b      	beq.n	57fe <__sflush_r+0x5a>
    57e6:	2b1d      	cmp	r3, #29
    57e8:	d001      	beq.n	57ee <__sflush_r+0x4a>
    57ea:	2b16      	cmp	r3, #22
    57ec:	d102      	bne.n	57f4 <__sflush_r+0x50>
    57ee:	602e      	str	r6, [r5, #0]
    57f0:	2000      	movs	r0, #0
    57f2:	e05a      	b.n	58aa <__sflush_r+0x106>
    57f4:	2240      	movs	r2, #64	; 0x40
    57f6:	89a3      	ldrh	r3, [r4, #12]
    57f8:	4313      	orrs	r3, r2
    57fa:	81a3      	strh	r3, [r4, #12]
    57fc:	e055      	b.n	58aa <__sflush_r+0x106>
    57fe:	89a3      	ldrh	r3, [r4, #12]
    5800:	075b      	lsls	r3, r3, #29
    5802:	d506      	bpl.n	5812 <__sflush_r+0x6e>
    5804:	6863      	ldr	r3, [r4, #4]
    5806:	1ac0      	subs	r0, r0, r3
    5808:	6b63      	ldr	r3, [r4, #52]	; 0x34
    580a:	2b00      	cmp	r3, #0
    580c:	d001      	beq.n	5812 <__sflush_r+0x6e>
    580e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5810:	1ac0      	subs	r0, r0, r3
    5812:	2300      	movs	r3, #0
    5814:	0002      	movs	r2, r0
    5816:	6a21      	ldr	r1, [r4, #32]
    5818:	0028      	movs	r0, r5
    581a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    581c:	47b8      	blx	r7
    581e:	89a3      	ldrh	r3, [r4, #12]
    5820:	1c42      	adds	r2, r0, #1
    5822:	d106      	bne.n	5832 <__sflush_r+0x8e>
    5824:	6829      	ldr	r1, [r5, #0]
    5826:	291d      	cmp	r1, #29
    5828:	d83a      	bhi.n	58a0 <__sflush_r+0xfc>
    582a:	4a20      	ldr	r2, [pc, #128]	; (58ac <__sflush_r+0x108>)
    582c:	40ca      	lsrs	r2, r1
    582e:	07d2      	lsls	r2, r2, #31
    5830:	d536      	bpl.n	58a0 <__sflush_r+0xfc>
    5832:	2200      	movs	r2, #0
    5834:	6062      	str	r2, [r4, #4]
    5836:	6922      	ldr	r2, [r4, #16]
    5838:	6022      	str	r2, [r4, #0]
    583a:	04db      	lsls	r3, r3, #19
    583c:	d505      	bpl.n	584a <__sflush_r+0xa6>
    583e:	1c43      	adds	r3, r0, #1
    5840:	d102      	bne.n	5848 <__sflush_r+0xa4>
    5842:	682b      	ldr	r3, [r5, #0]
    5844:	2b00      	cmp	r3, #0
    5846:	d100      	bne.n	584a <__sflush_r+0xa6>
    5848:	6560      	str	r0, [r4, #84]	; 0x54
    584a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    584c:	602e      	str	r6, [r5, #0]
    584e:	2900      	cmp	r1, #0
    5850:	d0ce      	beq.n	57f0 <__sflush_r+0x4c>
    5852:	0023      	movs	r3, r4
    5854:	3344      	adds	r3, #68	; 0x44
    5856:	4299      	cmp	r1, r3
    5858:	d002      	beq.n	5860 <__sflush_r+0xbc>
    585a:	0028      	movs	r0, r5
    585c:	f000 f95a 	bl	5b14 <_free_r>
    5860:	2000      	movs	r0, #0
    5862:	6360      	str	r0, [r4, #52]	; 0x34
    5864:	e021      	b.n	58aa <__sflush_r+0x106>
    5866:	690f      	ldr	r7, [r1, #16]
    5868:	2f00      	cmp	r7, #0
    586a:	d0c1      	beq.n	57f0 <__sflush_r+0x4c>
    586c:	680b      	ldr	r3, [r1, #0]
    586e:	600f      	str	r7, [r1, #0]
    5870:	1bdb      	subs	r3, r3, r7
    5872:	9301      	str	r3, [sp, #4]
    5874:	2300      	movs	r3, #0
    5876:	0792      	lsls	r2, r2, #30
    5878:	d100      	bne.n	587c <__sflush_r+0xd8>
    587a:	694b      	ldr	r3, [r1, #20]
    587c:	60a3      	str	r3, [r4, #8]
    587e:	e003      	b.n	5888 <__sflush_r+0xe4>
    5880:	9b01      	ldr	r3, [sp, #4]
    5882:	183f      	adds	r7, r7, r0
    5884:	1a1b      	subs	r3, r3, r0
    5886:	9301      	str	r3, [sp, #4]
    5888:	9b01      	ldr	r3, [sp, #4]
    588a:	2b00      	cmp	r3, #0
    588c:	ddb0      	ble.n	57f0 <__sflush_r+0x4c>
    588e:	9b01      	ldr	r3, [sp, #4]
    5890:	003a      	movs	r2, r7
    5892:	6a21      	ldr	r1, [r4, #32]
    5894:	0028      	movs	r0, r5
    5896:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    5898:	47b0      	blx	r6
    589a:	2800      	cmp	r0, #0
    589c:	dcf0      	bgt.n	5880 <__sflush_r+0xdc>
    589e:	89a3      	ldrh	r3, [r4, #12]
    58a0:	2240      	movs	r2, #64	; 0x40
    58a2:	2001      	movs	r0, #1
    58a4:	4313      	orrs	r3, r2
    58a6:	81a3      	strh	r3, [r4, #12]
    58a8:	4240      	negs	r0, r0
    58aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    58ac:	20400001 	.word	0x20400001

000058b0 <_fflush_r>:
    58b0:	690b      	ldr	r3, [r1, #16]
    58b2:	b570      	push	{r4, r5, r6, lr}
    58b4:	0005      	movs	r5, r0
    58b6:	000c      	movs	r4, r1
    58b8:	2b00      	cmp	r3, #0
    58ba:	d101      	bne.n	58c0 <_fflush_r+0x10>
    58bc:	2000      	movs	r0, #0
    58be:	e01c      	b.n	58fa <_fflush_r+0x4a>
    58c0:	2800      	cmp	r0, #0
    58c2:	d004      	beq.n	58ce <_fflush_r+0x1e>
    58c4:	6983      	ldr	r3, [r0, #24]
    58c6:	2b00      	cmp	r3, #0
    58c8:	d101      	bne.n	58ce <_fflush_r+0x1e>
    58ca:	f000 f85f 	bl	598c <__sinit>
    58ce:	4b0b      	ldr	r3, [pc, #44]	; (58fc <_fflush_r+0x4c>)
    58d0:	429c      	cmp	r4, r3
    58d2:	d101      	bne.n	58d8 <_fflush_r+0x28>
    58d4:	686c      	ldr	r4, [r5, #4]
    58d6:	e008      	b.n	58ea <_fflush_r+0x3a>
    58d8:	4b09      	ldr	r3, [pc, #36]	; (5900 <_fflush_r+0x50>)
    58da:	429c      	cmp	r4, r3
    58dc:	d101      	bne.n	58e2 <_fflush_r+0x32>
    58de:	68ac      	ldr	r4, [r5, #8]
    58e0:	e003      	b.n	58ea <_fflush_r+0x3a>
    58e2:	4b08      	ldr	r3, [pc, #32]	; (5904 <_fflush_r+0x54>)
    58e4:	429c      	cmp	r4, r3
    58e6:	d100      	bne.n	58ea <_fflush_r+0x3a>
    58e8:	68ec      	ldr	r4, [r5, #12]
    58ea:	220c      	movs	r2, #12
    58ec:	5ea3      	ldrsh	r3, [r4, r2]
    58ee:	2b00      	cmp	r3, #0
    58f0:	d0e4      	beq.n	58bc <_fflush_r+0xc>
    58f2:	0021      	movs	r1, r4
    58f4:	0028      	movs	r0, r5
    58f6:	f7ff ff55 	bl	57a4 <__sflush_r>
    58fa:	bd70      	pop	{r4, r5, r6, pc}
    58fc:	00006148 	.word	0x00006148
    5900:	00006168 	.word	0x00006168
    5904:	00006188 	.word	0x00006188

00005908 <_cleanup_r>:
    5908:	b510      	push	{r4, lr}
    590a:	4902      	ldr	r1, [pc, #8]	; (5914 <_cleanup_r+0xc>)
    590c:	f000 f8b0 	bl	5a70 <_fwalk_reent>
    5910:	bd10      	pop	{r4, pc}
    5912:	46c0      	nop			; (mov r8, r8)
    5914:	000058b1 	.word	0x000058b1

00005918 <std.isra.0>:
    5918:	2300      	movs	r3, #0
    591a:	b510      	push	{r4, lr}
    591c:	0004      	movs	r4, r0
    591e:	6003      	str	r3, [r0, #0]
    5920:	6043      	str	r3, [r0, #4]
    5922:	6083      	str	r3, [r0, #8]
    5924:	8181      	strh	r1, [r0, #12]
    5926:	6643      	str	r3, [r0, #100]	; 0x64
    5928:	81c2      	strh	r2, [r0, #14]
    592a:	6103      	str	r3, [r0, #16]
    592c:	6143      	str	r3, [r0, #20]
    592e:	6183      	str	r3, [r0, #24]
    5930:	0019      	movs	r1, r3
    5932:	2208      	movs	r2, #8
    5934:	305c      	adds	r0, #92	; 0x5c
    5936:	f7ff fe74 	bl	5622 <memset>
    593a:	4b05      	ldr	r3, [pc, #20]	; (5950 <std.isra.0+0x38>)
    593c:	6224      	str	r4, [r4, #32]
    593e:	6263      	str	r3, [r4, #36]	; 0x24
    5940:	4b04      	ldr	r3, [pc, #16]	; (5954 <std.isra.0+0x3c>)
    5942:	62a3      	str	r3, [r4, #40]	; 0x28
    5944:	4b04      	ldr	r3, [pc, #16]	; (5958 <std.isra.0+0x40>)
    5946:	62e3      	str	r3, [r4, #44]	; 0x2c
    5948:	4b04      	ldr	r3, [pc, #16]	; (595c <std.isra.0+0x44>)
    594a:	6323      	str	r3, [r4, #48]	; 0x30
    594c:	bd10      	pop	{r4, pc}
    594e:	46c0      	nop			; (mov r8, r8)
    5950:	00005c71 	.word	0x00005c71
    5954:	00005c99 	.word	0x00005c99
    5958:	00005cd1 	.word	0x00005cd1
    595c:	00005cfd 	.word	0x00005cfd

00005960 <__sfmoreglue>:
    5960:	b570      	push	{r4, r5, r6, lr}
    5962:	2568      	movs	r5, #104	; 0x68
    5964:	1e4b      	subs	r3, r1, #1
    5966:	435d      	muls	r5, r3
    5968:	000e      	movs	r6, r1
    596a:	0029      	movs	r1, r5
    596c:	3174      	adds	r1, #116	; 0x74
    596e:	f000 f917 	bl	5ba0 <_malloc_r>
    5972:	1e04      	subs	r4, r0, #0
    5974:	d008      	beq.n	5988 <__sfmoreglue+0x28>
    5976:	2100      	movs	r1, #0
    5978:	002a      	movs	r2, r5
    597a:	6001      	str	r1, [r0, #0]
    597c:	6046      	str	r6, [r0, #4]
    597e:	300c      	adds	r0, #12
    5980:	60a0      	str	r0, [r4, #8]
    5982:	3268      	adds	r2, #104	; 0x68
    5984:	f7ff fe4d 	bl	5622 <memset>
    5988:	0020      	movs	r0, r4
    598a:	bd70      	pop	{r4, r5, r6, pc}

0000598c <__sinit>:
    598c:	6983      	ldr	r3, [r0, #24]
    598e:	b513      	push	{r0, r1, r4, lr}
    5990:	0004      	movs	r4, r0
    5992:	2b00      	cmp	r3, #0
    5994:	d128      	bne.n	59e8 <__sinit+0x5c>
    5996:	6483      	str	r3, [r0, #72]	; 0x48
    5998:	64c3      	str	r3, [r0, #76]	; 0x4c
    599a:	6503      	str	r3, [r0, #80]	; 0x50
    599c:	4b13      	ldr	r3, [pc, #76]	; (59ec <__sinit+0x60>)
    599e:	4a14      	ldr	r2, [pc, #80]	; (59f0 <__sinit+0x64>)
    59a0:	681b      	ldr	r3, [r3, #0]
    59a2:	6282      	str	r2, [r0, #40]	; 0x28
    59a4:	9301      	str	r3, [sp, #4]
    59a6:	4298      	cmp	r0, r3
    59a8:	d101      	bne.n	59ae <__sinit+0x22>
    59aa:	2301      	movs	r3, #1
    59ac:	6183      	str	r3, [r0, #24]
    59ae:	0020      	movs	r0, r4
    59b0:	f000 f820 	bl	59f4 <__sfp>
    59b4:	6060      	str	r0, [r4, #4]
    59b6:	0020      	movs	r0, r4
    59b8:	f000 f81c 	bl	59f4 <__sfp>
    59bc:	60a0      	str	r0, [r4, #8]
    59be:	0020      	movs	r0, r4
    59c0:	f000 f818 	bl	59f4 <__sfp>
    59c4:	2200      	movs	r2, #0
    59c6:	60e0      	str	r0, [r4, #12]
    59c8:	2104      	movs	r1, #4
    59ca:	6860      	ldr	r0, [r4, #4]
    59cc:	f7ff ffa4 	bl	5918 <std.isra.0>
    59d0:	2201      	movs	r2, #1
    59d2:	2109      	movs	r1, #9
    59d4:	68a0      	ldr	r0, [r4, #8]
    59d6:	f7ff ff9f 	bl	5918 <std.isra.0>
    59da:	2202      	movs	r2, #2
    59dc:	2112      	movs	r1, #18
    59de:	68e0      	ldr	r0, [r4, #12]
    59e0:	f7ff ff9a 	bl	5918 <std.isra.0>
    59e4:	2301      	movs	r3, #1
    59e6:	61a3      	str	r3, [r4, #24]
    59e8:	bd13      	pop	{r0, r1, r4, pc}
    59ea:	46c0      	nop			; (mov r8, r8)
    59ec:	00006144 	.word	0x00006144
    59f0:	00005909 	.word	0x00005909

000059f4 <__sfp>:
    59f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    59f6:	4b1d      	ldr	r3, [pc, #116]	; (5a6c <__sfp+0x78>)
    59f8:	0006      	movs	r6, r0
    59fa:	681d      	ldr	r5, [r3, #0]
    59fc:	69ab      	ldr	r3, [r5, #24]
    59fe:	2b00      	cmp	r3, #0
    5a00:	d102      	bne.n	5a08 <__sfp+0x14>
    5a02:	0028      	movs	r0, r5
    5a04:	f7ff ffc2 	bl	598c <__sinit>
    5a08:	3548      	adds	r5, #72	; 0x48
    5a0a:	68ac      	ldr	r4, [r5, #8]
    5a0c:	686b      	ldr	r3, [r5, #4]
    5a0e:	3b01      	subs	r3, #1
    5a10:	d405      	bmi.n	5a1e <__sfp+0x2a>
    5a12:	220c      	movs	r2, #12
    5a14:	5ea7      	ldrsh	r7, [r4, r2]
    5a16:	2f00      	cmp	r7, #0
    5a18:	d010      	beq.n	5a3c <__sfp+0x48>
    5a1a:	3468      	adds	r4, #104	; 0x68
    5a1c:	e7f7      	b.n	5a0e <__sfp+0x1a>
    5a1e:	682b      	ldr	r3, [r5, #0]
    5a20:	2b00      	cmp	r3, #0
    5a22:	d001      	beq.n	5a28 <__sfp+0x34>
    5a24:	682d      	ldr	r5, [r5, #0]
    5a26:	e7f0      	b.n	5a0a <__sfp+0x16>
    5a28:	2104      	movs	r1, #4
    5a2a:	0030      	movs	r0, r6
    5a2c:	f7ff ff98 	bl	5960 <__sfmoreglue>
    5a30:	6028      	str	r0, [r5, #0]
    5a32:	2800      	cmp	r0, #0
    5a34:	d1f6      	bne.n	5a24 <__sfp+0x30>
    5a36:	230c      	movs	r3, #12
    5a38:	6033      	str	r3, [r6, #0]
    5a3a:	e016      	b.n	5a6a <__sfp+0x76>
    5a3c:	2301      	movs	r3, #1
    5a3e:	0020      	movs	r0, r4
    5a40:	425b      	negs	r3, r3
    5a42:	81e3      	strh	r3, [r4, #14]
    5a44:	3302      	adds	r3, #2
    5a46:	81a3      	strh	r3, [r4, #12]
    5a48:	6667      	str	r7, [r4, #100]	; 0x64
    5a4a:	6027      	str	r7, [r4, #0]
    5a4c:	60a7      	str	r7, [r4, #8]
    5a4e:	6067      	str	r7, [r4, #4]
    5a50:	6127      	str	r7, [r4, #16]
    5a52:	6167      	str	r7, [r4, #20]
    5a54:	61a7      	str	r7, [r4, #24]
    5a56:	305c      	adds	r0, #92	; 0x5c
    5a58:	2208      	movs	r2, #8
    5a5a:	0039      	movs	r1, r7
    5a5c:	f7ff fde1 	bl	5622 <memset>
    5a60:	0020      	movs	r0, r4
    5a62:	6367      	str	r7, [r4, #52]	; 0x34
    5a64:	63a7      	str	r7, [r4, #56]	; 0x38
    5a66:	64a7      	str	r7, [r4, #72]	; 0x48
    5a68:	64e7      	str	r7, [r4, #76]	; 0x4c
    5a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5a6c:	00006144 	.word	0x00006144

00005a70 <_fwalk_reent>:
    5a70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5a72:	0004      	movs	r4, r0
    5a74:	0007      	movs	r7, r0
    5a76:	2600      	movs	r6, #0
    5a78:	9101      	str	r1, [sp, #4]
    5a7a:	3448      	adds	r4, #72	; 0x48
    5a7c:	2c00      	cmp	r4, #0
    5a7e:	d016      	beq.n	5aae <_fwalk_reent+0x3e>
    5a80:	6863      	ldr	r3, [r4, #4]
    5a82:	68a5      	ldr	r5, [r4, #8]
    5a84:	9300      	str	r3, [sp, #0]
    5a86:	9b00      	ldr	r3, [sp, #0]
    5a88:	3b01      	subs	r3, #1
    5a8a:	9300      	str	r3, [sp, #0]
    5a8c:	d40d      	bmi.n	5aaa <_fwalk_reent+0x3a>
    5a8e:	89ab      	ldrh	r3, [r5, #12]
    5a90:	2b01      	cmp	r3, #1
    5a92:	d908      	bls.n	5aa6 <_fwalk_reent+0x36>
    5a94:	220e      	movs	r2, #14
    5a96:	5eab      	ldrsh	r3, [r5, r2]
    5a98:	3301      	adds	r3, #1
    5a9a:	d004      	beq.n	5aa6 <_fwalk_reent+0x36>
    5a9c:	0029      	movs	r1, r5
    5a9e:	0038      	movs	r0, r7
    5aa0:	9b01      	ldr	r3, [sp, #4]
    5aa2:	4798      	blx	r3
    5aa4:	4306      	orrs	r6, r0
    5aa6:	3568      	adds	r5, #104	; 0x68
    5aa8:	e7ed      	b.n	5a86 <_fwalk_reent+0x16>
    5aaa:	6824      	ldr	r4, [r4, #0]
    5aac:	e7e6      	b.n	5a7c <_fwalk_reent+0xc>
    5aae:	0030      	movs	r0, r6
    5ab0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00005ab4 <__swhatbuf_r>:
    5ab4:	b570      	push	{r4, r5, r6, lr}
    5ab6:	000e      	movs	r6, r1
    5ab8:	001d      	movs	r5, r3
    5aba:	230e      	movs	r3, #14
    5abc:	5ec9      	ldrsh	r1, [r1, r3]
    5abe:	b090      	sub	sp, #64	; 0x40
    5ac0:	0014      	movs	r4, r2
    5ac2:	2900      	cmp	r1, #0
    5ac4:	da06      	bge.n	5ad4 <__swhatbuf_r+0x20>
    5ac6:	2300      	movs	r3, #0
    5ac8:	602b      	str	r3, [r5, #0]
    5aca:	89b3      	ldrh	r3, [r6, #12]
    5acc:	061b      	lsls	r3, r3, #24
    5ace:	d50f      	bpl.n	5af0 <__swhatbuf_r+0x3c>
    5ad0:	2340      	movs	r3, #64	; 0x40
    5ad2:	e00f      	b.n	5af4 <__swhatbuf_r+0x40>
    5ad4:	aa01      	add	r2, sp, #4
    5ad6:	f000 f93d 	bl	5d54 <_fstat_r>
    5ada:	2800      	cmp	r0, #0
    5adc:	dbf3      	blt.n	5ac6 <__swhatbuf_r+0x12>
    5ade:	23f0      	movs	r3, #240	; 0xf0
    5ae0:	9a02      	ldr	r2, [sp, #8]
    5ae2:	021b      	lsls	r3, r3, #8
    5ae4:	4013      	ands	r3, r2
    5ae6:	4a05      	ldr	r2, [pc, #20]	; (5afc <__swhatbuf_r+0x48>)
    5ae8:	189b      	adds	r3, r3, r2
    5aea:	425a      	negs	r2, r3
    5aec:	4153      	adcs	r3, r2
    5aee:	602b      	str	r3, [r5, #0]
    5af0:	2380      	movs	r3, #128	; 0x80
    5af2:	00db      	lsls	r3, r3, #3
    5af4:	2000      	movs	r0, #0
    5af6:	6023      	str	r3, [r4, #0]
    5af8:	b010      	add	sp, #64	; 0x40
    5afa:	bd70      	pop	{r4, r5, r6, pc}
    5afc:	ffffe000 	.word	0xffffe000

00005b00 <malloc>:
    5b00:	b510      	push	{r4, lr}
    5b02:	4b03      	ldr	r3, [pc, #12]	; (5b10 <malloc+0x10>)
    5b04:	0001      	movs	r1, r0
    5b06:	6818      	ldr	r0, [r3, #0]
    5b08:	f000 f84a 	bl	5ba0 <_malloc_r>
    5b0c:	bd10      	pop	{r4, pc}
    5b0e:	46c0      	nop			; (mov r8, r8)
    5b10:	2000008c 	.word	0x2000008c

00005b14 <_free_r>:
    5b14:	b530      	push	{r4, r5, lr}
    5b16:	2900      	cmp	r1, #0
    5b18:	d03e      	beq.n	5b98 <_free_r+0x84>
    5b1a:	3904      	subs	r1, #4
    5b1c:	680b      	ldr	r3, [r1, #0]
    5b1e:	2b00      	cmp	r3, #0
    5b20:	da00      	bge.n	5b24 <_free_r+0x10>
    5b22:	18c9      	adds	r1, r1, r3
    5b24:	4a1d      	ldr	r2, [pc, #116]	; (5b9c <_free_r+0x88>)
    5b26:	6813      	ldr	r3, [r2, #0]
    5b28:	0014      	movs	r4, r2
    5b2a:	2b00      	cmp	r3, #0
    5b2c:	d102      	bne.n	5b34 <_free_r+0x20>
    5b2e:	604b      	str	r3, [r1, #4]
    5b30:	6011      	str	r1, [r2, #0]
    5b32:	e031      	b.n	5b98 <_free_r+0x84>
    5b34:	428b      	cmp	r3, r1
    5b36:	d90d      	bls.n	5b54 <_free_r+0x40>
    5b38:	680a      	ldr	r2, [r1, #0]
    5b3a:	1888      	adds	r0, r1, r2
    5b3c:	4283      	cmp	r3, r0
    5b3e:	d103      	bne.n	5b48 <_free_r+0x34>
    5b40:	6818      	ldr	r0, [r3, #0]
    5b42:	685b      	ldr	r3, [r3, #4]
    5b44:	1882      	adds	r2, r0, r2
    5b46:	600a      	str	r2, [r1, #0]
    5b48:	604b      	str	r3, [r1, #4]
    5b4a:	6021      	str	r1, [r4, #0]
    5b4c:	e024      	b.n	5b98 <_free_r+0x84>
    5b4e:	428a      	cmp	r2, r1
    5b50:	d803      	bhi.n	5b5a <_free_r+0x46>
    5b52:	0013      	movs	r3, r2
    5b54:	685a      	ldr	r2, [r3, #4]
    5b56:	2a00      	cmp	r2, #0
    5b58:	d1f9      	bne.n	5b4e <_free_r+0x3a>
    5b5a:	681d      	ldr	r5, [r3, #0]
    5b5c:	195c      	adds	r4, r3, r5
    5b5e:	428c      	cmp	r4, r1
    5b60:	d10b      	bne.n	5b7a <_free_r+0x66>
    5b62:	6809      	ldr	r1, [r1, #0]
    5b64:	1869      	adds	r1, r5, r1
    5b66:	1858      	adds	r0, r3, r1
    5b68:	6019      	str	r1, [r3, #0]
    5b6a:	4282      	cmp	r2, r0
    5b6c:	d114      	bne.n	5b98 <_free_r+0x84>
    5b6e:	6810      	ldr	r0, [r2, #0]
    5b70:	6852      	ldr	r2, [r2, #4]
    5b72:	1841      	adds	r1, r0, r1
    5b74:	6019      	str	r1, [r3, #0]
    5b76:	605a      	str	r2, [r3, #4]
    5b78:	e00e      	b.n	5b98 <_free_r+0x84>
    5b7a:	428c      	cmp	r4, r1
    5b7c:	d902      	bls.n	5b84 <_free_r+0x70>
    5b7e:	230c      	movs	r3, #12
    5b80:	6003      	str	r3, [r0, #0]
    5b82:	e009      	b.n	5b98 <_free_r+0x84>
    5b84:	6808      	ldr	r0, [r1, #0]
    5b86:	180c      	adds	r4, r1, r0
    5b88:	42a2      	cmp	r2, r4
    5b8a:	d103      	bne.n	5b94 <_free_r+0x80>
    5b8c:	6814      	ldr	r4, [r2, #0]
    5b8e:	6852      	ldr	r2, [r2, #4]
    5b90:	1820      	adds	r0, r4, r0
    5b92:	6008      	str	r0, [r1, #0]
    5b94:	604a      	str	r2, [r1, #4]
    5b96:	6059      	str	r1, [r3, #4]
    5b98:	bd30      	pop	{r4, r5, pc}
    5b9a:	46c0      	nop			; (mov r8, r8)
    5b9c:	20000284 	.word	0x20000284

00005ba0 <_malloc_r>:
    5ba0:	2303      	movs	r3, #3
    5ba2:	b570      	push	{r4, r5, r6, lr}
    5ba4:	1ccd      	adds	r5, r1, #3
    5ba6:	439d      	bics	r5, r3
    5ba8:	3508      	adds	r5, #8
    5baa:	0006      	movs	r6, r0
    5bac:	2d0c      	cmp	r5, #12
    5bae:	d201      	bcs.n	5bb4 <_malloc_r+0x14>
    5bb0:	250c      	movs	r5, #12
    5bb2:	e005      	b.n	5bc0 <_malloc_r+0x20>
    5bb4:	2d00      	cmp	r5, #0
    5bb6:	da03      	bge.n	5bc0 <_malloc_r+0x20>
    5bb8:	230c      	movs	r3, #12
    5bba:	2000      	movs	r0, #0
    5bbc:	6033      	str	r3, [r6, #0]
    5bbe:	e040      	b.n	5c42 <_malloc_r+0xa2>
    5bc0:	42a9      	cmp	r1, r5
    5bc2:	d8f9      	bhi.n	5bb8 <_malloc_r+0x18>
    5bc4:	4b1f      	ldr	r3, [pc, #124]	; (5c44 <_malloc_r+0xa4>)
    5bc6:	681c      	ldr	r4, [r3, #0]
    5bc8:	001a      	movs	r2, r3
    5bca:	0021      	movs	r1, r4
    5bcc:	2900      	cmp	r1, #0
    5bce:	d013      	beq.n	5bf8 <_malloc_r+0x58>
    5bd0:	680b      	ldr	r3, [r1, #0]
    5bd2:	1b5b      	subs	r3, r3, r5
    5bd4:	d40d      	bmi.n	5bf2 <_malloc_r+0x52>
    5bd6:	2b0b      	cmp	r3, #11
    5bd8:	d902      	bls.n	5be0 <_malloc_r+0x40>
    5bda:	600b      	str	r3, [r1, #0]
    5bdc:	18cc      	adds	r4, r1, r3
    5bde:	e01e      	b.n	5c1e <_malloc_r+0x7e>
    5be0:	428c      	cmp	r4, r1
    5be2:	d102      	bne.n	5bea <_malloc_r+0x4a>
    5be4:	6863      	ldr	r3, [r4, #4]
    5be6:	6013      	str	r3, [r2, #0]
    5be8:	e01a      	b.n	5c20 <_malloc_r+0x80>
    5bea:	684b      	ldr	r3, [r1, #4]
    5bec:	6063      	str	r3, [r4, #4]
    5bee:	000c      	movs	r4, r1
    5bf0:	e016      	b.n	5c20 <_malloc_r+0x80>
    5bf2:	000c      	movs	r4, r1
    5bf4:	6849      	ldr	r1, [r1, #4]
    5bf6:	e7e9      	b.n	5bcc <_malloc_r+0x2c>
    5bf8:	4c13      	ldr	r4, [pc, #76]	; (5c48 <_malloc_r+0xa8>)
    5bfa:	6823      	ldr	r3, [r4, #0]
    5bfc:	2b00      	cmp	r3, #0
    5bfe:	d103      	bne.n	5c08 <_malloc_r+0x68>
    5c00:	0030      	movs	r0, r6
    5c02:	f000 f823 	bl	5c4c <_sbrk_r>
    5c06:	6020      	str	r0, [r4, #0]
    5c08:	0029      	movs	r1, r5
    5c0a:	0030      	movs	r0, r6
    5c0c:	f000 f81e 	bl	5c4c <_sbrk_r>
    5c10:	1c43      	adds	r3, r0, #1
    5c12:	d0d1      	beq.n	5bb8 <_malloc_r+0x18>
    5c14:	2303      	movs	r3, #3
    5c16:	1cc4      	adds	r4, r0, #3
    5c18:	439c      	bics	r4, r3
    5c1a:	42a0      	cmp	r0, r4
    5c1c:	d10a      	bne.n	5c34 <_malloc_r+0x94>
    5c1e:	6025      	str	r5, [r4, #0]
    5c20:	0020      	movs	r0, r4
    5c22:	2207      	movs	r2, #7
    5c24:	300b      	adds	r0, #11
    5c26:	1d23      	adds	r3, r4, #4
    5c28:	4390      	bics	r0, r2
    5c2a:	1ac3      	subs	r3, r0, r3
    5c2c:	d009      	beq.n	5c42 <_malloc_r+0xa2>
    5c2e:	425a      	negs	r2, r3
    5c30:	50e2      	str	r2, [r4, r3]
    5c32:	e006      	b.n	5c42 <_malloc_r+0xa2>
    5c34:	1a21      	subs	r1, r4, r0
    5c36:	0030      	movs	r0, r6
    5c38:	f000 f808 	bl	5c4c <_sbrk_r>
    5c3c:	1c43      	adds	r3, r0, #1
    5c3e:	d1ee      	bne.n	5c1e <_malloc_r+0x7e>
    5c40:	e7ba      	b.n	5bb8 <_malloc_r+0x18>
    5c42:	bd70      	pop	{r4, r5, r6, pc}
    5c44:	20000284 	.word	0x20000284
    5c48:	20000280 	.word	0x20000280

00005c4c <_sbrk_r>:
    5c4c:	2300      	movs	r3, #0
    5c4e:	b570      	push	{r4, r5, r6, lr}
    5c50:	4c06      	ldr	r4, [pc, #24]	; (5c6c <_sbrk_r+0x20>)
    5c52:	0005      	movs	r5, r0
    5c54:	0008      	movs	r0, r1
    5c56:	6023      	str	r3, [r4, #0]
    5c58:	f7fe fbc0 	bl	43dc <_sbrk>
    5c5c:	1c43      	adds	r3, r0, #1
    5c5e:	d103      	bne.n	5c68 <_sbrk_r+0x1c>
    5c60:	6823      	ldr	r3, [r4, #0]
    5c62:	2b00      	cmp	r3, #0
    5c64:	d000      	beq.n	5c68 <_sbrk_r+0x1c>
    5c66:	602b      	str	r3, [r5, #0]
    5c68:	bd70      	pop	{r4, r5, r6, pc}
    5c6a:	46c0      	nop			; (mov r8, r8)
    5c6c:	200006cc 	.word	0x200006cc

00005c70 <__sread>:
    5c70:	b570      	push	{r4, r5, r6, lr}
    5c72:	000c      	movs	r4, r1
    5c74:	250e      	movs	r5, #14
    5c76:	5f49      	ldrsh	r1, [r1, r5]
    5c78:	f000 f892 	bl	5da0 <_read_r>
    5c7c:	2800      	cmp	r0, #0
    5c7e:	db03      	blt.n	5c88 <__sread+0x18>
    5c80:	6d63      	ldr	r3, [r4, #84]	; 0x54
    5c82:	181b      	adds	r3, r3, r0
    5c84:	6563      	str	r3, [r4, #84]	; 0x54
    5c86:	e003      	b.n	5c90 <__sread+0x20>
    5c88:	89a2      	ldrh	r2, [r4, #12]
    5c8a:	4b02      	ldr	r3, [pc, #8]	; (5c94 <__sread+0x24>)
    5c8c:	4013      	ands	r3, r2
    5c8e:	81a3      	strh	r3, [r4, #12]
    5c90:	bd70      	pop	{r4, r5, r6, pc}
    5c92:	46c0      	nop			; (mov r8, r8)
    5c94:	ffffefff 	.word	0xffffefff

00005c98 <__swrite>:
    5c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c9a:	001f      	movs	r7, r3
    5c9c:	898b      	ldrh	r3, [r1, #12]
    5c9e:	0005      	movs	r5, r0
    5ca0:	000c      	movs	r4, r1
    5ca2:	0016      	movs	r6, r2
    5ca4:	05db      	lsls	r3, r3, #23
    5ca6:	d505      	bpl.n	5cb4 <__swrite+0x1c>
    5ca8:	230e      	movs	r3, #14
    5caa:	5ec9      	ldrsh	r1, [r1, r3]
    5cac:	2200      	movs	r2, #0
    5cae:	2302      	movs	r3, #2
    5cb0:	f000 f862 	bl	5d78 <_lseek_r>
    5cb4:	89a2      	ldrh	r2, [r4, #12]
    5cb6:	4b05      	ldr	r3, [pc, #20]	; (5ccc <__swrite+0x34>)
    5cb8:	0028      	movs	r0, r5
    5cba:	4013      	ands	r3, r2
    5cbc:	81a3      	strh	r3, [r4, #12]
    5cbe:	0032      	movs	r2, r6
    5cc0:	230e      	movs	r3, #14
    5cc2:	5ee1      	ldrsh	r1, [r4, r3]
    5cc4:	003b      	movs	r3, r7
    5cc6:	f000 f81f 	bl	5d08 <_write_r>
    5cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5ccc:	ffffefff 	.word	0xffffefff

00005cd0 <__sseek>:
    5cd0:	b570      	push	{r4, r5, r6, lr}
    5cd2:	000c      	movs	r4, r1
    5cd4:	250e      	movs	r5, #14
    5cd6:	5f49      	ldrsh	r1, [r1, r5]
    5cd8:	f000 f84e 	bl	5d78 <_lseek_r>
    5cdc:	89a3      	ldrh	r3, [r4, #12]
    5cde:	1c42      	adds	r2, r0, #1
    5ce0:	d103      	bne.n	5cea <__sseek+0x1a>
    5ce2:	4a05      	ldr	r2, [pc, #20]	; (5cf8 <__sseek+0x28>)
    5ce4:	4013      	ands	r3, r2
    5ce6:	81a3      	strh	r3, [r4, #12]
    5ce8:	e004      	b.n	5cf4 <__sseek+0x24>
    5cea:	2280      	movs	r2, #128	; 0x80
    5cec:	0152      	lsls	r2, r2, #5
    5cee:	4313      	orrs	r3, r2
    5cf0:	81a3      	strh	r3, [r4, #12]
    5cf2:	6560      	str	r0, [r4, #84]	; 0x54
    5cf4:	bd70      	pop	{r4, r5, r6, pc}
    5cf6:	46c0      	nop			; (mov r8, r8)
    5cf8:	ffffefff 	.word	0xffffefff

00005cfc <__sclose>:
    5cfc:	b510      	push	{r4, lr}
    5cfe:	230e      	movs	r3, #14
    5d00:	5ec9      	ldrsh	r1, [r1, r3]
    5d02:	f000 f815 	bl	5d30 <_close_r>
    5d06:	bd10      	pop	{r4, pc}

00005d08 <_write_r>:
    5d08:	b570      	push	{r4, r5, r6, lr}
    5d0a:	0005      	movs	r5, r0
    5d0c:	0008      	movs	r0, r1
    5d0e:	0011      	movs	r1, r2
    5d10:	2200      	movs	r2, #0
    5d12:	4c06      	ldr	r4, [pc, #24]	; (5d2c <_write_r+0x24>)
    5d14:	6022      	str	r2, [r4, #0]
    5d16:	001a      	movs	r2, r3
    5d18:	f7fe fb38 	bl	438c <_write>
    5d1c:	1c43      	adds	r3, r0, #1
    5d1e:	d103      	bne.n	5d28 <_write_r+0x20>
    5d20:	6823      	ldr	r3, [r4, #0]
    5d22:	2b00      	cmp	r3, #0
    5d24:	d000      	beq.n	5d28 <_write_r+0x20>
    5d26:	602b      	str	r3, [r5, #0]
    5d28:	bd70      	pop	{r4, r5, r6, pc}
    5d2a:	46c0      	nop			; (mov r8, r8)
    5d2c:	200006cc 	.word	0x200006cc

00005d30 <_close_r>:
    5d30:	2300      	movs	r3, #0
    5d32:	b570      	push	{r4, r5, r6, lr}
    5d34:	4c06      	ldr	r4, [pc, #24]	; (5d50 <_close_r+0x20>)
    5d36:	0005      	movs	r5, r0
    5d38:	0008      	movs	r0, r1
    5d3a:	6023      	str	r3, [r4, #0]
    5d3c:	f7fe fb60 	bl	4400 <_close>
    5d40:	1c43      	adds	r3, r0, #1
    5d42:	d103      	bne.n	5d4c <_close_r+0x1c>
    5d44:	6823      	ldr	r3, [r4, #0]
    5d46:	2b00      	cmp	r3, #0
    5d48:	d000      	beq.n	5d4c <_close_r+0x1c>
    5d4a:	602b      	str	r3, [r5, #0]
    5d4c:	bd70      	pop	{r4, r5, r6, pc}
    5d4e:	46c0      	nop			; (mov r8, r8)
    5d50:	200006cc 	.word	0x200006cc

00005d54 <_fstat_r>:
    5d54:	2300      	movs	r3, #0
    5d56:	b570      	push	{r4, r5, r6, lr}
    5d58:	4c06      	ldr	r4, [pc, #24]	; (5d74 <_fstat_r+0x20>)
    5d5a:	0005      	movs	r5, r0
    5d5c:	0008      	movs	r0, r1
    5d5e:	0011      	movs	r1, r2
    5d60:	6023      	str	r3, [r4, #0]
    5d62:	f7fe fb51 	bl	4408 <_fstat>
    5d66:	1c43      	adds	r3, r0, #1
    5d68:	d103      	bne.n	5d72 <_fstat_r+0x1e>
    5d6a:	6823      	ldr	r3, [r4, #0]
    5d6c:	2b00      	cmp	r3, #0
    5d6e:	d000      	beq.n	5d72 <_fstat_r+0x1e>
    5d70:	602b      	str	r3, [r5, #0]
    5d72:	bd70      	pop	{r4, r5, r6, pc}
    5d74:	200006cc 	.word	0x200006cc

00005d78 <_lseek_r>:
    5d78:	b570      	push	{r4, r5, r6, lr}
    5d7a:	0005      	movs	r5, r0
    5d7c:	0008      	movs	r0, r1
    5d7e:	0011      	movs	r1, r2
    5d80:	2200      	movs	r2, #0
    5d82:	4c06      	ldr	r4, [pc, #24]	; (5d9c <_lseek_r+0x24>)
    5d84:	6022      	str	r2, [r4, #0]
    5d86:	001a      	movs	r2, r3
    5d88:	f7fe fb44 	bl	4414 <_lseek>
    5d8c:	1c43      	adds	r3, r0, #1
    5d8e:	d103      	bne.n	5d98 <_lseek_r+0x20>
    5d90:	6823      	ldr	r3, [r4, #0]
    5d92:	2b00      	cmp	r3, #0
    5d94:	d000      	beq.n	5d98 <_lseek_r+0x20>
    5d96:	602b      	str	r3, [r5, #0]
    5d98:	bd70      	pop	{r4, r5, r6, pc}
    5d9a:	46c0      	nop			; (mov r8, r8)
    5d9c:	200006cc 	.word	0x200006cc

00005da0 <_read_r>:
    5da0:	b570      	push	{r4, r5, r6, lr}
    5da2:	0005      	movs	r5, r0
    5da4:	0008      	movs	r0, r1
    5da6:	0011      	movs	r1, r2
    5da8:	2200      	movs	r2, #0
    5daa:	4c06      	ldr	r4, [pc, #24]	; (5dc4 <_read_r+0x24>)
    5dac:	6022      	str	r2, [r4, #0]
    5dae:	001a      	movs	r2, r3
    5db0:	f7fe facc 	bl	434c <_read>
    5db4:	1c43      	adds	r3, r0, #1
    5db6:	d103      	bne.n	5dc0 <_read_r+0x20>
    5db8:	6823      	ldr	r3, [r4, #0]
    5dba:	2b00      	cmp	r3, #0
    5dbc:	d000      	beq.n	5dc0 <_read_r+0x20>
    5dbe:	602b      	str	r3, [r5, #0]
    5dc0:	bd70      	pop	{r4, r5, r6, pc}
    5dc2:	46c0      	nop			; (mov r8, r8)
    5dc4:	200006cc 	.word	0x200006cc
    5dc8:	75636553 	.word	0x75636553
    5dcc:	20646572 	.word	0x20646572
    5dd0:	00000000 	.word	0x00000000
    5dd4:	616f7242 	.word	0x616f7242
    5dd8:	73616364 	.word	0x73616364
    5ddc:	61502074 	.word	0x61502074
    5de0:	74656b63 	.word	0x74656b63
    5de4:	00000020 	.word	0x00000020
    5de8:	63696e55 	.word	0x63696e55
    5dec:	20747361 	.word	0x20747361
    5df0:	6b636150 	.word	0x6b636150
    5df4:	00207465 	.word	0x00207465
    5df8:	6f726620 	.word	0x6f726620
    5dfc:	0000206d 	.word	0x0000206d
    5e00:	0000203a 	.word	0x0000203a

00005e04 <mySecurityKey>:
    5e04:	03020100 07060504 0b0a0908 0f0e0d0c     ................
    5e14:	00001e98 00001f30 00001f30 00001ee8     ....0...0.......
    5e24:	00001f30 00001f30 00001f30 00001f30     0...0...0...0...
    5e34:	00001f30 00001f30 00001ba0 00001cc0     0...0...........
    5e44:	00001f30 00001f30 00001f30 00001f30     0...0...0...0...
    5e54:	00001c74 00001f30 00001f30 00001f30     t...0...0...0...
    5e64:	00001f30 00001f30 00001f30 00001f30     0...0...0...0...
    5e74:	00001f30 00001f30 00001d50 00001da2     0...0...P.......
    5e84:	00001f30 00001f30 00001f30 00001f30     0...0...0...0...
    5e94:	00001d8a 00001f30 00001f30 00001f30     ....0...0...0...
    5ea4:	00001f30 00001f30 00001f30 00001f30     0...0...0...0...
    5eb4:	00001f30 00001f30 00001f30 00001f30     0...0...0...0...
    5ec4:	00001f30 00001f30 00001f30 00001f30     0...0...0...0...
    5ed4:	00001f30 00001f30 00001f30 00001f30     0...0...0...0...
    5ee4:	00001f30 00001f30 00001f30 00001f30     0...0...0...0...
    5ef4:	00001f30 00001f30 00001f30 00001f30     0...0...0...0...
    5f04:	00001f30 00001f30 00001f30 00001f30     0...0...0...0...
    5f14:	00001f30 00001f30 00001f30 00001f30     0...0...0...0...
    5f24:	00001f30 00001f30 00001f30 00001f30     0...0...0...0...
    5f34:	00001f30 00001f30 00001f30 00001f30     0...0...0...0...
    5f44:	00001f30 00001f30 00001f30 00001f30     0...0...0...0...
    5f54:	00001f30 00001f30 00001f30 00001f30     0...0...0...0...
    5f64:	00001f30 00001eba 00001f30 00001f30     0.......0...0...
    5f74:	00001f30 00001f30 00001f30 00001f30     0...0...0...0...
    5f84:	00001f30 00001f30 00001f30 00001f30     0...0...0...0...
    5f94:	00001f30 00001f30 00001f30 00001e7e     0...0...0...~...
    5fa4:	42000000 42000400 42000800 42000c00     ...B...B...B...B
    5fb4:	42001000 43000400 0b0a0908 00000d0c     ...B...C........
    5fc4:	0000371e 0000371a 0000371a 0000377c     .7...7...7..|7..
    5fd4:	0000377c 00003734 00003724 0000373a     |7..47..$7..:7..
    5fe4:	0000376a 0000388c 0000386c 0000386c     j7...8..l8..l8..
    5ff4:	00003906 0000387e 0000389a 00003870     .9..~8...8..p8..
    6004:	000038a8 000038ea 00003944 00003986     .8...8..D9...9..
    6014:	00003986 00003986 00003936 00003952     .9...9..69..R9..
    6024:	00003928 00003960 00003976 00003ff2     (9..`9..v9...?..
    6034:	00003ffc 00004006 00004010 0000401a     .?...@...@...@..
    6044:	0000404c 00004056 00004060 0000406a     L@..V@..`@..j@..
    6054:	00004074 42002000 42002400 43000800     t@... .B.$.B...C
    6064:	001d1b1b 00000002 00000100 00000002     ................
    6074:	00000200 00000003 00000004              ............

00006080 <DE>:
    6080:	20b2b2b2 b2b2b220 b20a0db2 20b22020     ...  .......  . 
    6090:	202020b2 20b20a0d b220b220 0db2b2b2     .   ...  . .....
    60a0:	2020b20a 20b220b2 0a0d2020 20b2b2b2     ..  . .   ..... 
    60b0:	b2b2b220 200a0db2 20202020 20202020      ......         
    60c0:	00000a0d                                ....

000060c4 <MiWi_Data>:
    60c4:	2020b220 2020b220 20b220b2 20202020      .   .  . .     
    60d4:	0db220b2 b220b20a b220b220 b2202020     . .... . . .   .
    60e4:	20b22020 2020b220 20b20a0d 2020b220       .  .  ...  .  
    60f4:	20b220b2 b22020b2 20b22020 b20a0db2     . . .  .  . ....
    6104:	20b22020 b220b220 20b22020 20b220b2       .  . .  . . . 
    6114:	0a0db220 b22020b2 20b22020 202020b2      ....  .  . .   
    6124:	20b220b2 0db22020 2020200a 20202020     . .   ...       
    6134:	20202020 20202020 20202020 00430a0d                 ..C.

00006144 <_global_impure_ptr>:
    6144:	2000002c                                ,.. 

00006148 <__sf_fake_stdin>:
	...

00006168 <__sf_fake_stdout>:
	...

00006188 <__sf_fake_stderr>:
	...

000061a8 <_init>:
    61a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    61aa:	46c0      	nop			; (mov r8, r8)
    61ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
    61ae:	bc08      	pop	{r3}
    61b0:	469e      	mov	lr, r3
    61b2:	4770      	bx	lr

000061b4 <__init_array_start>:
    61b4:	000000dd 	.word	0x000000dd

000061b8 <_fini>:
    61b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    61ba:	46c0      	nop			; (mov r8, r8)
    61bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    61be:	bc08      	pop	{r3}
    61c0:	469e      	mov	lr, r3
    61c2:	4770      	bx	lr

000061c4 <__fini_array_start>:
    61c4:	000000b5 	.word	0x000000b5
