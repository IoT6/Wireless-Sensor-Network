
APPS_CHAT_DEMO1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000880c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000084  20000000  0000880c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00020084  2**0
                  CONTENTS
  3 .bss          00000bc4  20000084  00008890  00020084  2**2
                  ALLOC
  4 .stack        00002000  20000c48  00009454  00020084  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
  7 .debug_info   000576f0  00000000  00000000  00020105  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00007b41  00000000  00000000  000777f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00011e12  00000000  00000000  0007f336  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b80  00000000  00000000  00091148  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000014f8  00000000  00000000  00091cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00023cf1  00000000  00000000  000931c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001bf17  00000000  00000000  000b6eb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009910f  00000000  00000000  000d2dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000027a4  00000000  00000000  0016bed8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	48 2c 00 20 d1 38 00 00 cd 38 00 00 cd 38 00 00     H,. .8...8...8..
	...
      2c:	cd 38 00 00 00 00 00 00 00 00 00 00 cd 38 00 00     .8...........8..
      3c:	cd 38 00 00 cd 38 00 00 41 05 00 00 7d 03 00 00     .8...8..A...}...
      4c:	a9 08 00 00 cd 38 00 00 cd 38 00 00 cd 38 00 00     .....8...8...8..
      5c:	cd 38 00 00 05 2b 00 00 15 2b 00 00 25 2b 00 00     .8...+...+..%+..
      6c:	35 2b 00 00 45 2b 00 00 55 2b 00 00 cd 38 00 00     5+..E+..U+...8..
      7c:	cd 38 00 00 cd 38 00 00 21 15 00 00 31 15 00 00     .8...8..!...1...
	...
      94:	41 15 00 00 cd 38 00 00 cd 38 00 00 00 00 00 00     A....8...8......
      a4:	cd 38 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .8..............

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000084 	.word	0x20000084
      d4:	00000000 	.word	0x00000000
      d8:	0000880c 	.word	0x0000880c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000088 	.word	0x20000088
     108:	0000880c 	.word	0x0000880c
     10c:	0000880c 	.word	0x0000880c
     110:	00000000 	.word	0x00000000

00000114 <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     114:	6803      	ldr	r3, [r0, #0]

	if (rtc_module->MODE0.SYNCBUSY.reg) {
     116:	6918      	ldr	r0, [r3, #16]
     118:	1e43      	subs	r3, r0, #1
     11a:	4198      	sbcs	r0, r3
     11c:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
     11e:	4770      	bx	lr

00000120 <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
     120:	b570      	push	{r4, r5, r6, lr}
     122:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     124:	6806      	ldr	r6, [r0, #0]
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     126:	2204      	movs	r2, #4
     128:	4b08      	ldr	r3, [pc, #32]	; (14c <rtc_count_enable+0x2c>)
     12a:	601a      	str	r2, [r3, #0]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     12c:	4d08      	ldr	r5, [pc, #32]	; (150 <rtc_count_enable+0x30>)
     12e:	0020      	movs	r0, r4
     130:	47a8      	blx	r5
     132:	2800      	cmp	r0, #0
     134:	d1fb      	bne.n	12e <rtc_count_enable+0xe>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
     136:	8833      	ldrh	r3, [r6, #0]
     138:	2202      	movs	r2, #2
     13a:	4313      	orrs	r3, r2
     13c:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
     13e:	4d04      	ldr	r5, [pc, #16]	; (150 <rtc_count_enable+0x30>)
     140:	0020      	movs	r0, r4
     142:	47a8      	blx	r5
     144:	2800      	cmp	r0, #0
     146:	d1fb      	bne.n	140 <rtc_count_enable+0x20>
		/* Wait for synchronization */
	}
}
     148:	bd70      	pop	{r4, r5, r6, pc}
     14a:	46c0      	nop			; (mov r8, r8)
     14c:	e000e100 	.word	0xe000e100
     150:	00000115 	.word	0x00000115

00000154 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
     154:	b570      	push	{r4, r5, r6, lr}
     156:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     158:	6806      	ldr	r6, [r0, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     15a:	2104      	movs	r1, #4
     15c:	2380      	movs	r3, #128	; 0x80
     15e:	4a0a      	ldr	r2, [pc, #40]	; (188 <rtc_count_disable+0x34>)
     160:	50d1      	str	r1, [r2, r3]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     162:	4d0a      	ldr	r5, [pc, #40]	; (18c <rtc_count_disable+0x38>)
     164:	0020      	movs	r0, r4
     166:	47a8      	blx	r5
     168:	2800      	cmp	r0, #0
     16a:	d1fb      	bne.n	164 <rtc_count_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
     16c:	4b08      	ldr	r3, [pc, #32]	; (190 <rtc_count_disable+0x3c>)
     16e:	8133      	strh	r3, [r6, #8]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
     170:	81b3      	strh	r3, [r6, #12]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
     172:	8833      	ldrh	r3, [r6, #0]
     174:	2202      	movs	r2, #2
     176:	4393      	bics	r3, r2
     178:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
     17a:	4d04      	ldr	r5, [pc, #16]	; (18c <rtc_count_disable+0x38>)
     17c:	0020      	movs	r0, r4
     17e:	47a8      	blx	r5
     180:	2800      	cmp	r0, #0
     182:	d1fb      	bne.n	17c <rtc_count_disable+0x28>
		/* Wait for synchronization */
	}
}
     184:	bd70      	pop	{r4, r5, r6, pc}
     186:	46c0      	nop			; (mov r8, r8)
     188:	e000e100 	.word	0xe000e100
     18c:	00000115 	.word	0x00000115
     190:	ffff81ff 	.word	0xffff81ff

00000194 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
     194:	b570      	push	{r4, r5, r6, lr}
     196:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     198:	6806      	ldr	r6, [r0, #0]

	/* Disable module before reset. */
	rtc_count_disable(module);
     19a:	4b0a      	ldr	r3, [pc, #40]	; (1c4 <rtc_count_reset+0x30>)
     19c:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
     19e:	2300      	movs	r3, #0
     1a0:	86a3      	strh	r3, [r4, #52]	; 0x34
	module->enabled_callback    = 0;
     1a2:	86e3      	strh	r3, [r4, #54]	; 0x36
#endif

	while (rtc_count_is_syncing(module)) {
     1a4:	4d08      	ldr	r5, [pc, #32]	; (1c8 <rtc_count_reset+0x34>)
     1a6:	0020      	movs	r0, r4
     1a8:	47a8      	blx	r5
     1aa:	2800      	cmp	r0, #0
     1ac:	d1fb      	bne.n	1a6 <rtc_count_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
     1ae:	8833      	ldrh	r3, [r6, #0]
     1b0:	2201      	movs	r2, #1
     1b2:	4313      	orrs	r3, r2
     1b4:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
     1b6:	4d04      	ldr	r5, [pc, #16]	; (1c8 <rtc_count_reset+0x34>)
     1b8:	0020      	movs	r0, r4
     1ba:	47a8      	blx	r5
     1bc:	2800      	cmp	r0, #0
     1be:	d1fb      	bne.n	1b8 <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}
}
     1c0:	bd70      	pop	{r4, r5, r6, pc}
     1c2:	46c0      	nop			; (mov r8, r8)
     1c4:	00000155 	.word	0x00000155
     1c8:	00000115 	.word	0x00000115

000001cc <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
     1cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     1ce:	b083      	sub	sp, #12
     1d0:	0004      	movs	r4, r0
     1d2:	9101      	str	r1, [sp, #4]
     1d4:	0015      	movs	r5, r2
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     1d6:	6806      	ldr	r6, [r0, #0]

	while (rtc_count_is_syncing(module)) {
     1d8:	4f13      	ldr	r7, [pc, #76]	; (228 <rtc_count_set_compare+0x5c>)
     1da:	0020      	movs	r0, r4
     1dc:	47b8      	blx	r7
     1de:	2800      	cmp	r0, #0
     1e0:	d1fb      	bne.n	1da <rtc_count_set_compare+0xe>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     1e2:	7923      	ldrb	r3, [r4, #4]
     1e4:	2b00      	cmp	r3, #0
     1e6:	d00e      	beq.n	206 <rtc_count_set_compare+0x3a>
     1e8:	2b01      	cmp	r3, #1
     1ea:	d119      	bne.n	220 <rtc_count_set_compare+0x54>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
				return STATUS_ERR_INVALID_ARG;
     1ec:	3017      	adds	r0, #23
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
     1ee:	2d01      	cmp	r5, #1
     1f0:	d817      	bhi.n	222 <rtc_count_set_compare+0x56>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
     1f2:	3508      	adds	r5, #8
     1f4:	00ad      	lsls	r5, r5, #2
     1f6:	9b01      	ldr	r3, [sp, #4]
     1f8:	51ab      	str	r3, [r5, r6]
		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	while (rtc_count_is_syncing(module)) {
     1fa:	4d0b      	ldr	r5, [pc, #44]	; (228 <rtc_count_set_compare+0x5c>)
     1fc:	0020      	movs	r0, r4
     1fe:	47a8      	blx	r5
     200:	2800      	cmp	r0, #0
     202:	d1fb      	bne.n	1fc <rtc_count_set_compare+0x30>
     204:	e00d      	b.n	222 <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
     206:	2017      	movs	r0, #23
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
     208:	2d02      	cmp	r5, #2
     20a:	d80a      	bhi.n	222 <rtc_count_set_compare+0x56>
			if (comp_value > 0xffff) {
     20c:	4b07      	ldr	r3, [pc, #28]	; (22c <rtc_count_set_compare+0x60>)
     20e:	9a01      	ldr	r2, [sp, #4]
     210:	429a      	cmp	r2, r3
     212:	d806      	bhi.n	222 <rtc_count_set_compare+0x56>
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
     214:	466b      	mov	r3, sp
     216:	889b      	ldrh	r3, [r3, #4]
     218:	3510      	adds	r5, #16
     21a:	006d      	lsls	r5, r5, #1
     21c:	53ab      	strh	r3, [r5, r6]
			break;
     21e:	e7ec      	b.n	1fa <rtc_count_set_compare+0x2e>
			return STATUS_ERR_BAD_FORMAT;
     220:	201a      	movs	r0, #26
		/* Wait for synchronization */
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
}
     222:	b003      	add	sp, #12
     224:	bdf0      	pop	{r4, r5, r6, r7, pc}
     226:	46c0      	nop			; (mov r8, r8)
     228:	00000115 	.word	0x00000115
     22c:	0000ffff 	.word	0x0000ffff

00000230 <rtc_count_init>:
{
     230:	b570      	push	{r4, r5, r6, lr}
     232:	0004      	movs	r4, r0
     234:	0015      	movs	r5, r2
	module->hw = hw;
     236:	6001      	str	r1, [r0, #0]
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     238:	4a1f      	ldr	r2, [pc, #124]	; (2b8 <rtc_count_init+0x88>)
     23a:	6951      	ldr	r1, [r2, #20]
     23c:	2380      	movs	r3, #128	; 0x80
     23e:	005b      	lsls	r3, r3, #1
     240:	430b      	orrs	r3, r1
     242:	6153      	str	r3, [r2, #20]
	OSC32KCTRL->RTCCTRL.reg = RTC_CLOCK_SOURCE;
     244:	2200      	movs	r2, #0
     246:	4b1d      	ldr	r3, [pc, #116]	; (2bc <rtc_count_init+0x8c>)
     248:	611a      	str	r2, [r3, #16]
	rtc_count_reset(module);
     24a:	4b1d      	ldr	r3, [pc, #116]	; (2c0 <rtc_count_init+0x90>)
     24c:	4798      	blx	r3
	module->mode                = config->mode;
     24e:	78ab      	ldrb	r3, [r5, #2]
     250:	7123      	strb	r3, [r4, #4]
	_rtc_instance[0] = module;
     252:	4b1c      	ldr	r3, [pc, #112]	; (2c4 <rtc_count_init+0x94>)
     254:	601c      	str	r4, [r3, #0]
	Rtc *const rtc_module = module->hw;
     256:	6822      	ldr	r2, [r4, #0]
				    | (config->enable_read_sync << RTC_MODE0_CTRLA_COUNTSYNC_Pos)
     258:	792b      	ldrb	r3, [r5, #4]
     25a:	03db      	lsls	r3, r3, #15
				    | config->prescaler;
     25c:	8829      	ldrh	r1, [r5, #0]
     25e:	430b      	orrs	r3, r1
     260:	b29b      	uxth	r3, r3
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0)
     262:	8013      	strh	r3, [r2, #0]
	switch (config->mode) {
     264:	78ab      	ldrb	r3, [r5, #2]
     266:	2b00      	cmp	r3, #0
     268:	d013      	beq.n	292 <rtc_count_init+0x62>
			return STATUS_ERR_INVALID_ARG;
     26a:	2017      	movs	r0, #23
	switch (config->mode) {
     26c:	2b01      	cmp	r3, #1
     26e:	d10f      	bne.n	290 <rtc_count_init+0x60>
			rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MODE(0);
     270:	8813      	ldrh	r3, [r2, #0]
     272:	b29b      	uxth	r3, r3
     274:	8013      	strh	r3, [r2, #0]
			if (config->clear_on_match) {
     276:	78eb      	ldrb	r3, [r5, #3]
     278:	2b00      	cmp	r3, #0
     27a:	d003      	beq.n	284 <rtc_count_init+0x54>
				rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MATCHCLR;
     27c:	8813      	ldrh	r3, [r2, #0]
     27e:	2180      	movs	r1, #128	; 0x80
     280:	430b      	orrs	r3, r1
     282:	8013      	strh	r3, [r2, #0]
				rtc_count_set_compare(module, config->compare_values[i],
     284:	68a9      	ldr	r1, [r5, #8]
     286:	2200      	movs	r2, #0
     288:	0020      	movs	r0, r4
     28a:	4b0f      	ldr	r3, [pc, #60]	; (2c8 <rtc_count_init+0x98>)
     28c:	4798      	blx	r3
	return STATUS_OK;
     28e:	2000      	movs	r0, #0
}
     290:	bd70      	pop	{r4, r5, r6, pc}
			rtc_module->MODE1.CTRLA.reg |= RTC_MODE1_CTRLA_MODE(1);
     292:	8813      	ldrh	r3, [r2, #0]
     294:	2104      	movs	r1, #4
     296:	430b      	orrs	r3, r1
     298:	8013      	strh	r3, [r2, #0]
			if (config->clear_on_match) {
     29a:	78eb      	ldrb	r3, [r5, #3]
				return STATUS_ERR_INVALID_ARG;
     29c:	2017      	movs	r0, #23
			if (config->clear_on_match) {
     29e:	2b00      	cmp	r3, #0
     2a0:	d1f6      	bne.n	290 <rtc_count_init+0x60>
				rtc_count_set_compare(module, config->compare_values[i],
     2a2:	2200      	movs	r2, #0
     2a4:	68a9      	ldr	r1, [r5, #8]
     2a6:	0020      	movs	r0, r4
     2a8:	4e07      	ldr	r6, [pc, #28]	; (2c8 <rtc_count_init+0x98>)
     2aa:	47b0      	blx	r6
     2ac:	68e9      	ldr	r1, [r5, #12]
     2ae:	2201      	movs	r2, #1
     2b0:	0020      	movs	r0, r4
     2b2:	47b0      	blx	r6
	return STATUS_OK;
     2b4:	2000      	movs	r0, #0
     2b6:	e7eb      	b.n	290 <rtc_count_init+0x60>
     2b8:	40000400 	.word	0x40000400
     2bc:	40001000 	.word	0x40001000
     2c0:	00000195 	.word	0x00000195
     2c4:	20000280 	.word	0x20000280
     2c8:	000001cd 	.word	0x000001cd

000002cc <rtc_count_set_period>:
 * \retval STATUS_ERR_UNSUPPORTED_DEV  If module is not operated in 16-bit mode
 */
enum status_code rtc_count_set_period(
		struct rtc_module *const module,
		const uint16_t period_value)
{
     2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     2ce:	0004      	movs	r4, r0
     2d0:	000e      	movs	r6, r1
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
     2d2:	7903      	ldrb	r3, [r0, #4]
		return STATUS_ERR_UNSUPPORTED_DEV;
     2d4:	2015      	movs	r0, #21
	if (module->mode != RTC_COUNT_MODE_16BIT) {
     2d6:	2b00      	cmp	r3, #0
     2d8:	d000      	beq.n	2dc <rtc_count_set_period+0x10>
	while (rtc_count_is_syncing(module)) {
		/* Wait for synchronization */
	}

	return STATUS_OK;
}
     2da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	Rtc *const rtc_module = module->hw;
     2dc:	6827      	ldr	r7, [r4, #0]
	while (rtc_count_is_syncing(module)) {
     2de:	4d06      	ldr	r5, [pc, #24]	; (2f8 <rtc_count_set_period+0x2c>)
     2e0:	0020      	movs	r0, r4
     2e2:	47a8      	blx	r5
     2e4:	2800      	cmp	r0, #0
     2e6:	d1fb      	bne.n	2e0 <rtc_count_set_period+0x14>
	rtc_module->MODE1.PER.reg = period_value;
     2e8:	83be      	strh	r6, [r7, #28]
	while (rtc_count_is_syncing(module)) {
     2ea:	4d03      	ldr	r5, [pc, #12]	; (2f8 <rtc_count_set_period+0x2c>)
     2ec:	0020      	movs	r0, r4
     2ee:	47a8      	blx	r5
     2f0:	2800      	cmp	r0, #0
     2f2:	d1fb      	bne.n	2ec <rtc_count_set_period+0x20>
     2f4:	e7f1      	b.n	2da <rtc_count_set_period+0xe>
     2f6:	46c0      	nop			; (mov r8, r8)
     2f8:	00000115 	.word	0x00000115

000002fc <rtc_count_register_callback>:
{

	enum status_code status = STATUS_OK;

	/* Overflow callback */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW
     2fc:	2a0a      	cmp	r2, #10
     2fe:	d009      	beq.n	314 <rtc_count_register_callback+0x18>
#ifdef FEATURE_RTC_TAMPER_DETECTION
		|| callback_type == RTC_COUNT_CALLBACK_TAMPER
#endif
		|| (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
     300:	2a07      	cmp	r2, #7
     302:	d907      	bls.n	314 <rtc_count_register_callback+0x18>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7)) {
		status = STATUS_OK;
	} else {
		/* Make sure callback type can be registered */
		switch (module->mode) {
     304:	7903      	ldrb	r3, [r0, #4]
     306:	2b00      	cmp	r3, #0
     308:	d010      	beq.n	32c <rtc_count_register_callback+0x30>
     30a:	2b01      	cmp	r3, #1
     30c:	d112      	bne.n	334 <rtc_count_register_callback+0x38>
     30e:	3316      	adds	r3, #22
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (callback_type > (RTC_COMP32_NUM + RTC_PER_NUM)) {
     310:	2a09      	cmp	r2, #9
     312:	d809      	bhi.n	328 <rtc_count_register_callback+0x2c>
		}
	}

	if (status == STATUS_OK) {
		/* Register callback */
		module->callbacks[callback_type] = callback;
     314:	1c93      	adds	r3, r2, #2
     316:	009b      	lsls	r3, r3, #2
     318:	5019      	str	r1, [r3, r0]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
     31a:	8e83      	ldrh	r3, [r0, #52]	; 0x34
     31c:	2101      	movs	r1, #1
     31e:	4091      	lsls	r1, r2
     320:	430b      	orrs	r3, r1
     322:	b29b      	uxth	r3, r3
     324:	8683      	strh	r3, [r0, #52]	; 0x34
     326:	2300      	movs	r3, #0
	}

	return status;
}
     328:	0018      	movs	r0, r3
     32a:	4770      	bx	lr
     32c:	2317      	movs	r3, #23
			if (callback_type > (RTC_NUM_OF_COMP16 + RTC_PER_NUM)) {
     32e:	2a0a      	cmp	r2, #10
     330:	d8fa      	bhi.n	328 <rtc_count_register_callback+0x2c>
     332:	e7ef      	b.n	314 <rtc_count_register_callback+0x18>
			status = STATUS_ERR_INVALID_ARG;
     334:	2317      	movs	r3, #23
     336:	e7f7      	b.n	328 <rtc_count_register_callback+0x2c>

00000338 <rtc_count_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_count_enable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
     338:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     33a:	6802      	ldr	r2, [r0, #0]

	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
     33c:	290a      	cmp	r1, #10
     33e:	d011      	beq.n	364 <rtc_count_enable_callback+0x2c>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
     340:	2907      	cmp	r1, #7
     342:	d912      	bls.n	36a <rtc_count_enable_callback+0x32>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);
	}else {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
     344:	2380      	movs	r3, #128	; 0x80
     346:	005b      	lsls	r3, r3, #1
     348:	000c      	movs	r4, r1
     34a:	3c08      	subs	r4, #8
     34c:	40a3      	lsls	r3, r4
     34e:	24c0      	movs	r4, #192	; 0xc0
     350:	00a4      	lsls	r4, r4, #2
     352:	4023      	ands	r3, r4
     354:	8153      	strh	r3, [r2, #10]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
     356:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
     358:	2201      	movs	r2, #1
     35a:	408a      	lsls	r2, r1
     35c:	4313      	orrs	r3, r2
     35e:	b29b      	uxth	r3, r3
     360:	86c3      	strh	r3, [r0, #54]	; 0x36
}
     362:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
     364:	4b04      	ldr	r3, [pc, #16]	; (378 <rtc_count_enable_callback+0x40>)
     366:	8153      	strh	r3, [r2, #10]
     368:	e7f5      	b.n	356 <rtc_count_enable_callback+0x1e>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);
     36a:	2401      	movs	r4, #1
     36c:	408c      	lsls	r4, r1
     36e:	23ff      	movs	r3, #255	; 0xff
     370:	4023      	ands	r3, r4
     372:	8153      	strh	r3, [r2, #10]
     374:	e7ef      	b.n	356 <rtc_count_enable_callback+0x1e>
     376:	46c0      	nop			; (mov r8, r8)
     378:	ffff8000 	.word	0xffff8000

0000037c <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     37e:	46de      	mov	lr, fp
     380:	4657      	mov	r7, sl
     382:	464e      	mov	r6, r9
     384:	4645      	mov	r5, r8
     386:	b5e0      	push	{r5, r6, r7, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
     388:	4b2b      	ldr	r3, [pc, #172]	; (438 <RTC_Handler+0xbc>)
     38a:	681b      	ldr	r3, [r3, #0]
     38c:	469a      	mov	sl, r3
	Rtc *const rtc_module = module->hw;
     38e:	681e      	ldr	r6, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
     390:	8edb      	ldrh	r3, [r3, #54]	; 0x36
	callback_mask &= module->registered_callback;
     392:	4652      	mov	r2, sl
     394:	8e92      	ldrh	r2, [r2, #52]	; 0x34
     396:	401a      	ands	r2, r3
     398:	4690      	mov	r8, r2
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
     39a:	89b2      	ldrh	r2, [r6, #12]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
     39c:	8973      	ldrh	r3, [r6, #10]
     39e:	4013      	ands	r3, r2
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
     3a0:	b21a      	sxth	r2, r3
     3a2:	2a00      	cmp	r2, #0
     3a4:	db08      	blt.n	3b8 <RTC_Handler+0x3c>
     3a6:	27ff      	movs	r7, #255	; 0xff
     3a8:	401f      	ands	r7, r3
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
     3aa:	d02a      	beq.n	402 <RTC_Handler+0x86>
     3ac:	2400      	movs	r4, #0
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
     3ae:	2301      	movs	r3, #1
     3b0:	4699      	mov	r9, r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
     3b2:	33fe      	adds	r3, #254	; 0xfe
     3b4:	469b      	mov	fp, r3
     3b6:	e014      	b.n	3e2 <RTC_Handler+0x66>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
     3b8:	4643      	mov	r3, r8
     3ba:	055b      	lsls	r3, r3, #21
     3bc:	d407      	bmi.n	3ce <RTC_Handler+0x52>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
     3be:	4b1f      	ldr	r3, [pc, #124]	; (43c <RTC_Handler+0xc0>)
     3c0:	81b3      	strh	r3, [r6, #12]
	_rtc_interrupt_handler(0);
}
     3c2:	bc3c      	pop	{r2, r3, r4, r5}
     3c4:	4690      	mov	r8, r2
     3c6:	4699      	mov	r9, r3
     3c8:	46a2      	mov	sl, r4
     3ca:	46ab      	mov	fp, r5
     3cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
     3ce:	4653      	mov	r3, sl
     3d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     3d2:	4798      	blx	r3
     3d4:	e7f3      	b.n	3be <RTC_Handler+0x42>
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
     3d6:	465b      	mov	r3, fp
     3d8:	401d      	ands	r5, r3
     3da:	81b5      	strh	r5, [r6, #12]
     3dc:	3401      	adds	r4, #1
		for ( i = 0;i < RTC_PER_NUM;i++) {
     3de:	2c08      	cmp	r4, #8
     3e0:	d0ef      	beq.n	3c2 <RTC_Handler+0x46>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
     3e2:	0023      	movs	r3, r4
     3e4:	464d      	mov	r5, r9
     3e6:	40a5      	lsls	r5, r4
     3e8:	422f      	tst	r7, r5
     3ea:	d0f4      	beq.n	3d6 <RTC_Handler+0x5a>
			  && (callback_mask & (1 << i))) {
     3ec:	4642      	mov	r2, r8
     3ee:	4122      	asrs	r2, r4
     3f0:	4649      	mov	r1, r9
     3f2:	4211      	tst	r1, r2
     3f4:	d0ef      	beq.n	3d6 <RTC_Handler+0x5a>
				module->callbacks[i]();
     3f6:	3302      	adds	r3, #2
     3f8:	009b      	lsls	r3, r3, #2
     3fa:	4652      	mov	r2, sl
     3fc:	589b      	ldr	r3, [r3, r2]
     3fe:	4798      	blx	r3
     400:	e7e9      	b.n	3d6 <RTC_Handler+0x5a>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
     402:	05da      	lsls	r2, r3, #23
     404:	d50a      	bpl.n	41c <RTC_Handler+0xa0>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
     406:	4643      	mov	r3, r8
     408:	05db      	lsls	r3, r3, #23
     40a:	d403      	bmi.n	414 <RTC_Handler+0x98>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
     40c:	2380      	movs	r3, #128	; 0x80
     40e:	005b      	lsls	r3, r3, #1
     410:	81b3      	strh	r3, [r6, #12]
     412:	e7d6      	b.n	3c2 <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
     414:	4653      	mov	r3, sl
     416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     418:	4798      	blx	r3
     41a:	e7f7      	b.n	40c <RTC_Handler+0x90>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
     41c:	059b      	lsls	r3, r3, #22
     41e:	d5d0      	bpl.n	3c2 <RTC_Handler+0x46>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
     420:	4643      	mov	r3, r8
     422:	059b      	lsls	r3, r3, #22
     424:	d403      	bmi.n	42e <RTC_Handler+0xb2>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
     426:	2380      	movs	r3, #128	; 0x80
     428:	009b      	lsls	r3, r3, #2
     42a:	81b3      	strh	r3, [r6, #12]
}
     42c:	e7c9      	b.n	3c2 <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
     42e:	4653      	mov	r3, sl
     430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     432:	4798      	blx	r3
     434:	e7f7      	b.n	426 <RTC_Handler+0xaa>
     436:	46c0      	nop			; (mov r8, r8)
     438:	20000280 	.word	0x20000280
     43c:	ffff8000 	.word	0xffff8000

00000440 <wdt_set_config>:
 * \retval STATUS_ERR_IO  If the Watchdog module is locked to be always on
 */
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
enum status_code wdt_set_config(
		const struct wdt_conf *const config)
{
     440:	b510      	push	{r4, lr}
     442:	4a2b      	ldr	r2, [pc, #172]	; (4f0 <wdt_set_config+0xb0>)
     444:	6953      	ldr	r3, [r2, #20]
     446:	2180      	movs	r1, #128	; 0x80
     448:	430b      	orrs	r3, r1
     44a:	6153      	str	r3, [r2, #20]
static inline bool wdt_is_locked(void)
{
	Wdt *const WDT_module = WDT;

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	return (WDT_module->CTRLA.reg & WDT_CTRLA_ALWAYSON);
     44c:	4b29      	ldr	r3, [pc, #164]	; (4f4 <wdt_set_config+0xb4>)
     44e:	781b      	ldrb	r3, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_WDT);

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
     450:	b25b      	sxtb	r3, r3
		return STATUS_ERR_IO;
     452:	2210      	movs	r2, #16
	if (wdt_is_locked()) {
     454:	2b00      	cmp	r3, #0
     456:	db03      	blt.n	460 <wdt_set_config+0x20>
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
     458:	7883      	ldrb	r3, [r0, #2]
		return STATUS_ERR_INVALID_ARG;
     45a:	3207      	adds	r2, #7
	if (config->timeout_period == WDT_PERIOD_NONE) {
     45c:	2b00      	cmp	r3, #0
     45e:	d101      	bne.n	464 <wdt_set_config+0x24>
	while (wdt_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}

	return STATUS_OK;
}
     460:	0010      	movs	r0, r2
     462:	bd10      	pop	{r4, pc}
	if ((config->timeout_period < config->window_period) ||
     464:	78c1      	ldrb	r1, [r0, #3]
     466:	4299      	cmp	r1, r3
     468:	d8fa      	bhi.n	460 <wdt_set_config+0x20>
     46a:	7901      	ldrb	r1, [r0, #4]
     46c:	4299      	cmp	r1, r3
     46e:	d8f7      	bhi.n	460 <wdt_set_config+0x20>
	WDT_module->CTRLA.reg &= ~WDT_CTRLA_ENABLE;
     470:	4a20      	ldr	r2, [pc, #128]	; (4f4 <wdt_set_config+0xb4>)
     472:	7813      	ldrb	r3, [r2, #0]
     474:	2102      	movs	r1, #2
     476:	438b      	bics	r3, r1
     478:	7013      	strb	r3, [r2, #0]
	if (WDT_module->SYNCBUSY.reg) {
     47a:	6893      	ldr	r3, [r2, #8]
	while (wdt_is_syncing()) {
     47c:	2b00      	cmp	r3, #0
     47e:	d1fc      	bne.n	47a <wdt_set_config+0x3a>
	if(config->enable == false) {
     480:	7843      	ldrb	r3, [r0, #1]
		return STATUS_OK;
     482:	2200      	movs	r2, #0
	if(config->enable == false) {
     484:	2b00      	cmp	r3, #0
     486:	d0eb      	beq.n	460 <wdt_set_config+0x20>
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
     488:	7883      	ldrb	r3, [r0, #2]
     48a:	3b01      	subs	r3, #1
	if (config->window_period != WDT_PERIOD_NONE) {
     48c:	78c2      	ldrb	r2, [r0, #3]
     48e:	2a00      	cmp	r2, #0
     490:	d022      	beq.n	4d8 <wdt_set_config+0x98>
		WDT_module->CTRLA.reg |= WDT_CTRLA_WEN;
     492:	4918      	ldr	r1, [pc, #96]	; (4f4 <wdt_set_config+0xb4>)
     494:	780a      	ldrb	r2, [r1, #0]
     496:	2404      	movs	r4, #4
     498:	4322      	orrs	r2, r4
     49a:	700a      	strb	r2, [r1, #0]
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
     49c:	78c2      	ldrb	r2, [r0, #3]
     49e:	3a01      	subs	r2, #1
     4a0:	40a2      	lsls	r2, r4
     4a2:	4313      	orrs	r3, r2
     4a4:	4a13      	ldr	r2, [pc, #76]	; (4f4 <wdt_set_config+0xb4>)
     4a6:	6891      	ldr	r1, [r2, #8]
	while (wdt_is_syncing()) {
     4a8:	2900      	cmp	r1, #0
     4aa:	d1fc      	bne.n	4a6 <wdt_set_config+0x66>
	WDT_module->CONFIG.reg = new_config;
     4ac:	b2db      	uxtb	r3, r3
     4ae:	4a11      	ldr	r2, [pc, #68]	; (4f4 <wdt_set_config+0xb4>)
     4b0:	7053      	strb	r3, [r2, #1]
	if (config->early_warning_period != WDT_PERIOD_NONE) {
     4b2:	7903      	ldrb	r3, [r0, #4]
     4b4:	2b00      	cmp	r3, #0
     4b6:	d002      	beq.n	4be <wdt_set_config+0x7e>
			= (config->early_warning_period - 1) << WDT_EWCTRL_EWOFFSET_Pos;
     4b8:	3b01      	subs	r3, #1
     4ba:	b2db      	uxtb	r3, r3
     4bc:	7093      	strb	r3, [r2, #2]
	if (config->always_on) {
     4be:	7803      	ldrb	r3, [r0, #0]
     4c0:	2b00      	cmp	r3, #0
     4c2:	d00f      	beq.n	4e4 <wdt_set_config+0xa4>
		WDT_module->CTRLA.reg |= WDT_CTRLA_ALWAYSON;
     4c4:	4a0b      	ldr	r2, [pc, #44]	; (4f4 <wdt_set_config+0xb4>)
     4c6:	7813      	ldrb	r3, [r2, #0]
     4c8:	2180      	movs	r1, #128	; 0x80
     4ca:	430b      	orrs	r3, r1
     4cc:	7013      	strb	r3, [r2, #0]
     4ce:	4b09      	ldr	r3, [pc, #36]	; (4f4 <wdt_set_config+0xb4>)
     4d0:	689a      	ldr	r2, [r3, #8]
	while (wdt_is_syncing()) {
     4d2:	2a00      	cmp	r2, #0
     4d4:	d1fc      	bne.n	4d0 <wdt_set_config+0x90>
     4d6:	e7c3      	b.n	460 <wdt_set_config+0x20>
		WDT_module->CTRLA.reg &= ~WDT_CTRLA_WEN;
     4d8:	4906      	ldr	r1, [pc, #24]	; (4f4 <wdt_set_config+0xb4>)
     4da:	780a      	ldrb	r2, [r1, #0]
     4dc:	2404      	movs	r4, #4
     4de:	43a2      	bics	r2, r4
     4e0:	700a      	strb	r2, [r1, #0]
     4e2:	e7df      	b.n	4a4 <wdt_set_config+0x64>
		WDT_module->CTRLA.reg |= WDT_CTRLA_ENABLE;
     4e4:	4a03      	ldr	r2, [pc, #12]	; (4f4 <wdt_set_config+0xb4>)
     4e6:	7813      	ldrb	r3, [r2, #0]
     4e8:	2102      	movs	r1, #2
     4ea:	430b      	orrs	r3, r1
     4ec:	7013      	strb	r3, [r2, #0]
     4ee:	e7ee      	b.n	4ce <wdt_set_config+0x8e>
     4f0:	40000400 	.word	0x40000400
     4f4:	40001c00 	.word	0x40001c00

000004f8 <wdt_reset_count>:
void wdt_reset_count(void)
{
	Wdt *const WDT_module = WDT;

	/* Disable the Watchdog module */
	WDT_module->CLEAR.reg = WDT_CLEAR_CLEAR_KEY;
     4f8:	22a5      	movs	r2, #165	; 0xa5
     4fa:	4b03      	ldr	r3, [pc, #12]	; (508 <wdt_reset_count+0x10>)
     4fc:	731a      	strb	r2, [r3, #12]
     4fe:	001a      	movs	r2, r3
     500:	6893      	ldr	r3, [r2, #8]

	while (wdt_is_syncing()) {
     502:	2b00      	cmp	r3, #0
     504:	d1fc      	bne.n	500 <wdt_reset_count+0x8>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     506:	4770      	bx	lr
     508:	40001c00 	.word	0x40001c00

0000050c <wdt_register_callback>:
		const enum wdt_callback type)
{
	/* Sanity check arguments */
	Assert(callback);

	switch (type)
     50c:	2900      	cmp	r1, #0
     50e:	d001      	beq.n	514 <wdt_register_callback+0x8>
	case WDT_CALLBACK_EARLY_WARNING:
		wdt_early_warning_callback = callback;
		return STATUS_OK;
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     510:	2017      	movs	r0, #23
	}
}
     512:	4770      	bx	lr
		wdt_early_warning_callback = callback;
     514:	4b01      	ldr	r3, [pc, #4]	; (51c <wdt_register_callback+0x10>)
     516:	6018      	str	r0, [r3, #0]
		return STATUS_OK;
     518:	2000      	movs	r0, #0
     51a:	e7fa      	b.n	512 <wdt_register_callback+0x6>
     51c:	20000284 	.word	0x20000284

00000520 <wdt_enable_callback>:
enum status_code wdt_enable_callback(
		const enum wdt_callback type)
{
	Wdt *const WDT_module = WDT;

	switch (type)
     520:	2800      	cmp	r0, #0
     522:	d001      	beq.n	528 <wdt_enable_callback+0x8>
		WDT_module->INTENSET.reg = WDT_INTENSET_EW;
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_WDT);
		return STATUS_OK;
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     524:	2017      	movs	r0, #23
	}
}
     526:	4770      	bx	lr
		WDT_module->INTENSET.reg = WDT_INTENSET_EW;
     528:	2201      	movs	r2, #1
     52a:	4b03      	ldr	r3, [pc, #12]	; (538 <wdt_enable_callback+0x18>)
     52c:	715a      	strb	r2, [r3, #5]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     52e:	3201      	adds	r2, #1
     530:	4b02      	ldr	r3, [pc, #8]	; (53c <wdt_enable_callback+0x1c>)
     532:	601a      	str	r2, [r3, #0]
		return STATUS_OK;
     534:	e7f7      	b.n	526 <wdt_enable_callback+0x6>
     536:	46c0      	nop			; (mov r8, r8)
     538:	40001c00 	.word	0x40001c00
     53c:	e000e100 	.word	0xe000e100

00000540 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
     540:	b510      	push	{r4, lr}
 */
static inline void wdt_clear_early_warning(void)
{
	Wdt *const WDT_module = WDT;

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
     542:	2201      	movs	r2, #1
     544:	4b03      	ldr	r3, [pc, #12]	; (554 <WDT_Handler+0x14>)
     546:	719a      	strb	r2, [r3, #6]
	wdt_clear_early_warning();

	if (wdt_early_warning_callback) {
     548:	4b03      	ldr	r3, [pc, #12]	; (558 <WDT_Handler+0x18>)
     54a:	681b      	ldr	r3, [r3, #0]
     54c:	2b00      	cmp	r3, #0
     54e:	d000      	beq.n	552 <WDT_Handler+0x12>
		wdt_early_warning_callback();
     550:	4798      	blx	r3
	}
}
     552:	bd10      	pop	{r4, pc}
     554:	40001c00 	.word	0x40001c00
     558:	20000284 	.word	0x20000284

0000055c <configure_tc>:
struct tc_module tc_instance;


//! [setup]
void configure_tc(void)
{
     55c:	b510      	push	{r4, lr}
     55e:	b08e      	sub	sp, #56	; 0x38
	//! [setup_config]
	struct tc_config config_tc;
	//! [setup_config]
	//! [setup_config_defaults]
	tc_reset(&tc_instance);
     560:	4c21      	ldr	r4, [pc, #132]	; (5e8 <configure_tc+0x8c>)
     562:	0020      	movs	r0, r4
     564:	4b21      	ldr	r3, [pc, #132]	; (5ec <configure_tc+0x90>)
     566:	4798      	blx	r3

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     568:	2300      	movs	r3, #0
     56a:	466a      	mov	r2, sp
     56c:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     56e:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = false;
     570:	7053      	strb	r3, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	config->on_demand                  = false;
     572:	7093      	strb	r3, [r2, #2]
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     574:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     576:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     578:	7293      	strb	r3, [r2, #10]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     57a:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     57c:	7313      	strb	r3, [r2, #12]
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     57e:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
     580:	7353      	strb	r3, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     582:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     584:	9305      	str	r3, [sp, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     586:	9306      	str	r3, [sp, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     588:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     58a:	9308      	str	r3, [sp, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     58c:	9309      	str	r3, [sp, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
     58e:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     590:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     592:	8593      	strh	r3, [r2, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
     594:	3334      	adds	r3, #52	; 0x34
     596:	2200      	movs	r2, #0
     598:	4669      	mov	r1, sp
     59a:	54ca      	strb	r2, [r1, r3]
	tc_get_config_defaults(&config_tc);
	//! [setup_config_defaults]

	//! [setup_change_config]  // 32 bit Timer 
	config_tc.counter_size = TC_COUNTER_SIZE_32BIT;
     59c:	3b2c      	subs	r3, #44	; 0x2c
     59e:	466a      	mov	r2, sp
     5a0:	70cb      	strb	r3, [r1, #3]
	config_tc.clock_source = GCLK_GENERATOR_1;
     5a2:	3b07      	subs	r3, #7
     5a4:	700b      	strb	r3, [r1, #0]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV64;
     5a6:	23a0      	movs	r3, #160	; 0xa0
     5a8:	00db      	lsls	r3, r3, #3
     5aa:	808b      	strh	r3, [r1, #4]

	//! [setup_set_config]
	tc_init(&tc_instance, CONF_TC_MODULE, &config_tc);
     5ac:	4910      	ldr	r1, [pc, #64]	; (5f0 <configure_tc+0x94>)
     5ae:	0020      	movs	r0, r4
     5b0:	4b10      	ldr	r3, [pc, #64]	; (5f4 <configure_tc+0x98>)
     5b2:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     5b4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     5b6:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
     5b8:	2b00      	cmp	r3, #0
     5ba:	d1fc      	bne.n	5b6 <configure_tc+0x5a>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     5bc:	6813      	ldr	r3, [r2, #0]
     5be:	2102      	movs	r1, #2
     5c0:	430b      	orrs	r3, r1
     5c2:	6013      	str	r3, [r2, #0]

	//! [setup_enable]
	tc_enable(&tc_instance);
	//! [setup_enable]
	// Set the Timer Counter value to Zero 
	tc_set_count_value(&tc_instance, 0);
     5c4:	4c08      	ldr	r4, [pc, #32]	; (5e8 <configure_tc+0x8c>)
     5c6:	2100      	movs	r1, #0
     5c8:	0020      	movs	r0, r4
     5ca:	4b0b      	ldr	r3, [pc, #44]	; (5f8 <configure_tc+0x9c>)
     5cc:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     5ce:	6823      	ldr	r3, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     5d0:	691a      	ldr	r2, [r3, #16]

	while (tc_is_syncing(module_inst)) {
     5d2:	2a00      	cmp	r2, #0
     5d4:	d1fc      	bne.n	5d0 <configure_tc+0x74>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
     5d6:	711a      	strb	r2, [r3, #4]
	return (tc_module->SYNCBUSY.reg);
     5d8:	691a      	ldr	r2, [r3, #16]

	while (tc_is_syncing(module_inst)) {
     5da:	2a00      	cmp	r2, #0
     5dc:	d1fc      	bne.n	5d8 <configure_tc+0x7c>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
     5de:	3220      	adds	r2, #32
     5e0:	715a      	strb	r2, [r3, #5]
		
	/* Start timer */
	tc_start_counter(&tc_instance);
}
     5e2:	b00e      	add	sp, #56	; 0x38
     5e4:	bd10      	pop	{r4, pc}
     5e6:	46c0      	nop			; (mov r8, r8)
     5e8:	20000288 	.word	0x20000288
     5ec:	000018e1 	.word	0x000018e1
     5f0:	43000800 	.word	0x43000800
     5f4:	00001589 	.word	0x00001589
     5f8:	00001869 	.word	0x00001869

000005fc <MiWi_TickGet>:
{
	return tc_get_count_value(&tc_instance);
}

uint32_t MiWi_TickGet(void)
{
     5fc:	b510      	push	{r4, lr}
	MIWI_TICK count;
	count.Val = tc_get_count_value(&tc_instance);
     5fe:	4802      	ldr	r0, [pc, #8]	; (608 <MiWi_TickGet+0xc>)
     600:	4b02      	ldr	r3, [pc, #8]	; (60c <MiWi_TickGet+0x10>)
     602:	4798      	blx	r3
	return count.Val;
     604:	bd10      	pop	{r4, pc}
     606:	46c0      	nop			; (mov r8, r8)
     608:	20000288 	.word	0x20000288
     60c:	00001899 	.word	0x00001899

00000610 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     610:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     612:	2000      	movs	r0, #0
     614:	4b08      	ldr	r3, [pc, #32]	; (638 <delay_init+0x28>)
     616:	4798      	blx	r3
     618:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     61a:	4c08      	ldr	r4, [pc, #32]	; (63c <delay_init+0x2c>)
     61c:	21fa      	movs	r1, #250	; 0xfa
     61e:	0089      	lsls	r1, r1, #2
     620:	47a0      	blx	r4
     622:	4b07      	ldr	r3, [pc, #28]	; (640 <delay_init+0x30>)
     624:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     626:	4907      	ldr	r1, [pc, #28]	; (644 <delay_init+0x34>)
     628:	0028      	movs	r0, r5
     62a:	47a0      	blx	r4
     62c:	4b06      	ldr	r3, [pc, #24]	; (648 <delay_init+0x38>)
     62e:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     630:	2205      	movs	r2, #5
     632:	4b06      	ldr	r3, [pc, #24]	; (64c <delay_init+0x3c>)
     634:	601a      	str	r2, [r3, #0]
}
     636:	bd70      	pop	{r4, r5, r6, pc}
     638:	00003695 	.word	0x00003695
     63c:	0000560d 	.word	0x0000560d
     640:	20000000 	.word	0x20000000
     644:	000f4240 	.word	0x000f4240
     648:	20000004 	.word	0x20000004
     64c:	e000e010 	.word	0xe000e010

00000650 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     650:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     652:	4b08      	ldr	r3, [pc, #32]	; (674 <delay_cycles_us+0x24>)
     654:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     656:	4a08      	ldr	r2, [pc, #32]	; (678 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     658:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     65a:	2180      	movs	r1, #128	; 0x80
     65c:	0249      	lsls	r1, r1, #9
	while (n--) {
     65e:	3801      	subs	r0, #1
     660:	d307      	bcc.n	672 <delay_cycles_us+0x22>
	if (n > 0) {
     662:	2c00      	cmp	r4, #0
     664:	d0fb      	beq.n	65e <delay_cycles_us+0xe>
		SysTick->LOAD = n;
     666:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     668:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     66a:	6813      	ldr	r3, [r2, #0]
     66c:	420b      	tst	r3, r1
     66e:	d0fc      	beq.n	66a <delay_cycles_us+0x1a>
     670:	e7f5      	b.n	65e <delay_cycles_us+0xe>
	}
}
     672:	bd30      	pop	{r4, r5, pc}
     674:	20000004 	.word	0x20000004
     678:	e000e010 	.word	0xe000e010

0000067c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     67c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     67e:	4b08      	ldr	r3, [pc, #32]	; (6a0 <delay_cycles_ms+0x24>)
     680:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
     682:	4a08      	ldr	r2, [pc, #32]	; (6a4 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     684:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     686:	2180      	movs	r1, #128	; 0x80
     688:	0249      	lsls	r1, r1, #9
	while (n--) {
     68a:	3801      	subs	r0, #1
     68c:	d307      	bcc.n	69e <delay_cycles_ms+0x22>
	if (n > 0) {
     68e:	2c00      	cmp	r4, #0
     690:	d0fb      	beq.n	68a <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     692:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     694:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     696:	6813      	ldr	r3, [r2, #0]
     698:	420b      	tst	r3, r1
     69a:	d0fc      	beq.n	696 <delay_cycles_ms+0x1a>
     69c:	e7f5      	b.n	68a <delay_cycles_ms+0xe>
	}
}
     69e:	bd30      	pop	{r4, r5, pc}
     6a0:	20000000 	.word	0x20000000
     6a4:	e000e010 	.word	0xe000e010

000006a8 <at30tse_init>:

/**
 * \brief Configures the SERCOM I2C master to be used with the AT30TSE75X device.
 */
void at30tse_init(void)
{
     6a8:	b510      	push	{r4, lr}
     6aa:	b08e      	sub	sp, #56	; 0x38
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
     6ac:	aa01      	add	r2, sp, #4
     6ae:	2364      	movs	r3, #100	; 0x64
     6b0:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
     6b2:	4b1d      	ldr	r3, [pc, #116]	; (728 <at30tse_init+0x80>)
     6b4:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
     6b6:	2300      	movs	r3, #0
     6b8:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
     6ba:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
     6bc:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
     6be:	2180      	movs	r1, #128	; 0x80
     6c0:	0389      	lsls	r1, r1, #14
     6c2:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
     6c4:	2101      	movs	r1, #1
     6c6:	4249      	negs	r1, r1
     6c8:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
     6ca:	3125      	adds	r1, #37	; 0x25
     6cc:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
     6ce:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
     6d0:	3108      	adds	r1, #8
     6d2:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
     6d4:	3101      	adds	r1, #1
     6d6:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
     6d8:	3101      	adds	r1, #1
     6da:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
     6dc:	33d7      	adds	r3, #215	; 0xd7
     6de:	8613      	strh	r3, [r2, #48]	; 0x30
    /* Initialize config structure and device instance. */
	struct i2c_master_config conf;
	i2c_master_get_config_defaults(&conf);

	/* Change buffer timeout to something longer. */
	conf.buffer_timeout = 10000;
     6e0:	4b12      	ldr	r3, [pc, #72]	; (72c <at30tse_init+0x84>)
     6e2:	82d3      	strh	r3, [r2, #22]

	conf.pinmux_pad0 = AT30TSE_PINMUX_PAD0;
     6e4:	4b12      	ldr	r3, [pc, #72]	; (730 <at30tse_init+0x88>)
     6e6:	61d3      	str	r3, [r2, #28]
	conf.pinmux_pad1 = AT30TSE_PINMUX_PAD1;
     6e8:	4b12      	ldr	r3, [pc, #72]	; (734 <at30tse_init+0x8c>)
     6ea:	6213      	str	r3, [r2, #32]

	/* Initialize and enable device with config. */
	i2c_master_init(&dev_inst_at30tse75x, AT30TSE_SERCOM, &conf);
     6ec:	4c12      	ldr	r4, [pc, #72]	; (738 <at30tse_init+0x90>)
     6ee:	2184      	movs	r1, #132	; 0x84
     6f0:	05c9      	lsls	r1, r1, #23
     6f2:	0020      	movs	r0, r4
     6f4:	4b11      	ldr	r3, [pc, #68]	; (73c <at30tse_init+0x94>)
     6f6:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     6f8:	6822      	ldr	r2, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     6fa:	2107      	movs	r1, #7
     6fc:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
     6fe:	4219      	tst	r1, r3
     700:	d1fc      	bne.n	6fc <at30tse_init+0x54>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     702:	6813      	ldr	r3, [r2, #0]
     704:	2102      	movs	r1, #2
     706:	430b      	orrs	r3, r1
     708:	6013      	str	r3, [r2, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     70a:	4b0b      	ldr	r3, [pc, #44]	; (738 <at30tse_init+0x90>)
     70c:	88dc      	ldrh	r4, [r3, #6]
	uint32_t timeout_counter = 0;
     70e:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     710:	2010      	movs	r0, #16
     712:	8b51      	ldrh	r1, [r2, #26]
     714:	4201      	tst	r1, r0
     716:	d104      	bne.n	722 <at30tse_init+0x7a>
		timeout_counter++;
     718:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     71a:	42a3      	cmp	r3, r4
     71c:	d3f9      	bcc.n	712 <at30tse_init+0x6a>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
     71e:	2310      	movs	r3, #16
     720:	8353      	strh	r3, [r2, #26]
	i2c_master_enable(&dev_inst_at30tse75x);
}
     722:	b00e      	add	sp, #56	; 0x38
     724:	bd10      	pop	{r4, pc}
     726:	46c0      	nop			; (mov r8, r8)
     728:	00000d48 	.word	0x00000d48
     72c:	00002710 	.word	0x00002710
     730:	00080002 	.word	0x00080002
     734:	00090002 	.word	0x00090002
     738:	200002a4 	.word	0x200002a4
     73c:	00000a69 	.word	0x00000a69

00000740 <at30tse_read_register>:
 * \param[in] reg_size Register size.
 *
 * \return Register value.
 */
uint16_t at30tse_read_register(uint8_t reg, uint8_t reg_type, uint8_t reg_size)
{
     740:	b570      	push	{r4, r5, r6, lr}
     742:	b088      	sub	sp, #32
	uint8_t buffer[2];
	buffer[0] = reg | reg_type;
     744:	ad07      	add	r5, sp, #28
     746:	4308      	orrs	r0, r1
     748:	7028      	strb	r0, [r5, #0]
	buffer[1] = 0;
     74a:	2300      	movs	r3, #0
     74c:	706b      	strb	r3, [r5, #1]

	/* Internal register pointer in AT30TSE */
    struct i2c_master_packet write_transfer = {
     74e:	a904      	add	r1, sp, #16
     750:	2048      	movs	r0, #72	; 0x48
     752:	8008      	strh	r0, [r1, #0]
     754:	2401      	movs	r4, #1
     756:	804c      	strh	r4, [r1, #2]
     758:	604d      	str	r5, [r1, #4]
     75a:	720b      	strb	r3, [r1, #8]
     75c:	724b      	strb	r3, [r1, #9]
     75e:	728b      	strb	r3, [r1, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	/* Read data */
    struct i2c_master_packet read_transfer = {
     760:	ac01      	add	r4, sp, #4
     762:	8020      	strh	r0, [r4, #0]
     764:	8062      	strh	r2, [r4, #2]
     766:	9502      	str	r5, [sp, #8]
     768:	7223      	strb	r3, [r4, #8]
     76a:	7263      	strb	r3, [r4, #9]
     76c:	72a3      	strb	r3, [r4, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	/* Do the transfer */
	i2c_master_write_packet_wait_no_stop(&dev_inst_at30tse75x, &write_transfer);
     76e:	4e07      	ldr	r6, [pc, #28]	; (78c <at30tse_read_register+0x4c>)
     770:	0030      	movs	r0, r6
     772:	4b07      	ldr	r3, [pc, #28]	; (790 <at30tse_read_register+0x50>)
     774:	4798      	blx	r3
    i2c_master_read_packet_wait(&dev_inst_at30tse75x, &read_transfer);
     776:	0021      	movs	r1, r4
     778:	0030      	movs	r0, r6
     77a:	4b06      	ldr	r3, [pc, #24]	; (794 <at30tse_read_register+0x54>)
     77c:	4798      	blx	r3

	return (buffer[0] << 8) | buffer[1];
     77e:	782b      	ldrb	r3, [r5, #0]
     780:	021b      	lsls	r3, r3, #8
     782:	7868      	ldrb	r0, [r5, #1]
     784:	4318      	orrs	r0, r3
}
     786:	b008      	add	sp, #32
     788:	bd70      	pop	{r4, r5, r6, pc}
     78a:	46c0      	nop			; (mov r8, r8)
     78c:	200002a4 	.word	0x200002a4
     790:	00001069 	.word	0x00001069
     794:	00001055 	.word	0x00001055

00000798 <at30tse_read_temperature>:
 * \brief Reads the temperature value.
 *
 * \return Temperature data.
 */
double at30tse_read_temperature()
{
     798:	b5d0      	push	{r4, r6, r7, lr}
	/* Read the 16-bit temperature register. */
	uint16_t data = at30tse_read_register(AT30TSE_TEMPERATURE_REG,
     79a:	2202      	movs	r2, #2
     79c:	2100      	movs	r1, #0
     79e:	2000      	movs	r0, #0
     7a0:	4b1f      	ldr	r3, [pc, #124]	; (820 <at30tse_read_temperature+0x88>)
     7a2:	4798      	blx	r3
     7a4:	0003      	movs	r3, r0
											AT30TSE_NON_VOLATILE_REG,
											AT30TSE_TEMPERATURE_REG_SIZE);

	double temperature = 0;
	int8_t sign = 1;
     7a6:	2701      	movs	r7, #1

	/*Check if negative and clear sign bit. */
	if (data & (1 << 15)){
     7a8:	0402      	lsls	r2, r0, #16
     7aa:	d40c      	bmi.n	7c6 <at30tse_read_temperature+0x2e>
		sign *= -1;
		data &= ~(1 << 15);
	}

	/* Convert to temperature  */
	switch (resolution){
     7ac:	4a1d      	ldr	r2, [pc, #116]	; (824 <at30tse_read_temperature+0x8c>)
     7ae:	7816      	ldrb	r6, [r2, #0]
     7b0:	2e01      	cmp	r6, #1
     7b2:	d016      	beq.n	7e2 <at30tse_read_temperature+0x4a>
     7b4:	2e00      	cmp	r6, #0
     7b6:	d00a      	beq.n	7ce <at30tse_read_temperature+0x36>
     7b8:	2e02      	cmp	r6, #2
     7ba:	d01c      	beq.n	7f6 <at30tse_read_temperature+0x5e>
     7bc:	2e03      	cmp	r6, #3
     7be:	d025      	beq.n	80c <at30tse_read_temperature+0x74>
	double temperature = 0;
     7c0:	2000      	movs	r0, #0
     7c2:	2100      	movs	r1, #0
			temperature = data * sign * 0.0625;
			break;
		default:
			break;
	}
	return temperature;
     7c4:	e00c      	b.n	7e0 <at30tse_read_temperature+0x48>
		data &= ~(1 << 15);
     7c6:	0440      	lsls	r0, r0, #17
     7c8:	0c43      	lsrs	r3, r0, #17
		sign *= -1;
     7ca:	3f02      	subs	r7, #2
     7cc:	e7ee      	b.n	7ac <at30tse_read_temperature+0x14>
			data = (data >> 7);
     7ce:	09db      	lsrs	r3, r3, #7
			temperature = data * sign * 0.5;
     7d0:	b298      	uxth	r0, r3
     7d2:	4378      	muls	r0, r7
     7d4:	4b14      	ldr	r3, [pc, #80]	; (828 <at30tse_read_temperature+0x90>)
     7d6:	4798      	blx	r3
     7d8:	2200      	movs	r2, #0
     7da:	4b14      	ldr	r3, [pc, #80]	; (82c <at30tse_read_temperature+0x94>)
     7dc:	4c14      	ldr	r4, [pc, #80]	; (830 <at30tse_read_temperature+0x98>)
     7de:	47a0      	blx	r4
}
     7e0:	bdd0      	pop	{r4, r6, r7, pc}
			data = (data >> 6);
     7e2:	099b      	lsrs	r3, r3, #6
			temperature = data * sign * 0.25;
     7e4:	b298      	uxth	r0, r3
     7e6:	4378      	muls	r0, r7
     7e8:	4b0f      	ldr	r3, [pc, #60]	; (828 <at30tse_read_temperature+0x90>)
     7ea:	4798      	blx	r3
     7ec:	2200      	movs	r2, #0
     7ee:	4b11      	ldr	r3, [pc, #68]	; (834 <at30tse_read_temperature+0x9c>)
     7f0:	4c0f      	ldr	r4, [pc, #60]	; (830 <at30tse_read_temperature+0x98>)
     7f2:	47a0      	blx	r4
			break;
     7f4:	e7f4      	b.n	7e0 <at30tse_read_temperature+0x48>
			data = (data >> 5);
     7f6:	095b      	lsrs	r3, r3, #5
			temperature = data * sign * 0.125;
     7f8:	b298      	uxth	r0, r3
     7fa:	4378      	muls	r0, r7
     7fc:	4b0a      	ldr	r3, [pc, #40]	; (828 <at30tse_read_temperature+0x90>)
     7fe:	4798      	blx	r3
     800:	2200      	movs	r2, #0
     802:	23ff      	movs	r3, #255	; 0xff
     804:	059b      	lsls	r3, r3, #22
     806:	4c0a      	ldr	r4, [pc, #40]	; (830 <at30tse_read_temperature+0x98>)
     808:	47a0      	blx	r4
			break;
     80a:	e7e9      	b.n	7e0 <at30tse_read_temperature+0x48>
			data = (data >> 4);
     80c:	091b      	lsrs	r3, r3, #4
			temperature = data * sign * 0.0625;
     80e:	b298      	uxth	r0, r3
     810:	4378      	muls	r0, r7
     812:	4b05      	ldr	r3, [pc, #20]	; (828 <at30tse_read_temperature+0x90>)
     814:	4798      	blx	r3
     816:	2200      	movs	r2, #0
     818:	4b07      	ldr	r3, [pc, #28]	; (838 <at30tse_read_temperature+0xa0>)
     81a:	4c05      	ldr	r4, [pc, #20]	; (830 <at30tse_read_temperature+0x98>)
     81c:	47a0      	blx	r4
			break;
     81e:	e7df      	b.n	7e0 <at30tse_read_temperature+0x48>
     820:	00000741 	.word	0x00000741
     824:	200000a0 	.word	0x200000a0
     828:	00006fd1 	.word	0x00006fd1
     82c:	3fe00000 	.word	0x3fe00000
     830:	0000643d 	.word	0x0000643d
     834:	3fd00000 	.word	0x3fd00000
     838:	3fb00000 	.word	0x3fb00000

0000083c <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     83c:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     83e:	2a00      	cmp	r2, #0
     840:	d001      	beq.n	846 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     842:	0018      	movs	r0, r3
     844:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     846:	008b      	lsls	r3, r1, #2
     848:	4a06      	ldr	r2, [pc, #24]	; (864 <extint_register_callback+0x28>)
     84a:	589b      	ldr	r3, [r3, r2]
     84c:	2b00      	cmp	r3, #0
     84e:	d003      	beq.n	858 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     850:	4283      	cmp	r3, r0
     852:	d005      	beq.n	860 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     854:	231d      	movs	r3, #29
     856:	e7f4      	b.n	842 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     858:	0089      	lsls	r1, r1, #2
     85a:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     85c:	2300      	movs	r3, #0
     85e:	e7f0      	b.n	842 <extint_register_callback+0x6>
		return STATUS_OK;
     860:	2300      	movs	r3, #0
     862:	e7ee      	b.n	842 <extint_register_callback+0x6>
     864:	200002b4 	.word	0x200002b4

00000868 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     868:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     86a:	2900      	cmp	r1, #0
     86c:	d001      	beq.n	872 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
     86e:	0018      	movs	r0, r3
     870:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     872:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     874:	281f      	cmp	r0, #31
     876:	d800      	bhi.n	87a <extint_chan_enable_callback+0x12>
		return eics[eic_index];
     878:	4a02      	ldr	r2, [pc, #8]	; (884 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
     87a:	2301      	movs	r3, #1
     87c:	4083      	lsls	r3, r0
     87e:	6113      	str	r3, [r2, #16]
	return STATUS_OK;
     880:	2300      	movs	r3, #0
     882:	e7f4      	b.n	86e <extint_chan_enable_callback+0x6>
     884:	40002400 	.word	0x40002400

00000888 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     888:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     88a:	2900      	cmp	r1, #0
     88c:	d001      	beq.n	892 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
     88e:	0018      	movs	r0, r3
     890:	4770      	bx	lr
		return NULL;
     892:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     894:	281f      	cmp	r0, #31
     896:	d800      	bhi.n	89a <extint_chan_disable_callback+0x12>
		return eics[eic_index];
     898:	4a02      	ldr	r2, [pc, #8]	; (8a4 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
     89a:	2301      	movs	r3, #1
     89c:	4083      	lsls	r3, r0
     89e:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
     8a0:	2300      	movs	r3, #0
     8a2:	e7f4      	b.n	88e <extint_chan_disable_callback+0x6>
     8a4:	40002400 	.word	0x40002400

000008a8 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     8a8:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     8aa:	2200      	movs	r2, #0
     8ac:	4b10      	ldr	r3, [pc, #64]	; (8f0 <EIC_Handler+0x48>)
     8ae:	701a      	strb	r2, [r3, #0]
     8b0:	2300      	movs	r3, #0
     8b2:	4910      	ldr	r1, [pc, #64]	; (8f4 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     8b4:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     8b6:	4e10      	ldr	r6, [pc, #64]	; (8f8 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     8b8:	4c0d      	ldr	r4, [pc, #52]	; (8f0 <EIC_Handler+0x48>)
     8ba:	e00a      	b.n	8d2 <EIC_Handler+0x2a>
		return eics[eic_index];
     8bc:	490d      	ldr	r1, [pc, #52]	; (8f4 <EIC_Handler+0x4c>)
     8be:	e008      	b.n	8d2 <EIC_Handler+0x2a>
     8c0:	7823      	ldrb	r3, [r4, #0]
     8c2:	3301      	adds	r3, #1
     8c4:	b2db      	uxtb	r3, r3
     8c6:	7023      	strb	r3, [r4, #0]
     8c8:	2b0f      	cmp	r3, #15
     8ca:	d810      	bhi.n	8ee <EIC_Handler+0x46>
		return NULL;
     8cc:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     8ce:	2b1f      	cmp	r3, #31
     8d0:	d9f4      	bls.n	8bc <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     8d2:	0028      	movs	r0, r5
     8d4:	4018      	ands	r0, r3
     8d6:	2201      	movs	r2, #1
     8d8:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     8da:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
     8dc:	4210      	tst	r0, r2
     8de:	d0ef      	beq.n	8c0 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     8e0:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     8e2:	009b      	lsls	r3, r3, #2
     8e4:	599b      	ldr	r3, [r3, r6]
     8e6:	2b00      	cmp	r3, #0
     8e8:	d0ea      	beq.n	8c0 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     8ea:	4798      	blx	r3
     8ec:	e7e8      	b.n	8c0 <EIC_Handler+0x18>
			}
		}
	}
}
     8ee:	bd70      	pop	{r4, r5, r6, pc}
     8f0:	200002b0 	.word	0x200002b0
     8f4:	40002400 	.word	0x40002400
     8f8:	200002b4 	.word	0x200002b4

000008fc <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
     8fc:	4a06      	ldr	r2, [pc, #24]	; (918 <_extint_enable+0x1c>)
     8fe:	7813      	ldrb	r3, [r2, #0]
     900:	2102      	movs	r1, #2
     902:	430b      	orrs	r3, r1
     904:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     906:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     908:	6853      	ldr	r3, [r2, #4]
     90a:	4219      	tst	r1, r3
     90c:	d1fc      	bne.n	908 <_extint_enable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     90e:	6853      	ldr	r3, [r2, #4]
     910:	4218      	tst	r0, r3
     912:	d1f9      	bne.n	908 <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     914:	4770      	bx	lr
     916:	46c0      	nop			; (mov r8, r8)
     918:	40002400 	.word	0x40002400

0000091c <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
     91c:	4a06      	ldr	r2, [pc, #24]	; (938 <_extint_disable+0x1c>)
     91e:	7813      	ldrb	r3, [r2, #0]
     920:	2102      	movs	r1, #2
     922:	438b      	bics	r3, r1
     924:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     926:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     928:	6853      	ldr	r3, [r2, #4]
     92a:	4219      	tst	r1, r3
     92c:	d1fc      	bne.n	928 <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     92e:	6853      	ldr	r3, [r2, #4]
     930:	4218      	tst	r0, r3
     932:	d1f9      	bne.n	928 <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     934:	4770      	bx	lr
     936:	46c0      	nop			; (mov r8, r8)
     938:	40002400 	.word	0x40002400

0000093c <_system_extint_init>:
{
     93c:	b500      	push	{lr}
     93e:	b083      	sub	sp, #12
     940:	4a17      	ldr	r2, [pc, #92]	; (9a0 <_system_extint_init+0x64>)
     942:	6951      	ldr	r1, [r2, #20]
     944:	2380      	movs	r3, #128	; 0x80
     946:	009b      	lsls	r3, r3, #2
     948:	430b      	orrs	r3, r1
     94a:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     94c:	a901      	add	r1, sp, #4
     94e:	2300      	movs	r3, #0
     950:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     952:	2003      	movs	r0, #3
     954:	4b13      	ldr	r3, [pc, #76]	; (9a4 <_system_extint_init+0x68>)
     956:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     958:	2003      	movs	r0, #3
     95a:	4b13      	ldr	r3, [pc, #76]	; (9a8 <_system_extint_init+0x6c>)
     95c:	4798      	blx	r3
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
     95e:	4a13      	ldr	r2, [pc, #76]	; (9ac <_system_extint_init+0x70>)
     960:	7813      	ldrb	r3, [r2, #0]
     962:	2101      	movs	r1, #1
     964:	430b      	orrs	r3, r1
     966:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     968:	3101      	adds	r1, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     96a:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     96c:	6853      	ldr	r3, [r2, #4]
     96e:	4219      	tst	r1, r3
     970:	d1fc      	bne.n	96c <_system_extint_init+0x30>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     972:	6853      	ldr	r3, [r2, #4]
     974:	4218      	tst	r0, r3
     976:	d1f9      	bne.n	96c <_system_extint_init+0x30>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
     978:	4a0c      	ldr	r2, [pc, #48]	; (9ac <_system_extint_init+0x70>)
     97a:	7813      	ldrb	r3, [r2, #0]
     97c:	2110      	movs	r1, #16
     97e:	438b      	bics	r3, r1
     980:	7013      	strb	r3, [r2, #0]
     982:	4b0b      	ldr	r3, [pc, #44]	; (9b0 <_system_extint_init+0x74>)
     984:	0019      	movs	r1, r3
     986:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     988:	2200      	movs	r2, #0
     98a:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     98c:	428b      	cmp	r3, r1
     98e:	d1fc      	bne.n	98a <_system_extint_init+0x4e>
     990:	2208      	movs	r2, #8
     992:	4b08      	ldr	r3, [pc, #32]	; (9b4 <_system_extint_init+0x78>)
     994:	601a      	str	r2, [r3, #0]
	_extint_enable();
     996:	4b08      	ldr	r3, [pc, #32]	; (9b8 <_system_extint_init+0x7c>)
     998:	4798      	blx	r3
}
     99a:	b003      	add	sp, #12
     99c:	bd00      	pop	{pc}
     99e:	46c0      	nop			; (mov r8, r8)
     9a0:	40000400 	.word	0x40000400
     9a4:	00003771 	.word	0x00003771
     9a8:	00003701 	.word	0x00003701
     9ac:	40002400 	.word	0x40002400
     9b0:	200002b4 	.word	0x200002b4
     9b4:	e000e100 	.word	0xe000e100
     9b8:	000008fd 	.word	0x000008fd

000009bc <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     9bc:	2300      	movs	r3, #0
     9be:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     9c0:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     9c2:	2201      	movs	r2, #1
     9c4:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
     9c6:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     9c8:	3201      	adds	r2, #1
     9ca:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
     9cc:	7243      	strb	r3, [r0, #9]
}
     9ce:	4770      	bx	lr

000009d0 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     9d0:	b5f0      	push	{r4, r5, r6, r7, lr}
     9d2:	b083      	sub	sp, #12
     9d4:	0005      	movs	r5, r0
     9d6:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
     9d8:	4b1c      	ldr	r3, [pc, #112]	; (a4c <extint_chan_set_config+0x7c>)
     9da:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     9dc:	a901      	add	r1, sp, #4
     9de:	2300      	movs	r3, #0
     9e0:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     9e2:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     9e4:	7923      	ldrb	r3, [r4, #4]
     9e6:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     9e8:	7a23      	ldrb	r3, [r4, #8]
     9ea:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     9ec:	7820      	ldrb	r0, [r4, #0]
     9ee:	4b18      	ldr	r3, [pc, #96]	; (a50 <extint_chan_set_config+0x80>)
     9f0:	4798      	blx	r3
		return NULL;
     9f2:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     9f4:	2d1f      	cmp	r5, #31
     9f6:	d800      	bhi.n	9fa <extint_chan_set_config+0x2a>
		return eics[eic_index];
     9f8:	4916      	ldr	r1, [pc, #88]	; (a54 <extint_chan_set_config+0x84>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     9fa:	2207      	movs	r2, #7
     9fc:	402a      	ands	r2, r5
     9fe:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     a00:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     a02:	7aa3      	ldrb	r3, [r4, #10]
     a04:	2b00      	cmp	r3, #0
     a06:	d001      	beq.n	a0c <extint_chan_set_config+0x3c>
     a08:	2308      	movs	r3, #8
     a0a:	431f      	orrs	r7, r3
     a0c:	08eb      	lsrs	r3, r5, #3
     a0e:	009b      	lsls	r3, r3, #2
     a10:	18cb      	adds	r3, r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     a12:	69d8      	ldr	r0, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     a14:	260f      	movs	r6, #15
     a16:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     a18:	43b0      	bics	r0, r6
			(new_config << config_pos);
     a1a:	4097      	lsls	r7, r2
     a1c:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     a1e:	4302      	orrs	r2, r0
		= (EIC_module->CONFIG[channel / 8].reg &
     a20:	61da      	str	r2, [r3, #28]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30) || (SAMR34) || (SAMR35)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
     a22:	7a63      	ldrb	r3, [r4, #9]
     a24:	2b00      	cmp	r3, #0
     a26:	d10b      	bne.n	a40 <extint_chan_set_config+0x70>
		EIC_module->ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
     a28:	698a      	ldr	r2, [r1, #24]
     a2a:	2301      	movs	r3, #1
     a2c:	40ab      	lsls	r3, r5
     a2e:	43db      	mvns	r3, r3
     a30:	041b      	lsls	r3, r3, #16
     a32:	0c1b      	lsrs	r3, r3, #16
     a34:	4013      	ands	r3, r2
     a36:	618b      	str	r3, [r1, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
     a38:	4b07      	ldr	r3, [pc, #28]	; (a58 <extint_chan_set_config+0x88>)
     a3a:	4798      	blx	r3
}
     a3c:	b003      	add	sp, #12
     a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->ASYNCH.reg |= (1UL << channel);
     a40:	698a      	ldr	r2, [r1, #24]
     a42:	2301      	movs	r3, #1
     a44:	40ab      	lsls	r3, r5
     a46:	4313      	orrs	r3, r2
     a48:	618b      	str	r3, [r1, #24]
     a4a:	e7f5      	b.n	a38 <extint_chan_set_config+0x68>
     a4c:	0000091d 	.word	0x0000091d
     a50:	0000386d 	.word	0x0000386d
     a54:	40002400 	.word	0x40002400
     a58:	000008fd 	.word	0x000008fd

00000a5c <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     a5c:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     a5e:	2207      	movs	r2, #7
     a60:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
     a62:	421a      	tst	r2, r3
     a64:	d1fc      	bne.n	a60 <_i2c_master_wait_for_sync+0x4>
}
     a66:	4770      	bx	lr

00000a68 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     a68:	b5f0      	push	{r4, r5, r6, r7, lr}
     a6a:	46d6      	mov	lr, sl
     a6c:	464f      	mov	r7, r9
     a6e:	4646      	mov	r6, r8
     a70:	b5c0      	push	{r6, r7, lr}
     a72:	b08a      	sub	sp, #40	; 0x28
     a74:	0007      	movs	r7, r0
     a76:	000e      	movs	r6, r1
     a78:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     a7a:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     a7c:	0008      	movs	r0, r1
     a7e:	4b9c      	ldr	r3, [pc, #624]	; (cf0 <i2c_master_init+0x288>)
     a80:	4798      	blx	r3

#if (SAML22) || (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	if (sercom_index == 5) {
     a82:	2805      	cmp	r0, #5
     a84:	d100      	bne.n	a88 <i2c_master_init+0x20>
     a86:	e12b      	b.n	ce0 <i2c_master_init+0x278>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     a88:	0005      	movs	r5, r0
     a8a:	3512      	adds	r5, #18
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     a8c:	4a99      	ldr	r2, [pc, #612]	; (cf4 <i2c_master_init+0x28c>)
     a8e:	69d1      	ldr	r1, [r2, #28]
	/* Turn on module in PM */
#if (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	if (sercom_index == 5) {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     a90:	2301      	movs	r3, #1
     a92:	4083      	lsls	r3, r0
     a94:	430b      	orrs	r3, r1
     a96:	61d3      	str	r3, [r2, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     a98:	a909      	add	r1, sp, #36	; 0x24
     a9a:	7b23      	ldrb	r3, [r4, #12]
     a9c:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     a9e:	b2ed      	uxtb	r5, r5
     aa0:	0028      	movs	r0, r5
     aa2:	4b95      	ldr	r3, [pc, #596]	; (cf8 <i2c_master_init+0x290>)
     aa4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     aa6:	0028      	movs	r0, r5
     aa8:	4b94      	ldr	r3, [pc, #592]	; (cfc <i2c_master_init+0x294>)
     aaa:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     aac:	7b20      	ldrb	r0, [r4, #12]
     aae:	2100      	movs	r1, #0
     ab0:	4b93      	ldr	r3, [pc, #588]	; (d00 <i2c_master_init+0x298>)
     ab2:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     ab4:	6833      	ldr	r3, [r6, #0]
		return STATUS_ERR_DENIED;
     ab6:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     ab8:	079b      	lsls	r3, r3, #30
     aba:	d505      	bpl.n	ac8 <i2c_master_init+0x60>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     abc:	b00a      	add	sp, #40	; 0x28
     abe:	bc1c      	pop	{r2, r3, r4}
     ac0:	4690      	mov	r8, r2
     ac2:	4699      	mov	r9, r3
     ac4:	46a2      	mov	sl, r4
     ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     ac8:	6833      	ldr	r3, [r6, #0]
		return STATUS_BUSY;
     aca:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     acc:	07db      	lsls	r3, r3, #31
     ace:	d4f5      	bmi.n	abc <i2c_master_init+0x54>
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     ad0:	2314      	movs	r3, #20
     ad2:	6033      	str	r3, [r6, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     ad4:	683b      	ldr	r3, [r7, #0]
     ad6:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     ad8:	0018      	movs	r0, r3
     ada:	4b85      	ldr	r3, [pc, #532]	; (cf0 <i2c_master_init+0x288>)
     adc:	4798      	blx	r3
     ade:	0005      	movs	r5, r0
	config->mux_position = SYSTEM_PINMUX_GPIO;
     ae0:	2380      	movs	r3, #128	; 0x80
     ae2:	aa08      	add	r2, sp, #32
     ae4:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     ae6:	2300      	movs	r3, #0
     ae8:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     aea:	2201      	movs	r2, #1
     aec:	a908      	add	r1, sp, #32
     aee:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
     af0:	70cb      	strb	r3, [r1, #3]
	uint32_t pad0 = config->pinmux_pad0;
     af2:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     af4:	6a26      	ldr	r6, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     af6:	2800      	cmp	r0, #0
     af8:	d100      	bne.n	afc <i2c_master_init+0x94>
     afa:	e0ae      	b.n	c5a <i2c_master_init+0x1f2>
	pin_conf.mux_position = pad0 & 0xFFFF;
     afc:	ab08      	add	r3, sp, #32
     afe:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     b00:	2302      	movs	r3, #2
     b02:	aa08      	add	r2, sp, #32
     b04:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     b06:	0c00      	lsrs	r0, r0, #16
     b08:	b2c0      	uxtb	r0, r0
     b0a:	0011      	movs	r1, r2
     b0c:	4b7d      	ldr	r3, [pc, #500]	; (d04 <i2c_master_init+0x29c>)
     b0e:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     b10:	2e00      	cmp	r6, #0
     b12:	d100      	bne.n	b16 <i2c_master_init+0xae>
     b14:	e0a6      	b.n	c64 <i2c_master_init+0x1fc>
	pin_conf.mux_position = pad1 & 0xFFFF;
     b16:	ab08      	add	r3, sp, #32
     b18:	701e      	strb	r6, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     b1a:	2302      	movs	r3, #2
     b1c:	aa08      	add	r2, sp, #32
     b1e:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     b20:	0c36      	lsrs	r6, r6, #16
     b22:	b2f0      	uxtb	r0, r6
     b24:	0011      	movs	r1, r2
     b26:	4b77      	ldr	r3, [pc, #476]	; (d04 <i2c_master_init+0x29c>)
     b28:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     b2a:	8aa3      	ldrh	r3, [r4, #20]
     b2c:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
     b2e:	8ae3      	ldrh	r3, [r4, #22]
     b30:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     b32:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     b34:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     b36:	2b00      	cmp	r3, #0
     b38:	d104      	bne.n	b44 <i2c_master_init+0xdc>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     b3a:	4b73      	ldr	r3, [pc, #460]	; (d08 <i2c_master_init+0x2a0>)
     b3c:	789b      	ldrb	r3, [r3, #2]
     b3e:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     b40:	0fdb      	lsrs	r3, r3, #31
     b42:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     b44:	68a1      	ldr	r1, [r4, #8]
     b46:	6923      	ldr	r3, [r4, #16]
     b48:	430b      	orrs	r3, r1
     b4a:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     b4c:	2224      	movs	r2, #36	; 0x24
     b4e:	5ca2      	ldrb	r2, [r4, r2]
     b50:	2a00      	cmp	r2, #0
     b52:	d002      	beq.n	b5a <i2c_master_init+0xf2>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     b54:	2280      	movs	r2, #128	; 0x80
     b56:	05d2      	lsls	r2, r2, #23
     b58:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     b5a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     b5c:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     b5e:	222c      	movs	r2, #44	; 0x2c
     b60:	5ca2      	ldrb	r2, [r4, r2]
     b62:	2a00      	cmp	r2, #0
     b64:	d103      	bne.n	b6e <i2c_master_init+0x106>
     b66:	2280      	movs	r2, #128	; 0x80
     b68:	0492      	lsls	r2, r2, #18
     b6a:	4291      	cmp	r1, r2
     b6c:	d102      	bne.n	b74 <i2c_master_init+0x10c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     b6e:	2280      	movs	r2, #128	; 0x80
     b70:	0512      	lsls	r2, r2, #20
     b72:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     b74:	222d      	movs	r2, #45	; 0x2d
     b76:	5ca2      	ldrb	r2, [r4, r2]
     b78:	2a00      	cmp	r2, #0
     b7a:	d002      	beq.n	b82 <i2c_master_init+0x11a>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     b7c:	2280      	movs	r2, #128	; 0x80
     b7e:	0412      	lsls	r2, r2, #16
     b80:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     b82:	222e      	movs	r2, #46	; 0x2e
     b84:	5ca2      	ldrb	r2, [r4, r2]
     b86:	2a00      	cmp	r2, #0
     b88:	d002      	beq.n	b90 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     b8a:	2280      	movs	r2, #128	; 0x80
     b8c:	03d2      	lsls	r2, r2, #15
     b8e:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     b90:	4642      	mov	r2, r8
     b92:	6812      	ldr	r2, [r2, #0]
     b94:	4313      	orrs	r3, r2
     b96:	4642      	mov	r2, r8
     b98:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     b9a:	2380      	movs	r3, #128	; 0x80
     b9c:	005b      	lsls	r3, r3, #1
     b9e:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     ba0:	3512      	adds	r5, #18
     ba2:	b2e8      	uxtb	r0, r5
     ba4:	4b59      	ldr	r3, [pc, #356]	; (d0c <i2c_master_init+0x2a4>)
     ba6:	4798      	blx	r3
     ba8:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     baa:	23fa      	movs	r3, #250	; 0xfa
     bac:	009b      	lsls	r3, r3, #2
     bae:	6822      	ldr	r2, [r4, #0]
     bb0:	435a      	muls	r2, r3
     bb2:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     bb4:	6863      	ldr	r3, [r4, #4]
     bb6:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     bb8:	4d55      	ldr	r5, [pc, #340]	; (d10 <i2c_master_init+0x2a8>)
     bba:	47a8      	blx	r5
     bbc:	9000      	str	r0, [sp, #0]
     bbe:	9101      	str	r1, [sp, #4]
     bc0:	464b      	mov	r3, r9
     bc2:	0058      	lsls	r0, r3, #1
     bc4:	47a8      	blx	r5
     bc6:	9002      	str	r0, [sp, #8]
     bc8:	9103      	str	r1, [sp, #12]
     bca:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     bcc:	47a8      	blx	r5
     bce:	9004      	str	r0, [sp, #16]
     bd0:	9105      	str	r1, [sp, #20]
     bd2:	4f50      	ldr	r7, [pc, #320]	; (d14 <i2c_master_init+0x2ac>)
     bd4:	4a50      	ldr	r2, [pc, #320]	; (d18 <i2c_master_init+0x2b0>)
     bd6:	4b51      	ldr	r3, [pc, #324]	; (d1c <i2c_master_init+0x2b4>)
     bd8:	9800      	ldr	r0, [sp, #0]
     bda:	9901      	ldr	r1, [sp, #4]
     bdc:	47b8      	blx	r7
     bde:	0002      	movs	r2, r0
     be0:	000b      	movs	r3, r1
     be2:	9804      	ldr	r0, [sp, #16]
     be4:	9905      	ldr	r1, [sp, #20]
     be6:	47b8      	blx	r7
     be8:	4e4d      	ldr	r6, [pc, #308]	; (d20 <i2c_master_init+0x2b8>)
     bea:	2200      	movs	r2, #0
     bec:	4b4d      	ldr	r3, [pc, #308]	; (d24 <i2c_master_init+0x2bc>)
     bee:	47b0      	blx	r6
     bf0:	9004      	str	r0, [sp, #16]
     bf2:	9105      	str	r1, [sp, #20]
     bf4:	4648      	mov	r0, r9
     bf6:	47a8      	blx	r5
     bf8:	0002      	movs	r2, r0
     bfa:	000b      	movs	r3, r1
     bfc:	9804      	ldr	r0, [sp, #16]
     bfe:	9905      	ldr	r1, [sp, #20]
     c00:	47b8      	blx	r7
     c02:	0002      	movs	r2, r0
     c04:	000b      	movs	r3, r1
     c06:	4d48      	ldr	r5, [pc, #288]	; (d28 <i2c_master_init+0x2c0>)
     c08:	9800      	ldr	r0, [sp, #0]
     c0a:	9901      	ldr	r1, [sp, #4]
     c0c:	47a8      	blx	r5
     c0e:	9a02      	ldr	r2, [sp, #8]
     c10:	9b03      	ldr	r3, [sp, #12]
     c12:	47b0      	blx	r6
     c14:	2200      	movs	r2, #0
     c16:	4b45      	ldr	r3, [pc, #276]	; (d2c <i2c_master_init+0x2c4>)
     c18:	47a8      	blx	r5
     c1a:	9a02      	ldr	r2, [sp, #8]
     c1c:	9b03      	ldr	r3, [sp, #12]
     c1e:	4d44      	ldr	r5, [pc, #272]	; (d30 <i2c_master_init+0x2c8>)
     c20:	47a8      	blx	r5
     c22:	4b44      	ldr	r3, [pc, #272]	; (d34 <i2c_master_init+0x2cc>)
     c24:	4798      	blx	r3
     c26:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     c28:	2380      	movs	r3, #128	; 0x80
     c2a:	049b      	lsls	r3, r3, #18
     c2c:	68a2      	ldr	r2, [r4, #8]
     c2e:	429a      	cmp	r2, r3
     c30:	d01e      	beq.n	c70 <i2c_master_init+0x208>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     c32:	0003      	movs	r3, r0
     c34:	2040      	movs	r0, #64	; 0x40
     c36:	2dff      	cmp	r5, #255	; 0xff
     c38:	d900      	bls.n	c3c <i2c_master_init+0x1d4>
     c3a:	e73f      	b.n	abc <i2c_master_init+0x54>
	int32_t tmp_baudlow_hs = 0;
     c3c:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     c3e:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     c40:	25ff      	movs	r5, #255	; 0xff
     c42:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     c44:	0624      	lsls	r4, r4, #24
     c46:	4325      	orrs	r5, r4
     c48:	0400      	lsls	r0, r0, #16
     c4a:	23ff      	movs	r3, #255	; 0xff
     c4c:	041b      	lsls	r3, r3, #16
     c4e:	4018      	ands	r0, r3
     c50:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     c52:	4643      	mov	r3, r8
     c54:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     c56:	2000      	movs	r0, #0
     c58:	e730      	b.n	abc <i2c_master_init+0x54>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     c5a:	2100      	movs	r1, #0
     c5c:	4640      	mov	r0, r8
     c5e:	4b36      	ldr	r3, [pc, #216]	; (d38 <i2c_master_init+0x2d0>)
     c60:	4798      	blx	r3
     c62:	e74b      	b.n	afc <i2c_master_init+0x94>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     c64:	2101      	movs	r1, #1
     c66:	4640      	mov	r0, r8
     c68:	4b33      	ldr	r3, [pc, #204]	; (d38 <i2c_master_init+0x2d0>)
     c6a:	4798      	blx	r3
     c6c:	0006      	movs	r6, r0
     c6e:	e752      	b.n	b16 <i2c_master_init+0xae>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     c70:	26fa      	movs	r6, #250	; 0xfa
     c72:	00b6      	lsls	r6, r6, #2
     c74:	4653      	mov	r3, sl
     c76:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     c78:	9800      	ldr	r0, [sp, #0]
     c7a:	9901      	ldr	r1, [sp, #4]
     c7c:	0002      	movs	r2, r0
     c7e:	000b      	movs	r3, r1
     c80:	4c27      	ldr	r4, [pc, #156]	; (d20 <i2c_master_init+0x2b8>)
     c82:	47a0      	blx	r4
     c84:	9000      	str	r0, [sp, #0]
     c86:	9101      	str	r1, [sp, #4]
     c88:	0030      	movs	r0, r6
     c8a:	4b21      	ldr	r3, [pc, #132]	; (d10 <i2c_master_init+0x2a8>)
     c8c:	4798      	blx	r3
     c8e:	2200      	movs	r2, #0
     c90:	4b2a      	ldr	r3, [pc, #168]	; (d3c <i2c_master_init+0x2d4>)
     c92:	47b8      	blx	r7
     c94:	0002      	movs	r2, r0
     c96:	000b      	movs	r3, r1
     c98:	9800      	ldr	r0, [sp, #0]
     c9a:	9901      	ldr	r1, [sp, #4]
     c9c:	4c24      	ldr	r4, [pc, #144]	; (d30 <i2c_master_init+0x2c8>)
     c9e:	47a0      	blx	r4
     ca0:	2200      	movs	r2, #0
     ca2:	4b22      	ldr	r3, [pc, #136]	; (d2c <i2c_master_init+0x2c4>)
     ca4:	4c20      	ldr	r4, [pc, #128]	; (d28 <i2c_master_init+0x2c0>)
     ca6:	47a0      	blx	r4
     ca8:	4b22      	ldr	r3, [pc, #136]	; (d34 <i2c_master_init+0x2cc>)
     caa:	4798      	blx	r3
     cac:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     cae:	d00c      	beq.n	cca <i2c_master_init+0x262>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     cb0:	0031      	movs	r1, r6
     cb2:	9807      	ldr	r0, [sp, #28]
     cb4:	4b22      	ldr	r3, [pc, #136]	; (d40 <i2c_master_init+0x2d8>)
     cb6:	4798      	blx	r3
     cb8:	3802      	subs	r0, #2
     cba:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     cbc:	002b      	movs	r3, r5
     cbe:	2dff      	cmp	r5, #255	; 0xff
     cc0:	d80c      	bhi.n	cdc <i2c_master_init+0x274>
     cc2:	28ff      	cmp	r0, #255	; 0xff
     cc4:	d9bc      	bls.n	c40 <i2c_master_init+0x1d8>
     cc6:	2040      	movs	r0, #64	; 0x40
     cc8:	e6f8      	b.n	abc <i2c_master_init+0x54>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     cca:	0071      	lsls	r1, r6, #1
     ccc:	1e48      	subs	r0, r1, #1
     cce:	9b07      	ldr	r3, [sp, #28]
     cd0:	469c      	mov	ip, r3
     cd2:	4460      	add	r0, ip
     cd4:	4b1a      	ldr	r3, [pc, #104]	; (d40 <i2c_master_init+0x2d8>)
     cd6:	4798      	blx	r3
     cd8:	3801      	subs	r0, #1
     cda:	e7ef      	b.n	cbc <i2c_master_init+0x254>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     cdc:	2040      	movs	r0, #64	; 0x40
     cde:	e6ed      	b.n	abc <i2c_master_init+0x54>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     ce0:	4a04      	ldr	r2, [pc, #16]	; (cf4 <i2c_master_init+0x28c>)
     ce2:	6a13      	ldr	r3, [r2, #32]
     ce4:	2102      	movs	r1, #2
     ce6:	430b      	orrs	r3, r1
     ce8:	6213      	str	r3, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
     cea:	2518      	movs	r5, #24
     cec:	e6d4      	b.n	a98 <i2c_master_init+0x30>
     cee:	46c0      	nop			; (mov r8, r8)
     cf0:	00002a5d 	.word	0x00002a5d
     cf4:	40000400 	.word	0x40000400
     cf8:	00003771 	.word	0x00003771
     cfc:	00003701 	.word	0x00003701
     d00:	00002911 	.word	0x00002911
     d04:	0000386d 	.word	0x0000386d
     d08:	41002000 	.word	0x41002000
     d0c:	00003795 	.word	0x00003795
     d10:	00007055 	.word	0x00007055
     d14:	0000643d 	.word	0x0000643d
     d18:	e826d695 	.word	0xe826d695
     d1c:	3e112e0b 	.word	0x3e112e0b
     d20:	000057b5 	.word	0x000057b5
     d24:	40240000 	.word	0x40240000
     d28:	0000693d 	.word	0x0000693d
     d2c:	3ff00000 	.word	0x3ff00000
     d30:	00005dd5 	.word	0x00005dd5
     d34:	00006f69 	.word	0x00006f69
     d38:	0000295d 	.word	0x0000295d
     d3c:	40080000 	.word	0x40080000
     d40:	0000560d 	.word	0x0000560d

00000d44 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     d44:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     d46:	7e1a      	ldrb	r2, [r3, #24]
     d48:	0792      	lsls	r2, r2, #30
     d4a:	d507      	bpl.n	d5c <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     d4c:	2202      	movs	r2, #2
     d4e:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     d50:	8b5b      	ldrh	r3, [r3, #26]
     d52:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     d54:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     d56:	17db      	asrs	r3, r3, #31
     d58:	4018      	ands	r0, r3
}
     d5a:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     d5c:	8b5a      	ldrh	r2, [r3, #26]
     d5e:	0752      	lsls	r2, r2, #29
     d60:	d506      	bpl.n	d70 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     d62:	6859      	ldr	r1, [r3, #4]
     d64:	22c0      	movs	r2, #192	; 0xc0
     d66:	0292      	lsls	r2, r2, #10
     d68:	430a      	orrs	r2, r1
     d6a:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     d6c:	2018      	movs	r0, #24
     d6e:	e7f4      	b.n	d5a <_i2c_master_address_response+0x16>
	return STATUS_OK;
     d70:	2000      	movs	r0, #0
     d72:	e7f2      	b.n	d5a <_i2c_master_address_response+0x16>

00000d74 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     d74:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     d76:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     d78:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     d7a:	2401      	movs	r4, #1
     d7c:	2502      	movs	r5, #2
     d7e:	7e11      	ldrb	r1, [r2, #24]
     d80:	4221      	tst	r1, r4
     d82:	d10b      	bne.n	d9c <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     d84:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     d86:	4229      	tst	r1, r5
     d88:	d106      	bne.n	d98 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     d8a:	3301      	adds	r3, #1
     d8c:	b29b      	uxth	r3, r3
     d8e:	8901      	ldrh	r1, [r0, #8]
     d90:	4299      	cmp	r1, r3
     d92:	d8f4      	bhi.n	d7e <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     d94:	2012      	movs	r0, #18
     d96:	e002      	b.n	d9e <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     d98:	2000      	movs	r0, #0
     d9a:	e000      	b.n	d9e <_i2c_master_wait_for_bus+0x2a>
     d9c:	2000      	movs	r0, #0
}
     d9e:	bd30      	pop	{r4, r5, pc}

00000da0 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     da0:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     da2:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     da4:	6862      	ldr	r2, [r4, #4]
     da6:	2380      	movs	r3, #128	; 0x80
     da8:	02db      	lsls	r3, r3, #11
     daa:	4313      	orrs	r3, r2
     dac:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     dae:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     db0:	4b02      	ldr	r3, [pc, #8]	; (dbc <_i2c_master_send_hs_master_code+0x1c>)
     db2:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     db4:	2301      	movs	r3, #1
     db6:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     db8:	bd10      	pop	{r4, pc}
     dba:	46c0      	nop			; (mov r8, r8)
     dbc:	00000d75 	.word	0x00000d75

00000dc0 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
     dc2:	46de      	mov	lr, fp
     dc4:	4657      	mov	r7, sl
     dc6:	464e      	mov	r6, r9
     dc8:	4645      	mov	r5, r8
     dca:	b5e0      	push	{r5, r6, r7, lr}
     dcc:	b083      	sub	sp, #12
     dce:	0006      	movs	r6, r0
     dd0:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     dd2:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     dd4:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     dd6:	682b      	ldr	r3, [r5, #0]
     dd8:	011b      	lsls	r3, r3, #4
     dda:	0fdb      	lsrs	r3, r3, #31
     ddc:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     dde:	7a4b      	ldrb	r3, [r1, #9]
     de0:	2b00      	cmp	r3, #0
     de2:	d12b      	bne.n	e3c <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     de4:	686b      	ldr	r3, [r5, #4]
     de6:	4a58      	ldr	r2, [pc, #352]	; (f48 <_i2c_master_read_packet+0x188>)
     de8:	4013      	ands	r3, r2
     dea:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     dec:	464b      	mov	r3, r9
     dee:	7a1b      	ldrb	r3, [r3, #8]
     df0:	2b00      	cmp	r3, #0
     df2:	d127      	bne.n	e44 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     df4:	464b      	mov	r3, r9
     df6:	881b      	ldrh	r3, [r3, #0]
     df8:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     dfa:	464a      	mov	r2, r9
     dfc:	7a52      	ldrb	r2, [r2, #9]
     dfe:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     e00:	4313      	orrs	r3, r2
     e02:	2201      	movs	r2, #1
     e04:	4313      	orrs	r3, r2
     e06:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     e08:	0030      	movs	r0, r6
     e0a:	4b50      	ldr	r3, [pc, #320]	; (f4c <_i2c_master_read_packet+0x18c>)
     e0c:	4798      	blx	r3
     e0e:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     e10:	4653      	mov	r3, sl
     e12:	2b00      	cmp	r3, #0
     e14:	d003      	beq.n	e1e <_i2c_master_read_packet+0x5e>
     e16:	464b      	mov	r3, r9
     e18:	885b      	ldrh	r3, [r3, #2]
     e1a:	2b01      	cmp	r3, #1
     e1c:	d03b      	beq.n	e96 <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
     e1e:	686b      	ldr	r3, [r5, #4]
     e20:	4a49      	ldr	r2, [pc, #292]	; (f48 <_i2c_master_read_packet+0x188>)
     e22:	4013      	ands	r3, r2
     e24:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     e26:	9b01      	ldr	r3, [sp, #4]
     e28:	2b00      	cmp	r3, #0
     e2a:	d03a      	beq.n	ea2 <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     e2c:	9801      	ldr	r0, [sp, #4]
     e2e:	b003      	add	sp, #12
     e30:	bc3c      	pop	{r2, r3, r4, r5}
     e32:	4690      	mov	r8, r2
     e34:	4699      	mov	r9, r3
     e36:	46a2      	mov	sl, r4
     e38:	46ab      	mov	fp, r5
     e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     e3c:	7a89      	ldrb	r1, [r1, #10]
     e3e:	4b44      	ldr	r3, [pc, #272]	; (f50 <_i2c_master_read_packet+0x190>)
     e40:	4798      	blx	r3
     e42:	e7cf      	b.n	de4 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
     e44:	464b      	mov	r3, r9
     e46:	881b      	ldrh	r3, [r3, #0]
     e48:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     e4a:	464a      	mov	r2, r9
     e4c:	7a52      	ldrb	r2, [r2, #9]
     e4e:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     e50:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     e52:	2280      	movs	r2, #128	; 0x80
     e54:	0212      	lsls	r2, r2, #8
     e56:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     e58:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     e5a:	0030      	movs	r0, r6
     e5c:	4b3b      	ldr	r3, [pc, #236]	; (f4c <_i2c_master_read_packet+0x18c>)
     e5e:	4798      	blx	r3
     e60:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     e62:	686b      	ldr	r3, [r5, #4]
     e64:	4a38      	ldr	r2, [pc, #224]	; (f48 <_i2c_master_read_packet+0x188>)
     e66:	4013      	ands	r3, r2
     e68:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
     e6a:	2800      	cmp	r0, #0
     e6c:	d1de      	bne.n	e2c <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
     e6e:	0030      	movs	r0, r6
     e70:	4b38      	ldr	r3, [pc, #224]	; (f54 <_i2c_master_read_packet+0x194>)
     e72:	4798      	blx	r3
     e74:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
     e76:	2800      	cmp	r0, #0
     e78:	d1d8      	bne.n	e2c <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     e7a:	464b      	mov	r3, r9
     e7c:	881b      	ldrh	r3, [r3, #0]
     e7e:	0a1b      	lsrs	r3, r3, #8
     e80:	2278      	movs	r2, #120	; 0x78
     e82:	4313      	orrs	r3, r2
     e84:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     e86:	464a      	mov	r2, r9
     e88:	7a52      	ldrb	r2, [r2, #9]
     e8a:	0392      	lsls	r2, r2, #14
     e8c:	2101      	movs	r1, #1
     e8e:	430a      	orrs	r2, r1
     e90:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     e92:	626b      	str	r3, [r5, #36]	; 0x24
     e94:	e7b8      	b.n	e08 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     e96:	686a      	ldr	r2, [r5, #4]
     e98:	2380      	movs	r3, #128	; 0x80
     e9a:	02db      	lsls	r3, r3, #11
     e9c:	4313      	orrs	r3, r2
     e9e:	606b      	str	r3, [r5, #4]
     ea0:	e7c1      	b.n	e26 <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
     ea2:	0030      	movs	r0, r6
     ea4:	4b2b      	ldr	r3, [pc, #172]	; (f54 <_i2c_master_read_packet+0x194>)
     ea6:	4798      	blx	r3
     ea8:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     eaa:	2800      	cmp	r0, #0
     eac:	d1be      	bne.n	e2c <_i2c_master_read_packet+0x6c>
     eae:	3c01      	subs	r4, #1
     eb0:	b2a4      	uxth	r4, r4
     eb2:	4680      	mov	r8, r0
		while (tmp_data_length--) {
     eb4:	4b28      	ldr	r3, [pc, #160]	; (f58 <_i2c_master_read_packet+0x198>)
     eb6:	469b      	mov	fp, r3
     eb8:	e015      	b.n	ee6 <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
     eba:	2c01      	cmp	r4, #1
     ebc:	d020      	beq.n	f00 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
     ebe:	0030      	movs	r0, r6
     ec0:	4b26      	ldr	r3, [pc, #152]	; (f5c <_i2c_master_read_packet+0x19c>)
     ec2:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     ec4:	4643      	mov	r3, r8
     ec6:	1c5f      	adds	r7, r3, #1
     ec8:	b2bf      	uxth	r7, r7
     eca:	2328      	movs	r3, #40	; 0x28
     ecc:	5ceb      	ldrb	r3, [r5, r3]
     ece:	464a      	mov	r2, r9
     ed0:	6852      	ldr	r2, [r2, #4]
     ed2:	4641      	mov	r1, r8
     ed4:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
     ed6:	0030      	movs	r0, r6
     ed8:	4b1c      	ldr	r3, [pc, #112]	; (f4c <_i2c_master_read_packet+0x18c>)
     eda:	4798      	blx	r3
     edc:	3c01      	subs	r4, #1
     ede:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
     ee0:	2800      	cmp	r0, #0
     ee2:	d115      	bne.n	f10 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
     ee4:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
     ee6:	455c      	cmp	r4, fp
     ee8:	d014      	beq.n	f14 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     eea:	8b6b      	ldrh	r3, [r5, #26]
     eec:	069b      	lsls	r3, r3, #26
     eee:	d527      	bpl.n	f40 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     ef0:	7af3      	ldrb	r3, [r6, #11]
     ef2:	2b00      	cmp	r3, #0
     ef4:	d0e3      	beq.n	ebe <_i2c_master_read_packet+0xfe>
     ef6:	4653      	mov	r3, sl
     ef8:	2b00      	cmp	r3, #0
     efa:	d1de      	bne.n	eba <_i2c_master_read_packet+0xfa>
     efc:	2c00      	cmp	r4, #0
     efe:	d1de      	bne.n	ebe <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     f00:	686a      	ldr	r2, [r5, #4]
     f02:	2380      	movs	r3, #128	; 0x80
     f04:	02db      	lsls	r3, r3, #11
     f06:	4313      	orrs	r3, r2
     f08:	606b      	str	r3, [r5, #4]
     f0a:	3c01      	subs	r4, #1
     f0c:	b2a4      	uxth	r4, r4
     f0e:	e7ea      	b.n	ee6 <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
     f10:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
     f12:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     f14:	7ab3      	ldrb	r3, [r6, #10]
     f16:	2b00      	cmp	r3, #0
     f18:	d109      	bne.n	f2e <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
     f1a:	0030      	movs	r0, r6
     f1c:	4b0f      	ldr	r3, [pc, #60]	; (f5c <_i2c_master_read_packet+0x19c>)
     f1e:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     f20:	2328      	movs	r3, #40	; 0x28
     f22:	5cea      	ldrb	r2, [r5, r3]
     f24:	464b      	mov	r3, r9
     f26:	685b      	ldr	r3, [r3, #4]
     f28:	4641      	mov	r1, r8
     f2a:	545a      	strb	r2, [r3, r1]
     f2c:	e77e      	b.n	e2c <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
     f2e:	0030      	movs	r0, r6
     f30:	4b0a      	ldr	r3, [pc, #40]	; (f5c <_i2c_master_read_packet+0x19c>)
     f32:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     f34:	686a      	ldr	r2, [r5, #4]
     f36:	23c0      	movs	r3, #192	; 0xc0
     f38:	029b      	lsls	r3, r3, #10
     f3a:	4313      	orrs	r3, r2
     f3c:	606b      	str	r3, [r5, #4]
     f3e:	e7ec      	b.n	f1a <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
     f40:	2341      	movs	r3, #65	; 0x41
     f42:	9301      	str	r3, [sp, #4]
     f44:	e772      	b.n	e2c <_i2c_master_read_packet+0x6c>
     f46:	46c0      	nop			; (mov r8, r8)
     f48:	fffbffff 	.word	0xfffbffff
     f4c:	00000d75 	.word	0x00000d75
     f50:	00000da1 	.word	0x00000da1
     f54:	00000d45 	.word	0x00000d45
     f58:	0000ffff 	.word	0x0000ffff
     f5c:	00000a5d 	.word	0x00000a5d

00000f60 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     f60:	b5f0      	push	{r4, r5, r6, r7, lr}
     f62:	46de      	mov	lr, fp
     f64:	4657      	mov	r7, sl
     f66:	464e      	mov	r6, r9
     f68:	4645      	mov	r5, r8
     f6a:	b5e0      	push	{r5, r6, r7, lr}
     f6c:	b083      	sub	sp, #12
     f6e:	0006      	movs	r6, r0
     f70:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     f72:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     f74:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     f76:	4b32      	ldr	r3, [pc, #200]	; (1040 <_i2c_master_write_packet+0xe0>)
     f78:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     f7a:	7a7b      	ldrb	r3, [r7, #9]
     f7c:	2b00      	cmp	r3, #0
     f7e:	d11d      	bne.n	fbc <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     f80:	686b      	ldr	r3, [r5, #4]
     f82:	4a30      	ldr	r2, [pc, #192]	; (1044 <_i2c_master_write_packet+0xe4>)
     f84:	4013      	ands	r3, r2
     f86:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     f88:	7a3b      	ldrb	r3, [r7, #8]
     f8a:	2b00      	cmp	r3, #0
     f8c:	d01b      	beq.n	fc6 <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     f8e:	883b      	ldrh	r3, [r7, #0]
     f90:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     f92:	7a7a      	ldrb	r2, [r7, #9]
     f94:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     f96:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     f98:	2280      	movs	r2, #128	; 0x80
     f9a:	0212      	lsls	r2, r2, #8
     f9c:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     f9e:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     fa0:	0030      	movs	r0, r6
     fa2:	4b29      	ldr	r3, [pc, #164]	; (1048 <_i2c_master_write_packet+0xe8>)
     fa4:	4798      	blx	r3
     fa6:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     fa8:	2800      	cmp	r0, #0
     faa:	d013      	beq.n	fd4 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     fac:	9801      	ldr	r0, [sp, #4]
     fae:	b003      	add	sp, #12
     fb0:	bc3c      	pop	{r2, r3, r4, r5}
     fb2:	4690      	mov	r8, r2
     fb4:	4699      	mov	r9, r3
     fb6:	46a2      	mov	sl, r4
     fb8:	46ab      	mov	fp, r5
     fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     fbc:	7ab9      	ldrb	r1, [r7, #10]
     fbe:	0030      	movs	r0, r6
     fc0:	4b22      	ldr	r3, [pc, #136]	; (104c <_i2c_master_write_packet+0xec>)
     fc2:	4798      	blx	r3
     fc4:	e7dc      	b.n	f80 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     fc6:	883b      	ldrh	r3, [r7, #0]
     fc8:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     fca:	7a7a      	ldrb	r2, [r7, #9]
     fcc:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     fce:	4313      	orrs	r3, r2
     fd0:	626b      	str	r3, [r5, #36]	; 0x24
     fd2:	e7e5      	b.n	fa0 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
     fd4:	0030      	movs	r0, r6
     fd6:	4b1e      	ldr	r3, [pc, #120]	; (1050 <_i2c_master_write_packet+0xf0>)
     fd8:	4798      	blx	r3
     fda:	1e03      	subs	r3, r0, #0
     fdc:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     fde:	d1e5      	bne.n	fac <_i2c_master_write_packet+0x4c>
     fe0:	46a0      	mov	r8, r4
     fe2:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     fe4:	3320      	adds	r3, #32
     fe6:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
     fe8:	4b15      	ldr	r3, [pc, #84]	; (1040 <_i2c_master_write_packet+0xe0>)
     fea:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
     fec:	4b16      	ldr	r3, [pc, #88]	; (1048 <_i2c_master_write_packet+0xe8>)
     fee:	469a      	mov	sl, r3
		while (tmp_data_length--) {
     ff0:	4544      	cmp	r4, r8
     ff2:	d015      	beq.n	1020 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     ff4:	8b6b      	ldrh	r3, [r5, #26]
     ff6:	464a      	mov	r2, r9
     ff8:	4213      	tst	r3, r2
     ffa:	d01d      	beq.n	1038 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
     ffc:	0030      	movs	r0, r6
     ffe:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    1000:	687b      	ldr	r3, [r7, #4]
    1002:	5d1a      	ldrb	r2, [r3, r4]
    1004:	2328      	movs	r3, #40	; 0x28
    1006:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
    1008:	0030      	movs	r0, r6
    100a:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
    100c:	2800      	cmp	r0, #0
    100e:	d106      	bne.n	101e <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1010:	8b6b      	ldrh	r3, [r5, #26]
    1012:	3401      	adds	r4, #1
    1014:	075b      	lsls	r3, r3, #29
    1016:	d5eb      	bpl.n	ff0 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
    1018:	231e      	movs	r3, #30
    101a:	9301      	str	r3, [sp, #4]
    101c:	e000      	b.n	1020 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
    101e:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    1020:	7ab3      	ldrb	r3, [r6, #10]
    1022:	2b00      	cmp	r3, #0
    1024:	d0c2      	beq.n	fac <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
    1026:	0030      	movs	r0, r6
    1028:	4b05      	ldr	r3, [pc, #20]	; (1040 <_i2c_master_write_packet+0xe0>)
    102a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    102c:	686a      	ldr	r2, [r5, #4]
    102e:	23c0      	movs	r3, #192	; 0xc0
    1030:	029b      	lsls	r3, r3, #10
    1032:	4313      	orrs	r3, r2
    1034:	606b      	str	r3, [r5, #4]
    1036:	e7b9      	b.n	fac <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
    1038:	2341      	movs	r3, #65	; 0x41
    103a:	9301      	str	r3, [sp, #4]
    103c:	e7b6      	b.n	fac <_i2c_master_write_packet+0x4c>
    103e:	46c0      	nop			; (mov r8, r8)
    1040:	00000a5d 	.word	0x00000a5d
    1044:	fffbffff 	.word	0xfffbffff
    1048:	00000d75 	.word	0x00000d75
    104c:	00000da1 	.word	0x00000da1
    1050:	00000d45 	.word	0x00000d45

00001054 <i2c_master_read_packet_wait>:
{
    1054:	b510      	push	{r4, lr}
	module->send_stop = true;
    1056:	2301      	movs	r3, #1
    1058:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    105a:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    105c:	4b01      	ldr	r3, [pc, #4]	; (1064 <i2c_master_read_packet_wait+0x10>)
    105e:	4798      	blx	r3
}
    1060:	bd10      	pop	{r4, pc}
    1062:	46c0      	nop			; (mov r8, r8)
    1064:	00000dc1 	.word	0x00000dc1

00001068 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1068:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = false;
    106a:	2300      	movs	r3, #0
    106c:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    106e:	3301      	adds	r3, #1
    1070:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
    1072:	4b01      	ldr	r3, [pc, #4]	; (1078 <i2c_master_write_packet_wait_no_stop+0x10>)
    1074:	4798      	blx	r3
}
    1076:	bd10      	pop	{r4, pc}
    1078:	00000f61 	.word	0x00000f61

0000107c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    107c:	b5f0      	push	{r4, r5, r6, r7, lr}
    107e:	46d6      	mov	lr, sl
    1080:	464f      	mov	r7, r9
    1082:	4646      	mov	r6, r8
    1084:	b5c0      	push	{r6, r7, lr}
    1086:	b08a      	sub	sp, #40	; 0x28
    1088:	0006      	movs	r6, r0
    108a:	000f      	movs	r7, r1
    108c:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    108e:	6031      	str	r1, [r6, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1090:	680b      	ldr	r3, [r1, #0]
    1092:	079b      	lsls	r3, r3, #30
    1094:	d40a      	bmi.n	10ac <spi_init+0x30>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1096:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    1098:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    109a:	07db      	lsls	r3, r3, #31
    109c:	d400      	bmi.n	10a0 <spi_init+0x24>
    109e:	e0af      	b.n	1200 <spi_init+0x184>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    10a0:	b00a      	add	sp, #40	; 0x28
    10a2:	bc1c      	pop	{r2, r3, r4}
    10a4:	4690      	mov	r8, r2
    10a6:	4699      	mov	r9, r3
    10a8:	46a2      	mov	sl, r4
    10aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    10ac:	6a93      	ldr	r3, [r2, #40]	; 0x28
    10ae:	9305      	str	r3, [sp, #20]
    10b0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    10b2:	9306      	str	r3, [sp, #24]
    10b4:	6b13      	ldr	r3, [r2, #48]	; 0x30
    10b6:	9307      	str	r3, [sp, #28]
    10b8:	6b53      	ldr	r3, [r2, #52]	; 0x34
    10ba:	9308      	str	r3, [sp, #32]
    10bc:	2500      	movs	r5, #0
    10be:	e00a      	b.n	10d6 <spi_init+0x5a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    10c0:	0038      	movs	r0, r7
    10c2:	4bb6      	ldr	r3, [pc, #728]	; (139c <spi_init+0x320>)
    10c4:	4798      	blx	r3
    10c6:	e00e      	b.n	10e6 <spi_init+0x6a>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    10c8:	230f      	movs	r3, #15
    10ca:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    10cc:	4581      	cmp	r9, r0
    10ce:	d130      	bne.n	1132 <spi_init+0xb6>
    10d0:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    10d2:	2d04      	cmp	r5, #4
    10d4:	d031      	beq.n	113a <spi_init+0xbe>
    10d6:	b2e9      	uxtb	r1, r5
		uint32_t current_pinmux = pad_pinmuxes[pad];
    10d8:	00ab      	lsls	r3, r5, #2
    10da:	aa02      	add	r2, sp, #8
    10dc:	200c      	movs	r0, #12
    10de:	1812      	adds	r2, r2, r0
    10e0:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    10e2:	2800      	cmp	r0, #0
    10e4:	d0ec      	beq.n	10c0 <spi_init+0x44>
		if (current_pinmux == PINMUX_UNUSED) {
    10e6:	1c43      	adds	r3, r0, #1
    10e8:	d0f2      	beq.n	10d0 <spi_init+0x54>
		if ((current_pinmux & 0xFFFF) !=
    10ea:	0401      	lsls	r1, r0, #16
    10ec:	0c0b      	lsrs	r3, r1, #16
    10ee:	4699      	mov	r9, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    10f0:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    10f2:	b2c3      	uxtb	r3, r0
    10f4:	469c      	mov	ip, r3
		return NULL;
    10f6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    10f8:	0602      	lsls	r2, r0, #24
    10fa:	d405      	bmi.n	1108 <spi_init+0x8c>
		return &(ports[port_index]->Group[group_index]);
    10fc:	4663      	mov	r3, ip
    10fe:	095b      	lsrs	r3, r3, #5
    1100:	01db      	lsls	r3, r3, #7
    1102:	4aa7      	ldr	r2, [pc, #668]	; (13a0 <spi_init+0x324>)
    1104:	4690      	mov	r8, r2
    1106:	4443      	add	r3, r8
	uint32_t pin_index = (gpio_pin % 32);
    1108:	221f      	movs	r2, #31
    110a:	4660      	mov	r0, ip
    110c:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    110e:	1898      	adds	r0, r3, r2
    1110:	3040      	adds	r0, #64	; 0x40
    1112:	7800      	ldrb	r0, [r0, #0]
    1114:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    1116:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    1118:	4651      	mov	r1, sl
    111a:	07c9      	lsls	r1, r1, #31
    111c:	d5d6      	bpl.n	10cc <spi_init+0x50>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    111e:	0852      	lsrs	r2, r2, #1
    1120:	189b      	adds	r3, r3, r2
    1122:	3330      	adds	r3, #48	; 0x30
    1124:	7818      	ldrb	r0, [r3, #0]
    1126:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    1128:	4663      	mov	r3, ip
    112a:	07db      	lsls	r3, r3, #31
    112c:	d5cc      	bpl.n	10c8 <spi_init+0x4c>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    112e:	0900      	lsrs	r0, r0, #4
    1130:	e7cc      	b.n	10cc <spi_init+0x50>
			module->hw = NULL;
    1132:	2300      	movs	r3, #0
    1134:	6033      	str	r3, [r6, #0]
			return STATUS_ERR_DENIED;
    1136:	201c      	movs	r0, #28
    1138:	e7b2      	b.n	10a0 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    113a:	2011      	movs	r0, #17
    113c:	4b99      	ldr	r3, [pc, #612]	; (13a4 <spi_init+0x328>)
    113e:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    1140:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    1142:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    1144:	2a01      	cmp	r2, #1
    1146:	d016      	beq.n	1176 <spi_init+0xfa>
	if (config->mode == SPI_MODE_SLAVE) {
    1148:	7821      	ldrb	r1, [r4, #0]
    114a:	2900      	cmp	r1, #0
    114c:	d127      	bne.n	119e <spi_init+0x122>
		if (spi_module->CTRLA.reg != addr) {
    114e:	683b      	ldr	r3, [r7, #0]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    1150:	7fe2      	ldrb	r2, [r4, #31]
    1152:	0412      	lsls	r2, r2, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    1154:	7fa0      	ldrb	r0, [r4, #30]
    1156:	4302      	orrs	r2, r0
			return STATUS_ERR_DENIED;
    1158:	201c      	movs	r0, #28
		if (spi_module->CTRLA.reg != addr) {
    115a:	429a      	cmp	r2, r3
    115c:	d1a0      	bne.n	10a0 <spi_init+0x24>
		ctrla |= config->mode_specific.slave.frame_format;
    115e:	69a3      	ldr	r3, [r4, #24]
		ctrlb |= config->mode_specific.slave.address_mode;
    1160:	8ba2      	ldrh	r2, [r4, #28]
		if (config->mode_specific.slave.preload_enable) {
    1162:	3004      	adds	r0, #4
    1164:	5c20      	ldrb	r0, [r4, r0]
    1166:	2800      	cmp	r0, #0
    1168:	d001      	beq.n	116e <spi_init+0xf2>
    116a:	2040      	movs	r0, #64	; 0x40
    116c:	4302      	orrs	r2, r0
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    116e:	2008      	movs	r0, #8
    1170:	4303      	orrs	r3, r0
    1172:	431d      	orrs	r5, r3
    1174:	e014      	b.n	11a0 <spi_init+0x124>
		enum status_code error_code = _sercom_get_sync_baud_val(
    1176:	aa04      	add	r2, sp, #16
    1178:	0001      	movs	r1, r0
    117a:	69a0      	ldr	r0, [r4, #24]
    117c:	4b8a      	ldr	r3, [pc, #552]	; (13a8 <spi_init+0x32c>)
    117e:	4798      	blx	r3
    1180:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    1182:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    1184:	2b00      	cmp	r3, #0
    1186:	d000      	beq.n	118a <spi_init+0x10e>
    1188:	e78a      	b.n	10a0 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    118a:	7b3b      	ldrb	r3, [r7, #12]
    118c:	b2db      	uxtb	r3, r3
    118e:	aa04      	add	r2, sp, #16
    1190:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    1192:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    1194:	429a      	cmp	r2, r3
    1196:	d000      	beq.n	119a <spi_init+0x11e>
    1198:	e782      	b.n	10a0 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    119a:	350c      	adds	r5, #12
    119c:	e7d4      	b.n	1148 <spi_init+0xcc>
	uint32_t ctrlb = 0;
    119e:	2200      	movs	r2, #0
	ctrla |= config->mux_setting;
    11a0:	6863      	ldr	r3, [r4, #4]
    11a2:	68a0      	ldr	r0, [r4, #8]
    11a4:	4303      	orrs	r3, r0
    11a6:	68e0      	ldr	r0, [r4, #12]
    11a8:	4303      	orrs	r3, r0
    11aa:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    11ac:	7c20      	ldrb	r0, [r4, #16]
    11ae:	4302      	orrs	r2, r0
	if (config->run_in_standby) {
    11b0:	7c60      	ldrb	r0, [r4, #17]
    11b2:	2800      	cmp	r0, #0
    11b4:	d001      	beq.n	11ba <spi_init+0x13e>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    11b6:	2080      	movs	r0, #128	; 0x80
    11b8:	4303      	orrs	r3, r0
	if (config->receiver_enable) {
    11ba:	7ca0      	ldrb	r0, [r4, #18]
    11bc:	2800      	cmp	r0, #0
    11be:	d002      	beq.n	11c6 <spi_init+0x14a>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    11c0:	2080      	movs	r0, #128	; 0x80
    11c2:	0280      	lsls	r0, r0, #10
    11c4:	4302      	orrs	r2, r0
	if (config->select_slave_low_detect_enable) {
    11c6:	7ce0      	ldrb	r0, [r4, #19]
    11c8:	2800      	cmp	r0, #0
    11ca:	d002      	beq.n	11d2 <spi_init+0x156>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    11cc:	2080      	movs	r0, #128	; 0x80
    11ce:	0080      	lsls	r0, r0, #2
    11d0:	4302      	orrs	r2, r0
	if (config->master_slave_select_enable) {
    11d2:	7d20      	ldrb	r0, [r4, #20]
    11d4:	2800      	cmp	r0, #0
    11d6:	d002      	beq.n	11de <spi_init+0x162>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    11d8:	2080      	movs	r0, #128	; 0x80
    11da:	0180      	lsls	r0, r0, #6
    11dc:	4302      	orrs	r2, r0
	if (spi_module->CTRLA.reg == ctrla &&
    11de:	6838      	ldr	r0, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    11e0:	2502      	movs	r5, #2
    11e2:	432b      	orrs	r3, r5
	if (spi_module->CTRLA.reg == ctrla &&
    11e4:	4283      	cmp	r3, r0
    11e6:	d003      	beq.n	11f0 <spi_init+0x174>
	module->hw = NULL;
    11e8:	2300      	movs	r3, #0
    11ea:	6033      	str	r3, [r6, #0]
	return STATUS_ERR_DENIED;
    11ec:	201c      	movs	r0, #28
    11ee:	e757      	b.n	10a0 <spi_init+0x24>
			spi_module->CTRLB.reg == ctrlb) {
    11f0:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    11f2:	4293      	cmp	r3, r2
    11f4:	d1f8      	bne.n	11e8 <spi_init+0x16c>
		module->mode           = config->mode;
    11f6:	7171      	strb	r1, [r6, #5]
		module->character_size = config->character_size;
    11f8:	7c23      	ldrb	r3, [r4, #16]
    11fa:	71b3      	strb	r3, [r6, #6]
		return STATUS_OK;
    11fc:	2000      	movs	r0, #0
    11fe:	e74f      	b.n	10a0 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1200:	0008      	movs	r0, r1
    1202:	4b6a      	ldr	r3, [pc, #424]	; (13ac <spi_init+0x330>)
    1204:	4798      	blx	r3
	if (sercom_index == 5) {
    1206:	2805      	cmp	r0, #5
    1208:	d100      	bne.n	120c <spi_init+0x190>
    120a:	e0bf      	b.n	138c <spi_init+0x310>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    120c:	0003      	movs	r3, r0
    120e:	3312      	adds	r3, #18
			MCLK->APBCMASK.reg |= mask;
    1210:	4967      	ldr	r1, [pc, #412]	; (13b0 <spi_init+0x334>)
    1212:	69cd      	ldr	r5, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1214:	2201      	movs	r2, #1
    1216:	4082      	lsls	r2, r0
    1218:	432a      	orrs	r2, r5
    121a:	61ca      	str	r2, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    121c:	a909      	add	r1, sp, #36	; 0x24
    121e:	2524      	movs	r5, #36	; 0x24
    1220:	5d62      	ldrb	r2, [r4, r5]
    1222:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1224:	b2db      	uxtb	r3, r3
    1226:	9301      	str	r3, [sp, #4]
    1228:	0018      	movs	r0, r3
    122a:	4b62      	ldr	r3, [pc, #392]	; (13b4 <spi_init+0x338>)
    122c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    122e:	9801      	ldr	r0, [sp, #4]
    1230:	4b61      	ldr	r3, [pc, #388]	; (13b8 <spi_init+0x33c>)
    1232:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1234:	5d60      	ldrb	r0, [r4, r5]
    1236:	2100      	movs	r1, #0
    1238:	4b60      	ldr	r3, [pc, #384]	; (13bc <spi_init+0x340>)
    123a:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    123c:	7823      	ldrb	r3, [r4, #0]
    123e:	2b01      	cmp	r3, #1
    1240:	d020      	beq.n	1284 <spi_init+0x208>
	if (config->mode == SPI_MODE_SLAVE) {
    1242:	7823      	ldrb	r3, [r4, #0]
    1244:	2b00      	cmp	r3, #0
    1246:	d103      	bne.n	1250 <spi_init+0x1d4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    1248:	683b      	ldr	r3, [r7, #0]
    124a:	2208      	movs	r2, #8
    124c:	4313      	orrs	r3, r2
    124e:	603b      	str	r3, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1250:	6833      	ldr	r3, [r6, #0]
    1252:	4698      	mov	r8, r3
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1254:	ab04      	add	r3, sp, #16
    1256:	2280      	movs	r2, #128	; 0x80
    1258:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    125a:	2200      	movs	r2, #0
    125c:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    125e:	2101      	movs	r1, #1
    1260:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    1262:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    1264:	7823      	ldrb	r3, [r4, #0]
    1266:	2b00      	cmp	r3, #0
    1268:	d101      	bne.n	126e <spi_init+0x1f2>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    126a:	ab04      	add	r3, sp, #16
    126c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    126e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1270:	9305      	str	r3, [sp, #20]
    1272:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1274:	9306      	str	r3, [sp, #24]
    1276:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1278:	9307      	str	r3, [sp, #28]
    127a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    127c:	9308      	str	r3, [sp, #32]
    127e:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1280:	ad05      	add	r5, sp, #20
    1282:	e011      	b.n	12a8 <spi_init+0x22c>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1284:	683b      	ldr	r3, [r7, #0]
    1286:	220c      	movs	r2, #12
    1288:	4313      	orrs	r3, r2
    128a:	603b      	str	r3, [r7, #0]
    128c:	e7d9      	b.n	1242 <spi_init+0x1c6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    128e:	4640      	mov	r0, r8
    1290:	4b42      	ldr	r3, [pc, #264]	; (139c <spi_init+0x320>)
    1292:	4798      	blx	r3
    1294:	e00d      	b.n	12b2 <spi_init+0x236>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1296:	a904      	add	r1, sp, #16
    1298:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    129a:	0c00      	lsrs	r0, r0, #16
    129c:	b2c0      	uxtb	r0, r0
    129e:	4b48      	ldr	r3, [pc, #288]	; (13c0 <spi_init+0x344>)
    12a0:	4798      	blx	r3
    12a2:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    12a4:	2f04      	cmp	r7, #4
    12a6:	d007      	beq.n	12b8 <spi_init+0x23c>
    12a8:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    12aa:	00bb      	lsls	r3, r7, #2
    12ac:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    12ae:	2800      	cmp	r0, #0
    12b0:	d0ed      	beq.n	128e <spi_init+0x212>
		if (current_pinmux != PINMUX_UNUSED) {
    12b2:	1c43      	adds	r3, r0, #1
    12b4:	d1ef      	bne.n	1296 <spi_init+0x21a>
    12b6:	e7f4      	b.n	12a2 <spi_init+0x226>
	module->mode             = config->mode;
    12b8:	7823      	ldrb	r3, [r4, #0]
    12ba:	7173      	strb	r3, [r6, #5]
	module->character_size   = config->character_size;
    12bc:	7c23      	ldrb	r3, [r4, #16]
    12be:	71b3      	strb	r3, [r6, #6]
	module->receiver_enabled = config->receiver_enable;
    12c0:	7ca3      	ldrb	r3, [r4, #18]
    12c2:	71f3      	strb	r3, [r6, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    12c4:	7d23      	ldrb	r3, [r4, #20]
    12c6:	7233      	strb	r3, [r6, #8]
	uint16_t baud = 0;
    12c8:	2200      	movs	r2, #0
    12ca:	ab02      	add	r3, sp, #8
    12cc:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    12ce:	7823      	ldrb	r3, [r4, #0]
    12d0:	2b01      	cmp	r3, #1
    12d2:	d014      	beq.n	12fe <spi_init+0x282>
	if (config->mode == SPI_MODE_SLAVE) {
    12d4:	7823      	ldrb	r3, [r4, #0]
    12d6:	2b00      	cmp	r3, #0
    12d8:	d129      	bne.n	132e <spi_init+0x2b2>
		ctrla = config->mode_specific.slave.frame_format;
    12da:	69a0      	ldr	r0, [r4, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    12dc:	8ba2      	ldrh	r2, [r4, #28]
		spi_module->ADDR.reg |=
    12de:	4643      	mov	r3, r8
    12e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    12e2:	7fe1      	ldrb	r1, [r4, #31]
    12e4:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    12e6:	7fa5      	ldrb	r5, [r4, #30]
    12e8:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
    12ea:	4319      	orrs	r1, r3
    12ec:	4643      	mov	r3, r8
    12ee:	6259      	str	r1, [r3, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    12f0:	2320      	movs	r3, #32
    12f2:	5ce3      	ldrb	r3, [r4, r3]
    12f4:	2b00      	cmp	r3, #0
    12f6:	d01c      	beq.n	1332 <spi_init+0x2b6>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    12f8:	2340      	movs	r3, #64	; 0x40
    12fa:	431a      	orrs	r2, r3
    12fc:	e019      	b.n	1332 <spi_init+0x2b6>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    12fe:	6830      	ldr	r0, [r6, #0]
    1300:	4b2a      	ldr	r3, [pc, #168]	; (13ac <spi_init+0x330>)
    1302:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1304:	3012      	adds	r0, #18
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    1306:	b2c0      	uxtb	r0, r0
    1308:	4b26      	ldr	r3, [pc, #152]	; (13a4 <spi_init+0x328>)
    130a:	4798      	blx	r3
    130c:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    130e:	ab02      	add	r3, sp, #8
    1310:	1d9a      	adds	r2, r3, #6
    1312:	69a0      	ldr	r0, [r4, #24]
    1314:	4b24      	ldr	r3, [pc, #144]	; (13a8 <spi_init+0x32c>)
    1316:	4798      	blx	r3
    1318:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    131a:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    131c:	2b00      	cmp	r3, #0
    131e:	d000      	beq.n	1322 <spi_init+0x2a6>
    1320:	e6be      	b.n	10a0 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    1322:	ab02      	add	r3, sp, #8
    1324:	3306      	adds	r3, #6
    1326:	781b      	ldrb	r3, [r3, #0]
    1328:	4642      	mov	r2, r8
    132a:	7313      	strb	r3, [r2, #12]
    132c:	e7d2      	b.n	12d4 <spi_init+0x258>
	uint32_t ctrlb = 0;
    132e:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    1330:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    1332:	6863      	ldr	r3, [r4, #4]
    1334:	68a1      	ldr	r1, [r4, #8]
    1336:	430b      	orrs	r3, r1
    1338:	68e1      	ldr	r1, [r4, #12]
    133a:	430b      	orrs	r3, r1
    133c:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    133e:	7c21      	ldrb	r1, [r4, #16]
    1340:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    1342:	7c61      	ldrb	r1, [r4, #17]
    1344:	2900      	cmp	r1, #0
    1346:	d103      	bne.n	1350 <spi_init+0x2d4>
    1348:	491e      	ldr	r1, [pc, #120]	; (13c4 <spi_init+0x348>)
    134a:	7889      	ldrb	r1, [r1, #2]
    134c:	0789      	lsls	r1, r1, #30
    134e:	d501      	bpl.n	1354 <spi_init+0x2d8>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1350:	2180      	movs	r1, #128	; 0x80
    1352:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    1354:	7ca1      	ldrb	r1, [r4, #18]
    1356:	2900      	cmp	r1, #0
    1358:	d002      	beq.n	1360 <spi_init+0x2e4>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    135a:	2180      	movs	r1, #128	; 0x80
    135c:	0289      	lsls	r1, r1, #10
    135e:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    1360:	7ce1      	ldrb	r1, [r4, #19]
    1362:	2900      	cmp	r1, #0
    1364:	d002      	beq.n	136c <spi_init+0x2f0>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1366:	2180      	movs	r1, #128	; 0x80
    1368:	0089      	lsls	r1, r1, #2
    136a:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    136c:	7d21      	ldrb	r1, [r4, #20]
    136e:	2900      	cmp	r1, #0
    1370:	d002      	beq.n	1378 <spi_init+0x2fc>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1372:	2180      	movs	r1, #128	; 0x80
    1374:	0189      	lsls	r1, r1, #6
    1376:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    1378:	4641      	mov	r1, r8
    137a:	6809      	ldr	r1, [r1, #0]
    137c:	430b      	orrs	r3, r1
    137e:	4641      	mov	r1, r8
    1380:	600b      	str	r3, [r1, #0]
	spi_module->CTRLB.reg |= ctrlb;
    1382:	684b      	ldr	r3, [r1, #4]
    1384:	431a      	orrs	r2, r3
    1386:	604a      	str	r2, [r1, #4]
	return STATUS_OK;
    1388:	2000      	movs	r0, #0
    138a:	e689      	b.n	10a0 <spi_init+0x24>
			MCLK->APBDMASK.reg |= mask;
    138c:	4a08      	ldr	r2, [pc, #32]	; (13b0 <spi_init+0x334>)
    138e:	6a13      	ldr	r3, [r2, #32]
    1390:	2102      	movs	r1, #2
    1392:	430b      	orrs	r3, r1
    1394:	6213      	str	r3, [r2, #32]
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
    1396:	2318      	movs	r3, #24
    1398:	e740      	b.n	121c <spi_init+0x1a0>
    139a:	46c0      	nop			; (mov r8, r8)
    139c:	0000295d 	.word	0x0000295d
    13a0:	40002800 	.word	0x40002800
    13a4:	00003795 	.word	0x00003795
    13a8:	00002853 	.word	0x00002853
    13ac:	00002a5d 	.word	0x00002a5d
    13b0:	40000400 	.word	0x40000400
    13b4:	00003771 	.word	0x00003771
    13b8:	00003701 	.word	0x00003701
    13bc:	00002911 	.word	0x00002911
    13c0:	0000386d 	.word	0x0000386d
    13c4:	41002000 	.word	0x41002000

000013c8 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    13c8:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    13ca:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    13cc:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    13ce:	2c01      	cmp	r4, #1
    13d0:	d001      	beq.n	13d6 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    13d2:	0018      	movs	r0, r3
    13d4:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    13d6:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    13d8:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    13da:	2c00      	cmp	r4, #0
    13dc:	d1f9      	bne.n	13d2 <spi_select_slave+0xa>
		if (select) {
    13de:	2a00      	cmp	r2, #0
    13e0:	d058      	beq.n	1494 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    13e2:	784b      	ldrb	r3, [r1, #1]
    13e4:	2b00      	cmp	r3, #0
    13e6:	d044      	beq.n	1472 <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    13e8:	6803      	ldr	r3, [r0, #0]
    13ea:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    13ec:	07db      	lsls	r3, r3, #31
    13ee:	d410      	bmi.n	1412 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    13f0:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    13f2:	09d1      	lsrs	r1, r2, #7
		return NULL;
    13f4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    13f6:	2900      	cmp	r1, #0
    13f8:	d104      	bne.n	1404 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    13fa:	0953      	lsrs	r3, r2, #5
    13fc:	01db      	lsls	r3, r3, #7
    13fe:	492e      	ldr	r1, [pc, #184]	; (14b8 <spi_select_slave+0xf0>)
    1400:	468c      	mov	ip, r1
    1402:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1404:	211f      	movs	r1, #31
    1406:	4011      	ands	r1, r2
    1408:	2201      	movs	r2, #1
    140a:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    140c:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    140e:	2305      	movs	r3, #5
    1410:	e7df      	b.n	13d2 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    1412:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1414:	09d4      	lsrs	r4, r2, #7
		return NULL;
    1416:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1418:	2c00      	cmp	r4, #0
    141a:	d104      	bne.n	1426 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    141c:	0953      	lsrs	r3, r2, #5
    141e:	01db      	lsls	r3, r3, #7
    1420:	4c25      	ldr	r4, [pc, #148]	; (14b8 <spi_select_slave+0xf0>)
    1422:	46a4      	mov	ip, r4
    1424:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1426:	241f      	movs	r4, #31
    1428:	4014      	ands	r4, r2
    142a:	2201      	movs	r2, #1
    142c:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    142e:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1430:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1432:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    1434:	07d2      	lsls	r2, r2, #31
    1436:	d501      	bpl.n	143c <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1438:	788a      	ldrb	r2, [r1, #2]
    143a:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    143c:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    143e:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    1440:	2a00      	cmp	r2, #0
    1442:	d1c6      	bne.n	13d2 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1444:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    1446:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1448:	7e13      	ldrb	r3, [r2, #24]
    144a:	420b      	tst	r3, r1
    144c:	d0fc      	beq.n	1448 <spi_select_slave+0x80>
    144e:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    1450:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    1452:	0749      	lsls	r1, r1, #29
    1454:	d5bd      	bpl.n	13d2 <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1456:	8b53      	ldrh	r3, [r2, #26]
    1458:	075b      	lsls	r3, r3, #29
    145a:	d501      	bpl.n	1460 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    145c:	2304      	movs	r3, #4
    145e:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1460:	7983      	ldrb	r3, [r0, #6]
    1462:	2b01      	cmp	r3, #1
    1464:	d002      	beq.n	146c <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1466:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1468:	2300      	movs	r3, #0
    146a:	e7b2      	b.n	13d2 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    146c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    146e:	2300      	movs	r3, #0
    1470:	e7af      	b.n	13d2 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    1472:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1474:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1476:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1478:	2900      	cmp	r1, #0
    147a:	d104      	bne.n	1486 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    147c:	0953      	lsrs	r3, r2, #5
    147e:	01db      	lsls	r3, r3, #7
    1480:	490d      	ldr	r1, [pc, #52]	; (14b8 <spi_select_slave+0xf0>)
    1482:	468c      	mov	ip, r1
    1484:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1486:	211f      	movs	r1, #31
    1488:	4011      	ands	r1, r2
    148a:	2201      	movs	r2, #1
    148c:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    148e:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    1490:	2300      	movs	r3, #0
    1492:	e79e      	b.n	13d2 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    1494:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1496:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1498:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    149a:	2900      	cmp	r1, #0
    149c:	d104      	bne.n	14a8 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    149e:	0953      	lsrs	r3, r2, #5
    14a0:	01db      	lsls	r3, r3, #7
    14a2:	4905      	ldr	r1, [pc, #20]	; (14b8 <spi_select_slave+0xf0>)
    14a4:	468c      	mov	ip, r1
    14a6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    14a8:	211f      	movs	r1, #31
    14aa:	4011      	ands	r1, r2
    14ac:	2201      	movs	r2, #1
    14ae:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    14b0:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    14b2:	2300      	movs	r3, #0
    14b4:	e78d      	b.n	13d2 <spi_select_slave+0xa>
    14b6:	46c0      	nop			; (mov r8, r8)
    14b8:	40002800 	.word	0x40002800

000014bc <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    14bc:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    14be:	0080      	lsls	r0, r0, #2
    14c0:	4b16      	ldr	r3, [pc, #88]	; (151c <_tc_interrupt_handler+0x60>)
    14c2:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    14c4:	6823      	ldr	r3, [r4, #0]
    14c6:	7a9d      	ldrb	r5, [r3, #10]
    14c8:	7e22      	ldrb	r2, [r4, #24]
    14ca:	7e63      	ldrb	r3, [r4, #25]
    14cc:	4013      	ands	r3, r2
    14ce:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    14d0:	07eb      	lsls	r3, r5, #31
    14d2:	d406      	bmi.n	14e2 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    14d4:	07ab      	lsls	r3, r5, #30
    14d6:	d40b      	bmi.n	14f0 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    14d8:	06eb      	lsls	r3, r5, #27
    14da:	d410      	bmi.n	14fe <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    14dc:	06ab      	lsls	r3, r5, #26
    14de:	d415      	bmi.n	150c <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    14e0:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    14e2:	0020      	movs	r0, r4
    14e4:	68a3      	ldr	r3, [r4, #8]
    14e6:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    14e8:	2301      	movs	r3, #1
    14ea:	6822      	ldr	r2, [r4, #0]
    14ec:	7293      	strb	r3, [r2, #10]
    14ee:	e7f1      	b.n	14d4 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    14f0:	0020      	movs	r0, r4
    14f2:	68e3      	ldr	r3, [r4, #12]
    14f4:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    14f6:	2302      	movs	r3, #2
    14f8:	6822      	ldr	r2, [r4, #0]
    14fa:	7293      	strb	r3, [r2, #10]
    14fc:	e7ec      	b.n	14d8 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    14fe:	0020      	movs	r0, r4
    1500:	6923      	ldr	r3, [r4, #16]
    1502:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1504:	2310      	movs	r3, #16
    1506:	6822      	ldr	r2, [r4, #0]
    1508:	7293      	strb	r3, [r2, #10]
    150a:	e7e7      	b.n	14dc <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    150c:	0020      	movs	r0, r4
    150e:	6963      	ldr	r3, [r4, #20]
    1510:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1512:	6823      	ldr	r3, [r4, #0]
    1514:	2220      	movs	r2, #32
    1516:	729a      	strb	r2, [r3, #10]
}
    1518:	e7e2      	b.n	14e0 <_tc_interrupt_handler+0x24>
    151a:	46c0      	nop			; (mov r8, r8)
    151c:	200002f4 	.word	0x200002f4

00001520 <TC0_Handler>:
	_TC_INTERRUPT_HANDLER(0,0)
    1520:	b510      	push	{r4, lr}
    1522:	2000      	movs	r0, #0
    1524:	4b01      	ldr	r3, [pc, #4]	; (152c <TC0_Handler+0xc>)
    1526:	4798      	blx	r3
    1528:	bd10      	pop	{r4, pc}
    152a:	46c0      	nop			; (mov r8, r8)
    152c:	000014bd 	.word	0x000014bd

00001530 <TC1_Handler>:
	_TC_INTERRUPT_HANDLER(1,1)
    1530:	b510      	push	{r4, lr}
    1532:	2001      	movs	r0, #1
    1534:	4b01      	ldr	r3, [pc, #4]	; (153c <TC1_Handler+0xc>)
    1536:	4798      	blx	r3
    1538:	bd10      	pop	{r4, pc}
    153a:	46c0      	nop			; (mov r8, r8)
    153c:	000014bd 	.word	0x000014bd

00001540 <TC4_Handler>:
	_TC_INTERRUPT_HANDLER(4,2)
    1540:	b510      	push	{r4, lr}
    1542:	2002      	movs	r0, #2
    1544:	4b01      	ldr	r3, [pc, #4]	; (154c <TC4_Handler+0xc>)
    1546:	4798      	blx	r3
    1548:	bd10      	pop	{r4, pc}
    154a:	46c0      	nop			; (mov r8, r8)
    154c:	000014bd 	.word	0x000014bd

00001550 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    1550:	b530      	push	{r4, r5, lr}
    1552:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    1554:	aa01      	add	r2, sp, #4
    1556:	4b0b      	ldr	r3, [pc, #44]	; (1584 <_tc_get_inst_index+0x34>)
    1558:	cb32      	ldmia	r3!, {r1, r4, r5}
    155a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    155c:	9b01      	ldr	r3, [sp, #4]
    155e:	4298      	cmp	r0, r3
    1560:	d00d      	beq.n	157e <_tc_get_inst_index+0x2e>
    1562:	9b02      	ldr	r3, [sp, #8]
    1564:	4298      	cmp	r0, r3
    1566:	d008      	beq.n	157a <_tc_get_inst_index+0x2a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1568:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    156a:	9a03      	ldr	r2, [sp, #12]
    156c:	4282      	cmp	r2, r0
    156e:	d002      	beq.n	1576 <_tc_get_inst_index+0x26>
}
    1570:	0018      	movs	r0, r3
    1572:	b005      	add	sp, #20
    1574:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1576:	3302      	adds	r3, #2
    1578:	e002      	b.n	1580 <_tc_get_inst_index+0x30>
    157a:	2301      	movs	r3, #1
    157c:	e000      	b.n	1580 <_tc_get_inst_index+0x30>
    157e:	2300      	movs	r3, #0
			return i;
    1580:	b2db      	uxtb	r3, r3
    1582:	e7f5      	b.n	1570 <_tc_get_inst_index+0x20>
    1584:	000084c8 	.word	0x000084c8

00001588 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1588:	b5f0      	push	{r4, r5, r6, r7, lr}
    158a:	46c6      	mov	lr, r8
    158c:	b500      	push	{lr}
    158e:	b08a      	sub	sp, #40	; 0x28
    1590:	0004      	movs	r4, r0
    1592:	000d      	movs	r5, r1
    1594:	0016      	movs	r6, r2
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    1596:	0008      	movs	r0, r1
    1598:	4baa      	ldr	r3, [pc, #680]	; (1844 <tc_init+0x2bc>)
    159a:	4798      	blx	r3
    159c:	4680      	mov	r8, r0
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC1,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3};
#else
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC4_GCLK_ID};
    159e:	ab09      	add	r3, sp, #36	; 0x24
    15a0:	221b      	movs	r2, #27
    15a2:	701a      	strb	r2, [r3, #0]
    15a4:	705a      	strb	r2, [r3, #1]
    15a6:	3202      	adds	r2, #2
    15a8:	709a      	strb	r2, [r3, #2]
	/* Array of PM APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    15aa:	a903      	add	r1, sp, #12
    15ac:	4ba6      	ldr	r3, [pc, #664]	; (1848 <tc_init+0x2c0>)
    15ae:	330c      	adds	r3, #12
    15b0:	000a      	movs	r2, r1
    15b2:	cb83      	ldmia	r3!, {r0, r1, r7}
    15b4:	c283      	stmia	r2!, {r0, r1, r7}
    15b6:	cb83      	ldmia	r3!, {r0, r1, r7}
    15b8:	c283      	stmia	r2!, {r0, r1, r7}
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    15ba:	2300      	movs	r3, #0
    15bc:	60a3      	str	r3, [r4, #8]
    15be:	60e3      	str	r3, [r4, #12]
    15c0:	6123      	str	r3, [r4, #16]
    15c2:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    15c4:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    15c6:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    15c8:	4643      	mov	r3, r8
    15ca:	009a      	lsls	r2, r3, #2
    15cc:	4b9f      	ldr	r3, [pc, #636]	; (184c <tc_init+0x2c4>)
    15ce:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    15d0:	6025      	str	r5, [r4, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    15d2:	2334      	movs	r3, #52	; 0x34
    15d4:	5cf3      	ldrb	r3, [r6, r3]
    15d6:	76a3      	strb	r3, [r4, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    15d8:	78f3      	ldrb	r3, [r6, #3]
    15da:	2b08      	cmp	r3, #8
    15dc:	d008      	beq.n	15f0 <tc_init+0x68>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    15de:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    15e0:	682b      	ldr	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    15e2:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    15e4:	07db      	lsls	r3, r3, #31
    15e6:	d508      	bpl.n	15fa <tc_init+0x72>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    15e8:	b00a      	add	sp, #40	; 0x28
    15ea:	bc04      	pop	{r2}
    15ec:	4690      	mov	r8, r2
    15ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    15f0:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    15f2:	4642      	mov	r2, r8
    15f4:	07d2      	lsls	r2, r2, #31
    15f6:	d4f7      	bmi.n	15e8 <tc_init+0x60>
    15f8:	e7f1      	b.n	15de <tc_init+0x56>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    15fa:	7aeb      	ldrb	r3, [r5, #11]
		return STATUS_ERR_DENIED;
    15fc:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    15fe:	079b      	lsls	r3, r3, #30
    1600:	d4f2      	bmi.n	15e8 <tc_init+0x60>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    1602:	682b      	ldr	r3, [r5, #0]
    1604:	079b      	lsls	r3, r3, #30
    1606:	d4ef      	bmi.n	15e8 <tc_init+0x60>
	if (config->pwm_channel[0].enabled) {
    1608:	7c33      	ldrb	r3, [r6, #16]
    160a:	2b00      	cmp	r3, #0
    160c:	d112      	bne.n	1634 <tc_init+0xac>
	if (config->pwm_channel[1].enabled) {
    160e:	7f33      	ldrb	r3, [r6, #28]
    1610:	2b00      	cmp	r3, #0
    1612:	d11b      	bne.n	164c <tc_init+0xc4>
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    1614:	4643      	mov	r3, r8
    1616:	005a      	lsls	r2, r3, #1
    1618:	a903      	add	r1, sp, #12
    161a:	1c53      	adds	r3, r2, #1
    161c:	009b      	lsls	r3, r3, #2
    161e:	5858      	ldr	r0, [r3, r1]
    1620:	4643      	mov	r3, r8
    1622:	00db      	lsls	r3, r3, #3
    1624:	585b      	ldr	r3, [r3, r1]
	switch (bus) {
    1626:	b2d9      	uxtb	r1, r3
    1628:	2904      	cmp	r1, #4
    162a:	d823      	bhi.n	1674 <tc_init+0xec>
    162c:	008b      	lsls	r3, r1, #2
    162e:	4988      	ldr	r1, [pc, #544]	; (1850 <tc_init+0x2c8>)
    1630:	58cb      	ldr	r3, [r1, r3]
    1632:	469f      	mov	pc, r3
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1634:	a902      	add	r1, sp, #8
    1636:	2301      	movs	r3, #1
    1638:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    163a:	2200      	movs	r2, #0
    163c:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    163e:	7e32      	ldrb	r2, [r6, #24]
    1640:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1642:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1644:	7d30      	ldrb	r0, [r6, #20]
    1646:	4b83      	ldr	r3, [pc, #524]	; (1854 <tc_init+0x2cc>)
    1648:	4798      	blx	r3
    164a:	e7e0      	b.n	160e <tc_init+0x86>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    164c:	a902      	add	r1, sp, #8
    164e:	2301      	movs	r3, #1
    1650:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1652:	2200      	movs	r2, #0
    1654:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1656:	3224      	adds	r2, #36	; 0x24
    1658:	18b2      	adds	r2, r6, r2
    165a:	7812      	ldrb	r2, [r2, #0]
    165c:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    165e:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1660:	331f      	adds	r3, #31
    1662:	18f3      	adds	r3, r6, r3
    1664:	7818      	ldrb	r0, [r3, #0]
    1666:	4b7b      	ldr	r3, [pc, #492]	; (1854 <tc_init+0x2cc>)
    1668:	4798      	blx	r3
    166a:	e7d3      	b.n	1614 <tc_init+0x8c>
			MCLK->APBAMASK.reg |= mask;
    166c:	497a      	ldr	r1, [pc, #488]	; (1858 <tc_init+0x2d0>)
    166e:	694b      	ldr	r3, [r1, #20]
    1670:	4318      	orrs	r0, r3
    1672:	6148      	str	r0, [r1, #20]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    1674:	78f3      	ldrb	r3, [r6, #3]
    1676:	2b08      	cmp	r3, #8
    1678:	d100      	bne.n	167c <tc_init+0xf4>
    167a:	e085      	b.n	1788 <tc_init+0x200>
	gclk_chan_config.source_generator = config->clock_source;
    167c:	a901      	add	r1, sp, #4
    167e:	7833      	ldrb	r3, [r6, #0]
    1680:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1682:	ab09      	add	r3, sp, #36	; 0x24
    1684:	4642      	mov	r2, r8
    1686:	5c9f      	ldrb	r7, [r3, r2]
    1688:	0038      	movs	r0, r7
    168a:	4b74      	ldr	r3, [pc, #464]	; (185c <tc_init+0x2d4>)
    168c:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    168e:	0038      	movs	r0, r7
    1690:	4b73      	ldr	r3, [pc, #460]	; (1860 <tc_init+0x2d8>)
    1692:	4798      	blx	r3
			(uint32_t)config->counter_size |
    1694:	78f3      	ldrb	r3, [r6, #3]
    1696:	79f2      	ldrb	r2, [r6, #7]
    1698:	4313      	orrs	r3, r2
			(uint32_t)config->clock_prescaler;
    169a:	88b2      	ldrh	r2, [r6, #4]
	ctrla_tmp =
    169c:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    169e:	7a72      	ldrb	r2, [r6, #9]
    16a0:	2a00      	cmp	r2, #0
    16a2:	d002      	beq.n	16aa <tc_init+0x122>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    16a4:	2280      	movs	r2, #128	; 0x80
    16a6:	0252      	lsls	r2, r2, #9
    16a8:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    16aa:	7ab2      	ldrb	r2, [r6, #10]
    16ac:	2a00      	cmp	r2, #0
    16ae:	d002      	beq.n	16b6 <tc_init+0x12e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    16b0:	2280      	movs	r2, #128	; 0x80
    16b2:	0292      	lsls	r2, r2, #10
    16b4:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    16b6:	7af2      	ldrb	r2, [r6, #11]
    16b8:	2a00      	cmp	r2, #0
    16ba:	d002      	beq.n	16c2 <tc_init+0x13a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    16bc:	2280      	movs	r2, #128	; 0x80
    16be:	0352      	lsls	r2, r2, #13
    16c0:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    16c2:	7b32      	ldrb	r2, [r6, #12]
    16c4:	2a00      	cmp	r2, #0
    16c6:	d002      	beq.n	16ce <tc_init+0x146>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    16c8:	2280      	movs	r2, #128	; 0x80
    16ca:	0392      	lsls	r2, r2, #14
    16cc:	4313      	orrs	r3, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    16ce:	7871      	ldrb	r1, [r6, #1]
    16d0:	0189      	lsls	r1, r1, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    16d2:	78b2      	ldrb	r2, [r6, #2]
    16d4:	01d2      	lsls	r2, r2, #7
    16d6:	4311      	orrs	r1, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    16d8:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    16da:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    16dc:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    16de:	2b00      	cmp	r3, #0
    16e0:	d1fc      	bne.n	16dc <tc_init+0x154>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    16e2:	6029      	str	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    16e4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    16e6:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    16e8:	2b00      	cmp	r3, #0
    16ea:	d1fc      	bne.n	16e6 <tc_init+0x15e>
	hw->COUNT8.WAVE.reg = config->wave_generation;
    16ec:	79b3      	ldrb	r3, [r6, #6]
    16ee:	732b      	strb	r3, [r5, #12]
	if (config->oneshot) {
    16f0:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    16f2:	1e4b      	subs	r3, r1, #1
    16f4:	4199      	sbcs	r1, r3
    16f6:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    16f8:	7bb3      	ldrb	r3, [r6, #14]
    16fa:	2b00      	cmp	r3, #0
    16fc:	d001      	beq.n	1702 <tc_init+0x17a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    16fe:	2301      	movs	r3, #1
    1700:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1702:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    1704:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    1706:	2b00      	cmp	r3, #0
    1708:	d1fc      	bne.n	1704 <tc_init+0x17c>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    170a:	33ff      	adds	r3, #255	; 0xff
    170c:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    170e:	2900      	cmp	r1, #0
    1710:	d004      	beq.n	171c <tc_init+0x194>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1712:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    1714:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
    1716:	2b00      	cmp	r3, #0
    1718:	d1fc      	bne.n	1714 <tc_init+0x18c>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    171a:	7169      	strb	r1, [r5, #5]
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    171c:	7a33      	ldrb	r3, [r6, #8]
    171e:	736b      	strb	r3, [r5, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1720:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    1722:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    1724:	2b00      	cmp	r3, #0
    1726:	d1fc      	bne.n	1722 <tc_init+0x19a>
	switch (module_inst->counter_size) {
    1728:	7923      	ldrb	r3, [r4, #4]
    172a:	2b04      	cmp	r3, #4
    172c:	d059      	beq.n	17e2 <tc_init+0x25a>
    172e:	2b08      	cmp	r3, #8
    1730:	d074      	beq.n	181c <tc_init+0x294>
	return STATUS_ERR_INVALID_ARG;
    1732:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1734:	2b00      	cmp	r3, #0
    1736:	d000      	beq.n	173a <tc_init+0x1b2>
    1738:	e756      	b.n	15e8 <tc_init+0x60>
    173a:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    173c:	2b00      	cmp	r3, #0
    173e:	d1fc      	bne.n	173a <tc_init+0x1b2>
				= config->counter_16_bit.value;
    1740:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    1742:	82ab      	strh	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1744:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    1746:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    1748:	2b00      	cmp	r3, #0
    174a:	d1fc      	bne.n	1746 <tc_init+0x1be>
					config->counter_16_bit.compare_capture_channel[0];
    174c:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    174e:	83ab      	strh	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1750:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    1752:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    1754:	2b00      	cmp	r3, #0
    1756:	d1fc      	bne.n	1752 <tc_init+0x1ca>
					config->counter_16_bit.compare_capture_channel[1];
    1758:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    175a:	83eb      	strh	r3, [r5, #30]
			return STATUS_OK;
    175c:	2000      	movs	r0, #0
    175e:	e743      	b.n	15e8 <tc_init+0x60>
			MCLK->APBBMASK.reg |= mask;
    1760:	493d      	ldr	r1, [pc, #244]	; (1858 <tc_init+0x2d0>)
    1762:	698b      	ldr	r3, [r1, #24]
    1764:	4318      	orrs	r0, r3
    1766:	6188      	str	r0, [r1, #24]
    1768:	e784      	b.n	1674 <tc_init+0xec>
			MCLK->APBCMASK.reg |= mask;
    176a:	493b      	ldr	r1, [pc, #236]	; (1858 <tc_init+0x2d0>)
    176c:	69cb      	ldr	r3, [r1, #28]
    176e:	4318      	orrs	r0, r3
    1770:	61c8      	str	r0, [r1, #28]
    1772:	e77f      	b.n	1674 <tc_init+0xec>
			MCLK->APBDMASK.reg |= mask;
    1774:	4938      	ldr	r1, [pc, #224]	; (1858 <tc_init+0x2d0>)
    1776:	6a0b      	ldr	r3, [r1, #32]
    1778:	4318      	orrs	r0, r3
    177a:	6208      	str	r0, [r1, #32]
    177c:	e77a      	b.n	1674 <tc_init+0xec>
			break;
		case SYSTEM_CLOCK_APB_APBE:
			MCLK->APBEMASK.reg |= mask;
    177e:	4b36      	ldr	r3, [pc, #216]	; (1858 <tc_init+0x2d0>)
    1780:	6a59      	ldr	r1, [r3, #36]	; 0x24
    1782:	4308      	orrs	r0, r1
    1784:	6258      	str	r0, [r3, #36]	; 0x24
    1786:	e775      	b.n	1674 <tc_init+0xec>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    1788:	4643      	mov	r3, r8
    178a:	3301      	adds	r3, #1
    178c:	2b02      	cmp	r3, #2
    178e:	dd00      	ble.n	1792 <tc_init+0x20a>
    1790:	e774      	b.n	167c <tc_init+0xf4>
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    1792:	ab03      	add	r3, sp, #12
    1794:	1cd1      	adds	r1, r2, #3
    1796:	0089      	lsls	r1, r1, #2
    1798:	58c9      	ldr	r1, [r1, r3]
    179a:	3202      	adds	r2, #2
    179c:	0092      	lsls	r2, r2, #2
    179e:	58d3      	ldr	r3, [r2, r3]
	switch (bus) {
    17a0:	b2da      	uxtb	r2, r3
    17a2:	2a04      	cmp	r2, #4
    17a4:	d900      	bls.n	17a8 <tc_init+0x220>
    17a6:	e769      	b.n	167c <tc_init+0xf4>
    17a8:	0093      	lsls	r3, r2, #2
    17aa:	4a2e      	ldr	r2, [pc, #184]	; (1864 <tc_init+0x2dc>)
    17ac:	58d3      	ldr	r3, [r2, r3]
    17ae:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    17b0:	4a29      	ldr	r2, [pc, #164]	; (1858 <tc_init+0x2d0>)
    17b2:	6953      	ldr	r3, [r2, #20]
    17b4:	4319      	orrs	r1, r3
    17b6:	6151      	str	r1, [r2, #20]
    17b8:	e760      	b.n	167c <tc_init+0xf4>
			MCLK->APBBMASK.reg |= mask;
    17ba:	4a27      	ldr	r2, [pc, #156]	; (1858 <tc_init+0x2d0>)
    17bc:	6993      	ldr	r3, [r2, #24]
    17be:	4319      	orrs	r1, r3
    17c0:	6191      	str	r1, [r2, #24]
    17c2:	e75b      	b.n	167c <tc_init+0xf4>
			MCLK->APBCMASK.reg |= mask;
    17c4:	4a24      	ldr	r2, [pc, #144]	; (1858 <tc_init+0x2d0>)
    17c6:	69d3      	ldr	r3, [r2, #28]
    17c8:	4319      	orrs	r1, r3
    17ca:	61d1      	str	r1, [r2, #28]
    17cc:	e756      	b.n	167c <tc_init+0xf4>
			MCLK->APBDMASK.reg |= mask;
    17ce:	4a22      	ldr	r2, [pc, #136]	; (1858 <tc_init+0x2d0>)
    17d0:	6a13      	ldr	r3, [r2, #32]
    17d2:	4319      	orrs	r1, r3
    17d4:	6211      	str	r1, [r2, #32]
    17d6:	e751      	b.n	167c <tc_init+0xf4>
			MCLK->APBEMASK.reg |= mask;
    17d8:	4b1f      	ldr	r3, [pc, #124]	; (1858 <tc_init+0x2d0>)
    17da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    17dc:	4311      	orrs	r1, r2
    17de:	6259      	str	r1, [r3, #36]	; 0x24
    17e0:	e74c      	b.n	167c <tc_init+0xf4>
    17e2:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    17e4:	2b00      	cmp	r3, #0
    17e6:	d1fc      	bne.n	17e2 <tc_init+0x25a>
					config->counter_8_bit.value;
    17e8:	3328      	adds	r3, #40	; 0x28
    17ea:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    17ec:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    17ee:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    17f0:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    17f2:	2b00      	cmp	r3, #0
    17f4:	d1fc      	bne.n	17f0 <tc_init+0x268>
					config->counter_8_bit.period;
    17f6:	3329      	adds	r3, #41	; 0x29
    17f8:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    17fa:	76eb      	strb	r3, [r5, #27]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    17fc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    17fe:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    1800:	2b00      	cmp	r3, #0
    1802:	d1fc      	bne.n	17fe <tc_init+0x276>
					config->counter_8_bit.compare_capture_channel[0];
    1804:	332a      	adds	r3, #42	; 0x2a
    1806:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    1808:	772b      	strb	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    180a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    180c:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    180e:	2b00      	cmp	r3, #0
    1810:	d1fc      	bne.n	180c <tc_init+0x284>
					config->counter_8_bit.compare_capture_channel[1];
    1812:	332b      	adds	r3, #43	; 0x2b
    1814:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    1816:	776b      	strb	r3, [r5, #29]
			return STATUS_OK;
    1818:	2000      	movs	r0, #0
    181a:	e6e5      	b.n	15e8 <tc_init+0x60>
    181c:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    181e:	2b00      	cmp	r3, #0
    1820:	d1fc      	bne.n	181c <tc_init+0x294>
				= config->counter_32_bit.value;
    1822:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1824:	616b      	str	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1826:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    1828:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    182a:	2b00      	cmp	r3, #0
    182c:	d1fc      	bne.n	1828 <tc_init+0x2a0>
			hw->COUNT32.CC[0].reg =
    182e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1830:	61eb      	str	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1832:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    1834:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    1836:	2b00      	cmp	r3, #0
    1838:	d1fc      	bne.n	1834 <tc_init+0x2ac>
					config->counter_32_bit.compare_capture_channel[1];
    183a:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    183c:	622b      	str	r3, [r5, #32]
			return STATUS_OK;
    183e:	2000      	movs	r0, #0
    1840:	e6d2      	b.n	15e8 <tc_init+0x60>
    1842:	46c0      	nop			; (mov r8, r8)
    1844:	00001551 	.word	0x00001551
    1848:	000084c8 	.word	0x000084c8
    184c:	200002f4 	.word	0x200002f4
    1850:	000084a0 	.word	0x000084a0
    1854:	0000386d 	.word	0x0000386d
    1858:	40000400 	.word	0x40000400
    185c:	00003771 	.word	0x00003771
    1860:	00003701 	.word	0x00003701
    1864:	000084b4 	.word	0x000084b4

00001868 <tc_set_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance*/
	Tc *const tc_module = module_inst->hw;
    1868:	6802      	ldr	r2, [r0, #0]
    186a:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    186c:	2b00      	cmp	r3, #0
    186e:	d1fc      	bne.n	186a <tc_set_count_value+0x2>
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
    1870:	7903      	ldrb	r3, [r0, #4]
    1872:	2b04      	cmp	r3, #4
    1874:	d005      	beq.n	1882 <tc_set_count_value+0x1a>
    1876:	2b08      	cmp	r3, #8
    1878:	d00b      	beq.n	1892 <tc_set_count_value+0x2a>
		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
			return STATUS_OK;

		default:
			return STATUS_ERR_INVALID_ARG;
    187a:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    187c:	2b00      	cmp	r3, #0
    187e:	d004      	beq.n	188a <tc_set_count_value+0x22>
	}
}
    1880:	4770      	bx	lr
			tc_module->COUNT8.COUNT.reg  = (uint8_t)count;
    1882:	b2c9      	uxtb	r1, r1
    1884:	7511      	strb	r1, [r2, #20]
			return STATUS_OK;
    1886:	2000      	movs	r0, #0
    1888:	e7fa      	b.n	1880 <tc_set_count_value+0x18>
			tc_module->COUNT16.COUNT.reg = (uint16_t)count;
    188a:	b289      	uxth	r1, r1
    188c:	8291      	strh	r1, [r2, #20]
			return STATUS_OK;
    188e:	2000      	movs	r0, #0
    1890:	e7f6      	b.n	1880 <tc_set_count_value+0x18>
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
    1892:	6151      	str	r1, [r2, #20]
			return STATUS_OK;
    1894:	2000      	movs	r0, #0
    1896:	e7f3      	b.n	1880 <tc_set_count_value+0x18>

00001898 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1898:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    189a:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    189c:	2b00      	cmp	r3, #0
    189e:	d1fc      	bne.n	189a <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    18a0:	7113      	strb	r3, [r2, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    18a2:	6801      	ldr	r1, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    18a4:	690b      	ldr	r3, [r1, #16]

	while (tc_is_syncing(module_inst)) {
    18a6:	2b00      	cmp	r3, #0
    18a8:	d1fc      	bne.n	18a4 <tc_get_count_value+0xc>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_READSYNC_Val);
    18aa:	3380      	adds	r3, #128	; 0x80
    18ac:	7153      	strb	r3, [r2, #5]
#if (SAMC20) || (SAMC21) || (SAML21) || (SAML22) || (SAMR30)
	/* wait for the CMD bits in CTRLBSET to be cleared, meaning the CMD has been executed */
	while(tc_module->CTRLBSET.reg & TC_CTRLBSET_CMD_READSYNC);	
    18ae:	7953      	ldrb	r3, [r2, #5]
    18b0:	b25b      	sxtb	r3, r3
    18b2:	2b00      	cmp	r3, #0
    18b4:	dbfb      	blt.n	18ae <tc_get_count_value+0x16>

	/* Read synchronization */
	tc_sync_read_count(module_inst);
	
	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    18b6:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    18b8:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    18ba:	2b00      	cmp	r3, #0
    18bc:	d1fc      	bne.n	18b8 <tc_get_count_value+0x20>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    18be:	7903      	ldrb	r3, [r0, #4]
    18c0:	2b04      	cmp	r3, #4
    18c2:	d005      	beq.n	18d0 <tc_get_count_value+0x38>
    18c4:	2b08      	cmp	r3, #8
    18c6:	d009      	beq.n	18dc <tc_get_count_value+0x44>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    18c8:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    18ca:	2b00      	cmp	r3, #0
    18cc:	d003      	beq.n	18d6 <tc_get_count_value+0x3e>
}
    18ce:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    18d0:	7d10      	ldrb	r0, [r2, #20]
    18d2:	b2c0      	uxtb	r0, r0
    18d4:	e7fb      	b.n	18ce <tc_get_count_value+0x36>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    18d6:	8a90      	ldrh	r0, [r2, #20]
    18d8:	b280      	uxth	r0, r0
    18da:	e7f8      	b.n	18ce <tc_get_count_value+0x36>
			return tc_module->COUNT32.COUNT.reg;
    18dc:	6950      	ldr	r0, [r2, #20]
    18de:	e7f6      	b.n	18ce <tc_get_count_value+0x36>

000018e0 <tc_reset>:
	/* Sanity check arguments  */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    18e0:	6803      	ldr	r3, [r0, #0]

	if (tc_module->STATUS.reg & TC_STATUS_SLAVE) {
    18e2:	7ad9      	ldrb	r1, [r3, #11]
		return STATUS_ERR_UNSUPPORTED_DEV;
    18e4:	2215      	movs	r2, #21
	if (tc_module->STATUS.reg & TC_STATUS_SLAVE) {
    18e6:	0789      	lsls	r1, r1, #30
    18e8:	d501      	bpl.n	18ee <tc_reset+0xe>

	/* Reset this TC module */
	tc_module->CTRLA.reg  |= TC_CTRLA_SWRST;

	return STATUS_OK;
}
    18ea:	0010      	movs	r0, r2
    18ec:	4770      	bx	lr
	if (tc_module->CTRLA.reg & TC_CTRLA_ENABLE) {
    18ee:	681a      	ldr	r2, [r3, #0]
    18f0:	0792      	lsls	r2, r2, #30
    18f2:	d50d      	bpl.n	1910 <tc_reset+0x30>
    18f4:	691a      	ldr	r2, [r3, #16]
	while (tc_is_syncing(module_inst)) {
    18f6:	2a00      	cmp	r2, #0
    18f8:	d1fc      	bne.n	18f4 <tc_reset+0x14>
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    18fa:	3233      	adds	r2, #51	; 0x33
    18fc:	721a      	strb	r2, [r3, #8]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    18fe:	729a      	strb	r2, [r3, #10]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    1900:	681a      	ldr	r2, [r3, #0]
    1902:	2102      	movs	r1, #2
    1904:	438a      	bics	r2, r1
    1906:	601a      	str	r2, [r3, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1908:	6801      	ldr	r1, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    190a:	690a      	ldr	r2, [r1, #16]
		while (tc_is_syncing(module_inst)) {
    190c:	2a00      	cmp	r2, #0
    190e:	d1fc      	bne.n	190a <tc_reset+0x2a>
	tc_module->CTRLA.reg  |= TC_CTRLA_SWRST;
    1910:	681a      	ldr	r2, [r3, #0]
    1912:	2101      	movs	r1, #1
    1914:	430a      	orrs	r2, r1
    1916:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    1918:	2200      	movs	r2, #0
    191a:	e7e6      	b.n	18ea <tc_reset+0xa>

0000191c <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    191c:	b510      	push	{r4, lr}
	eic_module->INTFLAG.reg = eic_mask;
    191e:	2201      	movs	r2, #1
    1920:	4b02      	ldr	r3, [pc, #8]	; (192c <AT86RFX_ISR+0x10>)
    1922:	615a      	str	r2, [r3, #20]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
	PHY_PacketReceieved();
    1924:	4b02      	ldr	r3, [pc, #8]	; (1930 <AT86RFX_ISR+0x14>)
    1926:	4798      	blx	r3

	
}
    1928:	bd10      	pop	{r4, pc}
    192a:	46c0      	nop			; (mov r8, r8)
    192c:	40002400 	.word	0x40002400
    1930:	00004b0d 	.word	0x00004b0d

00001934 <trx_spi_init>:

void trx_spi_init(void)
{
    1934:	b530      	push	{r4, r5, lr}
    1936:	b085      	sub	sp, #20
	config->address_enabled = false;
    1938:	4a34      	ldr	r2, [pc, #208]	; (1a0c <trx_spi_init+0xd8>)
    193a:	2300      	movs	r3, #0
    193c:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    193e:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    1940:	213f      	movs	r1, #63	; 0x3f
    1942:	7011      	strb	r1, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    1944:	4c32      	ldr	r4, [pc, #200]	; (1a10 <trx_spi_init+0xdc>)
    1946:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    1948:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    194a:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    194c:	2201      	movs	r2, #1
    194e:	4669      	mov	r1, sp
    1950:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    1952:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    1954:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    1956:	203f      	movs	r0, #63	; 0x3f
    1958:	4b2e      	ldr	r3, [pc, #184]	; (1a14 <trx_spi_init+0xe0>)
    195a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    195c:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    195e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1960:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1962:	2900      	cmp	r1, #0
    1964:	d104      	bne.n	1970 <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    1966:	0953      	lsrs	r3, r2, #5
    1968:	01db      	lsls	r3, r3, #7
    196a:	492b      	ldr	r1, [pc, #172]	; (1a18 <trx_spi_init+0xe4>)
    196c:	468c      	mov	ip, r1
    196e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1970:	211f      	movs	r1, #31
    1972:	4011      	ands	r1, r2
    1974:	2201      	movs	r2, #1
    1976:	0010      	movs	r0, r2
    1978:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    197a:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    197c:	4c27      	ldr	r4, [pc, #156]	; (1a1c <trx_spi_init+0xe8>)
    197e:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    1980:	2300      	movs	r3, #0
    1982:	6063      	str	r3, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    1984:	60a3      	str	r3, [r4, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    1986:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    1988:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    198a:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    198c:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    198e:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    1990:	3223      	adds	r2, #35	; 0x23
    1992:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    1994:	0020      	movs	r0, r4
    1996:	3018      	adds	r0, #24
    1998:	3a18      	subs	r2, #24
    199a:	2100      	movs	r1, #0
    199c:	4b20      	ldr	r3, [pc, #128]	; (1a20 <trx_spi_init+0xec>)
    199e:	4798      	blx	r3
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    19a0:	2380      	movs	r3, #128	; 0x80
    19a2:	025b      	lsls	r3, r3, #9
    19a4:	60e3      	str	r3, [r4, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    19a6:	4b1f      	ldr	r3, [pc, #124]	; (1a24 <trx_spi_init+0xf0>)
    19a8:	61a3      	str	r3, [r4, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    19aa:	4b1f      	ldr	r3, [pc, #124]	; (1a28 <trx_spi_init+0xf4>)
    19ac:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    19ae:	2301      	movs	r3, #1
    19b0:	425b      	negs	r3, r3
    19b2:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    19b4:	4b1d      	ldr	r3, [pc, #116]	; (1a2c <trx_spi_init+0xf8>)
    19b6:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    19b8:	4b1d      	ldr	r3, [pc, #116]	; (1a30 <trx_spi_init+0xfc>)
    19ba:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    19bc:	4d1d      	ldr	r5, [pc, #116]	; (1a34 <trx_spi_init+0x100>)
    19be:	0022      	movs	r2, r4
    19c0:	491d      	ldr	r1, [pc, #116]	; (1a38 <trx_spi_init+0x104>)
    19c2:	0028      	movs	r0, r5
    19c4:	4b1d      	ldr	r3, [pc, #116]	; (1a3c <trx_spi_init+0x108>)
    19c6:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    19c8:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    19ca:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    19cc:	2b00      	cmp	r3, #0
    19ce:	d1fc      	bne.n	19ca <trx_spi_init+0x96>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    19d0:	6813      	ldr	r3, [r2, #0]
    19d2:	2502      	movs	r5, #2
    19d4:	432b      	orrs	r3, r5
    19d6:	6013      	str	r3, [r2, #0]
	spi_enable(&master);

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    19d8:	ac01      	add	r4, sp, #4
    19da:	0020      	movs	r0, r4
    19dc:	4b18      	ldr	r3, [pc, #96]	; (1a40 <trx_spi_init+0x10c>)
    19de:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    19e0:	2320      	movs	r3, #32
    19e2:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
    19e4:	2380      	movs	r3, #128	; 0x80
    19e6:	039b      	lsls	r3, r3, #14
    19e8:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    19ea:	7225      	strb	r5, [r4, #8]
	#if (SAML21 || SAMR30)
	eint_chan_conf.enable_async_edge_detection = false;
    19ec:	2300      	movs	r3, #0
    19ee:	7263      	strb	r3, [r4, #9]
	#else
	eint_chan_conf.wake_if_sleeping    = true;
	#endif
	eint_chan_conf.filter_input_signal = false;
    19f0:	72a3      	strb	r3, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    19f2:	3301      	adds	r3, #1
    19f4:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    19f6:	0021      	movs	r1, r4
    19f8:	2000      	movs	r0, #0
    19fa:	4b12      	ldr	r3, [pc, #72]	; (1a44 <trx_spi_init+0x110>)
    19fc:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    19fe:	2200      	movs	r2, #0
    1a00:	2100      	movs	r1, #0
    1a02:	4811      	ldr	r0, [pc, #68]	; (1a48 <trx_spi_init+0x114>)
    1a04:	4b11      	ldr	r3, [pc, #68]	; (1a4c <trx_spi_init+0x118>)
    1a06:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    1a08:	b005      	add	sp, #20
    1a0a:	bd30      	pop	{r4, r5, pc}
    1a0c:	20000304 	.word	0x20000304
    1a10:	20000308 	.word	0x20000308
    1a14:	00002775 	.word	0x00002775
    1a18:	40002800 	.word	0x40002800
    1a1c:	2000030c 	.word	0x2000030c
    1a20:	000073d7 	.word	0x000073d7
    1a24:	003d0900 	.word	0x003d0900
    1a28:	00530005 	.word	0x00530005
    1a2c:	003e0005 	.word	0x003e0005
    1a30:	00520005 	.word	0x00520005
    1a34:	20000344 	.word	0x20000344
    1a38:	42001000 	.word	0x42001000
    1a3c:	0000107d 	.word	0x0000107d
    1a40:	000009bd 	.word	0x000009bd
    1a44:	000009d1 	.word	0x000009d1
    1a48:	0000191d 	.word	0x0000191d
    1a4c:	0000083d 	.word	0x0000083d

00001a50 <PhyReset>:

void PhyReset(void)
{
    1a50:	b570      	push	{r4, r5, r6, lr}
    1a52:	4c08      	ldr	r4, [pc, #32]	; (1a74 <PhyReset+0x24>)
    1a54:	2580      	movs	r5, #128	; 0x80
    1a56:	022d      	lsls	r5, r5, #8
    1a58:	61a5      	str	r5, [r4, #24]
		port_base->OUTCLR.reg = pin_mask;
    1a5a:	2280      	movs	r2, #128	; 0x80
    1a5c:	0352      	lsls	r2, r2, #13
    1a5e:	4b06      	ldr	r3, [pc, #24]	; (1a78 <PhyReset+0x28>)
    1a60:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    1a62:	20a5      	movs	r0, #165	; 0xa5
    1a64:	0040      	lsls	r0, r0, #1
    1a66:	4e05      	ldr	r6, [pc, #20]	; (1a7c <PhyReset+0x2c>)
    1a68:	47b0      	blx	r6
    1a6a:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    1a6c:	200a      	movs	r0, #10
    1a6e:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    1a70:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    1a72:	bd70      	pop	{r4, r5, r6, pc}
    1a74:	40002880 	.word	0x40002880
    1a78:	40002800 	.word	0x40002800
    1a7c:	00000651 	.word	0x00000651

00001a80 <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    1a80:	b570      	push	{r4, r5, r6, lr}
    1a82:	b082      	sub	sp, #8
    1a84:	0005      	movs	r5, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1a86:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1a8a:	425a      	negs	r2, r3
    1a8c:	4153      	adcs	r3, r2
    1a8e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1a90:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1a92:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1a96:	2200      	movs	r2, #0
    1a98:	4b33      	ldr	r3, [pc, #204]	; (1b68 <trx_reg_read+0xe8>)
    1a9a:	701a      	strb	r2, [r3, #0]
	return flags;
    1a9c:	9c01      	ldr	r4, [sp, #4]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    1a9e:	4e33      	ldr	r6, [pc, #204]	; (1b6c <trx_reg_read+0xec>)
    1aa0:	3201      	adds	r2, #1
    1aa2:	4933      	ldr	r1, [pc, #204]	; (1b70 <trx_reg_read+0xf0>)
    1aa4:	0030      	movs	r0, r6
    1aa6:	4b33      	ldr	r3, [pc, #204]	; (1b74 <trx_reg_read+0xf4>)
    1aa8:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    1aaa:	6833      	ldr	r3, [r6, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    1aac:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1aae:	7e1a      	ldrb	r2, [r3, #24]
    1ab0:	420a      	tst	r2, r1
    1ab2:	d0fc      	beq.n	1aae <trx_reg_read+0x2e>
    1ab4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    1ab6:	07d2      	lsls	r2, r2, #31
    1ab8:	d502      	bpl.n	1ac0 <trx_reg_read+0x40>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1aba:	2280      	movs	r2, #128	; 0x80
    1abc:	4315      	orrs	r5, r2
    1abe:	629d      	str	r5, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    1ac0:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1ac2:	7e1a      	ldrb	r2, [r3, #24]
    1ac4:	420a      	tst	r2, r1
    1ac6:	d0fc      	beq.n	1ac2 <trx_reg_read+0x42>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    1ac8:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1aca:	7e1a      	ldrb	r2, [r3, #24]
    1acc:	420a      	tst	r2, r1
    1ace:	d0fc      	beq.n	1aca <trx_reg_read+0x4a>
    1ad0:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    1ad2:	0752      	lsls	r2, r2, #29
    1ad4:	d50c      	bpl.n	1af0 <trx_reg_read+0x70>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1ad6:	8b5a      	ldrh	r2, [r3, #26]
    1ad8:	0752      	lsls	r2, r2, #29
    1ada:	d501      	bpl.n	1ae0 <trx_reg_read+0x60>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1adc:	2204      	movs	r2, #4
    1ade:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1ae0:	4a22      	ldr	r2, [pc, #136]	; (1b6c <trx_reg_read+0xec>)
    1ae2:	7992      	ldrb	r2, [r2, #6]
    1ae4:	2a01      	cmp	r2, #1
    1ae6:	d034      	beq.n	1b52 <trx_reg_read+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1ae8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1aea:	b2d2      	uxtb	r2, r2
    1aec:	4922      	ldr	r1, [pc, #136]	; (1b78 <trx_reg_read+0xf8>)
    1aee:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    1af0:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1af2:	7e1a      	ldrb	r2, [r3, #24]
    1af4:	420a      	tst	r2, r1
    1af6:	d0fc      	beq.n	1af2 <trx_reg_read+0x72>
    1af8:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    1afa:	07d2      	lsls	r2, r2, #31
    1afc:	d501      	bpl.n	1b02 <trx_reg_read+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1afe:	2200      	movs	r2, #0
    1b00:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    1b02:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1b04:	7e1a      	ldrb	r2, [r3, #24]
    1b06:	420a      	tst	r2, r1
    1b08:	d0fc      	beq.n	1b04 <trx_reg_read+0x84>
	}
	while (!spi_is_ready_to_read(&master)) {
    1b0a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1b0c:	7e1a      	ldrb	r2, [r3, #24]
    1b0e:	420a      	tst	r2, r1
    1b10:	d0fc      	beq.n	1b0c <trx_reg_read+0x8c>
    1b12:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t register_value = 0;
    1b14:	2500      	movs	r5, #0
	if (!spi_is_ready_to_read(module)) {
    1b16:	0752      	lsls	r2, r2, #29
    1b18:	d50a      	bpl.n	1b30 <trx_reg_read+0xb0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1b1a:	8b5a      	ldrh	r2, [r3, #26]
    1b1c:	0752      	lsls	r2, r2, #29
    1b1e:	d501      	bpl.n	1b24 <trx_reg_read+0xa4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1b20:	2204      	movs	r2, #4
    1b22:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1b24:	4a11      	ldr	r2, [pc, #68]	; (1b6c <trx_reg_read+0xec>)
    1b26:	7992      	ldrb	r2, [r2, #6]
    1b28:	2a01      	cmp	r2, #1
    1b2a:	d018      	beq.n	1b5e <trx_reg_read+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1b2c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    1b2e:	b2ed      	uxtb	r5, r5
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    1b30:	2200      	movs	r2, #0
    1b32:	490f      	ldr	r1, [pc, #60]	; (1b70 <trx_reg_read+0xf0>)
    1b34:	480d      	ldr	r0, [pc, #52]	; (1b6c <trx_reg_read+0xec>)
    1b36:	4b0f      	ldr	r3, [pc, #60]	; (1b74 <trx_reg_read+0xf4>)
    1b38:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1b3a:	23ff      	movs	r3, #255	; 0xff
    1b3c:	4223      	tst	r3, r4
    1b3e:	d005      	beq.n	1b4c <trx_reg_read+0xcc>
		cpu_irq_enable();
    1b40:	2201      	movs	r2, #1
    1b42:	4b09      	ldr	r3, [pc, #36]	; (1b68 <trx_reg_read+0xe8>)
    1b44:	701a      	strb	r2, [r3, #0]
    1b46:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1b4a:	b662      	cpsie	i

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    1b4c:	b2e8      	uxtb	r0, r5
}
    1b4e:	b002      	add	sp, #8
    1b50:	bd70      	pop	{r4, r5, r6, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1b52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1b54:	05d2      	lsls	r2, r2, #23
    1b56:	0dd2      	lsrs	r2, r2, #23
    1b58:	4907      	ldr	r1, [pc, #28]	; (1b78 <trx_reg_read+0xf8>)
    1b5a:	800a      	strh	r2, [r1, #0]
    1b5c:	e7c8      	b.n	1af0 <trx_reg_read+0x70>
    1b5e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    1b60:	05ed      	lsls	r5, r5, #23
    1b62:	0ded      	lsrs	r5, r5, #23
    1b64:	e7e4      	b.n	1b30 <trx_reg_read+0xb0>
    1b66:	46c0      	nop			; (mov r8, r8)
    1b68:	20000009 	.word	0x20000009
    1b6c:	20000344 	.word	0x20000344
    1b70:	20000308 	.word	0x20000308
    1b74:	000013c9 	.word	0x000013c9
    1b78:	20000300 	.word	0x20000300

00001b7c <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    1b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b7e:	b083      	sub	sp, #12
    1b80:	0006      	movs	r6, r0
    1b82:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1b84:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1b88:	425a      	negs	r2, r3
    1b8a:	4153      	adcs	r3, r2
    1b8c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1b8e:	b672      	cpsid	i
    1b90:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1b94:	2200      	movs	r2, #0
    1b96:	4b34      	ldr	r3, [pc, #208]	; (1c68 <trx_reg_write+0xec>)
    1b98:	701a      	strb	r2, [r3, #0]
	return flags;
    1b9a:	9d01      	ldr	r5, [sp, #4]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    1b9c:	4f33      	ldr	r7, [pc, #204]	; (1c6c <trx_reg_write+0xf0>)
    1b9e:	3201      	adds	r2, #1
    1ba0:	4933      	ldr	r1, [pc, #204]	; (1c70 <trx_reg_write+0xf4>)
    1ba2:	0038      	movs	r0, r7
    1ba4:	4b33      	ldr	r3, [pc, #204]	; (1c74 <trx_reg_write+0xf8>)
    1ba6:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    1ba8:	683b      	ldr	r3, [r7, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    1baa:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1bac:	7e1a      	ldrb	r2, [r3, #24]
    1bae:	420a      	tst	r2, r1
    1bb0:	d0fc      	beq.n	1bac <trx_reg_write+0x30>
    1bb2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    1bb4:	07d2      	lsls	r2, r2, #31
    1bb6:	d502      	bpl.n	1bbe <trx_reg_write+0x42>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1bb8:	22c0      	movs	r2, #192	; 0xc0
    1bba:	4316      	orrs	r6, r2
    1bbc:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    1bbe:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1bc0:	7e1a      	ldrb	r2, [r3, #24]
    1bc2:	420a      	tst	r2, r1
    1bc4:	d0fc      	beq.n	1bc0 <trx_reg_write+0x44>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    1bc6:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1bc8:	7e1a      	ldrb	r2, [r3, #24]
    1bca:	420a      	tst	r2, r1
    1bcc:	d0fc      	beq.n	1bc8 <trx_reg_write+0x4c>
    1bce:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    1bd0:	0752      	lsls	r2, r2, #29
    1bd2:	d50c      	bpl.n	1bee <trx_reg_write+0x72>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1bd4:	8b5a      	ldrh	r2, [r3, #26]
    1bd6:	0752      	lsls	r2, r2, #29
    1bd8:	d501      	bpl.n	1bde <trx_reg_write+0x62>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1bda:	2204      	movs	r2, #4
    1bdc:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1bde:	4a23      	ldr	r2, [pc, #140]	; (1c6c <trx_reg_write+0xf0>)
    1be0:	7992      	ldrb	r2, [r2, #6]
    1be2:	2a01      	cmp	r2, #1
    1be4:	d033      	beq.n	1c4e <trx_reg_write+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1be6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1be8:	b2d2      	uxtb	r2, r2
    1bea:	4923      	ldr	r1, [pc, #140]	; (1c78 <trx_reg_write+0xfc>)
    1bec:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    1bee:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1bf0:	7e1a      	ldrb	r2, [r3, #24]
    1bf2:	420a      	tst	r2, r1
    1bf4:	d0fc      	beq.n	1bf0 <trx_reg_write+0x74>
    1bf6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    1bf8:	07d2      	lsls	r2, r2, #31
    1bfa:	d500      	bpl.n	1bfe <trx_reg_write+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1bfc:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    1bfe:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1c00:	7e1a      	ldrb	r2, [r3, #24]
    1c02:	420a      	tst	r2, r1
    1c04:	d0fc      	beq.n	1c00 <trx_reg_write+0x84>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    1c06:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1c08:	7e1a      	ldrb	r2, [r3, #24]
    1c0a:	420a      	tst	r2, r1
    1c0c:	d0fc      	beq.n	1c08 <trx_reg_write+0x8c>
    1c0e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    1c10:	0752      	lsls	r2, r2, #29
    1c12:	d50c      	bpl.n	1c2e <trx_reg_write+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1c14:	8b5a      	ldrh	r2, [r3, #26]
    1c16:	0752      	lsls	r2, r2, #29
    1c18:	d501      	bpl.n	1c1e <trx_reg_write+0xa2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1c1a:	2204      	movs	r2, #4
    1c1c:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1c1e:	4a13      	ldr	r2, [pc, #76]	; (1c6c <trx_reg_write+0xf0>)
    1c20:	7992      	ldrb	r2, [r2, #6]
    1c22:	2a01      	cmp	r2, #1
    1c24:	d019      	beq.n	1c5a <trx_reg_write+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1c28:	b2db      	uxtb	r3, r3
    1c2a:	4a13      	ldr	r2, [pc, #76]	; (1c78 <trx_reg_write+0xfc>)
    1c2c:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    1c2e:	2200      	movs	r2, #0
    1c30:	490f      	ldr	r1, [pc, #60]	; (1c70 <trx_reg_write+0xf4>)
    1c32:	480e      	ldr	r0, [pc, #56]	; (1c6c <trx_reg_write+0xf0>)
    1c34:	4b0f      	ldr	r3, [pc, #60]	; (1c74 <trx_reg_write+0xf8>)
    1c36:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    1c38:	23ff      	movs	r3, #255	; 0xff
    1c3a:	422b      	tst	r3, r5
    1c3c:	d005      	beq.n	1c4a <trx_reg_write+0xce>
		cpu_irq_enable();
    1c3e:	2201      	movs	r2, #1
    1c40:	4b09      	ldr	r3, [pc, #36]	; (1c68 <trx_reg_write+0xec>)
    1c42:	701a      	strb	r2, [r3, #0]
    1c44:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1c48:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    1c4a:	b003      	add	sp, #12
    1c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1c4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c50:	05d2      	lsls	r2, r2, #23
    1c52:	0dd2      	lsrs	r2, r2, #23
    1c54:	4908      	ldr	r1, [pc, #32]	; (1c78 <trx_reg_write+0xfc>)
    1c56:	800a      	strh	r2, [r1, #0]
    1c58:	e7c9      	b.n	1bee <trx_reg_write+0x72>
    1c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1c5c:	05db      	lsls	r3, r3, #23
    1c5e:	0ddb      	lsrs	r3, r3, #23
    1c60:	4a05      	ldr	r2, [pc, #20]	; (1c78 <trx_reg_write+0xfc>)
    1c62:	8013      	strh	r3, [r2, #0]
    1c64:	e7e3      	b.n	1c2e <trx_reg_write+0xb2>
    1c66:	46c0      	nop			; (mov r8, r8)
    1c68:	20000009 	.word	0x20000009
    1c6c:	20000344 	.word	0x20000344
    1c70:	20000308 	.word	0x20000308
    1c74:	000013c9 	.word	0x000013c9
    1c78:	20000300 	.word	0x20000300

00001c7c <trx_frame_read>:
	new_value |= current_reg_value;
	trx_reg_write(reg_addr, new_value);
}

void trx_frame_read(uint8_t *data, uint8_t length)
{
    1c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c7e:	46d6      	mov	lr, sl
    1c80:	464f      	mov	r7, r9
    1c82:	4646      	mov	r6, r8
    1c84:	b5c0      	push	{r6, r7, lr}
    1c86:	b082      	sub	sp, #8
    1c88:	0005      	movs	r5, r0
    1c8a:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1c8c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1c90:	425a      	negs	r2, r3
    1c92:	4153      	adcs	r3, r2
    1c94:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1c96:	b672      	cpsid	i
    1c98:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1c9c:	2200      	movs	r2, #0
    1c9e:	4b3e      	ldr	r3, [pc, #248]	; (1d98 <trx_frame_read+0x11c>)
    1ca0:	701a      	strb	r2, [r3, #0]
	return flags;
    1ca2:	9b01      	ldr	r3, [sp, #4]
    1ca4:	4698      	mov	r8, r3
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    1ca6:	4f3d      	ldr	r7, [pc, #244]	; (1d9c <trx_frame_read+0x120>)
    1ca8:	3201      	adds	r2, #1
    1caa:	493d      	ldr	r1, [pc, #244]	; (1da0 <trx_frame_read+0x124>)
    1cac:	0038      	movs	r0, r7
    1cae:	4b3d      	ldr	r3, [pc, #244]	; (1da4 <trx_frame_read+0x128>)
    1cb0:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    1cb2:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    1cb4:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1cb6:	7e1a      	ldrb	r2, [r3, #24]
    1cb8:	420a      	tst	r2, r1
    1cba:	d0fc      	beq.n	1cb6 <trx_frame_read+0x3a>
    1cbc:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    1cbe:	07d2      	lsls	r2, r2, #31
    1cc0:	d501      	bpl.n	1cc6 <trx_frame_read+0x4a>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1cc2:	2220      	movs	r2, #32
    1cc4:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    1cc6:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1cc8:	7e1a      	ldrb	r2, [r3, #24]
    1cca:	420a      	tst	r2, r1
    1ccc:	d0fc      	beq.n	1cc8 <trx_frame_read+0x4c>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    1cce:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1cd0:	7e1a      	ldrb	r2, [r3, #24]
    1cd2:	420a      	tst	r2, r1
    1cd4:	d0fc      	beq.n	1cd0 <trx_frame_read+0x54>
    1cd6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    1cd8:	0752      	lsls	r2, r2, #29
    1cda:	d50c      	bpl.n	1cf6 <trx_frame_read+0x7a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1cdc:	8b5a      	ldrh	r2, [r3, #26]
    1cde:	0752      	lsls	r2, r2, #29
    1ce0:	d501      	bpl.n	1ce6 <trx_frame_read+0x6a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1ce2:	2204      	movs	r2, #4
    1ce4:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1ce6:	4a2d      	ldr	r2, [pc, #180]	; (1d9c <trx_frame_read+0x120>)
    1ce8:	7992      	ldrb	r2, [r2, #6]
    1cea:	2a01      	cmp	r2, #1
    1cec:	d013      	beq.n	1d16 <trx_frame_read+0x9a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1cf0:	b2db      	uxtb	r3, r3
    1cf2:	4a2d      	ldr	r2, [pc, #180]	; (1da8 <trx_frame_read+0x12c>)
    1cf4:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    1cf6:	1e63      	subs	r3, r4, #1
    1cf8:	b2db      	uxtb	r3, r3
    1cfa:	2c00      	cmp	r4, #0
    1cfc:	d036      	beq.n	1d6c <trx_frame_read+0xf0>
    1cfe:	3301      	adds	r3, #1
    1d00:	469c      	mov	ip, r3
    1d02:	44ac      	add	ip, r5
    1d04:	2720      	movs	r7, #32
	SercomSpi *const spi_module = &(module->hw->SPI);
    1d06:	4e25      	ldr	r6, [pc, #148]	; (1d9c <trx_frame_read+0x120>)
		while (!spi_is_ready_to_write(&master)) {
    1d08:	2001      	movs	r0, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1d0a:	2300      	movs	r3, #0
    1d0c:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    1d0e:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    1d10:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1d12:	46b1      	mov	r9, r6
    1d14:	e00f      	b.n	1d36 <trx_frame_read+0xba>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1d18:	05db      	lsls	r3, r3, #23
    1d1a:	0ddb      	lsrs	r3, r3, #23
    1d1c:	4a22      	ldr	r2, [pc, #136]	; (1da8 <trx_frame_read+0x12c>)
    1d1e:	8013      	strh	r3, [r2, #0]
    1d20:	e7e9      	b.n	1cf6 <trx_frame_read+0x7a>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1d22:	464a      	mov	r2, r9
    1d24:	7992      	ldrb	r2, [r2, #6]
    1d26:	2a01      	cmp	r2, #1
    1d28:	d01c      	beq.n	1d64 <trx_frame_read+0xe8>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1d2a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    1d2c:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    1d2e:	702f      	strb	r7, [r5, #0]
		data++;
    1d30:	3501      	adds	r5, #1
	while (length--) {
    1d32:	4565      	cmp	r5, ip
    1d34:	d01a      	beq.n	1d6c <trx_frame_read+0xf0>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1d36:	6833      	ldr	r3, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1d38:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    1d3a:	4202      	tst	r2, r0
    1d3c:	d0fc      	beq.n	1d38 <trx_frame_read+0xbc>
    1d3e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    1d40:	4202      	tst	r2, r0
    1d42:	d001      	beq.n	1d48 <trx_frame_read+0xcc>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1d44:	4652      	mov	r2, sl
    1d46:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1d48:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    1d4a:	4222      	tst	r2, r4
    1d4c:	d0fc      	beq.n	1d48 <trx_frame_read+0xcc>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1d4e:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    1d50:	420a      	tst	r2, r1
    1d52:	d0fc      	beq.n	1d4e <trx_frame_read+0xd2>
    1d54:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    1d56:	420a      	tst	r2, r1
    1d58:	d0e9      	beq.n	1d2e <trx_frame_read+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1d5a:	8b5a      	ldrh	r2, [r3, #26]
    1d5c:	420a      	tst	r2, r1
    1d5e:	d0e0      	beq.n	1d22 <trx_frame_read+0xa6>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1d60:	8359      	strh	r1, [r3, #26]
    1d62:	e7de      	b.n	1d22 <trx_frame_read+0xa6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1d64:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    1d66:	05ff      	lsls	r7, r7, #23
    1d68:	0dff      	lsrs	r7, r7, #23
    1d6a:	e7e0      	b.n	1d2e <trx_frame_read+0xb2>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    1d6c:	2200      	movs	r2, #0
    1d6e:	490c      	ldr	r1, [pc, #48]	; (1da0 <trx_frame_read+0x124>)
    1d70:	480a      	ldr	r0, [pc, #40]	; (1d9c <trx_frame_read+0x120>)
    1d72:	4b0c      	ldr	r3, [pc, #48]	; (1da4 <trx_frame_read+0x128>)
    1d74:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    1d76:	23ff      	movs	r3, #255	; 0xff
    1d78:	4642      	mov	r2, r8
    1d7a:	4213      	tst	r3, r2
    1d7c:	d005      	beq.n	1d8a <trx_frame_read+0x10e>
		cpu_irq_enable();
    1d7e:	2201      	movs	r2, #1
    1d80:	4b05      	ldr	r3, [pc, #20]	; (1d98 <trx_frame_read+0x11c>)
    1d82:	701a      	strb	r2, [r3, #0]
    1d84:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1d88:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    1d8a:	b002      	add	sp, #8
    1d8c:	bc1c      	pop	{r2, r3, r4}
    1d8e:	4690      	mov	r8, r2
    1d90:	4699      	mov	r9, r3
    1d92:	46a2      	mov	sl, r4
    1d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d96:	46c0      	nop			; (mov r8, r8)
    1d98:	20000009 	.word	0x20000009
    1d9c:	20000344 	.word	0x20000344
    1da0:	20000308 	.word	0x20000308
    1da4:	000013c9 	.word	0x000013c9
    1da8:	20000300 	.word	0x20000300

00001dac <trx_frame_write>:

void trx_frame_write(uint8_t *data, uint8_t length)
{
    1dac:	b5f0      	push	{r4, r5, r6, r7, lr}
    1dae:	46c6      	mov	lr, r8
    1db0:	b500      	push	{lr}
    1db2:	b082      	sub	sp, #8
    1db4:	0004      	movs	r4, r0
    1db6:	000d      	movs	r5, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1db8:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1dbc:	425a      	negs	r2, r3
    1dbe:	4153      	adcs	r3, r2
    1dc0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1dc2:	b672      	cpsid	i
    1dc4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1dc8:	2200      	movs	r2, #0
    1dca:	4b3a      	ldr	r3, [pc, #232]	; (1eb4 <trx_frame_write+0x108>)
    1dcc:	701a      	strb	r2, [r3, #0]
	return flags;
    1dce:	9b01      	ldr	r3, [sp, #4]
    1dd0:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    1dd2:	4f39      	ldr	r7, [pc, #228]	; (1eb8 <trx_frame_write+0x10c>)
    1dd4:	3201      	adds	r2, #1
    1dd6:	4939      	ldr	r1, [pc, #228]	; (1ebc <trx_frame_write+0x110>)
    1dd8:	0038      	movs	r0, r7
    1dda:	4b39      	ldr	r3, [pc, #228]	; (1ec0 <trx_frame_write+0x114>)
    1ddc:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    1dde:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    1de0:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1de2:	7e1a      	ldrb	r2, [r3, #24]
    1de4:	420a      	tst	r2, r1
    1de6:	d0fc      	beq.n	1de2 <trx_frame_write+0x36>
    1de8:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    1dea:	07d2      	lsls	r2, r2, #31
    1dec:	d501      	bpl.n	1df2 <trx_frame_write+0x46>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1dee:	2260      	movs	r2, #96	; 0x60
    1df0:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    1df2:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1df4:	7e1a      	ldrb	r2, [r3, #24]
    1df6:	420a      	tst	r2, r1
    1df8:	d0fc      	beq.n	1df4 <trx_frame_write+0x48>
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    1dfa:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1dfc:	7e1a      	ldrb	r2, [r3, #24]
    1dfe:	420a      	tst	r2, r1
    1e00:	d0fc      	beq.n	1dfc <trx_frame_write+0x50>
    1e02:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    1e04:	0752      	lsls	r2, r2, #29
    1e06:	d50c      	bpl.n	1e22 <trx_frame_write+0x76>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1e08:	8b5a      	ldrh	r2, [r3, #26]
    1e0a:	0752      	lsls	r2, r2, #29
    1e0c:	d501      	bpl.n	1e12 <trx_frame_write+0x66>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1e0e:	2204      	movs	r2, #4
    1e10:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1e12:	4a29      	ldr	r2, [pc, #164]	; (1eb8 <trx_frame_write+0x10c>)
    1e14:	7992      	ldrb	r2, [r2, #6]
    1e16:	2a01      	cmp	r2, #1
    1e18:	d00b      	beq.n	1e32 <trx_frame_write+0x86>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1e1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1e1c:	b2d2      	uxtb	r2, r2
    1e1e:	4929      	ldr	r1, [pc, #164]	; (1ec4 <trx_frame_write+0x118>)
    1e20:	800a      	strh	r2, [r1, #0]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1e22:	4a25      	ldr	r2, [pc, #148]	; (1eb8 <trx_frame_write+0x10c>)
    1e24:	7992      	ldrb	r2, [r2, #6]
    1e26:	4694      	mov	ip, r2
    1e28:	0021      	movs	r1, r4
	}
	spi_read(&master, &dummy_read);
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    1e2a:	2701      	movs	r7, #1
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    1e2c:	2002      	movs	r0, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    1e2e:	2404      	movs	r4, #4
    1e30:	e00d      	b.n	1e4e <trx_frame_write+0xa2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1e32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1e34:	05d2      	lsls	r2, r2, #23
    1e36:	0dd2      	lsrs	r2, r2, #23
    1e38:	4922      	ldr	r1, [pc, #136]	; (1ec4 <trx_frame_write+0x118>)
    1e3a:	800a      	strh	r2, [r1, #0]
    1e3c:	e7f1      	b.n	1e22 <trx_frame_write+0x76>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1e3e:	4662      	mov	r2, ip
    1e40:	2a01      	cmp	r2, #1
    1e42:	d01e      	beq.n	1e82 <trx_frame_write+0xd6>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1e44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1e46:	b2d2      	uxtb	r2, r2
    1e48:	4e1e      	ldr	r6, [pc, #120]	; (1ec4 <trx_frame_write+0x118>)
    1e4a:	8032      	strh	r2, [r6, #0]
    1e4c:	3101      	adds	r1, #1
	while (length--) {
    1e4e:	3d01      	subs	r5, #1
    1e50:	b2ed      	uxtb	r5, r5
    1e52:	2dff      	cmp	r5, #255	; 0xff
    1e54:	d01b      	beq.n	1e8e <trx_frame_write+0xe2>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1e56:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    1e58:	423a      	tst	r2, r7
    1e5a:	d0fc      	beq.n	1e56 <trx_frame_write+0xaa>
    1e5c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    1e5e:	423a      	tst	r2, r7
    1e60:	d001      	beq.n	1e66 <trx_frame_write+0xba>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1e62:	780a      	ldrb	r2, [r1, #0]
    1e64:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1e66:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    1e68:	4202      	tst	r2, r0
    1e6a:	d0fc      	beq.n	1e66 <trx_frame_write+0xba>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1e6c:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    1e6e:	4222      	tst	r2, r4
    1e70:	d0fc      	beq.n	1e6c <trx_frame_write+0xc0>
    1e72:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    1e74:	4222      	tst	r2, r4
    1e76:	d0e9      	beq.n	1e4c <trx_frame_write+0xa0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1e78:	8b5a      	ldrh	r2, [r3, #26]
    1e7a:	4222      	tst	r2, r4
    1e7c:	d0df      	beq.n	1e3e <trx_frame_write+0x92>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1e7e:	835c      	strh	r4, [r3, #26]
    1e80:	e7dd      	b.n	1e3e <trx_frame_write+0x92>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1e82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1e84:	05d2      	lsls	r2, r2, #23
    1e86:	0dd2      	lsrs	r2, r2, #23
    1e88:	4e0e      	ldr	r6, [pc, #56]	; (1ec4 <trx_frame_write+0x118>)
    1e8a:	8032      	strh	r2, [r6, #0]
    1e8c:	e7de      	b.n	1e4c <trx_frame_write+0xa0>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    1e8e:	2200      	movs	r2, #0
    1e90:	490a      	ldr	r1, [pc, #40]	; (1ebc <trx_frame_write+0x110>)
    1e92:	4809      	ldr	r0, [pc, #36]	; (1eb8 <trx_frame_write+0x10c>)
    1e94:	4b0a      	ldr	r3, [pc, #40]	; (1ec0 <trx_frame_write+0x114>)
    1e96:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    1e98:	23ff      	movs	r3, #255	; 0xff
    1e9a:	4642      	mov	r2, r8
    1e9c:	4213      	tst	r3, r2
    1e9e:	d005      	beq.n	1eac <trx_frame_write+0x100>
		cpu_irq_enable();
    1ea0:	2201      	movs	r2, #1
    1ea2:	4b04      	ldr	r3, [pc, #16]	; (1eb4 <trx_frame_write+0x108>)
    1ea4:	701a      	strb	r2, [r3, #0]
    1ea6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1eaa:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    1eac:	b002      	add	sp, #8
    1eae:	bc04      	pop	{r2}
    1eb0:	4690      	mov	r8, r2
    1eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1eb4:	20000009 	.word	0x20000009
    1eb8:	20000344 	.word	0x20000344
    1ebc:	20000308 	.word	0x20000308
    1ec0:	000013c9 	.word	0x000013c9
    1ec4:	20000300 	.word	0x20000300

00001ec8 <trx_sram_write>:
 * @param addr Start address in the SRAM for the write operation
 * @param data Pointer to the data to be written into SRAM
 * @param length Number of bytes to be written into SRAM
 */
void trx_sram_write(uint8_t addr, uint8_t *data, uint8_t length)
{
    1ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1eca:	46c6      	mov	lr, r8
    1ecc:	b500      	push	{lr}
    1ece:	b082      	sub	sp, #8
    1ed0:	0006      	movs	r6, r0
    1ed2:	000d      	movs	r5, r1
    1ed4:	0014      	movs	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1ed6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1eda:	425a      	negs	r2, r3
    1edc:	4153      	adcs	r3, r2
    1ede:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1ee0:	b672      	cpsid	i
    1ee2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1ee6:	2200      	movs	r2, #0
    1ee8:	4b4d      	ldr	r3, [pc, #308]	; (2020 <STACK_SIZE+0x20>)
    1eea:	701a      	strb	r2, [r3, #0]
	return flags;
    1eec:	9b01      	ldr	r3, [sp, #4]
    1eee:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    1ef0:	4f4c      	ldr	r7, [pc, #304]	; (2024 <STACK_SIZE+0x24>)
    1ef2:	3201      	adds	r2, #1
    1ef4:	494c      	ldr	r1, [pc, #304]	; (2028 <STACK_SIZE+0x28>)
    1ef6:	0038      	movs	r0, r7
    1ef8:	4b4c      	ldr	r3, [pc, #304]	; (202c <STACK_SIZE+0x2c>)
    1efa:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    1efc:	683b      	ldr	r3, [r7, #0]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    1efe:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1f00:	7e1a      	ldrb	r2, [r3, #24]
    1f02:	420a      	tst	r2, r1
    1f04:	d0fc      	beq.n	1f00 <trx_sram_write+0x38>
    1f06:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    1f08:	07d2      	lsls	r2, r2, #31
    1f0a:	d501      	bpl.n	1f10 <trx_sram_write+0x48>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1f0c:	2240      	movs	r2, #64	; 0x40
    1f0e:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    1f10:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1f12:	7e1a      	ldrb	r2, [r3, #24]
    1f14:	420a      	tst	r2, r1
    1f16:	d0fc      	beq.n	1f12 <trx_sram_write+0x4a>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    1f18:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1f1a:	7e1a      	ldrb	r2, [r3, #24]
    1f1c:	420a      	tst	r2, r1
    1f1e:	d0fc      	beq.n	1f1a <trx_sram_write+0x52>
    1f20:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    1f22:	0752      	lsls	r2, r2, #29
    1f24:	d50c      	bpl.n	1f40 <trx_sram_write+0x78>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1f26:	8b5a      	ldrh	r2, [r3, #26]
    1f28:	0752      	lsls	r2, r2, #29
    1f2a:	d501      	bpl.n	1f30 <trx_sram_write+0x68>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1f2c:	2204      	movs	r2, #4
    1f2e:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1f30:	4a3c      	ldr	r2, [pc, #240]	; (2024 <STACK_SIZE+0x24>)
    1f32:	7992      	ldrb	r2, [r2, #6]
    1f34:	2a01      	cmp	r2, #1
    1f36:	d02b      	beq.n	1f90 <trx_sram_write+0xc8>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1f38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1f3a:	b2d2      	uxtb	r2, r2
    1f3c:	493c      	ldr	r1, [pc, #240]	; (2030 <STACK_SIZE+0x30>)
    1f3e:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the write operation should start */
	while (!spi_is_ready_to_write(&master)) {
    1f40:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1f42:	7e1a      	ldrb	r2, [r3, #24]
    1f44:	420a      	tst	r2, r1
    1f46:	d0fc      	beq.n	1f42 <trx_sram_write+0x7a>
    1f48:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    1f4a:	07d2      	lsls	r2, r2, #31
    1f4c:	d500      	bpl.n	1f50 <trx_sram_write+0x88>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1f4e:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    1f50:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1f52:	7e1a      	ldrb	r2, [r3, #24]
    1f54:	420a      	tst	r2, r1
    1f56:	d0fc      	beq.n	1f52 <trx_sram_write+0x8a>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    1f58:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1f5a:	7e1a      	ldrb	r2, [r3, #24]
    1f5c:	420a      	tst	r2, r1
    1f5e:	d0fc      	beq.n	1f5a <trx_sram_write+0x92>
    1f60:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    1f62:	0752      	lsls	r2, r2, #29
    1f64:	d50c      	bpl.n	1f80 <trx_sram_write+0xb8>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1f66:	8b5a      	ldrh	r2, [r3, #26]
    1f68:	0752      	lsls	r2, r2, #29
    1f6a:	d501      	bpl.n	1f70 <trx_sram_write+0xa8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1f6c:	2204      	movs	r2, #4
    1f6e:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1f70:	4a2c      	ldr	r2, [pc, #176]	; (2024 <STACK_SIZE+0x24>)
    1f72:	7992      	ldrb	r2, [r2, #6]
    1f74:	2a01      	cmp	r2, #1
    1f76:	d011      	beq.n	1f9c <trx_sram_write+0xd4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1f78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1f7a:	b2d2      	uxtb	r2, r2
    1f7c:	492c      	ldr	r1, [pc, #176]	; (2030 <STACK_SIZE+0x30>)
    1f7e:	800a      	strh	r2, [r1, #0]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1f80:	4a28      	ldr	r2, [pc, #160]	; (2024 <STACK_SIZE+0x24>)
    1f82:	7992      	ldrb	r2, [r2, #6]
    1f84:	4694      	mov	ip, r2
    1f86:	0028      	movs	r0, r5
	}
	spi_read(&master, &dummy_read);

	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    1f88:	2601      	movs	r6, #1
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    1f8a:	2502      	movs	r5, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    1f8c:	2104      	movs	r1, #4
    1f8e:	e013      	b.n	1fb8 <trx_sram_write+0xf0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1f90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1f92:	05d2      	lsls	r2, r2, #23
    1f94:	0dd2      	lsrs	r2, r2, #23
    1f96:	4926      	ldr	r1, [pc, #152]	; (2030 <STACK_SIZE+0x30>)
    1f98:	800a      	strh	r2, [r1, #0]
    1f9a:	e7d1      	b.n	1f40 <trx_sram_write+0x78>
    1f9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1f9e:	05d2      	lsls	r2, r2, #23
    1fa0:	0dd2      	lsrs	r2, r2, #23
    1fa2:	4923      	ldr	r1, [pc, #140]	; (2030 <STACK_SIZE+0x30>)
    1fa4:	800a      	strh	r2, [r1, #0]
    1fa6:	e7eb      	b.n	1f80 <trx_sram_write+0xb8>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1fa8:	4662      	mov	r2, ip
    1faa:	2a01      	cmp	r2, #1
    1fac:	d01e      	beq.n	1fec <trx_sram_write+0x124>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1fae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1fb0:	b2d2      	uxtb	r2, r2
    1fb2:	4f1f      	ldr	r7, [pc, #124]	; (2030 <STACK_SIZE+0x30>)
    1fb4:	803a      	strh	r2, [r7, #0]
    1fb6:	3001      	adds	r0, #1
	while (length--) {
    1fb8:	3c01      	subs	r4, #1
    1fba:	b2e4      	uxtb	r4, r4
    1fbc:	2cff      	cmp	r4, #255	; 0xff
    1fbe:	d01b      	beq.n	1ff8 <trx_sram_write+0x130>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1fc0:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    1fc2:	4232      	tst	r2, r6
    1fc4:	d0fc      	beq.n	1fc0 <trx_sram_write+0xf8>
    1fc6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    1fc8:	4232      	tst	r2, r6
    1fca:	d001      	beq.n	1fd0 <trx_sram_write+0x108>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1fcc:	7802      	ldrb	r2, [r0, #0]
    1fce:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1fd0:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    1fd2:	422a      	tst	r2, r5
    1fd4:	d0fc      	beq.n	1fd0 <trx_sram_write+0x108>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1fd6:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    1fd8:	420a      	tst	r2, r1
    1fda:	d0fc      	beq.n	1fd6 <trx_sram_write+0x10e>
    1fdc:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    1fde:	420a      	tst	r2, r1
    1fe0:	d0e9      	beq.n	1fb6 <trx_sram_write+0xee>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1fe2:	8b5a      	ldrh	r2, [r3, #26]
    1fe4:	420a      	tst	r2, r1
    1fe6:	d0df      	beq.n	1fa8 <trx_sram_write+0xe0>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1fe8:	8359      	strh	r1, [r3, #26]
    1fea:	e7dd      	b.n	1fa8 <trx_sram_write+0xe0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1fec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1fee:	05d2      	lsls	r2, r2, #23
    1ff0:	0dd2      	lsrs	r2, r2, #23
    1ff2:	4f0f      	ldr	r7, [pc, #60]	; (2030 <STACK_SIZE+0x30>)
    1ff4:	803a      	strh	r2, [r7, #0]
    1ff6:	e7de      	b.n	1fb6 <trx_sram_write+0xee>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    1ff8:	2200      	movs	r2, #0
    1ffa:	490b      	ldr	r1, [pc, #44]	; (2028 <STACK_SIZE+0x28>)
    1ffc:	4809      	ldr	r0, [pc, #36]	; (2024 <STACK_SIZE+0x24>)
    1ffe:	4b0b      	ldr	r3, [pc, #44]	; (202c <STACK_SIZE+0x2c>)
    2000:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    2002:	23ff      	movs	r3, #255	; 0xff
    2004:	4642      	mov	r2, r8
    2006:	4213      	tst	r3, r2
    2008:	d005      	beq.n	2016 <STACK_SIZE+0x16>
		cpu_irq_enable();
    200a:	2201      	movs	r2, #1
    200c:	4b04      	ldr	r3, [pc, #16]	; (2020 <STACK_SIZE+0x20>)
    200e:	701a      	strb	r2, [r3, #0]
    2010:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2014:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    2016:	b002      	add	sp, #8
    2018:	bc04      	pop	{r2}
    201a:	4690      	mov	r8, r2
    201c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    201e:	46c0      	nop			; (mov r8, r8)
    2020:	20000009 	.word	0x20000009
    2024:	20000344 	.word	0x20000344
    2028:	20000308 	.word	0x20000308
    202c:	000013c9 	.word	0x000013c9
    2030:	20000300 	.word	0x20000300

00002034 <trx_sram_read>:
 * @param[in] addr Start address in SRAM for read operation
 * @param[out] data Pointer to the location where data stored
 * @param[in] length Number of bytes to be read from SRAM
 */
void trx_sram_read(uint8_t addr, uint8_t *data, uint8_t length)
{
    2034:	b5f0      	push	{r4, r5, r6, r7, lr}
    2036:	46d6      	mov	lr, sl
    2038:	464f      	mov	r7, r9
    203a:	4646      	mov	r6, r8
    203c:	b5c0      	push	{r6, r7, lr}
    203e:	b082      	sub	sp, #8
    2040:	0004      	movs	r4, r0
    2042:	000d      	movs	r5, r1
    2044:	0017      	movs	r7, r2
	delay_us(1); /* wap_rf4ce */
    2046:	2001      	movs	r0, #1
    2048:	4b56      	ldr	r3, [pc, #344]	; (21a4 <trx_sram_read+0x170>)
    204a:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    204c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2050:	425a      	negs	r2, r3
    2052:	4153      	adcs	r3, r2
    2054:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    2056:	b672      	cpsid	i
    2058:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    205c:	2200      	movs	r2, #0
    205e:	4b52      	ldr	r3, [pc, #328]	; (21a8 <trx_sram_read+0x174>)
    2060:	701a      	strb	r2, [r3, #0]
	return flags;
    2062:	9b01      	ldr	r3, [sp, #4]
    2064:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    2066:	4e51      	ldr	r6, [pc, #324]	; (21ac <trx_sram_read+0x178>)
    2068:	3201      	adds	r2, #1
    206a:	4951      	ldr	r1, [pc, #324]	; (21b0 <trx_sram_read+0x17c>)
    206c:	0030      	movs	r0, r6
    206e:	4b51      	ldr	r3, [pc, #324]	; (21b4 <trx_sram_read+0x180>)
    2070:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    2072:	6833      	ldr	r3, [r6, #0]

	temp = TRX_CMD_SR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    2074:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2076:	7e1a      	ldrb	r2, [r3, #24]
    2078:	420a      	tst	r2, r1
    207a:	d0fc      	beq.n	2076 <trx_sram_read+0x42>
    207c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    207e:	07d2      	lsls	r2, r2, #31
    2080:	d501      	bpl.n	2086 <trx_sram_read+0x52>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2082:	2200      	movs	r2, #0
    2084:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    2086:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2088:	7e1a      	ldrb	r2, [r3, #24]
    208a:	420a      	tst	r2, r1
    208c:	d0fc      	beq.n	2088 <trx_sram_read+0x54>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    208e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2090:	7e1a      	ldrb	r2, [r3, #24]
    2092:	420a      	tst	r2, r1
    2094:	d0fc      	beq.n	2090 <trx_sram_read+0x5c>
    2096:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    2098:	0752      	lsls	r2, r2, #29
    209a:	d50c      	bpl.n	20b6 <trx_sram_read+0x82>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    209c:	8b5a      	ldrh	r2, [r3, #26]
    209e:	0752      	lsls	r2, r2, #29
    20a0:	d501      	bpl.n	20a6 <trx_sram_read+0x72>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    20a2:	2204      	movs	r2, #4
    20a4:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    20a6:	4a41      	ldr	r2, [pc, #260]	; (21ac <trx_sram_read+0x178>)
    20a8:	7992      	ldrb	r2, [r2, #6]
    20aa:	2a01      	cmp	r2, #1
    20ac:	d033      	beq.n	2116 <trx_sram_read+0xe2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    20ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    20b0:	b2d2      	uxtb	r2, r2
    20b2:	4941      	ldr	r1, [pc, #260]	; (21b8 <trx_sram_read+0x184>)
    20b4:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the read operation should start */
	while (!spi_is_ready_to_write(&master)) {
    20b6:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    20b8:	7e1a      	ldrb	r2, [r3, #24]
    20ba:	420a      	tst	r2, r1
    20bc:	d0fc      	beq.n	20b8 <trx_sram_read+0x84>
    20be:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    20c0:	07d2      	lsls	r2, r2, #31
    20c2:	d500      	bpl.n	20c6 <trx_sram_read+0x92>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    20c4:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    20c6:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    20c8:	7e1a      	ldrb	r2, [r3, #24]
    20ca:	420a      	tst	r2, r1
    20cc:	d0fc      	beq.n	20c8 <trx_sram_read+0x94>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    20ce:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    20d0:	7e1a      	ldrb	r2, [r3, #24]
    20d2:	420a      	tst	r2, r1
    20d4:	d0fc      	beq.n	20d0 <trx_sram_read+0x9c>
    20d6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    20d8:	0752      	lsls	r2, r2, #29
    20da:	d50c      	bpl.n	20f6 <trx_sram_read+0xc2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    20dc:	8b5a      	ldrh	r2, [r3, #26]
    20de:	0752      	lsls	r2, r2, #29
    20e0:	d501      	bpl.n	20e6 <trx_sram_read+0xb2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    20e2:	2204      	movs	r2, #4
    20e4:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    20e6:	4a31      	ldr	r2, [pc, #196]	; (21ac <trx_sram_read+0x178>)
    20e8:	7992      	ldrb	r2, [r2, #6]
    20ea:	2a01      	cmp	r2, #1
    20ec:	d019      	beq.n	2122 <trx_sram_read+0xee>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    20ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    20f0:	b2db      	uxtb	r3, r3
    20f2:	4a31      	ldr	r2, [pc, #196]	; (21b8 <trx_sram_read+0x184>)
    20f4:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    20f6:	1e7b      	subs	r3, r7, #1
    20f8:	b2db      	uxtb	r3, r3
    20fa:	2f00      	cmp	r7, #0
    20fc:	d03c      	beq.n	2178 <trx_sram_read+0x144>
    20fe:	3301      	adds	r3, #1
    2100:	469c      	mov	ip, r3
    2102:	44ac      	add	ip, r5
    2104:	2700      	movs	r7, #0
	SercomSpi *const spi_module = &(module->hw->SPI);
    2106:	4e29      	ldr	r6, [pc, #164]	; (21ac <trx_sram_read+0x178>)
		while (!spi_is_ready_to_write(&master)) {
    2108:	2001      	movs	r0, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    210a:	2300      	movs	r3, #0
    210c:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    210e:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    2110:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2112:	46b1      	mov	r9, r6
    2114:	e015      	b.n	2142 <trx_sram_read+0x10e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2116:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2118:	05d2      	lsls	r2, r2, #23
    211a:	0dd2      	lsrs	r2, r2, #23
    211c:	4926      	ldr	r1, [pc, #152]	; (21b8 <trx_sram_read+0x184>)
    211e:	800a      	strh	r2, [r1, #0]
    2120:	e7c9      	b.n	20b6 <trx_sram_read+0x82>
    2122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2124:	05db      	lsls	r3, r3, #23
    2126:	0ddb      	lsrs	r3, r3, #23
    2128:	4a23      	ldr	r2, [pc, #140]	; (21b8 <trx_sram_read+0x184>)
    212a:	8013      	strh	r3, [r2, #0]
    212c:	e7e3      	b.n	20f6 <trx_sram_read+0xc2>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    212e:	464a      	mov	r2, r9
    2130:	7992      	ldrb	r2, [r2, #6]
    2132:	2a01      	cmp	r2, #1
    2134:	d01c      	beq.n	2170 <trx_sram_read+0x13c>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2136:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    2138:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    213a:	702f      	strb	r7, [r5, #0]
		data++;
    213c:	3501      	adds	r5, #1
	while (length--) {
    213e:	4565      	cmp	r5, ip
    2140:	d01a      	beq.n	2178 <trx_sram_read+0x144>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2142:	6833      	ldr	r3, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2144:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    2146:	4202      	tst	r2, r0
    2148:	d0fc      	beq.n	2144 <trx_sram_read+0x110>
    214a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    214c:	4202      	tst	r2, r0
    214e:	d001      	beq.n	2154 <trx_sram_read+0x120>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2150:	4652      	mov	r2, sl
    2152:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2154:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    2156:	4222      	tst	r2, r4
    2158:	d0fc      	beq.n	2154 <trx_sram_read+0x120>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    215a:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    215c:	420a      	tst	r2, r1
    215e:	d0fc      	beq.n	215a <trx_sram_read+0x126>
    2160:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    2162:	420a      	tst	r2, r1
    2164:	d0e9      	beq.n	213a <trx_sram_read+0x106>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2166:	8b5a      	ldrh	r2, [r3, #26]
    2168:	420a      	tst	r2, r1
    216a:	d0e0      	beq.n	212e <trx_sram_read+0xfa>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    216c:	8359      	strh	r1, [r3, #26]
    216e:	e7de      	b.n	212e <trx_sram_read+0xfa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2170:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    2172:	05ff      	lsls	r7, r7, #23
    2174:	0dff      	lsrs	r7, r7, #23
    2176:	e7e0      	b.n	213a <trx_sram_read+0x106>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    2178:	2200      	movs	r2, #0
    217a:	490d      	ldr	r1, [pc, #52]	; (21b0 <trx_sram_read+0x17c>)
    217c:	480b      	ldr	r0, [pc, #44]	; (21ac <trx_sram_read+0x178>)
    217e:	4b0d      	ldr	r3, [pc, #52]	; (21b4 <trx_sram_read+0x180>)
    2180:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    2182:	23ff      	movs	r3, #255	; 0xff
    2184:	4642      	mov	r2, r8
    2186:	4213      	tst	r3, r2
    2188:	d005      	beq.n	2196 <trx_sram_read+0x162>
		cpu_irq_enable();
    218a:	2201      	movs	r2, #1
    218c:	4b06      	ldr	r3, [pc, #24]	; (21a8 <trx_sram_read+0x174>)
    218e:	701a      	strb	r2, [r3, #0]
    2190:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2194:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    2196:	b002      	add	sp, #8
    2198:	bc1c      	pop	{r2, r3, r4}
    219a:	4690      	mov	r8, r2
    219c:	4699      	mov	r9, r3
    219e:	46a2      	mov	sl, r4
    21a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21a2:	46c0      	nop			; (mov r8, r8)
    21a4:	00000651 	.word	0x00000651
    21a8:	20000009 	.word	0x20000009
    21ac:	20000344 	.word	0x20000344
    21b0:	20000308 	.word	0x20000308
    21b4:	000013c9 	.word	0x000013c9
    21b8:	20000300 	.word	0x20000300

000021bc <trx_aes_wrrd>:
 * @param addr Start address in the SRAM for the write operation
 * @param idata Pointer to the data written/read into/from SRAM
 * @param length Number of bytes written/read into/from SRAM
 */
void trx_aes_wrrd(uint8_t addr, uint8_t *idata, uint8_t length)
{
    21bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    21be:	46d6      	mov	lr, sl
    21c0:	464f      	mov	r7, r9
    21c2:	4646      	mov	r6, r8
    21c4:	b5c0      	push	{r6, r7, lr}
    21c6:	0006      	movs	r6, r0
    21c8:	468a      	mov	sl, r1
    21ca:	0014      	movs	r4, r2
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t odata_var = 0;
#endif
	uint8_t temp;

	delay_us(1); /* wap_rf4ce */
    21cc:	2001      	movs	r0, #1
    21ce:	4b76      	ldr	r3, [pc, #472]	; (23a8 <trx_aes_wrrd+0x1ec>)
    21d0:	4798      	blx	r3

	ENTER_TRX_REGION();
    21d2:	2100      	movs	r1, #0
    21d4:	2000      	movs	r0, #0
    21d6:	4b75      	ldr	r3, [pc, #468]	; (23ac <trx_aes_wrrd+0x1f0>)
    21d8:	4798      	blx	r3
		/* wait until SPI gets available */
	}
#endif
#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    21da:	4f75      	ldr	r7, [pc, #468]	; (23b0 <trx_aes_wrrd+0x1f4>)
    21dc:	2201      	movs	r2, #1
    21de:	4975      	ldr	r1, [pc, #468]	; (23b4 <trx_aes_wrrd+0x1f8>)
    21e0:	0038      	movs	r0, r7
    21e2:	4b75      	ldr	r3, [pc, #468]	; (23b8 <trx_aes_wrrd+0x1fc>)
    21e4:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    21e6:	683b      	ldr	r3, [r7, #0]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	while (!spi_is_ready_to_write(&master)) {
    21e8:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    21ea:	7e1a      	ldrb	r2, [r3, #24]
    21ec:	420a      	tst	r2, r1
    21ee:	d0fc      	beq.n	21ea <trx_aes_wrrd+0x2e>
    21f0:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    21f2:	07d2      	lsls	r2, r2, #31
    21f4:	d501      	bpl.n	21fa <trx_aes_wrrd+0x3e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    21f6:	2240      	movs	r2, #64	; 0x40
    21f8:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    21fa:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    21fc:	7e1a      	ldrb	r2, [r3, #24]
    21fe:	420a      	tst	r2, r1
    2200:	d0fc      	beq.n	21fc <trx_aes_wrrd+0x40>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    2202:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2204:	7e1a      	ldrb	r2, [r3, #24]
    2206:	420a      	tst	r2, r1
    2208:	d0fc      	beq.n	2204 <trx_aes_wrrd+0x48>
    220a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    220c:	0752      	lsls	r2, r2, #29
    220e:	d50c      	bpl.n	222a <trx_aes_wrrd+0x6e>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2210:	8b5a      	ldrh	r2, [r3, #26]
    2212:	0752      	lsls	r2, r2, #29
    2214:	d501      	bpl.n	221a <trx_aes_wrrd+0x5e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2216:	2204      	movs	r2, #4
    2218:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    221a:	4a65      	ldr	r2, [pc, #404]	; (23b0 <trx_aes_wrrd+0x1f4>)
    221c:	7992      	ldrb	r2, [r2, #6]
    221e:	2a01      	cmp	r2, #1
    2220:	d055      	beq.n	22ce <trx_aes_wrrd+0x112>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2222:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2224:	b2d2      	uxtb	r2, r2
    2226:	4965      	ldr	r1, [pc, #404]	; (23bc <trx_aes_wrrd+0x200>)
    2228:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* write SRAM start address */
	while (!spi_is_ready_to_write(&master)) {
    222a:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    222c:	7e1a      	ldrb	r2, [r3, #24]
    222e:	420a      	tst	r2, r1
    2230:	d0fc      	beq.n	222c <trx_aes_wrrd+0x70>
    2232:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    2234:	07d2      	lsls	r2, r2, #31
    2236:	d500      	bpl.n	223a <trx_aes_wrrd+0x7e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2238:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    223a:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    223c:	7e1a      	ldrb	r2, [r3, #24]
    223e:	420a      	tst	r2, r1
    2240:	d0fc      	beq.n	223c <trx_aes_wrrd+0x80>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    2242:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2244:	7e1a      	ldrb	r2, [r3, #24]
    2246:	420a      	tst	r2, r1
    2248:	d0fc      	beq.n	2244 <trx_aes_wrrd+0x88>
    224a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    224c:	0752      	lsls	r2, r2, #29
    224e:	d50c      	bpl.n	226a <trx_aes_wrrd+0xae>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2250:	8b5a      	ldrh	r2, [r3, #26]
    2252:	0752      	lsls	r2, r2, #29
    2254:	d501      	bpl.n	225a <trx_aes_wrrd+0x9e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2256:	2204      	movs	r2, #4
    2258:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    225a:	4a55      	ldr	r2, [pc, #340]	; (23b0 <trx_aes_wrrd+0x1f4>)
    225c:	7992      	ldrb	r2, [r2, #6]
    225e:	2a01      	cmp	r2, #1
    2260:	d03b      	beq.n	22da <trx_aes_wrrd+0x11e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2262:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2264:	b2d2      	uxtb	r2, r2
    2266:	4955      	ldr	r1, [pc, #340]	; (23bc <trx_aes_wrrd+0x200>)
    2268:	800a      	strh	r2, [r1, #0]

	/* now transfer data */
	odata = idata;

	/* write data byte 0 - the obtained value in SPDR is meaningless */
	while (!spi_is_ready_to_write(&master)) {
    226a:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    226c:	7e1a      	ldrb	r2, [r3, #24]
    226e:	420a      	tst	r2, r1
    2270:	d0fc      	beq.n	226c <trx_aes_wrrd+0xb0>
    2272:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    2274:	07d2      	lsls	r2, r2, #31
    2276:	d502      	bpl.n	227e <trx_aes_wrrd+0xc2>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2278:	4652      	mov	r2, sl
    227a:	7812      	ldrb	r2, [r2, #0]
    227c:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, *idata++);
	while (!spi_is_write_complete(&master)) {
    227e:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2280:	7e1a      	ldrb	r2, [r3, #24]
    2282:	420a      	tst	r2, r1
    2284:	d0fc      	beq.n	2280 <trx_aes_wrrd+0xc4>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    2286:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2288:	7e1a      	ldrb	r2, [r3, #24]
    228a:	420a      	tst	r2, r1
    228c:	d0fc      	beq.n	2288 <trx_aes_wrrd+0xcc>
    228e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    2290:	0752      	lsls	r2, r2, #29
    2292:	d50c      	bpl.n	22ae <trx_aes_wrrd+0xf2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2294:	8b5a      	ldrh	r2, [r3, #26]
    2296:	0752      	lsls	r2, r2, #29
    2298:	d501      	bpl.n	229e <trx_aes_wrrd+0xe2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    229a:	2204      	movs	r2, #4
    229c:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    229e:	4a44      	ldr	r2, [pc, #272]	; (23b0 <trx_aes_wrrd+0x1f4>)
    22a0:	7992      	ldrb	r2, [r2, #6]
    22a2:	2a01      	cmp	r2, #1
    22a4:	d01f      	beq.n	22e6 <trx_aes_wrrd+0x12a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    22a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    22a8:	b2db      	uxtb	r3, r3
    22aa:	4a44      	ldr	r2, [pc, #272]	; (23bc <trx_aes_wrrd+0x200>)
    22ac:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    22ae:	2700      	movs	r7, #0
    22b0:	2c00      	cmp	r4, #0
    22b2:	d043      	beq.n	233c <trx_aes_wrrd+0x180>
    22b4:	4656      	mov	r6, sl
    22b6:	3c01      	subs	r4, #1
    22b8:	b2e4      	uxtb	r4, r4
    22ba:	3401      	adds	r4, #1
    22bc:	44a2      	add	sl, r4
    22be:	46d0      	mov	r8, sl
    22c0:	2700      	movs	r7, #0
	SercomSpi *const spi_module = &(module->hw->SPI);
    22c2:	4d3b      	ldr	r5, [pc, #236]	; (23b0 <trx_aes_wrrd+0x1f4>)
		while (!spi_is_ready_to_write(&master)) {
    22c4:	2001      	movs	r0, #1
		}
		spi_write(&master, *idata++);
		while (!spi_is_write_complete(&master)) {
    22c6:	2402      	movs	r4, #2
		}
		while (!spi_is_ready_to_read(&master)) {
    22c8:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    22ca:	46a9      	mov	r9, r5
    22cc:	e01b      	b.n	2306 <trx_aes_wrrd+0x14a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    22ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    22d0:	05d2      	lsls	r2, r2, #23
    22d2:	0dd2      	lsrs	r2, r2, #23
    22d4:	4939      	ldr	r1, [pc, #228]	; (23bc <trx_aes_wrrd+0x200>)
    22d6:	800a      	strh	r2, [r1, #0]
    22d8:	e7a7      	b.n	222a <trx_aes_wrrd+0x6e>
    22da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    22dc:	05d2      	lsls	r2, r2, #23
    22de:	0dd2      	lsrs	r2, r2, #23
    22e0:	4936      	ldr	r1, [pc, #216]	; (23bc <trx_aes_wrrd+0x200>)
    22e2:	800a      	strh	r2, [r1, #0]
    22e4:	e7c1      	b.n	226a <trx_aes_wrrd+0xae>
    22e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    22e8:	05db      	lsls	r3, r3, #23
    22ea:	0ddb      	lsrs	r3, r3, #23
    22ec:	4a33      	ldr	r2, [pc, #204]	; (23bc <trx_aes_wrrd+0x200>)
    22ee:	8013      	strh	r3, [r2, #0]
    22f0:	e7dd      	b.n	22ae <trx_aes_wrrd+0xf2>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    22f2:	464a      	mov	r2, r9
    22f4:	7992      	ldrb	r2, [r2, #6]
    22f6:	2a01      	cmp	r2, #1
    22f8:	d01c      	beq.n	2334 <trx_aes_wrrd+0x178>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    22fa:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    22fc:	b2ff      	uxtb	r7, r7
		}

#if SAMD || SAMR21 || SAML21 || SAMR30
		spi_read(&master, &odata_var);
		*odata++ = (uint8_t)odata_var;
    22fe:	7037      	strb	r7, [r6, #0]
    2300:	3601      	adds	r6, #1
	while (length > 0) {
    2302:	45b0      	cmp	r8, r6
    2304:	d01a      	beq.n	233c <trx_aes_wrrd+0x180>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2306:	682b      	ldr	r3, [r5, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2308:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    230a:	4202      	tst	r2, r0
    230c:	d0fc      	beq.n	2308 <trx_aes_wrrd+0x14c>
    230e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    2310:	4202      	tst	r2, r0
    2312:	d001      	beq.n	2318 <trx_aes_wrrd+0x15c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2314:	7872      	ldrb	r2, [r6, #1]
    2316:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2318:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    231a:	4222      	tst	r2, r4
    231c:	d0fc      	beq.n	2318 <trx_aes_wrrd+0x15c>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    231e:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    2320:	420a      	tst	r2, r1
    2322:	d0fc      	beq.n	231e <trx_aes_wrrd+0x162>
    2324:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    2326:	420a      	tst	r2, r1
    2328:	d0e9      	beq.n	22fe <trx_aes_wrrd+0x142>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    232a:	8b5a      	ldrh	r2, [r3, #26]
    232c:	420a      	tst	r2, r1
    232e:	d0e0      	beq.n	22f2 <trx_aes_wrrd+0x136>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2330:	8359      	strh	r1, [r3, #26]
    2332:	e7de      	b.n	22f2 <trx_aes_wrrd+0x136>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2334:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    2336:	05ff      	lsls	r7, r7, #23
    2338:	0dff      	lsrs	r7, r7, #23
    233a:	e7e0      	b.n	22fe <trx_aes_wrrd+0x142>
	SercomSpi *const spi_module = &(module->hw->SPI);
    233c:	4b1c      	ldr	r3, [pc, #112]	; (23b0 <trx_aes_wrrd+0x1f4>)
    233e:	681b      	ldr	r3, [r3, #0]
#endif
		length--;
	}

	/* To get the last data byte, write some dummy byte */
	while (!spi_is_ready_to_write(&master)) {
    2340:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2342:	7e1a      	ldrb	r2, [r3, #24]
    2344:	420a      	tst	r2, r1
    2346:	d0fc      	beq.n	2342 <trx_aes_wrrd+0x186>
    2348:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    234a:	07d2      	lsls	r2, r2, #31
    234c:	d501      	bpl.n	2352 <trx_aes_wrrd+0x196>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    234e:	2200      	movs	r2, #0
    2350:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    2352:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2354:	7e1a      	ldrb	r2, [r3, #24]
    2356:	420a      	tst	r2, r1
    2358:	d0fc      	beq.n	2354 <trx_aes_wrrd+0x198>
	}
	while (!spi_is_ready_to_read(&master)) {
    235a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    235c:	7e1a      	ldrb	r2, [r3, #24]
    235e:	420a      	tst	r2, r1
    2360:	d0fc      	beq.n	235c <trx_aes_wrrd+0x1a0>
    2362:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    2364:	0752      	lsls	r2, r2, #29
    2366:	d50a      	bpl.n	237e <trx_aes_wrrd+0x1c2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2368:	8b5a      	ldrh	r2, [r3, #26]
    236a:	0752      	lsls	r2, r2, #29
    236c:	d501      	bpl.n	2372 <trx_aes_wrrd+0x1b6>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    236e:	2204      	movs	r2, #4
    2370:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2372:	4a0f      	ldr	r2, [pc, #60]	; (23b0 <trx_aes_wrrd+0x1f4>)
    2374:	7992      	ldrb	r2, [r2, #6]
    2376:	2a01      	cmp	r2, #1
    2378:	d011      	beq.n	239e <trx_aes_wrrd+0x1e2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    237a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    237c:	b2ff      	uxtb	r7, r7
	}
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_read(&master, &odata_var);
	*odata = (uint8_t)odata_var;
    237e:	4653      	mov	r3, sl
    2380:	701f      	strb	r7, [r3, #0]
#else
	spi_read(&master, (uint16_t *)odata);
#endif

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    2382:	2200      	movs	r2, #0
    2384:	490b      	ldr	r1, [pc, #44]	; (23b4 <trx_aes_wrrd+0x1f8>)
    2386:	480a      	ldr	r0, [pc, #40]	; (23b0 <trx_aes_wrrd+0x1f4>)
    2388:	4b0b      	ldr	r3, [pc, #44]	; (23b8 <trx_aes_wrrd+0x1fc>)
    238a:	4798      	blx	r3
	spi_read_packet(AT86RFX_SPI, odata, 1);

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	LEAVE_TRX_REGION();
    238c:	2100      	movs	r1, #0
    238e:	2000      	movs	r0, #0
    2390:	4b0b      	ldr	r3, [pc, #44]	; (23c0 <trx_aes_wrrd+0x204>)
    2392:	4798      	blx	r3
}
    2394:	bc1c      	pop	{r2, r3, r4}
    2396:	4690      	mov	r8, r2
    2398:	4699      	mov	r9, r3
    239a:	46a2      	mov	sl, r4
    239c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    239e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    23a0:	05ff      	lsls	r7, r7, #23
    23a2:	0dff      	lsrs	r7, r7, #23
    23a4:	e7eb      	b.n	237e <trx_aes_wrrd+0x1c2>
    23a6:	46c0      	nop			; (mov r8, r8)
    23a8:	00000651 	.word	0x00000651
    23ac:	00000889 	.word	0x00000889
    23b0:	20000344 	.word	0x20000344
    23b4:	20000308 	.word	0x20000308
    23b8:	000013c9 	.word	0x000013c9
    23bc:	20000300 	.word	0x20000300
    23c0:	00000869 	.word	0x00000869

000023c4 <rtc_overflow_callback>:

/*! \brief RTC timer overflow callback
 *
 */
void rtc_overflow_callback(void)
{
    23c4:	b510      	push	{r4, lr}
	/* Do something on RTC overflow here */
	rtc_count_disable(&rtc_instance);	
    23c6:	4802      	ldr	r0, [pc, #8]	; (23d0 <rtc_overflow_callback+0xc>)
    23c8:	4b02      	ldr	r3, [pc, #8]	; (23d4 <rtc_overflow_callback+0x10>)
    23ca:	4798      	blx	r3
	
}
    23cc:	bd10      	pop	{r4, pc}
    23ce:	46c0      	nop			; (mov r8, r8)
    23d0:	20000354 	.word	0x20000354
    23d4:	00000155 	.word	0x00000155

000023d8 <configure_rtc_callbacks>:

/*! \brief Configure the RTC timer callback
 *
 */
void configure_rtc_callbacks(void)
{
    23d8:	b510      	push	{r4, lr}
	/*Register rtc callback*/
	rtc_count_register_callback(
    23da:	4c05      	ldr	r4, [pc, #20]	; (23f0 <configure_rtc_callbacks+0x18>)
    23dc:	220a      	movs	r2, #10
    23de:	4905      	ldr	r1, [pc, #20]	; (23f4 <configure_rtc_callbacks+0x1c>)
    23e0:	0020      	movs	r0, r4
    23e2:	4b05      	ldr	r3, [pc, #20]	; (23f8 <configure_rtc_callbacks+0x20>)
    23e4:	4798      	blx	r3
	&rtc_instance, rtc_overflow_callback,
	RTC_COUNT_CALLBACK_OVERFLOW);
	rtc_count_enable_callback(&rtc_instance, RTC_COUNT_CALLBACK_OVERFLOW);
    23e6:	210a      	movs	r1, #10
    23e8:	0020      	movs	r0, r4
    23ea:	4b04      	ldr	r3, [pc, #16]	; (23fc <configure_rtc_callbacks+0x24>)
    23ec:	4798      	blx	r3
}
    23ee:	bd10      	pop	{r4, pc}
    23f0:	20000354 	.word	0x20000354
    23f4:	000023c5 	.word	0x000023c5
    23f8:	000002fd 	.word	0x000002fd
    23fc:	00000339 	.word	0x00000339

00002400 <configure_rtc_count>:
	}

	return false;
}
void configure_rtc_count(void)
{
    2400:	b500      	push	{lr}
    2402:	b085      	sub	sp, #20
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
	config->mode                = RTC_COUNT_MODE_32BIT;
	config->clear_on_match      = false;
    2404:	2300      	movs	r3, #0
    2406:	466a      	mov	r2, sp
    2408:	70d3      	strb	r3, [r2, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	config->enable_read_sync    = true;
    240a:	2201      	movs	r2, #1
    240c:	4669      	mov	r1, sp
    240e:	710a      	strb	r2, [r1, #4]
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
		config->compare_values[i] = 0;
    2410:	9302      	str	r3, [sp, #8]
    2412:	9303      	str	r3, [sp, #12]
	struct rtc_count_config config_rtc_count;
	rtc_count_get_config_defaults(&config_rtc_count);

	config_rtc_count.prescaler           = RTC_COUNT_PRESCALER_DIV_16;
    2414:	22a0      	movs	r2, #160	; 0xa0
    2416:	00d2      	lsls	r2, r2, #3
    2418:	800a      	strh	r2, [r1, #0]
	config_rtc_count.mode                = RTC_COUNT_MODE_16BIT;
    241a:	466a      	mov	r2, sp
    241c:	708b      	strb	r3, [r1, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	/** Continuously update the counter value so no synchronization is
	 *  needed for reading. */
	config_rtc_count.continuously_update = true;
#endif
	rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
    241e:	4904      	ldr	r1, [pc, #16]	; (2430 <configure_rtc_count+0x30>)
    2420:	4804      	ldr	r0, [pc, #16]	; (2434 <configure_rtc_count+0x34>)
    2422:	4b05      	ldr	r3, [pc, #20]	; (2438 <configure_rtc_count+0x38>)
    2424:	4798      	blx	r3
	configure_rtc_callbacks();
    2426:	4b05      	ldr	r3, [pc, #20]	; (243c <configure_rtc_count+0x3c>)
    2428:	4798      	blx	r3

}
    242a:	b005      	add	sp, #20
    242c:	bd00      	pop	{pc}
    242e:	46c0      	nop			; (mov r8, r8)
    2430:	40002000 	.word	0x40002000
    2434:	20000354 	.word	0x20000354
    2438:	00000231 	.word	0x00000231
    243c:	000023d9 	.word	0x000023d9

00002440 <setSleepPeriod>:

void setSleepPeriod(uint32_t interval)
{
    2440:	b510      	push	{r4, lr}
	interval = interval * 1000;
    2442:	21fa      	movs	r1, #250	; 0xfa
    2444:	0089      	lsls	r1, r1, #2
    2446:	4341      	muls	r1, r0
	rtc_count_set_period(&rtc_instance, interval);
    2448:	b289      	uxth	r1, r1
    244a:	4c0a      	ldr	r4, [pc, #40]	; (2474 <setSleepPeriod+0x34>)
    244c:	0020      	movs	r0, r4
    244e:	4b0a      	ldr	r3, [pc, #40]	; (2478 <setSleepPeriod+0x38>)
    2450:	4798      	blx	r3
	configure_rtc_callbacks();
    2452:	4b0a      	ldr	r3, [pc, #40]	; (247c <setSleepPeriod+0x3c>)
    2454:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
    2456:	0020      	movs	r0, r4
    2458:	4b09      	ldr	r3, [pc, #36]	; (2480 <setSleepPeriod+0x40>)
    245a:	4798      	blx	r3
 * \param[in] sleep_mode  Sleep mode to configure for the next sleep operation
 */
static inline void system_set_sleepmode(
	const enum system_sleepmode sleep_mode)
{
	PM->SLEEPCFG.reg = sleep_mode;
    245c:	2205      	movs	r2, #5
    245e:	2380      	movs	r3, #128	; 0x80
    2460:	05db      	lsls	r3, r3, #23
    2462:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    2464:	001a      	movs	r2, r3
    2466:	7853      	ldrb	r3, [r2, #1]
    2468:	2b05      	cmp	r3, #5
    246a:	d1fc      	bne.n	2466 <setSleepPeriod+0x26>
  __ASM volatile ("dsb");
    246c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    2470:	bf30      	wfi

	/*put the MCU in standby mode with RTC as wakeup source*/
	system_set_sleepmode(SYSTEM_SLEEPMODE_BACKUP);
	system_sleep();
}
    2472:	bd10      	pop	{r4, pc}
    2474:	20000354 	.word	0x20000354
    2478:	000002cd 	.word	0x000002cd
    247c:	000023d9 	.word	0x000023d9
    2480:	00000121 	.word	0x00000121

00002484 <rtc_init>:

/*! \brief Initialize RTC timer
 *
 */
void rtc_init(void)
{
    2484:	b510      	push	{r4, lr}
	configure_rtc_count();
    2486:	4b01      	ldr	r3, [pc, #4]	; (248c <rtc_init+0x8>)
    2488:	4798      	blx	r3
}
    248a:	bd10      	pop	{r4, pc}
    248c:	00002401 	.word	0x00002401

00002490 <sal_aes_wrrd>:
 * @param[in]  idata  AES block to be en/decrypted
 * @param[out] odata  Result of previous operation
 *                    (odata may be NULL or equal to idata)
 */
void sal_aes_wrrd(uint8_t *idata, uint8_t *odata)
{
    2490:	b570      	push	{r4, r5, r6, lr}
    2492:	0003      	movs	r3, r0
    2494:	000d      	movs	r5, r1
	 * Write data and start the operation.
	 * AES_MODE in aes_buf[0] and aes_buf[AES_BLOCKSIZE+1] as well as
	 * AES_REQUEST in aes_buf[AES_BLOCKSIZE+1]
	 * were set before in sal_aes_setup()
	 */
	memcpy(aes_buf + 1, idata, AES_BLOCKSIZE);
    2496:	4c14      	ldr	r4, [pc, #80]	; (24e8 <sal_aes_wrrd+0x58>)
    2498:	1c60      	adds	r0, r4, #1
    249a:	2210      	movs	r2, #16
    249c:	0019      	movs	r1, r3
    249e:	4b13      	ldr	r3, [pc, #76]	; (24ec <sal_aes_wrrd+0x5c>)
    24a0:	4798      	blx	r3

	/* trx_aes_wrrd() overwrites aes_buf, the last byte must be saved.
	**/
	save_cmd = aes_buf[AES_BLOCKSIZE + 1];
    24a2:	7c64      	ldrb	r4, [r4, #17]

	if (setup_flag) {
    24a4:	4b12      	ldr	r3, [pc, #72]	; (24f0 <sal_aes_wrrd+0x60>)
    24a6:	781b      	ldrb	r3, [r3, #0]
    24a8:	2b00      	cmp	r3, #0
    24aa:	d015      	beq.n	24d8 <sal_aes_wrrd+0x48>
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    24ac:	2212      	movs	r2, #18
    24ae:	490e      	ldr	r1, [pc, #56]	; (24e8 <sal_aes_wrrd+0x58>)
    24b0:	2083      	movs	r0, #131	; 0x83
    24b2:	4b10      	ldr	r3, [pc, #64]	; (24f4 <sal_aes_wrrd+0x64>)
    24b4:	4798      	blx	r3
				AES_BLOCKSIZE + 2);

		setup_flag = false;
    24b6:	2200      	movs	r2, #0
    24b8:	4b0d      	ldr	r3, [pc, #52]	; (24f0 <sal_aes_wrrd+0x60>)
    24ba:	701a      	strb	r2, [r3, #0]
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
				aes_buf + 1, AES_BLOCKSIZE + 1);
	}

	/* Restore the result. */
	if (odata != NULL) {
    24bc:	2d00      	cmp	r5, #0
    24be:	d005      	beq.n	24cc <sal_aes_wrrd+0x3c>
		memcpy(odata, aes_buf + 1, AES_BLOCKSIZE);
    24c0:	2210      	movs	r2, #16
    24c2:	4909      	ldr	r1, [pc, #36]	; (24e8 <sal_aes_wrrd+0x58>)
    24c4:	3101      	adds	r1, #1
    24c6:	0028      	movs	r0, r5
    24c8:	4b08      	ldr	r3, [pc, #32]	; (24ec <sal_aes_wrrd+0x5c>)
    24ca:	4798      	blx	r3
	}

	aes_buf[AES_BLOCKSIZE + 1] = save_cmd;
    24cc:	4b06      	ldr	r3, [pc, #24]	; (24e8 <sal_aes_wrrd+0x58>)
    24ce:	745c      	strb	r4, [r3, #17]

	/* Wait for the operation to finish for 24 us. */
	delay_us(24);
    24d0:	2018      	movs	r0, #24
    24d2:	4b09      	ldr	r3, [pc, #36]	; (24f8 <sal_aes_wrrd+0x68>)
    24d4:	4798      	blx	r3
}
    24d6:	bd70      	pop	{r4, r5, r6, pc}
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
    24d8:	2211      	movs	r2, #17
    24da:	4903      	ldr	r1, [pc, #12]	; (24e8 <sal_aes_wrrd+0x58>)
    24dc:	3101      	adds	r1, #1
    24de:	2084      	movs	r0, #132	; 0x84
    24e0:	4b04      	ldr	r3, [pc, #16]	; (24f4 <sal_aes_wrrd+0x64>)
    24e2:	4798      	blx	r3
    24e4:	e7ea      	b.n	24bc <sal_aes_wrrd+0x2c>
    24e6:	46c0      	nop			; (mov r8, r8)
    24e8:	200000a4 	.word	0x200000a4
    24ec:	000073c5 	.word	0x000073c5
    24f0:	200000d8 	.word	0x200000d8
    24f4:	000021bd 	.word	0x000021bd
    24f8:	00000651 	.word	0x00000651

000024fc <sal_aes_setup>:
{
    24fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    24fe:	46c6      	mov	lr, r8
    2500:	b500      	push	{lr}
    2502:	b084      	sub	sp, #16
    2504:	0005      	movs	r5, r0
    2506:	000e      	movs	r6, r1
    2508:	0014      	movs	r4, r2
	if (key != NULL) {
    250a:	2800      	cmp	r0, #0
    250c:	d017      	beq.n	253e <sal_aes_setup+0x42>
		dec_initialized = false;
    250e:	2200      	movs	r2, #0
    2510:	4b3e      	ldr	r3, [pc, #248]	; (260c <sal_aes_setup+0x110>)
    2512:	701a      	strb	r2, [r3, #0]
		last_dir = AES_DIR_VOID;
    2514:	3202      	adds	r2, #2
    2516:	4b3e      	ldr	r3, [pc, #248]	; (2610 <sal_aes_setup+0x114>)
    2518:	701a      	strb	r2, [r3, #0]
		memcpy(enc_key, key, AES_KEYSIZE);
    251a:	320e      	adds	r2, #14
    251c:	0001      	movs	r1, r0
    251e:	483d      	ldr	r0, [pc, #244]	; (2614 <sal_aes_setup+0x118>)
    2520:	4b3d      	ldr	r3, [pc, #244]	; (2618 <sal_aes_setup+0x11c>)
    2522:	4698      	mov	r8, r3
    2524:	4798      	blx	r3
		aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    2526:	4f3d      	ldr	r7, [pc, #244]	; (261c <sal_aes_setup+0x120>)
    2528:	2310      	movs	r3, #16
    252a:	703b      	strb	r3, [r7, #0]
		memcpy(aes_buf + 1, key, AES_KEYSIZE);
    252c:	1c78      	adds	r0, r7, #1
    252e:	2210      	movs	r2, #16
    2530:	0029      	movs	r1, r5
    2532:	47c0      	blx	r8
		trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    2534:	2211      	movs	r2, #17
    2536:	0039      	movs	r1, r7
    2538:	2083      	movs	r0, #131	; 0x83
    253a:	4b39      	ldr	r3, [pc, #228]	; (2620 <sal_aes_setup+0x124>)
    253c:	4798      	blx	r3
	switch (dir) {
    253e:	2c00      	cmp	r4, #0
    2540:	d003      	beq.n	254a <sal_aes_setup+0x4e>
    2542:	2c01      	cmp	r4, #1
    2544:	d02f      	beq.n	25a6 <sal_aes_setup+0xaa>
		return false;
    2546:	2000      	movs	r0, #0
    2548:	e01b      	b.n	2582 <sal_aes_setup+0x86>
		if (last_dir == AES_DIR_DECRYPT) {
    254a:	4b31      	ldr	r3, [pc, #196]	; (2610 <sal_aes_setup+0x114>)
    254c:	781b      	ldrb	r3, [r3, #0]
    254e:	2b01      	cmp	r3, #1
    2550:	d01b      	beq.n	258a <sal_aes_setup+0x8e>
	last_dir = dir;
    2552:	4b2f      	ldr	r3, [pc, #188]	; (2610 <sal_aes_setup+0x114>)
    2554:	701c      	strb	r4, [r3, #0]
	switch (enc_mode) {
    2556:	2e00      	cmp	r6, #0
    2558:	d002      	beq.n	2560 <sal_aes_setup+0x64>
		return (false);
    255a:	2000      	movs	r0, #0
	switch (enc_mode) {
    255c:	2e02      	cmp	r6, #2
    255e:	d110      	bne.n	2582 <sal_aes_setup+0x86>
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    2560:	0136      	lsls	r6, r6, #4
    2562:	2370      	movs	r3, #112	; 0x70
    2564:	401e      	ands	r6, r3
				SR_MASK(SR_AES_DIR, dir);
    2566:	00e4      	lsls	r4, r4, #3
    2568:	3b68      	subs	r3, #104	; 0x68
    256a:	401c      	ands	r4, r3
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    256c:	4334      	orrs	r4, r6
    256e:	4b2b      	ldr	r3, [pc, #172]	; (261c <sal_aes_setup+0x120>)
    2570:	701c      	strb	r4, [r3, #0]
				SR_MASK(SR_AES_DIR, dir) |
    2572:	2680      	movs	r6, #128	; 0x80
    2574:	4276      	negs	r6, r6
    2576:	4334      	orrs	r4, r6
		aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(SR_AES_MODE, enc_mode) |
    2578:	745c      	strb	r4, [r3, #17]
	setup_flag = true;
    257a:	2201      	movs	r2, #1
    257c:	4b29      	ldr	r3, [pc, #164]	; (2624 <sal_aes_setup+0x128>)
    257e:	701a      	strb	r2, [r3, #0]
	return (true);
    2580:	2001      	movs	r0, #1
}
    2582:	b004      	add	sp, #16
    2584:	bc04      	pop	{r2}
    2586:	4690      	mov	r8, r2
    2588:	bdf0      	pop	{r4, r5, r6, r7, pc}
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    258a:	4d24      	ldr	r5, [pc, #144]	; (261c <sal_aes_setup+0x120>)
    258c:	330f      	adds	r3, #15
    258e:	702b      	strb	r3, [r5, #0]
			memcpy(aes_buf + 1, enc_key, AES_KEYSIZE);
    2590:	1c68      	adds	r0, r5, #1
    2592:	2210      	movs	r2, #16
    2594:	491f      	ldr	r1, [pc, #124]	; (2614 <sal_aes_setup+0x118>)
    2596:	4b20      	ldr	r3, [pc, #128]	; (2618 <sal_aes_setup+0x11c>)
    2598:	4798      	blx	r3
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    259a:	2211      	movs	r2, #17
    259c:	0029      	movs	r1, r5
    259e:	2083      	movs	r0, #131	; 0x83
    25a0:	4b1f      	ldr	r3, [pc, #124]	; (2620 <sal_aes_setup+0x124>)
    25a2:	4798      	blx	r3
    25a4:	e7d5      	b.n	2552 <sal_aes_setup+0x56>
		if (last_dir != AES_DIR_DECRYPT) {
    25a6:	4b1a      	ldr	r3, [pc, #104]	; (2610 <sal_aes_setup+0x114>)
    25a8:	781b      	ldrb	r3, [r3, #0]
    25aa:	2b01      	cmp	r3, #1
    25ac:	d0d1      	beq.n	2552 <sal_aes_setup+0x56>
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    25ae:	2210      	movs	r2, #16
    25b0:	4b1a      	ldr	r3, [pc, #104]	; (261c <sal_aes_setup+0x120>)
    25b2:	701a      	strb	r2, [r3, #0]
			if (!dec_initialized) {
    25b4:	4b15      	ldr	r3, [pc, #84]	; (260c <sal_aes_setup+0x110>)
    25b6:	781b      	ldrb	r3, [r3, #0]
    25b8:	2b00      	cmp	r3, #0
    25ba:	d00e      	beq.n	25da <sal_aes_setup+0xde>
			memcpy(aes_buf + 1, dec_key, AES_KEYSIZE);
    25bc:	4d17      	ldr	r5, [pc, #92]	; (261c <sal_aes_setup+0x120>)
    25be:	1c68      	adds	r0, r5, #1
    25c0:	2210      	movs	r2, #16
    25c2:	4919      	ldr	r1, [pc, #100]	; (2628 <sal_aes_setup+0x12c>)
    25c4:	4b14      	ldr	r3, [pc, #80]	; (2618 <sal_aes_setup+0x11c>)
    25c6:	4798      	blx	r3
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    25c8:	2211      	movs	r2, #17
    25ca:	0029      	movs	r1, r5
    25cc:	2083      	movs	r0, #131	; 0x83
    25ce:	4b14      	ldr	r3, [pc, #80]	; (2620 <sal_aes_setup+0x124>)
    25d0:	4798      	blx	r3
			dec_initialized = true;
    25d2:	4b0e      	ldr	r3, [pc, #56]	; (260c <sal_aes_setup+0x110>)
    25d4:	2201      	movs	r2, #1
    25d6:	701a      	strb	r2, [r3, #0]
    25d8:	e7bb      	b.n	2552 <sal_aes_setup+0x56>
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_ECB);
    25da:	4d10      	ldr	r5, [pc, #64]	; (261c <sal_aes_setup+0x120>)
    25dc:	702b      	strb	r3, [r5, #0]
				aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(
    25de:	3380      	adds	r3, #128	; 0x80
    25e0:	746b      	strb	r3, [r5, #17]
				setup_flag = true; /* Needed in sal_aes_wrrd().
    25e2:	3a0f      	subs	r2, #15
    25e4:	4b0f      	ldr	r3, [pc, #60]	; (2624 <sal_aes_setup+0x128>)
    25e6:	701a      	strb	r2, [r3, #0]
				sal_aes_wrrd(dummy, NULL);
    25e8:	2100      	movs	r1, #0
    25ea:	4668      	mov	r0, sp
    25ec:	4b0f      	ldr	r3, [pc, #60]	; (262c <sal_aes_setup+0x130>)
    25ee:	4798      	blx	r3
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    25f0:	2310      	movs	r3, #16
    25f2:	702b      	strb	r3, [r5, #0]
				trx_sram_write(
    25f4:	2201      	movs	r2, #1
    25f6:	0029      	movs	r1, r5
    25f8:	2083      	movs	r0, #131	; 0x83
    25fa:	4b09      	ldr	r3, [pc, #36]	; (2620 <sal_aes_setup+0x124>)
    25fc:	4798      	blx	r3
				trx_sram_read((AES_BASE_ADDR +
    25fe:	2210      	movs	r2, #16
    2600:	4909      	ldr	r1, [pc, #36]	; (2628 <sal_aes_setup+0x12c>)
    2602:	2084      	movs	r0, #132	; 0x84
    2604:	4b0a      	ldr	r3, [pc, #40]	; (2630 <sal_aes_setup+0x134>)
    2606:	4798      	blx	r3
    2608:	e7d8      	b.n	25bc <sal_aes_setup+0xc0>
    260a:	46c0      	nop			; (mov r8, r8)
    260c:	200000b6 	.word	0x200000b6
    2610:	20000008 	.word	0x20000008
    2614:	200000c8 	.word	0x200000c8
    2618:	000073c5 	.word	0x000073c5
    261c:	200000a4 	.word	0x200000a4
    2620:	00001ec9 	.word	0x00001ec9
    2624:	200000d8 	.word	0x200000d8
    2628:	200000b8 	.word	0x200000b8
    262c:	00002491 	.word	0x00002491
    2630:	00002035 	.word	0x00002035

00002634 <sal_aes_read>:
 * of a series of sal_aes_wrrd() calls.
 *
 * @param[out] data     - result of previous operation
 */
void sal_aes_read(uint8_t *data)
{
    2634:	b510      	push	{r4, lr}
    2636:	0001      	movs	r1, r0
	trx_sram_read((AES_BASE_ADDR + RG_AES_STATE_KEY_0), data,
    2638:	2210      	movs	r2, #16
    263a:	2084      	movs	r0, #132	; 0x84
    263c:	4b01      	ldr	r3, [pc, #4]	; (2644 <sal_aes_read+0x10>)
    263e:	4798      	blx	r3
			AES_BLOCKSIZE);
}
    2640:	bd10      	pop	{r4, pc}
    2642:	46c0      	nop			; (mov r8, r8)
    2644:	00002035 	.word	0x00002035

00002648 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    2648:	4b0c      	ldr	r3, [pc, #48]	; (267c <cpu_irq_enter_critical+0x34>)
    264a:	681b      	ldr	r3, [r3, #0]
    264c:	2b00      	cmp	r3, #0
    264e:	d106      	bne.n	265e <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2650:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    2654:	2b00      	cmp	r3, #0
    2656:	d007      	beq.n	2668 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2658:	2200      	movs	r2, #0
    265a:	4b09      	ldr	r3, [pc, #36]	; (2680 <cpu_irq_enter_critical+0x38>)
    265c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    265e:	4a07      	ldr	r2, [pc, #28]	; (267c <cpu_irq_enter_critical+0x34>)
    2660:	6813      	ldr	r3, [r2, #0]
    2662:	3301      	adds	r3, #1
    2664:	6013      	str	r3, [r2, #0]
}
    2666:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    2668:	b672      	cpsid	i
  __ASM volatile ("dmb");
    266a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    266e:	2200      	movs	r2, #0
    2670:	4b04      	ldr	r3, [pc, #16]	; (2684 <cpu_irq_enter_critical+0x3c>)
    2672:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2674:	3201      	adds	r2, #1
    2676:	4b02      	ldr	r3, [pc, #8]	; (2680 <cpu_irq_enter_critical+0x38>)
    2678:	701a      	strb	r2, [r3, #0]
    267a:	e7f0      	b.n	265e <cpu_irq_enter_critical+0x16>
    267c:	200000dc 	.word	0x200000dc
    2680:	200000e0 	.word	0x200000e0
    2684:	20000009 	.word	0x20000009

00002688 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2688:	4b08      	ldr	r3, [pc, #32]	; (26ac <cpu_irq_leave_critical+0x24>)
    268a:	681a      	ldr	r2, [r3, #0]
    268c:	3a01      	subs	r2, #1
    268e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2690:	681b      	ldr	r3, [r3, #0]
    2692:	2b00      	cmp	r3, #0
    2694:	d109      	bne.n	26aa <cpu_irq_leave_critical+0x22>
    2696:	4b06      	ldr	r3, [pc, #24]	; (26b0 <cpu_irq_leave_critical+0x28>)
    2698:	781b      	ldrb	r3, [r3, #0]
    269a:	2b00      	cmp	r3, #0
    269c:	d005      	beq.n	26aa <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    269e:	2201      	movs	r2, #1
    26a0:	4b04      	ldr	r3, [pc, #16]	; (26b4 <cpu_irq_leave_critical+0x2c>)
    26a2:	701a      	strb	r2, [r3, #0]
    26a4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    26a8:	b662      	cpsie	i
	}
}
    26aa:	4770      	bx	lr
    26ac:	200000dc 	.word	0x200000dc
    26b0:	200000e0 	.word	0x200000e0
    26b4:	20000009 	.word	0x20000009

000026b8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    26b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    26ba:	46ce      	mov	lr, r9
    26bc:	4647      	mov	r7, r8
    26be:	b580      	push	{r7, lr}
    26c0:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    26c2:	ac01      	add	r4, sp, #4
    26c4:	2601      	movs	r6, #1
    26c6:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    26c8:	2700      	movs	r7, #0
    26ca:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    26cc:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    26ce:	0021      	movs	r1, r4
    26d0:	200e      	movs	r0, #14
    26d2:	4d23      	ldr	r5, [pc, #140]	; (2760 <system_board_init+0xa8>)
    26d4:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    26d6:	4b23      	ldr	r3, [pc, #140]	; (2764 <system_board_init+0xac>)
    26d8:	4698      	mov	r8, r3
    26da:	2380      	movs	r3, #128	; 0x80
    26dc:	01db      	lsls	r3, r3, #7
    26de:	4642      	mov	r2, r8
    26e0:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    26e2:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_1_PIN, &pin_conf);
    26e4:	0021      	movs	r1, r4
    26e6:	2012      	movs	r0, #18
    26e8:	47a8      	blx	r5
    26ea:	2380      	movs	r3, #128	; 0x80
    26ec:	02db      	lsls	r3, r3, #11
    26ee:	4699      	mov	r9, r3
    26f0:	4643      	mov	r3, r8
    26f2:	464a      	mov	r2, r9
    26f4:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    26f6:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    26f8:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    26fa:	0021      	movs	r1, r4
    26fc:	2007      	movs	r0, #7
    26fe:	47a8      	blx	r5
	config->input_pull = PORT_PIN_PULL_UP;
    2700:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    2702:	70a7      	strb	r7, [r4, #2]
	
#ifdef CONF_BOARD_AT86RFX
	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2704:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
    2706:	0021      	movs	r1, r4
    2708:	2052      	movs	r0, #82	; 0x52
    270a:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
    270c:	0021      	movs	r1, r4
    270e:	203e      	movs	r0, #62	; 0x3e
    2710:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
    2712:	0021      	movs	r1, r4
    2714:	203f      	movs	r0, #63	; 0x3f
    2716:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
    2718:	0021      	movs	r1, r4
    271a:	202f      	movs	r0, #47	; 0x2f
    271c:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
    271e:	0021      	movs	r1, r4
    2720:	2014      	movs	r0, #20
    2722:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    2724:	4b10      	ldr	r3, [pc, #64]	; (2768 <system_board_init+0xb0>)
    2726:	464a      	mov	r2, r9
    2728:	619a      	str	r2, [r3, #24]
    272a:	4b10      	ldr	r3, [pc, #64]	; (276c <system_board_init+0xb4>)
    272c:	2280      	movs	r2, #128	; 0x80
    272e:	05d2      	lsls	r2, r2, #23
    2730:	619a      	str	r2, [r3, #24]
    2732:	2280      	movs	r2, #128	; 0x80
    2734:	0612      	lsls	r2, r2, #24
    2736:	619a      	str	r2, [r3, #24]
    2738:	2680      	movs	r6, #128	; 0x80
    273a:	0236      	lsls	r6, r6, #8
    273c:	619e      	str	r6, [r3, #24]
    273e:	2380      	movs	r3, #128	; 0x80
    2740:	035b      	lsls	r3, r3, #13
    2742:	4642      	mov	r2, r8
    2744:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(AT86RFX_SPI_SCK, true);
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    2746:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
    2748:	0021      	movs	r1, r4
    274a:	2053      	movs	r0, #83	; 0x53
    274c:	47a8      	blx	r5
	
	/* SAMR30 Antenna Diversity Configuration */

	MCLK->APBCMASK.reg |= (1<<MCLK_APBCMASK_RFCTRL_Pos);
    274e:	4b08      	ldr	r3, [pc, #32]	; (2770 <system_board_init+0xb8>)
    2750:	69da      	ldr	r2, [r3, #28]
    2752:	4316      	orrs	r6, r2
    2754:	61de      	str	r6, [r3, #28]
// 	
// 	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
// 	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
// 	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
 #endif	
}
    2756:	b003      	add	sp, #12
    2758:	bc0c      	pop	{r2, r3}
    275a:	4690      	mov	r8, r2
    275c:	4699      	mov	r9, r3
    275e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2760:	00002775 	.word	0x00002775
    2764:	40002800 	.word	0x40002800
    2768:	40002900 	.word	0x40002900
    276c:	40002880 	.word	0x40002880
    2770:	40000400 	.word	0x40000400

00002774 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    2774:	b500      	push	{lr}
    2776:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2778:	ab01      	add	r3, sp, #4
    277a:	2280      	movs	r2, #128	; 0x80
    277c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    277e:	780a      	ldrb	r2, [r1, #0]
    2780:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    2782:	784a      	ldrb	r2, [r1, #1]
    2784:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    2786:	788a      	ldrb	r2, [r1, #2]
    2788:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    278a:	0019      	movs	r1, r3
    278c:	4b01      	ldr	r3, [pc, #4]	; (2794 <port_pin_set_config+0x20>)
    278e:	4798      	blx	r3
}
    2790:	b003      	add	sp, #12
    2792:	bd00      	pop	{pc}
    2794:	0000386d 	.word	0x0000386d

00002798 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    2798:	b5f0      	push	{r4, r5, r6, r7, lr}
    279a:	46de      	mov	lr, fp
    279c:	4657      	mov	r7, sl
    279e:	464e      	mov	r6, r9
    27a0:	4645      	mov	r5, r8
    27a2:	b5e0      	push	{r5, r6, r7, lr}
    27a4:	b087      	sub	sp, #28
    27a6:	4680      	mov	r8, r0
    27a8:	9104      	str	r1, [sp, #16]
    27aa:	0016      	movs	r6, r2
    27ac:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    27ae:	2200      	movs	r2, #0
    27b0:	2300      	movs	r3, #0
    27b2:	2100      	movs	r1, #0
    27b4:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    27b6:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    27b8:	2001      	movs	r0, #1
    27ba:	0021      	movs	r1, r4
    27bc:	9600      	str	r6, [sp, #0]
    27be:	9701      	str	r7, [sp, #4]
    27c0:	465c      	mov	r4, fp
    27c2:	9403      	str	r4, [sp, #12]
    27c4:	4644      	mov	r4, r8
    27c6:	9405      	str	r4, [sp, #20]
    27c8:	e013      	b.n	27f2 <long_division+0x5a>
    27ca:	2420      	movs	r4, #32
    27cc:	1a64      	subs	r4, r4, r1
    27ce:	0005      	movs	r5, r0
    27d0:	40e5      	lsrs	r5, r4
    27d2:	46a8      	mov	r8, r5
    27d4:	e014      	b.n	2800 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    27d6:	9c00      	ldr	r4, [sp, #0]
    27d8:	9d01      	ldr	r5, [sp, #4]
    27da:	1b12      	subs	r2, r2, r4
    27dc:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    27de:	465c      	mov	r4, fp
    27e0:	464d      	mov	r5, r9
    27e2:	432c      	orrs	r4, r5
    27e4:	46a3      	mov	fp, r4
    27e6:	9c03      	ldr	r4, [sp, #12]
    27e8:	4645      	mov	r5, r8
    27ea:	432c      	orrs	r4, r5
    27ec:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    27ee:	3901      	subs	r1, #1
    27f0:	d325      	bcc.n	283e <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    27f2:	2420      	movs	r4, #32
    27f4:	4264      	negs	r4, r4
    27f6:	190c      	adds	r4, r1, r4
    27f8:	d4e7      	bmi.n	27ca <long_division+0x32>
    27fa:	0005      	movs	r5, r0
    27fc:	40a5      	lsls	r5, r4
    27fe:	46a8      	mov	r8, r5
    2800:	0004      	movs	r4, r0
    2802:	408c      	lsls	r4, r1
    2804:	46a1      	mov	r9, r4
		r = r << 1;
    2806:	1892      	adds	r2, r2, r2
    2808:	415b      	adcs	r3, r3
    280a:	0014      	movs	r4, r2
    280c:	001d      	movs	r5, r3
		if (n & bit_shift) {
    280e:	9e05      	ldr	r6, [sp, #20]
    2810:	464f      	mov	r7, r9
    2812:	403e      	ands	r6, r7
    2814:	46b4      	mov	ip, r6
    2816:	9e04      	ldr	r6, [sp, #16]
    2818:	4647      	mov	r7, r8
    281a:	403e      	ands	r6, r7
    281c:	46b2      	mov	sl, r6
    281e:	4666      	mov	r6, ip
    2820:	4657      	mov	r7, sl
    2822:	433e      	orrs	r6, r7
    2824:	d003      	beq.n	282e <long_division+0x96>
			r |= 0x01;
    2826:	0006      	movs	r6, r0
    2828:	4326      	orrs	r6, r4
    282a:	0032      	movs	r2, r6
    282c:	002b      	movs	r3, r5
		if (r >= d) {
    282e:	9c00      	ldr	r4, [sp, #0]
    2830:	9d01      	ldr	r5, [sp, #4]
    2832:	429d      	cmp	r5, r3
    2834:	d8db      	bhi.n	27ee <long_division+0x56>
    2836:	d1ce      	bne.n	27d6 <long_division+0x3e>
    2838:	4294      	cmp	r4, r2
    283a:	d8d8      	bhi.n	27ee <long_division+0x56>
    283c:	e7cb      	b.n	27d6 <long_division+0x3e>
    283e:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    2840:	4658      	mov	r0, fp
    2842:	0019      	movs	r1, r3
    2844:	b007      	add	sp, #28
    2846:	bc3c      	pop	{r2, r3, r4, r5}
    2848:	4690      	mov	r8, r2
    284a:	4699      	mov	r9, r3
    284c:	46a2      	mov	sl, r4
    284e:	46ab      	mov	fp, r5
    2850:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002852 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    2852:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    2854:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2856:	2340      	movs	r3, #64	; 0x40
    2858:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    285a:	4281      	cmp	r1, r0
    285c:	d202      	bcs.n	2864 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    285e:	0018      	movs	r0, r3
    2860:	bd10      	pop	{r4, pc}
		baud_calculated++;
    2862:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    2864:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    2866:	1c63      	adds	r3, r4, #1
    2868:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    286a:	4288      	cmp	r0, r1
    286c:	d9f9      	bls.n	2862 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    286e:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    2870:	2cff      	cmp	r4, #255	; 0xff
    2872:	d8f4      	bhi.n	285e <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    2874:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    2876:	2300      	movs	r3, #0
    2878:	e7f1      	b.n	285e <_sercom_get_sync_baud_val+0xc>
	...

0000287c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    287c:	b5f0      	push	{r4, r5, r6, r7, lr}
    287e:	b083      	sub	sp, #12
    2880:	000f      	movs	r7, r1
    2882:	0016      	movs	r6, r2
    2884:	aa08      	add	r2, sp, #32
    2886:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    2888:	0004      	movs	r4, r0
    288a:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    288c:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    288e:	42bc      	cmp	r4, r7
    2890:	d902      	bls.n	2898 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    2892:	0010      	movs	r0, r2
    2894:	b003      	add	sp, #12
    2896:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    2898:	2b00      	cmp	r3, #0
    289a:	d114      	bne.n	28c6 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    289c:	0002      	movs	r2, r0
    289e:	0008      	movs	r0, r1
    28a0:	2100      	movs	r1, #0
    28a2:	4c19      	ldr	r4, [pc, #100]	; (2908 <_sercom_get_async_baud_val+0x8c>)
    28a4:	47a0      	blx	r4
    28a6:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    28a8:	003a      	movs	r2, r7
    28aa:	2300      	movs	r3, #0
    28ac:	2000      	movs	r0, #0
    28ae:	4c17      	ldr	r4, [pc, #92]	; (290c <_sercom_get_async_baud_val+0x90>)
    28b0:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    28b2:	2200      	movs	r2, #0
    28b4:	2301      	movs	r3, #1
    28b6:	1a12      	subs	r2, r2, r0
    28b8:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    28ba:	0c12      	lsrs	r2, r2, #16
    28bc:	041b      	lsls	r3, r3, #16
    28be:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    28c0:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    28c2:	2200      	movs	r2, #0
    28c4:	e7e5      	b.n	2892 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    28c6:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    28c8:	2b01      	cmp	r3, #1
    28ca:	d1f9      	bne.n	28c0 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    28cc:	000a      	movs	r2, r1
    28ce:	2300      	movs	r3, #0
    28d0:	2100      	movs	r1, #0
    28d2:	4c0d      	ldr	r4, [pc, #52]	; (2908 <_sercom_get_async_baud_val+0x8c>)
    28d4:	47a0      	blx	r4
    28d6:	0002      	movs	r2, r0
    28d8:	000b      	movs	r3, r1
    28da:	9200      	str	r2, [sp, #0]
    28dc:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    28de:	0038      	movs	r0, r7
    28e0:	2100      	movs	r1, #0
    28e2:	4c0a      	ldr	r4, [pc, #40]	; (290c <_sercom_get_async_baud_val+0x90>)
    28e4:	47a0      	blx	r4
    28e6:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    28e8:	2380      	movs	r3, #128	; 0x80
    28ea:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    28ec:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    28ee:	4298      	cmp	r0, r3
    28f0:	d8cf      	bhi.n	2892 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    28f2:	0f79      	lsrs	r1, r7, #29
    28f4:	00f8      	lsls	r0, r7, #3
    28f6:	9a00      	ldr	r2, [sp, #0]
    28f8:	9b01      	ldr	r3, [sp, #4]
    28fa:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    28fc:	00ea      	lsls	r2, r5, #3
    28fe:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    2900:	b2d2      	uxtb	r2, r2
    2902:	0352      	lsls	r2, r2, #13
    2904:	432a      	orrs	r2, r5
    2906:	e7db      	b.n	28c0 <_sercom_get_async_baud_val+0x44>
    2908:	00005725 	.word	0x00005725
    290c:	00002799 	.word	0x00002799

00002910 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    2910:	b510      	push	{r4, lr}
    2912:	b082      	sub	sp, #8
    2914:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    2916:	4b0e      	ldr	r3, [pc, #56]	; (2950 <sercom_set_gclk_generator+0x40>)
    2918:	781b      	ldrb	r3, [r3, #0]
    291a:	2b00      	cmp	r3, #0
    291c:	d007      	beq.n	292e <sercom_set_gclk_generator+0x1e>
    291e:	2900      	cmp	r1, #0
    2920:	d105      	bne.n	292e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    2922:	4b0b      	ldr	r3, [pc, #44]	; (2950 <sercom_set_gclk_generator+0x40>)
    2924:	785b      	ldrb	r3, [r3, #1]
    2926:	4283      	cmp	r3, r0
    2928:	d010      	beq.n	294c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    292a:	201d      	movs	r0, #29
    292c:	e00c      	b.n	2948 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    292e:	a901      	add	r1, sp, #4
    2930:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    2932:	2011      	movs	r0, #17
    2934:	4b07      	ldr	r3, [pc, #28]	; (2954 <sercom_set_gclk_generator+0x44>)
    2936:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    2938:	2011      	movs	r0, #17
    293a:	4b07      	ldr	r3, [pc, #28]	; (2958 <sercom_set_gclk_generator+0x48>)
    293c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    293e:	4b04      	ldr	r3, [pc, #16]	; (2950 <sercom_set_gclk_generator+0x40>)
    2940:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    2942:	2201      	movs	r2, #1
    2944:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    2946:	2000      	movs	r0, #0
}
    2948:	b002      	add	sp, #8
    294a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    294c:	2000      	movs	r0, #0
    294e:	e7fb      	b.n	2948 <sercom_set_gclk_generator+0x38>
    2950:	200000e4 	.word	0x200000e4
    2954:	00003771 	.word	0x00003771
    2958:	00003701 	.word	0x00003701

0000295c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    295c:	4b2c      	ldr	r3, [pc, #176]	; (2a10 <_sercom_get_default_pad+0xb4>)
    295e:	4298      	cmp	r0, r3
    2960:	d026      	beq.n	29b0 <_sercom_get_default_pad+0x54>
    2962:	d90a      	bls.n	297a <_sercom_get_default_pad+0x1e>
    2964:	4b2b      	ldr	r3, [pc, #172]	; (2a14 <_sercom_get_default_pad+0xb8>)
    2966:	4298      	cmp	r0, r3
    2968:	d03a      	beq.n	29e0 <_sercom_get_default_pad+0x84>
    296a:	4b2b      	ldr	r3, [pc, #172]	; (2a18 <_sercom_get_default_pad+0xbc>)
    296c:	4298      	cmp	r0, r3
    296e:	d041      	beq.n	29f4 <_sercom_get_default_pad+0x98>
    2970:	4b2a      	ldr	r3, [pc, #168]	; (2a1c <_sercom_get_default_pad+0xc0>)
    2972:	4298      	cmp	r0, r3
    2974:	d024      	beq.n	29c0 <_sercom_get_default_pad+0x64>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    2976:	2000      	movs	r0, #0
}
    2978:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    297a:	2384      	movs	r3, #132	; 0x84
    297c:	05db      	lsls	r3, r3, #23
    297e:	4298      	cmp	r0, r3
    2980:	d008      	beq.n	2994 <_sercom_get_default_pad+0x38>
    2982:	4b27      	ldr	r3, [pc, #156]	; (2a20 <_sercom_get_default_pad+0xc4>)
    2984:	4298      	cmp	r0, r3
    2986:	d1f6      	bne.n	2976 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2988:	2902      	cmp	r1, #2
    298a:	d00d      	beq.n	29a8 <_sercom_get_default_pad+0x4c>
    298c:	2903      	cmp	r1, #3
    298e:	d00d      	beq.n	29ac <_sercom_get_default_pad+0x50>
    2990:	2000      	movs	r0, #0
    2992:	e7f1      	b.n	2978 <_sercom_get_default_pad+0x1c>
    2994:	2902      	cmp	r1, #2
    2996:	d003      	beq.n	29a0 <_sercom_get_default_pad+0x44>
    2998:	2903      	cmp	r1, #3
    299a:	d003      	beq.n	29a4 <_sercom_get_default_pad+0x48>
    299c:	2000      	movs	r0, #0
    299e:	e7eb      	b.n	2978 <_sercom_get_default_pad+0x1c>
    29a0:	4820      	ldr	r0, [pc, #128]	; (2a24 <_sercom_get_default_pad+0xc8>)
    29a2:	e7e9      	b.n	2978 <_sercom_get_default_pad+0x1c>
    29a4:	4820      	ldr	r0, [pc, #128]	; (2a28 <_sercom_get_default_pad+0xcc>)
    29a6:	e7e7      	b.n	2978 <_sercom_get_default_pad+0x1c>
    29a8:	4820      	ldr	r0, [pc, #128]	; (2a2c <_sercom_get_default_pad+0xd0>)
    29aa:	e7e5      	b.n	2978 <_sercom_get_default_pad+0x1c>
    29ac:	4820      	ldr	r0, [pc, #128]	; (2a30 <_sercom_get_default_pad+0xd4>)
    29ae:	e7e3      	b.n	2978 <_sercom_get_default_pad+0x1c>
    29b0:	2901      	cmp	r1, #1
    29b2:	d003      	beq.n	29bc <_sercom_get_default_pad+0x60>
    29b4:	2900      	cmp	r1, #0
    29b6:	d027      	beq.n	2a08 <_sercom_get_default_pad+0xac>
    29b8:	2000      	movs	r0, #0
    29ba:	e7dd      	b.n	2978 <_sercom_get_default_pad+0x1c>
    29bc:	481d      	ldr	r0, [pc, #116]	; (2a34 <_sercom_get_default_pad+0xd8>)
    29be:	e7db      	b.n	2978 <_sercom_get_default_pad+0x1c>
    29c0:	2901      	cmp	r1, #1
    29c2:	d007      	beq.n	29d4 <_sercom_get_default_pad+0x78>
    29c4:	2900      	cmp	r1, #0
    29c6:	d021      	beq.n	2a0c <_sercom_get_default_pad+0xb0>
    29c8:	2902      	cmp	r1, #2
    29ca:	d005      	beq.n	29d8 <_sercom_get_default_pad+0x7c>
    29cc:	2903      	cmp	r1, #3
    29ce:	d005      	beq.n	29dc <_sercom_get_default_pad+0x80>
	return 0;
    29d0:	2000      	movs	r0, #0
    29d2:	e7d1      	b.n	2978 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    29d4:	4818      	ldr	r0, [pc, #96]	; (2a38 <_sercom_get_default_pad+0xdc>)
    29d6:	e7cf      	b.n	2978 <_sercom_get_default_pad+0x1c>
    29d8:	4818      	ldr	r0, [pc, #96]	; (2a3c <_sercom_get_default_pad+0xe0>)
    29da:	e7cd      	b.n	2978 <_sercom_get_default_pad+0x1c>
    29dc:	4818      	ldr	r0, [pc, #96]	; (2a40 <_sercom_get_default_pad+0xe4>)
    29de:	e7cb      	b.n	2978 <_sercom_get_default_pad+0x1c>
    29e0:	2902      	cmp	r1, #2
    29e2:	d003      	beq.n	29ec <_sercom_get_default_pad+0x90>
    29e4:	2903      	cmp	r1, #3
    29e6:	d003      	beq.n	29f0 <_sercom_get_default_pad+0x94>
    29e8:	2000      	movs	r0, #0
    29ea:	e7c5      	b.n	2978 <_sercom_get_default_pad+0x1c>
    29ec:	4815      	ldr	r0, [pc, #84]	; (2a44 <_sercom_get_default_pad+0xe8>)
    29ee:	e7c3      	b.n	2978 <_sercom_get_default_pad+0x1c>
    29f0:	4815      	ldr	r0, [pc, #84]	; (2a48 <_sercom_get_default_pad+0xec>)
    29f2:	e7c1      	b.n	2978 <_sercom_get_default_pad+0x1c>
    29f4:	2902      	cmp	r1, #2
    29f6:	d003      	beq.n	2a00 <_sercom_get_default_pad+0xa4>
    29f8:	2903      	cmp	r1, #3
    29fa:	d003      	beq.n	2a04 <_sercom_get_default_pad+0xa8>
    29fc:	2000      	movs	r0, #0
    29fe:	e7bb      	b.n	2978 <_sercom_get_default_pad+0x1c>
    2a00:	4812      	ldr	r0, [pc, #72]	; (2a4c <_sercom_get_default_pad+0xf0>)
    2a02:	e7b9      	b.n	2978 <_sercom_get_default_pad+0x1c>
    2a04:	4812      	ldr	r0, [pc, #72]	; (2a50 <_sercom_get_default_pad+0xf4>)
    2a06:	e7b7      	b.n	2978 <_sercom_get_default_pad+0x1c>
    2a08:	4812      	ldr	r0, [pc, #72]	; (2a54 <_sercom_get_default_pad+0xf8>)
    2a0a:	e7b5      	b.n	2978 <_sercom_get_default_pad+0x1c>
    2a0c:	4812      	ldr	r0, [pc, #72]	; (2a58 <_sercom_get_default_pad+0xfc>)
    2a0e:	e7b3      	b.n	2978 <_sercom_get_default_pad+0x1c>
    2a10:	42000800 	.word	0x42000800
    2a14:	42001000 	.word	0x42001000
    2a18:	43000400 	.word	0x43000400
    2a1c:	42000c00 	.word	0x42000c00
    2a20:	42000400 	.word	0x42000400
    2a24:	00060003 	.word	0x00060003
    2a28:	00070003 	.word	0x00070003
    2a2c:	001e0003 	.word	0x001e0003
    2a30:	001f0003 	.word	0x001f0003
    2a34:	00090003 	.word	0x00090003
    2a38:	00110003 	.word	0x00110003
    2a3c:	00120003 	.word	0x00120003
    2a40:	00130003 	.word	0x00130003
    2a44:	000e0003 	.word	0x000e0003
    2a48:	000f0003 	.word	0x000f0003
    2a4c:	00180003 	.word	0x00180003
    2a50:	00190003 	.word	0x00190003
    2a54:	00080003 	.word	0x00080003
    2a58:	00100003 	.word	0x00100003

00002a5c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    2a5c:	b530      	push	{r4, r5, lr}
    2a5e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    2a60:	4b0b      	ldr	r3, [pc, #44]	; (2a90 <_sercom_get_sercom_inst_index+0x34>)
    2a62:	466a      	mov	r2, sp
    2a64:	cb32      	ldmia	r3!, {r1, r4, r5}
    2a66:	c232      	stmia	r2!, {r1, r4, r5}
    2a68:	cb32      	ldmia	r3!, {r1, r4, r5}
    2a6a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2a6c:	9b00      	ldr	r3, [sp, #0]
    2a6e:	4283      	cmp	r3, r0
    2a70:	d00b      	beq.n	2a8a <_sercom_get_sercom_inst_index+0x2e>
    2a72:	2301      	movs	r3, #1
    2a74:	009a      	lsls	r2, r3, #2
    2a76:	4669      	mov	r1, sp
    2a78:	5852      	ldr	r2, [r2, r1]
    2a7a:	4282      	cmp	r2, r0
    2a7c:	d006      	beq.n	2a8c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2a7e:	3301      	adds	r3, #1
    2a80:	2b06      	cmp	r3, #6
    2a82:	d1f7      	bne.n	2a74 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    2a84:	2000      	movs	r0, #0
}
    2a86:	b007      	add	sp, #28
    2a88:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2a8a:	2300      	movs	r3, #0
			return i;
    2a8c:	b2d8      	uxtb	r0, r3
    2a8e:	e7fa      	b.n	2a86 <_sercom_get_sercom_inst_index+0x2a>
    2a90:	000084ec 	.word	0x000084ec

00002a94 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2a94:	4770      	bx	lr
	...

00002a98 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    2a98:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    2a9a:	4b0a      	ldr	r3, [pc, #40]	; (2ac4 <_sercom_set_handler+0x2c>)
    2a9c:	781b      	ldrb	r3, [r3, #0]
    2a9e:	2b00      	cmp	r3, #0
    2aa0:	d10c      	bne.n	2abc <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2aa2:	4f09      	ldr	r7, [pc, #36]	; (2ac8 <_sercom_set_handler+0x30>)
    2aa4:	4e09      	ldr	r6, [pc, #36]	; (2acc <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    2aa6:	4d0a      	ldr	r5, [pc, #40]	; (2ad0 <_sercom_set_handler+0x38>)
    2aa8:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2aaa:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    2aac:	195a      	adds	r2, r3, r5
    2aae:	6014      	str	r4, [r2, #0]
    2ab0:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2ab2:	2b18      	cmp	r3, #24
    2ab4:	d1f9      	bne.n	2aaa <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    2ab6:	2201      	movs	r2, #1
    2ab8:	4b02      	ldr	r3, [pc, #8]	; (2ac4 <_sercom_set_handler+0x2c>)
    2aba:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2abc:	0080      	lsls	r0, r0, #2
    2abe:	4b02      	ldr	r3, [pc, #8]	; (2ac8 <_sercom_set_handler+0x30>)
    2ac0:	50c1      	str	r1, [r0, r3]
}
    2ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ac4:	200000e6 	.word	0x200000e6
    2ac8:	200000e8 	.word	0x200000e8
    2acc:	00002a95 	.word	0x00002a95
    2ad0:	200003a4 	.word	0x200003a4

00002ad4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2ad4:	b500      	push	{lr}
    2ad6:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    2ad8:	2308      	movs	r3, #8
    2ada:	466a      	mov	r2, sp
    2adc:	7013      	strb	r3, [r2, #0]
    2ade:	3301      	adds	r3, #1
    2ae0:	7053      	strb	r3, [r2, #1]
    2ae2:	3301      	adds	r3, #1
    2ae4:	7093      	strb	r3, [r2, #2]
    2ae6:	3301      	adds	r3, #1
    2ae8:	70d3      	strb	r3, [r2, #3]
    2aea:	3301      	adds	r3, #1
    2aec:	7113      	strb	r3, [r2, #4]
    2aee:	3301      	adds	r3, #1
    2af0:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    2af2:	4b03      	ldr	r3, [pc, #12]	; (2b00 <_sercom_get_interrupt_vector+0x2c>)
    2af4:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    2af6:	466b      	mov	r3, sp
    2af8:	5618      	ldrsb	r0, [r3, r0]
}
    2afa:	b003      	add	sp, #12
    2afc:	bd00      	pop	{pc}
    2afe:	46c0      	nop			; (mov r8, r8)
    2b00:	00002a5d 	.word	0x00002a5d

00002b04 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    2b04:	b510      	push	{r4, lr}
    2b06:	4b02      	ldr	r3, [pc, #8]	; (2b10 <SERCOM0_Handler+0xc>)
    2b08:	681b      	ldr	r3, [r3, #0]
    2b0a:	2000      	movs	r0, #0
    2b0c:	4798      	blx	r3
    2b0e:	bd10      	pop	{r4, pc}
    2b10:	200000e8 	.word	0x200000e8

00002b14 <SERCOM1_Handler>:
    2b14:	b510      	push	{r4, lr}
    2b16:	4b02      	ldr	r3, [pc, #8]	; (2b20 <SERCOM1_Handler+0xc>)
    2b18:	685b      	ldr	r3, [r3, #4]
    2b1a:	2001      	movs	r0, #1
    2b1c:	4798      	blx	r3
    2b1e:	bd10      	pop	{r4, pc}
    2b20:	200000e8 	.word	0x200000e8

00002b24 <SERCOM2_Handler>:
    2b24:	b510      	push	{r4, lr}
    2b26:	4b02      	ldr	r3, [pc, #8]	; (2b30 <SERCOM2_Handler+0xc>)
    2b28:	689b      	ldr	r3, [r3, #8]
    2b2a:	2002      	movs	r0, #2
    2b2c:	4798      	blx	r3
    2b2e:	bd10      	pop	{r4, pc}
    2b30:	200000e8 	.word	0x200000e8

00002b34 <SERCOM3_Handler>:
    2b34:	b510      	push	{r4, lr}
    2b36:	4b02      	ldr	r3, [pc, #8]	; (2b40 <SERCOM3_Handler+0xc>)
    2b38:	68db      	ldr	r3, [r3, #12]
    2b3a:	2003      	movs	r0, #3
    2b3c:	4798      	blx	r3
    2b3e:	bd10      	pop	{r4, pc}
    2b40:	200000e8 	.word	0x200000e8

00002b44 <SERCOM4_Handler>:
    2b44:	b510      	push	{r4, lr}
    2b46:	4b02      	ldr	r3, [pc, #8]	; (2b50 <SERCOM4_Handler+0xc>)
    2b48:	691b      	ldr	r3, [r3, #16]
    2b4a:	2004      	movs	r0, #4
    2b4c:	4798      	blx	r3
    2b4e:	bd10      	pop	{r4, pc}
    2b50:	200000e8 	.word	0x200000e8

00002b54 <SERCOM5_Handler>:
    2b54:	b510      	push	{r4, lr}
    2b56:	4b02      	ldr	r3, [pc, #8]	; (2b60 <SERCOM5_Handler+0xc>)
    2b58:	695b      	ldr	r3, [r3, #20]
    2b5a:	2005      	movs	r0, #5
    2b5c:	4798      	blx	r3
    2b5e:	bd10      	pop	{r4, pc}
    2b60:	200000e8 	.word	0x200000e8

00002b64 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    2b64:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b66:	46de      	mov	lr, fp
    2b68:	4657      	mov	r7, sl
    2b6a:	464e      	mov	r6, r9
    2b6c:	4645      	mov	r5, r8
    2b6e:	b5e0      	push	{r5, r6, r7, lr}
    2b70:	b091      	sub	sp, #68	; 0x44
    2b72:	0005      	movs	r5, r0
    2b74:	000c      	movs	r4, r1
    2b76:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    2b78:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2b7a:	0008      	movs	r0, r1
    2b7c:	4bc4      	ldr	r3, [pc, #784]	; (2e90 <usart_init+0x32c>)
    2b7e:	4798      	blx	r3
    2b80:	0002      	movs	r2, r0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	if (sercom_index == 5) {
    2b82:	2805      	cmp	r0, #5
    2b84:	d00d      	beq.n	2ba2 <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2b86:	0007      	movs	r7, r0
    2b88:	3712      	adds	r7, #18
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    2b8a:	0003      	movs	r3, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2b8c:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    2b8e:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2b90:	07c9      	lsls	r1, r1, #31
    2b92:	d509      	bpl.n	2ba8 <usart_init+0x44>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    2b94:	b011      	add	sp, #68	; 0x44
    2b96:	bc3c      	pop	{r2, r3, r4, r5}
    2b98:	4690      	mov	r8, r2
    2b9a:	4699      	mov	r9, r3
    2b9c:	46a2      	mov	sl, r4
    2b9e:	46ab      	mov	fp, r5
    2ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    2ba2:	2718      	movs	r7, #24
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    2ba4:	2301      	movs	r3, #1
    2ba6:	e7f1      	b.n	2b8c <usart_init+0x28>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2ba8:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
    2baa:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2bac:	0789      	lsls	r1, r1, #30
    2bae:	d4f1      	bmi.n	2b94 <usart_init+0x30>
	if (sercom_index == 5) {
    2bb0:	2a05      	cmp	r2, #5
    2bb2:	d047      	beq.n	2c44 <usart_init+0xe0>
			MCLK->APBCMASK.reg |= mask;
    2bb4:	49b7      	ldr	r1, [pc, #732]	; (2e94 <usart_init+0x330>)
    2bb6:	69c8      	ldr	r0, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    2bb8:	2201      	movs	r2, #1
    2bba:	409a      	lsls	r2, r3
    2bbc:	0013      	movs	r3, r2
    2bbe:	4303      	orrs	r3, r0
    2bc0:	61cb      	str	r3, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    2bc2:	a90f      	add	r1, sp, #60	; 0x3c
    2bc4:	232d      	movs	r3, #45	; 0x2d
    2bc6:	4698      	mov	r8, r3
    2bc8:	5cf3      	ldrb	r3, [r6, r3]
    2bca:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2bcc:	b2ff      	uxtb	r7, r7
    2bce:	0038      	movs	r0, r7
    2bd0:	4bb1      	ldr	r3, [pc, #708]	; (2e98 <usart_init+0x334>)
    2bd2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2bd4:	0038      	movs	r0, r7
    2bd6:	4bb1      	ldr	r3, [pc, #708]	; (2e9c <usart_init+0x338>)
    2bd8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2bda:	4643      	mov	r3, r8
    2bdc:	5cf0      	ldrb	r0, [r6, r3]
    2bde:	2100      	movs	r1, #0
    2be0:	4baf      	ldr	r3, [pc, #700]	; (2ea0 <usart_init+0x33c>)
    2be2:	4798      	blx	r3
	module->character_size = config->character_size;
    2be4:	7af3      	ldrb	r3, [r6, #11]
    2be6:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    2be8:	2324      	movs	r3, #36	; 0x24
    2bea:	5cf3      	ldrb	r3, [r6, r3]
    2bec:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    2bee:	2325      	movs	r3, #37	; 0x25
    2bf0:	5cf3      	ldrb	r3, [r6, r3]
    2bf2:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    2bf4:	7ef3      	ldrb	r3, [r6, #27]
    2bf6:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    2bf8:	7f33      	ldrb	r3, [r6, #28]
    2bfa:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2bfc:	682b      	ldr	r3, [r5, #0]
    2bfe:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2c00:	0018      	movs	r0, r3
    2c02:	4ba3      	ldr	r3, [pc, #652]	; (2e90 <usart_init+0x32c>)
    2c04:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2c06:	3012      	adds	r0, #18
	uint16_t baud  = 0;
    2c08:	2200      	movs	r2, #0
    2c0a:	230e      	movs	r3, #14
    2c0c:	a906      	add	r1, sp, #24
    2c0e:	468c      	mov	ip, r1
    2c10:	4463      	add	r3, ip
    2c12:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    2c14:	8a32      	ldrh	r2, [r6, #16]
    2c16:	9202      	str	r2, [sp, #8]
    2c18:	2380      	movs	r3, #128	; 0x80
    2c1a:	01db      	lsls	r3, r3, #7
    2c1c:	429a      	cmp	r2, r3
    2c1e:	d100      	bne.n	2c22 <usart_init+0xbe>
    2c20:	e0a9      	b.n	2d76 <usart_init+0x212>
    2c22:	d917      	bls.n	2c54 <usart_init+0xf0>
    2c24:	23c0      	movs	r3, #192	; 0xc0
    2c26:	01db      	lsls	r3, r3, #7
    2c28:	9a02      	ldr	r2, [sp, #8]
    2c2a:	429a      	cmp	r2, r3
    2c2c:	d100      	bne.n	2c30 <usart_init+0xcc>
    2c2e:	e09d      	b.n	2d6c <usart_init+0x208>
    2c30:	2380      	movs	r3, #128	; 0x80
    2c32:	021b      	lsls	r3, r3, #8
    2c34:	429a      	cmp	r2, r3
    2c36:	d000      	beq.n	2c3a <usart_init+0xd6>
    2c38:	e125      	b.n	2e86 <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    2c3a:	2303      	movs	r3, #3
    2c3c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2c3e:	2300      	movs	r3, #0
    2c40:	9307      	str	r3, [sp, #28]
    2c42:	e010      	b.n	2c66 <usart_init+0x102>
			MCLK->APBDMASK.reg |= mask;
    2c44:	4993      	ldr	r1, [pc, #588]	; (2e94 <usart_init+0x330>)
    2c46:	6a08      	ldr	r0, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    2c48:	3a04      	subs	r2, #4
    2c4a:	409a      	lsls	r2, r3
    2c4c:	0013      	movs	r3, r2
    2c4e:	4303      	orrs	r3, r0
    2c50:	620b      	str	r3, [r1, #32]
    2c52:	e7b6      	b.n	2bc2 <usart_init+0x5e>
	switch (config->sample_rate) {
    2c54:	2380      	movs	r3, #128	; 0x80
    2c56:	019b      	lsls	r3, r3, #6
    2c58:	429a      	cmp	r2, r3
    2c5a:	d000      	beq.n	2c5e <usart_init+0xfa>
    2c5c:	e113      	b.n	2e86 <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2c5e:	2310      	movs	r3, #16
    2c60:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2c62:	3b0f      	subs	r3, #15
    2c64:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    2c66:	6833      	ldr	r3, [r6, #0]
    2c68:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2c6a:	68f3      	ldr	r3, [r6, #12]
    2c6c:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    2c6e:	6973      	ldr	r3, [r6, #20]
    2c70:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2c72:	7e33      	ldrb	r3, [r6, #24]
    2c74:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2c76:	2326      	movs	r3, #38	; 0x26
    2c78:	5cf3      	ldrb	r3, [r6, r3]
    2c7a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2c7c:	6873      	ldr	r3, [r6, #4]
    2c7e:	4699      	mov	r9, r3
	switch (transfer_mode)
    2c80:	2b00      	cmp	r3, #0
    2c82:	d100      	bne.n	2c86 <usart_init+0x122>
    2c84:	e09f      	b.n	2dc6 <usart_init+0x262>
    2c86:	2380      	movs	r3, #128	; 0x80
    2c88:	055b      	lsls	r3, r3, #21
    2c8a:	4599      	cmp	r9, r3
    2c8c:	d104      	bne.n	2c98 <usart_init+0x134>
			if (!config->use_external_clock) {
    2c8e:	2327      	movs	r3, #39	; 0x27
    2c90:	5cf3      	ldrb	r3, [r6, r3]
    2c92:	2b00      	cmp	r3, #0
    2c94:	d100      	bne.n	2c98 <usart_init+0x134>
    2c96:	e084      	b.n	2da2 <usart_init+0x23e>
	if(config->encoding_format_enable) {
    2c98:	7e73      	ldrb	r3, [r6, #25]
    2c9a:	2b00      	cmp	r3, #0
    2c9c:	d002      	beq.n	2ca4 <usart_init+0x140>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    2c9e:	7eb3      	ldrb	r3, [r6, #26]
    2ca0:	4642      	mov	r2, r8
    2ca2:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2ca4:	682a      	ldr	r2, [r5, #0]
    2ca6:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2ca8:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2caa:	2b00      	cmp	r3, #0
    2cac:	d1fc      	bne.n	2ca8 <usart_init+0x144>
	usart_hw->BAUD.reg = baud;
    2cae:	330e      	adds	r3, #14
    2cb0:	aa06      	add	r2, sp, #24
    2cb2:	4694      	mov	ip, r2
    2cb4:	4463      	add	r3, ip
    2cb6:	881b      	ldrh	r3, [r3, #0]
    2cb8:	4642      	mov	r2, r8
    2cba:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    2cbc:	9b05      	ldr	r3, [sp, #20]
    2cbe:	9a03      	ldr	r2, [sp, #12]
    2cc0:	4313      	orrs	r3, r2
    2cc2:	9a04      	ldr	r2, [sp, #16]
    2cc4:	4313      	orrs	r3, r2
    2cc6:	464a      	mov	r2, r9
    2cc8:	4313      	orrs	r3, r2
    2cca:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2ccc:	465b      	mov	r3, fp
    2cce:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    2cd0:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2cd2:	4653      	mov	r3, sl
    2cd4:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    2cd6:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    2cd8:	2327      	movs	r3, #39	; 0x27
    2cda:	5cf3      	ldrb	r3, [r6, r3]
    2cdc:	2b00      	cmp	r3, #0
    2cde:	d101      	bne.n	2ce4 <usart_init+0x180>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2ce0:	3304      	adds	r3, #4
    2ce2:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2ce4:	7e73      	ldrb	r3, [r6, #25]
    2ce6:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2ce8:	7f32      	ldrb	r2, [r6, #28]
    2cea:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2cec:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2cee:	7f72      	ldrb	r2, [r6, #29]
    2cf0:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2cf2:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2cf4:	2224      	movs	r2, #36	; 0x24
    2cf6:	5cb2      	ldrb	r2, [r6, r2]
    2cf8:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2cfa:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2cfc:	2225      	movs	r2, #37	; 0x25
    2cfe:	5cb2      	ldrb	r2, [r6, r2]
    2d00:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2d02:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    2d04:	7ab1      	ldrb	r1, [r6, #10]
    2d06:	7af2      	ldrb	r2, [r6, #11]
    2d08:	4311      	orrs	r1, r2
    2d0a:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    2d0c:	8933      	ldrh	r3, [r6, #8]
    2d0e:	2bff      	cmp	r3, #255	; 0xff
    2d10:	d07d      	beq.n	2e0e <usart_init+0x2aa>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    2d12:	2280      	movs	r2, #128	; 0x80
    2d14:	0452      	lsls	r2, r2, #17
    2d16:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    2d18:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    2d1a:	232c      	movs	r3, #44	; 0x2c
    2d1c:	5cf3      	ldrb	r3, [r6, r3]
    2d1e:	2b00      	cmp	r3, #0
    2d20:	d103      	bne.n	2d2a <usart_init+0x1c6>
    2d22:	4b60      	ldr	r3, [pc, #384]	; (2ea4 <usart_init+0x340>)
    2d24:	789b      	ldrb	r3, [r3, #2]
    2d26:	079b      	lsls	r3, r3, #30
    2d28:	d501      	bpl.n	2d2e <usart_init+0x1ca>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    2d2a:	2380      	movs	r3, #128	; 0x80
    2d2c:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    2d2e:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2d30:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2d32:	2b00      	cmp	r3, #0
    2d34:	d1fc      	bne.n	2d30 <usart_init+0x1cc>
	usart_hw->CTRLB.reg = ctrlb;
    2d36:	4643      	mov	r3, r8
    2d38:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2d3a:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2d3c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2d3e:	2b00      	cmp	r3, #0
    2d40:	d1fc      	bne.n	2d3c <usart_init+0x1d8>
	usart_hw->CTRLA.reg = ctrla;
    2d42:	4643      	mov	r3, r8
    2d44:	601f      	str	r7, [r3, #0]
    2d46:	ab0e      	add	r3, sp, #56	; 0x38
    2d48:	2280      	movs	r2, #128	; 0x80
    2d4a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2d4c:	2200      	movs	r2, #0
    2d4e:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    2d50:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2d52:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    2d54:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2d56:	930a      	str	r3, [sp, #40]	; 0x28
    2d58:	6b73      	ldr	r3, [r6, #52]	; 0x34
    2d5a:	930b      	str	r3, [sp, #44]	; 0x2c
    2d5c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    2d5e:	930c      	str	r3, [sp, #48]	; 0x30
    2d60:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    2d62:	9302      	str	r3, [sp, #8]
    2d64:	930d      	str	r3, [sp, #52]	; 0x34
    2d66:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2d68:	ae0a      	add	r6, sp, #40	; 0x28
    2d6a:	e05e      	b.n	2e2a <usart_init+0x2c6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2d6c:	2308      	movs	r3, #8
    2d6e:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2d70:	3b07      	subs	r3, #7
    2d72:	9307      	str	r3, [sp, #28]
    2d74:	e777      	b.n	2c66 <usart_init+0x102>
	ctrla = (uint32_t)config->data_order |
    2d76:	6833      	ldr	r3, [r6, #0]
    2d78:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2d7a:	68f3      	ldr	r3, [r6, #12]
    2d7c:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    2d7e:	6973      	ldr	r3, [r6, #20]
    2d80:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2d82:	7e33      	ldrb	r3, [r6, #24]
    2d84:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2d86:	2326      	movs	r3, #38	; 0x26
    2d88:	5cf3      	ldrb	r3, [r6, r3]
    2d8a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2d8c:	6873      	ldr	r3, [r6, #4]
    2d8e:	4699      	mov	r9, r3
	switch (transfer_mode)
    2d90:	2b00      	cmp	r3, #0
    2d92:	d014      	beq.n	2dbe <usart_init+0x25a>
    2d94:	2380      	movs	r3, #128	; 0x80
    2d96:	055b      	lsls	r3, r3, #21
    2d98:	4599      	cmp	r9, r3
    2d9a:	d100      	bne.n	2d9e <usart_init+0x23a>
    2d9c:	e777      	b.n	2c8e <usart_init+0x12a>
	enum status_code status_code = STATUS_OK;
    2d9e:	2000      	movs	r0, #0
    2da0:	e020      	b.n	2de4 <usart_init+0x280>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2da2:	6a33      	ldr	r3, [r6, #32]
    2da4:	001f      	movs	r7, r3
    2da6:	b2c0      	uxtb	r0, r0
    2da8:	4b3f      	ldr	r3, [pc, #252]	; (2ea8 <usart_init+0x344>)
    2daa:	4798      	blx	r3
    2dac:	0001      	movs	r1, r0
    2dae:	220e      	movs	r2, #14
    2db0:	ab06      	add	r3, sp, #24
    2db2:	469c      	mov	ip, r3
    2db4:	4462      	add	r2, ip
    2db6:	0038      	movs	r0, r7
    2db8:	4b3c      	ldr	r3, [pc, #240]	; (2eac <usart_init+0x348>)
    2dba:	4798      	blx	r3
    2dbc:	e012      	b.n	2de4 <usart_init+0x280>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2dbe:	2308      	movs	r3, #8
    2dc0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2dc2:	2300      	movs	r3, #0
    2dc4:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    2dc6:	2327      	movs	r3, #39	; 0x27
    2dc8:	5cf3      	ldrb	r3, [r6, r3]
    2dca:	2b00      	cmp	r3, #0
    2dcc:	d00e      	beq.n	2dec <usart_init+0x288>
				status_code =
    2dce:	9b06      	ldr	r3, [sp, #24]
    2dd0:	9300      	str	r3, [sp, #0]
    2dd2:	9b07      	ldr	r3, [sp, #28]
    2dd4:	220e      	movs	r2, #14
    2dd6:	a906      	add	r1, sp, #24
    2dd8:	468c      	mov	ip, r1
    2dda:	4462      	add	r2, ip
    2ddc:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    2dde:	6a30      	ldr	r0, [r6, #32]
    2de0:	4f33      	ldr	r7, [pc, #204]	; (2eb0 <usart_init+0x34c>)
    2de2:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    2de4:	2800      	cmp	r0, #0
    2de6:	d000      	beq.n	2dea <usart_init+0x286>
    2de8:	e6d4      	b.n	2b94 <usart_init+0x30>
    2dea:	e755      	b.n	2c98 <usart_init+0x134>
						_sercom_get_async_baud_val(config->baudrate,
    2dec:	6a33      	ldr	r3, [r6, #32]
    2dee:	001f      	movs	r7, r3
    2df0:	b2c0      	uxtb	r0, r0
    2df2:	4b2d      	ldr	r3, [pc, #180]	; (2ea8 <usart_init+0x344>)
    2df4:	4798      	blx	r3
    2df6:	0001      	movs	r1, r0
				status_code =
    2df8:	9b06      	ldr	r3, [sp, #24]
    2dfa:	9300      	str	r3, [sp, #0]
    2dfc:	9b07      	ldr	r3, [sp, #28]
    2dfe:	220e      	movs	r2, #14
    2e00:	a806      	add	r0, sp, #24
    2e02:	4684      	mov	ip, r0
    2e04:	4462      	add	r2, ip
    2e06:	0038      	movs	r0, r7
    2e08:	4f29      	ldr	r7, [pc, #164]	; (2eb0 <usart_init+0x34c>)
    2e0a:	47b8      	blx	r7
    2e0c:	e7ea      	b.n	2de4 <usart_init+0x280>
		if(config->lin_slave_enable) {
    2e0e:	7ef3      	ldrb	r3, [r6, #27]
    2e10:	2b00      	cmp	r3, #0
    2e12:	d082      	beq.n	2d1a <usart_init+0x1b6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2e14:	2380      	movs	r3, #128	; 0x80
    2e16:	04db      	lsls	r3, r3, #19
    2e18:	431f      	orrs	r7, r3
    2e1a:	e77e      	b.n	2d1a <usart_init+0x1b6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2e1c:	0020      	movs	r0, r4
    2e1e:	4b25      	ldr	r3, [pc, #148]	; (2eb4 <usart_init+0x350>)
    2e20:	4798      	blx	r3
    2e22:	e007      	b.n	2e34 <usart_init+0x2d0>
    2e24:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    2e26:	2f04      	cmp	r7, #4
    2e28:	d00d      	beq.n	2e46 <usart_init+0x2e2>
    2e2a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2e2c:	00bb      	lsls	r3, r7, #2
    2e2e:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    2e30:	2800      	cmp	r0, #0
    2e32:	d0f3      	beq.n	2e1c <usart_init+0x2b8>
		if (current_pinmux != PINMUX_UNUSED) {
    2e34:	1c43      	adds	r3, r0, #1
    2e36:	d0f5      	beq.n	2e24 <usart_init+0x2c0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2e38:	a90e      	add	r1, sp, #56	; 0x38
    2e3a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2e3c:	0c00      	lsrs	r0, r0, #16
    2e3e:	b2c0      	uxtb	r0, r0
    2e40:	4b1d      	ldr	r3, [pc, #116]	; (2eb8 <usart_init+0x354>)
    2e42:	4798      	blx	r3
    2e44:	e7ee      	b.n	2e24 <usart_init+0x2c0>
		module->callback[i]            = NULL;
    2e46:	2300      	movs	r3, #0
    2e48:	60eb      	str	r3, [r5, #12]
    2e4a:	612b      	str	r3, [r5, #16]
    2e4c:	616b      	str	r3, [r5, #20]
    2e4e:	61ab      	str	r3, [r5, #24]
    2e50:	61eb      	str	r3, [r5, #28]
    2e52:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2e54:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    2e56:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    2e58:	2200      	movs	r2, #0
    2e5a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2e5c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    2e5e:	3330      	adds	r3, #48	; 0x30
    2e60:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    2e62:	3301      	adds	r3, #1
    2e64:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    2e66:	3301      	adds	r3, #1
    2e68:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    2e6a:	3301      	adds	r3, #1
    2e6c:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2e6e:	6828      	ldr	r0, [r5, #0]
    2e70:	4b07      	ldr	r3, [pc, #28]	; (2e90 <usart_init+0x32c>)
    2e72:	4798      	blx	r3
    2e74:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2e76:	4911      	ldr	r1, [pc, #68]	; (2ebc <usart_init+0x358>)
    2e78:	4b11      	ldr	r3, [pc, #68]	; (2ec0 <usart_init+0x35c>)
    2e7a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2e7c:	00a4      	lsls	r4, r4, #2
    2e7e:	4b11      	ldr	r3, [pc, #68]	; (2ec4 <usart_init+0x360>)
    2e80:	50e5      	str	r5, [r4, r3]
	return status_code;
    2e82:	2000      	movs	r0, #0
    2e84:	e686      	b.n	2b94 <usart_init+0x30>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2e86:	2310      	movs	r3, #16
    2e88:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2e8a:	2300      	movs	r3, #0
    2e8c:	9307      	str	r3, [sp, #28]
    2e8e:	e6ea      	b.n	2c66 <usart_init+0x102>
    2e90:	00002a5d 	.word	0x00002a5d
    2e94:	40000400 	.word	0x40000400
    2e98:	00003771 	.word	0x00003771
    2e9c:	00003701 	.word	0x00003701
    2ea0:	00002911 	.word	0x00002911
    2ea4:	41002000 	.word	0x41002000
    2ea8:	00003795 	.word	0x00003795
    2eac:	00002853 	.word	0x00002853
    2eb0:	0000287d 	.word	0x0000287d
    2eb4:	0000295d 	.word	0x0000295d
    2eb8:	0000386d 	.word	0x0000386d
    2ebc:	00002ffd 	.word	0x00002ffd
    2ec0:	00002a99 	.word	0x00002a99
    2ec4:	200003a4 	.word	0x200003a4

00002ec8 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2ec8:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    2eca:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    2ecc:	2a00      	cmp	r2, #0
    2ece:	d101      	bne.n	2ed4 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    2ed0:	0018      	movs	r0, r3
    2ed2:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    2ed4:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    2ed6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2ed8:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    2eda:	2a00      	cmp	r2, #0
    2edc:	d1f8      	bne.n	2ed0 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2ede:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    2ee0:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2ee2:	2a00      	cmp	r2, #0
    2ee4:	d1fc      	bne.n	2ee0 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    2ee6:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    2ee8:	2102      	movs	r1, #2
    2eea:	7e1a      	ldrb	r2, [r3, #24]
    2eec:	420a      	tst	r2, r1
    2eee:	d0fc      	beq.n	2eea <usart_write_wait+0x22>
	return STATUS_OK;
    2ef0:	2300      	movs	r3, #0
    2ef2:	e7ed      	b.n	2ed0 <usart_write_wait+0x8>

00002ef4 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2ef4:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    2ef6:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    2ef8:	2a00      	cmp	r2, #0
    2efa:	d101      	bne.n	2f00 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    2efc:	0018      	movs	r0, r3
    2efe:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    2f00:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    2f02:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2f04:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    2f06:	2a00      	cmp	r2, #0
    2f08:	d1f8      	bne.n	2efc <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2f0a:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    2f0c:	7e10      	ldrb	r0, [r2, #24]
    2f0e:	0740      	lsls	r0, r0, #29
    2f10:	d5f4      	bpl.n	2efc <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    2f12:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2f14:	2b00      	cmp	r3, #0
    2f16:	d1fc      	bne.n	2f12 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2f18:	8b53      	ldrh	r3, [r2, #26]
    2f1a:	b2db      	uxtb	r3, r3
	if (error_code) {
    2f1c:	0698      	lsls	r0, r3, #26
    2f1e:	d01d      	beq.n	2f5c <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    2f20:	0798      	lsls	r0, r3, #30
    2f22:	d503      	bpl.n	2f2c <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2f24:	2302      	movs	r3, #2
    2f26:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    2f28:	3318      	adds	r3, #24
    2f2a:	e7e7      	b.n	2efc <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2f2c:	0758      	lsls	r0, r3, #29
    2f2e:	d503      	bpl.n	2f38 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2f30:	2304      	movs	r3, #4
    2f32:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    2f34:	331a      	adds	r3, #26
    2f36:	e7e1      	b.n	2efc <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2f38:	07d8      	lsls	r0, r3, #31
    2f3a:	d503      	bpl.n	2f44 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2f3c:	2301      	movs	r3, #1
    2f3e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    2f40:	3312      	adds	r3, #18
    2f42:	e7db      	b.n	2efc <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    2f44:	06d8      	lsls	r0, r3, #27
    2f46:	d503      	bpl.n	2f50 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2f48:	2310      	movs	r3, #16
    2f4a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    2f4c:	3332      	adds	r3, #50	; 0x32
    2f4e:	e7d5      	b.n	2efc <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2f50:	069b      	lsls	r3, r3, #26
    2f52:	d503      	bpl.n	2f5c <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2f54:	2320      	movs	r3, #32
    2f56:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    2f58:	3321      	adds	r3, #33	; 0x21
    2f5a:	e7cf      	b.n	2efc <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    2f5c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    2f5e:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    2f60:	2300      	movs	r3, #0
    2f62:	e7cb      	b.n	2efc <usart_read_wait+0x8>

00002f64 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2f64:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f66:	46d6      	mov	lr, sl
    2f68:	b500      	push	{lr}
    2f6a:	b084      	sub	sp, #16
    2f6c:	0004      	movs	r4, r0
    2f6e:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2f70:	2017      	movs	r0, #23
	if (length == 0) {
    2f72:	2a00      	cmp	r2, #0
    2f74:	d103      	bne.n	2f7e <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    2f76:	b004      	add	sp, #16
    2f78:	bc04      	pop	{r2}
    2f7a:	4692      	mov	sl, r2
    2f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    2f7e:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    2f80:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    2f82:	2b00      	cmp	r3, #0
    2f84:	d0f7      	beq.n	2f76 <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2f86:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    2f88:	3a01      	subs	r2, #1
    2f8a:	b293      	uxth	r3, r2
    2f8c:	469a      	mov	sl, r3
    2f8e:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    2f90:	2704      	movs	r7, #4
    2f92:	e019      	b.n	2fc8 <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    2f94:	2300      	movs	r3, #0
    2f96:	aa02      	add	r2, sp, #8
    2f98:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    2f9a:	1d91      	adds	r1, r2, #6
    2f9c:	0020      	movs	r0, r4
    2f9e:	4b15      	ldr	r3, [pc, #84]	; (2ff4 <usart_read_buffer_wait+0x90>)
    2fa0:	4798      	blx	r3
		if (retval != STATUS_OK) {
    2fa2:	2800      	cmp	r0, #0
    2fa4:	d1e7      	bne.n	2f76 <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    2fa6:	1c69      	adds	r1, r5, #1
    2fa8:	b289      	uxth	r1, r1
    2faa:	ab02      	add	r3, sp, #8
    2fac:	88db      	ldrh	r3, [r3, #6]
    2fae:	9a01      	ldr	r2, [sp, #4]
    2fb0:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2fb2:	7962      	ldrb	r2, [r4, #5]
    2fb4:	2a01      	cmp	r2, #1
    2fb6:	d014      	beq.n	2fe2 <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    2fb8:	000d      	movs	r5, r1
	while (length--) {
    2fba:	4653      	mov	r3, sl
    2fbc:	3b01      	subs	r3, #1
    2fbe:	b29b      	uxth	r3, r3
    2fc0:	469a      	mov	sl, r3
    2fc2:	4b0d      	ldr	r3, [pc, #52]	; (2ff8 <usart_read_buffer_wait+0x94>)
    2fc4:	459a      	cmp	sl, r3
    2fc6:	d0d6      	beq.n	2f76 <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    2fc8:	7e33      	ldrb	r3, [r6, #24]
    2fca:	423b      	tst	r3, r7
    2fcc:	d1e2      	bne.n	2f94 <usart_read_buffer_wait+0x30>
    2fce:	4b0a      	ldr	r3, [pc, #40]	; (2ff8 <usart_read_buffer_wait+0x94>)
    2fd0:	7e32      	ldrb	r2, [r6, #24]
    2fd2:	423a      	tst	r2, r7
    2fd4:	d1de      	bne.n	2f94 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    2fd6:	2b01      	cmp	r3, #1
    2fd8:	d009      	beq.n	2fee <usart_read_buffer_wait+0x8a>
    2fda:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    2fdc:	2b00      	cmp	r3, #0
    2fde:	d1f7      	bne.n	2fd0 <usart_read_buffer_wait+0x6c>
    2fe0:	e7d8      	b.n	2f94 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    2fe2:	3502      	adds	r5, #2
    2fe4:	b2ad      	uxth	r5, r5
    2fe6:	0a1b      	lsrs	r3, r3, #8
    2fe8:	9a01      	ldr	r2, [sp, #4]
    2fea:	5453      	strb	r3, [r2, r1]
    2fec:	e7e5      	b.n	2fba <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    2fee:	2012      	movs	r0, #18
    2ff0:	e7c1      	b.n	2f76 <usart_read_buffer_wait+0x12>
    2ff2:	46c0      	nop			; (mov r8, r8)
    2ff4:	00002ef5 	.word	0x00002ef5
    2ff8:	0000ffff 	.word	0x0000ffff

00002ffc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2ffe:	0080      	lsls	r0, r0, #2
    3000:	4b62      	ldr	r3, [pc, #392]	; (318c <_usart_interrupt_handler+0x190>)
    3002:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    3004:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    3006:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    3008:	2b00      	cmp	r3, #0
    300a:	d1fc      	bne.n	3006 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    300c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    300e:	7da6      	ldrb	r6, [r4, #22]
    3010:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    3012:	2330      	movs	r3, #48	; 0x30
    3014:	5ceb      	ldrb	r3, [r5, r3]
    3016:	2231      	movs	r2, #49	; 0x31
    3018:	5caf      	ldrb	r7, [r5, r2]
    301a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    301c:	07f3      	lsls	r3, r6, #31
    301e:	d522      	bpl.n	3066 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    3020:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    3022:	b29b      	uxth	r3, r3
    3024:	2b00      	cmp	r3, #0
    3026:	d01c      	beq.n	3062 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    3028:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    302a:	7813      	ldrb	r3, [r2, #0]
    302c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    302e:	1c51      	adds	r1, r2, #1
    3030:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    3032:	7969      	ldrb	r1, [r5, #5]
    3034:	2901      	cmp	r1, #1
    3036:	d00e      	beq.n	3056 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    3038:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    303a:	05db      	lsls	r3, r3, #23
    303c:	0ddb      	lsrs	r3, r3, #23
    303e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    3040:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    3042:	3b01      	subs	r3, #1
    3044:	b29b      	uxth	r3, r3
    3046:	85eb      	strh	r3, [r5, #46]	; 0x2e
    3048:	2b00      	cmp	r3, #0
    304a:	d10c      	bne.n	3066 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    304c:	3301      	adds	r3, #1
    304e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    3050:	3301      	adds	r3, #1
    3052:	75a3      	strb	r3, [r4, #22]
    3054:	e007      	b.n	3066 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    3056:	7851      	ldrb	r1, [r2, #1]
    3058:	0209      	lsls	r1, r1, #8
    305a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    305c:	3202      	adds	r2, #2
    305e:	62aa      	str	r2, [r5, #40]	; 0x28
    3060:	e7eb      	b.n	303a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    3062:	2301      	movs	r3, #1
    3064:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    3066:	07b3      	lsls	r3, r6, #30
    3068:	d506      	bpl.n	3078 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    306a:	2302      	movs	r3, #2
    306c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    306e:	2200      	movs	r2, #0
    3070:	3331      	adds	r3, #49	; 0x31
    3072:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    3074:	07fb      	lsls	r3, r7, #31
    3076:	d41a      	bmi.n	30ae <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    3078:	0773      	lsls	r3, r6, #29
    307a:	d565      	bpl.n	3148 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    307c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    307e:	b29b      	uxth	r3, r3
    3080:	2b00      	cmp	r3, #0
    3082:	d05f      	beq.n	3144 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    3084:	8b63      	ldrh	r3, [r4, #26]
    3086:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    3088:	071a      	lsls	r2, r3, #28
    308a:	d414      	bmi.n	30b6 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    308c:	223f      	movs	r2, #63	; 0x3f
    308e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    3090:	2b00      	cmp	r3, #0
    3092:	d034      	beq.n	30fe <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    3094:	079a      	lsls	r2, r3, #30
    3096:	d511      	bpl.n	30bc <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    3098:	221a      	movs	r2, #26
    309a:	2332      	movs	r3, #50	; 0x32
    309c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    309e:	3b30      	subs	r3, #48	; 0x30
    30a0:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    30a2:	077b      	lsls	r3, r7, #29
    30a4:	d550      	bpl.n	3148 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    30a6:	0028      	movs	r0, r5
    30a8:	696b      	ldr	r3, [r5, #20]
    30aa:	4798      	blx	r3
    30ac:	e04c      	b.n	3148 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    30ae:	0028      	movs	r0, r5
    30b0:	68eb      	ldr	r3, [r5, #12]
    30b2:	4798      	blx	r3
    30b4:	e7e0      	b.n	3078 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    30b6:	2237      	movs	r2, #55	; 0x37
    30b8:	4013      	ands	r3, r2
    30ba:	e7e9      	b.n	3090 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    30bc:	075a      	lsls	r2, r3, #29
    30be:	d505      	bpl.n	30cc <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    30c0:	221e      	movs	r2, #30
    30c2:	2332      	movs	r3, #50	; 0x32
    30c4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    30c6:	3b2e      	subs	r3, #46	; 0x2e
    30c8:	8363      	strh	r3, [r4, #26]
    30ca:	e7ea      	b.n	30a2 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    30cc:	07da      	lsls	r2, r3, #31
    30ce:	d505      	bpl.n	30dc <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    30d0:	2213      	movs	r2, #19
    30d2:	2332      	movs	r3, #50	; 0x32
    30d4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    30d6:	3b31      	subs	r3, #49	; 0x31
    30d8:	8363      	strh	r3, [r4, #26]
    30da:	e7e2      	b.n	30a2 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    30dc:	06da      	lsls	r2, r3, #27
    30de:	d505      	bpl.n	30ec <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    30e0:	2242      	movs	r2, #66	; 0x42
    30e2:	2332      	movs	r3, #50	; 0x32
    30e4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    30e6:	3b22      	subs	r3, #34	; 0x22
    30e8:	8363      	strh	r3, [r4, #26]
    30ea:	e7da      	b.n	30a2 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    30ec:	2220      	movs	r2, #32
    30ee:	421a      	tst	r2, r3
    30f0:	d0d7      	beq.n	30a2 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    30f2:	3221      	adds	r2, #33	; 0x21
    30f4:	2332      	movs	r3, #50	; 0x32
    30f6:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    30f8:	3b12      	subs	r3, #18
    30fa:	8363      	strh	r3, [r4, #26]
    30fc:	e7d1      	b.n	30a2 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    30fe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    3100:	05db      	lsls	r3, r3, #23
    3102:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    3104:	b2da      	uxtb	r2, r3
    3106:	6a69      	ldr	r1, [r5, #36]	; 0x24
    3108:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    310a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    310c:	1c51      	adds	r1, r2, #1
    310e:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    3110:	7969      	ldrb	r1, [r5, #5]
    3112:	2901      	cmp	r1, #1
    3114:	d010      	beq.n	3138 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    3116:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    3118:	3b01      	subs	r3, #1
    311a:	b29b      	uxth	r3, r3
    311c:	85ab      	strh	r3, [r5, #44]	; 0x2c
    311e:	2b00      	cmp	r3, #0
    3120:	d112      	bne.n	3148 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    3122:	3304      	adds	r3, #4
    3124:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    3126:	2200      	movs	r2, #0
    3128:	332e      	adds	r3, #46	; 0x2e
    312a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    312c:	07bb      	lsls	r3, r7, #30
    312e:	d50b      	bpl.n	3148 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    3130:	0028      	movs	r0, r5
    3132:	692b      	ldr	r3, [r5, #16]
    3134:	4798      	blx	r3
    3136:	e007      	b.n	3148 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    3138:	0a1b      	lsrs	r3, r3, #8
    313a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    313c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    313e:	3301      	adds	r3, #1
    3140:	626b      	str	r3, [r5, #36]	; 0x24
    3142:	e7e8      	b.n	3116 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    3144:	2304      	movs	r3, #4
    3146:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    3148:	06f3      	lsls	r3, r6, #27
    314a:	d504      	bpl.n	3156 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    314c:	2310      	movs	r3, #16
    314e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    3150:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    3152:	06fb      	lsls	r3, r7, #27
    3154:	d40e      	bmi.n	3174 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    3156:	06b3      	lsls	r3, r6, #26
    3158:	d504      	bpl.n	3164 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    315a:	2320      	movs	r3, #32
    315c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    315e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    3160:	073b      	lsls	r3, r7, #28
    3162:	d40b      	bmi.n	317c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    3164:	0733      	lsls	r3, r6, #28
    3166:	d504      	bpl.n	3172 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    3168:	2308      	movs	r3, #8
    316a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    316c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    316e:	06bb      	lsls	r3, r7, #26
    3170:	d408      	bmi.n	3184 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    3172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    3174:	0028      	movs	r0, r5
    3176:	69eb      	ldr	r3, [r5, #28]
    3178:	4798      	blx	r3
    317a:	e7ec      	b.n	3156 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    317c:	0028      	movs	r0, r5
    317e:	69ab      	ldr	r3, [r5, #24]
    3180:	4798      	blx	r3
    3182:	e7ef      	b.n	3164 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    3184:	6a2b      	ldr	r3, [r5, #32]
    3186:	0028      	movs	r0, r5
    3188:	4798      	blx	r3
}
    318a:	e7f2      	b.n	3172 <_usart_interrupt_handler+0x176>
    318c:	200003a4 	.word	0x200003a4

00003190 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    3190:	b510      	push	{r4, lr}
	switch (clock_source) {
    3192:	2808      	cmp	r0, #8
    3194:	d803      	bhi.n	319e <system_clock_source_get_hz+0xe>
    3196:	0080      	lsls	r0, r0, #2
    3198:	4b1d      	ldr	r3, [pc, #116]	; (3210 <system_clock_source_get_hz+0x80>)
    319a:	581b      	ldr	r3, [r3, r0]
    319c:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    319e:	2000      	movs	r0, #0
    31a0:	e034      	b.n	320c <system_clock_source_get_hz+0x7c>
		return _system_clock_inst.xosc.frequency;
    31a2:	4b1c      	ldr	r3, [pc, #112]	; (3214 <system_clock_source_get_hz+0x84>)
    31a4:	6918      	ldr	r0, [r3, #16]
    31a6:	e031      	b.n	320c <system_clock_source_get_hz+0x7c>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    31a8:	4b1b      	ldr	r3, [pc, #108]	; (3218 <system_clock_source_get_hz+0x88>)
    31aa:	7d18      	ldrb	r0, [r3, #20]
    31ac:	0700      	lsls	r0, r0, #28
    31ae:	0f80      	lsrs	r0, r0, #30
    31b0:	1c43      	adds	r3, r0, #1
    31b2:	481a      	ldr	r0, [pc, #104]	; (321c <system_clock_source_get_hz+0x8c>)
    31b4:	4358      	muls	r0, r3
    31b6:	e029      	b.n	320c <system_clock_source_get_hz+0x7c>
		return _system_clock_inst.xosc32k.frequency;
    31b8:	4b16      	ldr	r3, [pc, #88]	; (3214 <system_clock_source_get_hz+0x84>)
    31ba:	6958      	ldr	r0, [r3, #20]
    31bc:	e026      	b.n	320c <system_clock_source_get_hz+0x7c>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    31be:	4b15      	ldr	r3, [pc, #84]	; (3214 <system_clock_source_get_hz+0x84>)
    31c0:	681b      	ldr	r3, [r3, #0]
			return 0;
    31c2:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    31c4:	079b      	lsls	r3, r3, #30
    31c6:	d521      	bpl.n	320c <system_clock_source_get_hz+0x7c>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    31c8:	4913      	ldr	r1, [pc, #76]	; (3218 <system_clock_source_get_hz+0x88>)
    31ca:	2280      	movs	r2, #128	; 0x80
    31cc:	0052      	lsls	r2, r2, #1
    31ce:	68cb      	ldr	r3, [r1, #12]
    31d0:	4213      	tst	r3, r2
    31d2:	d0fc      	beq.n	31ce <system_clock_source_get_hz+0x3e>
		switch(_system_clock_inst.dfll.control &
    31d4:	4b0f      	ldr	r3, [pc, #60]	; (3214 <system_clock_source_get_hz+0x84>)
    31d6:	681a      	ldr	r2, [r3, #0]
    31d8:	2324      	movs	r3, #36	; 0x24
    31da:	4013      	ands	r3, r2
    31dc:	2b04      	cmp	r3, #4
    31de:	d001      	beq.n	31e4 <system_clock_source_get_hz+0x54>
			return 48000000UL;
    31e0:	480f      	ldr	r0, [pc, #60]	; (3220 <system_clock_source_get_hz+0x90>)
    31e2:	e013      	b.n	320c <system_clock_source_get_hz+0x7c>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    31e4:	2000      	movs	r0, #0
    31e6:	4b0f      	ldr	r3, [pc, #60]	; (3224 <system_clock_source_get_hz+0x94>)
    31e8:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    31ea:	4b0a      	ldr	r3, [pc, #40]	; (3214 <system_clock_source_get_hz+0x84>)
    31ec:	689b      	ldr	r3, [r3, #8]
    31ee:	041b      	lsls	r3, r3, #16
    31f0:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    31f2:	4358      	muls	r0, r3
    31f4:	e00a      	b.n	320c <system_clock_source_get_hz+0x7c>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    31f6:	2328      	movs	r3, #40	; 0x28
    31f8:	4a07      	ldr	r2, [pc, #28]	; (3218 <system_clock_source_get_hz+0x88>)
    31fa:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    31fc:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    31fe:	079b      	lsls	r3, r3, #30
    3200:	d504      	bpl.n	320c <system_clock_source_get_hz+0x7c>
		return _system_clock_inst.dpll.frequency;
    3202:	4b04      	ldr	r3, [pc, #16]	; (3214 <system_clock_source_get_hz+0x84>)
    3204:	68d8      	ldr	r0, [r3, #12]
    3206:	e001      	b.n	320c <system_clock_source_get_hz+0x7c>
		return 32768UL;
    3208:	2080      	movs	r0, #128	; 0x80
    320a:	0200      	lsls	r0, r0, #8
	}
}
    320c:	bd10      	pop	{r4, pc}
    320e:	46c0      	nop			; (mov r8, r8)
    3210:	00008504 	.word	0x00008504
    3214:	20000100 	.word	0x20000100
    3218:	40000c00 	.word	0x40000c00
    321c:	003d0900 	.word	0x003d0900
    3220:	02dc6c00 	.word	0x02dc6c00
    3224:	00003795 	.word	0x00003795

00003228 <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
    3228:	b570      	push	{r4, r5, r6, lr}
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
    322a:	4c0b      	ldr	r4, [pc, #44]	; (3258 <system_clock_source_osc16m_set_config+0x30>)
    322c:	7d23      	ldrb	r3, [r4, #20]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
	temp.bit.ONDEMAND = config->on_demand;
    322e:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;
    3230:	7846      	ldrb	r6, [r0, #1]

	OSCCTRL->OSC16MCTRL = temp;
    3232:	7802      	ldrb	r2, [r0, #0]
    3234:	2103      	movs	r1, #3
    3236:	4011      	ands	r1, r2
    3238:	0089      	lsls	r1, r1, #2
    323a:	220c      	movs	r2, #12
    323c:	4393      	bics	r3, r2
    323e:	430b      	orrs	r3, r1
    3240:	3a0b      	subs	r2, #11
    3242:	4032      	ands	r2, r6
    3244:	0192      	lsls	r2, r2, #6
    3246:	2140      	movs	r1, #64	; 0x40
    3248:	438b      	bics	r3, r1
    324a:	4313      	orrs	r3, r2
    324c:	01ed      	lsls	r5, r5, #7
    324e:	227f      	movs	r2, #127	; 0x7f
    3250:	4013      	ands	r3, r2
    3252:	432b      	orrs	r3, r5
    3254:	7523      	strb	r3, [r4, #20]
}
    3256:	bd70      	pop	{r4, r5, r6, pc}
    3258:	40000c00 	.word	0x40000c00

0000325c <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    325c:	b5f0      	push	{r4, r5, r6, r7, lr}
    325e:	46ce      	mov	lr, r9
    3260:	4647      	mov	r7, r8
    3262:	b580      	push	{r7, lr}
	OSC32KCTRL_OSC32K_Type temp = OSC32KCTRL->OSC32K;
    3264:	4b19      	ldr	r3, [pc, #100]	; (32cc <system_clock_source_osc32k_set_config+0x70>)
    3266:	4699      	mov	r9, r3
    3268:	699b      	ldr	r3, [r3, #24]


	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    326a:	7841      	ldrb	r1, [r0, #1]
    326c:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    326e:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    3270:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    3272:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    3274:	7944      	ldrb	r4, [r0, #5]

	OSC32KCTRL->OSC32K  = temp;
    3276:	7880      	ldrb	r0, [r0, #2]
    3278:	2101      	movs	r1, #1
    327a:	4008      	ands	r0, r1
    327c:	0080      	lsls	r0, r0, #2
    327e:	2204      	movs	r2, #4
    3280:	4393      	bics	r3, r2
    3282:	4303      	orrs	r3, r0
    3284:	4660      	mov	r0, ip
    3286:	4008      	ands	r0, r1
    3288:	00c0      	lsls	r0, r0, #3
    328a:	3204      	adds	r2, #4
    328c:	4393      	bics	r3, r2
    328e:	4303      	orrs	r3, r0
    3290:	0038      	movs	r0, r7
    3292:	4008      	ands	r0, r1
    3294:	0180      	lsls	r0, r0, #6
    3296:	2740      	movs	r7, #64	; 0x40
    3298:	43bb      	bics	r3, r7
    329a:	4303      	orrs	r3, r0
    329c:	0030      	movs	r0, r6
    329e:	4008      	ands	r0, r1
    32a0:	01c0      	lsls	r0, r0, #7
    32a2:	2680      	movs	r6, #128	; 0x80
    32a4:	43b3      	bics	r3, r6
    32a6:	4303      	orrs	r3, r0
    32a8:	2007      	movs	r0, #7
    32aa:	4005      	ands	r5, r0
    32ac:	022d      	lsls	r5, r5, #8
    32ae:	4808      	ldr	r0, [pc, #32]	; (32d0 <system_clock_source_osc32k_set_config+0x74>)
    32b0:	4003      	ands	r3, r0
    32b2:	432b      	orrs	r3, r5
    32b4:	4021      	ands	r1, r4
    32b6:	0309      	lsls	r1, r1, #12
    32b8:	4806      	ldr	r0, [pc, #24]	; (32d4 <system_clock_source_osc32k_set_config+0x78>)
    32ba:	4003      	ands	r3, r0
    32bc:	430b      	orrs	r3, r1
    32be:	464a      	mov	r2, r9
    32c0:	6193      	str	r3, [r2, #24]
}
    32c2:	bc0c      	pop	{r2, r3}
    32c4:	4690      	mov	r8, r2
    32c6:	4699      	mov	r9, r3
    32c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32ca:	46c0      	nop			; (mov r8, r8)
    32cc:	40001000 	.word	0x40001000
    32d0:	fffff8ff 	.word	0xfffff8ff
    32d4:	ffffefff 	.word	0xffffefff

000032d8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    32d8:	2808      	cmp	r0, #8
    32da:	d803      	bhi.n	32e4 <system_clock_source_enable+0xc>
    32dc:	0080      	lsls	r0, r0, #2
    32de:	4b29      	ldr	r3, [pc, #164]	; (3384 <system_clock_source_enable+0xac>)
    32e0:	581b      	ldr	r3, [r3, r0]
    32e2:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    32e4:	2017      	movs	r0, #23
    32e6:	e04b      	b.n	3380 <system_clock_source_enable+0xa8>
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    32e8:	4a27      	ldr	r2, [pc, #156]	; (3388 <system_clock_source_enable+0xb0>)
    32ea:	7d13      	ldrb	r3, [r2, #20]
    32ec:	2102      	movs	r1, #2
    32ee:	430b      	orrs	r3, r1
    32f0:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    32f2:	2000      	movs	r0, #0
    32f4:	e044      	b.n	3380 <system_clock_source_enable+0xa8>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    32f6:	4a25      	ldr	r2, [pc, #148]	; (338c <system_clock_source_enable+0xb4>)
    32f8:	6993      	ldr	r3, [r2, #24]
    32fa:	2102      	movs	r1, #2
    32fc:	430b      	orrs	r3, r1
    32fe:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    3300:	2000      	movs	r0, #0
		break;
    3302:	e03d      	b.n	3380 <system_clock_source_enable+0xa8>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    3304:	4a20      	ldr	r2, [pc, #128]	; (3388 <system_clock_source_enable+0xb0>)
    3306:	8a13      	ldrh	r3, [r2, #16]
    3308:	2102      	movs	r1, #2
    330a:	430b      	orrs	r3, r1
    330c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    330e:	2000      	movs	r0, #0
		break;
    3310:	e036      	b.n	3380 <system_clock_source_enable+0xa8>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    3312:	4a1e      	ldr	r2, [pc, #120]	; (338c <system_clock_source_enable+0xb4>)
    3314:	6953      	ldr	r3, [r2, #20]
    3316:	2102      	movs	r1, #2
    3318:	430b      	orrs	r3, r1
    331a:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    331c:	2000      	movs	r0, #0
		break;
    331e:	e02f      	b.n	3380 <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    3320:	491b      	ldr	r1, [pc, #108]	; (3390 <system_clock_source_enable+0xb8>)
    3322:	680b      	ldr	r3, [r1, #0]
    3324:	2202      	movs	r2, #2
    3326:	4313      	orrs	r3, r2
    3328:	600b      	str	r3, [r1, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    332a:	4b17      	ldr	r3, [pc, #92]	; (3388 <system_clock_source_enable+0xb0>)
    332c:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    332e:	0019      	movs	r1, r3
    3330:	32fe      	adds	r2, #254	; 0xfe
    3332:	68cb      	ldr	r3, [r1, #12]
    3334:	4213      	tst	r3, r2
    3336:	d0fc      	beq.n	3332 <system_clock_source_enable+0x5a>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    3338:	4a15      	ldr	r2, [pc, #84]	; (3390 <system_clock_source_enable+0xb8>)
    333a:	6891      	ldr	r1, [r2, #8]
    333c:	4b12      	ldr	r3, [pc, #72]	; (3388 <system_clock_source_enable+0xb0>)
    333e:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    3340:	6852      	ldr	r2, [r2, #4]
    3342:	61da      	str	r2, [r3, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
    3344:	2200      	movs	r2, #0
    3346:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    3348:	0019      	movs	r1, r3
    334a:	3201      	adds	r2, #1
    334c:	32ff      	adds	r2, #255	; 0xff
    334e:	68cb      	ldr	r3, [r1, #12]
    3350:	4213      	tst	r3, r2
    3352:	d0fc      	beq.n	334e <system_clock_source_enable+0x76>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    3354:	4b0e      	ldr	r3, [pc, #56]	; (3390 <system_clock_source_enable+0xb8>)
    3356:	681b      	ldr	r3, [r3, #0]
    3358:	b29b      	uxth	r3, r3
    335a:	4a0b      	ldr	r2, [pc, #44]	; (3388 <system_clock_source_enable+0xb0>)
    335c:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    335e:	2000      	movs	r0, #0
    3360:	e00e      	b.n	3380 <system_clock_source_enable+0xa8>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    3362:	4909      	ldr	r1, [pc, #36]	; (3388 <system_clock_source_enable+0xb0>)
    3364:	2228      	movs	r2, #40	; 0x28
    3366:	5c8b      	ldrb	r3, [r1, r2]
    3368:	2002      	movs	r0, #2
    336a:	4303      	orrs	r3, r0
    336c:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    336e:	0008      	movs	r0, r1
    3370:	2138      	movs	r1, #56	; 0x38
    3372:	3a26      	subs	r2, #38	; 0x26
    3374:	5c43      	ldrb	r3, [r0, r1]
    3376:	4213      	tst	r3, r2
    3378:	d1fc      	bne.n	3374 <system_clock_source_enable+0x9c>
	return STATUS_OK;
    337a:	2000      	movs	r0, #0
    337c:	e000      	b.n	3380 <system_clock_source_enable+0xa8>
		return STATUS_OK;
    337e:	2000      	movs	r0, #0
}
    3380:	4770      	bx	lr
    3382:	46c0      	nop			; (mov r8, r8)
    3384:	00008528 	.word	0x00008528
    3388:	40000c00 	.word	0x40000c00
    338c:	40001000 	.word	0x40001000
    3390:	20000100 	.word	0x20000100

00003394 <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    3394:	2808      	cmp	r0, #8
    3396:	d832      	bhi.n	33fe <system_clock_source_disable+0x6a>
    3398:	0080      	lsls	r0, r0, #2
    339a:	4b1a      	ldr	r3, [pc, #104]	; (3404 <system_clock_source_disable+0x70>)
    339c:	581b      	ldr	r3, [r3, r0]
    339e:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    33a0:	4a19      	ldr	r2, [pc, #100]	; (3408 <system_clock_source_disable+0x74>)
    33a2:	7d13      	ldrb	r3, [r2, #20]
    33a4:	2102      	movs	r1, #2
    33a6:	438b      	bics	r3, r1
    33a8:	7513      	strb	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    33aa:	2000      	movs	r0, #0
}
    33ac:	4770      	bx	lr
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    33ae:	4a17      	ldr	r2, [pc, #92]	; (340c <system_clock_source_disable+0x78>)
    33b0:	6993      	ldr	r3, [r2, #24]
    33b2:	2102      	movs	r1, #2
    33b4:	438b      	bics	r3, r1
    33b6:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    33b8:	2000      	movs	r0, #0
		break;
    33ba:	e7f7      	b.n	33ac <system_clock_source_disable+0x18>
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    33bc:	4a12      	ldr	r2, [pc, #72]	; (3408 <system_clock_source_disable+0x74>)
    33be:	8a13      	ldrh	r3, [r2, #16]
    33c0:	2102      	movs	r1, #2
    33c2:	438b      	bics	r3, r1
    33c4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    33c6:	2000      	movs	r0, #0
		break;
    33c8:	e7f0      	b.n	33ac <system_clock_source_disable+0x18>
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    33ca:	4a10      	ldr	r2, [pc, #64]	; (340c <system_clock_source_disable+0x78>)
    33cc:	6953      	ldr	r3, [r2, #20]
    33ce:	2102      	movs	r1, #2
    33d0:	438b      	bics	r3, r1
    33d2:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    33d4:	2000      	movs	r0, #0
		break;
    33d6:	e7e9      	b.n	33ac <system_clock_source_disable+0x18>
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    33d8:	4b0d      	ldr	r3, [pc, #52]	; (3410 <system_clock_source_disable+0x7c>)
    33da:	681a      	ldr	r2, [r3, #0]
    33dc:	2102      	movs	r1, #2
    33de:	438a      	bics	r2, r1
    33e0:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    33e2:	681b      	ldr	r3, [r3, #0]
    33e4:	b29b      	uxth	r3, r3
    33e6:	4a08      	ldr	r2, [pc, #32]	; (3408 <system_clock_source_disable+0x74>)
    33e8:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    33ea:	2000      	movs	r0, #0
		break;
    33ec:	e7de      	b.n	33ac <system_clock_source_disable+0x18>
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    33ee:	4906      	ldr	r1, [pc, #24]	; (3408 <system_clock_source_disable+0x74>)
    33f0:	2228      	movs	r2, #40	; 0x28
    33f2:	5c8b      	ldrb	r3, [r1, r2]
    33f4:	2002      	movs	r0, #2
    33f6:	4383      	bics	r3, r0
    33f8:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    33fa:	2000      	movs	r0, #0
		break;
    33fc:	e7d6      	b.n	33ac <system_clock_source_disable+0x18>
		return STATUS_ERR_INVALID_ARG;
    33fe:	2017      	movs	r0, #23
    3400:	e7d4      	b.n	33ac <system_clock_source_disable+0x18>
    3402:	46c0      	nop			; (mov r8, r8)
    3404:	0000854c 	.word	0x0000854c
    3408:	40000c00 	.word	0x40000c00
    340c:	40001000 	.word	0x40001000
    3410:	20000100 	.word	0x20000100

00003414 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    3414:	b5f0      	push	{r4, r5, r6, r7, lr}
    3416:	46d6      	mov	lr, sl
    3418:	464f      	mov	r7, r9
    341a:	4646      	mov	r6, r8
    341c:	b5c0      	push	{r6, r7, lr}
    341e:	b086      	sub	sp, #24
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    3420:	2280      	movs	r2, #128	; 0x80
    3422:	0052      	lsls	r2, r2, #1
    3424:	4b49      	ldr	r3, [pc, #292]	; (354c <system_clock_init+0x138>)
    3426:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    3428:	3afd      	subs	r2, #253	; 0xfd
    342a:	4b49      	ldr	r3, [pc, #292]	; (3550 <system_clock_init+0x13c>)
    342c:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    342e:	4a49      	ldr	r2, [pc, #292]	; (3554 <system_clock_init+0x140>)
    3430:	6853      	ldr	r3, [r2, #4]
    3432:	211e      	movs	r1, #30
    3434:	438b      	bics	r3, r1
    3436:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    3438:	2380      	movs	r3, #128	; 0x80
    343a:	05db      	lsls	r3, r3, #23
    343c:	789b      	ldrb	r3, [r3, #2]
    343e:	2b02      	cmp	r3, #2
    3440:	d009      	beq.n	3456 <system_clock_init+0x42>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    3442:	2380      	movs	r3, #128	; 0x80
    3444:	05db      	lsls	r3, r3, #23
    3446:	2201      	movs	r2, #1
    3448:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    344a:	3201      	adds	r2, #1
    344c:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    344e:	001a      	movs	r2, r3
    3450:	7993      	ldrb	r3, [r2, #6]
    3452:	2b00      	cmp	r3, #0
    3454:	d0fc      	beq.n	3450 <system_clock_init+0x3c>
	config->enable_1khz_output  = true;
    3456:	a804      	add	r0, sp, #16
    3458:	2501      	movs	r5, #1
    345a:	7045      	strb	r5, [r0, #1]
	config->enable_32khz_output = true;
    345c:	7085      	strb	r5, [r0, #2]
	config->run_in_standby      = false;
    345e:	2400      	movs	r4, #0
    3460:	70c4      	strb	r4, [r0, #3]
	config->on_demand           = true;
    3462:	7105      	strb	r5, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    3464:	2307      	movs	r3, #7
    3466:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
    3468:	7144      	strb	r4, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    346a:	4b3b      	ldr	r3, [pc, #236]	; (3558 <system_clock_init+0x144>)
    346c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    346e:	2004      	movs	r0, #4
    3470:	4e3a      	ldr	r6, [pc, #232]	; (355c <system_clock_init+0x148>)
    3472:	47b0      	blx	r6
	config->division_factor    = 1;
    3474:	a901      	add	r1, sp, #4
    3476:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    3478:	704c      	strb	r4, [r1, #1]
	config->run_in_standby     = false;
    347a:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    347c:	724c      	strb	r4, [r1, #9]
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    347e:	2303      	movs	r3, #3
    3480:	700b      	strb	r3, [r1, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    3482:	2000      	movs	r0, #0
    3484:	4b36      	ldr	r3, [pc, #216]	; (3560 <system_clock_init+0x14c>)
    3486:	4798      	blx	r3
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    3488:	2006      	movs	r0, #6
    348a:	4b36      	ldr	r3, [pc, #216]	; (3564 <system_clock_init+0x150>)
    348c:	4798      	blx	r3
	config->run_in_standby  = false;
    348e:	466b      	mov	r3, sp
    3490:	705c      	strb	r4, [r3, #1]
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    3492:	701d      	strb	r5, [r3, #0]
	osc16m_conf.on_demand       = 0;
    3494:	709c      	strb	r4, [r3, #2]
	system_clock_source_osc16m_set_config(&osc16m_conf);
    3496:	4668      	mov	r0, sp
    3498:	4b33      	ldr	r3, [pc, #204]	; (3568 <system_clock_init+0x154>)
    349a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    349c:	2006      	movs	r0, #6
    349e:	47b0      	blx	r6
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    34a0:	492a      	ldr	r1, [pc, #168]	; (354c <system_clock_init+0x138>)
    34a2:	2210      	movs	r2, #16
    34a4:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    34a6:	421a      	tst	r2, r3
    34a8:	d0fc      	beq.n	34a4 <system_clock_init+0x90>
	config->division_factor    = 1;
    34aa:	ac01      	add	r4, sp, #4
    34ac:	2601      	movs	r6, #1
    34ae:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    34b0:	2500      	movs	r5, #0
    34b2:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    34b4:	2306      	movs	r3, #6
    34b6:	4699      	mov	r9, r3
    34b8:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    34ba:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    34bc:	7265      	strb	r5, [r4, #9]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    34be:	0021      	movs	r1, r4
    34c0:	2000      	movs	r0, #0
    34c2:	4b27      	ldr	r3, [pc, #156]	; (3560 <system_clock_init+0x14c>)
    34c4:	4698      	mov	r8, r3
    34c6:	4798      	blx	r3
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
    34c8:	4a20      	ldr	r2, [pc, #128]	; (354c <system_clock_init+0x138>)
    34ca:	7d13      	ldrb	r3, [r2, #20]
    34cc:	2180      	movs	r1, #128	; 0x80
    34ce:	430b      	orrs	r3, r1
    34d0:	7513      	strb	r3, [r2, #20]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    34d2:	4b26      	ldr	r3, [pc, #152]	; (356c <system_clock_init+0x158>)
    34d4:	4798      	blx	r3
	config->division_factor    = 1;
    34d6:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    34d8:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    34da:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    34dc:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    34de:	2304      	movs	r3, #4
    34e0:	7023      	strb	r3, [r4, #0]
    34e2:	0021      	movs	r1, r4
    34e4:	2001      	movs	r0, #1
    34e6:	47c0      	blx	r8
    34e8:	2001      	movs	r0, #1
    34ea:	4b21      	ldr	r3, [pc, #132]	; (3570 <system_clock_init+0x15c>)
    34ec:	469a      	mov	sl, r3
    34ee:	4798      	blx	r3
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    34f0:	4f20      	ldr	r7, [pc, #128]	; (3574 <system_clock_init+0x160>)
    34f2:	71be      	strb	r6, [r7, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    34f4:	717e      	strb	r6, [r7, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    34f6:	713e      	strb	r6, [r7, #4]
	config->division_factor    = 1;
    34f8:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    34fa:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    34fc:	464b      	mov	r3, r9
    34fe:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    3500:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    3502:	7265      	strb	r5, [r4, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    3504:	0021      	movs	r1, r4
    3506:	2000      	movs	r0, #0
    3508:	47c0      	blx	r8
    350a:	2000      	movs	r0, #0
    350c:	47d0      	blx	sl
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    350e:	2000      	movs	r0, #0
    3510:	4b19      	ldr	r3, [pc, #100]	; (3578 <system_clock_init+0x164>)
    3512:	4798      	blx	r3
    3514:	7939      	ldrb	r1, [r7, #4]
    3516:	b2c9      	uxtb	r1, r1
    3518:	4b18      	ldr	r3, [pc, #96]	; (357c <system_clock_init+0x168>)
    351a:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    351c:	4b18      	ldr	r3, [pc, #96]	; (3580 <system_clock_init+0x16c>)
    351e:	4298      	cmp	r0, r3
    3520:	d80e      	bhi.n	3540 <system_clock_init+0x12c>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    3522:	2380      	movs	r3, #128	; 0x80
    3524:	05db      	lsls	r3, r3, #23
    3526:	789b      	ldrb	r3, [r3, #2]
    3528:	2b00      	cmp	r3, #0
    352a:	d009      	beq.n	3540 <system_clock_init+0x12c>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    352c:	2380      	movs	r3, #128	; 0x80
    352e:	05db      	lsls	r3, r3, #23
    3530:	2201      	movs	r2, #1
    3532:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    3534:	2200      	movs	r2, #0
    3536:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    3538:	001a      	movs	r2, r3
    353a:	7993      	ldrb	r3, [r2, #6]
    353c:	2b00      	cmp	r3, #0
    353e:	d0fc      	beq.n	353a <system_clock_init+0x126>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    3540:	b006      	add	sp, #24
    3542:	bc1c      	pop	{r2, r3, r4}
    3544:	4690      	mov	r8, r2
    3546:	4699      	mov	r9, r3
    3548:	46a2      	mov	sl, r4
    354a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    354c:	40000c00 	.word	0x40000c00
    3550:	40001400 	.word	0x40001400
    3554:	41004000 	.word	0x41004000
    3558:	0000325d 	.word	0x0000325d
    355c:	000032d9 	.word	0x000032d9
    3560:	000035a9 	.word	0x000035a9
    3564:	00003395 	.word	0x00003395
    3568:	00003229 	.word	0x00003229
    356c:	00003585 	.word	0x00003585
    3570:	00003655 	.word	0x00003655
    3574:	40000400 	.word	0x40000400
    3578:	00003695 	.word	0x00003695
    357c:	0000560d 	.word	0x0000560d
    3580:	00b71b00 	.word	0x00b71b00

00003584 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    3584:	4a06      	ldr	r2, [pc, #24]	; (35a0 <system_gclk_init+0x1c>)
    3586:	6953      	ldr	r3, [r2, #20]
    3588:	2140      	movs	r1, #64	; 0x40
    358a:	430b      	orrs	r3, r1
    358c:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    358e:	2201      	movs	r2, #1
    3590:	4b04      	ldr	r3, [pc, #16]	; (35a4 <system_gclk_init+0x20>)
    3592:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    3594:	0019      	movs	r1, r3
    3596:	780b      	ldrb	r3, [r1, #0]
    3598:	4213      	tst	r3, r2
    359a:	d1fc      	bne.n	3596 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    359c:	4770      	bx	lr
    359e:	46c0      	nop			; (mov r8, r8)
    35a0:	40000400 	.word	0x40000400
    35a4:	40001800 	.word	0x40001800

000035a8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    35a8:	b570      	push	{r4, r5, r6, lr}
    35aa:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    35ac:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    35ae:	784b      	ldrb	r3, [r1, #1]
    35b0:	2b00      	cmp	r3, #0
    35b2:	d002      	beq.n	35ba <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    35b4:	2380      	movs	r3, #128	; 0x80
    35b6:	00db      	lsls	r3, r3, #3
    35b8:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    35ba:	7a4b      	ldrb	r3, [r1, #9]
    35bc:	2b00      	cmp	r3, #0
    35be:	d002      	beq.n	35c6 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    35c0:	2380      	movs	r3, #128	; 0x80
    35c2:	011b      	lsls	r3, r3, #4
    35c4:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    35c6:	6848      	ldr	r0, [r1, #4]
    35c8:	2801      	cmp	r0, #1
    35ca:	d90f      	bls.n	35ec <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    35cc:	1e43      	subs	r3, r0, #1
    35ce:	4218      	tst	r0, r3
    35d0:	d131      	bne.n	3636 <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    35d2:	2802      	cmp	r0, #2
    35d4:	d92d      	bls.n	3632 <system_gclk_gen_set_config+0x8a>
    35d6:	2302      	movs	r3, #2
    35d8:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    35da:	3201      	adds	r2, #1
						mask <<= 1) {
    35dc:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    35de:	4298      	cmp	r0, r3
    35e0:	d8fb      	bhi.n	35da <system_gclk_gen_set_config+0x32>
    35e2:	2380      	movs	r3, #128	; 0x80
    35e4:	015b      	lsls	r3, r3, #5
    35e6:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    35e8:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    35ea:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    35ec:	7a0b      	ldrb	r3, [r1, #8]
    35ee:	2b00      	cmp	r3, #0
    35f0:	d002      	beq.n	35f8 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    35f2:	2380      	movs	r3, #128	; 0x80
    35f4:	019b      	lsls	r3, r3, #6
    35f6:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    35f8:	2604      	movs	r6, #4
    35fa:	40a6      	lsls	r6, r4
    35fc:	4911      	ldr	r1, [pc, #68]	; (3644 <system_gclk_gen_set_config+0x9c>)
    35fe:	4a12      	ldr	r2, [pc, #72]	; (3648 <system_gclk_gen_set_config+0xa0>)
    3600:	684b      	ldr	r3, [r1, #4]
    3602:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    3604:	421e      	tst	r6, r3
    3606:	d1fb      	bne.n	3600 <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    3608:	4b10      	ldr	r3, [pc, #64]	; (364c <system_gclk_gen_set_config+0xa4>)
    360a:	4798      	blx	r3
    360c:	00a4      	lsls	r4, r4, #2
    360e:	4b0d      	ldr	r3, [pc, #52]	; (3644 <system_gclk_gen_set_config+0x9c>)
    3610:	469c      	mov	ip, r3
    3612:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    3614:	6a22      	ldr	r2, [r4, #32]
    3616:	2380      	movs	r3, #128	; 0x80
    3618:	005b      	lsls	r3, r3, #1
    361a:	401a      	ands	r2, r3
    361c:	432a      	orrs	r2, r5
    361e:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    3620:	4661      	mov	r1, ip
    3622:	4a09      	ldr	r2, [pc, #36]	; (3648 <system_gclk_gen_set_config+0xa0>)
    3624:	684b      	ldr	r3, [r1, #4]
    3626:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    3628:	421e      	tst	r6, r3
    362a:	d1fb      	bne.n	3624 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    362c:	4b08      	ldr	r3, [pc, #32]	; (3650 <system_gclk_gen_set_config+0xa8>)
    362e:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    3630:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    3632:	2200      	movs	r2, #0
    3634:	e7d5      	b.n	35e2 <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    3636:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    3638:	2380      	movs	r3, #128	; 0x80
    363a:	009b      	lsls	r3, r3, #2
    363c:	4318      	orrs	r0, r3
    363e:	4305      	orrs	r5, r0
    3640:	e7d4      	b.n	35ec <system_gclk_gen_set_config+0x44>
    3642:	46c0      	nop			; (mov r8, r8)
    3644:	40001800 	.word	0x40001800
    3648:	000007fc 	.word	0x000007fc
    364c:	00002649 	.word	0x00002649
    3650:	00002689 	.word	0x00002689

00003654 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3654:	b510      	push	{r4, lr}
    3656:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    3658:	2204      	movs	r2, #4
    365a:	4082      	lsls	r2, r0
    365c:	4809      	ldr	r0, [pc, #36]	; (3684 <system_gclk_gen_enable+0x30>)
    365e:	490a      	ldr	r1, [pc, #40]	; (3688 <system_gclk_gen_enable+0x34>)
    3660:	6843      	ldr	r3, [r0, #4]
    3662:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    3664:	421a      	tst	r2, r3
    3666:	d1fb      	bne.n	3660 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    3668:	4b08      	ldr	r3, [pc, #32]	; (368c <system_gclk_gen_enable+0x38>)
    366a:	4798      	blx	r3
    366c:	00a4      	lsls	r4, r4, #2
    366e:	4b05      	ldr	r3, [pc, #20]	; (3684 <system_gclk_gen_enable+0x30>)
    3670:	469c      	mov	ip, r3
    3672:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    3674:	6a22      	ldr	r2, [r4, #32]
    3676:	2380      	movs	r3, #128	; 0x80
    3678:	005b      	lsls	r3, r3, #1
    367a:	4313      	orrs	r3, r2
    367c:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    367e:	4b04      	ldr	r3, [pc, #16]	; (3690 <system_gclk_gen_enable+0x3c>)
    3680:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3682:	bd10      	pop	{r4, pc}
    3684:	40001800 	.word	0x40001800
    3688:	000007fc 	.word	0x000007fc
    368c:	00002649 	.word	0x00002649
    3690:	00002689 	.word	0x00002689

00003694 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3696:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    3698:	2204      	movs	r2, #4
    369a:	4082      	lsls	r2, r0
    369c:	4812      	ldr	r0, [pc, #72]	; (36e8 <system_gclk_gen_get_hz+0x54>)
    369e:	4913      	ldr	r1, [pc, #76]	; (36ec <system_gclk_gen_get_hz+0x58>)
    36a0:	6843      	ldr	r3, [r0, #4]
    36a2:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    36a4:	421a      	tst	r2, r3
    36a6:	d1fb      	bne.n	36a0 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    36a8:	4b11      	ldr	r3, [pc, #68]	; (36f0 <system_gclk_gen_get_hz+0x5c>)
    36aa:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    36ac:	4f0e      	ldr	r7, [pc, #56]	; (36e8 <system_gclk_gen_get_hz+0x54>)
    36ae:	3408      	adds	r4, #8
    36b0:	00a4      	lsls	r4, r4, #2
    36b2:	59e0      	ldr	r0, [r4, r7]
    36b4:	0700      	lsls	r0, r0, #28
    36b6:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
    36b8:	4b0e      	ldr	r3, [pc, #56]	; (36f4 <system_gclk_gen_get_hz+0x60>)
    36ba:	4798      	blx	r3
    36bc:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    36be:	59e5      	ldr	r5, [r4, r7]
    36c0:	04ed      	lsls	r5, r5, #19
    36c2:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    36c4:	59e4      	ldr	r4, [r4, r7]
    36c6:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    36c8:	4b0b      	ldr	r3, [pc, #44]	; (36f8 <system_gclk_gen_get_hz+0x64>)
    36ca:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    36cc:	2d00      	cmp	r5, #0
    36ce:	d107      	bne.n	36e0 <system_gclk_gen_get_hz+0x4c>
    36d0:	2c01      	cmp	r4, #1
    36d2:	d907      	bls.n	36e4 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    36d4:	0021      	movs	r1, r4
    36d6:	0030      	movs	r0, r6
    36d8:	4b08      	ldr	r3, [pc, #32]	; (36fc <system_gclk_gen_get_hz+0x68>)
    36da:	4798      	blx	r3
    36dc:	0006      	movs	r6, r0
    36de:	e001      	b.n	36e4 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    36e0:	3401      	adds	r4, #1
    36e2:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    36e4:	0030      	movs	r0, r6
    36e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    36e8:	40001800 	.word	0x40001800
    36ec:	000007fc 	.word	0x000007fc
    36f0:	00002649 	.word	0x00002649
    36f4:	00003191 	.word	0x00003191
    36f8:	00002689 	.word	0x00002689
    36fc:	0000560d 	.word	0x0000560d

00003700 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    3700:	b510      	push	{r4, lr}
    3702:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3704:	4b09      	ldr	r3, [pc, #36]	; (372c <system_gclk_chan_enable+0x2c>)
    3706:	4798      	blx	r3
    3708:	00a0      	lsls	r0, r4, #2
    370a:	4b09      	ldr	r3, [pc, #36]	; (3730 <system_gclk_chan_enable+0x30>)
    370c:	469c      	mov	ip, r3
    370e:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    3710:	2280      	movs	r2, #128	; 0x80
    3712:	5883      	ldr	r3, [r0, r2]
    3714:	2140      	movs	r1, #64	; 0x40
    3716:	430b      	orrs	r3, r1
    3718:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    371a:	3140      	adds	r1, #64	; 0x40
    371c:	3a40      	subs	r2, #64	; 0x40
    371e:	5843      	ldr	r3, [r0, r1]
    3720:	421a      	tst	r2, r3
    3722:	d0fc      	beq.n	371e <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    3724:	4b03      	ldr	r3, [pc, #12]	; (3734 <system_gclk_chan_enable+0x34>)
    3726:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    3728:	bd10      	pop	{r4, pc}
    372a:	46c0      	nop			; (mov r8, r8)
    372c:	00002649 	.word	0x00002649
    3730:	40001800 	.word	0x40001800
    3734:	00002689 	.word	0x00002689

00003738 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    3738:	b510      	push	{r4, lr}
    373a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    373c:	4b09      	ldr	r3, [pc, #36]	; (3764 <system_gclk_chan_disable+0x2c>)
    373e:	4798      	blx	r3
    3740:	00a0      	lsls	r0, r4, #2
    3742:	4b09      	ldr	r3, [pc, #36]	; (3768 <system_gclk_chan_disable+0x30>)
    3744:	469c      	mov	ip, r3
    3746:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    3748:	2280      	movs	r2, #128	; 0x80
    374a:	5883      	ldr	r3, [r0, r2]
    374c:	2140      	movs	r1, #64	; 0x40
    374e:	438b      	bics	r3, r1
    3750:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    3752:	3140      	adds	r1, #64	; 0x40
    3754:	3a40      	subs	r2, #64	; 0x40
    3756:	5843      	ldr	r3, [r0, r1]
    3758:	421a      	tst	r2, r3
    375a:	d1fc      	bne.n	3756 <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    375c:	4b03      	ldr	r3, [pc, #12]	; (376c <system_gclk_chan_disable+0x34>)
    375e:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    3760:	bd10      	pop	{r4, pc}
    3762:	46c0      	nop			; (mov r8, r8)
    3764:	00002649 	.word	0x00002649
    3768:	40001800 	.word	0x40001800
    376c:	00002689 	.word	0x00002689

00003770 <system_gclk_chan_set_config>:
{
    3770:	b570      	push	{r4, r5, r6, lr}
    3772:	0004      	movs	r4, r0
    3774:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    3776:	4b05      	ldr	r3, [pc, #20]	; (378c <system_gclk_chan_set_config+0x1c>)
    3778:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    377a:	782a      	ldrb	r2, [r5, #0]
    377c:	230f      	movs	r3, #15
    377e:	4013      	ands	r3, r2
    3780:	3420      	adds	r4, #32
    3782:	00a4      	lsls	r4, r4, #2
    3784:	4a02      	ldr	r2, [pc, #8]	; (3790 <system_gclk_chan_set_config+0x20>)
    3786:	50a3      	str	r3, [r4, r2]
}
    3788:	bd70      	pop	{r4, r5, r6, pc}
    378a:	46c0      	nop			; (mov r8, r8)
    378c:	00003739 	.word	0x00003739
    3790:	40001800 	.word	0x40001800

00003794 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3794:	b510      	push	{r4, lr}
    3796:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3798:	4b06      	ldr	r3, [pc, #24]	; (37b4 <system_gclk_chan_get_hz+0x20>)
    379a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    379c:	3420      	adds	r4, #32
    379e:	00a4      	lsls	r4, r4, #2
    37a0:	4b05      	ldr	r3, [pc, #20]	; (37b8 <system_gclk_chan_get_hz+0x24>)
    37a2:	58e4      	ldr	r4, [r4, r3]
    37a4:	0724      	lsls	r4, r4, #28
    37a6:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    37a8:	4b04      	ldr	r3, [pc, #16]	; (37bc <system_gclk_chan_get_hz+0x28>)
    37aa:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    37ac:	0020      	movs	r0, r4
    37ae:	4b04      	ldr	r3, [pc, #16]	; (37c0 <system_gclk_chan_get_hz+0x2c>)
    37b0:	4798      	blx	r3
}
    37b2:	bd10      	pop	{r4, pc}
    37b4:	00002649 	.word	0x00002649
    37b8:	40001800 	.word	0x40001800
    37bc:	00002689 	.word	0x00002689
    37c0:	00003695 	.word	0x00003695

000037c4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    37c4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    37c6:	78d3      	ldrb	r3, [r2, #3]
    37c8:	2b00      	cmp	r3, #0
    37ca:	d135      	bne.n	3838 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    37cc:	7813      	ldrb	r3, [r2, #0]
    37ce:	2b80      	cmp	r3, #128	; 0x80
    37d0:	d029      	beq.n	3826 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    37d2:	061b      	lsls	r3, r3, #24
    37d4:	2480      	movs	r4, #128	; 0x80
    37d6:	0264      	lsls	r4, r4, #9
    37d8:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    37da:	7854      	ldrb	r4, [r2, #1]
    37dc:	2502      	movs	r5, #2
    37de:	43ac      	bics	r4, r5
    37e0:	d106      	bne.n	37f0 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    37e2:	7894      	ldrb	r4, [r2, #2]
    37e4:	2c00      	cmp	r4, #0
    37e6:	d120      	bne.n	382a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    37e8:	2480      	movs	r4, #128	; 0x80
    37ea:	02a4      	lsls	r4, r4, #10
    37ec:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    37ee:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    37f0:	7854      	ldrb	r4, [r2, #1]
    37f2:	3c01      	subs	r4, #1
    37f4:	2c01      	cmp	r4, #1
    37f6:	d91c      	bls.n	3832 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    37f8:	040d      	lsls	r5, r1, #16
    37fa:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    37fc:	24a0      	movs	r4, #160	; 0xa0
    37fe:	05e4      	lsls	r4, r4, #23
    3800:	432c      	orrs	r4, r5
    3802:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3804:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3806:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3808:	24d0      	movs	r4, #208	; 0xd0
    380a:	0624      	lsls	r4, r4, #24
    380c:	432c      	orrs	r4, r5
    380e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3810:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    3812:	78d4      	ldrb	r4, [r2, #3]
    3814:	2c00      	cmp	r4, #0
    3816:	d122      	bne.n	385e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    3818:	035b      	lsls	r3, r3, #13
    381a:	d51c      	bpl.n	3856 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    381c:	7893      	ldrb	r3, [r2, #2]
    381e:	2b01      	cmp	r3, #1
    3820:	d01e      	beq.n	3860 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    3822:	6141      	str	r1, [r0, #20]
    3824:	e017      	b.n	3856 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    3826:	2300      	movs	r3, #0
    3828:	e7d7      	b.n	37da <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    382a:	24c0      	movs	r4, #192	; 0xc0
    382c:	02e4      	lsls	r4, r4, #11
    382e:	4323      	orrs	r3, r4
    3830:	e7dd      	b.n	37ee <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    3832:	4c0d      	ldr	r4, [pc, #52]	; (3868 <_system_pinmux_config+0xa4>)
    3834:	4023      	ands	r3, r4
    3836:	e7df      	b.n	37f8 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    3838:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    383a:	040c      	lsls	r4, r1, #16
    383c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    383e:	23a0      	movs	r3, #160	; 0xa0
    3840:	05db      	lsls	r3, r3, #23
    3842:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3844:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3846:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3848:	23d0      	movs	r3, #208	; 0xd0
    384a:	061b      	lsls	r3, r3, #24
    384c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    384e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    3850:	78d3      	ldrb	r3, [r2, #3]
    3852:	2b00      	cmp	r3, #0
    3854:	d103      	bne.n	385e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3856:	7853      	ldrb	r3, [r2, #1]
    3858:	3b01      	subs	r3, #1
    385a:	2b01      	cmp	r3, #1
    385c:	d902      	bls.n	3864 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    385e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    3860:	6181      	str	r1, [r0, #24]
    3862:	e7f8      	b.n	3856 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    3864:	6081      	str	r1, [r0, #8]
}
    3866:	e7fa      	b.n	385e <_system_pinmux_config+0x9a>
    3868:	fffbffff 	.word	0xfffbffff

0000386c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    386c:	b510      	push	{r4, lr}
    386e:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    3870:	09c1      	lsrs	r1, r0, #7
		return NULL;
    3872:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3874:	2900      	cmp	r1, #0
    3876:	d104      	bne.n	3882 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    3878:	0943      	lsrs	r3, r0, #5
    387a:	01db      	lsls	r3, r3, #7
    387c:	4905      	ldr	r1, [pc, #20]	; (3894 <system_pinmux_pin_set_config+0x28>)
    387e:	468c      	mov	ip, r1
    3880:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    3882:	241f      	movs	r4, #31
    3884:	4020      	ands	r0, r4
    3886:	2101      	movs	r1, #1
    3888:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    388a:	0018      	movs	r0, r3
    388c:	4b02      	ldr	r3, [pc, #8]	; (3898 <system_pinmux_pin_set_config+0x2c>)
    388e:	4798      	blx	r3
}
    3890:	bd10      	pop	{r4, pc}
    3892:	46c0      	nop			; (mov r8, r8)
    3894:	40002800 	.word	0x40002800
    3898:	000037c5 	.word	0x000037c5

0000389c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    389c:	4770      	bx	lr
	...

000038a0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    38a0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    38a2:	4b05      	ldr	r3, [pc, #20]	; (38b8 <system_init+0x18>)
    38a4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    38a6:	4b05      	ldr	r3, [pc, #20]	; (38bc <system_init+0x1c>)
    38a8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    38aa:	4b05      	ldr	r3, [pc, #20]	; (38c0 <system_init+0x20>)
    38ac:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    38ae:	4b05      	ldr	r3, [pc, #20]	; (38c4 <system_init+0x24>)
    38b0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    38b2:	4b05      	ldr	r3, [pc, #20]	; (38c8 <system_init+0x28>)
    38b4:	4798      	blx	r3
}
    38b6:	bd10      	pop	{r4, pc}
    38b8:	00003415 	.word	0x00003415
    38bc:	000026b9 	.word	0x000026b9
    38c0:	0000389d 	.word	0x0000389d
    38c4:	0000093d 	.word	0x0000093d
    38c8:	0000389d 	.word	0x0000389d

000038cc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    38cc:	e7fe      	b.n	38cc <Dummy_Handler>
	...

000038d0 <Reset_Handler>:
{
    38d0:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    38d2:	4a1a      	ldr	r2, [pc, #104]	; (393c <Reset_Handler+0x6c>)
    38d4:	4b1a      	ldr	r3, [pc, #104]	; (3940 <Reset_Handler+0x70>)
    38d6:	429a      	cmp	r2, r3
    38d8:	d011      	beq.n	38fe <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    38da:	001a      	movs	r2, r3
    38dc:	4b19      	ldr	r3, [pc, #100]	; (3944 <Reset_Handler+0x74>)
    38de:	429a      	cmp	r2, r3
    38e0:	d20d      	bcs.n	38fe <Reset_Handler+0x2e>
    38e2:	4a19      	ldr	r2, [pc, #100]	; (3948 <Reset_Handler+0x78>)
    38e4:	3303      	adds	r3, #3
    38e6:	1a9b      	subs	r3, r3, r2
    38e8:	089b      	lsrs	r3, r3, #2
    38ea:	3301      	adds	r3, #1
    38ec:	009b      	lsls	r3, r3, #2
    38ee:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    38f0:	4813      	ldr	r0, [pc, #76]	; (3940 <Reset_Handler+0x70>)
    38f2:	4912      	ldr	r1, [pc, #72]	; (393c <Reset_Handler+0x6c>)
    38f4:	588c      	ldr	r4, [r1, r2]
    38f6:	5084      	str	r4, [r0, r2]
    38f8:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    38fa:	429a      	cmp	r2, r3
    38fc:	d1fa      	bne.n	38f4 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    38fe:	4a13      	ldr	r2, [pc, #76]	; (394c <Reset_Handler+0x7c>)
    3900:	4b13      	ldr	r3, [pc, #76]	; (3950 <Reset_Handler+0x80>)
    3902:	429a      	cmp	r2, r3
    3904:	d20a      	bcs.n	391c <Reset_Handler+0x4c>
    3906:	43d3      	mvns	r3, r2
    3908:	4911      	ldr	r1, [pc, #68]	; (3950 <Reset_Handler+0x80>)
    390a:	185b      	adds	r3, r3, r1
    390c:	2103      	movs	r1, #3
    390e:	438b      	bics	r3, r1
    3910:	3304      	adds	r3, #4
    3912:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    3914:	2100      	movs	r1, #0
    3916:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    3918:	4293      	cmp	r3, r2
    391a:	d1fc      	bne.n	3916 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    391c:	4a0d      	ldr	r2, [pc, #52]	; (3954 <Reset_Handler+0x84>)
    391e:	21ff      	movs	r1, #255	; 0xff
    3920:	4b0d      	ldr	r3, [pc, #52]	; (3958 <Reset_Handler+0x88>)
    3922:	438b      	bics	r3, r1
    3924:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    3926:	4a0d      	ldr	r2, [pc, #52]	; (395c <Reset_Handler+0x8c>)
    3928:	6853      	ldr	r3, [r2, #4]
    392a:	397f      	subs	r1, #127	; 0x7f
    392c:	430b      	orrs	r3, r1
    392e:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    3930:	4b0b      	ldr	r3, [pc, #44]	; (3960 <Reset_Handler+0x90>)
    3932:	4798      	blx	r3
        main();
    3934:	4b0b      	ldr	r3, [pc, #44]	; (3964 <Reset_Handler+0x94>)
    3936:	4798      	blx	r3
    3938:	e7fe      	b.n	3938 <Reset_Handler+0x68>
    393a:	46c0      	nop			; (mov r8, r8)
    393c:	0000880c 	.word	0x0000880c
    3940:	20000000 	.word	0x20000000
    3944:	20000084 	.word	0x20000084
    3948:	20000004 	.word	0x20000004
    394c:	20000084 	.word	0x20000084
    3950:	20000c48 	.word	0x20000c48
    3954:	e000ed00 	.word	0xe000ed00
    3958:	00000000 	.word	0x00000000
    395c:	41004000 	.word	0x41004000
    3960:	0000737d 	.word	0x0000737d
    3964:	000053a5 	.word	0x000053a5

00003968 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    3968:	b5f0      	push	{r4, r5, r6, r7, lr}
    396a:	46c6      	mov	lr, r8
    396c:	b500      	push	{lr}
    396e:	000c      	movs	r4, r1
    3970:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    3972:	2800      	cmp	r0, #0
    3974:	d10f      	bne.n	3996 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    3976:	2a00      	cmp	r2, #0
    3978:	dd11      	ble.n	399e <_read+0x36>
    397a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    397c:	4e09      	ldr	r6, [pc, #36]	; (39a4 <_read+0x3c>)
    397e:	4d0a      	ldr	r5, [pc, #40]	; (39a8 <_read+0x40>)
    3980:	6830      	ldr	r0, [r6, #0]
    3982:	0021      	movs	r1, r4
    3984:	682b      	ldr	r3, [r5, #0]
    3986:	4798      	blx	r3
		ptr++;
    3988:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    398a:	42bc      	cmp	r4, r7
    398c:	d1f8      	bne.n	3980 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    398e:	4640      	mov	r0, r8
    3990:	bc04      	pop	{r2}
    3992:	4690      	mov	r8, r2
    3994:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    3996:	2301      	movs	r3, #1
    3998:	425b      	negs	r3, r3
    399a:	4698      	mov	r8, r3
    399c:	e7f7      	b.n	398e <_read+0x26>
	for (; len > 0; --len) {
    399e:	4680      	mov	r8, r0
    39a0:	e7f5      	b.n	398e <_read+0x26>
    39a2:	46c0      	nop			; (mov r8, r8)
    39a4:	200003c4 	.word	0x200003c4
    39a8:	200003bc 	.word	0x200003bc

000039ac <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    39ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    39ae:	46c6      	mov	lr, r8
    39b0:	b500      	push	{lr}
    39b2:	000e      	movs	r6, r1
    39b4:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    39b6:	3801      	subs	r0, #1
    39b8:	2802      	cmp	r0, #2
    39ba:	d810      	bhi.n	39de <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    39bc:	2a00      	cmp	r2, #0
    39be:	d011      	beq.n	39e4 <_write+0x38>
    39c0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    39c2:	4b0c      	ldr	r3, [pc, #48]	; (39f4 <_write+0x48>)
    39c4:	4698      	mov	r8, r3
    39c6:	4f0c      	ldr	r7, [pc, #48]	; (39f8 <_write+0x4c>)
    39c8:	4643      	mov	r3, r8
    39ca:	6818      	ldr	r0, [r3, #0]
    39cc:	5d31      	ldrb	r1, [r6, r4]
    39ce:	683b      	ldr	r3, [r7, #0]
    39d0:	4798      	blx	r3
    39d2:	2800      	cmp	r0, #0
    39d4:	db08      	blt.n	39e8 <_write+0x3c>
			return -1;
		}
		++nChars;
    39d6:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    39d8:	42a5      	cmp	r5, r4
    39da:	d1f5      	bne.n	39c8 <_write+0x1c>
    39dc:	e006      	b.n	39ec <_write+0x40>
		return -1;
    39de:	2401      	movs	r4, #1
    39e0:	4264      	negs	r4, r4
    39e2:	e003      	b.n	39ec <_write+0x40>
	for (; len != 0; --len) {
    39e4:	0014      	movs	r4, r2
    39e6:	e001      	b.n	39ec <_write+0x40>
			return -1;
    39e8:	2401      	movs	r4, #1
    39ea:	4264      	negs	r4, r4
	}
	return nChars;
}
    39ec:	0020      	movs	r0, r4
    39ee:	bc04      	pop	{r2}
    39f0:	4690      	mov	r8, r2
    39f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39f4:	200003c4 	.word	0x200003c4
    39f8:	200003c0 	.word	0x200003c0

000039fc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    39fc:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    39fe:	4a06      	ldr	r2, [pc, #24]	; (3a18 <_sbrk+0x1c>)
    3a00:	6812      	ldr	r2, [r2, #0]
    3a02:	2a00      	cmp	r2, #0
    3a04:	d004      	beq.n	3a10 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    3a06:	4a04      	ldr	r2, [pc, #16]	; (3a18 <_sbrk+0x1c>)
    3a08:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    3a0a:	18c3      	adds	r3, r0, r3
    3a0c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    3a0e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    3a10:	4902      	ldr	r1, [pc, #8]	; (3a1c <_sbrk+0x20>)
    3a12:	4a01      	ldr	r2, [pc, #4]	; (3a18 <_sbrk+0x1c>)
    3a14:	6011      	str	r1, [r2, #0]
    3a16:	e7f6      	b.n	3a06 <_sbrk+0xa>
    3a18:	20000118 	.word	0x20000118
    3a1c:	20002c48 	.word	0x20002c48

00003a20 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    3a20:	2001      	movs	r0, #1
    3a22:	4240      	negs	r0, r0
    3a24:	4770      	bx	lr

00003a26 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    3a26:	2380      	movs	r3, #128	; 0x80
    3a28:	019b      	lsls	r3, r3, #6
    3a2a:	604b      	str	r3, [r1, #4]

	return 0;
}
    3a2c:	2000      	movs	r0, #0
    3a2e:	4770      	bx	lr

00003a30 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    3a30:	2001      	movs	r0, #1
    3a32:	4770      	bx	lr

00003a34 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    3a34:	2000      	movs	r0, #0
    3a36:	4770      	bx	lr

00003a38 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    3a38:	b570      	push	{r4, r5, r6, lr}
    3a3a:	b082      	sub	sp, #8
    3a3c:	0005      	movs	r5, r0
    3a3e:	000e      	movs	r6, r1
	uint16_t temp = 0;
    3a40:	2200      	movs	r2, #0
    3a42:	466b      	mov	r3, sp
    3a44:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    3a46:	4c06      	ldr	r4, [pc, #24]	; (3a60 <usart_serial_getchar+0x28>)
    3a48:	466b      	mov	r3, sp
    3a4a:	1d99      	adds	r1, r3, #6
    3a4c:	0028      	movs	r0, r5
    3a4e:	47a0      	blx	r4
    3a50:	2800      	cmp	r0, #0
    3a52:	d1f9      	bne.n	3a48 <usart_serial_getchar+0x10>

	*c = temp;
    3a54:	466b      	mov	r3, sp
    3a56:	3306      	adds	r3, #6
    3a58:	881b      	ldrh	r3, [r3, #0]
    3a5a:	7033      	strb	r3, [r6, #0]
}
    3a5c:	b002      	add	sp, #8
    3a5e:	bd70      	pop	{r4, r5, r6, pc}
    3a60:	00002ef5 	.word	0x00002ef5

00003a64 <usart_serial_putchar>:
{
    3a64:	b570      	push	{r4, r5, r6, lr}
    3a66:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    3a68:	b28c      	uxth	r4, r1
    3a6a:	4e03      	ldr	r6, [pc, #12]	; (3a78 <usart_serial_putchar+0x14>)
    3a6c:	0021      	movs	r1, r4
    3a6e:	0028      	movs	r0, r5
    3a70:	47b0      	blx	r6
    3a72:	2800      	cmp	r0, #0
    3a74:	d1fa      	bne.n	3a6c <usart_serial_putchar+0x8>
}
    3a76:	bd70      	pop	{r4, r5, r6, pc}
    3a78:	00002ec9 	.word	0x00002ec9

00003a7c <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    3a7c:	b510      	push	{r4, lr}
    3a7e:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    3a80:	466b      	mov	r3, sp
    3a82:	1ddc      	adds	r4, r3, #7
    3a84:	2201      	movs	r2, #1
    3a86:	0021      	movs	r1, r4
    3a88:	480f      	ldr	r0, [pc, #60]	; (3ac8 <USART_HOST_ISR_VECT+0x4c>)
    3a8a:	4b10      	ldr	r3, [pc, #64]	; (3acc <USART_HOST_ISR_VECT+0x50>)
    3a8c:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    3a8e:	b672      	cpsid	i
    3a90:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    3a94:	2200      	movs	r2, #0
    3a96:	4b0e      	ldr	r3, [pc, #56]	; (3ad0 <USART_HOST_ISR_VECT+0x54>)
    3a98:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    3a9a:	4b0e      	ldr	r3, [pc, #56]	; (3ad4 <USART_HOST_ISR_VECT+0x58>)
    3a9c:	781b      	ldrb	r3, [r3, #0]
    3a9e:	7821      	ldrb	r1, [r4, #0]
    3aa0:	4a0d      	ldr	r2, [pc, #52]	; (3ad8 <USART_HOST_ISR_VECT+0x5c>)
    3aa2:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    3aa4:	2b9b      	cmp	r3, #155	; 0x9b
    3aa6:	d00a      	beq.n	3abe <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    3aa8:	3301      	adds	r3, #1
    3aaa:	4a0a      	ldr	r2, [pc, #40]	; (3ad4 <USART_HOST_ISR_VECT+0x58>)
    3aac:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    3aae:	2201      	movs	r2, #1
    3ab0:	4b07      	ldr	r3, [pc, #28]	; (3ad0 <USART_HOST_ISR_VECT+0x54>)
    3ab2:	701a      	strb	r2, [r3, #0]
    3ab4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3ab8:	b662      	cpsie	i
}
    3aba:	b002      	add	sp, #8
    3abc:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    3abe:	2200      	movs	r2, #0
    3ac0:	4b04      	ldr	r3, [pc, #16]	; (3ad4 <USART_HOST_ISR_VECT+0x58>)
    3ac2:	701a      	strb	r2, [r3, #0]
    3ac4:	e7f3      	b.n	3aae <USART_HOST_ISR_VECT+0x32>
    3ac6:	46c0      	nop			; (mov r8, r8)
    3ac8:	2000011c 	.word	0x2000011c
    3acc:	00002f65 	.word	0x00002f65
    3ad0:	20000009 	.word	0x20000009
    3ad4:	200001ec 	.word	0x200001ec
    3ad8:	20000150 	.word	0x20000150

00003adc <sio2host_init>:
{
    3adc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ade:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    3ae0:	2380      	movs	r3, #128	; 0x80
    3ae2:	05db      	lsls	r3, r3, #23
    3ae4:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    3ae6:	2300      	movs	r3, #0
    3ae8:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    3aea:	22ff      	movs	r2, #255	; 0xff
    3aec:	4669      	mov	r1, sp
    3aee:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    3af0:	2200      	movs	r2, #0
    3af2:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    3af4:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    3af6:	2401      	movs	r4, #1
    3af8:	2124      	movs	r1, #36	; 0x24
    3afa:	4668      	mov	r0, sp
    3afc:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    3afe:	3101      	adds	r1, #1
    3b00:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    3b02:	3101      	adds	r1, #1
    3b04:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    3b06:	3101      	adds	r1, #1
    3b08:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    3b0a:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    3b0c:	3105      	adds	r1, #5
    3b0e:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    3b10:	3101      	adds	r1, #1
    3b12:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    3b14:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    3b16:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    3b18:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    3b1a:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    3b1c:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    3b1e:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    3b20:	2313      	movs	r3, #19
    3b22:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    3b24:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    3b26:	23c4      	movs	r3, #196	; 0xc4
    3b28:	039b      	lsls	r3, r3, #14
    3b2a:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    3b2c:	2301      	movs	r3, #1
    3b2e:	425b      	negs	r3, r3
    3b30:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    3b32:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    3b34:	4b2d      	ldr	r3, [pc, #180]	; (3bec <sio2host_init+0x110>)
    3b36:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    3b38:	4b2d      	ldr	r3, [pc, #180]	; (3bf0 <sio2host_init+0x114>)
    3b3a:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    3b3c:	23e1      	movs	r3, #225	; 0xe1
    3b3e:	025b      	lsls	r3, r3, #9
    3b40:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    3b42:	4d2c      	ldr	r5, [pc, #176]	; (3bf4 <sio2host_init+0x118>)
    3b44:	4b2c      	ldr	r3, [pc, #176]	; (3bf8 <sio2host_init+0x11c>)
    3b46:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    3b48:	4a2c      	ldr	r2, [pc, #176]	; (3bfc <sio2host_init+0x120>)
    3b4a:	4b2d      	ldr	r3, [pc, #180]	; (3c00 <sio2host_init+0x124>)
    3b4c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    3b4e:	4a2d      	ldr	r2, [pc, #180]	; (3c04 <sio2host_init+0x128>)
    3b50:	4b2d      	ldr	r3, [pc, #180]	; (3c08 <sio2host_init+0x12c>)
    3b52:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    3b54:	466a      	mov	r2, sp
    3b56:	492d      	ldr	r1, [pc, #180]	; (3c0c <sio2host_init+0x130>)
    3b58:	0028      	movs	r0, r5
    3b5a:	4b2d      	ldr	r3, [pc, #180]	; (3c10 <sio2host_init+0x134>)
    3b5c:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    3b5e:	4f2d      	ldr	r7, [pc, #180]	; (3c14 <sio2host_init+0x138>)
    3b60:	683b      	ldr	r3, [r7, #0]
    3b62:	6898      	ldr	r0, [r3, #8]
    3b64:	2100      	movs	r1, #0
    3b66:	4e2c      	ldr	r6, [pc, #176]	; (3c18 <sio2host_init+0x13c>)
    3b68:	47b0      	blx	r6
	setbuf(stdin, NULL);
    3b6a:	683b      	ldr	r3, [r7, #0]
    3b6c:	6858      	ldr	r0, [r3, #4]
    3b6e:	2100      	movs	r1, #0
    3b70:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3b72:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3b74:	0030      	movs	r0, r6
    3b76:	4b29      	ldr	r3, [pc, #164]	; (3c1c <sio2host_init+0x140>)
    3b78:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3b7a:	231f      	movs	r3, #31
    3b7c:	4018      	ands	r0, r3
    3b7e:	4084      	lsls	r4, r0
    3b80:	4b27      	ldr	r3, [pc, #156]	; (3c20 <sio2host_init+0x144>)
    3b82:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3b84:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    3b86:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    3b88:	2b00      	cmp	r3, #0
    3b8a:	d1fc      	bne.n	3b86 <sio2host_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3b8c:	6833      	ldr	r3, [r6, #0]
    3b8e:	2202      	movs	r2, #2
    3b90:	4313      	orrs	r3, r2
    3b92:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3b94:	4b17      	ldr	r3, [pc, #92]	; (3bf4 <sio2host_init+0x118>)
    3b96:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    3b98:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3b9a:	2a00      	cmp	r2, #0
    3b9c:	d1fc      	bne.n	3b98 <sio2host_init+0xbc>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    3b9e:	6859      	ldr	r1, [r3, #4]
    3ba0:	2280      	movs	r2, #128	; 0x80
    3ba2:	0252      	lsls	r2, r2, #9
    3ba4:	430a      	orrs	r2, r1
    3ba6:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    3ba8:	2101      	movs	r1, #1
    3baa:	4a12      	ldr	r2, [pc, #72]	; (3bf4 <sio2host_init+0x118>)
    3bac:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    3bae:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3bb0:	2a00      	cmp	r2, #0
    3bb2:	d1fc      	bne.n	3bae <sio2host_init+0xd2>
	return (usart_hw->SYNCBUSY.reg);
    3bb4:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3bb6:	2a00      	cmp	r2, #0
    3bb8:	d1fc      	bne.n	3bb4 <sio2host_init+0xd8>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    3bba:	6859      	ldr	r1, [r3, #4]
    3bbc:	2280      	movs	r2, #128	; 0x80
    3bbe:	0292      	lsls	r2, r2, #10
    3bc0:	430a      	orrs	r2, r1
    3bc2:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    3bc4:	2101      	movs	r1, #1
    3bc6:	4a0b      	ldr	r2, [pc, #44]	; (3bf4 <sio2host_init+0x118>)
    3bc8:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    3bca:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3bcc:	2a00      	cmp	r2, #0
    3bce:	d1fc      	bne.n	3bca <sio2host_init+0xee>
	USART_HOST_RX_ISR_ENABLE();
    3bd0:	4914      	ldr	r1, [pc, #80]	; (3c24 <sio2host_init+0x148>)
    3bd2:	2003      	movs	r0, #3
    3bd4:	4b14      	ldr	r3, [pc, #80]	; (3c28 <sio2host_init+0x14c>)
    3bd6:	4798      	blx	r3
    3bd8:	2204      	movs	r2, #4
    3bda:	4b0c      	ldr	r3, [pc, #48]	; (3c0c <sio2host_init+0x130>)
    3bdc:	759a      	strb	r2, [r3, #22]
    3bde:	2280      	movs	r2, #128	; 0x80
    3be0:	0112      	lsls	r2, r2, #4
    3be2:	4b0f      	ldr	r3, [pc, #60]	; (3c20 <sio2host_init+0x144>)
    3be4:	601a      	str	r2, [r3, #0]
}
    3be6:	b011      	add	sp, #68	; 0x44
    3be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3bea:	46c0      	nop			; (mov r8, r8)
    3bec:	00180002 	.word	0x00180002
    3bf0:	00190002 	.word	0x00190002
    3bf4:	2000011c 	.word	0x2000011c
    3bf8:	200003c4 	.word	0x200003c4
    3bfc:	00003a65 	.word	0x00003a65
    3c00:	200003c0 	.word	0x200003c0
    3c04:	00003a39 	.word	0x00003a39
    3c08:	200003bc 	.word	0x200003bc
    3c0c:	42000c00 	.word	0x42000c00
    3c10:	00002b65 	.word	0x00002b65
    3c14:	20000020 	.word	0x20000020
    3c18:	000074f1 	.word	0x000074f1
    3c1c:	00002ad5 	.word	0x00002ad5
    3c20:	e000e100 	.word	0xe000e100
    3c24:	00003a7d 	.word	0x00003a7d
    3c28:	00002a99 	.word	0x00002a99

00003c2c <phyTrxSetState>:
}

/*************************************************************************/ /**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
    3c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c2e:	0004      	movs	r4, r0
    trx_reg_write(reg, value);
    3c30:	4f0b      	ldr	r7, [pc, #44]	; (3c60 <phyTrxSetState+0x34>)
    value = trx_reg_read(reg);
    3c32:	4e0c      	ldr	r6, [pc, #48]	; (3c64 <phyTrxSetState+0x38>)
    do {
        phyWriteRegister(RG_TRX_STATE, TRX_CMD_FORCE_TRX_OFF);
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    3c34:	251f      	movs	r5, #31
    trx_reg_write(reg, value);
    3c36:	2103      	movs	r1, #3
    3c38:	2002      	movs	r0, #2
    3c3a:	47b8      	blx	r7
    value = trx_reg_read(reg);
    3c3c:	2001      	movs	r0, #1
    3c3e:	47b0      	blx	r6
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    3c40:	4028      	ands	r0, r5
    3c42:	2808      	cmp	r0, #8
    3c44:	d1f7      	bne.n	3c36 <phyTrxSetState+0xa>
    trx_reg_write(reg, value);
    3c46:	4f06      	ldr	r7, [pc, #24]	; (3c60 <phyTrxSetState+0x34>)
    value = trx_reg_read(reg);
    3c48:	4e06      	ldr	r6, [pc, #24]	; (3c64 <phyTrxSetState+0x38>)

    do {
        phyWriteRegister(RG_TRX_STATE,
            state);
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    3c4a:	251f      	movs	r5, #31
    trx_reg_write(reg, value);
    3c4c:	0021      	movs	r1, r4
    3c4e:	2002      	movs	r0, #2
    3c50:	47b8      	blx	r7
    value = trx_reg_read(reg);
    3c52:	2001      	movs	r0, #1
    3c54:	47b0      	blx	r6
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    3c56:	4028      	ands	r0, r5
    3c58:	4284      	cmp	r4, r0
    3c5a:	d1f7      	bne.n	3c4c <phyTrxSetState+0x20>
}
    3c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c5e:	46c0      	nop			; (mov r8, r8)
    3c60:	00001b7d 	.word	0x00001b7d
    3c64:	00001a81 	.word	0x00001a81

00003c68 <phySetRxState>:
{
    3c68:	b510      	push	{r4, lr}
    phyTrxSetState(TRX_CMD_TRX_OFF);
    3c6a:	2008      	movs	r0, #8
    3c6c:	4b06      	ldr	r3, [pc, #24]	; (3c88 <phySetRxState+0x20>)
    3c6e:	4798      	blx	r3
    value = trx_reg_read(reg);
    3c70:	200f      	movs	r0, #15
    3c72:	4b06      	ldr	r3, [pc, #24]	; (3c8c <phySetRxState+0x24>)
    3c74:	4798      	blx	r3
    if (phyRxState) {
    3c76:	4b06      	ldr	r3, [pc, #24]	; (3c90 <phySetRxState+0x28>)
    3c78:	781b      	ldrb	r3, [r3, #0]
    3c7a:	2b00      	cmp	r3, #0
    3c7c:	d100      	bne.n	3c80 <phySetRxState+0x18>
}
    3c7e:	bd10      	pop	{r4, pc}
        phyTrxSetState(TRX_CMD_RX_AACK_ON);
    3c80:	2016      	movs	r0, #22
    3c82:	4b01      	ldr	r3, [pc, #4]	; (3c88 <phySetRxState+0x20>)
    3c84:	4798      	blx	r3
}
    3c86:	e7fa      	b.n	3c7e <phySetRxState+0x16>
    3c88:	00003c2d 	.word	0x00003c2d
    3c8c:	00001a81 	.word	0x00001a81
    3c90:	20000270 	.word	0x20000270

00003c94 <PHY_DataReq>:
{
    3c94:	b510      	push	{r4, lr}
    3c96:	0004      	movs	r4, r0
    phyTrxSetState(TRX_CMD_TX_ARET_ON);
    3c98:	2019      	movs	r0, #25
    3c9a:	4b0c      	ldr	r3, [pc, #48]	; (3ccc <PHY_DataReq+0x38>)
    3c9c:	4798      	blx	r3
    value = trx_reg_read(reg);
    3c9e:	200f      	movs	r0, #15
    3ca0:	4b0b      	ldr	r3, [pc, #44]	; (3cd0 <PHY_DataReq+0x3c>)
    3ca2:	4798      	blx	r3
    data[1] += 2; // 2
    3ca4:	7861      	ldrb	r1, [r4, #1]
    3ca6:	1c8b      	adds	r3, r1, #2
    3ca8:	7063      	strb	r3, [r4, #1]
    trx_frame_write(&data[1], (data[1] - 1) /* length value*/);
    3caa:	3101      	adds	r1, #1
    3cac:	b2c9      	uxtb	r1, r1
    data[1] += 2; // 2
    3cae:	1c60      	adds	r0, r4, #1
    trx_frame_write(&data[1], (data[1] - 1) /* length value*/);
    3cb0:	4b08      	ldr	r3, [pc, #32]	; (3cd4 <PHY_DataReq+0x40>)
    3cb2:	4798      	blx	r3
    phyState = PHY_STATE_TX_WAIT_END;
    3cb4:	2203      	movs	r2, #3
    3cb6:	4b08      	ldr	r3, [pc, #32]	; (3cd8 <PHY_DataReq+0x44>)
    3cb8:	701a      	strb	r2, [r3, #0]
    3cba:	4b08      	ldr	r3, [pc, #32]	; (3cdc <PHY_DataReq+0x48>)
    3cbc:	2280      	movs	r2, #128	; 0x80
    3cbe:	0352      	lsls	r2, r2, #13
    3cc0:	619a      	str	r2, [r3, #24]
  __ASM volatile ("nop");
    3cc2:	46c0      	nop			; (mov r8, r8)
    3cc4:	46c0      	nop			; (mov r8, r8)
		port_base->OUTCLR.reg = pin_mask;
    3cc6:	615a      	str	r2, [r3, #20]
}
    3cc8:	bd10      	pop	{r4, pc}
    3cca:	46c0      	nop			; (mov r8, r8)
    3ccc:	00003c2d 	.word	0x00003c2d
    3cd0:	00001a81 	.word	0x00001a81
    3cd4:	00001dad 	.word	0x00001dad
    3cd8:	20000271 	.word	0x20000271
    3cdc:	40002800 	.word	0x40002800

00003ce0 <PHY_RandomReq>:
{
    3ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ce2:	46c6      	mov	lr, r8
    3ce4:	b500      	push	{lr}
    phyTrxSetState(TRX_CMD_RX_ON);
    3ce6:	2006      	movs	r0, #6
    3ce8:	4b0d      	ldr	r3, [pc, #52]	; (3d20 <PHY_RandomReq+0x40>)
    3cea:	4798      	blx	r3
    3cec:	2400      	movs	r4, #0
    uint16_t rnd = 0;
    3cee:	2500      	movs	r5, #0
        delay_cycles_us(1);
    3cf0:	4f0c      	ldr	r7, [pc, #48]	; (3d24 <PHY_RandomReq+0x44>)
    value = trx_reg_read(reg);
    3cf2:	4e0d      	ldr	r6, [pc, #52]	; (3d28 <PHY_RandomReq+0x48>)
        rndValue = (phyReadRegister(RG_PHY_RSSI) >> RND_VALUE) & 3;
    3cf4:	2303      	movs	r3, #3
    3cf6:	4698      	mov	r8, r3
        delay_cycles_us(1);
    3cf8:	2001      	movs	r0, #1
    3cfa:	47b8      	blx	r7
    value = trx_reg_read(reg);
    3cfc:	2006      	movs	r0, #6
    3cfe:	47b0      	blx	r6
        rndValue = (phyReadRegister(RG_PHY_RSSI) >> RND_VALUE) & 3;
    3d00:	0940      	lsrs	r0, r0, #5
        rnd |= rndValue << i;
    3d02:	4643      	mov	r3, r8
    3d04:	4018      	ands	r0, r3
    3d06:	40a0      	lsls	r0, r4
    3d08:	4305      	orrs	r5, r0
    3d0a:	b2ad      	uxth	r5, r5
    3d0c:	3402      	adds	r4, #2
    for (uint8_t i = 0; i < 16; i += 2) {
    3d0e:	2c10      	cmp	r4, #16
    3d10:	d1f2      	bne.n	3cf8 <PHY_RandomReq+0x18>
    phySetRxState();
    3d12:	4b06      	ldr	r3, [pc, #24]	; (3d2c <PHY_RandomReq+0x4c>)
    3d14:	4798      	blx	r3
}
    3d16:	0028      	movs	r0, r5
    3d18:	bc04      	pop	{r2}
    3d1a:	4690      	mov	r8, r2
    3d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d1e:	46c0      	nop			; (mov r8, r8)
    3d20:	00003c2d 	.word	0x00003c2d
    3d24:	00000651 	.word	0x00000651
    3d28:	00001a81 	.word	0x00001a81
    3d2c:	00003c69 	.word	0x00003c69

00003d30 <PHY_Init>:
{
    3d30:	b570      	push	{r4, r5, r6, lr}
    trx_spi_init();
    3d32:	4b10      	ldr	r3, [pc, #64]	; (3d74 <PHY_Init+0x44>)
    3d34:	4798      	blx	r3
    PhyReset();
    3d36:	4b10      	ldr	r3, [pc, #64]	; (3d78 <PHY_Init+0x48>)
    3d38:	4798      	blx	r3
    phyRxState = false;
    3d3a:	2200      	movs	r2, #0
    3d3c:	4b0f      	ldr	r3, [pc, #60]	; (3d7c <PHY_Init+0x4c>)
    3d3e:	701a      	strb	r2, [r3, #0]
    trx_reg_write(reg, value);
    3d40:	21ff      	movs	r1, #255	; 0xff
    3d42:	200e      	movs	r0, #14
    3d44:	4b0e      	ldr	r3, [pc, #56]	; (3d80 <PHY_Init+0x50>)
    3d46:	4798      	blx	r3
    3d48:	4e0d      	ldr	r6, [pc, #52]	; (3d80 <PHY_Init+0x50>)
    value = trx_reg_read(reg);
    3d4a:	4d0e      	ldr	r5, [pc, #56]	; (3d84 <PHY_Init+0x54>)
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    3d4c:	241f      	movs	r4, #31
    trx_reg_write(reg, value);
    3d4e:	2108      	movs	r1, #8
    3d50:	2002      	movs	r0, #2
    3d52:	47b0      	blx	r6
    value = trx_reg_read(reg);
    3d54:	2001      	movs	r0, #1
    3d56:	47a8      	blx	r5
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    3d58:	4020      	ands	r0, r4
    3d5a:	2808      	cmp	r0, #8
    3d5c:	d1f7      	bne.n	3d4e <PHY_Init+0x1e>
    trx_reg_write(reg, value);
    3d5e:	212e      	movs	r1, #46	; 0x2e
    3d60:	3804      	subs	r0, #4
    3d62:	4c07      	ldr	r4, [pc, #28]	; (3d80 <PHY_Init+0x50>)
    3d64:	47a0      	blx	r4
    3d66:	21a0      	movs	r1, #160	; 0xa0
    3d68:	200c      	movs	r0, #12
    3d6a:	47a0      	blx	r4
    3d6c:	21e1      	movs	r1, #225	; 0xe1
    3d6e:	2005      	movs	r0, #5
    3d70:	47a0      	blx	r4
}
    3d72:	bd70      	pop	{r4, r5, r6, pc}
    3d74:	00001935 	.word	0x00001935
    3d78:	00001a51 	.word	0x00001a51
    3d7c:	20000270 	.word	0x20000270
    3d80:	00001b7d 	.word	0x00001b7d
    3d84:	00001a81 	.word	0x00001a81

00003d88 <PHY_SetChannel>:
{
    3d88:	b510      	push	{r4, lr}
    3d8a:	0004      	movs	r4, r0
    value = trx_reg_read(reg);
    3d8c:	2008      	movs	r0, #8
    3d8e:	4b05      	ldr	r3, [pc, #20]	; (3da4 <PHY_SetChannel+0x1c>)
    3d90:	4798      	blx	r3
    reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
    3d92:	231f      	movs	r3, #31
    3d94:	0001      	movs	r1, r0
    3d96:	4399      	bics	r1, r3
    phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
    3d98:	4321      	orrs	r1, r4
    trx_reg_write(reg, value);
    3d9a:	b2c9      	uxtb	r1, r1
    3d9c:	2008      	movs	r0, #8
    3d9e:	4b02      	ldr	r3, [pc, #8]	; (3da8 <PHY_SetChannel+0x20>)
    3da0:	4798      	blx	r3
}
    3da2:	bd10      	pop	{r4, pc}
    3da4:	00001a81 	.word	0x00001a81
    3da8:	00001b7d 	.word	0x00001b7d

00003dac <PHY_SetPanId>:
{
    3dac:	b530      	push	{r4, r5, lr}
    3dae:	b083      	sub	sp, #12
    3db0:	466b      	mov	r3, sp
    3db2:	1d9d      	adds	r5, r3, #6
    3db4:	80d8      	strh	r0, [r3, #6]
    trx_reg_write(reg, value);
    3db6:	b2c1      	uxtb	r1, r0
    3db8:	2022      	movs	r0, #34	; 0x22
    3dba:	4c03      	ldr	r4, [pc, #12]	; (3dc8 <PHY_SetPanId+0x1c>)
    3dbc:	47a0      	blx	r4
    3dbe:	7869      	ldrb	r1, [r5, #1]
    3dc0:	2023      	movs	r0, #35	; 0x23
    3dc2:	47a0      	blx	r4
}
    3dc4:	b003      	add	sp, #12
    3dc6:	bd30      	pop	{r4, r5, pc}
    3dc8:	00001b7d 	.word	0x00001b7d

00003dcc <PHY_SetShortAddr>:
{
    3dcc:	b570      	push	{r4, r5, r6, lr}
    3dce:	b082      	sub	sp, #8
    3dd0:	466b      	mov	r3, sp
    3dd2:	1d9e      	adds	r6, r3, #6
    3dd4:	80d8      	strh	r0, [r3, #6]
    phyWriteRegister(RG_SHORT_ADDR_0, d[0]);
    3dd6:	b2c4      	uxtb	r4, r0
    trx_reg_write(reg, value);
    3dd8:	0021      	movs	r1, r4
    3dda:	2020      	movs	r0, #32
    3ddc:	4d05      	ldr	r5, [pc, #20]	; (3df4 <PHY_SetShortAddr+0x28>)
    3dde:	47a8      	blx	r5
    phyWriteRegister(RG_SHORT_ADDR_1, d[1]);
    3de0:	7876      	ldrb	r6, [r6, #1]
    trx_reg_write(reg, value);
    3de2:	0031      	movs	r1, r6
    3de4:	2021      	movs	r0, #33	; 0x21
    3de6:	47a8      	blx	r5
    phyWriteRegister(RG_CSMA_SEED_0, d[0] + d[1]);
    3de8:	19a4      	adds	r4, r4, r6
    trx_reg_write(reg, value);
    3dea:	b2e1      	uxtb	r1, r4
    3dec:	202d      	movs	r0, #45	; 0x2d
    3dee:	47a8      	blx	r5
}
    3df0:	b002      	add	sp, #8
    3df2:	bd70      	pop	{r4, r5, r6, pc}
    3df4:	00001b7d 	.word	0x00001b7d

00003df8 <PHY_Sleep>:
{
    3df8:	b510      	push	{r4, lr}
    phyTrxSetState(TRX_CMD_TRX_OFF);
    3dfa:	2008      	movs	r0, #8
    3dfc:	4b04      	ldr	r3, [pc, #16]	; (3e10 <PHY_Sleep+0x18>)
    3dfe:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    3e00:	2280      	movs	r2, #128	; 0x80
    3e02:	0352      	lsls	r2, r2, #13
    3e04:	4b03      	ldr	r3, [pc, #12]	; (3e14 <PHY_Sleep+0x1c>)
    3e06:	619a      	str	r2, [r3, #24]
    phyState = PHY_STATE_SLEEP;
    3e08:	2202      	movs	r2, #2
    3e0a:	4b03      	ldr	r3, [pc, #12]	; (3e18 <PHY_Sleep+0x20>)
    3e0c:	701a      	strb	r2, [r3, #0]
}
    3e0e:	bd10      	pop	{r4, pc}
    3e10:	00003c2d 	.word	0x00003c2d
    3e14:	40002800 	.word	0x40002800
    3e18:	20000271 	.word	0x20000271

00003e1c <PHY_EncryptReq>:
{
    3e1c:	b510      	push	{r4, lr}
    3e1e:	0004      	movs	r4, r0
    3e20:	0008      	movs	r0, r1
    sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    3e22:	2200      	movs	r2, #0
    3e24:	2100      	movs	r1, #0
    3e26:	4b05      	ldr	r3, [pc, #20]	; (3e3c <PHY_EncryptReq+0x20>)
    3e28:	4798      	blx	r3
    sal_aes_wrrd(text, NULL);
    3e2a:	2100      	movs	r1, #0
    3e2c:	0020      	movs	r0, r4
    3e2e:	4b04      	ldr	r3, [pc, #16]	; (3e40 <PHY_EncryptReq+0x24>)
    3e30:	4798      	blx	r3
    sal_aes_read(text);
    3e32:	0020      	movs	r0, r4
    3e34:	4b03      	ldr	r3, [pc, #12]	; (3e44 <PHY_EncryptReq+0x28>)
    3e36:	4798      	blx	r3
}
    3e38:	bd10      	pop	{r4, pc}
    3e3a:	46c0      	nop			; (mov r8, r8)
    3e3c:	000024fd 	.word	0x000024fd
    3e40:	00002491 	.word	0x00002491
    3e44:	00002635 	.word	0x00002635

00003e48 <MiMAC_SetAltAddress>:
{
    3e48:	b510      	push	{r4, lr}
    myNetworkAddress.v[0] = Address[0];
    3e4a:	7802      	ldrb	r2, [r0, #0]
    3e4c:	4b08      	ldr	r3, [pc, #32]	; (3e70 <MiMAC_SetAltAddress+0x28>)
    3e4e:	701a      	strb	r2, [r3, #0]
    myNetworkAddress.v[1] = Address[1];
    3e50:	7842      	ldrb	r2, [r0, #1]
    3e52:	705a      	strb	r2, [r3, #1]
    MAC_PANID.v[0] = PANID[0];
    3e54:	780a      	ldrb	r2, [r1, #0]
    3e56:	4b07      	ldr	r3, [pc, #28]	; (3e74 <MiMAC_SetAltAddress+0x2c>)
    3e58:	701a      	strb	r2, [r3, #0]
    MAC_PANID.v[1] = PANID[1];
    3e5a:	784a      	ldrb	r2, [r1, #1]
    3e5c:	705a      	strb	r2, [r3, #1]
    PHY_SetShortAddr(APP_ADDR);
    3e5e:	2001      	movs	r0, #1
    3e60:	4b05      	ldr	r3, [pc, #20]	; (3e78 <MiMAC_SetAltAddress+0x30>)
    3e62:	4798      	blx	r3
    PHY_SetPanId(MY_PAN_ID);
    3e64:	4805      	ldr	r0, [pc, #20]	; (3e7c <MiMAC_SetAltAddress+0x34>)
    3e66:	4b06      	ldr	r3, [pc, #24]	; (3e80 <MiMAC_SetAltAddress+0x38>)
    3e68:	4798      	blx	r3
}
    3e6a:	2001      	movs	r0, #1
    3e6c:	bd10      	pop	{r4, pc}
    3e6e:	46c0      	nop			; (mov r8, r8)
    3e70:	200003cc 	.word	0x200003cc
    3e74:	20000a40 	.word	0x20000a40
    3e78:	00003dcd 	.word	0x00003dcd
    3e7c:	00001111 	.word	0x00001111
    3e80:	00003dad 	.word	0x00003dad

00003e84 <mic_generator>:
{
    3e84:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e86:	46c6      	mov	lr, r8
    3e88:	b500      	push	{lr}
    3e8a:	b0a6      	sub	sp, #152	; 0x98
    3e8c:	0006      	movs	r6, r0
    3e8e:	000c      	movs	r4, r1
    3e90:	469c      	mov	ip, r3
    3e92:	992c      	ldr	r1, [sp, #176]	; 0xb0
    iterations = len / AES_BLOCKSIZE;
    3e94:	0925      	lsrs	r5, r4, #4
    if (len % AES_BLOCKSIZE != 0)
    3e96:	0723      	lsls	r3, r4, #28
    3e98:	d000      	beq.n	3e9c <mic_generator+0x18>
        iterations++;
    3e9a:	3501      	adds	r5, #1
    InitVect_in[0] = frame_control; //0x49
    3e9c:	4b40      	ldr	r3, [pc, #256]	; (3fa0 <mic_generator+0x11c>)
    3e9e:	701a      	strb	r2, [r3, #0]
    cbc_header_with_padding[0] = 0x00; // l(a)
    3ea0:	2300      	movs	r3, #0
    3ea2:	a802      	add	r0, sp, #8
    3ea4:	7003      	strb	r3, [r0, #0]
    cbc_header_with_padding[1] = 0x0d; // l(a)Header Length
    3ea6:	330d      	adds	r3, #13
    3ea8:	7043      	strb	r3, [r0, #1]
    cbc_header_with_padding[2] = frame_control; //frame_control;
    3eaa:	7082      	strb	r2, [r0, #2]
    3eac:	2200      	movs	r2, #0
        InitVect_in[i + 1] = SourceIEEEAddress[i];
    3eae:	4b3c      	ldr	r3, [pc, #240]	; (3fa0 <mic_generator+0x11c>)
    3eb0:	5c8f      	ldrb	r7, [r1, r2]
    3eb2:	18d0      	adds	r0, r2, r3
    3eb4:	7047      	strb	r7, [r0, #1]
        cbc_header_with_padding[i + 7] = SourceIEEEAddress[i];
    3eb6:	0010      	movs	r0, r2
    3eb8:	af02      	add	r7, sp, #8
    3eba:	46b8      	mov	r8, r7
    3ebc:	4440      	add	r0, r8
    3ebe:	5c8f      	ldrb	r7, [r1, r2]
    3ec0:	71c7      	strb	r7, [r0, #7]
    3ec2:	3201      	adds	r2, #1
    for (i = 0; i < 8; i++) {
    3ec4:	2a08      	cmp	r2, #8
    3ec6:	d1f3      	bne.n	3eb0 <mic_generator+0x2c>
        InitVect_in[i + 9] = FrameCounter.v[i];
    3ec8:	4663      	mov	r3, ip
    3eca:	466a      	mov	r2, sp
    3ecc:	71d3      	strb	r3, [r2, #7]
    3ece:	79d3      	ldrb	r3, [r2, #7]
    3ed0:	4833      	ldr	r0, [pc, #204]	; (3fa0 <mic_generator+0x11c>)
    3ed2:	7243      	strb	r3, [r0, #9]
        cbc_header_with_padding[i + 3] = FrameCounter.v[i];
    3ed4:	4642      	mov	r2, r8
    3ed6:	70d3      	strb	r3, [r2, #3]
        InitVect_in[i + 9] = FrameCounter.v[i];
    3ed8:	4663      	mov	r3, ip
    3eda:	041b      	lsls	r3, r3, #16
    3edc:	0e1b      	lsrs	r3, r3, #24
    3ede:	7283      	strb	r3, [r0, #10]
        cbc_header_with_padding[i + 3] = FrameCounter.v[i];
    3ee0:	7113      	strb	r3, [r2, #4]
        InitVect_in[i + 9] = FrameCounter.v[i];
    3ee2:	4663      	mov	r3, ip
    3ee4:	021b      	lsls	r3, r3, #8
    3ee6:	0e1b      	lsrs	r3, r3, #24
    3ee8:	72c3      	strb	r3, [r0, #11]
        cbc_header_with_padding[i + 3] = FrameCounter.v[i];
    3eea:	7153      	strb	r3, [r2, #5]
        InitVect_in[i + 9] = FrameCounter.v[i];
    3eec:	4663      	mov	r3, ip
    3eee:	0e1b      	lsrs	r3, r3, #24
    3ef0:	7303      	strb	r3, [r0, #12]
        cbc_header_with_padding[i + 3] = FrameCounter.v[i];
    3ef2:	7193      	strb	r3, [r2, #6]
    cbc_header_with_padding[15] = 0x00; // Padding
    3ef4:	2300      	movs	r3, #0
    3ef6:	73d3      	strb	r3, [r2, #15]
    InitVect_in[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
    3ef8:	2204      	movs	r2, #4
    3efa:	7342      	strb	r2, [r0, #13]
    InitVect_in[14] = 0x00; // 15 th byte padded to zero
    3efc:	7383      	strb	r3, [r0, #14]
    InitVect_in[15] = len; // For MIC calculation All preceding blocks will be incremented by 1
    3efe:	73c4      	strb	r4, [r0, #15]
    PHY_EncryptReq(&InitVect_in[0], mySecurityKey);
    3f00:	4928      	ldr	r1, [pc, #160]	; (3fa4 <mic_generator+0x120>)
    3f02:	4b29      	ldr	r3, [pc, #164]	; (3fa8 <mic_generator+0x124>)
    3f04:	4798      	blx	r3
    3f06:	2300      	movs	r3, #0
        copy_packet[i] = cbc_header_with_padding[i];
    3f08:	a906      	add	r1, sp, #24
    3f0a:	aa02      	add	r2, sp, #8
    3f0c:	5c9a      	ldrb	r2, [r3, r2]
    3f0e:	545a      	strb	r2, [r3, r1]
    3f10:	3301      	adds	r3, #1
    for (i = 0; i < AES_BLOCKSIZE; i++) {
    3f12:	2b10      	cmp	r3, #16
    3f14:	d1f9      	bne.n	3f0a <mic_generator+0x86>
    for (i = 16; i < len + AES_BLOCKSIZE; i++) {
    3f16:	0027      	movs	r7, r4
    3f18:	3710      	adds	r7, #16
    3f1a:	2f10      	cmp	r7, #16
    3f1c:	dd0a      	ble.n	3f34 <mic_generator+0xb0>
    3f1e:	2010      	movs	r0, #16
        copy_packet[i] = Payloadinfo[i - AES_BLOCKSIZE]; // Copying the Payload
    3f20:	a906      	add	r1, sp, #24
    3f22:	18f2      	adds	r2, r6, r3
    3f24:	3a10      	subs	r2, #16
    3f26:	7812      	ldrb	r2, [r2, #0]
    3f28:	540a      	strb	r2, [r1, r0]
    for (i = 16; i < len + AES_BLOCKSIZE; i++) {
    3f2a:	3301      	adds	r3, #1
    3f2c:	b2db      	uxtb	r3, r3
    3f2e:	0018      	movs	r0, r3
    3f30:	42bb      	cmp	r3, r7
    3f32:	dbf6      	blt.n	3f22 <mic_generator+0x9e>
    for (i = len + 16; i < (iterations * AES_BLOCKSIZE) + AES_BLOCKSIZE; i++) {
    3f34:	0023      	movs	r3, r4
    3f36:	3310      	adds	r3, #16
    3f38:	b2db      	uxtb	r3, r3
    3f3a:	001a      	movs	r2, r3
    3f3c:	3501      	adds	r5, #1
    3f3e:	0129      	lsls	r1, r5, #4
    3f40:	428b      	cmp	r3, r1
    3f42:	da07      	bge.n	3f54 <mic_generator+0xd0>
        copy_packet[i] = 0; // Padding
    3f44:	ac06      	add	r4, sp, #24
    3f46:	2000      	movs	r0, #0
    3f48:	54a0      	strb	r0, [r4, r2]
    for (i = len + 16; i < (iterations * AES_BLOCKSIZE) + AES_BLOCKSIZE; i++) {
    3f4a:	3301      	adds	r3, #1
    3f4c:	b2db      	uxtb	r3, r3
    3f4e:	001a      	movs	r2, r3
    3f50:	428b      	cmp	r3, r1
    3f52:	dbf9      	blt.n	3f48 <mic_generator+0xc4>
    for (i = 0; i < iterations + 1; i++) {
    3f54:	2200      	movs	r2, #0
    3f56:	2700      	movs	r7, #0
    3f58:	2d00      	cmp	r5, #0
    3f5a:	dd15      	ble.n	3f88 <mic_generator+0x104>
            InitVect_in[j] = InitVect_in[j] ^ copy_packet[j + (i * 16)];
    3f5c:	4e10      	ldr	r6, [pc, #64]	; (3fa0 <mic_generator+0x11c>)
    3f5e:	0112      	lsls	r2, r2, #4
    3f60:	2300      	movs	r3, #0
    3f62:	a906      	add	r1, sp, #24
    3f64:	188c      	adds	r4, r1, r2
    3f66:	1999      	adds	r1, r3, r6
    3f68:	5ce2      	ldrb	r2, [r4, r3]
    3f6a:	7808      	ldrb	r0, [r1, #0]
    3f6c:	4042      	eors	r2, r0
    3f6e:	700a      	strb	r2, [r1, #0]
    3f70:	3301      	adds	r3, #1
        for (j = 0; j < AES_BLOCKSIZE; j++) {
    3f72:	2b10      	cmp	r3, #16
    3f74:	d1f7      	bne.n	3f66 <mic_generator+0xe2>
        PHY_EncryptReq(&InitVect_in[0], mySecurityKey);
    3f76:	490b      	ldr	r1, [pc, #44]	; (3fa4 <mic_generator+0x120>)
    3f78:	4809      	ldr	r0, [pc, #36]	; (3fa0 <mic_generator+0x11c>)
    3f7a:	4b0b      	ldr	r3, [pc, #44]	; (3fa8 <mic_generator+0x124>)
    3f7c:	4798      	blx	r3
    for (i = 0; i < iterations + 1; i++) {
    3f7e:	3701      	adds	r7, #1
    3f80:	b2ff      	uxtb	r7, r7
    3f82:	003a      	movs	r2, r7
    3f84:	42af      	cmp	r7, r5
    3f86:	dbea      	blt.n	3f5e <mic_generator+0xda>
    3f88:	2300      	movs	r3, #0
        CBC_mic[i] = InitVect_in[i];
    3f8a:	4808      	ldr	r0, [pc, #32]	; (3fac <mic_generator+0x128>)
    3f8c:	4904      	ldr	r1, [pc, #16]	; (3fa0 <mic_generator+0x11c>)
    3f8e:	5cca      	ldrb	r2, [r1, r3]
    3f90:	54c2      	strb	r2, [r0, r3]
    3f92:	3301      	adds	r3, #1
    for (i = 0; i < AES_BLOCKSIZE; i++) {
    3f94:	2b10      	cmp	r3, #16
    3f96:	d1fa      	bne.n	3f8e <mic_generator+0x10a>
}
    3f98:	b026      	add	sp, #152	; 0x98
    3f9a:	bc04      	pop	{r2}
    3f9c:	4690      	mov	r8, r2
    3f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3fa0:	200003dc 	.word	0x200003dc
    3fa4:	2000000c 	.word	0x2000000c
    3fa8:	00003e1d 	.word	0x00003e1d
    3fac:	20000a2c 	.word	0x20000a2c

00003fb0 <DataEncrypt>:
{
    3fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fb2:	46de      	mov	lr, fp
    3fb4:	4657      	mov	r7, sl
    3fb6:	464e      	mov	r6, r9
    3fb8:	4645      	mov	r5, r8
    3fba:	b5e0      	push	{r5, r6, r7, lr}
    3fbc:	b08d      	sub	sp, #52	; 0x34
    3fbe:	4680      	mov	r8, r0
    3fc0:	000e      	movs	r6, r1
    3fc2:	0014      	movs	r4, r2
    3fc4:	001a      	movs	r2, r3
    iterations = *Payload_len / AES_BLOCKSIZE;
    3fc6:	7809      	ldrb	r1, [r1, #0]
    3fc8:	090d      	lsrs	r5, r1, #4
    if (*Payload_len % AES_BLOCKSIZE != 0)
    3fca:	070b      	lsls	r3, r1, #28
    3fcc:	d000      	beq.n	3fd0 <DataEncrypt+0x20>
        iterations++;
    3fce:	3501      	adds	r5, #1
    mic_generator(&Payloadinfo[0], *Payload_len, FrameControl, FrameCounter, MACInitParams.PAddress);
    3fd0:	4b36      	ldr	r3, [pc, #216]	; (40ac <DataEncrypt+0xfc>)
    3fd2:	685b      	ldr	r3, [r3, #4]
    3fd4:	9300      	str	r3, [sp, #0]
    3fd6:	0023      	movs	r3, r4
    3fd8:	4640      	mov	r0, r8
    3fda:	4f35      	ldr	r7, [pc, #212]	; (40b0 <DataEncrypt+0x100>)
    3fdc:	47b8      	blx	r7
    for (i = *Payload_len; i < iterations * AES_BLOCKSIZE; i++) {
    3fde:	7833      	ldrb	r3, [r6, #0]
    3fe0:	002e      	movs	r6, r5
    3fe2:	012d      	lsls	r5, r5, #4
    3fe4:	42ab      	cmp	r3, r5
    3fe6:	da07      	bge.n	3ff8 <DataEncrypt+0x48>
        Payloadinfo[i] = 0; // Padding
    3fe8:	2100      	movs	r1, #0
    3fea:	4642      	mov	r2, r8
    3fec:	54d1      	strb	r1, [r2, r3]
    for (i = *Payload_len; i < iterations * AES_BLOCKSIZE; i++) {
    3fee:	3301      	adds	r3, #1
    3ff0:	b2db      	uxtb	r3, r3
    3ff2:	42ab      	cmp	r3, r5
    3ff4:	dbfa      	blt.n	3fec <DataEncrypt+0x3c>
    3ff6:	4690      	mov	r8, r2
    CTR_Nonce_and_Counter[0] = 0x01; // L
    3ff8:	2201      	movs	r2, #1
    3ffa:	ab04      	add	r3, sp, #16
    3ffc:	701a      	strb	r2, [r3, #0]
        CTR_Nonce_and_Counter[i + 1] = MACInitParams.PAddress[i];
    3ffe:	4b2b      	ldr	r3, [pc, #172]	; (40ac <DataEncrypt+0xfc>)
    4000:	6858      	ldr	r0, [r3, #4]
    4002:	2300      	movs	r3, #0
    4004:	aa04      	add	r2, sp, #16
    4006:	18d2      	adds	r2, r2, r3
    4008:	5cc1      	ldrb	r1, [r0, r3]
    400a:	7051      	strb	r1, [r2, #1]
    400c:	3301      	adds	r3, #1
    for (i = 0; i < MY_ADDRESS_LENGTH; i++) {
    400e:	2b08      	cmp	r3, #8
    4010:	d1f8      	bne.n	4004 <DataEncrypt+0x54>
        CTR_Nonce_and_Counter[i + 9] = FrameCounter.v[i];
    4012:	ab04      	add	r3, sp, #16
    4014:	725c      	strb	r4, [r3, #9]
    4016:	0a22      	lsrs	r2, r4, #8
    4018:	729a      	strb	r2, [r3, #10]
    401a:	0c22      	lsrs	r2, r4, #16
    401c:	72da      	strb	r2, [r3, #11]
    401e:	0e24      	lsrs	r4, r4, #24
    4020:	731c      	strb	r4, [r3, #12]
    CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
    4022:	2204      	movs	r2, #4
    4024:	735a      	strb	r2, [r3, #13]
    CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
    4026:	2200      	movs	r2, #0
    4028:	739a      	strb	r2, [r3, #14]
    CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
    402a:	73da      	strb	r2, [r3, #15]
    for (i = 0; i < iterations + 1; i++) {
    402c:	1c73      	adds	r3, r6, #1
    402e:	4699      	mov	r9, r3
    4030:	2300      	movs	r3, #0
    4032:	469b      	mov	fp, r3
    4034:	9303      	str	r3, [sp, #12]
    4036:	464b      	mov	r3, r9
    4038:	2b00      	cmp	r3, #0
    403a:	dd2f      	ble.n	409c <DataEncrypt+0xec>
            block[j] = CTR_Nonce_and_Counter[j];
    403c:	ac08      	add	r4, sp, #32
    403e:	ad04      	add	r5, sp, #16
        PHY_EncryptReq(&block[0], mySecurityKey);
    4040:	4b1c      	ldr	r3, [pc, #112]	; (40b4 <DataEncrypt+0x104>)
    4042:	469a      	mov	sl, r3
                final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    4044:	4e1c      	ldr	r6, [pc, #112]	; (40b8 <DataEncrypt+0x108>)
    4046:	e017      	b.n	4078 <DataEncrypt+0xc8>
                Payloadinfo[j + (i - 1) * AES_BLOCKSIZE] = block[j] ^ Payloadinfo[j + (i - 1) * AES_BLOCKSIZE];
    4048:	5d1a      	ldrb	r2, [r3, r4]
    404a:	5ccf      	ldrb	r7, [r1, r3]
    404c:	407a      	eors	r2, r7
    404e:	54ca      	strb	r2, [r1, r3]
    4050:	3301      	adds	r3, #1
        for (j = 0; j < AES_BLOCKSIZE; j++) {
    4052:	2b10      	cmp	r3, #16
    4054:	d007      	beq.n	4066 <DataEncrypt+0xb6>
            if (CTR_Nonce_and_Counter[15] == 0) {
    4056:	2800      	cmp	r0, #0
    4058:	d1f6      	bne.n	4048 <DataEncrypt+0x98>
                final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    405a:	5d1a      	ldrb	r2, [r3, r4]
    405c:	4667      	mov	r7, ip
    405e:	5cff      	ldrb	r7, [r7, r3]
    4060:	407a      	eors	r2, r7
    4062:	54f2      	strb	r2, [r6, r3]
    4064:	e7f4      	b.n	4050 <DataEncrypt+0xa0>
        CTR_Nonce_and_Counter[15]++; // Increment Counter for next opration
    4066:	3001      	adds	r0, #1
    4068:	73e8      	strb	r0, [r5, #15]
    for (i = 0; i < iterations + 1; i++) {
    406a:	9f03      	ldr	r7, [sp, #12]
    406c:	3701      	adds	r7, #1
    406e:	b2fb      	uxtb	r3, r7
    4070:	9303      	str	r3, [sp, #12]
    4072:	469b      	mov	fp, r3
    4074:	454b      	cmp	r3, r9
    4076:	da11      	bge.n	409c <DataEncrypt+0xec>
        CTR_Nonce_and_Counter[i + 1] = MACInitParams.PAddress[i];
    4078:	2300      	movs	r3, #0
            block[j] = CTR_Nonce_and_Counter[j];
    407a:	5d5a      	ldrb	r2, [r3, r5]
    407c:	551a      	strb	r2, [r3, r4]
    407e:	3301      	adds	r3, #1
        for (j = 0; j < AES_BLOCKSIZE; j++) {
    4080:	2b10      	cmp	r3, #16
    4082:	d1fa      	bne.n	407a <DataEncrypt+0xca>
        PHY_EncryptReq(&block[0], mySecurityKey);
    4084:	490d      	ldr	r1, [pc, #52]	; (40bc <DataEncrypt+0x10c>)
    4086:	0020      	movs	r0, r4
    4088:	47d0      	blx	sl
            if (CTR_Nonce_and_Counter[15] == 0) {
    408a:	7be8      	ldrb	r0, [r5, #15]
                Payloadinfo[j + (i - 1) * AES_BLOCKSIZE] = block[j] ^ Payloadinfo[j + (i - 1) * AES_BLOCKSIZE];
    408c:	4659      	mov	r1, fp
    408e:	3901      	subs	r1, #1
    4090:	0109      	lsls	r1, r1, #4
    4092:	2300      	movs	r3, #0
    4094:	4441      	add	r1, r8
                final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    4096:	4a0a      	ldr	r2, [pc, #40]	; (40c0 <DataEncrypt+0x110>)
    4098:	4694      	mov	ip, r2
    409a:	e7dc      	b.n	4056 <DataEncrypt+0xa6>
}
    409c:	2001      	movs	r0, #1
    409e:	b00d      	add	sp, #52	; 0x34
    40a0:	bc3c      	pop	{r2, r3, r4, r5}
    40a2:	4690      	mov	r8, r2
    40a4:	4699      	mov	r9, r3
    40a6:	46a2      	mov	sl, r4
    40a8:	46ab      	mov	fp, r5
    40aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    40ac:	200003d4 	.word	0x200003d4
    40b0:	00003e85 	.word	0x00003e85
    40b4:	00003e1d 	.word	0x00003e1d
    40b8:	20000400 	.word	0x20000400
    40bc:	2000000c 	.word	0x2000000c
    40c0:	20000a2c 	.word	0x20000a2c

000040c4 <validate_mic>:
    if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3]) {
    40c4:	4b0e      	ldr	r3, [pc, #56]	; (4100 <validate_mic+0x3c>)
    40c6:	781a      	ldrb	r2, [r3, #0]
    40c8:	4b0e      	ldr	r3, [pc, #56]	; (4104 <validate_mic+0x40>)
    40ca:	781b      	ldrb	r3, [r3, #0]
        return false;
    40cc:	2000      	movs	r0, #0
    if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3]) {
    40ce:	429a      	cmp	r2, r3
    40d0:	d000      	beq.n	40d4 <validate_mic+0x10>
}
    40d2:	4770      	bx	lr
    if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3]) {
    40d4:	4b0a      	ldr	r3, [pc, #40]	; (4100 <validate_mic+0x3c>)
    40d6:	785a      	ldrb	r2, [r3, #1]
    40d8:	4b0a      	ldr	r3, [pc, #40]	; (4104 <validate_mic+0x40>)
    40da:	785b      	ldrb	r3, [r3, #1]
    40dc:	429a      	cmp	r2, r3
    40de:	d1f8      	bne.n	40d2 <validate_mic+0xe>
    40e0:	4b07      	ldr	r3, [pc, #28]	; (4100 <validate_mic+0x3c>)
    40e2:	789a      	ldrb	r2, [r3, #2]
    40e4:	4b07      	ldr	r3, [pc, #28]	; (4104 <validate_mic+0x40>)
    40e6:	789b      	ldrb	r3, [r3, #2]
    40e8:	429a      	cmp	r2, r3
    40ea:	d1f2      	bne.n	40d2 <validate_mic+0xe>
    40ec:	4b04      	ldr	r3, [pc, #16]	; (4100 <validate_mic+0x3c>)
    40ee:	78d8      	ldrb	r0, [r3, #3]
    40f0:	4b04      	ldr	r3, [pc, #16]	; (4104 <validate_mic+0x40>)
    40f2:	78db      	ldrb	r3, [r3, #3]
    40f4:	1ac0      	subs	r0, r0, r3
    40f6:	4243      	negs	r3, r0
    40f8:	4158      	adcs	r0, r3
    40fa:	b2c0      	uxtb	r0, r0
    40fc:	e7e9      	b.n	40d2 <validate_mic+0xe>
    40fe:	46c0      	nop			; (mov r8, r8)
    4100:	20000400 	.word	0x20000400
    4104:	20000a3c 	.word	0x20000a3c

00004108 <DataDecrypt>:
{
    4108:	b5f0      	push	{r4, r5, r6, r7, lr}
    410a:	46de      	mov	lr, fp
    410c:	4657      	mov	r7, sl
    410e:	464e      	mov	r6, r9
    4110:	4645      	mov	r5, r8
    4112:	b5e0      	push	{r5, r6, r7, lr}
    4114:	b091      	sub	sp, #68	; 0x44
    4116:	4681      	mov	r9, r0
    4118:	9106      	str	r1, [sp, #24]
    411a:	9204      	str	r2, [sp, #16]
    411c:	9305      	str	r3, [sp, #20]
    411e:	ab1a      	add	r3, sp, #104	; 0x68
    4120:	781b      	ldrb	r3, [r3, #0]
    4122:	9307      	str	r3, [sp, #28]
    iterations = *PayloadLen / 16;
    4124:	780b      	ldrb	r3, [r1, #0]
    4126:	091a      	lsrs	r2, r3, #4
    if (*PayloadLen % AES_BLOCKSIZE != 0)
    4128:	0719      	lsls	r1, r3, #28
    412a:	d000      	beq.n	412e <DataDecrypt+0x26>
        iterations++;
    412c:	3201      	adds	r2, #1
    for (i = *PayloadLen; i < iterations * AES_BLOCKSIZE; i++) {
    412e:	0010      	movs	r0, r2
    4130:	0112      	lsls	r2, r2, #4
    4132:	4293      	cmp	r3, r2
    4134:	da07      	bge.n	4146 <DataDecrypt+0x3e>
        Payload[i] = 0; // Padding
    4136:	2100      	movs	r1, #0
    4138:	464c      	mov	r4, r9
    413a:	54e1      	strb	r1, [r4, r3]
    for (i = *PayloadLen; i < iterations * AES_BLOCKSIZE; i++) {
    413c:	3301      	adds	r3, #1
    413e:	b2db      	uxtb	r3, r3
    4140:	4293      	cmp	r3, r2
    4142:	dbfa      	blt.n	413a <DataDecrypt+0x32>
    4144:	46a1      	mov	r9, r4
    CTR_Nonce_and_Counter[0] = 0x01; // L
    4146:	2201      	movs	r2, #1
    4148:	ab08      	add	r3, sp, #32
    414a:	701a      	strb	r2, [r3, #0]
    414c:	2300      	movs	r3, #0
        CTR_Nonce_and_Counter[i + 1] = SourceIEEEAddress[i];
    414e:	9c04      	ldr	r4, [sp, #16]
    4150:	aa08      	add	r2, sp, #32
    4152:	18d2      	adds	r2, r2, r3
    4154:	5ce1      	ldrb	r1, [r4, r3]
    4156:	7051      	strb	r1, [r2, #1]
    4158:	3301      	adds	r3, #1
    for (i = 0; i < MY_ADDRESS_LENGTH; i++) {
    415a:	2b08      	cmp	r3, #8
    415c:	d1f8      	bne.n	4150 <DataDecrypt+0x48>
        CTR_Nonce_and_Counter[i + 9] = FrameCounter.v[i];
    415e:	ab08      	add	r3, sp, #32
    4160:	9905      	ldr	r1, [sp, #20]
    4162:	7259      	strb	r1, [r3, #9]
    4164:	0a0a      	lsrs	r2, r1, #8
    4166:	729a      	strb	r2, [r3, #10]
    4168:	0c0a      	lsrs	r2, r1, #16
    416a:	72da      	strb	r2, [r3, #11]
    416c:	0e0a      	lsrs	r2, r1, #24
    416e:	731a      	strb	r2, [r3, #12]
    CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode
    4170:	2204      	movs	r2, #4
    4172:	735a      	strb	r2, [r3, #13]
    CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
    4174:	2200      	movs	r2, #0
    4176:	739a      	strb	r2, [r3, #14]
    CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
    4178:	73da      	strb	r2, [r3, #15]
    for (i = 0; i < iterations + 1; i++) {
    417a:	1c43      	adds	r3, r0, #1
    417c:	469a      	mov	sl, r3
    417e:	2500      	movs	r5, #0
    4180:	2300      	movs	r3, #0
    4182:	4698      	mov	r8, r3
    4184:	4653      	mov	r3, sl
    4186:	2b00      	cmp	r3, #0
    4188:	dd2e      	ble.n	41e8 <DataDecrypt+0xe0>
            block[j] = CTR_Nonce_and_Counter[j];
    418a:	ac0c      	add	r4, sp, #48	; 0x30
    418c:	ae08      	add	r6, sp, #32
        PHY_EncryptReq(&block[0], mySecurityKey);
    418e:	4b26      	ldr	r3, [pc, #152]	; (4228 <DataDecrypt+0x120>)
    4190:	469b      	mov	fp, r3
                CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    4192:	4f26      	ldr	r7, [pc, #152]	; (422c <DataDecrypt+0x124>)
    4194:	4643      	mov	r3, r8
    4196:	9303      	str	r3, [sp, #12]
    4198:	46a8      	mov	r8, r5
    419a:	e014      	b.n	41c6 <DataDecrypt+0xbe>
                Payload[j + (i - 1) * 16] = block[j] ^ Payload[j + (i - 1) * 16];
    419c:	5d1a      	ldrb	r2, [r3, r4]
    419e:	5ce9      	ldrb	r1, [r5, r3]
    41a0:	404a      	eors	r2, r1
    41a2:	54ea      	strb	r2, [r5, r3]
    41a4:	3301      	adds	r3, #1
        for (j = 0; j < 16; j++) {
    41a6:	2b10      	cmp	r3, #16
    41a8:	d004      	beq.n	41b4 <DataDecrypt+0xac>
            if (CTR_Nonce_and_Counter[15] == 0) {
    41aa:	2800      	cmp	r0, #0
    41ac:	d1f6      	bne.n	419c <DataDecrypt+0x94>
                CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    41ae:	5d1a      	ldrb	r2, [r3, r4]
    41b0:	54fa      	strb	r2, [r7, r3]
    41b2:	e7f7      	b.n	41a4 <DataDecrypt+0x9c>
        CTR_Nonce_and_Counter[15]++; // Increment Counter for next opration
    41b4:	3001      	adds	r0, #1
    41b6:	73f0      	strb	r0, [r6, #15]
    for (i = 0; i < iterations + 1; i++) {
    41b8:	9d03      	ldr	r5, [sp, #12]
    41ba:	3501      	adds	r5, #1
    41bc:	b2eb      	uxtb	r3, r5
    41be:	9303      	str	r3, [sp, #12]
    41c0:	4698      	mov	r8, r3
    41c2:	4553      	cmp	r3, sl
    41c4:	da10      	bge.n	41e8 <DataDecrypt+0xe0>
    CTR_Nonce_and_Counter[0] = 0x01; // L
    41c6:	2300      	movs	r3, #0
            block[j] = CTR_Nonce_and_Counter[j];
    41c8:	5d9a      	ldrb	r2, [r3, r6]
    41ca:	551a      	strb	r2, [r3, r4]
    41cc:	3301      	adds	r3, #1
        for (j = 0; j < 16; j++) {
    41ce:	2b10      	cmp	r3, #16
    41d0:	d1fa      	bne.n	41c8 <DataDecrypt+0xc0>
        PHY_EncryptReq(&block[0], mySecurityKey);
    41d2:	4917      	ldr	r1, [pc, #92]	; (4230 <DataDecrypt+0x128>)
    41d4:	0020      	movs	r0, r4
    41d6:	47d8      	blx	fp
            if (CTR_Nonce_and_Counter[15] == 0) {
    41d8:	7bf0      	ldrb	r0, [r6, #15]
                Payload[j + (i - 1) * 16] = block[j] ^ Payload[j + (i - 1) * 16];
    41da:	4642      	mov	r2, r8
    41dc:	3a01      	subs	r2, #1
    41de:	0112      	lsls	r2, r2, #4
    41e0:	2300      	movs	r3, #0
    41e2:	444a      	add	r2, r9
    41e4:	0015      	movs	r5, r2
    41e6:	e7e0      	b.n	41aa <DataDecrypt+0xa2>
    *PayloadLen = *PayloadLen - 4;
    41e8:	9b06      	ldr	r3, [sp, #24]
    41ea:	7819      	ldrb	r1, [r3, #0]
    41ec:	3904      	subs	r1, #4
    41ee:	b2c9      	uxtb	r1, r1
    41f0:	7019      	strb	r1, [r3, #0]
    mic_generator(&Payload[0], *PayloadLen, FrameControl, FrameCounter, SourceIEEEAddress);
    41f2:	9b04      	ldr	r3, [sp, #16]
    41f4:	9300      	str	r3, [sp, #0]
    41f6:	9b05      	ldr	r3, [sp, #20]
    41f8:	9a07      	ldr	r2, [sp, #28]
    41fa:	4648      	mov	r0, r9
    41fc:	4c0d      	ldr	r4, [pc, #52]	; (4234 <DataDecrypt+0x12c>)
    41fe:	47a0      	blx	r4
    4200:	2300      	movs	r3, #0
        final_mic_value[i] = CTR_mic[i] ^ CBC_mic[i];
    4202:	4d0d      	ldr	r5, [pc, #52]	; (4238 <DataDecrypt+0x130>)
    4204:	4c09      	ldr	r4, [pc, #36]	; (422c <DataDecrypt+0x124>)
    4206:	480d      	ldr	r0, [pc, #52]	; (423c <DataDecrypt+0x134>)
    4208:	5ce2      	ldrb	r2, [r4, r3]
    420a:	5cc1      	ldrb	r1, [r0, r3]
    420c:	404a      	eors	r2, r1
    420e:	54ea      	strb	r2, [r5, r3]
    4210:	3301      	adds	r3, #1
    for (i = 0; i < 16; i++) {
    4212:	2b10      	cmp	r3, #16
    4214:	d1f8      	bne.n	4208 <DataDecrypt+0x100>
    return validate_mic();
    4216:	4b0a      	ldr	r3, [pc, #40]	; (4240 <DataDecrypt+0x138>)
    4218:	4798      	blx	r3
}
    421a:	b011      	add	sp, #68	; 0x44
    421c:	bc3c      	pop	{r2, r3, r4, r5}
    421e:	4690      	mov	r8, r2
    4220:	4699      	mov	r9, r3
    4222:	46a2      	mov	sl, r4
    4224:	46ab      	mov	fp, r5
    4226:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4228:	00003e1d 	.word	0x00003e1d
    422c:	200003ec 	.word	0x200003ec
    4230:	2000000c 	.word	0x2000000c
    4234:	00003e85 	.word	0x00003e85
    4238:	20000400 	.word	0x20000400
    423c:	20000a2c 	.word	0x20000a2c
    4240:	000040c5 	.word	0x000040c5

00004244 <MiMAC_SetChannel>:
{
    4244:	b510      	push	{r4, lr}
		return false;
    4246:	2300      	movs	r3, #0
	if (channel < 0x00 || channel > 0x0A) {
    4248:	280a      	cmp	r0, #10
    424a:	d901      	bls.n	4250 <MiMAC_SetChannel+0xc>
}
    424c:	0018      	movs	r0, r3
    424e:	bd10      	pop	{r4, pc}
	MACCurrentChannel = channel;
    4250:	4b02      	ldr	r3, [pc, #8]	; (425c <MiMAC_SetChannel+0x18>)
    4252:	7018      	strb	r0, [r3, #0]
	PHY_SetChannel(channel);
    4254:	4b02      	ldr	r3, [pc, #8]	; (4260 <MiMAC_SetChannel+0x1c>)
    4256:	4798      	blx	r3
	return true;
    4258:	2301      	movs	r3, #1
    425a:	e7f7      	b.n	424c <MiMAC_SetChannel+0x8>
    425c:	20000a42 	.word	0x20000a42
    4260:	00003d89 	.word	0x00003d89

00004264 <MiMAC_SendPacket>:
{
    4264:	b5f0      	push	{r4, r5, r6, r7, lr}
    4266:	46de      	mov	lr, fp
    4268:	4657      	mov	r7, sl
    426a:	464e      	mov	r6, r9
    426c:	4645      	mov	r5, r8
    426e:	b5e0      	push	{r5, r6, r7, lr}
    4270:	b0a7      	sub	sp, #156	; 0x9c
    4272:	9003      	str	r0, [sp, #12]
    4274:	9104      	str	r1, [sp, #16]
    4276:	0015      	movs	r5, r2
    4278:	0a2d      	lsrs	r5, r5, #8
    427a:	9205      	str	r2, [sp, #20]
    427c:	9301      	str	r3, [sp, #4]
    427e:	b2c0      	uxtb	r0, r0
    4280:	0683      	lsls	r3, r0, #26
    4282:	0fdb      	lsrs	r3, r3, #31
    4284:	4698      	mov	r8, r3
    4286:	468a      	mov	sl, r1
    4288:	b2d7      	uxtb	r7, r2
    428a:	b2ed      	uxtb	r5, r5
    if (transParam.flags.bits.broadcast) {
    428c:	0743      	lsls	r3, r0, #29
    428e:	d500      	bpl.n	4292 <MiMAC_SendPacket+0x2e>
        transParam.altDestAddr = true;
    4290:	2701      	movs	r7, #1
    if (transParam.flags.bits.secEn) {
    4292:	2308      	movs	r3, #8
    4294:	4003      	ands	r3, r0
    4296:	001a      	movs	r2, r3
        transParam.altSrcAddr = false;
    4298:	4253      	negs	r3, r2
    429a:	4153      	adcs	r3, r2
    429c:	425b      	negs	r3, r3
    429e:	401d      	ands	r5, r3
    if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND) {
    42a0:	2303      	movs	r3, #3
    42a2:	4003      	ands	r3, r0
    42a4:	2b01      	cmp	r3, #1
    42a6:	d03b      	beq.n	4320 <MiMAC_SendPacket+0xbc>
    else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA) {
    42a8:	425a      	negs	r2, r3
    42aa:	415a      	adcs	r2, r3
        frameControl = 0x03;
    42ac:	b2d2      	uxtb	r2, r2
    42ae:	4691      	mov	r9, r2
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    42b0:	aa03      	add	r2, sp, #12
    42b2:	8952      	ldrh	r2, [r2, #10]
    42b4:	49a7      	ldr	r1, [pc, #668]	; (4554 <MiMAC_SendPacket+0x2f0>)
    42b6:	8809      	ldrh	r1, [r1, #0]
    42b8:	4291      	cmp	r1, r2
    42ba:	d034      	beq.n	4326 <MiMAC_SendPacket+0xc2>
        IntraPAN = false;
    42bc:	2200      	movs	r2, #0
    42be:	4693      	mov	fp, r2
        headerLength = 7;
    42c0:	3207      	adds	r2, #7
    if (transParam.altDestAddr) {
    42c2:	9702      	str	r7, [sp, #8]
        headerLength += 8;
    42c4:	0016      	movs	r6, r2
    42c6:	3608      	adds	r6, #8
    if (transParam.altDestAddr) {
    42c8:	2f00      	cmp	r7, #0
    42ca:	d000      	beq.n	42ce <MiMAC_SendPacket+0x6a>
        headerLength += 2;
    42cc:	1c96      	adds	r6, r2, #2
    if (transParam.altSrcAddr) {
    42ce:	2d00      	cmp	r5, #0
    42d0:	d038      	beq.n	4344 <MiMAC_SendPacket+0xe0>
        headerLength += 2;
    42d2:	3602      	adds	r6, #2
    42d4:	b2f6      	uxtb	r6, r6
    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false) {
    42d6:	2224      	movs	r2, #36	; 0x24
    42d8:	4010      	ands	r0, r2
    42da:	2820      	cmp	r0, #32
    42dc:	d035      	beq.n	434a <MiMAC_SendPacket+0xe6>
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE) {
    42de:	2b03      	cmp	r3, #3
    42e0:	d038      	beq.n	4354 <MiMAC_SendPacket+0xf0>
    if (transParam.flags.bits.secEn) {
    42e2:	aa03      	add	r2, sp, #12
    42e4:	4643      	mov	r3, r8
    42e6:	015b      	lsls	r3, r3, #5
    42e8:	7814      	ldrb	r4, [r2, #0]
    42ea:	2120      	movs	r1, #32
    42ec:	438c      	bics	r4, r1
    42ee:	431c      	orrs	r4, r3
    42f0:	7014      	strb	r4, [r2, #0]
    42f2:	0723      	lsls	r3, r4, #28
    42f4:	d435      	bmi.n	4362 <MiMAC_SendPacket+0xfe>
    packet[loc++] = headerLength;
    42f6:	ab06      	add	r3, sp, #24
    42f8:	701e      	strb	r6, [r3, #0]
        packet[loc++] = MACPayloadLen + headerLength;
    42fa:	aa30      	add	r2, sp, #192	; 0xc0
    42fc:	7812      	ldrb	r2, [r2, #0]
    42fe:	18b6      	adds	r6, r6, r2
    4300:	705e      	strb	r6, [r3, #1]
    packet[loc++] = frameControl;
    4302:	ab06      	add	r3, sp, #24
    4304:	464a      	mov	r2, r9
    4306:	709a      	strb	r2, [r3, #2]
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE) {
    4308:	43e3      	mvns	r3, r4
    430a:	079b      	lsls	r3, r3, #30
    430c:	d03c      	beq.n	4388 <MiMAC_SendPacket+0x124>
        if (transParam.altDestAddr && transParam.altSrcAddr) {
    430e:	9b02      	ldr	r3, [sp, #8]
    4310:	2b00      	cmp	r3, #0
    4312:	d05c      	beq.n	43ce <MiMAC_SendPacket+0x16a>
    4314:	2d00      	cmp	r5, #0
    4316:	d041      	beq.n	439c <MiMAC_SendPacket+0x138>
            packet[loc++] = 0x88;
    4318:	2288      	movs	r2, #136	; 0x88
    431a:	ab06      	add	r3, sp, #24
    431c:	70da      	strb	r2, [r3, #3]
    431e:	e040      	b.n	43a2 <MiMAC_SendPacket+0x13e>
        frameControl = 0x03;
    4320:	2203      	movs	r2, #3
    4322:	4691      	mov	r9, r2
    4324:	e7c4      	b.n	42b0 <MiMAC_SendPacket+0x4c>
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    4326:	498c      	ldr	r1, [pc, #560]	; (4558 <MiMAC_SendPacket+0x2f4>)
    4328:	428a      	cmp	r2, r1
    432a:	d007      	beq.n	433c <MiMAC_SendPacket+0xd8>
        frameControl |= 0x40;
    432c:	2240      	movs	r2, #64	; 0x40
    432e:	4649      	mov	r1, r9
    4330:	4311      	orrs	r1, r2
    4332:	4689      	mov	r9, r1
        IntraPAN = true;
    4334:	3a3f      	subs	r2, #63	; 0x3f
    4336:	4693      	mov	fp, r2
        headerLength = 5;
    4338:	3204      	adds	r2, #4
        IntraPAN = true;
    433a:	e7c2      	b.n	42c2 <MiMAC_SendPacket+0x5e>
        IntraPAN = false;
    433c:	2200      	movs	r2, #0
    433e:	4693      	mov	fp, r2
        headerLength = 7;
    4340:	3207      	adds	r2, #7
    4342:	e7be      	b.n	42c2 <MiMAC_SendPacket+0x5e>
        headerLength += 8;
    4344:	3608      	adds	r6, #8
    4346:	b2f6      	uxtb	r6, r6
    4348:	e7c5      	b.n	42d6 <MiMAC_SendPacket+0x72>
        frameControl |= 0x20;
    434a:	3a04      	subs	r2, #4
    434c:	4649      	mov	r1, r9
    434e:	4311      	orrs	r1, r2
    4350:	4689      	mov	r9, r1
    4352:	e7c4      	b.n	42de <MiMAC_SendPacket+0x7a>
        transParam.altSrcAddr = true;
    4354:	2501      	movs	r5, #1
        transParam.flags.bits.ackReq = false;
    4356:	2300      	movs	r3, #0
    4358:	4698      	mov	r8, r3
        IntraPAN = false;
    435a:	469b      	mov	fp, r3
        frameControl = 0x00;
    435c:	4699      	mov	r9, r3
        headerLength = 7;
    435e:	2607      	movs	r6, #7
    4360:	e7bf      	b.n	42e2 <MiMAC_SendPacket+0x7e>
        frameControl |= 0x08;
    4362:	2308      	movs	r3, #8
    4364:	464a      	mov	r2, r9
    4366:	431a      	orrs	r2, r3
    4368:	4691      	mov	r9, r2
        DataEncrypt(MACPayload, &MACPayloadLen, OutgoingFrameCounter, frameControl);
    436a:	4b7c      	ldr	r3, [pc, #496]	; (455c <MiMAC_SendPacket+0x2f8>)
    436c:	681a      	ldr	r2, [r3, #0]
    436e:	464b      	mov	r3, r9
    4370:	a930      	add	r1, sp, #192	; 0xc0
    4372:	9801      	ldr	r0, [sp, #4]
    4374:	4f7a      	ldr	r7, [pc, #488]	; (4560 <MiMAC_SendPacket+0x2fc>)
    4376:	47b8      	blx	r7
    packet[loc++] = headerLength;
    4378:	ab06      	add	r3, sp, #24
    437a:	701e      	strb	r6, [r3, #0]
        packet[loc++] = MACPayloadLen + headerLength + 9;
    437c:	aa30      	add	r2, sp, #192	; 0xc0
    437e:	7812      	ldrb	r2, [r2, #0]
    4380:	3209      	adds	r2, #9
    4382:	18b6      	adds	r6, r6, r2
    4384:	705e      	strb	r6, [r3, #1]
    4386:	e7bc      	b.n	4302 <MiMAC_SendPacket+0x9e>
        packet[loc++] = 0x80;
    4388:	ab06      	add	r3, sp, #24
    438a:	2280      	movs	r2, #128	; 0x80
    438c:	70da      	strb	r2, [r3, #3]
        packet[loc++] = IEEESeqNum++;
    438e:	4975      	ldr	r1, [pc, #468]	; (4564 <MiMAC_SendPacket+0x300>)
    4390:	780a      	ldrb	r2, [r1, #0]
    4392:	1c50      	adds	r0, r2, #1
    4394:	7008      	strb	r0, [r1, #0]
    4396:	711a      	strb	r2, [r3, #4]
    4398:	2205      	movs	r2, #5
    439a:	e03f      	b.n	441c <MiMAC_SendPacket+0x1b8>
            packet[loc++] = 0xC8;
    439c:	22c8      	movs	r2, #200	; 0xc8
    439e:	ab06      	add	r3, sp, #24
    43a0:	70da      	strb	r2, [r3, #3]
        packet[loc++] = IEEESeqNum++;
    43a2:	4b70      	ldr	r3, [pc, #448]	; (4564 <MiMAC_SendPacket+0x300>)
    43a4:	781a      	ldrb	r2, [r3, #0]
    43a6:	1c51      	adds	r1, r2, #1
    43a8:	7019      	strb	r1, [r3, #0]
    43aa:	ab06      	add	r3, sp, #24
    43ac:	711a      	strb	r2, [r3, #4]
        packet[loc++] = transParam.DestPANID.v[0];
    43ae:	aa03      	add	r2, sp, #12
    43b0:	7a91      	ldrb	r1, [r2, #10]
    43b2:	7159      	strb	r1, [r3, #5]
        packet[loc++] = transParam.DestPANID.v[1];
    43b4:	7ad2      	ldrb	r2, [r2, #11]
    43b6:	719a      	strb	r2, [r3, #6]
        if (transParam.flags.bits.broadcast) {
    43b8:	0763      	lsls	r3, r4, #29
    43ba:	d42a      	bmi.n	4412 <MiMAC_SendPacket+0x1ae>
                packet[loc++] = transParam.DestAddress[0];
    43bc:	ab06      	add	r3, sp, #24
    43be:	4652      	mov	r2, sl
    43c0:	7812      	ldrb	r2, [r2, #0]
    43c2:	71da      	strb	r2, [r3, #7]
                packet[loc++] = transParam.DestAddress[1];
    43c4:	4652      	mov	r2, sl
    43c6:	7852      	ldrb	r2, [r2, #1]
    43c8:	721a      	strb	r2, [r3, #8]
    43ca:	2209      	movs	r2, #9
    43cc:	e026      	b.n	441c <MiMAC_SendPacket+0x1b8>
        else if (transParam.altDestAddr == 0 && transParam.altSrcAddr == 1) {
    43ce:	2d00      	cmp	r5, #0
    43d0:	d00f      	beq.n	43f2 <MiMAC_SendPacket+0x18e>
            packet[loc++] = 0x8C;
    43d2:	ab06      	add	r3, sp, #24
    43d4:	228c      	movs	r2, #140	; 0x8c
    43d6:	70da      	strb	r2, [r3, #3]
        packet[loc++] = IEEESeqNum++;
    43d8:	4962      	ldr	r1, [pc, #392]	; (4564 <MiMAC_SendPacket+0x300>)
    43da:	780a      	ldrb	r2, [r1, #0]
    43dc:	1c50      	adds	r0, r2, #1
    43de:	7008      	strb	r0, [r1, #0]
    43e0:	711a      	strb	r2, [r3, #4]
        packet[loc++] = transParam.DestPANID.v[0];
    43e2:	aa03      	add	r2, sp, #12
    43e4:	7a91      	ldrb	r1, [r2, #10]
    43e6:	7159      	strb	r1, [r3, #5]
        packet[loc++] = transParam.DestPANID.v[1];
    43e8:	7ad2      	ldrb	r2, [r2, #11]
    43ea:	719a      	strb	r2, [r3, #6]
        if (transParam.flags.bits.broadcast) {
    43ec:	0763      	lsls	r3, r4, #29
    43ee:	d410      	bmi.n	4412 <MiMAC_SendPacket+0x1ae>
    43f0:	e08f      	b.n	4512 <MiMAC_SendPacket+0x2ae>
            packet[loc++] = 0xCC;
    43f2:	ab06      	add	r3, sp, #24
    43f4:	22cc      	movs	r2, #204	; 0xcc
    43f6:	70da      	strb	r2, [r3, #3]
        packet[loc++] = IEEESeqNum++;
    43f8:	495a      	ldr	r1, [pc, #360]	; (4564 <MiMAC_SendPacket+0x300>)
    43fa:	780a      	ldrb	r2, [r1, #0]
    43fc:	1c50      	adds	r0, r2, #1
    43fe:	7008      	strb	r0, [r1, #0]
    4400:	711a      	strb	r2, [r3, #4]
        packet[loc++] = transParam.DestPANID.v[0];
    4402:	aa03      	add	r2, sp, #12
    4404:	7a91      	ldrb	r1, [r2, #10]
    4406:	7159      	strb	r1, [r3, #5]
        packet[loc++] = transParam.DestPANID.v[1];
    4408:	7ad2      	ldrb	r2, [r2, #11]
    440a:	719a      	strb	r2, [r3, #6]
        if (transParam.flags.bits.broadcast) {
    440c:	0763      	lsls	r3, r4, #29
    440e:	d400      	bmi.n	4412 <MiMAC_SendPacket+0x1ae>
    4410:	e07b      	b.n	450a <MiMAC_SendPacket+0x2a6>
            packet[loc++] = 0xFF;
    4412:	ab06      	add	r3, sp, #24
    4414:	22ff      	movs	r2, #255	; 0xff
    4416:	71da      	strb	r2, [r3, #7]
            packet[loc++] = 0xFF;
    4418:	721a      	strb	r2, [r3, #8]
    441a:	3af6      	subs	r2, #246	; 0xf6
    if (IntraPAN == false) {
    441c:	465b      	mov	r3, fp
    441e:	2b00      	cmp	r3, #0
    4420:	d109      	bne.n	4436 <MiMAC_SendPacket+0x1d2>
        packet[loc++] = MAC_PANID.v[0];
    4422:	1c53      	adds	r3, r2, #1
    4424:	b2db      	uxtb	r3, r3
    4426:	a906      	add	r1, sp, #24
    4428:	484a      	ldr	r0, [pc, #296]	; (4554 <MiMAC_SendPacket+0x2f0>)
    442a:	7804      	ldrb	r4, [r0, #0]
    442c:	548c      	strb	r4, [r1, r2]
        packet[loc++] = MAC_PANID.v[1];
    442e:	3202      	adds	r2, #2
    4430:	b2d2      	uxtb	r2, r2
    4432:	7840      	ldrb	r0, [r0, #1]
    4434:	54c8      	strb	r0, [r1, r3]
    if (transParam.altSrcAddr) {
    4436:	2d00      	cmp	r5, #0
    4438:	d100      	bne.n	443c <MiMAC_SendPacket+0x1d8>
    443a:	e075      	b.n	4528 <MiMAC_SendPacket+0x2c4>
        packet[loc++] = myNetworkAddress.v[0];
    443c:	a906      	add	r1, sp, #24
    443e:	484a      	ldr	r0, [pc, #296]	; (4568 <MiMAC_SendPacket+0x304>)
    4440:	7803      	ldrb	r3, [r0, #0]
    4442:	548b      	strb	r3, [r1, r2]
        packet[loc++] = myNetworkAddress.v[1];
    4444:	1c93      	adds	r3, r2, #2
    4446:	b2db      	uxtb	r3, r3
        packet[loc++] = myNetworkAddress.v[0];
    4448:	3201      	adds	r2, #1
        packet[loc++] = myNetworkAddress.v[1];
    444a:	b2d2      	uxtb	r2, r2
    444c:	7840      	ldrb	r0, [r0, #1]
    444e:	5488      	strb	r0, [r1, r2]
    if (transParam.flags.bits.secEn) {
    4450:	aa03      	add	r2, sp, #12
    4452:	4641      	mov	r1, r8
    4454:	0149      	lsls	r1, r1, #5
    4456:	7816      	ldrb	r6, [r2, #0]
    4458:	2020      	movs	r0, #32
    445a:	4386      	bics	r6, r0
    445c:	430e      	orrs	r6, r1
    445e:	7016      	strb	r6, [r2, #0]
    4460:	0732      	lsls	r2, r6, #28
    4462:	d515      	bpl.n	4490 <MiMAC_SendPacket+0x22c>
    4464:	0019      	movs	r1, r3
    4466:	2200      	movs	r2, #0
            packet[loc++] = OutgoingFrameCounter.v[i];
    4468:	ad06      	add	r5, sp, #24
    446a:	4f3c      	ldr	r7, [pc, #240]	; (455c <MiMAC_SendPacket+0x2f8>)
    446c:	1c48      	adds	r0, r1, #1
    446e:	5cbc      	ldrb	r4, [r7, r2]
    4470:	546c      	strb	r4, [r5, r1]
    4472:	3201      	adds	r2, #1
    4474:	b2c1      	uxtb	r1, r0
        for (i = 0; i < 4; i++) {
    4476:	2a04      	cmp	r2, #4
    4478:	d1f8      	bne.n	446c <MiMAC_SendPacket+0x208>
    447a:	1d1a      	adds	r2, r3, #4
    447c:	b2d2      	uxtb	r2, r2
        OutgoingFrameCounter.Val++;
    447e:	4837      	ldr	r0, [pc, #220]	; (455c <MiMAC_SendPacket+0x2f8>)
    4480:	6801      	ldr	r1, [r0, #0]
    4482:	3101      	adds	r1, #1
    4484:	6001      	str	r1, [r0, #0]
        packet[loc++] = myKeySequenceNumber;
    4486:	3305      	adds	r3, #5
    4488:	b2db      	uxtb	r3, r3
    448a:	2000      	movs	r0, #0
    448c:	a906      	add	r1, sp, #24
    448e:	5488      	strb	r0, [r1, r2]
    for (i = 0; i < MACPayloadLen; i++) {
    4490:	aa30      	add	r2, sp, #192	; 0xc0
    4492:	7811      	ldrb	r1, [r2, #0]
    4494:	2900      	cmp	r1, #0
    4496:	d056      	beq.n	4546 <MiMAC_SendPacket+0x2e2>
    4498:	9a01      	ldr	r2, [sp, #4]
    449a:	1859      	adds	r1, r3, r1
    449c:	b2c9      	uxtb	r1, r1
        packet[loc++] = MACPayload[i];
    449e:	ad06      	add	r5, sp, #24
    44a0:	1c58      	adds	r0, r3, #1
    44a2:	7814      	ldrb	r4, [r2, #0]
    44a4:	54ec      	strb	r4, [r5, r3]
    44a6:	3201      	adds	r2, #1
    44a8:	b2c3      	uxtb	r3, r0
    for (i = 0; i < MACPayloadLen; i++) {
    44aa:	428b      	cmp	r3, r1
    44ac:	d1f8      	bne.n	44a0 <MiMAC_SendPacket+0x23c>
    packet[loc++] = final_mic_value[0];
    44ae:	aa06      	add	r2, sp, #24
    44b0:	4b2e      	ldr	r3, [pc, #184]	; (456c <MiMAC_SendPacket+0x308>)
    44b2:	7818      	ldrb	r0, [r3, #0]
    44b4:	5450      	strb	r0, [r2, r1]
    44b6:	1c48      	adds	r0, r1, #1
    packet[loc++] = final_mic_value[1];
    44b8:	b2c0      	uxtb	r0, r0
    44ba:	785c      	ldrb	r4, [r3, #1]
    44bc:	5414      	strb	r4, [r2, r0]
    44be:	1c88      	adds	r0, r1, #2
    packet[loc++] = final_mic_value[2];
    44c0:	b2c0      	uxtb	r0, r0
    44c2:	789c      	ldrb	r4, [r3, #2]
    44c4:	5414      	strb	r4, [r2, r0]
    44c6:	3103      	adds	r1, #3
    packet[loc++] = final_mic_value[3];
    44c8:	b2c9      	uxtb	r1, r1
    44ca:	78db      	ldrb	r3, [r3, #3]
    44cc:	5453      	strb	r3, [r2, r1]
    trx_status.bits.TX_BUSY = 1;
    44ce:	4a28      	ldr	r2, [pc, #160]	; (4570 <MiMAC_SendPacket+0x30c>)
    44d0:	7813      	ldrb	r3, [r2, #0]
    44d2:	2101      	movs	r1, #1
    44d4:	430b      	orrs	r3, r1
    44d6:	7013      	strb	r3, [r2, #0]
    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false) {
    44d8:	2324      	movs	r3, #36	; 0x24
    44da:	401e      	ands	r6, r3
    44dc:	2e20      	cmp	r6, #32
    44de:	d034      	beq.n	454a <MiMAC_SendPacket+0x2e6>
        trx_status.bits.TX_PENDING_ACK = 0;
    44e0:	4a23      	ldr	r2, [pc, #140]	; (4570 <MiMAC_SendPacket+0x30c>)
    44e2:	7813      	ldrb	r3, [r2, #0]
    44e4:	2102      	movs	r1, #2
    44e6:	438b      	bics	r3, r1
    44e8:	7013      	strb	r3, [r2, #0]
    PHY_DataReq(packet);
    44ea:	a806      	add	r0, sp, #24
    44ec:	4b21      	ldr	r3, [pc, #132]	; (4574 <MiMAC_SendPacket+0x310>)
    44ee:	4798      	blx	r3
    return !trx_status.bits.TX_FAIL;
    44f0:	4b1f      	ldr	r3, [pc, #124]	; (4570 <MiMAC_SendPacket+0x30c>)
    44f2:	7818      	ldrb	r0, [r3, #0]
    44f4:	0740      	lsls	r0, r0, #29
    44f6:	0fc0      	lsrs	r0, r0, #31
    44f8:	2301      	movs	r3, #1
    44fa:	4058      	eors	r0, r3
}
    44fc:	b027      	add	sp, #156	; 0x9c
    44fe:	bc3c      	pop	{r2, r3, r4, r5}
    4500:	4690      	mov	r8, r2
    4502:	4699      	mov	r9, r3
    4504:	46a2      	mov	sl, r4
    4506:	46ab      	mov	fp, r5
    4508:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (transParam.altDestAddr) {
    450a:	9b02      	ldr	r3, [sp, #8]
    450c:	2b00      	cmp	r3, #0
    450e:	d000      	beq.n	4512 <MiMAC_SendPacket+0x2ae>
    4510:	e754      	b.n	43bc <MiMAC_SendPacket+0x158>
        headerLength = 7;
    4512:	2300      	movs	r3, #0
    4514:	4650      	mov	r0, sl
                    packet[loc++] = transParam.DestAddress[i];
    4516:	aa06      	add	r2, sp, #24
    4518:	18d2      	adds	r2, r2, r3
    451a:	5cc1      	ldrb	r1, [r0, r3]
    451c:	71d1      	strb	r1, [r2, #7]
    451e:	3301      	adds	r3, #1
                for (i = 0; i < 8; i++) {
    4520:	2b08      	cmp	r3, #8
    4522:	d1f8      	bne.n	4516 <MiMAC_SendPacket+0x2b2>
                    packet[loc++] = transParam.DestAddress[i];
    4524:	220f      	movs	r2, #15
    4526:	e779      	b.n	441c <MiMAC_SendPacket+0x1b8>
            packet[loc++] = MACInitParams.PAddress[i];
    4528:	4b13      	ldr	r3, [pc, #76]	; (4578 <MiMAC_SendPacket+0x314>)
    452a:	6859      	ldr	r1, [r3, #4]
    452c:	0015      	movs	r5, r2
    452e:	3508      	adds	r5, #8
    4530:	b2ed      	uxtb	r5, r5
    4532:	ac06      	add	r4, sp, #24
    4534:	1c53      	adds	r3, r2, #1
    4536:	b2db      	uxtb	r3, r3
    4538:	7808      	ldrb	r0, [r1, #0]
    453a:	54a0      	strb	r0, [r4, r2]
    453c:	3101      	adds	r1, #1
    453e:	001a      	movs	r2, r3
        for (i = 0; i < 8; i++) {
    4540:	429d      	cmp	r5, r3
    4542:	d1f7      	bne.n	4534 <MiMAC_SendPacket+0x2d0>
    4544:	e784      	b.n	4450 <MiMAC_SendPacket+0x1ec>
    for (i = 0; i < MACPayloadLen; i++) {
    4546:	0019      	movs	r1, r3
    4548:	e7b1      	b.n	44ae <MiMAC_SendPacket+0x24a>
        trx_status.bits.TX_PENDING_ACK = 1;
    454a:	7813      	ldrb	r3, [r2, #0]
    454c:	2102      	movs	r1, #2
    454e:	430b      	orrs	r3, r1
    4550:	7013      	strb	r3, [r2, #0]
    4552:	e7ca      	b.n	44ea <MiMAC_SendPacket+0x286>
    4554:	20000a40 	.word	0x20000a40
    4558:	0000ffff 	.word	0x0000ffff
    455c:	20000a28 	.word	0x20000a28
    4560:	00003fb1 	.word	0x00003fb1
    4564:	200003c8 	.word	0x200003c8
    4568:	200003cc 	.word	0x200003cc
    456c:	20000400 	.word	0x20000400
    4570:	20000a44 	.word	0x20000a44
    4574:	00003c95 	.word	0x00003c95
    4578:	200003d4 	.word	0x200003d4

0000457c <PHY_SetIEEEAddr>:

/*************************************************************************/ /**
*****************************************************************************/
// Setting the IEEE address
void PHY_SetIEEEAddr(uint8_t* ieee_addr)
{
    457c:	b570      	push	{r4, r5, r6, lr}
    457e:	0005      	movs	r5, r0
    4580:	2424      	movs	r4, #36	; 0x24
    uint8_t* ptr_to_reg = ieee_addr;
    for (uint8_t i = 0; i < 8; i++) {
        trx_reg_write((RG_IEEE_ADDR_0 + i), *ptr_to_reg);
    4582:	4e05      	ldr	r6, [pc, #20]	; (4598 <PHY_SetIEEEAddr+0x1c>)
    4584:	7829      	ldrb	r1, [r5, #0]
    4586:	0020      	movs	r0, r4
    4588:	47b0      	blx	r6
        ptr_to_reg++;
    458a:	3501      	adds	r5, #1
    458c:	3401      	adds	r4, #1
    458e:	b2e4      	uxtb	r4, r4
    for (uint8_t i = 0; i < 8; i++) {
    4590:	2c2c      	cmp	r4, #44	; 0x2c
    4592:	d1f7      	bne.n	4584 <PHY_SetIEEEAddr+0x8>
    }
}
    4594:	bd70      	pop	{r4, r5, r6, pc}
    4596:	46c0      	nop			; (mov r8, r8)
    4598:	00001b7d 	.word	0x00001b7d

0000459c <MiMAC_Init>:
{
    459c:	b510      	push	{r4, lr}
    459e:	b082      	sub	sp, #8
    45a0:	466c      	mov	r4, sp
    45a2:	9000      	str	r0, [sp, #0]
    45a4:	9101      	str	r1, [sp, #4]
    PHY_Init();
    45a6:	4b13      	ldr	r3, [pc, #76]	; (45f4 <MiMAC_Init+0x58>)
    45a8:	4798      	blx	r3
    MACInitParams = initValue;
    45aa:	4b13      	ldr	r3, [pc, #76]	; (45f8 <MiMAC_Init+0x5c>)
    45ac:	cc06      	ldmia	r4!, {r1, r2}
    45ae:	c306      	stmia	r3!, {r1, r2}
    uint16_t x = PHY_RandomReq();
    45b0:	4b12      	ldr	r3, [pc, #72]	; (45fc <MiMAC_Init+0x60>)
    45b2:	4798      	blx	r3
    45b4:	0004      	movs	r4, r0
    phyRxState = rx;
    45b6:	2201      	movs	r2, #1
    45b8:	4b11      	ldr	r3, [pc, #68]	; (4600 <MiMAC_Init+0x64>)
    45ba:	701a      	strb	r2, [r3, #0]
    phySetRxState();
    45bc:	4b11      	ldr	r3, [pc, #68]	; (4604 <MiMAC_Init+0x68>)
    45be:	4798      	blx	r3
    IEEESeqNum = x & 0xff;
    45c0:	4b11      	ldr	r3, [pc, #68]	; (4608 <MiMAC_Init+0x6c>)
    45c2:	701c      	strb	r4, [r3, #0]
    MACCurrentChannel = 11;
    45c4:	220b      	movs	r2, #11
    45c6:	4b11      	ldr	r3, [pc, #68]	; (460c <MiMAC_Init+0x70>)
    45c8:	701a      	strb	r2, [r3, #0]
    PHY_SetIEEEAddr(myLongAddress);
    45ca:	4811      	ldr	r0, [pc, #68]	; (4610 <MiMAC_Init+0x74>)
    45cc:	4b11      	ldr	r3, [pc, #68]	; (4614 <MiMAC_Init+0x78>)
    45ce:	4798      	blx	r3
    trx_status.Val = 0;
    45d0:	2200      	movs	r2, #0
    45d2:	4b11      	ldr	r3, [pc, #68]	; (4618 <MiMAC_Init+0x7c>)
    45d4:	701a      	strb	r2, [r3, #0]
    45d6:	4b11      	ldr	r3, [pc, #68]	; (461c <MiMAC_Init+0x80>)
    45d8:	22c3      	movs	r2, #195	; 0xc3
    45da:	00d2      	lsls	r2, r2, #3
    45dc:	1899      	adds	r1, r3, r2
        RxBuffer[i].PayloadLen = 0;
    45de:	2200      	movs	r2, #0
    45e0:	701a      	strb	r2, [r3, #0]
    45e2:	334e      	adds	r3, #78	; 0x4e
    for (i = 0; i < BANK_SIZE; i++) {
    45e4:	428b      	cmp	r3, r1
    45e6:	d1fb      	bne.n	45e0 <MiMAC_Init+0x44>
    OutgoingFrameCounter.Val = 1;
    45e8:	2201      	movs	r2, #1
    45ea:	4b0d      	ldr	r3, [pc, #52]	; (4620 <MiMAC_Init+0x84>)
    45ec:	601a      	str	r2, [r3, #0]
}
    45ee:	2001      	movs	r0, #1
    45f0:	b002      	add	sp, #8
    45f2:	bd10      	pop	{r4, pc}
    45f4:	00003d31 	.word	0x00003d31
    45f8:	200003d4 	.word	0x200003d4
    45fc:	00003ce1 	.word	0x00003ce1
    4600:	20000270 	.word	0x20000270
    4604:	00003c69 	.word	0x00003c69
    4608:	200003c8 	.word	0x200003c8
    460c:	20000a42 	.word	0x20000a42
    4610:	20000b24 	.word	0x20000b24
    4614:	0000457d 	.word	0x0000457d
    4618:	20000a44 	.word	0x20000a44
    461c:	20000410 	.word	0x20000410
    4620:	20000a28 	.word	0x20000a28

00004624 <MiMAC_DiscardPacket>:
 *
 *****************************************************************************************/
void MiMAC_DiscardPacket(void)
{
    //re-enable the ACKS
    if (BankIndex < BANK_SIZE) {
    4624:	4b04      	ldr	r3, [pc, #16]	; (4638 <MiMAC_DiscardPacket+0x14>)
    4626:	781b      	ldrb	r3, [r3, #0]
    4628:	2b13      	cmp	r3, #19
    462a:	d804      	bhi.n	4636 <MiMAC_DiscardPacket+0x12>
        RxBuffer[BankIndex].PayloadLen = 0;
    462c:	224e      	movs	r2, #78	; 0x4e
    462e:	4353      	muls	r3, r2
    4630:	2100      	movs	r1, #0
    4632:	4a02      	ldr	r2, [pc, #8]	; (463c <MiMAC_DiscardPacket+0x18>)
    4634:	5499      	strb	r1, [r3, r2]
    }
}
    4636:	4770      	bx	lr
    4638:	2000000a 	.word	0x2000000a
    463c:	20000410 	.word	0x20000410

00004640 <MiMAC_ReceivedPacket>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_ReceivedPacket(void)
{
    4640:	b5f0      	push	{r4, r5, r6, r7, lr}
    4642:	46d6      	mov	lr, sl
    4644:	4647      	mov	r7, r8
    4646:	b580      	push	{r7, lr}
    4648:	b083      	sub	sp, #12
    uint8_t i;

    //If the stack TX has been busy for a long time then
    //time out the TX because we may have missed the interrupt
    //and don't want to lock up the stack forever
    if (trx_status.bits.TX_BUSY) {
    464a:	4bd3      	ldr	r3, [pc, #844]	; (4998 <MiMAC_ReceivedPacket+0x358>)
    464c:	781b      	ldrb	r3, [r3, #0]
    464e:	07db      	lsls	r3, r3, #31
    4650:	d50c      	bpl.n	466c <MiMAC_ReceivedPacket+0x2c>
        if (failureCounter >= FAILURE_COUNTER) {
    4652:	4bd2      	ldr	r3, [pc, #840]	; (499c <MiMAC_ReceivedPacket+0x35c>)
    4654:	881b      	ldrh	r3, [r3, #0]
    4656:	b29b      	uxth	r3, r3
    4658:	2b05      	cmp	r3, #5
    465a:	d91f      	bls.n	469c <MiMAC_ReceivedPacket+0x5c>
            failureCounter = 0;
    465c:	2200      	movs	r2, #0
    465e:	4bcf      	ldr	r3, [pc, #828]	; (499c <MiMAC_ReceivedPacket+0x35c>)
    4660:	801a      	strh	r2, [r3, #0]
            trx_status.bits.TX_BUSY = 0;
    4662:	4acd      	ldr	r2, [pc, #820]	; (4998 <MiMAC_ReceivedPacket+0x358>)
    4664:	7813      	ldrb	r3, [r2, #0]
    4666:	2101      	movs	r1, #1
    4668:	438b      	bics	r3, r1
    466a:	7013      	strb	r3, [r2, #0]
        else {
            failureCounter++;
        }
    }

    BankIndex = 0xFF;
    466c:	22ff      	movs	r2, #255	; 0xff
    466e:	4bcc      	ldr	r3, [pc, #816]	; (49a0 <MiMAC_ReceivedPacket+0x360>)
    4670:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < BANK_SIZE; i++) {
        if (RxBuffer[i].PayloadLen > 0) {
    4672:	4bcc      	ldr	r3, [pc, #816]	; (49a4 <MiMAC_ReceivedPacket+0x364>)
    4674:	781b      	ldrb	r3, [r3, #0]
    4676:	2b00      	cmp	r3, #0
    4678:	d000      	beq.n	467c <MiMAC_ReceivedPacket+0x3c>
    467a:	e22d      	b.n	4ad8 <MiMAC_ReceivedPacket+0x498>
    467c:	4aca      	ldr	r2, [pc, #808]	; (49a8 <MiMAC_ReceivedPacket+0x368>)
    for (i = 0; i < BANK_SIZE; i++) {
    467e:	3301      	adds	r3, #1
        if (RxBuffer[i].PayloadLen > 0) {
    4680:	7811      	ldrb	r1, [r2, #0]
    4682:	2900      	cmp	r1, #0
    4684:	d110      	bne.n	46a8 <MiMAC_ReceivedPacket+0x68>
    for (i = 0; i < BANK_SIZE; i++) {
    4686:	3301      	adds	r3, #1
    4688:	b2db      	uxtb	r3, r3
    468a:	324e      	adds	r2, #78	; 0x4e
    468c:	2b14      	cmp	r3, #20
    468e:	d1f7      	bne.n	4680 <MiMAC_ReceivedPacket+0x40>
        MACRxPacket.RSSIValue = Received_RSSI_Val;
#endif

        return true;
    }
    return false;
    4690:	2000      	movs	r0, #0
}
    4692:	b003      	add	sp, #12
    4694:	bc0c      	pop	{r2, r3}
    4696:	4690      	mov	r8, r2
    4698:	469a      	mov	sl, r3
    469a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            failureCounter++;
    469c:	4abf      	ldr	r2, [pc, #764]	; (499c <MiMAC_ReceivedPacket+0x35c>)
    469e:	8813      	ldrh	r3, [r2, #0]
    46a0:	3301      	adds	r3, #1
    46a2:	b29b      	uxth	r3, r3
    46a4:	8013      	strh	r3, [r2, #0]
    46a6:	e7e1      	b.n	466c <MiMAC_ReceivedPacket+0x2c>
            BankIndex = i;
    46a8:	4abd      	ldr	r2, [pc, #756]	; (49a0 <MiMAC_ReceivedPacket+0x360>)
    46aa:	7013      	strb	r3, [r2, #0]
    return false;
    46ac:	2000      	movs	r0, #0
    if (BankIndex < BANK_SIZE) {
    46ae:	2b13      	cmp	r3, #19
    46b0:	d8ef      	bhi.n	4692 <MiMAC_ReceivedPacket+0x52>
        if ((RxBuffer[BankIndex].Payload[0] & 0x40) == 0) {
    46b2:	0019      	movs	r1, r3
    46b4:	204e      	movs	r0, #78	; 0x4e
    46b6:	4358      	muls	r0, r3
    46b8:	4aba      	ldr	r2, [pc, #744]	; (49a4 <MiMAC_ReceivedPacket+0x364>)
    46ba:	1812      	adds	r2, r2, r0
    46bc:	7855      	ldrb	r5, [r2, #1]
    46be:	2440      	movs	r4, #64	; 0x40
    46c0:	4025      	ands	r5, r4
        MACRxPacket.flags.Val = 0;
    46c2:	48ba      	ldr	r0, [pc, #744]	; (49ac <MiMAC_ReceivedPacket+0x36c>)
    46c4:	2400      	movs	r4, #0
    46c6:	7004      	strb	r4, [r0, #0]
        MACRxPacket.altSourceAddress = false;
    46c8:	73c4      	strb	r4, [r0, #15]
        addrMode = RxBuffer[BankIndex].Payload[1] & 0xCC;
    46ca:	7892      	ldrb	r2, [r2, #2]
    46cc:	2033      	movs	r0, #51	; 0x33
    46ce:	4382      	bics	r2, r0
        switch (addrMode) {
    46d0:	b2d0      	uxtb	r0, r2
    46d2:	2888      	cmp	r0, #136	; 0x88
    46d4:	d100      	bne.n	46d8 <MiMAC_ReceivedPacket+0x98>
    46d6:	e0e2      	b.n	489e <MiMAC_ReceivedPacket+0x25e>
    46d8:	d90c      	bls.n	46f4 <MiMAC_ReceivedPacket+0xb4>
    46da:	b2d0      	uxtb	r0, r2
    46dc:	28c8      	cmp	r0, #200	; 0xc8
    46de:	d04a      	beq.n	4776 <MiMAC_ReceivedPacket+0x136>
    46e0:	28cc      	cmp	r0, #204	; 0xcc
    46e2:	d100      	bne.n	46e6 <MiMAC_ReceivedPacket+0xa6>
    46e4:	e0aa      	b.n	483c <MiMAC_ReceivedPacket+0x1fc>
    46e6:	288c      	cmp	r0, #140	; 0x8c
    46e8:	d100      	bne.n	46ec <MiMAC_ReceivedPacket+0xac>
    46ea:	e120      	b.n	492e <MiMAC_ReceivedPacket+0x2ee>
            MiMAC_DiscardPacket();
    46ec:	4bb0      	ldr	r3, [pc, #704]	; (49b0 <MiMAC_ReceivedPacket+0x370>)
    46ee:	4798      	blx	r3
            return false;
    46f0:	2000      	movs	r0, #0
    46f2:	e7ce      	b.n	4692 <MiMAC_ReceivedPacket+0x52>
        switch (addrMode) {
    46f4:	2a08      	cmp	r2, #8
    46f6:	d100      	bne.n	46fa <MiMAC_ReceivedPacket+0xba>
    46f8:	e160      	b.n	49bc <MiMAC_ReceivedPacket+0x37c>
    46fa:	2880      	cmp	r0, #128	; 0x80
    46fc:	d1f6      	bne.n	46ec <MiMAC_ReceivedPacket+0xac>
            MACRxPacket.flags.bits.broadcast = 1;
    46fe:	48ab      	ldr	r0, [pc, #684]	; (49ac <MiMAC_ReceivedPacket+0x36c>)
    4700:	7802      	ldrb	r2, [r0, #0]
    4702:	2404      	movs	r4, #4
    4704:	4322      	orrs	r2, r4
            MACRxPacket.flags.bits.sourcePrsnt = 1;
    4706:	2480      	movs	r4, #128	; 0x80
    4708:	4264      	negs	r4, r4
    470a:	4322      	orrs	r2, r4
    470c:	7002      	strb	r2, [r0, #0]
            MACRxPacket.altSourceAddress = true;
    470e:	2201      	movs	r2, #1
    4710:	73c2      	strb	r2, [r0, #15]
            MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    4712:	4ca4      	ldr	r4, [pc, #656]	; (49a4 <MiMAC_ReceivedPacket+0x364>)
    4714:	324d      	adds	r2, #77	; 0x4d
    4716:	4351      	muls	r1, r2
    4718:	1865      	adds	r5, r4, r1
    471a:	792e      	ldrb	r6, [r5, #4]
    471c:	7406      	strb	r6, [r0, #16]
            MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    471e:	796d      	ldrb	r5, [r5, #5]
    4720:	7445      	strb	r5, [r0, #17]
    4722:	4353      	muls	r3, r2
            MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[5]);
    4724:	1d9a      	adds	r2, r3, #6
    4726:	1912      	adds	r2, r2, r4
    4728:	6042      	str	r2, [r0, #4]
            MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 11;
    472a:	5d0a      	ldrb	r2, [r1, r4]
    472c:	3a0b      	subs	r2, #11
    472e:	7302      	strb	r2, [r0, #12]
            MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    4730:	3308      	adds	r3, #8
    4732:	191b      	adds	r3, r3, r4
    4734:	6083      	str	r3, [r0, #8]
        if (RxBuffer[BankIndex].Payload[0] & 0x08) {
    4736:	4b9a      	ldr	r3, [pc, #616]	; (49a0 <MiMAC_ReceivedPacket+0x360>)
    4738:	781a      	ldrb	r2, [r3, #0]
    473a:	234e      	movs	r3, #78	; 0x4e
    473c:	435a      	muls	r2, r3
    473e:	4b99      	ldr	r3, [pc, #612]	; (49a4 <MiMAC_ReceivedPacket+0x364>)
    4740:	189b      	adds	r3, r3, r2
    4742:	785b      	ldrb	r3, [r3, #1]
    4744:	071b      	lsls	r3, r3, #28
    4746:	d500      	bpl.n	474a <MiMAC_ReceivedPacket+0x10a>
    4748:	e158      	b.n	49fc <MiMAC_ReceivedPacket+0x3bc>
        switch (RxBuffer[BankIndex].Payload[0] & 0x07) // check frame type
    474a:	4b95      	ldr	r3, [pc, #596]	; (49a0 <MiMAC_ReceivedPacket+0x360>)
    474c:	781a      	ldrb	r2, [r3, #0]
    474e:	234e      	movs	r3, #78	; 0x4e
    4750:	435a      	muls	r2, r3
    4752:	4b94      	ldr	r3, [pc, #592]	; (49a4 <MiMAC_ReceivedPacket+0x364>)
    4754:	189b      	adds	r3, r3, r2
    4756:	785a      	ldrb	r2, [r3, #1]
    4758:	2307      	movs	r3, #7
    475a:	4013      	ands	r3, r2
    475c:	2b01      	cmp	r3, #1
    475e:	d100      	bne.n	4762 <MiMAC_ReceivedPacket+0x122>
    4760:	e19e      	b.n	4aa0 <MiMAC_ReceivedPacket+0x460>
    4762:	2b00      	cmp	r3, #0
    4764:	d100      	bne.n	4768 <MiMAC_ReceivedPacket+0x128>
    4766:	e1b1      	b.n	4acc <MiMAC_ReceivedPacket+0x48c>
    4768:	2b03      	cmp	r3, #3
    476a:	d100      	bne.n	476e <MiMAC_ReceivedPacket+0x12e>
    476c:	e1a6      	b.n	4abc <MiMAC_ReceivedPacket+0x47c>
            MiMAC_DiscardPacket();
    476e:	4b90      	ldr	r3, [pc, #576]	; (49b0 <MiMAC_ReceivedPacket+0x370>)
    4770:	4798      	blx	r3
            return false;
    4772:	2000      	movs	r0, #0
    4774:	e78d      	b.n	4692 <MiMAC_ReceivedPacket+0x52>
            if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF) {
    4776:	204e      	movs	r0, #78	; 0x4e
    4778:	4358      	muls	r0, r3
    477a:	4a8a      	ldr	r2, [pc, #552]	; (49a4 <MiMAC_ReceivedPacket+0x364>)
    477c:	1812      	adds	r2, r2, r0
    477e:	7992      	ldrb	r2, [r2, #6]
    4780:	2aff      	cmp	r2, #255	; 0xff
    4782:	d039      	beq.n	47f8 <MiMAC_ReceivedPacket+0x1b8>
            MACRxPacket.flags.bits.sourcePrsnt = 1;
    4784:	4889      	ldr	r0, [pc, #548]	; (49ac <MiMAC_ReceivedPacket+0x36c>)
    4786:	7804      	ldrb	r4, [r0, #0]
    4788:	2280      	movs	r2, #128	; 0x80
    478a:	4252      	negs	r2, r2
    478c:	4322      	orrs	r2, r4
    478e:	7002      	strb	r2, [r0, #0]
            if (bIntraPAN) // check if it is intraPAN
    4790:	2d00      	cmp	r5, #0
    4792:	d03e      	beq.n	4812 <MiMAC_ReceivedPacket+0x1d2>
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    4794:	4c83      	ldr	r4, [pc, #524]	; (49a4 <MiMAC_ReceivedPacket+0x364>)
    4796:	224e      	movs	r2, #78	; 0x4e
    4798:	4351      	muls	r1, r2
    479a:	1865      	adds	r5, r4, r1
    479c:	792e      	ldrb	r6, [r5, #4]
    479e:	7406      	strb	r6, [r0, #16]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    47a0:	796d      	ldrb	r5, [r5, #5]
    47a2:	7445      	strb	r5, [r0, #17]
    47a4:	4353      	muls	r3, r2
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    47a6:	001a      	movs	r2, r3
    47a8:	3208      	adds	r2, #8
    47aa:	1912      	adds	r2, r2, r4
    47ac:	6042      	str	r2, [r0, #4]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    47ae:	5d0a      	ldrb	r2, [r1, r4]
    47b0:	3a13      	subs	r2, #19
    47b2:	7302      	strb	r2, [r0, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    47b4:	3310      	adds	r3, #16
    47b6:	191b      	adds	r3, r3, r4
    47b8:	6083      	str	r3, [r0, #8]
        if (RxBuffer[BankIndex].Payload[0] & 0x08) {
    47ba:	4b79      	ldr	r3, [pc, #484]	; (49a0 <MiMAC_ReceivedPacket+0x360>)
    47bc:	781a      	ldrb	r2, [r3, #0]
    47be:	234e      	movs	r3, #78	; 0x4e
    47c0:	435a      	muls	r2, r3
    47c2:	4b78      	ldr	r3, [pc, #480]	; (49a4 <MiMAC_ReceivedPacket+0x364>)
    47c4:	189b      	adds	r3, r3, r2
    47c6:	785b      	ldrb	r3, [r3, #1]
    47c8:	071b      	lsls	r3, r3, #28
    47ca:	d5be      	bpl.n	474a <MiMAC_ReceivedPacket+0x10a>
            FrameCounter.v[0] = MACRxPacket.Payload[0];
    47cc:	4b77      	ldr	r3, [pc, #476]	; (49ac <MiMAC_ReceivedPacket+0x36c>)
    47ce:	689b      	ldr	r3, [r3, #8]
            FrameCounter.v[1] = MACRxPacket.Payload[1];
    47d0:	785f      	ldrb	r7, [r3, #1]
    47d2:	023f      	lsls	r7, r7, #8
    47d4:	781a      	ldrb	r2, [r3, #0]
    47d6:	4317      	orrs	r7, r2
            FrameCounter.v[2] = MACRxPacket.Payload[2];
    47d8:	789a      	ldrb	r2, [r3, #2]
    47da:	0412      	lsls	r2, r2, #16
    47dc:	4975      	ldr	r1, [pc, #468]	; (49b4 <MiMAC_ReceivedPacket+0x374>)
    47de:	400f      	ands	r7, r1
    47e0:	4317      	orrs	r7, r2
            FrameCounter.v[3] = MACRxPacket.Payload[3];
    47e2:	78db      	ldrb	r3, [r3, #3]
    47e4:	061b      	lsls	r3, r3, #24
    47e6:	023f      	lsls	r7, r7, #8
    47e8:	0a3f      	lsrs	r7, r7, #8
    47ea:	431f      	orrs	r7, r3
    47ec:	4d72      	ldr	r5, [pc, #456]	; (49b8 <MiMAC_ReceivedPacket+0x378>)
    47ee:	2400      	movs	r4, #0
                if ((ConnectionTable[i].status.bits.isValid) && isSameAddress(ConnectionTable[i].Address, MACRxPacket.SourceAddress)) {
    47f0:	46a8      	mov	r8, r5
    47f2:	4b6e      	ldr	r3, [pc, #440]	; (49ac <MiMAC_ReceivedPacket+0x36c>)
    47f4:	469a      	mov	sl, r3
    47f6:	e109      	b.n	4a0c <MiMAC_ReceivedPacket+0x3cc>
            if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF) {
    47f8:	204e      	movs	r0, #78	; 0x4e
    47fa:	4358      	muls	r0, r3
    47fc:	4a69      	ldr	r2, [pc, #420]	; (49a4 <MiMAC_ReceivedPacket+0x364>)
    47fe:	1812      	adds	r2, r2, r0
    4800:	79d2      	ldrb	r2, [r2, #7]
    4802:	2aff      	cmp	r2, #255	; 0xff
    4804:	d1be      	bne.n	4784 <MiMAC_ReceivedPacket+0x144>
                MACRxPacket.flags.bits.broadcast = 1;
    4806:	4869      	ldr	r0, [pc, #420]	; (49ac <MiMAC_ReceivedPacket+0x36c>)
    4808:	7802      	ldrb	r2, [r0, #0]
    480a:	2404      	movs	r4, #4
    480c:	4322      	orrs	r2, r4
    480e:	7002      	strb	r2, [r0, #0]
    4810:	e7b8      	b.n	4784 <MiMAC_ReceivedPacket+0x144>
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    4812:	4866      	ldr	r0, [pc, #408]	; (49ac <MiMAC_ReceivedPacket+0x36c>)
    4814:	4c63      	ldr	r4, [pc, #396]	; (49a4 <MiMAC_ReceivedPacket+0x364>)
    4816:	224e      	movs	r2, #78	; 0x4e
    4818:	4351      	muls	r1, r2
    481a:	1865      	adds	r5, r4, r1
    481c:	7a2e      	ldrb	r6, [r5, #8]
    481e:	7406      	strb	r6, [r0, #16]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    4820:	7a6d      	ldrb	r5, [r5, #9]
    4822:	7445      	strb	r5, [r0, #17]
    4824:	4353      	muls	r3, r2
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    4826:	001a      	movs	r2, r3
    4828:	320a      	adds	r2, #10
    482a:	1912      	adds	r2, r2, r4
    482c:	6042      	str	r2, [r0, #4]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    482e:	5d0a      	ldrb	r2, [r1, r4]
    4830:	3a15      	subs	r2, #21
    4832:	7302      	strb	r2, [r0, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    4834:	3312      	adds	r3, #18
    4836:	191b      	adds	r3, r3, r4
    4838:	6083      	str	r3, [r0, #8]
    483a:	e7be      	b.n	47ba <MiMAC_ReceivedPacket+0x17a>
            MACRxPacket.flags.bits.sourcePrsnt = 1;
    483c:	485b      	ldr	r0, [pc, #364]	; (49ac <MiMAC_ReceivedPacket+0x36c>)
    483e:	7804      	ldrb	r4, [r0, #0]
    4840:	2280      	movs	r2, #128	; 0x80
    4842:	4252      	negs	r2, r2
    4844:	4322      	orrs	r2, r4
    4846:	7002      	strb	r2, [r0, #0]
            if (bIntraPAN) // check if it is intraPAN
    4848:	2d00      	cmp	r5, #0
    484a:	d013      	beq.n	4874 <MiMAC_ReceivedPacket+0x234>
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    484c:	4c55      	ldr	r4, [pc, #340]	; (49a4 <MiMAC_ReceivedPacket+0x364>)
    484e:	224e      	movs	r2, #78	; 0x4e
    4850:	4351      	muls	r1, r2
    4852:	1865      	adds	r5, r4, r1
    4854:	792e      	ldrb	r6, [r5, #4]
    4856:	7406      	strb	r6, [r0, #16]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    4858:	796d      	ldrb	r5, [r5, #5]
    485a:	7445      	strb	r5, [r0, #17]
    485c:	4353      	muls	r3, r2
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
    485e:	001a      	movs	r2, r3
    4860:	320e      	adds	r2, #14
    4862:	1912      	adds	r2, r2, r4
    4864:	6042      	str	r2, [r0, #4]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 25;
    4866:	5d0a      	ldrb	r2, [r1, r4]
    4868:	3a19      	subs	r2, #25
    486a:	7302      	strb	r2, [r0, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[21]);
    486c:	3316      	adds	r3, #22
    486e:	191b      	adds	r3, r3, r4
    4870:	6083      	str	r3, [r0, #8]
    4872:	e7a2      	b.n	47ba <MiMAC_ReceivedPacket+0x17a>
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[13];
    4874:	484d      	ldr	r0, [pc, #308]	; (49ac <MiMAC_ReceivedPacket+0x36c>)
    4876:	4c4b      	ldr	r4, [pc, #300]	; (49a4 <MiMAC_ReceivedPacket+0x364>)
    4878:	224e      	movs	r2, #78	; 0x4e
    487a:	4351      	muls	r1, r2
    487c:	1865      	adds	r5, r4, r1
    487e:	7bae      	ldrb	r6, [r5, #14]
    4880:	7406      	strb	r6, [r0, #16]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[14];
    4882:	7bed      	ldrb	r5, [r5, #15]
    4884:	7445      	strb	r5, [r0, #17]
    4886:	4353      	muls	r3, r2
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[15]);
    4888:	001a      	movs	r2, r3
    488a:	3210      	adds	r2, #16
    488c:	1912      	adds	r2, r2, r4
    488e:	6042      	str	r2, [r0, #4]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 27;
    4890:	5d0a      	ldrb	r2, [r1, r4]
    4892:	3a1b      	subs	r2, #27
    4894:	7302      	strb	r2, [r0, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[23]);
    4896:	3318      	adds	r3, #24
    4898:	191b      	adds	r3, r3, r4
    489a:	6083      	str	r3, [r0, #8]
    489c:	e78d      	b.n	47ba <MiMAC_ReceivedPacket+0x17a>
            if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF) {
    489e:	204e      	movs	r0, #78	; 0x4e
    48a0:	4358      	muls	r0, r3
    48a2:	4a40      	ldr	r2, [pc, #256]	; (49a4 <MiMAC_ReceivedPacket+0x364>)
    48a4:	1812      	adds	r2, r2, r0
    48a6:	7992      	ldrb	r2, [r2, #6]
    48a8:	2aff      	cmp	r2, #255	; 0xff
    48aa:	d01e      	beq.n	48ea <MiMAC_ReceivedPacket+0x2aa>
            MACRxPacket.flags.bits.sourcePrsnt = 1;
    48ac:	4a3f      	ldr	r2, [pc, #252]	; (49ac <MiMAC_ReceivedPacket+0x36c>)
    48ae:	7814      	ldrb	r4, [r2, #0]
    48b0:	2080      	movs	r0, #128	; 0x80
    48b2:	4240      	negs	r0, r0
    48b4:	4320      	orrs	r0, r4
    48b6:	7010      	strb	r0, [r2, #0]
            MACRxPacket.altSourceAddress = true;
    48b8:	2001      	movs	r0, #1
    48ba:	73d0      	strb	r0, [r2, #15]
            if (bIntraPAN == false) {
    48bc:	2d00      	cmp	r5, #0
    48be:	d121      	bne.n	4904 <MiMAC_ReceivedPacket+0x2c4>
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    48c0:	0010      	movs	r0, r2
    48c2:	4c38      	ldr	r4, [pc, #224]	; (49a4 <MiMAC_ReceivedPacket+0x364>)
    48c4:	224e      	movs	r2, #78	; 0x4e
    48c6:	4351      	muls	r1, r2
    48c8:	1865      	adds	r5, r4, r1
    48ca:	7a2e      	ldrb	r6, [r5, #8]
    48cc:	7406      	strb	r6, [r0, #16]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    48ce:	7a6d      	ldrb	r5, [r5, #9]
    48d0:	7445      	strb	r5, [r0, #17]
    48d2:	4353      	muls	r3, r2
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    48d4:	001a      	movs	r2, r3
    48d6:	320a      	adds	r2, #10
    48d8:	1912      	adds	r2, r2, r4
    48da:	6042      	str	r2, [r0, #4]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 15;
    48dc:	5d0a      	ldrb	r2, [r1, r4]
    48de:	3a0f      	subs	r2, #15
    48e0:	7302      	strb	r2, [r0, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[11]);
    48e2:	330c      	adds	r3, #12
    48e4:	191b      	adds	r3, r3, r4
    48e6:	6083      	str	r3, [r0, #8]
    48e8:	e725      	b.n	4736 <MiMAC_ReceivedPacket+0xf6>
            if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF) {
    48ea:	204e      	movs	r0, #78	; 0x4e
    48ec:	4358      	muls	r0, r3
    48ee:	4a2d      	ldr	r2, [pc, #180]	; (49a4 <MiMAC_ReceivedPacket+0x364>)
    48f0:	1812      	adds	r2, r2, r0
    48f2:	79d2      	ldrb	r2, [r2, #7]
    48f4:	2aff      	cmp	r2, #255	; 0xff
    48f6:	d1d9      	bne.n	48ac <MiMAC_ReceivedPacket+0x26c>
                MACRxPacket.flags.bits.broadcast = 1;
    48f8:	482c      	ldr	r0, [pc, #176]	; (49ac <MiMAC_ReceivedPacket+0x36c>)
    48fa:	7802      	ldrb	r2, [r0, #0]
    48fc:	2404      	movs	r4, #4
    48fe:	4322      	orrs	r2, r4
    4900:	7002      	strb	r2, [r0, #0]
    4902:	e7d3      	b.n	48ac <MiMAC_ReceivedPacket+0x26c>
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    4904:	4829      	ldr	r0, [pc, #164]	; (49ac <MiMAC_ReceivedPacket+0x36c>)
    4906:	4c27      	ldr	r4, [pc, #156]	; (49a4 <MiMAC_ReceivedPacket+0x364>)
    4908:	224e      	movs	r2, #78	; 0x4e
    490a:	4351      	muls	r1, r2
    490c:	1865      	adds	r5, r4, r1
    490e:	792e      	ldrb	r6, [r5, #4]
    4910:	7406      	strb	r6, [r0, #16]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    4912:	796d      	ldrb	r5, [r5, #5]
    4914:	7445      	strb	r5, [r0, #17]
    4916:	4353      	muls	r3, r2
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    4918:	001a      	movs	r2, r3
    491a:	3208      	adds	r2, #8
    491c:	1912      	adds	r2, r2, r4
    491e:	6042      	str	r2, [r0, #4]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 13;
    4920:	5d0a      	ldrb	r2, [r1, r4]
    4922:	3a0d      	subs	r2, #13
    4924:	7302      	strb	r2, [r0, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[9]);
    4926:	330a      	adds	r3, #10
    4928:	191b      	adds	r3, r3, r4
    492a:	6083      	str	r3, [r0, #8]
    492c:	e703      	b.n	4736 <MiMAC_ReceivedPacket+0xf6>
            MACRxPacket.flags.bits.sourcePrsnt = 1;
    492e:	4a1f      	ldr	r2, [pc, #124]	; (49ac <MiMAC_ReceivedPacket+0x36c>)
    4930:	7814      	ldrb	r4, [r2, #0]
    4932:	2080      	movs	r0, #128	; 0x80
    4934:	4240      	negs	r0, r0
    4936:	4320      	orrs	r0, r4
    4938:	7010      	strb	r0, [r2, #0]
            MACRxPacket.altSourceAddress = true;
    493a:	2001      	movs	r0, #1
    493c:	73d0      	strb	r0, [r2, #15]
            if (bIntraPAN) // check if it is intraPAN
    493e:	2d00      	cmp	r5, #0
    4940:	d014      	beq.n	496c <MiMAC_ReceivedPacket+0x32c>
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    4942:	0010      	movs	r0, r2
    4944:	4c17      	ldr	r4, [pc, #92]	; (49a4 <MiMAC_ReceivedPacket+0x364>)
    4946:	224e      	movs	r2, #78	; 0x4e
    4948:	4351      	muls	r1, r2
    494a:	1865      	adds	r5, r4, r1
    494c:	792e      	ldrb	r6, [r5, #4]
    494e:	7406      	strb	r6, [r0, #16]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    4950:	796d      	ldrb	r5, [r5, #5]
    4952:	7445      	strb	r5, [r0, #17]
    4954:	4353      	muls	r3, r2
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[12]);
    4956:	001a      	movs	r2, r3
    4958:	320d      	adds	r2, #13
    495a:	1912      	adds	r2, r2, r4
    495c:	6042      	str	r2, [r0, #4]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    495e:	5d0a      	ldrb	r2, [r1, r4]
    4960:	3a13      	subs	r2, #19
    4962:	7302      	strb	r2, [r0, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    4964:	3310      	adds	r3, #16
    4966:	191b      	adds	r3, r3, r4
    4968:	6083      	str	r3, [r0, #8]
    496a:	e6e4      	b.n	4736 <MiMAC_ReceivedPacket+0xf6>
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[12];
    496c:	480f      	ldr	r0, [pc, #60]	; (49ac <MiMAC_ReceivedPacket+0x36c>)
    496e:	4c0d      	ldr	r4, [pc, #52]	; (49a4 <MiMAC_ReceivedPacket+0x364>)
    4970:	224e      	movs	r2, #78	; 0x4e
    4972:	4351      	muls	r1, r2
    4974:	1865      	adds	r5, r4, r1
    4976:	7b6e      	ldrb	r6, [r5, #13]
    4978:	7406      	strb	r6, [r0, #16]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[13];
    497a:	7bad      	ldrb	r5, [r5, #14]
    497c:	7445      	strb	r5, [r0, #17]
    497e:	4353      	muls	r3, r2
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[14]);
    4980:	001a      	movs	r2, r3
    4982:	320f      	adds	r2, #15
    4984:	1912      	adds	r2, r2, r4
    4986:	6042      	str	r2, [r0, #4]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    4988:	5d0a      	ldrb	r2, [r1, r4]
    498a:	3a15      	subs	r2, #21
    498c:	7302      	strb	r2, [r0, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    498e:	3312      	adds	r3, #18
    4990:	191b      	adds	r3, r3, r4
    4992:	6083      	str	r3, [r0, #8]
    4994:	e6cf      	b.n	4736 <MiMAC_ReceivedPacket+0xf6>
    4996:	46c0      	nop			; (mov r8, r8)
    4998:	20000a44 	.word	0x20000a44
    499c:	200001ee 	.word	0x200001ee
    49a0:	2000000a 	.word	0x2000000a
    49a4:	20000410 	.word	0x20000410
    49a8:	2000045e 	.word	0x2000045e
    49ac:	20000ab0 	.word	0x20000ab0
    49b0:	00004625 	.word	0x00004625
    49b4:	ff00ffff 	.word	0xff00ffff
    49b8:	20000a4c 	.word	0x20000a4c
            if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF) {
    49bc:	204e      	movs	r0, #78	; 0x4e
    49be:	4358      	muls	r0, r3
    49c0:	4a48      	ldr	r2, [pc, #288]	; (4ae4 <MiMAC_ReceivedPacket+0x4a4>)
    49c2:	1812      	adds	r2, r2, r0
    49c4:	7992      	ldrb	r2, [r2, #6]
    49c6:	2aff      	cmp	r2, #255	; 0xff
    49c8:	d00b      	beq.n	49e2 <MiMAC_ReceivedPacket+0x3a2>
            MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 10;
    49ca:	4847      	ldr	r0, [pc, #284]	; (4ae8 <MiMAC_ReceivedPacket+0x4a8>)
    49cc:	4c45      	ldr	r4, [pc, #276]	; (4ae4 <MiMAC_ReceivedPacket+0x4a4>)
    49ce:	224e      	movs	r2, #78	; 0x4e
    49d0:	4351      	muls	r1, r2
    49d2:	5d09      	ldrb	r1, [r1, r4]
    49d4:	390a      	subs	r1, #10
    49d6:	7301      	strb	r1, [r0, #12]
            MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    49d8:	4353      	muls	r3, r2
    49da:	3308      	adds	r3, #8
    49dc:	191b      	adds	r3, r3, r4
    49de:	6083      	str	r3, [r0, #8]
        } break;
    49e0:	e6a9      	b.n	4736 <MiMAC_ReceivedPacket+0xf6>
            if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF) {
    49e2:	204e      	movs	r0, #78	; 0x4e
    49e4:	4358      	muls	r0, r3
    49e6:	4a3f      	ldr	r2, [pc, #252]	; (4ae4 <MiMAC_ReceivedPacket+0x4a4>)
    49e8:	1812      	adds	r2, r2, r0
    49ea:	79d2      	ldrb	r2, [r2, #7]
    49ec:	2aff      	cmp	r2, #255	; 0xff
    49ee:	d1ec      	bne.n	49ca <MiMAC_ReceivedPacket+0x38a>
                MACRxPacket.flags.bits.broadcast = 1;
    49f0:	483d      	ldr	r0, [pc, #244]	; (4ae8 <MiMAC_ReceivedPacket+0x4a8>)
    49f2:	7802      	ldrb	r2, [r0, #0]
    49f4:	2404      	movs	r4, #4
    49f6:	4322      	orrs	r2, r4
    49f8:	7002      	strb	r2, [r0, #0]
    49fa:	e7e6      	b.n	49ca <MiMAC_ReceivedPacket+0x38a>
                MiMAC_DiscardPacket();
    49fc:	4b3b      	ldr	r3, [pc, #236]	; (4aec <MiMAC_ReceivedPacket+0x4ac>)
    49fe:	4798      	blx	r3
                return false;
    4a00:	2000      	movs	r0, #0
    4a02:	e646      	b.n	4692 <MiMAC_ReceivedPacket+0x52>
    4a04:	3401      	adds	r4, #1
    4a06:	350a      	adds	r5, #10
            for (i = 0; i < CONNECTION_SIZE; i++) {
    4a08:	2c0a      	cmp	r4, #10
    4a0a:	d01a      	beq.n	4a42 <MiMAC_ReceivedPacket+0x402>
    4a0c:	b2e6      	uxtb	r6, r4
                if ((ConnectionTable[i].status.bits.isValid) && isSameAddress(ConnectionTable[i].Address, MACRxPacket.SourceAddress)) {
    4a0e:	00a3      	lsls	r3, r4, #2
    4a10:	191b      	adds	r3, r3, r4
    4a12:	005b      	lsls	r3, r3, #1
    4a14:	4443      	add	r3, r8
    4a16:	7a5b      	ldrb	r3, [r3, #9]
    4a18:	09db      	lsrs	r3, r3, #7
    4a1a:	d0f3      	beq.n	4a04 <MiMAC_ReceivedPacket+0x3c4>
    4a1c:	4653      	mov	r3, sl
    4a1e:	6859      	ldr	r1, [r3, #4]
    4a20:	0028      	movs	r0, r5
    4a22:	4b33      	ldr	r3, [pc, #204]	; (4af0 <MiMAC_ReceivedPacket+0x4b0>)
    4a24:	4798      	blx	r3
    4a26:	2800      	cmp	r0, #0
    4a28:	d0ec      	beq.n	4a04 <MiMAC_ReceivedPacket+0x3c4>
            if (i < CONNECTION_SIZE) {
    4a2a:	2e09      	cmp	r6, #9
    4a2c:	d809      	bhi.n	4a42 <MiMAC_ReceivedPacket+0x402>
                if (IncomingFrameCounter[i].Val > FrameCounter.Val) {
    4a2e:	23ff      	movs	r3, #255	; 0xff
    4a30:	401c      	ands	r4, r3
    4a32:	00a2      	lsls	r2, r4, #2
    4a34:	4b2f      	ldr	r3, [pc, #188]	; (4af4 <MiMAC_ReceivedPacket+0x4b4>)
    4a36:	58d3      	ldr	r3, [r2, r3]
    4a38:	42bb      	cmp	r3, r7
    4a3a:	d82b      	bhi.n	4a94 <MiMAC_ReceivedPacket+0x454>
                    IncomingFrameCounter[i].Val = FrameCounter.Val;
    4a3c:	00a4      	lsls	r4, r4, #2
    4a3e:	4b2d      	ldr	r3, [pc, #180]	; (4af4 <MiMAC_ReceivedPacket+0x4b4>)
    4a40:	50e7      	str	r7, [r4, r3]
            MACRxPacket.PayloadLen -= 5; // used to 5 for frame counter now -4 also added for MIC integrity
    4a42:	4929      	ldr	r1, [pc, #164]	; (4ae8 <MiMAC_ReceivedPacket+0x4a8>)
    4a44:	7b0b      	ldrb	r3, [r1, #12]
    4a46:	3b05      	subs	r3, #5
    4a48:	b2db      	uxtb	r3, r3
    4a4a:	730b      	strb	r3, [r1, #12]
            received_mic_values[0] = MACRxPacket.Payload[MACRxPacket.PayloadLen + 1];
    4a4c:	6888      	ldr	r0, [r1, #8]
    4a4e:	18c3      	adds	r3, r0, r3
    4a50:	785c      	ldrb	r4, [r3, #1]
    4a52:	4a29      	ldr	r2, [pc, #164]	; (4af8 <MiMAC_ReceivedPacket+0x4b8>)
    4a54:	7014      	strb	r4, [r2, #0]
            received_mic_values[1] = MACRxPacket.Payload[MACRxPacket.PayloadLen + 2];
    4a56:	789c      	ldrb	r4, [r3, #2]
    4a58:	7054      	strb	r4, [r2, #1]
            received_mic_values[2] = MACRxPacket.Payload[MACRxPacket.PayloadLen + 3];
    4a5a:	78dc      	ldrb	r4, [r3, #3]
    4a5c:	7094      	strb	r4, [r2, #2]
            received_mic_values[3] = MACRxPacket.Payload[MACRxPacket.PayloadLen + 4];
    4a5e:	791b      	ldrb	r3, [r3, #4]
    4a60:	70d3      	strb	r3, [r2, #3]
            if (false == DataDecrypt(&(MACRxPacket.Payload[5]), &(MACRxPacket.PayloadLen), MACRxPacket.SourceAddress, FrameCounter, RxBuffer[BankIndex].Payload[0])) {
    4a62:	684a      	ldr	r2, [r1, #4]
    4a64:	310c      	adds	r1, #12
    4a66:	3005      	adds	r0, #5
    4a68:	4b24      	ldr	r3, [pc, #144]	; (4afc <MiMAC_ReceivedPacket+0x4bc>)
    4a6a:	781c      	ldrb	r4, [r3, #0]
    4a6c:	234e      	movs	r3, #78	; 0x4e
    4a6e:	435c      	muls	r4, r3
    4a70:	4b1c      	ldr	r3, [pc, #112]	; (4ae4 <MiMAC_ReceivedPacket+0x4a4>)
    4a72:	191b      	adds	r3, r3, r4
    4a74:	785b      	ldrb	r3, [r3, #1]
    4a76:	9300      	str	r3, [sp, #0]
    4a78:	003b      	movs	r3, r7
    4a7a:	4c21      	ldr	r4, [pc, #132]	; (4b00 <MiMAC_ReceivedPacket+0x4c0>)
    4a7c:	47a0      	blx	r4
    4a7e:	2800      	cmp	r0, #0
    4a80:	d00b      	beq.n	4a9a <MiMAC_ReceivedPacket+0x45a>
            MACRxPacket.Payload = &(MACRxPacket.Payload[5]);
    4a82:	4b19      	ldr	r3, [pc, #100]	; (4ae8 <MiMAC_ReceivedPacket+0x4a8>)
    4a84:	689a      	ldr	r2, [r3, #8]
    4a86:	3205      	adds	r2, #5
    4a88:	609a      	str	r2, [r3, #8]
            MACRxPacket.flags.bits.secEn = 1;
    4a8a:	781a      	ldrb	r2, [r3, #0]
    4a8c:	2108      	movs	r1, #8
    4a8e:	430a      	orrs	r2, r1
    4a90:	701a      	strb	r2, [r3, #0]
    4a92:	e65a      	b.n	474a <MiMAC_ReceivedPacket+0x10a>
                    MiMAC_DiscardPacket();
    4a94:	4b15      	ldr	r3, [pc, #84]	; (4aec <MiMAC_ReceivedPacket+0x4ac>)
    4a96:	4798      	blx	r3
                    return false;
    4a98:	e7b2      	b.n	4a00 <MiMAC_ReceivedPacket+0x3c0>
                MiMAC_DiscardPacket();
    4a9a:	4b14      	ldr	r3, [pc, #80]	; (4aec <MiMAC_ReceivedPacket+0x4ac>)
    4a9c:	4798      	blx	r3
                return false;
    4a9e:	e7af      	b.n	4a00 <MiMAC_ReceivedPacket+0x3c0>
            MACRxPacket.flags.bits.packetType = PACKET_TYPE_DATA;
    4aa0:	4a11      	ldr	r2, [pc, #68]	; (4ae8 <MiMAC_ReceivedPacket+0x4a8>)
    4aa2:	7813      	ldrb	r3, [r2, #0]
    4aa4:	2103      	movs	r1, #3
    4aa6:	438b      	bics	r3, r1
    4aa8:	7013      	strb	r3, [r2, #0]
        MACRxPacket.LQIValue = Received_LQI_Val;
    4aaa:	4b0f      	ldr	r3, [pc, #60]	; (4ae8 <MiMAC_ReceivedPacket+0x4a8>)
    4aac:	4a15      	ldr	r2, [pc, #84]	; (4b04 <MiMAC_ReceivedPacket+0x4c4>)
    4aae:	7812      	ldrb	r2, [r2, #0]
    4ab0:	739a      	strb	r2, [r3, #14]
        MACRxPacket.RSSIValue = Received_RSSI_Val;
    4ab2:	4a15      	ldr	r2, [pc, #84]	; (4b08 <MiMAC_ReceivedPacket+0x4c8>)
    4ab4:	7812      	ldrb	r2, [r2, #0]
    4ab6:	735a      	strb	r2, [r3, #13]
        return true;
    4ab8:	2001      	movs	r0, #1
    4aba:	e5ea      	b.n	4692 <MiMAC_ReceivedPacket+0x52>
            MACRxPacket.flags.bits.packetType = PACKET_TYPE_COMMAND;
    4abc:	4a0a      	ldr	r2, [pc, #40]	; (4ae8 <MiMAC_ReceivedPacket+0x4a8>)
    4abe:	7813      	ldrb	r3, [r2, #0]
    4ac0:	2103      	movs	r1, #3
    4ac2:	438b      	bics	r3, r1
    4ac4:	2101      	movs	r1, #1
    4ac6:	430b      	orrs	r3, r1
    4ac8:	7013      	strb	r3, [r2, #0]
            break;
    4aca:	e7ee      	b.n	4aaa <MiMAC_ReceivedPacket+0x46a>
            MACRxPacket.flags.bits.packetType = PACKET_TYPE_RESERVE;
    4acc:	4a06      	ldr	r2, [pc, #24]	; (4ae8 <MiMAC_ReceivedPacket+0x4a8>)
    4ace:	7813      	ldrb	r3, [r2, #0]
    4ad0:	2103      	movs	r1, #3
    4ad2:	430b      	orrs	r3, r1
    4ad4:	7013      	strb	r3, [r2, #0]
            break;
    4ad6:	e7e8      	b.n	4aaa <MiMAC_ReceivedPacket+0x46a>
            BankIndex = i;
    4ad8:	2200      	movs	r2, #0
    4ada:	4b08      	ldr	r3, [pc, #32]	; (4afc <MiMAC_ReceivedPacket+0x4bc>)
    4adc:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < BANK_SIZE; i++) {
    4ade:	2300      	movs	r3, #0
    4ae0:	e5e7      	b.n	46b2 <MiMAC_ReceivedPacket+0x72>
    4ae2:	46c0      	nop			; (mov r8, r8)
    4ae4:	20000410 	.word	0x20000410
    4ae8:	20000ab0 	.word	0x20000ab0
    4aec:	00004625 	.word	0x00004625
    4af0:	00004cf5 	.word	0x00004cf5
    4af4:	20000acc 	.word	0x20000acc
    4af8:	20000a3c 	.word	0x20000a3c
    4afc:	2000000a 	.word	0x2000000a
    4b00:	00004109 	.word	0x00004109
    4b04:	200003c9 	.word	0x200003c9
    4b08:	200003fc 	.word	0x200003fc

00004b0c <PHY_PacketReceieved>:

/*************************************************************************/ /**
*****************************************************************************/
// Handle Packet Received // ISR calls this routine
void PHY_PacketReceieved(void)
{
    4b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b0e:	b083      	sub	sp, #12
    if (PHY_STATE_SLEEP == phyState) {
    4b10:	4b3c      	ldr	r3, [pc, #240]	; (4c04 <PHY_PacketReceieved+0xf8>)
    4b12:	781b      	ldrb	r3, [r3, #0]
    4b14:	2b02      	cmp	r3, #2
    4b16:	d00a      	beq.n	4b2e <PHY_PacketReceieved+0x22>
    value = trx_reg_read(reg);
    4b18:	200f      	movs	r0, #15
    4b1a:	4b3b      	ldr	r3, [pc, #236]	; (4c08 <PHY_PacketReceieved+0xfc>)
    4b1c:	4798      	blx	r3
        return;
    }
    if (phyReadRegister(RG_IRQ_STATUS) & (1 << TRX_END)) {
    4b1e:	0703      	lsls	r3, r0, #28
    4b20:	d505      	bpl.n	4b2e <PHY_PacketReceieved+0x22>
        if (PHY_STATE_IDLE == phyState) {
    4b22:	4b38      	ldr	r3, [pc, #224]	; (4c04 <PHY_PacketReceieved+0xf8>)
    4b24:	781b      	ldrb	r3, [r3, #0]
    4b26:	2b01      	cmp	r3, #1
    4b28:	d003      	beq.n	4b32 <PHY_PacketReceieved+0x26>
            }
            Received_LQI_Val = phyRxBuffer[i - 2];

            phyWaitState(TRX_STATUS_RX_AACK_ON);
        }
        else if (PHY_STATE_TX_WAIT_END == phyState) {
    4b2a:	2b03      	cmp	r3, #3
    4b2c:	d04e      	beq.n	4bcc <PHY_PacketReceieved+0xc0>

            phySetRxState();
            phyState = PHY_STATE_IDLE;
        }
    }
    4b2e:	b003      	add	sp, #12
    4b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
                if (RxBuffer[i].PayloadLen == 0) {
    4b32:	4b36      	ldr	r3, [pc, #216]	; (4c0c <PHY_PacketReceieved+0x100>)
    4b34:	781e      	ldrb	r6, [r3, #0]
    4b36:	2e00      	cmp	r6, #0
    4b38:	d044      	beq.n	4bc4 <PHY_PacketReceieved+0xb8>
    4b3a:	4b35      	ldr	r3, [pc, #212]	; (4c10 <PHY_PacketReceieved+0x104>)
            for (i = 0; i < BANK_SIZE; i++) {
    4b3c:	2401      	movs	r4, #1
                if (RxBuffer[i].PayloadLen == 0) {
    4b3e:	781a      	ldrb	r2, [r3, #0]
    4b40:	2a00      	cmp	r2, #0
    4b42:	d041      	beq.n	4bc8 <PHY_PacketReceieved+0xbc>
            for (i = 0; i < BANK_SIZE; i++) {
    4b44:	3401      	adds	r4, #1
    4b46:	b2e4      	uxtb	r4, r4
    4b48:	334e      	adds	r3, #78	; 0x4e
    4b4a:	2c14      	cmp	r4, #20
    4b4c:	d1f7      	bne.n	4b3e <PHY_PacketReceieved+0x32>
            uint8_t size, i, RxBank = 0xFF;
    4b4e:	26ff      	movs	r6, #255	; 0xff
    value = trx_reg_read(reg);
    4b50:	2007      	movs	r0, #7
    4b52:	4b2d      	ldr	r3, [pc, #180]	; (4c08 <PHY_PacketReceieved+0xfc>)
    4b54:	4798      	blx	r3
            Received_RSSI_Val = PHY_RSSI_BASE_VAL + (uint8_t)phyReadRegister(RG_PHY_ED_LEVEL);
    4b56:	385b      	subs	r0, #91	; 0x5b
    4b58:	4b2e      	ldr	r3, [pc, #184]	; (4c14 <PHY_PacketReceieved+0x108>)
    4b5a:	7018      	strb	r0, [r3, #0]
            trx_frame_read(&size, 1);
    4b5c:	466b      	mov	r3, sp
    4b5e:	1ddd      	adds	r5, r3, #7
    4b60:	2101      	movs	r1, #1
    4b62:	0028      	movs	r0, r5
    4b64:	4f2c      	ldr	r7, [pc, #176]	; (4c18 <PHY_PacketReceieved+0x10c>)
    4b66:	47b8      	blx	r7
            trx_frame_read(phyRxBuffer, size + 2 + 3); // +3 is ED, LQI and RX_STATUS bytes
    4b68:	7829      	ldrb	r1, [r5, #0]
    4b6a:	3105      	adds	r1, #5
    4b6c:	b2c9      	uxtb	r1, r1
    4b6e:	482b      	ldr	r0, [pc, #172]	; (4c1c <PHY_PacketReceieved+0x110>)
    4b70:	47b8      	blx	r7
            RxBuffer[RxBank].PayloadLen = size + 2;
    4b72:	7829      	ldrb	r1, [r5, #0]
    4b74:	1c8b      	adds	r3, r1, #2
    4b76:	b2db      	uxtb	r3, r3
    4b78:	204e      	movs	r0, #78	; 0x4e
    4b7a:	4346      	muls	r6, r0
    4b7c:	4823      	ldr	r0, [pc, #140]	; (4c0c <PHY_PacketReceieved+0x100>)
    4b7e:	5433      	strb	r3, [r6, r0]
            if (RxBuffer[RxBank].PayloadLen < RX_PACKET_SIZE) {
    4b80:	2b4c      	cmp	r3, #76	; 0x4c
    4b82:	d811      	bhi.n	4ba8 <PHY_PacketReceieved+0x9c>
                trx_status.bits.RX_BUFFERED = 1;
    4b84:	4826      	ldr	r0, [pc, #152]	; (4c20 <PHY_PacketReceieved+0x114>)
    4b86:	7803      	ldrb	r3, [r0, #0]
    4b88:	2420      	movs	r4, #32
    4b8a:	4323      	orrs	r3, r4
    4b8c:	7003      	strb	r3, [r0, #0]
                for (i = 1; i <= size + 2; i++) {
    4b8e:	3102      	adds	r1, #2
    4b90:	2301      	movs	r3, #1
    4b92:	2401      	movs	r4, #1
                    RxBuffer[RxBank].Payload[i - 1] = phyRxBuffer[i];
    4b94:	481d      	ldr	r0, [pc, #116]	; (4c0c <PHY_PacketReceieved+0x100>)
    4b96:	1980      	adds	r0, r0, r6
    4b98:	4d20      	ldr	r5, [pc, #128]	; (4c1c <PHY_PacketReceieved+0x110>)
    4b9a:	5cea      	ldrb	r2, [r5, r3]
    4b9c:	54c2      	strb	r2, [r0, r3]
                for (i = 1; i <= size + 2; i++) {
    4b9e:	3401      	adds	r4, #1
    4ba0:	b2e4      	uxtb	r4, r4
    4ba2:	0023      	movs	r3, r4
    4ba4:	428c      	cmp	r4, r1
    4ba6:	ddf8      	ble.n	4b9a <PHY_PacketReceieved+0x8e>
            Received_LQI_Val = phyRxBuffer[i - 2];
    4ba8:	4b1c      	ldr	r3, [pc, #112]	; (4c1c <PHY_PacketReceieved+0x110>)
    4baa:	191c      	adds	r4, r3, r4
    4bac:	3c02      	subs	r4, #2
    4bae:	7822      	ldrb	r2, [r4, #0]
    4bb0:	4b1c      	ldr	r3, [pc, #112]	; (4c24 <PHY_PacketReceieved+0x118>)
    4bb2:	701a      	strb	r2, [r3, #0]
    value = trx_reg_read(reg);
    4bb4:	4d14      	ldr	r5, [pc, #80]	; (4c08 <PHY_PacketReceieved+0xfc>)
    while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK)) {
    4bb6:	241f      	movs	r4, #31
    value = trx_reg_read(reg);
    4bb8:	2001      	movs	r0, #1
    4bba:	47a8      	blx	r5
    while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK)) {
    4bbc:	4020      	ands	r0, r4
    4bbe:	2816      	cmp	r0, #22
    4bc0:	d1fa      	bne.n	4bb8 <PHY_PacketReceieved+0xac>
    4bc2:	e7b4      	b.n	4b2e <PHY_PacketReceieved+0x22>
                if (RxBuffer[i].PayloadLen == 0) {
    4bc4:	0034      	movs	r4, r6
    4bc6:	e7c3      	b.n	4b50 <PHY_PacketReceieved+0x44>
    4bc8:	0026      	movs	r6, r4
    4bca:	e7c1      	b.n	4b50 <PHY_PacketReceieved+0x44>
    value = trx_reg_read(reg);
    4bcc:	2002      	movs	r0, #2
    4bce:	4b0e      	ldr	r3, [pc, #56]	; (4c08 <PHY_PacketReceieved+0xfc>)
    4bd0:	4798      	blx	r3
            trx_status.bits.TX_FAIL = 0;
    4bd2:	4b13      	ldr	r3, [pc, #76]	; (4c20 <PHY_PacketReceieved+0x114>)
    4bd4:	781a      	ldrb	r2, [r3, #0]
    4bd6:	2104      	movs	r1, #4
    4bd8:	438a      	bics	r2, r1
    4bda:	701a      	strb	r2, [r3, #0]
            trx_status.bits.TX_PENDING_ACK = 0;
    4bdc:	781a      	ldrb	r2, [r3, #0]
    4bde:	3902      	subs	r1, #2
    4be0:	438a      	bics	r2, r1
    4be2:	701a      	strb	r2, [r3, #0]
                = (phyReadRegister(RG_TRX_STATE) >> TRAC_STATUS) & 7;
    4be4:	0940      	lsrs	r0, r0, #5
            if (TRAC_STATUS_SUCCESS == status) {
    4be6:	b2c0      	uxtb	r0, r0
    4be8:	2805      	cmp	r0, #5
    4bea:	d104      	bne.n	4bf6 <PHY_PacketReceieved+0xea>
                trx_status.bits.TX_FAIL = 1;
    4bec:	001a      	movs	r2, r3
    4bee:	781b      	ldrb	r3, [r3, #0]
    4bf0:	2104      	movs	r1, #4
    4bf2:	430b      	orrs	r3, r1
    4bf4:	7013      	strb	r3, [r2, #0]
            phySetRxState();
    4bf6:	4b0c      	ldr	r3, [pc, #48]	; (4c28 <PHY_PacketReceieved+0x11c>)
    4bf8:	4798      	blx	r3
            phyState = PHY_STATE_IDLE;
    4bfa:	2201      	movs	r2, #1
    4bfc:	4b01      	ldr	r3, [pc, #4]	; (4c04 <PHY_PacketReceieved+0xf8>)
    4bfe:	701a      	strb	r2, [r3, #0]
    4c00:	e795      	b.n	4b2e <PHY_PacketReceieved+0x22>
    4c02:	46c0      	nop			; (mov r8, r8)
    4c04:	20000271 	.word	0x20000271
    4c08:	00001a81 	.word	0x00001a81
    4c0c:	20000410 	.word	0x20000410
    4c10:	2000045e 	.word	0x2000045e
    4c14:	200003fc 	.word	0x200003fc
    4c18:	00001c7d 	.word	0x00001c7d
    4c1c:	200001f0 	.word	0x200001f0
    4c20:	20000a44 	.word	0x20000a44
    4c24:	200003c9 	.word	0x200003c9
    4c28:	00003c69 	.word	0x00003c69

00004c2c <Total_Connections>:
/************************ VARIABLES ********************************/
uint8_t myLongAddress[8];

// Evaluate Total No of Peer Connection on a Node
uint8_t Total_Connections(void)
{
    4c2c:	2200      	movs	r2, #0
    uint8_t count=0 , i;
    4c2e:	2000      	movs	r0, #0
        if (ConnectionTable[i].Address[0] != 0x00 || ConnectionTable[i].Address[1] != 0x00 || ConnectionTable[i].Address[2] != 0x00)
        {
            count++;
        }
    #else
        if (ConnectionTable[i].status.bits.isValid)
    4c30:	4907      	ldr	r1, [pc, #28]	; (4c50 <Total_Connections+0x24>)
    4c32:	e002      	b.n	4c3a <Total_Connections+0xe>
    4c34:	3201      	adds	r2, #1
    for (i=0;i<CONNECTION_SIZE;i++)
    4c36:	2a0a      	cmp	r2, #10
    4c38:	d009      	beq.n	4c4e <Total_Connections+0x22>
        if (ConnectionTable[i].status.bits.isValid)
    4c3a:	0093      	lsls	r3, r2, #2
    4c3c:	189b      	adds	r3, r3, r2
    4c3e:	005b      	lsls	r3, r3, #1
    4c40:	18cb      	adds	r3, r1, r3
    4c42:	7a5b      	ldrb	r3, [r3, #9]
    4c44:	09db      	lsrs	r3, r3, #7
    4c46:	d0f5      	beq.n	4c34 <Total_Connections+0x8>
        {
            count++;
    4c48:	3001      	adds	r0, #1
    4c4a:	b2c0      	uxtb	r0, r0
    4c4c:	e7f2      	b.n	4c34 <Total_Connections+0x8>
        }
    #endif      
    }
    return count;
}
    4c4e:	4770      	bx	lr
    4c50:	20000a4c 	.word	0x20000a4c

00004c54 <SendPacket>:
    bool SendPacket(INPUT bool Broadcast,
                    INPUT uint8_t *DestinationAddress,
                    INPUT bool isCommand,
                    INPUT bool SecurityEnabled)
#endif                                        
{ 
    4c54:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c56:	46d6      	mov	lr, sl
    4c58:	464f      	mov	r7, r9
    4c5a:	b580      	push	{r7, lr}
    4c5c:	b089      	sub	sp, #36	; 0x24
    4c5e:	9203      	str	r2, [sp, #12]
    4c60:	ac10      	add	r4, sp, #64	; 0x40
    4c62:	7824      	ldrb	r4, [r4, #0]
    4c64:	46a1      	mov	r9, r4
    MAC_TRANS_PARAM tParam;
    bool status;

    tParam.flags.Val = 0;
    4c66:	ac05      	add	r4, sp, #20
    4c68:	2500      	movs	r5, #0
    tParam.flags.bits.packetType = (isCommand) ? PACKET_TYPE_COMMAND : PACKET_TYPE_DATA;
    tParam.flags.bits.ackReq = (Broadcast) ? 0 : 1;
    4c6a:	2701      	movs	r7, #1
    4c6c:	4047      	eors	r7, r0
    4c6e:	2601      	movs	r6, #1
    4c70:	46b4      	mov	ip, r6
    4c72:	4037      	ands	r7, r6
    4c74:	017e      	lsls	r6, r7, #5
    4c76:	46b2      	mov	sl, r6
    4c78:	2603      	movs	r6, #3
    4c7a:	4033      	ands	r3, r6
    tParam.flags.bits.broadcast = Broadcast;
    4c7c:	4662      	mov	r2, ip
    4c7e:	4002      	ands	r2, r0
    4c80:	0092      	lsls	r2, r2, #2
    4c82:	4656      	mov	r6, sl
    4c84:	4333      	orrs	r3, r6
    4c86:	469a      	mov	sl, r3
    tParam.flags.bits.secEn = SecurityEnabled;
    4c88:	464e      	mov	r6, r9
    4c8a:	4663      	mov	r3, ip
    4c8c:	401e      	ands	r6, r3
    4c8e:	00f6      	lsls	r6, r6, #3
    4c90:	4653      	mov	r3, sl
    4c92:	4313      	orrs	r3, r2
    #if defined(IEEE_802_15_4)
        tParam.altSrcAddr = 0;
    4c94:	7265      	strb	r5, [r4, #9]
        tParam.altDestAddr = (Broadcast) ? true : false;
    4c96:	7220      	strb	r0, [r4, #8]
    #endif
    
    #if defined(INFER_DEST_ADDRESS)
        tParam.flags.bits.destPrsnt = 0;
    #else
        tParam.flags.bits.destPrsnt = (Broadcast) ? 0:1;
    4c98:	01bf      	lsls	r7, r7, #6
    4c9a:	4333      	orrs	r3, r6
        else
        {
            tParam.flags.bits.sourcePrsnt = 0;
        }
    #else
        tParam.flags.bits.sourcePrsnt = 1;
    4c9c:	433b      	orrs	r3, r7
    4c9e:	2080      	movs	r0, #128	; 0x80
    4ca0:	4240      	negs	r0, r0
    4ca2:	4303      	orrs	r3, r0
    4ca4:	7023      	strb	r3, [r4, #0]
    #endif
    
    tParam.DestAddress = DestinationAddress;

    #if defined(IEEE_802_15_4)
        tParam.DestPANID.Val = DestinationPANID.Val;
    4ca6:	8161      	strh	r1, [r4, #10]
    #endif

    status = MiMAC_SendPacket(tParam, TxBuffer, TxData); 
    4ca8:	4e07      	ldr	r6, [pc, #28]	; (4cc8 <SendPacket+0x74>)
    4caa:	7833      	ldrb	r3, [r6, #0]
    4cac:	9300      	str	r3, [sp, #0]
    4cae:	4b07      	ldr	r3, [pc, #28]	; (4ccc <SendPacket+0x78>)
    4cb0:	9805      	ldr	r0, [sp, #20]
    4cb2:	9903      	ldr	r1, [sp, #12]
    4cb4:	9a07      	ldr	r2, [sp, #28]
    4cb6:	4c06      	ldr	r4, [pc, #24]	; (4cd0 <SendPacket+0x7c>)
    4cb8:	47a0      	blx	r4
    TxData = 0;
    4cba:	7035      	strb	r5, [r6, #0]
    
    return status;
}
    4cbc:	b009      	add	sp, #36	; 0x24
    4cbe:	bc0c      	pop	{r2, r3}
    4cc0:	4691      	mov	r9, r2
    4cc2:	469a      	mov	sl, r3
    4cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4cc6:	46c0      	nop			; (mov r8, r8)
    4cc8:	20000af9 	.word	0x20000af9
    4ccc:	20000afc 	.word	0x20000afc
    4cd0:	00004265 	.word	0x00004265

00004cd4 <MiApp_BroadcastPacket>:
 * Remarks:    
 *      None
 *
 *****************************************************************************************/ 
bool MiApp_BroadcastPacket( INPUT bool SecEn )
{
    4cd4:	b510      	push	{r4, lr}
    4cd6:	b082      	sub	sp, #8
            return true;
        }    
    #endif
    
    #if defined(IEEE_802_15_4)
        return SendPacket(true, myPANID, NULL, false, SecEn);
    4cd8:	4b04      	ldr	r3, [pc, #16]	; (4cec <MiApp_BroadcastPacket+0x18>)
    4cda:	8819      	ldrh	r1, [r3, #0]
    4cdc:	9000      	str	r0, [sp, #0]
    4cde:	2300      	movs	r3, #0
    4ce0:	2200      	movs	r2, #0
    4ce2:	2001      	movs	r0, #1
    4ce4:	4c02      	ldr	r4, [pc, #8]	; (4cf0 <MiApp_BroadcastPacket+0x1c>)
    4ce6:	47a0      	blx	r4
    #else
        return SendPacket(true, NULL, false, SecEn);
    #endif
}
    4ce8:	b002      	add	sp, #8
    4cea:	bd10      	pop	{r4, pc}
    4cec:	20000ac8 	.word	0x20000ac8
    4cf0:	00004c55 	.word	0x00004c55

00004cf4 <isSameAddress>:
 *
 * Side Effects:    
 *
 ********************************************************************/
bool    isSameAddress(INPUT uint8_t *Address1, INPUT uint8_t *Address2)
{
    4cf4:	b510      	push	{r4, lr}
    uint8_t i;
    
    for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    {
        if( Address1[i] != Address2[i] )
    4cf6:	7802      	ldrb	r2, [r0, #0]
    4cf8:	780b      	ldrb	r3, [r1, #0]
    4cfa:	429a      	cmp	r2, r3
    4cfc:	d109      	bne.n	4d12 <isSameAddress+0x1e>
    4cfe:	2301      	movs	r3, #1
    4d00:	5cc4      	ldrb	r4, [r0, r3]
    4d02:	5cca      	ldrb	r2, [r1, r3]
    4d04:	4294      	cmp	r4, r2
    4d06:	d106      	bne.n	4d16 <isSameAddress+0x22>
    4d08:	3301      	adds	r3, #1
    for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    4d0a:	2b08      	cmp	r3, #8
    4d0c:	d1f8      	bne.n	4d00 <isSameAddress+0xc>
        {
            return false;
        }
    }
    return true;
    4d0e:	2001      	movs	r0, #1
}
    4d10:	bd10      	pop	{r4, pc}
            return false;
    4d12:	2000      	movs	r0, #0
    4d14:	e7fc      	b.n	4d10 <isSameAddress+0x1c>
    4d16:	2000      	movs	r0, #0
    4d18:	e7fa      	b.n	4d10 <isSameAddress+0x1c>
	...

00004d1c <MiApp_DiscardMessage>:



 
void MiApp_DiscardMessage(void)
{
    4d1c:	b510      	push	{r4, lr}
    P2PStatus.bits.RxHasUserData = 0;
    4d1e:	4a04      	ldr	r2, [pc, #16]	; (4d30 <MiApp_DiscardMessage+0x14>)
    4d20:	7813      	ldrb	r3, [r2, #0]
    4d22:	2108      	movs	r1, #8
    4d24:	438b      	bics	r3, r1
    4d26:	7013      	strb	r3, [r2, #0]
    MiMAC_DiscardPacket();
    4d28:	4b02      	ldr	r3, [pc, #8]	; (4d34 <MiApp_DiscardMessage+0x18>)
    4d2a:	4798      	blx	r3
}
    4d2c:	bd10      	pop	{r4, pc}
    4d2e:	46c0      	nop			; (mov r8, r8)
    4d30:	20000af8 	.word	0x20000af8
    4d34:	00004625 	.word	0x00004625

00004d38 <MiApp_SetChannel>:


 
bool MiApp_SetChannel(uint8_t channel)
{
    4d38:	b510      	push	{r4, lr}
    4d3a:	0004      	movs	r4, r0
    if( MiMAC_SetChannel(channel, 0) )
    4d3c:	2100      	movs	r1, #0
    4d3e:	4b03      	ldr	r3, [pc, #12]	; (4d4c <MiApp_SetChannel+0x14>)
    4d40:	4798      	blx	r3
    4d42:	2800      	cmp	r0, #0
    4d44:	d001      	beq.n	4d4a <MiApp_SetChannel+0x12>
    {
        currentChannel = channel;
    4d46:	4b02      	ldr	r3, [pc, #8]	; (4d50 <MiApp_SetChannel+0x18>)
    4d48:	701c      	strb	r4, [r3, #0]
            nvmPutCurrentChannel(&currentChannel);
        #endif
        return true;
    }
    return false;
}
    4d4a:	bd10      	pop	{r4, pc}
    4d4c:	00004245 	.word	0x00004245
    4d50:	20000273 	.word	0x20000273

00004d54 <MiApp_ProtocolInit>:
{
    4d54:	b570      	push	{r4, r5, r6, lr}
    4d56:	b084      	sub	sp, #16
	P2PStatus.Val = 0;
    4d58:	2200      	movs	r2, #0
    4d5a:	4b37      	ldr	r3, [pc, #220]	; (4e38 <MiApp_ProtocolInit+0xe4>)
    4d5c:	701a      	strb	r2, [r3, #0]
	val_1 = *ptr1;
    4d5e:	4b37      	ldr	r3, [pc, #220]	; (4e3c <MiApp_ProtocolInit+0xe8>)
    4d60:	681d      	ldr	r5, [r3, #0]
	val_2 = *ptr;
    4d62:	4b37      	ldr	r3, [pc, #220]	; (4e40 <MiApp_ProtocolInit+0xec>)
    4d64:	681c      	ldr	r4, [r3, #0]
	val_3 = *ptr;
    4d66:	4b37      	ldr	r3, [pc, #220]	; (4e44 <MiApp_ProtocolInit+0xf0>)
    4d68:	6819      	ldr	r1, [r3, #0]
	val_4 = *ptr;
    4d6a:	4b37      	ldr	r3, [pc, #220]	; (4e48 <MiApp_ProtocolInit+0xf4>)
    4d6c:	681a      	ldr	r2, [r3, #0]
	myLongAddress[0] = (val_1 & 0xFF) + ((val_1>>8) & 0xFF);
    4d6e:	4b37      	ldr	r3, [pc, #220]	; (4e4c <MiApp_ProtocolInit+0xf8>)
    4d70:	0a2e      	lsrs	r6, r5, #8
    4d72:	1976      	adds	r6, r6, r5
    4d74:	701e      	strb	r6, [r3, #0]
	myLongAddress[1] = ((val_1>>16) & 0xFF) + ((val_1)>>24 & 0xFF);
    4d76:	0c2e      	lsrs	r6, r5, #16
    4d78:	0e2d      	lsrs	r5, r5, #24
    4d7a:	1975      	adds	r5, r6, r5
    4d7c:	705d      	strb	r5, [r3, #1]
	myLongAddress[2] = (val_2 & 0xFF) + ((val_2>>8) & 0xFF);
    4d7e:	0a25      	lsrs	r5, r4, #8
    4d80:	192d      	adds	r5, r5, r4
    4d82:	709d      	strb	r5, [r3, #2]
	myLongAddress[3] = ((val_2>>16) & 0xFF) + ((val_2)>>24 & 0xFF);
    4d84:	0c25      	lsrs	r5, r4, #16
    4d86:	0e24      	lsrs	r4, r4, #24
    4d88:	192c      	adds	r4, r5, r4
    4d8a:	70dc      	strb	r4, [r3, #3]
	myLongAddress[4] = (val_3 & 0xFF) + ((val_3>>8) & 0xFF);
    4d8c:	0a0c      	lsrs	r4, r1, #8
    4d8e:	1864      	adds	r4, r4, r1
    4d90:	711c      	strb	r4, [r3, #4]
	myLongAddress[5] = ((val_3>>16) & 0xFF) + ((val_3)>>24 & 0xFF);
    4d92:	0c0c      	lsrs	r4, r1, #16
    4d94:	0e09      	lsrs	r1, r1, #24
    4d96:	1861      	adds	r1, r4, r1
    4d98:	7159      	strb	r1, [r3, #5]
	myLongAddress[6] = (val_4 & 0xFF) + ((val_4>>8) & 0xFF);
    4d9a:	0a11      	lsrs	r1, r2, #8
    4d9c:	1889      	adds	r1, r1, r2
    4d9e:	7199      	strb	r1, [r3, #6]
	myLongAddress[7] = ((val_4>>16) & 0xFF) + ((val_4)>>24 & 0xFF);
    4da0:	0c11      	lsrs	r1, r2, #16
    4da2:	0e12      	lsrs	r2, r2, #24
    4da4:	188a      	adds	r2, r1, r2
    4da6:	71da      	strb	r2, [r3, #7]
	if (!bNetworkFreezer)
    4da8:	2800      	cmp	r0, #0
    4daa:	d10a      	bne.n	4dc2 <MiApp_ProtocolInit+0x6e>
    4dac:	4b28      	ldr	r3, [pc, #160]	; (4e50 <MiApp_ProtocolInit+0xfc>)
    4dae:	0019      	movs	r1, r3
    4db0:	3164      	adds	r1, #100	; 0x64
			ConnectionTable[i].status.Val = 0;
    4db2:	2200      	movs	r2, #0
    4db4:	725a      	strb	r2, [r3, #9]
			ConnectionTable[i].Address[0] = 0x00;
    4db6:	701a      	strb	r2, [r3, #0]
			ConnectionTable[i].Address[1] = 0x00;
    4db8:	705a      	strb	r2, [r3, #1]
			ConnectionTable[i].Address[2] = 0x00;
    4dba:	709a      	strb	r2, [r3, #2]
    4dbc:	330a      	adds	r3, #10
		for(i = 0; i < CONNECTION_SIZE; i++)
    4dbe:	428b      	cmp	r3, r1
    4dc0:	d1f8      	bne.n	4db4 <MiApp_ProtocolInit+0x60>
	TxData = 0;
    4dc2:	2200      	movs	r2, #0
    4dc4:	4b23      	ldr	r3, [pc, #140]	; (4e54 <MiApp_ProtocolInit+0x100>)
    4dc6:	701a      	strb	r2, [r3, #0]
    4dc8:	4b23      	ldr	r3, [pc, #140]	; (4e58 <MiApp_ProtocolInit+0x104>)
    4dca:	0019      	movs	r1, r3
    4dcc:	3128      	adds	r1, #40	; 0x28
		IncomingFrameCounter[i].Val = 0;
    4dce:	c304      	stmia	r3!, {r2}
	for(i = 0; i < CONNECTION_SIZE; i++)
    4dd0:	4299      	cmp	r1, r3
    4dd2:	d1fc      	bne.n	4dce <MiApp_ProtocolInit+0x7a>
	myPANID.Val = MY_PAN_ID;
    4dd4:	4c21      	ldr	r4, [pc, #132]	; (4e5c <MiApp_ProtocolInit+0x108>)
    4dd6:	4b22      	ldr	r3, [pc, #136]	; (4e60 <MiApp_ProtocolInit+0x10c>)
    4dd8:	8023      	strh	r3, [r4, #0]
	initValue.PAddress = myLongAddress;
    4dda:	aa02      	add	r2, sp, #8
	initValue.actionFlags.bits.CCAEnable = 1;
    4ddc:	7813      	ldrb	r3, [r2, #0]
    4dde:	2102      	movs	r1, #2
    4de0:	430b      	orrs	r3, r1
	initValue.actionFlags.bits.PAddrLength = MY_ADDRESS_LENGTH;
    4de2:	2187      	movs	r1, #135	; 0x87
    4de4:	400b      	ands	r3, r1
    4de6:	2140      	movs	r1, #64	; 0x40
    4de8:	430b      	orrs	r3, r1
	initValue.actionFlags.bits.NetworkFreezer = bNetworkFreezer;
    4dea:	2101      	movs	r1, #1
    4dec:	4001      	ands	r1, r0
    4dee:	0089      	lsls	r1, r1, #2
    4df0:	20c3      	movs	r0, #195	; 0xc3
    4df2:	4018      	ands	r0, r3
	initValue.actionFlags.bits.RepeaterMode = 0;
    4df4:	4308      	orrs	r0, r1
    4df6:	2301      	movs	r3, #1
    4df8:	4398      	bics	r0, r3
    4dfa:	7010      	strb	r0, [r2, #0]
	MiMAC_Init(initValue);
    4dfc:	9802      	ldr	r0, [sp, #8]
    4dfe:	4913      	ldr	r1, [pc, #76]	; (4e4c <MiApp_ProtocolInit+0xf8>)
    4e00:	4b18      	ldr	r3, [pc, #96]	; (4e64 <MiApp_ProtocolInit+0x110>)
    4e02:	4798      	blx	r3
		uint16_t tmp = 0xFFFF;
    4e04:	466b      	mov	r3, sp
    4e06:	1d98      	adds	r0, r3, #6
    4e08:	2301      	movs	r3, #1
    4e0a:	425b      	negs	r3, r3
    4e0c:	8003      	strh	r3, [r0, #0]
		MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    4e0e:	0021      	movs	r1, r4
    4e10:	4b15      	ldr	r3, [pc, #84]	; (4e68 <MiApp_ProtocolInit+0x114>)
    4e12:	4798      	blx	r3
	MiApp_SetChannel(currentChannel);
    4e14:	4b15      	ldr	r3, [pc, #84]	; (4e6c <MiApp_ProtocolInit+0x118>)
    4e16:	7818      	ldrb	r0, [r3, #0]
    4e18:	4b15      	ldr	r3, [pc, #84]	; (4e70 <MiApp_ProtocolInit+0x11c>)
    4e1a:	4798      	blx	r3
	P2PCapacityInfo |= (ConnMode << 4);
    4e1c:	4b15      	ldr	r3, [pc, #84]	; (4e74 <MiApp_ProtocolInit+0x120>)
    4e1e:	781b      	ldrb	r3, [r3, #0]
    4e20:	011b      	lsls	r3, r3, #4
    4e22:	2209      	movs	r2, #9
    4e24:	4313      	orrs	r3, r2
    4e26:	4a14      	ldr	r2, [pc, #80]	; (4e78 <MiApp_ProtocolInit+0x124>)
    4e28:	7013      	strb	r3, [r2, #0]
	ENABLE_TRX_IRQ();
    4e2a:	2100      	movs	r1, #0
    4e2c:	2000      	movs	r0, #0
    4e2e:	4b13      	ldr	r3, [pc, #76]	; (4e7c <MiApp_ProtocolInit+0x128>)
    4e30:	4798      	blx	r3
}
    4e32:	2001      	movs	r0, #1
    4e34:	b004      	add	sp, #16
    4e36:	bd70      	pop	{r4, r5, r6, pc}
    4e38:	20000af8 	.word	0x20000af8
    4e3c:	0080a00c 	.word	0x0080a00c
    4e40:	0080a040 	.word	0x0080a040
    4e44:	0080a044 	.word	0x0080a044
    4e48:	0080a048 	.word	0x0080a048
    4e4c:	20000b24 	.word	0x20000b24
    4e50:	20000a4c 	.word	0x20000a4c
    4e54:	20000af9 	.word	0x20000af9
    4e58:	20000acc 	.word	0x20000acc
    4e5c:	20000ac8 	.word	0x20000ac8
    4e60:	00001111 	.word	0x00001111
    4e64:	0000459d 	.word	0x0000459d
    4e68:	00003e49 	.word	0x00003e49
    4e6c:	20000273 	.word	0x20000273
    4e70:	00004d39 	.word	0x00004d39
    4e74:	2000001c 	.word	0x2000001c
    4e78:	20000ac4 	.word	0x20000ac4
    4e7c:	00000869 	.word	0x00000869

00004e80 <AddConnection>:
     *                  connection operation ends if an entry is added 
     *                  successfully
     *
     ********************************************************************/
    uint8_t AddConnection(void)
    {
    4e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e82:	46d6      	mov	lr, sl
    4e84:	4647      	mov	r7, r8
    4e86:	b580      	push	{r7, lr}
        {
            // check if the entry is valid
            if( ConnectionTable[i].status.bits.isValid )
            {
                // check if the entry address matches source address of current received packet
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    4e88:	4b35      	ldr	r3, [pc, #212]	; (4f60 <AddConnection+0xe0>)
    4e8a:	685b      	ldr	r3, [r3, #4]
    4e8c:	469a      	mov	sl, r3
    4e8e:	4d35      	ldr	r5, [pc, #212]	; (4f64 <AddConnection+0xe4>)
    4e90:	2400      	movs	r4, #0
        uint8_t connectionSlot = 0xFF;
    4e92:	26ff      	movs	r6, #255	; 0xff
            if( ConnectionTable[i].status.bits.isValid )
    4e94:	46a8      	mov	r8, r5
    4e96:	e005      	b.n	4ea4 <AddConnection+0x24>
                    connectionSlot = i;
                    status = STATUS_EXISTS;
                    break;
                }
            }
            else if( connectionSlot == 0xFF )
    4e98:	2eff      	cmp	r6, #255	; 0xff
    4e9a:	d014      	beq.n	4ec6 <AddConnection+0x46>
    4e9c:	3401      	adds	r4, #1
    4e9e:	350a      	adds	r5, #10
        for(i = 0; i < CONNECTION_SIZE; i++)
    4ea0:	2c0a      	cmp	r4, #10
    4ea2:	d012      	beq.n	4eca <AddConnection+0x4a>
    4ea4:	b2e7      	uxtb	r7, r4
            if( ConnectionTable[i].status.bits.isValid )
    4ea6:	00a3      	lsls	r3, r4, #2
    4ea8:	191b      	adds	r3, r3, r4
    4eaa:	005b      	lsls	r3, r3, #1
    4eac:	4443      	add	r3, r8
    4eae:	7a5b      	ldrb	r3, [r3, #9]
    4eb0:	09db      	lsrs	r3, r3, #7
    4eb2:	d0f1      	beq.n	4e98 <AddConnection+0x18>
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    4eb4:	0029      	movs	r1, r5
    4eb6:	4650      	mov	r0, sl
    4eb8:	4b2b      	ldr	r3, [pc, #172]	; (4f68 <AddConnection+0xe8>)
    4eba:	4798      	blx	r3
    4ebc:	2800      	cmp	r0, #0
    4ebe:	d0ed      	beq.n	4e9c <AddConnection+0x1c>
    4ec0:	003e      	movs	r6, r7
                    status = STATUS_EXISTS;
    4ec2:	2401      	movs	r4, #1
    4ec4:	e002      	b.n	4ecc <AddConnection+0x4c>
            else if( connectionSlot == 0xFF )
    4ec6:	003e      	movs	r6, r7
    4ec8:	e7e8      	b.n	4e9c <AddConnection+0x1c>
        uint8_t status = STATUS_SUCCESS;
    4eca:	2400      	movs	r4, #0
                // store the first empty slot
                connectionSlot = i;
            }  
        }
            
        if( connectionSlot == 0xFF )
    4ecc:	2eff      	cmp	r6, #255	; 0xff
    4ece:	d041      	beq.n	4f54 <AddConnection+0xd4>
        {
            return STATUS_NOT_ENOUGH_SPACE;
        }
        else 
        {
            if( ConnMode >= ENABLE_PREV_CONN )
    4ed0:	4b26      	ldr	r3, [pc, #152]	; (4f6c <AddConnection+0xec>)
    4ed2:	781b      	ldrb	r3, [r3, #0]
    4ed4:	2b00      	cmp	r3, #0
    4ed6:	d13e      	bne.n	4f56 <AddConnection+0xd6>
            {
                return status;
            }
            MyindexinPC = connectionSlot;    
    4ed8:	4b25      	ldr	r3, [pc, #148]	; (4f70 <AddConnection+0xf0>)
    4eda:	701e      	strb	r6, [r3, #0]
    4edc:	00b1      	lsls	r1, r6, #2
    4ede:	1989      	adds	r1, r1, r6
    4ee0:	0049      	lsls	r1, r1, #1
    4ee2:	4b20      	ldr	r3, [pc, #128]	; (4f64 <AddConnection+0xe4>)
    4ee4:	18c9      	adds	r1, r1, r3
    4ee6:	2300      	movs	r3, #0
            // store the source address
            for(i = 0; i < 8; i++)
            {
                ConnectionTable[connectionSlot].Address[i] = rxMessage.SourceAddress[i];
    4ee8:	0030      	movs	r0, r6
    4eea:	4652      	mov	r2, sl
    4eec:	5cd2      	ldrb	r2, [r2, r3]
    4eee:	54ca      	strb	r2, [r1, r3]
    4ef0:	3301      	adds	r3, #1
            for(i = 0; i < 8; i++)
    4ef2:	2b08      	cmp	r3, #8
    4ef4:	d1f9      	bne.n	4eea <AddConnection+0x6a>
            }
            
            // store the capacity info and validate the entry
            ConnectionTable[connectionSlot].status.bits.isValid = 1;
    4ef6:	0083      	lsls	r3, r0, #2
    4ef8:	181b      	adds	r3, r3, r0
    4efa:	005b      	lsls	r3, r3, #1
    4efc:	4a19      	ldr	r2, [pc, #100]	; (4f64 <AddConnection+0xe4>)
    4efe:	18d2      	adds	r2, r2, r3
    4f00:	7a55      	ldrb	r5, [r2, #9]
    4f02:	2380      	movs	r3, #128	; 0x80
    4f04:	425b      	negs	r3, r3
    4f06:	432b      	orrs	r3, r5
    4f08:	7253      	strb	r3, [r2, #9]
            ConnectionTable[connectionSlot].status.bits.RXOnWhenIdle = (rxMessage.Payload[2] & 0x01);
    4f0a:	4b15      	ldr	r3, [pc, #84]	; (4f60 <AddConnection+0xe0>)
    4f0c:	689d      	ldr	r5, [r3, #8]
    4f0e:	78af      	ldrb	r7, [r5, #2]
    4f10:	2301      	movs	r3, #1
    4f12:	403b      	ands	r3, r7
    4f14:	469c      	mov	ip, r3
    4f16:	7a53      	ldrb	r3, [r2, #9]
    4f18:	2701      	movs	r7, #1
    4f1a:	43bb      	bics	r3, r7
    4f1c:	4667      	mov	r7, ip
    4f1e:	433b      	orrs	r3, r7
    4f20:	7253      	strb	r3, [r2, #9]
                for(i = 0; i < ADDITIONAL_NODE_ID_SIZE; i++)
                {
                    ConnectionTable[connectionSlot].PeerInfo[i] = rxMessage.Payload[3+i];
                }
            #endif
			ConnectionTable[connectionSlot].flag = rxMessage.Payload[3];
    4f22:	78eb      	ldrb	r3, [r5, #3]
    4f24:	7213      	strb	r3, [r2, #8]
			if (rxMessage.Payload[3] == 0xB1)PCknown = true;
    4f26:	78eb      	ldrb	r3, [r5, #3]
    4f28:	2bb1      	cmp	r3, #177	; 0xb1
    4f2a:	d00f      	beq.n	4f4c <AddConnection+0xcc>
            #ifdef ENABLE_SECURITY
                // if security is enabled, clear the incoming frame control
                IncomingFrameCounter[connectionSlot].Val = 0;
    4f2c:	0080      	lsls	r0, r0, #2
    4f2e:	2200      	movs	r2, #0
    4f30:	4b10      	ldr	r3, [pc, #64]	; (4f74 <AddConnection+0xf4>)
    4f32:	50c2      	str	r2, [r0, r3]
            #endif
            LatestConnection = connectionSlot;
    4f34:	4b10      	ldr	r3, [pc, #64]	; (4f78 <AddConnection+0xf8>)
    4f36:	701e      	strb	r6, [r3, #0]
            P2PStatus.bits.SearchConnection = 0;   
    4f38:	4a10      	ldr	r2, [pc, #64]	; (4f7c <AddConnection+0xfc>)
    4f3a:	7813      	ldrb	r3, [r2, #0]
    4f3c:	2110      	movs	r1, #16
    4f3e:	438b      	bics	r3, r1
    4f40:	7013      	strb	r3, [r2, #0]
        }
        conn_size = Total_Connections();
    4f42:	4b0f      	ldr	r3, [pc, #60]	; (4f80 <AddConnection+0x100>)
    4f44:	4798      	blx	r3
    4f46:	4b0f      	ldr	r3, [pc, #60]	; (4f84 <AddConnection+0x104>)
    4f48:	7018      	strb	r0, [r3, #0]
    #if defined (ENABLE_NETWORK_FREEZER)
        nvmPutMyDC(&conn_size);
    #endif

        return status;
    4f4a:	e004      	b.n	4f56 <AddConnection+0xd6>
			if (rxMessage.Payload[3] == 0xB1)PCknown = true;
    4f4c:	2201      	movs	r2, #1
    4f4e:	4b0e      	ldr	r3, [pc, #56]	; (4f88 <AddConnection+0x108>)
    4f50:	701a      	strb	r2, [r3, #0]
    4f52:	e7eb      	b.n	4f2c <AddConnection+0xac>
            return STATUS_NOT_ENOUGH_SPACE;
    4f54:	24f1      	movs	r4, #241	; 0xf1
    }
    4f56:	0020      	movs	r0, r4
    4f58:	bc0c      	pop	{r2, r3}
    4f5a:	4690      	mov	r8, r2
    4f5c:	469a      	mov	sl, r3
    4f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4f60:	20000b2c 	.word	0x20000b2c
    4f64:	20000a4c 	.word	0x20000a4c
    4f68:	00004cf5 	.word	0x00004cf5
    4f6c:	2000001c 	.word	0x2000001c
    4f70:	20000af4 	.word	0x20000af4
    4f74:	20000acc 	.word	0x20000acc
    4f78:	20000a48 	.word	0x20000a48
    4f7c:	20000af8 	.word	0x20000af8
    4f80:	00004c2d 	.word	0x00004c2d
    4f84:	20000acb 	.word	0x20000acb
    4f88:	20000272 	.word	0x20000272

00004f8c <P2PTasks>:
{
    4f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f8e:	b087      	sub	sp, #28
    if( P2PStatus.bits.RxHasUserData == 0 && MiMAC_ReceivedPacket() )
    4f90:	4b90      	ldr	r3, [pc, #576]	; (51d4 <P2PTasks+0x248>)
    4f92:	781b      	ldrb	r3, [r3, #0]
    4f94:	071b      	lsls	r3, r3, #28
    4f96:	d501      	bpl.n	4f9c <P2PTasks+0x10>
}
    4f98:	b007      	add	sp, #28
    4f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( P2PStatus.bits.RxHasUserData == 0 && MiMAC_ReceivedPacket() )
    4f9c:	4b8e      	ldr	r3, [pc, #568]	; (51d8 <P2PTasks+0x24c>)
    4f9e:	4798      	blx	r3
    4fa0:	2800      	cmp	r0, #0
    4fa2:	d0f9      	beq.n	4f98 <P2PTasks+0xc>
            temp_bit = MACRxPacket.flags.bits.broadcast;
    4fa4:	4b8d      	ldr	r3, [pc, #564]	; (51dc <P2PTasks+0x250>)
    4fa6:	7819      	ldrb	r1, [r3, #0]
    4fa8:	074b      	lsls	r3, r1, #29
    4faa:	0fdb      	lsrs	r3, r3, #31
    4fac:	4a8c      	ldr	r2, [pc, #560]	; (51e0 <P2PTasks+0x254>)
    4fae:	7013      	strb	r3, [r2, #0]
            rxMessage.flags.bits.broadcast = temp_bit;
    4fb0:	2203      	movs	r2, #3
        rxMessage.flags.bits.secEn = MACRxPacket.flags.bits.secEn;
    4fb2:	08cc      	lsrs	r4, r1, #3
    4fb4:	2001      	movs	r0, #1
    4fb6:	4004      	ands	r4, r0
    4fb8:	00e4      	lsls	r4, r4, #3
    4fba:	4013      	ands	r3, r2
        rxMessage.flags.bits.command = (MACRxPacket.flags.bits.packetType == PACKET_TYPE_COMMAND) ? 1:0;
    4fbc:	400a      	ands	r2, r1
    4fbe:	3a01      	subs	r2, #1
    4fc0:	4255      	negs	r5, r2
    4fc2:	416a      	adcs	r2, r5
    4fc4:	4002      	ands	r2, r0
    4fc6:	0152      	lsls	r2, r2, #5
    4fc8:	4323      	orrs	r3, r4
        rxMessage.flags.bits.srcPrsnt = MACRxPacket.flags.bits.sourcePrsnt;
    4fca:	09cc      	lsrs	r4, r1, #7
    4fcc:	4020      	ands	r0, r4
    4fce:	0180      	lsls	r0, r0, #6
    4fd0:	4313      	orrs	r3, r2
    4fd2:	4303      	orrs	r3, r0
    4fd4:	4a83      	ldr	r2, [pc, #524]	; (51e4 <P2PTasks+0x258>)
    4fd6:	7013      	strb	r3, [r2, #0]
        if( MACRxPacket.flags.bits.sourcePrsnt )
    4fd8:	b249      	sxtb	r1, r1
    4fda:	2900      	cmp	r1, #0
    4fdc:	db19      	blt.n	5012 <P2PTasks+0x86>
            rxMessage.SourcePANID.Val = MACRxPacket.SourcePANID.Val;
    4fde:	4a7f      	ldr	r2, [pc, #508]	; (51dc <P2PTasks+0x250>)
    4fe0:	8a10      	ldrh	r0, [r2, #16]
    4fe2:	4b80      	ldr	r3, [pc, #512]	; (51e4 <P2PTasks+0x258>)
    4fe4:	8058      	strh	r0, [r3, #2]
        rxMessage.PayloadSize = MACRxPacket.PayloadLen;
    4fe6:	7b11      	ldrb	r1, [r2, #12]
    4fe8:	7319      	strb	r1, [r3, #12]
        rxMessage.Payload = MACRxPacket.Payload;
    4fea:	6891      	ldr	r1, [r2, #8]
    4fec:	6099      	str	r1, [r3, #8]
            rxMessage.PacketLQI = MACRxPacket.LQIValue;
    4fee:	7b94      	ldrb	r4, [r2, #14]
    4ff0:	739c      	strb	r4, [r3, #14]
            rxMessage.PacketRSSI = MACRxPacket.RSSIValue;
    4ff2:	7b52      	ldrb	r2, [r2, #13]
    4ff4:	735a      	strb	r2, [r3, #13]
        if( rxMessage.flags.bits.command )
    4ff6:	781b      	ldrb	r3, [r3, #0]
    4ff8:	069b      	lsls	r3, r3, #26
    4ffa:	d400      	bmi.n	4ffe <P2PTasks+0x72>
    4ffc:	e0bb      	b.n	5176 <P2PTasks+0x1ea>
            switch( rxMessage.Payload[0] )
    4ffe:	780b      	ldrb	r3, [r1, #0]
    5000:	337e      	adds	r3, #126	; 0x7e
    5002:	b2da      	uxtb	r2, r3
    5004:	2a15      	cmp	r2, #21
    5006:	d900      	bls.n	500a <P2PTasks+0x7e>
    5008:	e0af      	b.n	516a <P2PTasks+0x1de>
    500a:	0093      	lsls	r3, r2, #2
    500c:	4a76      	ldr	r2, [pc, #472]	; (51e8 <P2PTasks+0x25c>)
    500e:	58d3      	ldr	r3, [r2, r3]
    5010:	469f      	mov	pc, r3
            rxMessage.SourceAddress = MACRxPacket.SourceAddress;
    5012:	4b72      	ldr	r3, [pc, #456]	; (51dc <P2PTasks+0x250>)
    5014:	685a      	ldr	r2, [r3, #4]
    5016:	4b73      	ldr	r3, [pc, #460]	; (51e4 <P2PTasks+0x258>)
    5018:	605a      	str	r2, [r3, #4]
    501a:	e7e0      	b.n	4fde <P2PTasks+0x52>
                            if(ConnMode > ENABLE_ACTIVE_SCAN_RSP)
    501c:	4b73      	ldr	r3, [pc, #460]	; (51ec <P2PTasks+0x260>)
    501e:	781b      	ldrb	r3, [r3, #0]
    5020:	2b02      	cmp	r3, #2
    5022:	d807      	bhi.n	5034 <P2PTasks+0xa8>
                            if( currentChannel != rxMessage.Payload[1] )
    5024:	784a      	ldrb	r2, [r1, #1]
    5026:	4b72      	ldr	r3, [pc, #456]	; (51f0 <P2PTasks+0x264>)
    5028:	781b      	ldrb	r3, [r3, #0]
    502a:	429a      	cmp	r2, r3
    502c:	d005      	beq.n	503a <P2PTasks+0xae>
                                MiMAC_DiscardPacket();
    502e:	4b71      	ldr	r3, [pc, #452]	; (51f4 <P2PTasks+0x268>)
    5030:	4798      	blx	r3
                                break;
    5032:	e0a5      	b.n	5180 <P2PTasks+0x1f4>
                                MiMAC_DiscardPacket();
    5034:	4b6f      	ldr	r3, [pc, #444]	; (51f4 <P2PTasks+0x268>)
    5036:	4798      	blx	r3
                                break;
    5038:	e0a2      	b.n	5180 <P2PTasks+0x1f4>
                            MiApp_WriteData(CMD_P2P_ACTIVE_SCAN_RESPONSE);
    503a:	4b6f      	ldr	r3, [pc, #444]	; (51f8 <P2PTasks+0x26c>)
    503c:	2297      	movs	r2, #151	; 0x97
    503e:	701a      	strb	r2, [r3, #0]
                            MiApp_WriteData(P2PCapacityInfo);
    5040:	2102      	movs	r1, #2
    5042:	4a6e      	ldr	r2, [pc, #440]	; (51fc <P2PTasks+0x270>)
    5044:	7011      	strb	r1, [r2, #0]
    5046:	4a6e      	ldr	r2, [pc, #440]	; (5200 <P2PTasks+0x274>)
    5048:	7812      	ldrb	r2, [r2, #0]
    504a:	705a      	strb	r2, [r3, #1]
                            MiMAC_DiscardPacket();
    504c:	4b69      	ldr	r3, [pc, #420]	; (51f4 <P2PTasks+0x268>)
    504e:	4798      	blx	r3
                                    SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
    5050:	4b64      	ldr	r3, [pc, #400]	; (51e4 <P2PTasks+0x258>)
    5052:	685a      	ldr	r2, [r3, #4]
    5054:	8859      	ldrh	r1, [r3, #2]
    5056:	781b      	ldrb	r3, [r3, #0]
    5058:	071b      	lsls	r3, r3, #28
    505a:	0fdb      	lsrs	r3, r3, #31
    505c:	9300      	str	r3, [sp, #0]
    505e:	2301      	movs	r3, #1
    5060:	2000      	movs	r0, #0
    5062:	4c68      	ldr	r4, [pc, #416]	; (5204 <P2PTasks+0x278>)
    5064:	47a0      	blx	r4
                        break;
    5066:	e08b      	b.n	5180 <P2PTasks+0x1f4>
                            MiApp_WriteData(CMD_P2P_CONNECTION_REMOVAL_RESPONSE);
    5068:	2201      	movs	r2, #1
    506a:	4b64      	ldr	r3, [pc, #400]	; (51fc <P2PTasks+0x270>)
    506c:	701a      	strb	r2, [r3, #0]
    506e:	3291      	adds	r2, #145	; 0x91
    5070:	4b61      	ldr	r3, [pc, #388]	; (51f8 <P2PTasks+0x26c>)
    5072:	701a      	strb	r2, [r3, #0]
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    5074:	4b5b      	ldr	r3, [pc, #364]	; (51e4 <P2PTasks+0x258>)
    5076:	685b      	ldr	r3, [r3, #4]
    5078:	9303      	str	r3, [sp, #12]
    507a:	4d63      	ldr	r5, [pc, #396]	; (5208 <P2PTasks+0x27c>)
    507c:	2700      	movs	r7, #0
                            for(i = 0; i < CONNECTION_SIZE; i++)
    507e:	2600      	movs	r6, #0
                                if( ConnectionTable[i].status.bits.isValid )
    5080:	002c      	movs	r4, r5
    5082:	e006      	b.n	5092 <P2PTasks+0x106>
                            for(i = 0; i < CONNECTION_SIZE; i++)
    5084:	3601      	adds	r6, #1
    5086:	b2f6      	uxtb	r6, r6
    5088:	3701      	adds	r7, #1
    508a:	350a      	adds	r5, #10
    508c:	2e0a      	cmp	r6, #10
    508e:	d100      	bne.n	5092 <P2PTasks+0x106>
    5090:	e08b      	b.n	51aa <P2PTasks+0x21e>
                                if( ConnectionTable[i].status.bits.isValid )
    5092:	9702      	str	r7, [sp, #8]
    5094:	00bb      	lsls	r3, r7, #2
    5096:	19db      	adds	r3, r3, r7
    5098:	005b      	lsls	r3, r3, #1
    509a:	18e3      	adds	r3, r4, r3
    509c:	7a5b      	ldrb	r3, [r3, #9]
    509e:	09db      	lsrs	r3, r3, #7
    50a0:	d0f0      	beq.n	5084 <P2PTasks+0xf8>
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    50a2:	0029      	movs	r1, r5
    50a4:	9803      	ldr	r0, [sp, #12]
    50a6:	4b59      	ldr	r3, [pc, #356]	; (520c <P2PTasks+0x280>)
    50a8:	4798      	blx	r3
    50aa:	2800      	cmp	r0, #0
    50ac:	d0ea      	beq.n	5084 <P2PTasks+0xf8>
                                        ConnectionTable[i].status.Val = 0;
    50ae:	9a02      	ldr	r2, [sp, #8]
    50b0:	0093      	lsls	r3, r2, #2
    50b2:	189c      	adds	r4, r3, r2
    50b4:	0064      	lsls	r4, r4, #1
    50b6:	4b54      	ldr	r3, [pc, #336]	; (5208 <P2PTasks+0x27c>)
    50b8:	191c      	adds	r4, r3, r4
    50ba:	2300      	movs	r3, #0
    50bc:	7263      	strb	r3, [r4, #9]
                                        MiApp_WriteData(STATUS_SUCCESS);
    50be:	2102      	movs	r1, #2
    50c0:	4a4e      	ldr	r2, [pc, #312]	; (51fc <P2PTasks+0x270>)
    50c2:	7011      	strb	r1, [r2, #0]
    50c4:	4a4c      	ldr	r2, [pc, #304]	; (51f8 <P2PTasks+0x26c>)
    50c6:	7053      	strb	r3, [r2, #1]
                            MiMAC_DiscardPacket();
    50c8:	4b4a      	ldr	r3, [pc, #296]	; (51f4 <P2PTasks+0x268>)
    50ca:	4798      	blx	r3
                            if( i == CONNECTION_SIZE ) 
    50cc:	2e0a      	cmp	r6, #10
    50ce:	d175      	bne.n	51bc <P2PTasks+0x230>
    50d0:	e06d      	b.n	51ae <P2PTasks+0x222>
                            switch( rxMessage.Payload[1] )
    50d2:	784b      	ldrb	r3, [r1, #1]
    50d4:	2b01      	cmp	r3, #1
    50d6:	d806      	bhi.n	50e6 <P2PTasks+0x15a>
                                        if( myPANID.Val == 0xFFFF )
    50d8:	4b4d      	ldr	r3, [pc, #308]	; (5210 <P2PTasks+0x284>)
    50da:	881a      	ldrh	r2, [r3, #0]
    50dc:	4b4d      	ldr	r3, [pc, #308]	; (5214 <P2PTasks+0x288>)
    50de:	429a      	cmp	r2, r3
    50e0:	d004      	beq.n	50ec <P2PTasks+0x160>
                                    AddConnection();
    50e2:	4b4d      	ldr	r3, [pc, #308]	; (5218 <P2PTasks+0x28c>)
    50e4:	4798      	blx	r3
                        MiMAC_DiscardPacket();
    50e6:	4b43      	ldr	r3, [pc, #268]	; (51f4 <P2PTasks+0x268>)
    50e8:	4798      	blx	r3
                        break; 
    50ea:	e049      	b.n	5180 <P2PTasks+0x1f4>
                                            myPANID.Val = rxMessage.SourcePANID.Val;
    50ec:	4948      	ldr	r1, [pc, #288]	; (5210 <P2PTasks+0x284>)
    50ee:	8008      	strh	r0, [r1, #0]
                                                uint16_t tmp = 0xFFFF;
    50f0:	200e      	movs	r0, #14
    50f2:	ab02      	add	r3, sp, #8
    50f4:	469c      	mov	ip, r3
    50f6:	4460      	add	r0, ip
    50f8:	2301      	movs	r3, #1
    50fa:	425b      	negs	r3, r3
    50fc:	8003      	strh	r3, [r0, #0]
                                                MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    50fe:	4b47      	ldr	r3, [pc, #284]	; (521c <P2PTasks+0x290>)
    5100:	4798      	blx	r3
    5102:	e7ee      	b.n	50e2 <P2PTasks+0x156>
                            if( P2PStatus.bits.Resync )
    5104:	4b33      	ldr	r3, [pc, #204]	; (51d4 <P2PTasks+0x248>)
    5106:	781b      	ldrb	r3, [r3, #0]
    5108:	069b      	lsls	r3, r3, #26
    510a:	d504      	bpl.n	5116 <P2PTasks+0x18a>
                                P2PStatus.bits.Resync = 0;   
    510c:	4a31      	ldr	r2, [pc, #196]	; (51d4 <P2PTasks+0x248>)
    510e:	7813      	ldrb	r3, [r2, #0]
    5110:	2120      	movs	r1, #32
    5112:	438b      	bics	r3, r1
    5114:	7013      	strb	r3, [r2, #0]
                            MiMAC_DiscardPacket(); 
    5116:	4b37      	ldr	r3, [pc, #220]	; (51f4 <P2PTasks+0x268>)
    5118:	4798      	blx	r3
                        break;                
    511a:	e031      	b.n	5180 <P2PTasks+0x1f4>
                            if( rxMessage.Payload[1] == STATUS_SUCCESS )
    511c:	784b      	ldrb	r3, [r1, #1]
    511e:	2b00      	cmp	r3, #0
    5120:	d120      	bne.n	5164 <P2PTasks+0x1d8>
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    5122:	4b30      	ldr	r3, [pc, #192]	; (51e4 <P2PTasks+0x258>)
    5124:	685b      	ldr	r3, [r3, #4]
    5126:	9303      	str	r3, [sp, #12]
    5128:	4e37      	ldr	r6, [pc, #220]	; (5208 <P2PTasks+0x27c>)
    512a:	2700      	movs	r7, #0
                                    if( ConnectionTable[i].status.bits.isValid )
    512c:	0034      	movs	r4, r6
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    512e:	4d37      	ldr	r5, [pc, #220]	; (520c <P2PTasks+0x280>)
    5130:	e003      	b.n	513a <P2PTasks+0x1ae>
    5132:	3701      	adds	r7, #1
    5134:	360a      	adds	r6, #10
                                for(i = 0; i < CONNECTION_SIZE; i++)
    5136:	2f0a      	cmp	r7, #10
    5138:	d014      	beq.n	5164 <P2PTasks+0x1d8>
                                    if( ConnectionTable[i].status.bits.isValid )
    513a:	9702      	str	r7, [sp, #8]
    513c:	00bb      	lsls	r3, r7, #2
    513e:	19db      	adds	r3, r3, r7
    5140:	005b      	lsls	r3, r3, #1
    5142:	18e3      	adds	r3, r4, r3
    5144:	7a5b      	ldrb	r3, [r3, #9]
    5146:	09db      	lsrs	r3, r3, #7
    5148:	d0f3      	beq.n	5132 <P2PTasks+0x1a6>
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    514a:	0031      	movs	r1, r6
    514c:	9803      	ldr	r0, [sp, #12]
    514e:	47a8      	blx	r5
    5150:	2800      	cmp	r0, #0
    5152:	d0ee      	beq.n	5132 <P2PTasks+0x1a6>
                                            ConnectionTable[i].status.Val = 0;
    5154:	9a02      	ldr	r2, [sp, #8]
    5156:	0093      	lsls	r3, r2, #2
    5158:	189c      	adds	r4, r3, r2
    515a:	0064      	lsls	r4, r4, #1
    515c:	4b2a      	ldr	r3, [pc, #168]	; (5208 <P2PTasks+0x27c>)
    515e:	191c      	adds	r4, r3, r4
    5160:	2300      	movs	r3, #0
    5162:	7263      	strb	r3, [r4, #9]
                        MiMAC_DiscardPacket();
    5164:	4b23      	ldr	r3, [pc, #140]	; (51f4 <P2PTasks+0x268>)
    5166:	4798      	blx	r3
                        break;
    5168:	e00a      	b.n	5180 <P2PTasks+0x1f4>
                    P2PStatus.bits.RxHasUserData = 1;
    516a:	4a1a      	ldr	r2, [pc, #104]	; (51d4 <P2PTasks+0x248>)
    516c:	7813      	ldrb	r3, [r2, #0]
    516e:	2108      	movs	r1, #8
    5170:	430b      	orrs	r3, r1
    5172:	7013      	strb	r3, [r2, #0]
                    break;
    5174:	e004      	b.n	5180 <P2PTasks+0x1f4>
            P2PStatus.bits.RxHasUserData = 1;
    5176:	4a17      	ldr	r2, [pc, #92]	; (51d4 <P2PTasks+0x248>)
    5178:	7813      	ldrb	r3, [r2, #0]
    517a:	2108      	movs	r1, #8
    517c:	430b      	orrs	r3, r1
    517e:	7013      	strb	r3, [r2, #0]
        if( rxMessage.PayloadSize == 0  || P2PStatus.bits.SearchConnection || P2PStatus.bits.Resync )
    5180:	4b18      	ldr	r3, [pc, #96]	; (51e4 <P2PTasks+0x258>)
    5182:	7b1b      	ldrb	r3, [r3, #12]
    5184:	2b00      	cmp	r3, #0
    5186:	d008      	beq.n	519a <P2PTasks+0x20e>
    5188:	4b12      	ldr	r3, [pc, #72]	; (51d4 <P2PTasks+0x248>)
    518a:	781b      	ldrb	r3, [r3, #0]
    518c:	06db      	lsls	r3, r3, #27
    518e:	d404      	bmi.n	519a <P2PTasks+0x20e>
    5190:	4b10      	ldr	r3, [pc, #64]	; (51d4 <P2PTasks+0x248>)
    5192:	781b      	ldrb	r3, [r3, #0]
    5194:	069b      	lsls	r3, r3, #26
    5196:	d400      	bmi.n	519a <P2PTasks+0x20e>
    5198:	e6fe      	b.n	4f98 <P2PTasks+0xc>
            P2PStatus.bits.RxHasUserData = 0;
    519a:	4a0e      	ldr	r2, [pc, #56]	; (51d4 <P2PTasks+0x248>)
    519c:	7813      	ldrb	r3, [r2, #0]
    519e:	2108      	movs	r1, #8
    51a0:	438b      	bics	r3, r1
    51a2:	7013      	strb	r3, [r2, #0]
            MiMAC_DiscardPacket();
    51a4:	4b13      	ldr	r3, [pc, #76]	; (51f4 <P2PTasks+0x268>)
    51a6:	4798      	blx	r3
}
    51a8:	e6f6      	b.n	4f98 <P2PTasks+0xc>
                            MiMAC_DiscardPacket();
    51aa:	4b12      	ldr	r3, [pc, #72]	; (51f4 <P2PTasks+0x268>)
    51ac:	4798      	blx	r3
                                MiApp_WriteData(STATUS_ENTRY_NOT_EXIST);
    51ae:	4a13      	ldr	r2, [pc, #76]	; (51fc <P2PTasks+0x270>)
    51b0:	7813      	ldrb	r3, [r2, #0]
    51b2:	1c59      	adds	r1, r3, #1
    51b4:	7011      	strb	r1, [r2, #0]
    51b6:	21f0      	movs	r1, #240	; 0xf0
    51b8:	4a0f      	ldr	r2, [pc, #60]	; (51f8 <P2PTasks+0x26c>)
    51ba:	54d1      	strb	r1, [r2, r3]
                                    SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
    51bc:	4b09      	ldr	r3, [pc, #36]	; (51e4 <P2PTasks+0x258>)
    51be:	685a      	ldr	r2, [r3, #4]
    51c0:	8859      	ldrh	r1, [r3, #2]
    51c2:	781b      	ldrb	r3, [r3, #0]
    51c4:	071b      	lsls	r3, r3, #28
    51c6:	0fdb      	lsrs	r3, r3, #31
    51c8:	9300      	str	r3, [sp, #0]
    51ca:	2301      	movs	r3, #1
    51cc:	2000      	movs	r0, #0
    51ce:	4c0d      	ldr	r4, [pc, #52]	; (5204 <P2PTasks+0x278>)
    51d0:	47a0      	blx	r4
                            break;
    51d2:	e7d5      	b.n	5180 <P2PTasks+0x1f4>
    51d4:	20000af8 	.word	0x20000af8
    51d8:	00004641 	.word	0x00004641
    51dc:	20000ab0 	.word	0x20000ab0
    51e0:	20000aca 	.word	0x20000aca
    51e4:	20000b2c 	.word	0x20000b2c
    51e8:	00008570 	.word	0x00008570
    51ec:	2000001c 	.word	0x2000001c
    51f0:	20000273 	.word	0x20000273
    51f4:	00004625 	.word	0x00004625
    51f8:	20000afc 	.word	0x20000afc
    51fc:	20000af9 	.word	0x20000af9
    5200:	20000ac4 	.word	0x20000ac4
    5204:	00004c55 	.word	0x00004c55
    5208:	20000a4c 	.word	0x20000a4c
    520c:	00004cf5 	.word	0x00004cf5
    5210:	20000ac8 	.word	0x20000ac8
    5214:	0000ffff 	.word	0x0000ffff
    5218:	00004e81 	.word	0x00004e81
    521c:	00003e49 	.word	0x00003e49

00005220 <MiApp_MessageAvailable>:
{ 
    5220:	b510      	push	{r4, lr}
    P2PTasks(); 
    5222:	4b03      	ldr	r3, [pc, #12]	; (5230 <MiApp_MessageAvailable+0x10>)
    5224:	4798      	blx	r3
    return P2PStatus.bits.RxHasUserData;
    5226:	4b03      	ldr	r3, [pc, #12]	; (5234 <MiApp_MessageAvailable+0x14>)
    5228:	7818      	ldrb	r0, [r3, #0]
    522a:	0700      	lsls	r0, r0, #28
    522c:	0fc0      	lsrs	r0, r0, #31
}
    522e:	bd10      	pop	{r4, pc}
    5230:	00004f8d 	.word	0x00004f8d
    5234:	20000af8 	.word	0x20000af8

00005238 <MiApp_EstablishConnection>:
    {
    5238:	b5f0      	push	{r4, r5, r6, r7, lr}
    523a:	46de      	mov	lr, fp
    523c:	4657      	mov	r7, sl
    523e:	464e      	mov	r6, r9
    5240:	4645      	mov	r5, r8
    5242:	b5e0      	push	{r5, r6, r7, lr}
    5244:	b083      	sub	sp, #12
            return 0xFF;
    5246:	20ff      	movs	r0, #255	; 0xff
        if( Mode == CONN_MODE_INDIRECT )
    5248:	2901      	cmp	r1, #1
    524a:	d106      	bne.n	525a <MiApp_EstablishConnection+0x22>
    }
    524c:	b003      	add	sp, #12
    524e:	bc3c      	pop	{r2, r3, r4, r5}
    5250:	4690      	mov	r8, r2
    5252:	4699      	mov	r9, r3
    5254:	46a2      	mov	sl, r4
    5256:	46ab      	mov	fp, r5
    5258:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint8_t    tmpConnectionMode = ConnMode;
    525a:	4c2c      	ldr	r4, [pc, #176]	; (530c <MiApp_EstablishConnection+0xd4>)
    525c:	7823      	ldrb	r3, [r4, #0]
    525e:	469b      	mov	fp, r3
        t1.Val = MiWi_TickGet();
    5260:	4b2b      	ldr	r3, [pc, #172]	; (5310 <MiApp_EstablishConnection+0xd8>)
    5262:	4798      	blx	r3
        t1.Val -= (ONE_SECOND);
    5264:	387c      	subs	r0, #124	; 0x7c
    5266:	0006      	movs	r6, r0
        ConnMode = ENABLE_ALL_CONN;
    5268:	2300      	movs	r3, #0
    526a:	7023      	strb	r3, [r4, #0]
        P2PStatus.bits.SearchConnection = 1;
    526c:	4a29      	ldr	r2, [pc, #164]	; (5314 <MiApp_EstablishConnection+0xdc>)
    526e:	7813      	ldrb	r3, [r2, #0]
    5270:	2110      	movs	r1, #16
    5272:	430b      	orrs	r3, r1
    5274:	7013      	strb	r3, [r2, #0]
        uint8_t    connectionInterval = 0;
    5276:	2500      	movs	r5, #0
        uint8_t    retry = CONNECTION_RETRY_TIMES;
    5278:	2703      	movs	r7, #3
        while( P2PStatus.bits.SearchConnection )
    527a:	4690      	mov	r8, r2
            t2.Val = MiWi_TickGet();
    527c:	4b24      	ldr	r3, [pc, #144]	; (5310 <MiApp_EstablishConnection+0xd8>)
    527e:	4699      	mov	r9, r3
    P2PTasks(); 
    5280:	4b25      	ldr	r3, [pc, #148]	; (5318 <MiApp_EstablishConnection+0xe0>)
    5282:	469a      	mov	sl, r3
        while( P2PStatus.bits.SearchConnection )
    5284:	e022      	b.n	52cc <MiApp_EstablishConnection+0x94>
                if( retry-- == 0 )
    5286:	1e7d      	subs	r5, r7, #1
    5288:	b2ed      	uxtb	r5, r5
    528a:	2f00      	cmp	r7, #0
    528c:	d02d      	beq.n	52ea <MiApp_EstablishConnection+0xb2>
                MiApp_WriteData(CMD_P2P_CONNECTION_REQUEST);
    528e:	4b23      	ldr	r3, [pc, #140]	; (531c <MiApp_EstablishConnection+0xe4>)
    5290:	2281      	movs	r2, #129	; 0x81
    5292:	701a      	strb	r2, [r3, #0]
                MiApp_WriteData(currentChannel);
    5294:	4a22      	ldr	r2, [pc, #136]	; (5320 <MiApp_EstablishConnection+0xe8>)
    5296:	7812      	ldrb	r2, [r2, #0]
    5298:	705a      	strb	r2, [r3, #1]
                MiApp_WriteData(P2PCapacityInfo);
    529a:	4a22      	ldr	r2, [pc, #136]	; (5324 <MiApp_EstablishConnection+0xec>)
    529c:	7812      	ldrb	r2, [r2, #0]
    529e:	709a      	strb	r2, [r3, #2]
					MiApp_WriteData(0xA2);
    52a0:	2104      	movs	r1, #4
    52a2:	4a21      	ldr	r2, [pc, #132]	; (5328 <MiApp_EstablishConnection+0xf0>)
    52a4:	7011      	strb	r1, [r2, #0]
    52a6:	22a2      	movs	r2, #162	; 0xa2
    52a8:	70da      	strb	r2, [r3, #3]
                        SendPacket(true, myPANID, NULL, true, false);
    52aa:	4b20      	ldr	r3, [pc, #128]	; (532c <MiApp_EstablishConnection+0xf4>)
    52ac:	8819      	ldrh	r1, [r3, #0]
    52ae:	2300      	movs	r3, #0
    52b0:	9300      	str	r3, [sp, #0]
    52b2:	3301      	adds	r3, #1
    52b4:	2200      	movs	r2, #0
    52b6:	2001      	movs	r0, #1
    52b8:	4e1d      	ldr	r6, [pc, #116]	; (5330 <MiApp_EstablishConnection+0xf8>)
    52ba:	47b0      	blx	r6
                t1.Val = t2.Val;
    52bc:	0026      	movs	r6, r4
                if( retry-- == 0 )
    52be:	002f      	movs	r7, r5
                connectionInterval = CONNECTION_INTERVAL-1;
    52c0:	2501      	movs	r5, #1
    P2PTasks(); 
    52c2:	47d0      	blx	sl
    return P2PStatus.bits.RxHasUserData;
    52c4:	4b13      	ldr	r3, [pc, #76]	; (5314 <MiApp_EstablishConnection+0xdc>)
    52c6:	781b      	ldrb	r3, [r3, #0]
            if( MiApp_MessageAvailable())
    52c8:	071b      	lsls	r3, r3, #28
    52ca:	d415      	bmi.n	52f8 <MiApp_EstablishConnection+0xc0>
        while( P2PStatus.bits.SearchConnection )
    52cc:	4643      	mov	r3, r8
    52ce:	781b      	ldrb	r3, [r3, #0]
    52d0:	06db      	lsls	r3, r3, #27
    52d2:	d514      	bpl.n	52fe <MiApp_EstablishConnection+0xc6>
            t2.Val = MiWi_TickGet();
    52d4:	47c8      	blx	r9
    52d6:	0004      	movs	r4, r0
            if( MiWi_TickGetDiff(t2, t1) > (ONE_SECOND) )
    52d8:	1b83      	subs	r3, r0, r6
    52da:	2b7c      	cmp	r3, #124	; 0x7c
    52dc:	d9f1      	bls.n	52c2 <MiApp_EstablishConnection+0x8a>
                if( connectionInterval-- > 0 )
    52de:	2d00      	cmp	r5, #0
    52e0:	d0d1      	beq.n	5286 <MiApp_EstablishConnection+0x4e>
    52e2:	3d01      	subs	r5, #1
    52e4:	b2ed      	uxtb	r5, r5
                t1.Val = t2.Val;
    52e6:	0006      	movs	r6, r0
    52e8:	e7f0      	b.n	52cc <MiApp_EstablishConnection+0x94>
                    P2PStatus.bits.SearchConnection = 0;
    52ea:	4a0a      	ldr	r2, [pc, #40]	; (5314 <MiApp_EstablishConnection+0xdc>)
    52ec:	7813      	ldrb	r3, [r2, #0]
    52ee:	2110      	movs	r1, #16
    52f0:	438b      	bics	r3, r1
    52f2:	7013      	strb	r3, [r2, #0]
                    return 0xFF;
    52f4:	20ff      	movs	r0, #255	; 0xff
    52f6:	e7a9      	b.n	524c <MiApp_EstablishConnection+0x14>
                MiApp_DiscardMessage();
    52f8:	4b0e      	ldr	r3, [pc, #56]	; (5334 <MiApp_EstablishConnection+0xfc>)
    52fa:	4798      	blx	r3
    52fc:	e7e6      	b.n	52cc <MiApp_EstablishConnection+0x94>
        ConnMode = tmpConnectionMode;
    52fe:	4b03      	ldr	r3, [pc, #12]	; (530c <MiApp_EstablishConnection+0xd4>)
    5300:	465a      	mov	r2, fp
    5302:	701a      	strb	r2, [r3, #0]
        return LatestConnection;
    5304:	4b0c      	ldr	r3, [pc, #48]	; (5338 <MiApp_EstablishConnection+0x100>)
    5306:	7818      	ldrb	r0, [r3, #0]
    5308:	e7a0      	b.n	524c <MiApp_EstablishConnection+0x14>
    530a:	46c0      	nop			; (mov r8, r8)
    530c:	2000001c 	.word	0x2000001c
    5310:	000005fd 	.word	0x000005fd
    5314:	20000af8 	.word	0x20000af8
    5318:	00004f8d 	.word	0x00004f8d
    531c:	20000afc 	.word	0x20000afc
    5320:	20000273 	.word	0x20000273
    5324:	20000ac4 	.word	0x20000ac4
    5328:	20000af9 	.word	0x20000af9
    532c:	20000ac8 	.word	0x20000ac8
    5330:	00004c55 	.word	0x00004c55
    5334:	00004d1d 	.word	0x00004d1d
    5338:	20000a48 	.word	0x20000a48

0000533c <MiApp_ConnectionMode>:
 *      None
 *
 *****************************************************************************************/ 
void MiApp_ConnectionMode(INPUT uint8_t Mode)
{
    if( Mode > 3 )
    533c:	2803      	cmp	r0, #3
    533e:	d808      	bhi.n	5352 <MiApp_ConnectionMode+0x16>
    {
        return;
    }
    ConnMode = Mode;
    5340:	4b04      	ldr	r3, [pc, #16]	; (5354 <MiApp_ConnectionMode+0x18>)
    5342:	7018      	strb	r0, [r3, #0]
    P2PCapacityInfo = (P2PCapacityInfo & 0x0F) | (ConnMode << 4);
    5344:	4a04      	ldr	r2, [pc, #16]	; (5358 <MiApp_ConnectionMode+0x1c>)
    5346:	7811      	ldrb	r1, [r2, #0]
    5348:	230f      	movs	r3, #15
    534a:	400b      	ands	r3, r1
    534c:	0100      	lsls	r0, r0, #4
    534e:	4318      	orrs	r0, r3
    5350:	7010      	strb	r0, [r2, #0]
    
    #if defined(ENABLE_NETWORK_FREEZER)
        nvmPutConnMode(&ConnMode);
    #endif
    5352:	4770      	bx	lr
    5354:	2000001c 	.word	0x2000001c
    5358:	20000ac4 	.word	0x20000ac4

0000535c <watchdog_early_warning_callback>:
		port_base->OUTCLR.reg = pin_mask;
    535c:	2280      	movs	r2, #128	; 0x80
    535e:	01d2      	lsls	r2, r2, #7
    5360:	4b01      	ldr	r3, [pc, #4]	; (5368 <watchdog_early_warning_callback+0xc>)
    5362:	615a      	str	r2, [r3, #20]
	// Watch Dog Timer Support
	//! [setup]
	static void watchdog_early_warning_callback(void)
	{
		port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
	}
    5364:	4770      	bx	lr
    5366:	46c0      	nop			; (mov r8, r8)
    5368:	40002800 	.word	0x40002800

0000536c <toggleLED>:
uint8_t buffer[128];
uint8_t appPayloadSize = 0;
uint8_t *RxAddress;
uint8_t savePreviousPacket[128];
uint8_t size;
void toggleLED(uint8_t val){
    536c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static inline void port_pin_toggle_output_level(
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    536e:	231f      	movs	r3, #31
    5370:	4003      	ands	r3, r0
    5372:	2601      	movs	r6, #1
    5374:	409e      	lsls	r6, r3
    5376:	09c3      	lsrs	r3, r0, #7
    5378:	2500      	movs	r5, #0
    537a:	2b00      	cmp	r3, #0
    537c:	d104      	bne.n	5388 <toggleLED+0x1c>
    537e:	0945      	lsrs	r5, r0, #5
    5380:	01ed      	lsls	r5, r5, #7
    5382:	4b06      	ldr	r3, [pc, #24]	; (539c <toggleLED+0x30>)
    5384:	469c      	mov	ip, r3
    5386:	4465      	add	r5, ip
    5388:	240a      	movs	r4, #10
	uint8_t timer = 10;
	while(timer--)
	{
		LED_Toggle(val);
		delay_ms(100);
    538a:	4f05      	ldr	r7, [pc, #20]	; (53a0 <toggleLED+0x34>)

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    538c:	61ee      	str	r6, [r5, #28]
    538e:	2064      	movs	r0, #100	; 0x64
    5390:	47b8      	blx	r7
    5392:	3c01      	subs	r4, #1
    5394:	b2e4      	uxtb	r4, r4
	while(timer--)
    5396:	2c00      	cmp	r4, #0
    5398:	d1f8      	bne.n	538c <toggleLED+0x20>
	}
}
    539a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    539c:	40002800 	.word	0x40002800
    53a0:	0000067d 	.word	0x0000067d

000053a4 <main>:
int main(void)
{	
    53a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    53a6:	46d6      	mov	lr, sl
    53a8:	464f      	mov	r7, r9
    53aa:	4646      	mov	r6, r8
    53ac:	b5c0      	push	{r6, r7, lr}
    53ae:	b082      	sub	sp, #8
	uint8_t i , TxCount = 0 , button_press;
	uint8_t connection_index = 0xFF, TxSynCount2 = 0;
	MIWI_TICK t1 , t2;
	// Hardware Init
	system_init();
    53b0:	4b60      	ldr	r3, [pc, #384]	; (5534 <main+0x190>)
    53b2:	4798      	blx	r3
	delay_init();
    53b4:	4b60      	ldr	r3, [pc, #384]	; (5538 <main+0x194>)
    53b6:	4798      	blx	r3
	sio2host_init();
    53b8:	4b60      	ldr	r3, [pc, #384]	; (553c <main+0x198>)
    53ba:	4798      	blx	r3
	configure_tc();
    53bc:	4b60      	ldr	r3, [pc, #384]	; (5540 <main+0x19c>)
    53be:	4798      	blx	r3
	rtc_init();
    53c0:	4b60      	ldr	r3, [pc, #384]	; (5544 <main+0x1a0>)
    53c2:	4798      	blx	r3
	// Function MiApp_ProtocolInit initialize the protocol stack. The
	// only input parameter indicates if previous network configuration
	// should be restored. In this simple example, we assume that the
	// network starts from scratch.
	/*******************************************************************/
	MiApp_ProtocolInit(false);
    53c4:	2000      	movs	r0, #0
    53c6:	4b60      	ldr	r3, [pc, #384]	; (5548 <main+0x1a4>)
    53c8:	4798      	blx	r3
	// Set the Channel 
	MiApp_SetChannel(APP_CHANNEL_SEL);
    53ca:	2005      	movs	r0, #5
    53cc:	4b5f      	ldr	r3, [pc, #380]	; (554c <main+0x1a8>)
    53ce:	4798      	blx	r3
	//  ENABLE_PREV_CONN:   Only allow connection already exists in
	//                      connection table
	//  ENABL_ACTIVE_SCAN_RSP:  Allow response to Active scan
	//  DISABLE_ALL_CONN:   Disable all connections.
	/*******************************************************************/
	MiApp_ConnectionMode(ENABLE_ALL_CONN);
    53d0:	2000      	movs	r0, #0
    53d2:	4b5f      	ldr	r3, [pc, #380]	; (5550 <main+0x1ac>)
    53d4:	4798      	blx	r3
	// Enable Transceiver Interrupt 
	ENABLE_TRX_IRQ();
    53d6:	2100      	movs	r1, #0
    53d8:	2000      	movs	r0, #0
    53da:	4b5e      	ldr	r3, [pc, #376]	; (5554 <main+0x1b0>)
    53dc:	4798      	blx	r3
	// Enable All cpu interrupts 
	cpu_irq_enable();
    53de:	2201      	movs	r2, #1
    53e0:	4b5d      	ldr	r3, [pc, #372]	; (5558 <main+0x1b4>)
    53e2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
    53e4:	f3bf 8f5f 	dmb	sy
    53e8:	b662      	cpsie	i
	printf("\033[2J\r\n ");
    53ea:	485c      	ldr	r0, [pc, #368]	; (555c <main+0x1b8>)
    53ec:	4d5c      	ldr	r5, [pc, #368]	; (5560 <main+0x1bc>)
    53ee:	47a8      	blx	r5
 *
 * \return An enum value indicating the cause of the last system reset.
 */
static inline enum system_reset_cause system_get_reset_cause(void)
{
	return (enum system_reset_cause)RSTC->RCAUSE.reg;
    53f0:	4b5c      	ldr	r3, [pc, #368]	; (5564 <main+0x1c0>)
    53f2:	781c      	ldrb	r4, [r3, #0]
    53f4:	b2e4      	uxtb	r4, r4
	printf("\r\nLast reset cause: ");
    53f6:	485c      	ldr	r0, [pc, #368]	; (5568 <main+0x1c4>)
    53f8:	47a8      	blx	r5
	if(rcause & (1 << 6)) {
    53fa:	0663      	lsls	r3, r4, #25
    53fc:	d443      	bmi.n	5486 <main+0xe2>
	if(rcause & (1 << 5)) {
    53fe:	06a3      	lsls	r3, r4, #26
    5400:	d445      	bmi.n	548e <main+0xea>
	if(rcause & (1 << 4)) {
    5402:	06e3      	lsls	r3, r4, #27
    5404:	d447      	bmi.n	5496 <main+0xf2>
	if(rcause & (1 << 2)) {
    5406:	0763      	lsls	r3, r4, #29
    5408:	d449      	bmi.n	549e <main+0xfa>
	if(rcause & (1 << 1)) {
    540a:	07a3      	lsls	r3, r4, #30
    540c:	d44b      	bmi.n	54a6 <main+0x102>
	if(rcause & (1 << 0)) {
    540e:	07e3      	lsls	r3, r4, #31
    5410:	d44d      	bmi.n	54ae <main+0x10a>
	print_reset_causes();
	while(connection_index == 0xFF)
	{
		toggleLED(LED0);
    5412:	4e56      	ldr	r6, [pc, #344]	; (556c <main+0x1c8>)
		connection_index  = MiApp_EstablishConnection(0xFF, CONN_MODE_DIRECT);
    5414:	4d56      	ldr	r5, [pc, #344]	; (5570 <main+0x1cc>)
		printf("Waiting to Join\r\n");
    5416:	4c57      	ldr	r4, [pc, #348]	; (5574 <main+0x1d0>)
		toggleLED(LED0);
    5418:	200e      	movs	r0, #14
    541a:	47b0      	blx	r6
		connection_index  = MiApp_EstablishConnection(0xFF, CONN_MODE_DIRECT);
    541c:	2100      	movs	r1, #0
    541e:	20ff      	movs	r0, #255	; 0xff
    5420:	47a8      	blx	r5
    5422:	0007      	movs	r7, r0
		printf("Waiting to Join\r\n");
    5424:	0020      	movs	r0, r4
    5426:	4b54      	ldr	r3, [pc, #336]	; (5578 <main+0x1d4>)
    5428:	4798      	blx	r3
	while(connection_index == 0xFF)
    542a:	2fff      	cmp	r7, #255	; 0xff
    542c:	d0f4      	beq.n	5418 <main+0x74>
	}
	printf("Total Connections:%d\r\n", Total_Connections());
    542e:	4c53      	ldr	r4, [pc, #332]	; (557c <main+0x1d8>)
    5430:	47a0      	blx	r4
    5432:	0001      	movs	r1, r0
    5434:	4852      	ldr	r0, [pc, #328]	; (5580 <main+0x1dc>)
    5436:	4b4a      	ldr	r3, [pc, #296]	; (5560 <main+0x1bc>)
    5438:	4798      	blx	r3
	#if defined(R)
		printf("joined as a router....\r\n");
	#endif
	#if defined(ED)
		printf("joined as a End Device....\r\n");
    543a:	4852      	ldr	r0, [pc, #328]	; (5584 <main+0x1e0>)
    543c:	4b4e      	ldr	r3, [pc, #312]	; (5578 <main+0x1d4>)
    543e:	4798      	blx	r3
		at30tse_init();
    5440:	4b51      	ldr	r3, [pc, #324]	; (5588 <main+0x1e4>)
    5442:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    5444:	2280      	movs	r2, #128	; 0x80
    5446:	01d2      	lsls	r2, r2, #7
    5448:	4b50      	ldr	r3, [pc, #320]	; (558c <main+0x1e8>)
    544a:	615a      	str	r2, [r3, #20]
		//     preferred.
		/*******************************************************************/
		MiApp_StartConnection(START_CONN_DIRECT, 10, 0);
		LED_On(LED1);
	}
	t1.Val = MiWi_TickGet();
    544c:	4b50      	ldr	r3, [pc, #320]	; (5590 <main+0x1ec>)
    544e:	4798      	blx	r3
	config->always_on            = false;
    5450:	2300      	movs	r3, #0
    5452:	466a      	mov	r2, sp
    5454:	7013      	strb	r3, [r2, #0]
	config->enable               = true;
    5456:	2201      	movs	r2, #1
    5458:	4669      	mov	r1, sp
    545a:	704a      	strb	r2, [r1, #1]
	config->timeout_period       = WDT_PERIOD_16384CLK;
    545c:	320b      	adds	r2, #11
    545e:	708a      	strb	r2, [r1, #2]
	config->window_period        = WDT_PERIOD_NONE;
    5460:	70cb      	strb	r3, [r1, #3]
		config_wdt.early_warning_period = WDT_PERIOD_8192CLK;
    5462:	330b      	adds	r3, #11
    5464:	710b      	strb	r3, [r1, #4]
		wdt_set_config(&config_wdt);
    5466:	4668      	mov	r0, sp
    5468:	4b4a      	ldr	r3, [pc, #296]	; (5594 <main+0x1f0>)
    546a:	4798      	blx	r3
	wdt_register_callback(watchdog_early_warning_callback,
    546c:	2100      	movs	r1, #0
    546e:	484a      	ldr	r0, [pc, #296]	; (5598 <main+0x1f4>)
    5470:	4b4a      	ldr	r3, [pc, #296]	; (559c <main+0x1f8>)
    5472:	4798      	blx	r3
	wdt_enable_callback(WDT_CALLBACK_EARLY_WARNING);
    5474:	2000      	movs	r0, #0
    5476:	4b4a      	ldr	r3, [pc, #296]	; (55a0 <main+0x1fc>)
    5478:	4798      	blx	r3
	// Demo essentially does 3 tasks
	// 1.Check for a received Data Packet  2. Check if button is pressed , if pressed Transmit a Unicast Packet to node indexed at 0
	// 3. Every 5 seconds Transmit a Broadcast type packet
	configure_wdt();
	configure_wdt_callbacks();
	size = Total_Connections();
    547a:	47a0      	blx	r4
    547c:	4b49      	ldr	r3, [pc, #292]	; (55a4 <main+0x200>)
    547e:	7018      	strb	r0, [r3, #0]

	while (1) {
		// Data Packet Available
		wdt_reset_count();
    5480:	4b49      	ldr	r3, [pc, #292]	; (55a8 <main+0x204>)
    5482:	469a      	mov	sl, r3
    5484:	e04d      	b.n	5522 <main+0x17e>
		printf("System Reset Request\r\n");
    5486:	4849      	ldr	r0, [pc, #292]	; (55ac <main+0x208>)
    5488:	4b3b      	ldr	r3, [pc, #236]	; (5578 <main+0x1d4>)
    548a:	4798      	blx	r3
    548c:	e7b7      	b.n	53fe <main+0x5a>
		printf("Watchdog Reset\r\n");
    548e:	4848      	ldr	r0, [pc, #288]	; (55b0 <main+0x20c>)
    5490:	4b39      	ldr	r3, [pc, #228]	; (5578 <main+0x1d4>)
    5492:	4798      	blx	r3
    5494:	e7b5      	b.n	5402 <main+0x5e>
		printf("External Reset\r\n");
    5496:	4847      	ldr	r0, [pc, #284]	; (55b4 <main+0x210>)
    5498:	4b37      	ldr	r3, [pc, #220]	; (5578 <main+0x1d4>)
    549a:	4798      	blx	r3
    549c:	e7b3      	b.n	5406 <main+0x62>
		printf("Brown Out 33 Detector Reset\r\n");
    549e:	4846      	ldr	r0, [pc, #280]	; (55b8 <main+0x214>)
    54a0:	4b35      	ldr	r3, [pc, #212]	; (5578 <main+0x1d4>)
    54a2:	4798      	blx	r3
    54a4:	e7b1      	b.n	540a <main+0x66>
		printf("Brown Out 12 Detector Reset\r\n");
    54a6:	4845      	ldr	r0, [pc, #276]	; (55bc <main+0x218>)
    54a8:	4b33      	ldr	r3, [pc, #204]	; (5578 <main+0x1d4>)
    54aa:	4798      	blx	r3
    54ac:	e7af      	b.n	540e <main+0x6a>
		printf("Power-On Reset\r\n");
    54ae:	4844      	ldr	r0, [pc, #272]	; (55c0 <main+0x21c>)
    54b0:	4b31      	ldr	r3, [pc, #196]	; (5578 <main+0x1d4>)
    54b2:	4798      	blx	r3
    54b4:	e7ad      	b.n	5412 <main+0x6e>
			//  next received frame
			/*******************************************************************/
			MiApp_DiscardMessage();

		}
		t2.Val = MiWi_TickGet();
    54b6:	4b36      	ldr	r3, [pc, #216]	; (5590 <main+0x1ec>)
    54b8:	4798      	blx	r3
			printf("forwarding packet to other routers around :)\r\n");
		}
		#endif

		#if defined(ED)
			MiApp_FlushTx();
    54ba:	4d42      	ldr	r5, [pc, #264]	; (55c4 <main+0x220>)
    54bc:	2300      	movs	r3, #0
    54be:	702b      	strb	r3, [r5, #0]
	port_base->OUTTGL.reg = pin_mask;
    54c0:	2280      	movs	r2, #128	; 0x80
    54c2:	01d2      	lsls	r2, r2, #7
    54c4:	4b31      	ldr	r3, [pc, #196]	; (558c <main+0x1e8>)
    54c6:	61da      	str	r2, [r3, #28]
			LED_Toggle(LED0);
			uint8_t tmp = PHY_RandomReq() & 0xFF;
    54c8:	4b3f      	ldr	r3, [pc, #252]	; (55c8 <main+0x224>)
    54ca:	4798      	blx	r3
    54cc:	4680      	mov	r8, r0
			// Tx Buffer User Data
			MiApp_WriteData(NodeID);
    54ce:	782c      	ldrb	r4, [r5, #0]
    54d0:	4f3e      	ldr	r7, [pc, #248]	; (55cc <main+0x228>)
    54d2:	2316      	movs	r3, #22
    54d4:	553b      	strb	r3, [r7, r4]
			MiApp_WriteData( at30tse_read_temperature()*1.8+32);
    54d6:	1ca3      	adds	r3, r4, #2
    54d8:	702b      	strb	r3, [r5, #0]
    54da:	4b3d      	ldr	r3, [pc, #244]	; (55d0 <main+0x22c>)
    54dc:	4798      	blx	r3
			MiApp_WriteData(NodeID);
    54de:	3401      	adds	r4, #1
			MiApp_WriteData( at30tse_read_temperature()*1.8+32);
    54e0:	b2e4      	uxtb	r4, r4
    54e2:	4a3c      	ldr	r2, [pc, #240]	; (55d4 <main+0x230>)
    54e4:	4b3c      	ldr	r3, [pc, #240]	; (55d8 <main+0x234>)
    54e6:	4e3d      	ldr	r6, [pc, #244]	; (55dc <main+0x238>)
    54e8:	47b0      	blx	r6
    54ea:	2200      	movs	r2, #0
    54ec:	4b3c      	ldr	r3, [pc, #240]	; (55e0 <main+0x23c>)
    54ee:	4e3d      	ldr	r6, [pc, #244]	; (55e4 <main+0x240>)
    54f0:	47b0      	blx	r6
    54f2:	4b3d      	ldr	r3, [pc, #244]	; (55e8 <main+0x244>)
    54f4:	4798      	blx	r3
    54f6:	5538      	strb	r0, [r7, r4]
			MiApp_WriteData(tmp);
    54f8:	782b      	ldrb	r3, [r5, #0]
    54fa:	1c5a      	adds	r2, r3, #1
    54fc:	702a      	strb	r2, [r5, #0]
    54fe:	4642      	mov	r2, r8
    5500:	54fa      	strb	r2, [r7, r3]
			TxCount++;
			//This function unicasts a message in the TxBuffer to the first connected peer device
			// indexed at 0 in connection table
			statusOfUnicast = MiApp_BroadcastPacket(true); // Send Packet to Parent Device
    5502:	2001      	movs	r0, #1
    5504:	4b39      	ldr	r3, [pc, #228]	; (55ec <main+0x248>)
    5506:	4798      	blx	r3
    5508:	4b39      	ldr	r3, [pc, #228]	; (55f0 <main+0x24c>)
    550a:	7018      	strb	r0, [r3, #0]
			printf("sleeping bye for now!!!!");
    550c:	4839      	ldr	r0, [pc, #228]	; (55f4 <main+0x250>)
    550e:	4b14      	ldr	r3, [pc, #80]	; (5560 <main+0x1bc>)
    5510:	4798      	blx	r3
			delay_ms(50);
    5512:	2032      	movs	r0, #50	; 0x32
    5514:	4b38      	ldr	r3, [pc, #224]	; (55f8 <main+0x254>)
    5516:	4798      	blx	r3
				PHY_Sleep();
    5518:	4b38      	ldr	r3, [pc, #224]	; (55fc <main+0x258>)
    551a:	4798      	blx	r3
			setSleepPeriod(60); // 65 = 16 min
    551c:	203c      	movs	r0, #60	; 0x3c
    551e:	4b38      	ldr	r3, [pc, #224]	; (5600 <main+0x25c>)
    5520:	4798      	blx	r3
		wdt_reset_count();
    5522:	47d0      	blx	sl
		if (MiApp_MessageAvailable())
    5524:	4b37      	ldr	r3, [pc, #220]	; (5604 <main+0x260>)
    5526:	4798      	blx	r3
    5528:	2800      	cmp	r0, #0
    552a:	d0c4      	beq.n	54b6 <main+0x112>
			MiApp_DiscardMessage();
    552c:	4b36      	ldr	r3, [pc, #216]	; (5608 <main+0x264>)
    552e:	4798      	blx	r3
    5530:	e7c1      	b.n	54b6 <main+0x112>
    5532:	46c0      	nop			; (mov r8, r8)
    5534:	000038a1 	.word	0x000038a1
    5538:	00000611 	.word	0x00000611
    553c:	00003add 	.word	0x00003add
    5540:	0000055d 	.word	0x0000055d
    5544:	00002485 	.word	0x00002485
    5548:	00004d55 	.word	0x00004d55
    554c:	00004d39 	.word	0x00004d39
    5550:	0000533d 	.word	0x0000533d
    5554:	00000869 	.word	0x00000869
    5558:	20000009 	.word	0x20000009
    555c:	000085c8 	.word	0x000085c8
    5560:	000073e9 	.word	0x000073e9
    5564:	40000800 	.word	0x40000800
    5568:	000085d0 	.word	0x000085d0
    556c:	0000536d 	.word	0x0000536d
    5570:	00005239 	.word	0x00005239
    5574:	00008670 	.word	0x00008670
    5578:	000074dd 	.word	0x000074dd
    557c:	00004c2d 	.word	0x00004c2d
    5580:	00008684 	.word	0x00008684
    5584:	0000869c 	.word	0x0000869c
    5588:	000006a9 	.word	0x000006a9
    558c:	40002800 	.word	0x40002800
    5590:	000005fd 	.word	0x000005fd
    5594:	00000441 	.word	0x00000441
    5598:	0000535d 	.word	0x0000535d
    559c:	0000050d 	.word	0x0000050d
    55a0:	00000521 	.word	0x00000521
    55a4:	20000bbc 	.word	0x20000bbc
    55a8:	000004f9 	.word	0x000004f9
    55ac:	000085e8 	.word	0x000085e8
    55b0:	00008600 	.word	0x00008600
    55b4:	00008610 	.word	0x00008610
    55b8:	00008620 	.word	0x00008620
    55bc:	00008640 	.word	0x00008640
    55c0:	00008660 	.word	0x00008660
    55c4:	20000af9 	.word	0x20000af9
    55c8:	00003ce1 	.word	0x00003ce1
    55cc:	20000afc 	.word	0x20000afc
    55d0:	00000799 	.word	0x00000799
    55d4:	cccccccd 	.word	0xcccccccd
    55d8:	3ffccccc 	.word	0x3ffccccc
    55dc:	0000643d 	.word	0x0000643d
    55e0:	40400000 	.word	0x40400000
    55e4:	000057b5 	.word	0x000057b5
    55e8:	00005779 	.word	0x00005779
    55ec:	00004cd5 	.word	0x00004cd5
    55f0:	20000274 	.word	0x20000274
    55f4:	000086b8 	.word	0x000086b8
    55f8:	0000067d 	.word	0x0000067d
    55fc:	00003df9 	.word	0x00003df9
    5600:	00002441 	.word	0x00002441
    5604:	00005221 	.word	0x00005221
    5608:	00004d1d 	.word	0x00004d1d

0000560c <__udivsi3>:
    560c:	2200      	movs	r2, #0
    560e:	0843      	lsrs	r3, r0, #1
    5610:	428b      	cmp	r3, r1
    5612:	d374      	bcc.n	56fe <__udivsi3+0xf2>
    5614:	0903      	lsrs	r3, r0, #4
    5616:	428b      	cmp	r3, r1
    5618:	d35f      	bcc.n	56da <__udivsi3+0xce>
    561a:	0a03      	lsrs	r3, r0, #8
    561c:	428b      	cmp	r3, r1
    561e:	d344      	bcc.n	56aa <__udivsi3+0x9e>
    5620:	0b03      	lsrs	r3, r0, #12
    5622:	428b      	cmp	r3, r1
    5624:	d328      	bcc.n	5678 <__udivsi3+0x6c>
    5626:	0c03      	lsrs	r3, r0, #16
    5628:	428b      	cmp	r3, r1
    562a:	d30d      	bcc.n	5648 <__udivsi3+0x3c>
    562c:	22ff      	movs	r2, #255	; 0xff
    562e:	0209      	lsls	r1, r1, #8
    5630:	ba12      	rev	r2, r2
    5632:	0c03      	lsrs	r3, r0, #16
    5634:	428b      	cmp	r3, r1
    5636:	d302      	bcc.n	563e <__udivsi3+0x32>
    5638:	1212      	asrs	r2, r2, #8
    563a:	0209      	lsls	r1, r1, #8
    563c:	d065      	beq.n	570a <__udivsi3+0xfe>
    563e:	0b03      	lsrs	r3, r0, #12
    5640:	428b      	cmp	r3, r1
    5642:	d319      	bcc.n	5678 <__udivsi3+0x6c>
    5644:	e000      	b.n	5648 <__udivsi3+0x3c>
    5646:	0a09      	lsrs	r1, r1, #8
    5648:	0bc3      	lsrs	r3, r0, #15
    564a:	428b      	cmp	r3, r1
    564c:	d301      	bcc.n	5652 <__udivsi3+0x46>
    564e:	03cb      	lsls	r3, r1, #15
    5650:	1ac0      	subs	r0, r0, r3
    5652:	4152      	adcs	r2, r2
    5654:	0b83      	lsrs	r3, r0, #14
    5656:	428b      	cmp	r3, r1
    5658:	d301      	bcc.n	565e <__udivsi3+0x52>
    565a:	038b      	lsls	r3, r1, #14
    565c:	1ac0      	subs	r0, r0, r3
    565e:	4152      	adcs	r2, r2
    5660:	0b43      	lsrs	r3, r0, #13
    5662:	428b      	cmp	r3, r1
    5664:	d301      	bcc.n	566a <__udivsi3+0x5e>
    5666:	034b      	lsls	r3, r1, #13
    5668:	1ac0      	subs	r0, r0, r3
    566a:	4152      	adcs	r2, r2
    566c:	0b03      	lsrs	r3, r0, #12
    566e:	428b      	cmp	r3, r1
    5670:	d301      	bcc.n	5676 <__udivsi3+0x6a>
    5672:	030b      	lsls	r3, r1, #12
    5674:	1ac0      	subs	r0, r0, r3
    5676:	4152      	adcs	r2, r2
    5678:	0ac3      	lsrs	r3, r0, #11
    567a:	428b      	cmp	r3, r1
    567c:	d301      	bcc.n	5682 <__udivsi3+0x76>
    567e:	02cb      	lsls	r3, r1, #11
    5680:	1ac0      	subs	r0, r0, r3
    5682:	4152      	adcs	r2, r2
    5684:	0a83      	lsrs	r3, r0, #10
    5686:	428b      	cmp	r3, r1
    5688:	d301      	bcc.n	568e <__udivsi3+0x82>
    568a:	028b      	lsls	r3, r1, #10
    568c:	1ac0      	subs	r0, r0, r3
    568e:	4152      	adcs	r2, r2
    5690:	0a43      	lsrs	r3, r0, #9
    5692:	428b      	cmp	r3, r1
    5694:	d301      	bcc.n	569a <__udivsi3+0x8e>
    5696:	024b      	lsls	r3, r1, #9
    5698:	1ac0      	subs	r0, r0, r3
    569a:	4152      	adcs	r2, r2
    569c:	0a03      	lsrs	r3, r0, #8
    569e:	428b      	cmp	r3, r1
    56a0:	d301      	bcc.n	56a6 <__udivsi3+0x9a>
    56a2:	020b      	lsls	r3, r1, #8
    56a4:	1ac0      	subs	r0, r0, r3
    56a6:	4152      	adcs	r2, r2
    56a8:	d2cd      	bcs.n	5646 <__udivsi3+0x3a>
    56aa:	09c3      	lsrs	r3, r0, #7
    56ac:	428b      	cmp	r3, r1
    56ae:	d301      	bcc.n	56b4 <__udivsi3+0xa8>
    56b0:	01cb      	lsls	r3, r1, #7
    56b2:	1ac0      	subs	r0, r0, r3
    56b4:	4152      	adcs	r2, r2
    56b6:	0983      	lsrs	r3, r0, #6
    56b8:	428b      	cmp	r3, r1
    56ba:	d301      	bcc.n	56c0 <__udivsi3+0xb4>
    56bc:	018b      	lsls	r3, r1, #6
    56be:	1ac0      	subs	r0, r0, r3
    56c0:	4152      	adcs	r2, r2
    56c2:	0943      	lsrs	r3, r0, #5
    56c4:	428b      	cmp	r3, r1
    56c6:	d301      	bcc.n	56cc <__udivsi3+0xc0>
    56c8:	014b      	lsls	r3, r1, #5
    56ca:	1ac0      	subs	r0, r0, r3
    56cc:	4152      	adcs	r2, r2
    56ce:	0903      	lsrs	r3, r0, #4
    56d0:	428b      	cmp	r3, r1
    56d2:	d301      	bcc.n	56d8 <__udivsi3+0xcc>
    56d4:	010b      	lsls	r3, r1, #4
    56d6:	1ac0      	subs	r0, r0, r3
    56d8:	4152      	adcs	r2, r2
    56da:	08c3      	lsrs	r3, r0, #3
    56dc:	428b      	cmp	r3, r1
    56de:	d301      	bcc.n	56e4 <__udivsi3+0xd8>
    56e0:	00cb      	lsls	r3, r1, #3
    56e2:	1ac0      	subs	r0, r0, r3
    56e4:	4152      	adcs	r2, r2
    56e6:	0883      	lsrs	r3, r0, #2
    56e8:	428b      	cmp	r3, r1
    56ea:	d301      	bcc.n	56f0 <__udivsi3+0xe4>
    56ec:	008b      	lsls	r3, r1, #2
    56ee:	1ac0      	subs	r0, r0, r3
    56f0:	4152      	adcs	r2, r2
    56f2:	0843      	lsrs	r3, r0, #1
    56f4:	428b      	cmp	r3, r1
    56f6:	d301      	bcc.n	56fc <__udivsi3+0xf0>
    56f8:	004b      	lsls	r3, r1, #1
    56fa:	1ac0      	subs	r0, r0, r3
    56fc:	4152      	adcs	r2, r2
    56fe:	1a41      	subs	r1, r0, r1
    5700:	d200      	bcs.n	5704 <__udivsi3+0xf8>
    5702:	4601      	mov	r1, r0
    5704:	4152      	adcs	r2, r2
    5706:	4610      	mov	r0, r2
    5708:	4770      	bx	lr
    570a:	e7ff      	b.n	570c <__udivsi3+0x100>
    570c:	b501      	push	{r0, lr}
    570e:	2000      	movs	r0, #0
    5710:	f000 f806 	bl	5720 <__aeabi_idiv0>
    5714:	bd02      	pop	{r1, pc}
    5716:	46c0      	nop			; (mov r8, r8)

00005718 <__aeabi_uidivmod>:
    5718:	2900      	cmp	r1, #0
    571a:	d0f7      	beq.n	570c <__udivsi3+0x100>
    571c:	e776      	b.n	560c <__udivsi3>
    571e:	4770      	bx	lr

00005720 <__aeabi_idiv0>:
    5720:	4770      	bx	lr
    5722:	46c0      	nop			; (mov r8, r8)

00005724 <__aeabi_lmul>:
    5724:	b5f0      	push	{r4, r5, r6, r7, lr}
    5726:	46ce      	mov	lr, r9
    5728:	4647      	mov	r7, r8
    572a:	0415      	lsls	r5, r2, #16
    572c:	0c2d      	lsrs	r5, r5, #16
    572e:	002e      	movs	r6, r5
    5730:	b580      	push	{r7, lr}
    5732:	0407      	lsls	r7, r0, #16
    5734:	0c14      	lsrs	r4, r2, #16
    5736:	0c3f      	lsrs	r7, r7, #16
    5738:	4699      	mov	r9, r3
    573a:	0c03      	lsrs	r3, r0, #16
    573c:	437e      	muls	r6, r7
    573e:	435d      	muls	r5, r3
    5740:	4367      	muls	r7, r4
    5742:	4363      	muls	r3, r4
    5744:	197f      	adds	r7, r7, r5
    5746:	0c34      	lsrs	r4, r6, #16
    5748:	19e4      	adds	r4, r4, r7
    574a:	469c      	mov	ip, r3
    574c:	42a5      	cmp	r5, r4
    574e:	d903      	bls.n	5758 <__aeabi_lmul+0x34>
    5750:	2380      	movs	r3, #128	; 0x80
    5752:	025b      	lsls	r3, r3, #9
    5754:	4698      	mov	r8, r3
    5756:	44c4      	add	ip, r8
    5758:	464b      	mov	r3, r9
    575a:	4351      	muls	r1, r2
    575c:	4343      	muls	r3, r0
    575e:	0436      	lsls	r6, r6, #16
    5760:	0c36      	lsrs	r6, r6, #16
    5762:	0c25      	lsrs	r5, r4, #16
    5764:	0424      	lsls	r4, r4, #16
    5766:	4465      	add	r5, ip
    5768:	19a4      	adds	r4, r4, r6
    576a:	1859      	adds	r1, r3, r1
    576c:	1949      	adds	r1, r1, r5
    576e:	0020      	movs	r0, r4
    5770:	bc0c      	pop	{r2, r3}
    5772:	4690      	mov	r8, r2
    5774:	4699      	mov	r9, r3
    5776:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005778 <__aeabi_d2uiz>:
    5778:	b570      	push	{r4, r5, r6, lr}
    577a:	2200      	movs	r2, #0
    577c:	4b0c      	ldr	r3, [pc, #48]	; (57b0 <__aeabi_d2uiz+0x38>)
    577e:	0004      	movs	r4, r0
    5780:	000d      	movs	r5, r1
    5782:	f001 fcd3 	bl	712c <__aeabi_dcmpge>
    5786:	2800      	cmp	r0, #0
    5788:	d104      	bne.n	5794 <__aeabi_d2uiz+0x1c>
    578a:	0020      	movs	r0, r4
    578c:	0029      	movs	r1, r5
    578e:	f001 fbeb 	bl	6f68 <__aeabi_d2iz>
    5792:	bd70      	pop	{r4, r5, r6, pc}
    5794:	4b06      	ldr	r3, [pc, #24]	; (57b0 <__aeabi_d2uiz+0x38>)
    5796:	2200      	movs	r2, #0
    5798:	0020      	movs	r0, r4
    579a:	0029      	movs	r1, r5
    579c:	f001 f8ce 	bl	693c <__aeabi_dsub>
    57a0:	f001 fbe2 	bl	6f68 <__aeabi_d2iz>
    57a4:	2380      	movs	r3, #128	; 0x80
    57a6:	061b      	lsls	r3, r3, #24
    57a8:	469c      	mov	ip, r3
    57aa:	4460      	add	r0, ip
    57ac:	e7f1      	b.n	5792 <__aeabi_d2uiz+0x1a>
    57ae:	46c0      	nop			; (mov r8, r8)
    57b0:	41e00000 	.word	0x41e00000

000057b4 <__aeabi_dadd>:
    57b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    57b6:	4645      	mov	r5, r8
    57b8:	46de      	mov	lr, fp
    57ba:	4657      	mov	r7, sl
    57bc:	464e      	mov	r6, r9
    57be:	030c      	lsls	r4, r1, #12
    57c0:	b5e0      	push	{r5, r6, r7, lr}
    57c2:	004e      	lsls	r6, r1, #1
    57c4:	0fc9      	lsrs	r1, r1, #31
    57c6:	4688      	mov	r8, r1
    57c8:	000d      	movs	r5, r1
    57ca:	0a61      	lsrs	r1, r4, #9
    57cc:	0f44      	lsrs	r4, r0, #29
    57ce:	430c      	orrs	r4, r1
    57d0:	00c7      	lsls	r7, r0, #3
    57d2:	0319      	lsls	r1, r3, #12
    57d4:	0058      	lsls	r0, r3, #1
    57d6:	0fdb      	lsrs	r3, r3, #31
    57d8:	469b      	mov	fp, r3
    57da:	0a4b      	lsrs	r3, r1, #9
    57dc:	0f51      	lsrs	r1, r2, #29
    57de:	430b      	orrs	r3, r1
    57e0:	0d76      	lsrs	r6, r6, #21
    57e2:	0d40      	lsrs	r0, r0, #21
    57e4:	0019      	movs	r1, r3
    57e6:	00d2      	lsls	r2, r2, #3
    57e8:	45d8      	cmp	r8, fp
    57ea:	d100      	bne.n	57ee <__aeabi_dadd+0x3a>
    57ec:	e0ae      	b.n	594c <__aeabi_dadd+0x198>
    57ee:	1a35      	subs	r5, r6, r0
    57f0:	2d00      	cmp	r5, #0
    57f2:	dc00      	bgt.n	57f6 <__aeabi_dadd+0x42>
    57f4:	e0f6      	b.n	59e4 <__aeabi_dadd+0x230>
    57f6:	2800      	cmp	r0, #0
    57f8:	d10f      	bne.n	581a <__aeabi_dadd+0x66>
    57fa:	4313      	orrs	r3, r2
    57fc:	d100      	bne.n	5800 <__aeabi_dadd+0x4c>
    57fe:	e0db      	b.n	59b8 <__aeabi_dadd+0x204>
    5800:	1e6b      	subs	r3, r5, #1
    5802:	2b00      	cmp	r3, #0
    5804:	d000      	beq.n	5808 <__aeabi_dadd+0x54>
    5806:	e137      	b.n	5a78 <__aeabi_dadd+0x2c4>
    5808:	1aba      	subs	r2, r7, r2
    580a:	4297      	cmp	r7, r2
    580c:	41bf      	sbcs	r7, r7
    580e:	1a64      	subs	r4, r4, r1
    5810:	427f      	negs	r7, r7
    5812:	1be4      	subs	r4, r4, r7
    5814:	2601      	movs	r6, #1
    5816:	0017      	movs	r7, r2
    5818:	e024      	b.n	5864 <__aeabi_dadd+0xb0>
    581a:	4bc6      	ldr	r3, [pc, #792]	; (5b34 <__aeabi_dadd+0x380>)
    581c:	429e      	cmp	r6, r3
    581e:	d04d      	beq.n	58bc <__aeabi_dadd+0x108>
    5820:	2380      	movs	r3, #128	; 0x80
    5822:	041b      	lsls	r3, r3, #16
    5824:	4319      	orrs	r1, r3
    5826:	2d38      	cmp	r5, #56	; 0x38
    5828:	dd00      	ble.n	582c <__aeabi_dadd+0x78>
    582a:	e107      	b.n	5a3c <__aeabi_dadd+0x288>
    582c:	2d1f      	cmp	r5, #31
    582e:	dd00      	ble.n	5832 <__aeabi_dadd+0x7e>
    5830:	e138      	b.n	5aa4 <__aeabi_dadd+0x2f0>
    5832:	2020      	movs	r0, #32
    5834:	1b43      	subs	r3, r0, r5
    5836:	469a      	mov	sl, r3
    5838:	000b      	movs	r3, r1
    583a:	4650      	mov	r0, sl
    583c:	4083      	lsls	r3, r0
    583e:	4699      	mov	r9, r3
    5840:	0013      	movs	r3, r2
    5842:	4648      	mov	r0, r9
    5844:	40eb      	lsrs	r3, r5
    5846:	4318      	orrs	r0, r3
    5848:	0003      	movs	r3, r0
    584a:	4650      	mov	r0, sl
    584c:	4082      	lsls	r2, r0
    584e:	1e50      	subs	r0, r2, #1
    5850:	4182      	sbcs	r2, r0
    5852:	40e9      	lsrs	r1, r5
    5854:	431a      	orrs	r2, r3
    5856:	1aba      	subs	r2, r7, r2
    5858:	1a61      	subs	r1, r4, r1
    585a:	4297      	cmp	r7, r2
    585c:	41a4      	sbcs	r4, r4
    585e:	0017      	movs	r7, r2
    5860:	4264      	negs	r4, r4
    5862:	1b0c      	subs	r4, r1, r4
    5864:	0223      	lsls	r3, r4, #8
    5866:	d562      	bpl.n	592e <__aeabi_dadd+0x17a>
    5868:	0264      	lsls	r4, r4, #9
    586a:	0a65      	lsrs	r5, r4, #9
    586c:	2d00      	cmp	r5, #0
    586e:	d100      	bne.n	5872 <__aeabi_dadd+0xbe>
    5870:	e0df      	b.n	5a32 <__aeabi_dadd+0x27e>
    5872:	0028      	movs	r0, r5
    5874:	f001 fc64 	bl	7140 <__clzsi2>
    5878:	0003      	movs	r3, r0
    587a:	3b08      	subs	r3, #8
    587c:	2b1f      	cmp	r3, #31
    587e:	dd00      	ble.n	5882 <__aeabi_dadd+0xce>
    5880:	e0d2      	b.n	5a28 <__aeabi_dadd+0x274>
    5882:	2220      	movs	r2, #32
    5884:	003c      	movs	r4, r7
    5886:	1ad2      	subs	r2, r2, r3
    5888:	409d      	lsls	r5, r3
    588a:	40d4      	lsrs	r4, r2
    588c:	409f      	lsls	r7, r3
    588e:	4325      	orrs	r5, r4
    5890:	429e      	cmp	r6, r3
    5892:	dd00      	ble.n	5896 <__aeabi_dadd+0xe2>
    5894:	e0c4      	b.n	5a20 <__aeabi_dadd+0x26c>
    5896:	1b9e      	subs	r6, r3, r6
    5898:	1c73      	adds	r3, r6, #1
    589a:	2b1f      	cmp	r3, #31
    589c:	dd00      	ble.n	58a0 <__aeabi_dadd+0xec>
    589e:	e0f1      	b.n	5a84 <__aeabi_dadd+0x2d0>
    58a0:	2220      	movs	r2, #32
    58a2:	0038      	movs	r0, r7
    58a4:	0029      	movs	r1, r5
    58a6:	1ad2      	subs	r2, r2, r3
    58a8:	40d8      	lsrs	r0, r3
    58aa:	4091      	lsls	r1, r2
    58ac:	4097      	lsls	r7, r2
    58ae:	002c      	movs	r4, r5
    58b0:	4301      	orrs	r1, r0
    58b2:	1e78      	subs	r0, r7, #1
    58b4:	4187      	sbcs	r7, r0
    58b6:	40dc      	lsrs	r4, r3
    58b8:	2600      	movs	r6, #0
    58ba:	430f      	orrs	r7, r1
    58bc:	077b      	lsls	r3, r7, #29
    58be:	d009      	beq.n	58d4 <__aeabi_dadd+0x120>
    58c0:	230f      	movs	r3, #15
    58c2:	403b      	ands	r3, r7
    58c4:	2b04      	cmp	r3, #4
    58c6:	d005      	beq.n	58d4 <__aeabi_dadd+0x120>
    58c8:	1d3b      	adds	r3, r7, #4
    58ca:	42bb      	cmp	r3, r7
    58cc:	41bf      	sbcs	r7, r7
    58ce:	427f      	negs	r7, r7
    58d0:	19e4      	adds	r4, r4, r7
    58d2:	001f      	movs	r7, r3
    58d4:	0223      	lsls	r3, r4, #8
    58d6:	d52c      	bpl.n	5932 <__aeabi_dadd+0x17e>
    58d8:	4b96      	ldr	r3, [pc, #600]	; (5b34 <__aeabi_dadd+0x380>)
    58da:	3601      	adds	r6, #1
    58dc:	429e      	cmp	r6, r3
    58de:	d100      	bne.n	58e2 <__aeabi_dadd+0x12e>
    58e0:	e09a      	b.n	5a18 <__aeabi_dadd+0x264>
    58e2:	4645      	mov	r5, r8
    58e4:	4b94      	ldr	r3, [pc, #592]	; (5b38 <__aeabi_dadd+0x384>)
    58e6:	08ff      	lsrs	r7, r7, #3
    58e8:	401c      	ands	r4, r3
    58ea:	0760      	lsls	r0, r4, #29
    58ec:	0576      	lsls	r6, r6, #21
    58ee:	0264      	lsls	r4, r4, #9
    58f0:	4307      	orrs	r7, r0
    58f2:	0b24      	lsrs	r4, r4, #12
    58f4:	0d76      	lsrs	r6, r6, #21
    58f6:	2100      	movs	r1, #0
    58f8:	0324      	lsls	r4, r4, #12
    58fa:	0b23      	lsrs	r3, r4, #12
    58fc:	0d0c      	lsrs	r4, r1, #20
    58fe:	4a8f      	ldr	r2, [pc, #572]	; (5b3c <__aeabi_dadd+0x388>)
    5900:	0524      	lsls	r4, r4, #20
    5902:	431c      	orrs	r4, r3
    5904:	4014      	ands	r4, r2
    5906:	0533      	lsls	r3, r6, #20
    5908:	4323      	orrs	r3, r4
    590a:	005b      	lsls	r3, r3, #1
    590c:	07ed      	lsls	r5, r5, #31
    590e:	085b      	lsrs	r3, r3, #1
    5910:	432b      	orrs	r3, r5
    5912:	0038      	movs	r0, r7
    5914:	0019      	movs	r1, r3
    5916:	bc3c      	pop	{r2, r3, r4, r5}
    5918:	4690      	mov	r8, r2
    591a:	4699      	mov	r9, r3
    591c:	46a2      	mov	sl, r4
    591e:	46ab      	mov	fp, r5
    5920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5922:	4664      	mov	r4, ip
    5924:	4304      	orrs	r4, r0
    5926:	d100      	bne.n	592a <__aeabi_dadd+0x176>
    5928:	e211      	b.n	5d4e <__aeabi_dadd+0x59a>
    592a:	0004      	movs	r4, r0
    592c:	4667      	mov	r7, ip
    592e:	077b      	lsls	r3, r7, #29
    5930:	d1c6      	bne.n	58c0 <__aeabi_dadd+0x10c>
    5932:	4645      	mov	r5, r8
    5934:	0760      	lsls	r0, r4, #29
    5936:	08ff      	lsrs	r7, r7, #3
    5938:	4307      	orrs	r7, r0
    593a:	08e4      	lsrs	r4, r4, #3
    593c:	4b7d      	ldr	r3, [pc, #500]	; (5b34 <__aeabi_dadd+0x380>)
    593e:	429e      	cmp	r6, r3
    5940:	d030      	beq.n	59a4 <__aeabi_dadd+0x1f0>
    5942:	0324      	lsls	r4, r4, #12
    5944:	0576      	lsls	r6, r6, #21
    5946:	0b24      	lsrs	r4, r4, #12
    5948:	0d76      	lsrs	r6, r6, #21
    594a:	e7d4      	b.n	58f6 <__aeabi_dadd+0x142>
    594c:	1a33      	subs	r3, r6, r0
    594e:	469a      	mov	sl, r3
    5950:	2b00      	cmp	r3, #0
    5952:	dd78      	ble.n	5a46 <__aeabi_dadd+0x292>
    5954:	2800      	cmp	r0, #0
    5956:	d031      	beq.n	59bc <__aeabi_dadd+0x208>
    5958:	4876      	ldr	r0, [pc, #472]	; (5b34 <__aeabi_dadd+0x380>)
    595a:	4286      	cmp	r6, r0
    595c:	d0ae      	beq.n	58bc <__aeabi_dadd+0x108>
    595e:	2080      	movs	r0, #128	; 0x80
    5960:	0400      	lsls	r0, r0, #16
    5962:	4301      	orrs	r1, r0
    5964:	4653      	mov	r3, sl
    5966:	2b38      	cmp	r3, #56	; 0x38
    5968:	dc00      	bgt.n	596c <__aeabi_dadd+0x1b8>
    596a:	e0e9      	b.n	5b40 <__aeabi_dadd+0x38c>
    596c:	430a      	orrs	r2, r1
    596e:	1e51      	subs	r1, r2, #1
    5970:	418a      	sbcs	r2, r1
    5972:	2100      	movs	r1, #0
    5974:	19d2      	adds	r2, r2, r7
    5976:	42ba      	cmp	r2, r7
    5978:	41bf      	sbcs	r7, r7
    597a:	1909      	adds	r1, r1, r4
    597c:	427c      	negs	r4, r7
    597e:	0017      	movs	r7, r2
    5980:	190c      	adds	r4, r1, r4
    5982:	0223      	lsls	r3, r4, #8
    5984:	d5d3      	bpl.n	592e <__aeabi_dadd+0x17a>
    5986:	4b6b      	ldr	r3, [pc, #428]	; (5b34 <__aeabi_dadd+0x380>)
    5988:	3601      	adds	r6, #1
    598a:	429e      	cmp	r6, r3
    598c:	d100      	bne.n	5990 <__aeabi_dadd+0x1dc>
    598e:	e13a      	b.n	5c06 <__aeabi_dadd+0x452>
    5990:	2001      	movs	r0, #1
    5992:	4b69      	ldr	r3, [pc, #420]	; (5b38 <__aeabi_dadd+0x384>)
    5994:	401c      	ands	r4, r3
    5996:	087b      	lsrs	r3, r7, #1
    5998:	4007      	ands	r7, r0
    599a:	431f      	orrs	r7, r3
    599c:	07e0      	lsls	r0, r4, #31
    599e:	4307      	orrs	r7, r0
    59a0:	0864      	lsrs	r4, r4, #1
    59a2:	e78b      	b.n	58bc <__aeabi_dadd+0x108>
    59a4:	0023      	movs	r3, r4
    59a6:	433b      	orrs	r3, r7
    59a8:	d100      	bne.n	59ac <__aeabi_dadd+0x1f8>
    59aa:	e1cb      	b.n	5d44 <__aeabi_dadd+0x590>
    59ac:	2280      	movs	r2, #128	; 0x80
    59ae:	0312      	lsls	r2, r2, #12
    59b0:	4314      	orrs	r4, r2
    59b2:	0324      	lsls	r4, r4, #12
    59b4:	0b24      	lsrs	r4, r4, #12
    59b6:	e79e      	b.n	58f6 <__aeabi_dadd+0x142>
    59b8:	002e      	movs	r6, r5
    59ba:	e77f      	b.n	58bc <__aeabi_dadd+0x108>
    59bc:	0008      	movs	r0, r1
    59be:	4310      	orrs	r0, r2
    59c0:	d100      	bne.n	59c4 <__aeabi_dadd+0x210>
    59c2:	e0b4      	b.n	5b2e <__aeabi_dadd+0x37a>
    59c4:	1e58      	subs	r0, r3, #1
    59c6:	2800      	cmp	r0, #0
    59c8:	d000      	beq.n	59cc <__aeabi_dadd+0x218>
    59ca:	e0de      	b.n	5b8a <__aeabi_dadd+0x3d6>
    59cc:	18ba      	adds	r2, r7, r2
    59ce:	42ba      	cmp	r2, r7
    59d0:	419b      	sbcs	r3, r3
    59d2:	1864      	adds	r4, r4, r1
    59d4:	425b      	negs	r3, r3
    59d6:	18e4      	adds	r4, r4, r3
    59d8:	0017      	movs	r7, r2
    59da:	2601      	movs	r6, #1
    59dc:	0223      	lsls	r3, r4, #8
    59de:	d5a6      	bpl.n	592e <__aeabi_dadd+0x17a>
    59e0:	2602      	movs	r6, #2
    59e2:	e7d5      	b.n	5990 <__aeabi_dadd+0x1dc>
    59e4:	2d00      	cmp	r5, #0
    59e6:	d16e      	bne.n	5ac6 <__aeabi_dadd+0x312>
    59e8:	1c70      	adds	r0, r6, #1
    59ea:	0540      	lsls	r0, r0, #21
    59ec:	0d40      	lsrs	r0, r0, #21
    59ee:	2801      	cmp	r0, #1
    59f0:	dc00      	bgt.n	59f4 <__aeabi_dadd+0x240>
    59f2:	e0f9      	b.n	5be8 <__aeabi_dadd+0x434>
    59f4:	1ab8      	subs	r0, r7, r2
    59f6:	4684      	mov	ip, r0
    59f8:	4287      	cmp	r7, r0
    59fa:	4180      	sbcs	r0, r0
    59fc:	1ae5      	subs	r5, r4, r3
    59fe:	4240      	negs	r0, r0
    5a00:	1a2d      	subs	r5, r5, r0
    5a02:	0228      	lsls	r0, r5, #8
    5a04:	d400      	bmi.n	5a08 <__aeabi_dadd+0x254>
    5a06:	e089      	b.n	5b1c <__aeabi_dadd+0x368>
    5a08:	1bd7      	subs	r7, r2, r7
    5a0a:	42ba      	cmp	r2, r7
    5a0c:	4192      	sbcs	r2, r2
    5a0e:	1b1c      	subs	r4, r3, r4
    5a10:	4252      	negs	r2, r2
    5a12:	1aa5      	subs	r5, r4, r2
    5a14:	46d8      	mov	r8, fp
    5a16:	e729      	b.n	586c <__aeabi_dadd+0xb8>
    5a18:	4645      	mov	r5, r8
    5a1a:	2400      	movs	r4, #0
    5a1c:	2700      	movs	r7, #0
    5a1e:	e76a      	b.n	58f6 <__aeabi_dadd+0x142>
    5a20:	4c45      	ldr	r4, [pc, #276]	; (5b38 <__aeabi_dadd+0x384>)
    5a22:	1af6      	subs	r6, r6, r3
    5a24:	402c      	ands	r4, r5
    5a26:	e749      	b.n	58bc <__aeabi_dadd+0x108>
    5a28:	003d      	movs	r5, r7
    5a2a:	3828      	subs	r0, #40	; 0x28
    5a2c:	4085      	lsls	r5, r0
    5a2e:	2700      	movs	r7, #0
    5a30:	e72e      	b.n	5890 <__aeabi_dadd+0xdc>
    5a32:	0038      	movs	r0, r7
    5a34:	f001 fb84 	bl	7140 <__clzsi2>
    5a38:	3020      	adds	r0, #32
    5a3a:	e71d      	b.n	5878 <__aeabi_dadd+0xc4>
    5a3c:	430a      	orrs	r2, r1
    5a3e:	1e51      	subs	r1, r2, #1
    5a40:	418a      	sbcs	r2, r1
    5a42:	2100      	movs	r1, #0
    5a44:	e707      	b.n	5856 <__aeabi_dadd+0xa2>
    5a46:	2b00      	cmp	r3, #0
    5a48:	d000      	beq.n	5a4c <__aeabi_dadd+0x298>
    5a4a:	e0f3      	b.n	5c34 <__aeabi_dadd+0x480>
    5a4c:	1c70      	adds	r0, r6, #1
    5a4e:	0543      	lsls	r3, r0, #21
    5a50:	0d5b      	lsrs	r3, r3, #21
    5a52:	2b01      	cmp	r3, #1
    5a54:	dc00      	bgt.n	5a58 <__aeabi_dadd+0x2a4>
    5a56:	e0ad      	b.n	5bb4 <__aeabi_dadd+0x400>
    5a58:	4b36      	ldr	r3, [pc, #216]	; (5b34 <__aeabi_dadd+0x380>)
    5a5a:	4298      	cmp	r0, r3
    5a5c:	d100      	bne.n	5a60 <__aeabi_dadd+0x2ac>
    5a5e:	e0d1      	b.n	5c04 <__aeabi_dadd+0x450>
    5a60:	18ba      	adds	r2, r7, r2
    5a62:	42ba      	cmp	r2, r7
    5a64:	41bf      	sbcs	r7, r7
    5a66:	1864      	adds	r4, r4, r1
    5a68:	427f      	negs	r7, r7
    5a6a:	19e4      	adds	r4, r4, r7
    5a6c:	07e7      	lsls	r7, r4, #31
    5a6e:	0852      	lsrs	r2, r2, #1
    5a70:	4317      	orrs	r7, r2
    5a72:	0864      	lsrs	r4, r4, #1
    5a74:	0006      	movs	r6, r0
    5a76:	e721      	b.n	58bc <__aeabi_dadd+0x108>
    5a78:	482e      	ldr	r0, [pc, #184]	; (5b34 <__aeabi_dadd+0x380>)
    5a7a:	4285      	cmp	r5, r0
    5a7c:	d100      	bne.n	5a80 <__aeabi_dadd+0x2cc>
    5a7e:	e093      	b.n	5ba8 <__aeabi_dadd+0x3f4>
    5a80:	001d      	movs	r5, r3
    5a82:	e6d0      	b.n	5826 <__aeabi_dadd+0x72>
    5a84:	0029      	movs	r1, r5
    5a86:	3e1f      	subs	r6, #31
    5a88:	40f1      	lsrs	r1, r6
    5a8a:	2b20      	cmp	r3, #32
    5a8c:	d100      	bne.n	5a90 <__aeabi_dadd+0x2dc>
    5a8e:	e08d      	b.n	5bac <__aeabi_dadd+0x3f8>
    5a90:	2240      	movs	r2, #64	; 0x40
    5a92:	1ad3      	subs	r3, r2, r3
    5a94:	409d      	lsls	r5, r3
    5a96:	432f      	orrs	r7, r5
    5a98:	1e7d      	subs	r5, r7, #1
    5a9a:	41af      	sbcs	r7, r5
    5a9c:	2400      	movs	r4, #0
    5a9e:	430f      	orrs	r7, r1
    5aa0:	2600      	movs	r6, #0
    5aa2:	e744      	b.n	592e <__aeabi_dadd+0x17a>
    5aa4:	002b      	movs	r3, r5
    5aa6:	0008      	movs	r0, r1
    5aa8:	3b20      	subs	r3, #32
    5aaa:	40d8      	lsrs	r0, r3
    5aac:	0003      	movs	r3, r0
    5aae:	2d20      	cmp	r5, #32
    5ab0:	d100      	bne.n	5ab4 <__aeabi_dadd+0x300>
    5ab2:	e07d      	b.n	5bb0 <__aeabi_dadd+0x3fc>
    5ab4:	2040      	movs	r0, #64	; 0x40
    5ab6:	1b45      	subs	r5, r0, r5
    5ab8:	40a9      	lsls	r1, r5
    5aba:	430a      	orrs	r2, r1
    5abc:	1e51      	subs	r1, r2, #1
    5abe:	418a      	sbcs	r2, r1
    5ac0:	2100      	movs	r1, #0
    5ac2:	431a      	orrs	r2, r3
    5ac4:	e6c7      	b.n	5856 <__aeabi_dadd+0xa2>
    5ac6:	2e00      	cmp	r6, #0
    5ac8:	d050      	beq.n	5b6c <__aeabi_dadd+0x3b8>
    5aca:	4e1a      	ldr	r6, [pc, #104]	; (5b34 <__aeabi_dadd+0x380>)
    5acc:	42b0      	cmp	r0, r6
    5ace:	d057      	beq.n	5b80 <__aeabi_dadd+0x3cc>
    5ad0:	2680      	movs	r6, #128	; 0x80
    5ad2:	426b      	negs	r3, r5
    5ad4:	4699      	mov	r9, r3
    5ad6:	0436      	lsls	r6, r6, #16
    5ad8:	4334      	orrs	r4, r6
    5ada:	464b      	mov	r3, r9
    5adc:	2b38      	cmp	r3, #56	; 0x38
    5ade:	dd00      	ble.n	5ae2 <__aeabi_dadd+0x32e>
    5ae0:	e0d6      	b.n	5c90 <__aeabi_dadd+0x4dc>
    5ae2:	2b1f      	cmp	r3, #31
    5ae4:	dd00      	ble.n	5ae8 <__aeabi_dadd+0x334>
    5ae6:	e135      	b.n	5d54 <__aeabi_dadd+0x5a0>
    5ae8:	2620      	movs	r6, #32
    5aea:	1af5      	subs	r5, r6, r3
    5aec:	0026      	movs	r6, r4
    5aee:	40ae      	lsls	r6, r5
    5af0:	46b2      	mov	sl, r6
    5af2:	003e      	movs	r6, r7
    5af4:	40de      	lsrs	r6, r3
    5af6:	46ac      	mov	ip, r5
    5af8:	0035      	movs	r5, r6
    5afa:	4656      	mov	r6, sl
    5afc:	432e      	orrs	r6, r5
    5afe:	4665      	mov	r5, ip
    5b00:	40af      	lsls	r7, r5
    5b02:	1e7d      	subs	r5, r7, #1
    5b04:	41af      	sbcs	r7, r5
    5b06:	40dc      	lsrs	r4, r3
    5b08:	4337      	orrs	r7, r6
    5b0a:	1bd7      	subs	r7, r2, r7
    5b0c:	42ba      	cmp	r2, r7
    5b0e:	4192      	sbcs	r2, r2
    5b10:	1b0c      	subs	r4, r1, r4
    5b12:	4252      	negs	r2, r2
    5b14:	1aa4      	subs	r4, r4, r2
    5b16:	0006      	movs	r6, r0
    5b18:	46d8      	mov	r8, fp
    5b1a:	e6a3      	b.n	5864 <__aeabi_dadd+0xb0>
    5b1c:	4664      	mov	r4, ip
    5b1e:	4667      	mov	r7, ip
    5b20:	432c      	orrs	r4, r5
    5b22:	d000      	beq.n	5b26 <__aeabi_dadd+0x372>
    5b24:	e6a2      	b.n	586c <__aeabi_dadd+0xb8>
    5b26:	2500      	movs	r5, #0
    5b28:	2600      	movs	r6, #0
    5b2a:	2700      	movs	r7, #0
    5b2c:	e706      	b.n	593c <__aeabi_dadd+0x188>
    5b2e:	001e      	movs	r6, r3
    5b30:	e6c4      	b.n	58bc <__aeabi_dadd+0x108>
    5b32:	46c0      	nop			; (mov r8, r8)
    5b34:	000007ff 	.word	0x000007ff
    5b38:	ff7fffff 	.word	0xff7fffff
    5b3c:	800fffff 	.word	0x800fffff
    5b40:	2b1f      	cmp	r3, #31
    5b42:	dc63      	bgt.n	5c0c <__aeabi_dadd+0x458>
    5b44:	2020      	movs	r0, #32
    5b46:	1ac3      	subs	r3, r0, r3
    5b48:	0008      	movs	r0, r1
    5b4a:	4098      	lsls	r0, r3
    5b4c:	469c      	mov	ip, r3
    5b4e:	4683      	mov	fp, r0
    5b50:	4653      	mov	r3, sl
    5b52:	0010      	movs	r0, r2
    5b54:	40d8      	lsrs	r0, r3
    5b56:	0003      	movs	r3, r0
    5b58:	4658      	mov	r0, fp
    5b5a:	4318      	orrs	r0, r3
    5b5c:	4663      	mov	r3, ip
    5b5e:	409a      	lsls	r2, r3
    5b60:	1e53      	subs	r3, r2, #1
    5b62:	419a      	sbcs	r2, r3
    5b64:	4653      	mov	r3, sl
    5b66:	4302      	orrs	r2, r0
    5b68:	40d9      	lsrs	r1, r3
    5b6a:	e703      	b.n	5974 <__aeabi_dadd+0x1c0>
    5b6c:	0026      	movs	r6, r4
    5b6e:	433e      	orrs	r6, r7
    5b70:	d006      	beq.n	5b80 <__aeabi_dadd+0x3cc>
    5b72:	43eb      	mvns	r3, r5
    5b74:	4699      	mov	r9, r3
    5b76:	2b00      	cmp	r3, #0
    5b78:	d0c7      	beq.n	5b0a <__aeabi_dadd+0x356>
    5b7a:	4e94      	ldr	r6, [pc, #592]	; (5dcc <__aeabi_dadd+0x618>)
    5b7c:	42b0      	cmp	r0, r6
    5b7e:	d1ac      	bne.n	5ada <__aeabi_dadd+0x326>
    5b80:	000c      	movs	r4, r1
    5b82:	0017      	movs	r7, r2
    5b84:	0006      	movs	r6, r0
    5b86:	46d8      	mov	r8, fp
    5b88:	e698      	b.n	58bc <__aeabi_dadd+0x108>
    5b8a:	4b90      	ldr	r3, [pc, #576]	; (5dcc <__aeabi_dadd+0x618>)
    5b8c:	459a      	cmp	sl, r3
    5b8e:	d00b      	beq.n	5ba8 <__aeabi_dadd+0x3f4>
    5b90:	4682      	mov	sl, r0
    5b92:	e6e7      	b.n	5964 <__aeabi_dadd+0x1b0>
    5b94:	2800      	cmp	r0, #0
    5b96:	d000      	beq.n	5b9a <__aeabi_dadd+0x3e6>
    5b98:	e09e      	b.n	5cd8 <__aeabi_dadd+0x524>
    5b9a:	0018      	movs	r0, r3
    5b9c:	4310      	orrs	r0, r2
    5b9e:	d100      	bne.n	5ba2 <__aeabi_dadd+0x3ee>
    5ba0:	e0e9      	b.n	5d76 <__aeabi_dadd+0x5c2>
    5ba2:	001c      	movs	r4, r3
    5ba4:	0017      	movs	r7, r2
    5ba6:	46d8      	mov	r8, fp
    5ba8:	4e88      	ldr	r6, [pc, #544]	; (5dcc <__aeabi_dadd+0x618>)
    5baa:	e687      	b.n	58bc <__aeabi_dadd+0x108>
    5bac:	2500      	movs	r5, #0
    5bae:	e772      	b.n	5a96 <__aeabi_dadd+0x2e2>
    5bb0:	2100      	movs	r1, #0
    5bb2:	e782      	b.n	5aba <__aeabi_dadd+0x306>
    5bb4:	0023      	movs	r3, r4
    5bb6:	433b      	orrs	r3, r7
    5bb8:	2e00      	cmp	r6, #0
    5bba:	d000      	beq.n	5bbe <__aeabi_dadd+0x40a>
    5bbc:	e0ab      	b.n	5d16 <__aeabi_dadd+0x562>
    5bbe:	2b00      	cmp	r3, #0
    5bc0:	d100      	bne.n	5bc4 <__aeabi_dadd+0x410>
    5bc2:	e0e7      	b.n	5d94 <__aeabi_dadd+0x5e0>
    5bc4:	000b      	movs	r3, r1
    5bc6:	4313      	orrs	r3, r2
    5bc8:	d100      	bne.n	5bcc <__aeabi_dadd+0x418>
    5bca:	e677      	b.n	58bc <__aeabi_dadd+0x108>
    5bcc:	18ba      	adds	r2, r7, r2
    5bce:	42ba      	cmp	r2, r7
    5bd0:	41bf      	sbcs	r7, r7
    5bd2:	1864      	adds	r4, r4, r1
    5bd4:	427f      	negs	r7, r7
    5bd6:	19e4      	adds	r4, r4, r7
    5bd8:	0223      	lsls	r3, r4, #8
    5bda:	d400      	bmi.n	5bde <__aeabi_dadd+0x42a>
    5bdc:	e0f2      	b.n	5dc4 <__aeabi_dadd+0x610>
    5bde:	4b7c      	ldr	r3, [pc, #496]	; (5dd0 <__aeabi_dadd+0x61c>)
    5be0:	0017      	movs	r7, r2
    5be2:	401c      	ands	r4, r3
    5be4:	0006      	movs	r6, r0
    5be6:	e669      	b.n	58bc <__aeabi_dadd+0x108>
    5be8:	0020      	movs	r0, r4
    5bea:	4338      	orrs	r0, r7
    5bec:	2e00      	cmp	r6, #0
    5bee:	d1d1      	bne.n	5b94 <__aeabi_dadd+0x3e0>
    5bf0:	2800      	cmp	r0, #0
    5bf2:	d15b      	bne.n	5cac <__aeabi_dadd+0x4f8>
    5bf4:	001c      	movs	r4, r3
    5bf6:	4314      	orrs	r4, r2
    5bf8:	d100      	bne.n	5bfc <__aeabi_dadd+0x448>
    5bfa:	e0a8      	b.n	5d4e <__aeabi_dadd+0x59a>
    5bfc:	001c      	movs	r4, r3
    5bfe:	0017      	movs	r7, r2
    5c00:	46d8      	mov	r8, fp
    5c02:	e65b      	b.n	58bc <__aeabi_dadd+0x108>
    5c04:	0006      	movs	r6, r0
    5c06:	2400      	movs	r4, #0
    5c08:	2700      	movs	r7, #0
    5c0a:	e697      	b.n	593c <__aeabi_dadd+0x188>
    5c0c:	4650      	mov	r0, sl
    5c0e:	000b      	movs	r3, r1
    5c10:	3820      	subs	r0, #32
    5c12:	40c3      	lsrs	r3, r0
    5c14:	4699      	mov	r9, r3
    5c16:	4653      	mov	r3, sl
    5c18:	2b20      	cmp	r3, #32
    5c1a:	d100      	bne.n	5c1e <__aeabi_dadd+0x46a>
    5c1c:	e095      	b.n	5d4a <__aeabi_dadd+0x596>
    5c1e:	2340      	movs	r3, #64	; 0x40
    5c20:	4650      	mov	r0, sl
    5c22:	1a1b      	subs	r3, r3, r0
    5c24:	4099      	lsls	r1, r3
    5c26:	430a      	orrs	r2, r1
    5c28:	1e51      	subs	r1, r2, #1
    5c2a:	418a      	sbcs	r2, r1
    5c2c:	464b      	mov	r3, r9
    5c2e:	2100      	movs	r1, #0
    5c30:	431a      	orrs	r2, r3
    5c32:	e69f      	b.n	5974 <__aeabi_dadd+0x1c0>
    5c34:	2e00      	cmp	r6, #0
    5c36:	d130      	bne.n	5c9a <__aeabi_dadd+0x4e6>
    5c38:	0026      	movs	r6, r4
    5c3a:	433e      	orrs	r6, r7
    5c3c:	d067      	beq.n	5d0e <__aeabi_dadd+0x55a>
    5c3e:	43db      	mvns	r3, r3
    5c40:	469a      	mov	sl, r3
    5c42:	2b00      	cmp	r3, #0
    5c44:	d01c      	beq.n	5c80 <__aeabi_dadd+0x4cc>
    5c46:	4e61      	ldr	r6, [pc, #388]	; (5dcc <__aeabi_dadd+0x618>)
    5c48:	42b0      	cmp	r0, r6
    5c4a:	d060      	beq.n	5d0e <__aeabi_dadd+0x55a>
    5c4c:	4653      	mov	r3, sl
    5c4e:	2b38      	cmp	r3, #56	; 0x38
    5c50:	dd00      	ble.n	5c54 <__aeabi_dadd+0x4a0>
    5c52:	e096      	b.n	5d82 <__aeabi_dadd+0x5ce>
    5c54:	2b1f      	cmp	r3, #31
    5c56:	dd00      	ble.n	5c5a <__aeabi_dadd+0x4a6>
    5c58:	e09f      	b.n	5d9a <__aeabi_dadd+0x5e6>
    5c5a:	2620      	movs	r6, #32
    5c5c:	1af3      	subs	r3, r6, r3
    5c5e:	0026      	movs	r6, r4
    5c60:	409e      	lsls	r6, r3
    5c62:	469c      	mov	ip, r3
    5c64:	46b3      	mov	fp, r6
    5c66:	4653      	mov	r3, sl
    5c68:	003e      	movs	r6, r7
    5c6a:	40de      	lsrs	r6, r3
    5c6c:	0033      	movs	r3, r6
    5c6e:	465e      	mov	r6, fp
    5c70:	431e      	orrs	r6, r3
    5c72:	4663      	mov	r3, ip
    5c74:	409f      	lsls	r7, r3
    5c76:	1e7b      	subs	r3, r7, #1
    5c78:	419f      	sbcs	r7, r3
    5c7a:	4653      	mov	r3, sl
    5c7c:	40dc      	lsrs	r4, r3
    5c7e:	4337      	orrs	r7, r6
    5c80:	18bf      	adds	r7, r7, r2
    5c82:	4297      	cmp	r7, r2
    5c84:	4192      	sbcs	r2, r2
    5c86:	1864      	adds	r4, r4, r1
    5c88:	4252      	negs	r2, r2
    5c8a:	18a4      	adds	r4, r4, r2
    5c8c:	0006      	movs	r6, r0
    5c8e:	e678      	b.n	5982 <__aeabi_dadd+0x1ce>
    5c90:	4327      	orrs	r7, r4
    5c92:	1e7c      	subs	r4, r7, #1
    5c94:	41a7      	sbcs	r7, r4
    5c96:	2400      	movs	r4, #0
    5c98:	e737      	b.n	5b0a <__aeabi_dadd+0x356>
    5c9a:	4e4c      	ldr	r6, [pc, #304]	; (5dcc <__aeabi_dadd+0x618>)
    5c9c:	42b0      	cmp	r0, r6
    5c9e:	d036      	beq.n	5d0e <__aeabi_dadd+0x55a>
    5ca0:	2680      	movs	r6, #128	; 0x80
    5ca2:	425b      	negs	r3, r3
    5ca4:	0436      	lsls	r6, r6, #16
    5ca6:	469a      	mov	sl, r3
    5ca8:	4334      	orrs	r4, r6
    5caa:	e7cf      	b.n	5c4c <__aeabi_dadd+0x498>
    5cac:	0018      	movs	r0, r3
    5cae:	4310      	orrs	r0, r2
    5cb0:	d100      	bne.n	5cb4 <__aeabi_dadd+0x500>
    5cb2:	e603      	b.n	58bc <__aeabi_dadd+0x108>
    5cb4:	1ab8      	subs	r0, r7, r2
    5cb6:	4684      	mov	ip, r0
    5cb8:	4567      	cmp	r7, ip
    5cba:	41ad      	sbcs	r5, r5
    5cbc:	1ae0      	subs	r0, r4, r3
    5cbe:	426d      	negs	r5, r5
    5cc0:	1b40      	subs	r0, r0, r5
    5cc2:	0205      	lsls	r5, r0, #8
    5cc4:	d400      	bmi.n	5cc8 <__aeabi_dadd+0x514>
    5cc6:	e62c      	b.n	5922 <__aeabi_dadd+0x16e>
    5cc8:	1bd7      	subs	r7, r2, r7
    5cca:	42ba      	cmp	r2, r7
    5ccc:	4192      	sbcs	r2, r2
    5cce:	1b1c      	subs	r4, r3, r4
    5cd0:	4252      	negs	r2, r2
    5cd2:	1aa4      	subs	r4, r4, r2
    5cd4:	46d8      	mov	r8, fp
    5cd6:	e5f1      	b.n	58bc <__aeabi_dadd+0x108>
    5cd8:	0018      	movs	r0, r3
    5cda:	4310      	orrs	r0, r2
    5cdc:	d100      	bne.n	5ce0 <__aeabi_dadd+0x52c>
    5cde:	e763      	b.n	5ba8 <__aeabi_dadd+0x3f4>
    5ce0:	08f8      	lsrs	r0, r7, #3
    5ce2:	0767      	lsls	r7, r4, #29
    5ce4:	4307      	orrs	r7, r0
    5ce6:	2080      	movs	r0, #128	; 0x80
    5ce8:	08e4      	lsrs	r4, r4, #3
    5cea:	0300      	lsls	r0, r0, #12
    5cec:	4204      	tst	r4, r0
    5cee:	d008      	beq.n	5d02 <__aeabi_dadd+0x54e>
    5cf0:	08dd      	lsrs	r5, r3, #3
    5cf2:	4205      	tst	r5, r0
    5cf4:	d105      	bne.n	5d02 <__aeabi_dadd+0x54e>
    5cf6:	08d2      	lsrs	r2, r2, #3
    5cf8:	0759      	lsls	r1, r3, #29
    5cfa:	4311      	orrs	r1, r2
    5cfc:	000f      	movs	r7, r1
    5cfe:	002c      	movs	r4, r5
    5d00:	46d8      	mov	r8, fp
    5d02:	0f7b      	lsrs	r3, r7, #29
    5d04:	00e4      	lsls	r4, r4, #3
    5d06:	431c      	orrs	r4, r3
    5d08:	00ff      	lsls	r7, r7, #3
    5d0a:	4e30      	ldr	r6, [pc, #192]	; (5dcc <__aeabi_dadd+0x618>)
    5d0c:	e5d6      	b.n	58bc <__aeabi_dadd+0x108>
    5d0e:	000c      	movs	r4, r1
    5d10:	0017      	movs	r7, r2
    5d12:	0006      	movs	r6, r0
    5d14:	e5d2      	b.n	58bc <__aeabi_dadd+0x108>
    5d16:	2b00      	cmp	r3, #0
    5d18:	d038      	beq.n	5d8c <__aeabi_dadd+0x5d8>
    5d1a:	000b      	movs	r3, r1
    5d1c:	4313      	orrs	r3, r2
    5d1e:	d100      	bne.n	5d22 <__aeabi_dadd+0x56e>
    5d20:	e742      	b.n	5ba8 <__aeabi_dadd+0x3f4>
    5d22:	08f8      	lsrs	r0, r7, #3
    5d24:	0767      	lsls	r7, r4, #29
    5d26:	4307      	orrs	r7, r0
    5d28:	2080      	movs	r0, #128	; 0x80
    5d2a:	08e4      	lsrs	r4, r4, #3
    5d2c:	0300      	lsls	r0, r0, #12
    5d2e:	4204      	tst	r4, r0
    5d30:	d0e7      	beq.n	5d02 <__aeabi_dadd+0x54e>
    5d32:	08cb      	lsrs	r3, r1, #3
    5d34:	4203      	tst	r3, r0
    5d36:	d1e4      	bne.n	5d02 <__aeabi_dadd+0x54e>
    5d38:	08d2      	lsrs	r2, r2, #3
    5d3a:	0749      	lsls	r1, r1, #29
    5d3c:	4311      	orrs	r1, r2
    5d3e:	000f      	movs	r7, r1
    5d40:	001c      	movs	r4, r3
    5d42:	e7de      	b.n	5d02 <__aeabi_dadd+0x54e>
    5d44:	2700      	movs	r7, #0
    5d46:	2400      	movs	r4, #0
    5d48:	e5d5      	b.n	58f6 <__aeabi_dadd+0x142>
    5d4a:	2100      	movs	r1, #0
    5d4c:	e76b      	b.n	5c26 <__aeabi_dadd+0x472>
    5d4e:	2500      	movs	r5, #0
    5d50:	2700      	movs	r7, #0
    5d52:	e5f3      	b.n	593c <__aeabi_dadd+0x188>
    5d54:	464e      	mov	r6, r9
    5d56:	0025      	movs	r5, r4
    5d58:	3e20      	subs	r6, #32
    5d5a:	40f5      	lsrs	r5, r6
    5d5c:	464b      	mov	r3, r9
    5d5e:	002e      	movs	r6, r5
    5d60:	2b20      	cmp	r3, #32
    5d62:	d02d      	beq.n	5dc0 <__aeabi_dadd+0x60c>
    5d64:	2540      	movs	r5, #64	; 0x40
    5d66:	1aed      	subs	r5, r5, r3
    5d68:	40ac      	lsls	r4, r5
    5d6a:	4327      	orrs	r7, r4
    5d6c:	1e7c      	subs	r4, r7, #1
    5d6e:	41a7      	sbcs	r7, r4
    5d70:	2400      	movs	r4, #0
    5d72:	4337      	orrs	r7, r6
    5d74:	e6c9      	b.n	5b0a <__aeabi_dadd+0x356>
    5d76:	2480      	movs	r4, #128	; 0x80
    5d78:	2500      	movs	r5, #0
    5d7a:	0324      	lsls	r4, r4, #12
    5d7c:	4e13      	ldr	r6, [pc, #76]	; (5dcc <__aeabi_dadd+0x618>)
    5d7e:	2700      	movs	r7, #0
    5d80:	e5dc      	b.n	593c <__aeabi_dadd+0x188>
    5d82:	4327      	orrs	r7, r4
    5d84:	1e7c      	subs	r4, r7, #1
    5d86:	41a7      	sbcs	r7, r4
    5d88:	2400      	movs	r4, #0
    5d8a:	e779      	b.n	5c80 <__aeabi_dadd+0x4cc>
    5d8c:	000c      	movs	r4, r1
    5d8e:	0017      	movs	r7, r2
    5d90:	4e0e      	ldr	r6, [pc, #56]	; (5dcc <__aeabi_dadd+0x618>)
    5d92:	e593      	b.n	58bc <__aeabi_dadd+0x108>
    5d94:	000c      	movs	r4, r1
    5d96:	0017      	movs	r7, r2
    5d98:	e590      	b.n	58bc <__aeabi_dadd+0x108>
    5d9a:	4656      	mov	r6, sl
    5d9c:	0023      	movs	r3, r4
    5d9e:	3e20      	subs	r6, #32
    5da0:	40f3      	lsrs	r3, r6
    5da2:	4699      	mov	r9, r3
    5da4:	4653      	mov	r3, sl
    5da6:	2b20      	cmp	r3, #32
    5da8:	d00e      	beq.n	5dc8 <__aeabi_dadd+0x614>
    5daa:	2340      	movs	r3, #64	; 0x40
    5dac:	4656      	mov	r6, sl
    5dae:	1b9b      	subs	r3, r3, r6
    5db0:	409c      	lsls	r4, r3
    5db2:	4327      	orrs	r7, r4
    5db4:	1e7c      	subs	r4, r7, #1
    5db6:	41a7      	sbcs	r7, r4
    5db8:	464b      	mov	r3, r9
    5dba:	2400      	movs	r4, #0
    5dbc:	431f      	orrs	r7, r3
    5dbe:	e75f      	b.n	5c80 <__aeabi_dadd+0x4cc>
    5dc0:	2400      	movs	r4, #0
    5dc2:	e7d2      	b.n	5d6a <__aeabi_dadd+0x5b6>
    5dc4:	0017      	movs	r7, r2
    5dc6:	e5b2      	b.n	592e <__aeabi_dadd+0x17a>
    5dc8:	2400      	movs	r4, #0
    5dca:	e7f2      	b.n	5db2 <__aeabi_dadd+0x5fe>
    5dcc:	000007ff 	.word	0x000007ff
    5dd0:	ff7fffff 	.word	0xff7fffff

00005dd4 <__aeabi_ddiv>:
    5dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5dd6:	4657      	mov	r7, sl
    5dd8:	4645      	mov	r5, r8
    5dda:	46de      	mov	lr, fp
    5ddc:	464e      	mov	r6, r9
    5dde:	b5e0      	push	{r5, r6, r7, lr}
    5de0:	004c      	lsls	r4, r1, #1
    5de2:	030e      	lsls	r6, r1, #12
    5de4:	b087      	sub	sp, #28
    5de6:	4683      	mov	fp, r0
    5de8:	4692      	mov	sl, r2
    5dea:	001d      	movs	r5, r3
    5dec:	4680      	mov	r8, r0
    5dee:	0b36      	lsrs	r6, r6, #12
    5df0:	0d64      	lsrs	r4, r4, #21
    5df2:	0fcf      	lsrs	r7, r1, #31
    5df4:	2c00      	cmp	r4, #0
    5df6:	d04f      	beq.n	5e98 <__aeabi_ddiv+0xc4>
    5df8:	4b6f      	ldr	r3, [pc, #444]	; (5fb8 <__aeabi_ddiv+0x1e4>)
    5dfa:	429c      	cmp	r4, r3
    5dfc:	d035      	beq.n	5e6a <__aeabi_ddiv+0x96>
    5dfe:	2380      	movs	r3, #128	; 0x80
    5e00:	0f42      	lsrs	r2, r0, #29
    5e02:	041b      	lsls	r3, r3, #16
    5e04:	00f6      	lsls	r6, r6, #3
    5e06:	4313      	orrs	r3, r2
    5e08:	4333      	orrs	r3, r6
    5e0a:	4699      	mov	r9, r3
    5e0c:	00c3      	lsls	r3, r0, #3
    5e0e:	4698      	mov	r8, r3
    5e10:	4b6a      	ldr	r3, [pc, #424]	; (5fbc <__aeabi_ddiv+0x1e8>)
    5e12:	2600      	movs	r6, #0
    5e14:	469c      	mov	ip, r3
    5e16:	2300      	movs	r3, #0
    5e18:	4464      	add	r4, ip
    5e1a:	9303      	str	r3, [sp, #12]
    5e1c:	032b      	lsls	r3, r5, #12
    5e1e:	0b1b      	lsrs	r3, r3, #12
    5e20:	469b      	mov	fp, r3
    5e22:	006b      	lsls	r3, r5, #1
    5e24:	0fed      	lsrs	r5, r5, #31
    5e26:	4650      	mov	r0, sl
    5e28:	0d5b      	lsrs	r3, r3, #21
    5e2a:	9501      	str	r5, [sp, #4]
    5e2c:	d05e      	beq.n	5eec <__aeabi_ddiv+0x118>
    5e2e:	4a62      	ldr	r2, [pc, #392]	; (5fb8 <__aeabi_ddiv+0x1e4>)
    5e30:	4293      	cmp	r3, r2
    5e32:	d053      	beq.n	5edc <__aeabi_ddiv+0x108>
    5e34:	465a      	mov	r2, fp
    5e36:	00d1      	lsls	r1, r2, #3
    5e38:	2280      	movs	r2, #128	; 0x80
    5e3a:	0f40      	lsrs	r0, r0, #29
    5e3c:	0412      	lsls	r2, r2, #16
    5e3e:	4302      	orrs	r2, r0
    5e40:	430a      	orrs	r2, r1
    5e42:	4693      	mov	fp, r2
    5e44:	4652      	mov	r2, sl
    5e46:	00d1      	lsls	r1, r2, #3
    5e48:	4a5c      	ldr	r2, [pc, #368]	; (5fbc <__aeabi_ddiv+0x1e8>)
    5e4a:	4694      	mov	ip, r2
    5e4c:	2200      	movs	r2, #0
    5e4e:	4463      	add	r3, ip
    5e50:	0038      	movs	r0, r7
    5e52:	4068      	eors	r0, r5
    5e54:	4684      	mov	ip, r0
    5e56:	9002      	str	r0, [sp, #8]
    5e58:	1ae4      	subs	r4, r4, r3
    5e5a:	4316      	orrs	r6, r2
    5e5c:	2e0f      	cmp	r6, #15
    5e5e:	d900      	bls.n	5e62 <__aeabi_ddiv+0x8e>
    5e60:	e0b4      	b.n	5fcc <__aeabi_ddiv+0x1f8>
    5e62:	4b57      	ldr	r3, [pc, #348]	; (5fc0 <__aeabi_ddiv+0x1ec>)
    5e64:	00b6      	lsls	r6, r6, #2
    5e66:	599b      	ldr	r3, [r3, r6]
    5e68:	469f      	mov	pc, r3
    5e6a:	0003      	movs	r3, r0
    5e6c:	4333      	orrs	r3, r6
    5e6e:	4699      	mov	r9, r3
    5e70:	d16c      	bne.n	5f4c <__aeabi_ddiv+0x178>
    5e72:	2300      	movs	r3, #0
    5e74:	4698      	mov	r8, r3
    5e76:	3302      	adds	r3, #2
    5e78:	2608      	movs	r6, #8
    5e7a:	9303      	str	r3, [sp, #12]
    5e7c:	e7ce      	b.n	5e1c <__aeabi_ddiv+0x48>
    5e7e:	46cb      	mov	fp, r9
    5e80:	4641      	mov	r1, r8
    5e82:	9a03      	ldr	r2, [sp, #12]
    5e84:	9701      	str	r7, [sp, #4]
    5e86:	2a02      	cmp	r2, #2
    5e88:	d165      	bne.n	5f56 <__aeabi_ddiv+0x182>
    5e8a:	9b01      	ldr	r3, [sp, #4]
    5e8c:	4c4a      	ldr	r4, [pc, #296]	; (5fb8 <__aeabi_ddiv+0x1e4>)
    5e8e:	469c      	mov	ip, r3
    5e90:	2300      	movs	r3, #0
    5e92:	2200      	movs	r2, #0
    5e94:	4698      	mov	r8, r3
    5e96:	e06b      	b.n	5f70 <__aeabi_ddiv+0x19c>
    5e98:	0003      	movs	r3, r0
    5e9a:	4333      	orrs	r3, r6
    5e9c:	4699      	mov	r9, r3
    5e9e:	d04e      	beq.n	5f3e <__aeabi_ddiv+0x16a>
    5ea0:	2e00      	cmp	r6, #0
    5ea2:	d100      	bne.n	5ea6 <__aeabi_ddiv+0xd2>
    5ea4:	e1bc      	b.n	6220 <__aeabi_ddiv+0x44c>
    5ea6:	0030      	movs	r0, r6
    5ea8:	f001 f94a 	bl	7140 <__clzsi2>
    5eac:	0003      	movs	r3, r0
    5eae:	3b0b      	subs	r3, #11
    5eb0:	2b1c      	cmp	r3, #28
    5eb2:	dd00      	ble.n	5eb6 <__aeabi_ddiv+0xe2>
    5eb4:	e1ac      	b.n	6210 <__aeabi_ddiv+0x43c>
    5eb6:	221d      	movs	r2, #29
    5eb8:	1ad3      	subs	r3, r2, r3
    5eba:	465a      	mov	r2, fp
    5ebc:	0001      	movs	r1, r0
    5ebe:	40da      	lsrs	r2, r3
    5ec0:	3908      	subs	r1, #8
    5ec2:	408e      	lsls	r6, r1
    5ec4:	0013      	movs	r3, r2
    5ec6:	4333      	orrs	r3, r6
    5ec8:	4699      	mov	r9, r3
    5eca:	465b      	mov	r3, fp
    5ecc:	408b      	lsls	r3, r1
    5ece:	4698      	mov	r8, r3
    5ed0:	2300      	movs	r3, #0
    5ed2:	4c3c      	ldr	r4, [pc, #240]	; (5fc4 <__aeabi_ddiv+0x1f0>)
    5ed4:	2600      	movs	r6, #0
    5ed6:	1a24      	subs	r4, r4, r0
    5ed8:	9303      	str	r3, [sp, #12]
    5eda:	e79f      	b.n	5e1c <__aeabi_ddiv+0x48>
    5edc:	4651      	mov	r1, sl
    5ede:	465a      	mov	r2, fp
    5ee0:	4311      	orrs	r1, r2
    5ee2:	d129      	bne.n	5f38 <__aeabi_ddiv+0x164>
    5ee4:	2200      	movs	r2, #0
    5ee6:	4693      	mov	fp, r2
    5ee8:	3202      	adds	r2, #2
    5eea:	e7b1      	b.n	5e50 <__aeabi_ddiv+0x7c>
    5eec:	4659      	mov	r1, fp
    5eee:	4301      	orrs	r1, r0
    5ef0:	d01e      	beq.n	5f30 <__aeabi_ddiv+0x15c>
    5ef2:	465b      	mov	r3, fp
    5ef4:	2b00      	cmp	r3, #0
    5ef6:	d100      	bne.n	5efa <__aeabi_ddiv+0x126>
    5ef8:	e19e      	b.n	6238 <__aeabi_ddiv+0x464>
    5efa:	4658      	mov	r0, fp
    5efc:	f001 f920 	bl	7140 <__clzsi2>
    5f00:	0003      	movs	r3, r0
    5f02:	3b0b      	subs	r3, #11
    5f04:	2b1c      	cmp	r3, #28
    5f06:	dd00      	ble.n	5f0a <__aeabi_ddiv+0x136>
    5f08:	e18f      	b.n	622a <__aeabi_ddiv+0x456>
    5f0a:	0002      	movs	r2, r0
    5f0c:	4659      	mov	r1, fp
    5f0e:	3a08      	subs	r2, #8
    5f10:	4091      	lsls	r1, r2
    5f12:	468b      	mov	fp, r1
    5f14:	211d      	movs	r1, #29
    5f16:	1acb      	subs	r3, r1, r3
    5f18:	4651      	mov	r1, sl
    5f1a:	40d9      	lsrs	r1, r3
    5f1c:	000b      	movs	r3, r1
    5f1e:	4659      	mov	r1, fp
    5f20:	430b      	orrs	r3, r1
    5f22:	4651      	mov	r1, sl
    5f24:	469b      	mov	fp, r3
    5f26:	4091      	lsls	r1, r2
    5f28:	4b26      	ldr	r3, [pc, #152]	; (5fc4 <__aeabi_ddiv+0x1f0>)
    5f2a:	2200      	movs	r2, #0
    5f2c:	1a1b      	subs	r3, r3, r0
    5f2e:	e78f      	b.n	5e50 <__aeabi_ddiv+0x7c>
    5f30:	2300      	movs	r3, #0
    5f32:	2201      	movs	r2, #1
    5f34:	469b      	mov	fp, r3
    5f36:	e78b      	b.n	5e50 <__aeabi_ddiv+0x7c>
    5f38:	4651      	mov	r1, sl
    5f3a:	2203      	movs	r2, #3
    5f3c:	e788      	b.n	5e50 <__aeabi_ddiv+0x7c>
    5f3e:	2300      	movs	r3, #0
    5f40:	4698      	mov	r8, r3
    5f42:	3301      	adds	r3, #1
    5f44:	2604      	movs	r6, #4
    5f46:	2400      	movs	r4, #0
    5f48:	9303      	str	r3, [sp, #12]
    5f4a:	e767      	b.n	5e1c <__aeabi_ddiv+0x48>
    5f4c:	2303      	movs	r3, #3
    5f4e:	46b1      	mov	r9, r6
    5f50:	9303      	str	r3, [sp, #12]
    5f52:	260c      	movs	r6, #12
    5f54:	e762      	b.n	5e1c <__aeabi_ddiv+0x48>
    5f56:	2a03      	cmp	r2, #3
    5f58:	d100      	bne.n	5f5c <__aeabi_ddiv+0x188>
    5f5a:	e25c      	b.n	6416 <__aeabi_ddiv+0x642>
    5f5c:	9b01      	ldr	r3, [sp, #4]
    5f5e:	2a01      	cmp	r2, #1
    5f60:	d000      	beq.n	5f64 <__aeabi_ddiv+0x190>
    5f62:	e1e4      	b.n	632e <__aeabi_ddiv+0x55a>
    5f64:	4013      	ands	r3, r2
    5f66:	469c      	mov	ip, r3
    5f68:	2300      	movs	r3, #0
    5f6a:	2400      	movs	r4, #0
    5f6c:	2200      	movs	r2, #0
    5f6e:	4698      	mov	r8, r3
    5f70:	2100      	movs	r1, #0
    5f72:	0312      	lsls	r2, r2, #12
    5f74:	0b13      	lsrs	r3, r2, #12
    5f76:	0d0a      	lsrs	r2, r1, #20
    5f78:	0512      	lsls	r2, r2, #20
    5f7a:	431a      	orrs	r2, r3
    5f7c:	0523      	lsls	r3, r4, #20
    5f7e:	4c12      	ldr	r4, [pc, #72]	; (5fc8 <__aeabi_ddiv+0x1f4>)
    5f80:	4640      	mov	r0, r8
    5f82:	4022      	ands	r2, r4
    5f84:	4313      	orrs	r3, r2
    5f86:	4662      	mov	r2, ip
    5f88:	005b      	lsls	r3, r3, #1
    5f8a:	07d2      	lsls	r2, r2, #31
    5f8c:	085b      	lsrs	r3, r3, #1
    5f8e:	4313      	orrs	r3, r2
    5f90:	0019      	movs	r1, r3
    5f92:	b007      	add	sp, #28
    5f94:	bc3c      	pop	{r2, r3, r4, r5}
    5f96:	4690      	mov	r8, r2
    5f98:	4699      	mov	r9, r3
    5f9a:	46a2      	mov	sl, r4
    5f9c:	46ab      	mov	fp, r5
    5f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5fa0:	2300      	movs	r3, #0
    5fa2:	2280      	movs	r2, #128	; 0x80
    5fa4:	469c      	mov	ip, r3
    5fa6:	0312      	lsls	r2, r2, #12
    5fa8:	4698      	mov	r8, r3
    5faa:	4c03      	ldr	r4, [pc, #12]	; (5fb8 <__aeabi_ddiv+0x1e4>)
    5fac:	e7e0      	b.n	5f70 <__aeabi_ddiv+0x19c>
    5fae:	2300      	movs	r3, #0
    5fb0:	4c01      	ldr	r4, [pc, #4]	; (5fb8 <__aeabi_ddiv+0x1e4>)
    5fb2:	2200      	movs	r2, #0
    5fb4:	4698      	mov	r8, r3
    5fb6:	e7db      	b.n	5f70 <__aeabi_ddiv+0x19c>
    5fb8:	000007ff 	.word	0x000007ff
    5fbc:	fffffc01 	.word	0xfffffc01
    5fc0:	000086d4 	.word	0x000086d4
    5fc4:	fffffc0d 	.word	0xfffffc0d
    5fc8:	800fffff 	.word	0x800fffff
    5fcc:	45d9      	cmp	r9, fp
    5fce:	d900      	bls.n	5fd2 <__aeabi_ddiv+0x1fe>
    5fd0:	e139      	b.n	6246 <__aeabi_ddiv+0x472>
    5fd2:	d100      	bne.n	5fd6 <__aeabi_ddiv+0x202>
    5fd4:	e134      	b.n	6240 <__aeabi_ddiv+0x46c>
    5fd6:	2300      	movs	r3, #0
    5fd8:	4646      	mov	r6, r8
    5fda:	464d      	mov	r5, r9
    5fdc:	469a      	mov	sl, r3
    5fde:	3c01      	subs	r4, #1
    5fe0:	465b      	mov	r3, fp
    5fe2:	0e0a      	lsrs	r2, r1, #24
    5fe4:	021b      	lsls	r3, r3, #8
    5fe6:	431a      	orrs	r2, r3
    5fe8:	020b      	lsls	r3, r1, #8
    5fea:	0c17      	lsrs	r7, r2, #16
    5fec:	9303      	str	r3, [sp, #12]
    5fee:	0413      	lsls	r3, r2, #16
    5ff0:	0c1b      	lsrs	r3, r3, #16
    5ff2:	0039      	movs	r1, r7
    5ff4:	0028      	movs	r0, r5
    5ff6:	4690      	mov	r8, r2
    5ff8:	9301      	str	r3, [sp, #4]
    5ffa:	f7ff fb07 	bl	560c <__udivsi3>
    5ffe:	0002      	movs	r2, r0
    6000:	9b01      	ldr	r3, [sp, #4]
    6002:	4683      	mov	fp, r0
    6004:	435a      	muls	r2, r3
    6006:	0028      	movs	r0, r5
    6008:	0039      	movs	r1, r7
    600a:	4691      	mov	r9, r2
    600c:	f7ff fb84 	bl	5718 <__aeabi_uidivmod>
    6010:	0c35      	lsrs	r5, r6, #16
    6012:	0409      	lsls	r1, r1, #16
    6014:	430d      	orrs	r5, r1
    6016:	45a9      	cmp	r9, r5
    6018:	d90d      	bls.n	6036 <__aeabi_ddiv+0x262>
    601a:	465b      	mov	r3, fp
    601c:	4445      	add	r5, r8
    601e:	3b01      	subs	r3, #1
    6020:	45a8      	cmp	r8, r5
    6022:	d900      	bls.n	6026 <__aeabi_ddiv+0x252>
    6024:	e13a      	b.n	629c <__aeabi_ddiv+0x4c8>
    6026:	45a9      	cmp	r9, r5
    6028:	d800      	bhi.n	602c <__aeabi_ddiv+0x258>
    602a:	e137      	b.n	629c <__aeabi_ddiv+0x4c8>
    602c:	2302      	movs	r3, #2
    602e:	425b      	negs	r3, r3
    6030:	469c      	mov	ip, r3
    6032:	4445      	add	r5, r8
    6034:	44e3      	add	fp, ip
    6036:	464b      	mov	r3, r9
    6038:	1aeb      	subs	r3, r5, r3
    603a:	0039      	movs	r1, r7
    603c:	0018      	movs	r0, r3
    603e:	9304      	str	r3, [sp, #16]
    6040:	f7ff fae4 	bl	560c <__udivsi3>
    6044:	9b01      	ldr	r3, [sp, #4]
    6046:	0005      	movs	r5, r0
    6048:	4343      	muls	r3, r0
    604a:	0039      	movs	r1, r7
    604c:	9804      	ldr	r0, [sp, #16]
    604e:	4699      	mov	r9, r3
    6050:	f7ff fb62 	bl	5718 <__aeabi_uidivmod>
    6054:	0433      	lsls	r3, r6, #16
    6056:	0409      	lsls	r1, r1, #16
    6058:	0c1b      	lsrs	r3, r3, #16
    605a:	430b      	orrs	r3, r1
    605c:	4599      	cmp	r9, r3
    605e:	d909      	bls.n	6074 <__aeabi_ddiv+0x2a0>
    6060:	4443      	add	r3, r8
    6062:	1e6a      	subs	r2, r5, #1
    6064:	4598      	cmp	r8, r3
    6066:	d900      	bls.n	606a <__aeabi_ddiv+0x296>
    6068:	e11a      	b.n	62a0 <__aeabi_ddiv+0x4cc>
    606a:	4599      	cmp	r9, r3
    606c:	d800      	bhi.n	6070 <__aeabi_ddiv+0x29c>
    606e:	e117      	b.n	62a0 <__aeabi_ddiv+0x4cc>
    6070:	3d02      	subs	r5, #2
    6072:	4443      	add	r3, r8
    6074:	464a      	mov	r2, r9
    6076:	1a9b      	subs	r3, r3, r2
    6078:	465a      	mov	r2, fp
    607a:	0412      	lsls	r2, r2, #16
    607c:	432a      	orrs	r2, r5
    607e:	9903      	ldr	r1, [sp, #12]
    6080:	4693      	mov	fp, r2
    6082:	0c10      	lsrs	r0, r2, #16
    6084:	0c0a      	lsrs	r2, r1, #16
    6086:	4691      	mov	r9, r2
    6088:	0409      	lsls	r1, r1, #16
    608a:	465a      	mov	r2, fp
    608c:	0c09      	lsrs	r1, r1, #16
    608e:	464e      	mov	r6, r9
    6090:	000d      	movs	r5, r1
    6092:	0412      	lsls	r2, r2, #16
    6094:	0c12      	lsrs	r2, r2, #16
    6096:	4345      	muls	r5, r0
    6098:	9105      	str	r1, [sp, #20]
    609a:	4351      	muls	r1, r2
    609c:	4372      	muls	r2, r6
    609e:	4370      	muls	r0, r6
    60a0:	1952      	adds	r2, r2, r5
    60a2:	0c0e      	lsrs	r6, r1, #16
    60a4:	18b2      	adds	r2, r6, r2
    60a6:	4295      	cmp	r5, r2
    60a8:	d903      	bls.n	60b2 <__aeabi_ddiv+0x2de>
    60aa:	2580      	movs	r5, #128	; 0x80
    60ac:	026d      	lsls	r5, r5, #9
    60ae:	46ac      	mov	ip, r5
    60b0:	4460      	add	r0, ip
    60b2:	0c15      	lsrs	r5, r2, #16
    60b4:	0409      	lsls	r1, r1, #16
    60b6:	0412      	lsls	r2, r2, #16
    60b8:	0c09      	lsrs	r1, r1, #16
    60ba:	1828      	adds	r0, r5, r0
    60bc:	1852      	adds	r2, r2, r1
    60be:	4283      	cmp	r3, r0
    60c0:	d200      	bcs.n	60c4 <__aeabi_ddiv+0x2f0>
    60c2:	e0ce      	b.n	6262 <__aeabi_ddiv+0x48e>
    60c4:	d100      	bne.n	60c8 <__aeabi_ddiv+0x2f4>
    60c6:	e0c8      	b.n	625a <__aeabi_ddiv+0x486>
    60c8:	1a1d      	subs	r5, r3, r0
    60ca:	4653      	mov	r3, sl
    60cc:	1a9e      	subs	r6, r3, r2
    60ce:	45b2      	cmp	sl, r6
    60d0:	4192      	sbcs	r2, r2
    60d2:	4252      	negs	r2, r2
    60d4:	1aab      	subs	r3, r5, r2
    60d6:	469a      	mov	sl, r3
    60d8:	4598      	cmp	r8, r3
    60da:	d100      	bne.n	60de <__aeabi_ddiv+0x30a>
    60dc:	e117      	b.n	630e <__aeabi_ddiv+0x53a>
    60de:	0039      	movs	r1, r7
    60e0:	0018      	movs	r0, r3
    60e2:	f7ff fa93 	bl	560c <__udivsi3>
    60e6:	9b01      	ldr	r3, [sp, #4]
    60e8:	0005      	movs	r5, r0
    60ea:	4343      	muls	r3, r0
    60ec:	0039      	movs	r1, r7
    60ee:	4650      	mov	r0, sl
    60f0:	9304      	str	r3, [sp, #16]
    60f2:	f7ff fb11 	bl	5718 <__aeabi_uidivmod>
    60f6:	9804      	ldr	r0, [sp, #16]
    60f8:	040b      	lsls	r3, r1, #16
    60fa:	0c31      	lsrs	r1, r6, #16
    60fc:	4319      	orrs	r1, r3
    60fe:	4288      	cmp	r0, r1
    6100:	d909      	bls.n	6116 <__aeabi_ddiv+0x342>
    6102:	4441      	add	r1, r8
    6104:	1e6b      	subs	r3, r5, #1
    6106:	4588      	cmp	r8, r1
    6108:	d900      	bls.n	610c <__aeabi_ddiv+0x338>
    610a:	e107      	b.n	631c <__aeabi_ddiv+0x548>
    610c:	4288      	cmp	r0, r1
    610e:	d800      	bhi.n	6112 <__aeabi_ddiv+0x33e>
    6110:	e104      	b.n	631c <__aeabi_ddiv+0x548>
    6112:	3d02      	subs	r5, #2
    6114:	4441      	add	r1, r8
    6116:	9b04      	ldr	r3, [sp, #16]
    6118:	1acb      	subs	r3, r1, r3
    611a:	0018      	movs	r0, r3
    611c:	0039      	movs	r1, r7
    611e:	9304      	str	r3, [sp, #16]
    6120:	f7ff fa74 	bl	560c <__udivsi3>
    6124:	9b01      	ldr	r3, [sp, #4]
    6126:	4682      	mov	sl, r0
    6128:	4343      	muls	r3, r0
    612a:	0039      	movs	r1, r7
    612c:	9804      	ldr	r0, [sp, #16]
    612e:	9301      	str	r3, [sp, #4]
    6130:	f7ff faf2 	bl	5718 <__aeabi_uidivmod>
    6134:	9801      	ldr	r0, [sp, #4]
    6136:	040b      	lsls	r3, r1, #16
    6138:	0431      	lsls	r1, r6, #16
    613a:	0c09      	lsrs	r1, r1, #16
    613c:	4319      	orrs	r1, r3
    613e:	4288      	cmp	r0, r1
    6140:	d90d      	bls.n	615e <__aeabi_ddiv+0x38a>
    6142:	4653      	mov	r3, sl
    6144:	4441      	add	r1, r8
    6146:	3b01      	subs	r3, #1
    6148:	4588      	cmp	r8, r1
    614a:	d900      	bls.n	614e <__aeabi_ddiv+0x37a>
    614c:	e0e8      	b.n	6320 <__aeabi_ddiv+0x54c>
    614e:	4288      	cmp	r0, r1
    6150:	d800      	bhi.n	6154 <__aeabi_ddiv+0x380>
    6152:	e0e5      	b.n	6320 <__aeabi_ddiv+0x54c>
    6154:	2302      	movs	r3, #2
    6156:	425b      	negs	r3, r3
    6158:	469c      	mov	ip, r3
    615a:	4441      	add	r1, r8
    615c:	44e2      	add	sl, ip
    615e:	9b01      	ldr	r3, [sp, #4]
    6160:	042d      	lsls	r5, r5, #16
    6162:	1ace      	subs	r6, r1, r3
    6164:	4651      	mov	r1, sl
    6166:	4329      	orrs	r1, r5
    6168:	9d05      	ldr	r5, [sp, #20]
    616a:	464f      	mov	r7, r9
    616c:	002a      	movs	r2, r5
    616e:	040b      	lsls	r3, r1, #16
    6170:	0c08      	lsrs	r0, r1, #16
    6172:	0c1b      	lsrs	r3, r3, #16
    6174:	435a      	muls	r2, r3
    6176:	4345      	muls	r5, r0
    6178:	437b      	muls	r3, r7
    617a:	4378      	muls	r0, r7
    617c:	195b      	adds	r3, r3, r5
    617e:	0c17      	lsrs	r7, r2, #16
    6180:	18fb      	adds	r3, r7, r3
    6182:	429d      	cmp	r5, r3
    6184:	d903      	bls.n	618e <__aeabi_ddiv+0x3ba>
    6186:	2580      	movs	r5, #128	; 0x80
    6188:	026d      	lsls	r5, r5, #9
    618a:	46ac      	mov	ip, r5
    618c:	4460      	add	r0, ip
    618e:	0c1d      	lsrs	r5, r3, #16
    6190:	0412      	lsls	r2, r2, #16
    6192:	041b      	lsls	r3, r3, #16
    6194:	0c12      	lsrs	r2, r2, #16
    6196:	1828      	adds	r0, r5, r0
    6198:	189b      	adds	r3, r3, r2
    619a:	4286      	cmp	r6, r0
    619c:	d200      	bcs.n	61a0 <__aeabi_ddiv+0x3cc>
    619e:	e093      	b.n	62c8 <__aeabi_ddiv+0x4f4>
    61a0:	d100      	bne.n	61a4 <__aeabi_ddiv+0x3d0>
    61a2:	e08e      	b.n	62c2 <__aeabi_ddiv+0x4ee>
    61a4:	2301      	movs	r3, #1
    61a6:	4319      	orrs	r1, r3
    61a8:	4ba0      	ldr	r3, [pc, #640]	; (642c <__aeabi_ddiv+0x658>)
    61aa:	18e3      	adds	r3, r4, r3
    61ac:	2b00      	cmp	r3, #0
    61ae:	dc00      	bgt.n	61b2 <__aeabi_ddiv+0x3de>
    61b0:	e099      	b.n	62e6 <__aeabi_ddiv+0x512>
    61b2:	074a      	lsls	r2, r1, #29
    61b4:	d000      	beq.n	61b8 <__aeabi_ddiv+0x3e4>
    61b6:	e09e      	b.n	62f6 <__aeabi_ddiv+0x522>
    61b8:	465a      	mov	r2, fp
    61ba:	01d2      	lsls	r2, r2, #7
    61bc:	d506      	bpl.n	61cc <__aeabi_ddiv+0x3f8>
    61be:	465a      	mov	r2, fp
    61c0:	4b9b      	ldr	r3, [pc, #620]	; (6430 <__aeabi_ddiv+0x65c>)
    61c2:	401a      	ands	r2, r3
    61c4:	2380      	movs	r3, #128	; 0x80
    61c6:	4693      	mov	fp, r2
    61c8:	00db      	lsls	r3, r3, #3
    61ca:	18e3      	adds	r3, r4, r3
    61cc:	4a99      	ldr	r2, [pc, #612]	; (6434 <__aeabi_ddiv+0x660>)
    61ce:	4293      	cmp	r3, r2
    61d0:	dd68      	ble.n	62a4 <__aeabi_ddiv+0x4d0>
    61d2:	2301      	movs	r3, #1
    61d4:	9a02      	ldr	r2, [sp, #8]
    61d6:	4c98      	ldr	r4, [pc, #608]	; (6438 <__aeabi_ddiv+0x664>)
    61d8:	401a      	ands	r2, r3
    61da:	2300      	movs	r3, #0
    61dc:	4694      	mov	ip, r2
    61de:	4698      	mov	r8, r3
    61e0:	2200      	movs	r2, #0
    61e2:	e6c5      	b.n	5f70 <__aeabi_ddiv+0x19c>
    61e4:	2280      	movs	r2, #128	; 0x80
    61e6:	464b      	mov	r3, r9
    61e8:	0312      	lsls	r2, r2, #12
    61ea:	4213      	tst	r3, r2
    61ec:	d00a      	beq.n	6204 <__aeabi_ddiv+0x430>
    61ee:	465b      	mov	r3, fp
    61f0:	4213      	tst	r3, r2
    61f2:	d106      	bne.n	6202 <__aeabi_ddiv+0x42e>
    61f4:	431a      	orrs	r2, r3
    61f6:	0312      	lsls	r2, r2, #12
    61f8:	0b12      	lsrs	r2, r2, #12
    61fa:	46ac      	mov	ip, r5
    61fc:	4688      	mov	r8, r1
    61fe:	4c8e      	ldr	r4, [pc, #568]	; (6438 <__aeabi_ddiv+0x664>)
    6200:	e6b6      	b.n	5f70 <__aeabi_ddiv+0x19c>
    6202:	464b      	mov	r3, r9
    6204:	431a      	orrs	r2, r3
    6206:	0312      	lsls	r2, r2, #12
    6208:	0b12      	lsrs	r2, r2, #12
    620a:	46bc      	mov	ip, r7
    620c:	4c8a      	ldr	r4, [pc, #552]	; (6438 <__aeabi_ddiv+0x664>)
    620e:	e6af      	b.n	5f70 <__aeabi_ddiv+0x19c>
    6210:	0003      	movs	r3, r0
    6212:	465a      	mov	r2, fp
    6214:	3b28      	subs	r3, #40	; 0x28
    6216:	409a      	lsls	r2, r3
    6218:	2300      	movs	r3, #0
    621a:	4691      	mov	r9, r2
    621c:	4698      	mov	r8, r3
    621e:	e657      	b.n	5ed0 <__aeabi_ddiv+0xfc>
    6220:	4658      	mov	r0, fp
    6222:	f000 ff8d 	bl	7140 <__clzsi2>
    6226:	3020      	adds	r0, #32
    6228:	e640      	b.n	5eac <__aeabi_ddiv+0xd8>
    622a:	0003      	movs	r3, r0
    622c:	4652      	mov	r2, sl
    622e:	3b28      	subs	r3, #40	; 0x28
    6230:	409a      	lsls	r2, r3
    6232:	2100      	movs	r1, #0
    6234:	4693      	mov	fp, r2
    6236:	e677      	b.n	5f28 <__aeabi_ddiv+0x154>
    6238:	f000 ff82 	bl	7140 <__clzsi2>
    623c:	3020      	adds	r0, #32
    623e:	e65f      	b.n	5f00 <__aeabi_ddiv+0x12c>
    6240:	4588      	cmp	r8, r1
    6242:	d200      	bcs.n	6246 <__aeabi_ddiv+0x472>
    6244:	e6c7      	b.n	5fd6 <__aeabi_ddiv+0x202>
    6246:	464b      	mov	r3, r9
    6248:	07de      	lsls	r6, r3, #31
    624a:	085d      	lsrs	r5, r3, #1
    624c:	4643      	mov	r3, r8
    624e:	085b      	lsrs	r3, r3, #1
    6250:	431e      	orrs	r6, r3
    6252:	4643      	mov	r3, r8
    6254:	07db      	lsls	r3, r3, #31
    6256:	469a      	mov	sl, r3
    6258:	e6c2      	b.n	5fe0 <__aeabi_ddiv+0x20c>
    625a:	2500      	movs	r5, #0
    625c:	4592      	cmp	sl, r2
    625e:	d300      	bcc.n	6262 <__aeabi_ddiv+0x48e>
    6260:	e733      	b.n	60ca <__aeabi_ddiv+0x2f6>
    6262:	9e03      	ldr	r6, [sp, #12]
    6264:	4659      	mov	r1, fp
    6266:	46b4      	mov	ip, r6
    6268:	44e2      	add	sl, ip
    626a:	45b2      	cmp	sl, r6
    626c:	41ad      	sbcs	r5, r5
    626e:	426d      	negs	r5, r5
    6270:	4445      	add	r5, r8
    6272:	18eb      	adds	r3, r5, r3
    6274:	3901      	subs	r1, #1
    6276:	4598      	cmp	r8, r3
    6278:	d207      	bcs.n	628a <__aeabi_ddiv+0x4b6>
    627a:	4298      	cmp	r0, r3
    627c:	d900      	bls.n	6280 <__aeabi_ddiv+0x4ac>
    627e:	e07f      	b.n	6380 <__aeabi_ddiv+0x5ac>
    6280:	d100      	bne.n	6284 <__aeabi_ddiv+0x4b0>
    6282:	e0bc      	b.n	63fe <__aeabi_ddiv+0x62a>
    6284:	1a1d      	subs	r5, r3, r0
    6286:	468b      	mov	fp, r1
    6288:	e71f      	b.n	60ca <__aeabi_ddiv+0x2f6>
    628a:	4598      	cmp	r8, r3
    628c:	d1fa      	bne.n	6284 <__aeabi_ddiv+0x4b0>
    628e:	9d03      	ldr	r5, [sp, #12]
    6290:	4555      	cmp	r5, sl
    6292:	d9f2      	bls.n	627a <__aeabi_ddiv+0x4a6>
    6294:	4643      	mov	r3, r8
    6296:	468b      	mov	fp, r1
    6298:	1a1d      	subs	r5, r3, r0
    629a:	e716      	b.n	60ca <__aeabi_ddiv+0x2f6>
    629c:	469b      	mov	fp, r3
    629e:	e6ca      	b.n	6036 <__aeabi_ddiv+0x262>
    62a0:	0015      	movs	r5, r2
    62a2:	e6e7      	b.n	6074 <__aeabi_ddiv+0x2a0>
    62a4:	465a      	mov	r2, fp
    62a6:	08c9      	lsrs	r1, r1, #3
    62a8:	0752      	lsls	r2, r2, #29
    62aa:	430a      	orrs	r2, r1
    62ac:	055b      	lsls	r3, r3, #21
    62ae:	4690      	mov	r8, r2
    62b0:	0d5c      	lsrs	r4, r3, #21
    62b2:	465a      	mov	r2, fp
    62b4:	2301      	movs	r3, #1
    62b6:	9902      	ldr	r1, [sp, #8]
    62b8:	0252      	lsls	r2, r2, #9
    62ba:	4019      	ands	r1, r3
    62bc:	0b12      	lsrs	r2, r2, #12
    62be:	468c      	mov	ip, r1
    62c0:	e656      	b.n	5f70 <__aeabi_ddiv+0x19c>
    62c2:	2b00      	cmp	r3, #0
    62c4:	d100      	bne.n	62c8 <__aeabi_ddiv+0x4f4>
    62c6:	e76f      	b.n	61a8 <__aeabi_ddiv+0x3d4>
    62c8:	4446      	add	r6, r8
    62ca:	1e4a      	subs	r2, r1, #1
    62cc:	45b0      	cmp	r8, r6
    62ce:	d929      	bls.n	6324 <__aeabi_ddiv+0x550>
    62d0:	0011      	movs	r1, r2
    62d2:	4286      	cmp	r6, r0
    62d4:	d000      	beq.n	62d8 <__aeabi_ddiv+0x504>
    62d6:	e765      	b.n	61a4 <__aeabi_ddiv+0x3d0>
    62d8:	9a03      	ldr	r2, [sp, #12]
    62da:	4293      	cmp	r3, r2
    62dc:	d000      	beq.n	62e0 <__aeabi_ddiv+0x50c>
    62de:	e761      	b.n	61a4 <__aeabi_ddiv+0x3d0>
    62e0:	e762      	b.n	61a8 <__aeabi_ddiv+0x3d4>
    62e2:	2101      	movs	r1, #1
    62e4:	4249      	negs	r1, r1
    62e6:	2001      	movs	r0, #1
    62e8:	1ac2      	subs	r2, r0, r3
    62ea:	2a38      	cmp	r2, #56	; 0x38
    62ec:	dd21      	ble.n	6332 <__aeabi_ddiv+0x55e>
    62ee:	9b02      	ldr	r3, [sp, #8]
    62f0:	4003      	ands	r3, r0
    62f2:	469c      	mov	ip, r3
    62f4:	e638      	b.n	5f68 <__aeabi_ddiv+0x194>
    62f6:	220f      	movs	r2, #15
    62f8:	400a      	ands	r2, r1
    62fa:	2a04      	cmp	r2, #4
    62fc:	d100      	bne.n	6300 <__aeabi_ddiv+0x52c>
    62fe:	e75b      	b.n	61b8 <__aeabi_ddiv+0x3e4>
    6300:	000a      	movs	r2, r1
    6302:	1d11      	adds	r1, r2, #4
    6304:	4291      	cmp	r1, r2
    6306:	4192      	sbcs	r2, r2
    6308:	4252      	negs	r2, r2
    630a:	4493      	add	fp, r2
    630c:	e754      	b.n	61b8 <__aeabi_ddiv+0x3e4>
    630e:	4b47      	ldr	r3, [pc, #284]	; (642c <__aeabi_ddiv+0x658>)
    6310:	18e3      	adds	r3, r4, r3
    6312:	2b00      	cmp	r3, #0
    6314:	dde5      	ble.n	62e2 <__aeabi_ddiv+0x50e>
    6316:	2201      	movs	r2, #1
    6318:	4252      	negs	r2, r2
    631a:	e7f2      	b.n	6302 <__aeabi_ddiv+0x52e>
    631c:	001d      	movs	r5, r3
    631e:	e6fa      	b.n	6116 <__aeabi_ddiv+0x342>
    6320:	469a      	mov	sl, r3
    6322:	e71c      	b.n	615e <__aeabi_ddiv+0x38a>
    6324:	42b0      	cmp	r0, r6
    6326:	d839      	bhi.n	639c <__aeabi_ddiv+0x5c8>
    6328:	d06e      	beq.n	6408 <__aeabi_ddiv+0x634>
    632a:	0011      	movs	r1, r2
    632c:	e73a      	b.n	61a4 <__aeabi_ddiv+0x3d0>
    632e:	9302      	str	r3, [sp, #8]
    6330:	e73a      	b.n	61a8 <__aeabi_ddiv+0x3d4>
    6332:	2a1f      	cmp	r2, #31
    6334:	dc3c      	bgt.n	63b0 <__aeabi_ddiv+0x5dc>
    6336:	2320      	movs	r3, #32
    6338:	1a9b      	subs	r3, r3, r2
    633a:	000c      	movs	r4, r1
    633c:	4658      	mov	r0, fp
    633e:	4099      	lsls	r1, r3
    6340:	4098      	lsls	r0, r3
    6342:	1e4b      	subs	r3, r1, #1
    6344:	4199      	sbcs	r1, r3
    6346:	465b      	mov	r3, fp
    6348:	40d4      	lsrs	r4, r2
    634a:	40d3      	lsrs	r3, r2
    634c:	4320      	orrs	r0, r4
    634e:	4308      	orrs	r0, r1
    6350:	001a      	movs	r2, r3
    6352:	0743      	lsls	r3, r0, #29
    6354:	d009      	beq.n	636a <__aeabi_ddiv+0x596>
    6356:	230f      	movs	r3, #15
    6358:	4003      	ands	r3, r0
    635a:	2b04      	cmp	r3, #4
    635c:	d005      	beq.n	636a <__aeabi_ddiv+0x596>
    635e:	0001      	movs	r1, r0
    6360:	1d08      	adds	r0, r1, #4
    6362:	4288      	cmp	r0, r1
    6364:	419b      	sbcs	r3, r3
    6366:	425b      	negs	r3, r3
    6368:	18d2      	adds	r2, r2, r3
    636a:	0213      	lsls	r3, r2, #8
    636c:	d53a      	bpl.n	63e4 <__aeabi_ddiv+0x610>
    636e:	2301      	movs	r3, #1
    6370:	9a02      	ldr	r2, [sp, #8]
    6372:	2401      	movs	r4, #1
    6374:	401a      	ands	r2, r3
    6376:	2300      	movs	r3, #0
    6378:	4694      	mov	ip, r2
    637a:	4698      	mov	r8, r3
    637c:	2200      	movs	r2, #0
    637e:	e5f7      	b.n	5f70 <__aeabi_ddiv+0x19c>
    6380:	2102      	movs	r1, #2
    6382:	4249      	negs	r1, r1
    6384:	468c      	mov	ip, r1
    6386:	9d03      	ldr	r5, [sp, #12]
    6388:	44e3      	add	fp, ip
    638a:	46ac      	mov	ip, r5
    638c:	44e2      	add	sl, ip
    638e:	45aa      	cmp	sl, r5
    6390:	41ad      	sbcs	r5, r5
    6392:	426d      	negs	r5, r5
    6394:	4445      	add	r5, r8
    6396:	18ed      	adds	r5, r5, r3
    6398:	1a2d      	subs	r5, r5, r0
    639a:	e696      	b.n	60ca <__aeabi_ddiv+0x2f6>
    639c:	1e8a      	subs	r2, r1, #2
    639e:	9903      	ldr	r1, [sp, #12]
    63a0:	004d      	lsls	r5, r1, #1
    63a2:	428d      	cmp	r5, r1
    63a4:	4189      	sbcs	r1, r1
    63a6:	4249      	negs	r1, r1
    63a8:	4441      	add	r1, r8
    63aa:	1876      	adds	r6, r6, r1
    63ac:	9503      	str	r5, [sp, #12]
    63ae:	e78f      	b.n	62d0 <__aeabi_ddiv+0x4fc>
    63b0:	201f      	movs	r0, #31
    63b2:	4240      	negs	r0, r0
    63b4:	1ac3      	subs	r3, r0, r3
    63b6:	4658      	mov	r0, fp
    63b8:	40d8      	lsrs	r0, r3
    63ba:	0003      	movs	r3, r0
    63bc:	2a20      	cmp	r2, #32
    63be:	d028      	beq.n	6412 <__aeabi_ddiv+0x63e>
    63c0:	2040      	movs	r0, #64	; 0x40
    63c2:	465d      	mov	r5, fp
    63c4:	1a82      	subs	r2, r0, r2
    63c6:	4095      	lsls	r5, r2
    63c8:	4329      	orrs	r1, r5
    63ca:	1e4a      	subs	r2, r1, #1
    63cc:	4191      	sbcs	r1, r2
    63ce:	4319      	orrs	r1, r3
    63d0:	2307      	movs	r3, #7
    63d2:	2200      	movs	r2, #0
    63d4:	400b      	ands	r3, r1
    63d6:	d009      	beq.n	63ec <__aeabi_ddiv+0x618>
    63d8:	230f      	movs	r3, #15
    63da:	2200      	movs	r2, #0
    63dc:	400b      	ands	r3, r1
    63de:	0008      	movs	r0, r1
    63e0:	2b04      	cmp	r3, #4
    63e2:	d1bd      	bne.n	6360 <__aeabi_ddiv+0x58c>
    63e4:	0001      	movs	r1, r0
    63e6:	0753      	lsls	r3, r2, #29
    63e8:	0252      	lsls	r2, r2, #9
    63ea:	0b12      	lsrs	r2, r2, #12
    63ec:	08c9      	lsrs	r1, r1, #3
    63ee:	4319      	orrs	r1, r3
    63f0:	2301      	movs	r3, #1
    63f2:	4688      	mov	r8, r1
    63f4:	9902      	ldr	r1, [sp, #8]
    63f6:	2400      	movs	r4, #0
    63f8:	4019      	ands	r1, r3
    63fa:	468c      	mov	ip, r1
    63fc:	e5b8      	b.n	5f70 <__aeabi_ddiv+0x19c>
    63fe:	4552      	cmp	r2, sl
    6400:	d8be      	bhi.n	6380 <__aeabi_ddiv+0x5ac>
    6402:	468b      	mov	fp, r1
    6404:	2500      	movs	r5, #0
    6406:	e660      	b.n	60ca <__aeabi_ddiv+0x2f6>
    6408:	9d03      	ldr	r5, [sp, #12]
    640a:	429d      	cmp	r5, r3
    640c:	d3c6      	bcc.n	639c <__aeabi_ddiv+0x5c8>
    640e:	0011      	movs	r1, r2
    6410:	e762      	b.n	62d8 <__aeabi_ddiv+0x504>
    6412:	2500      	movs	r5, #0
    6414:	e7d8      	b.n	63c8 <__aeabi_ddiv+0x5f4>
    6416:	2280      	movs	r2, #128	; 0x80
    6418:	465b      	mov	r3, fp
    641a:	0312      	lsls	r2, r2, #12
    641c:	431a      	orrs	r2, r3
    641e:	9b01      	ldr	r3, [sp, #4]
    6420:	0312      	lsls	r2, r2, #12
    6422:	0b12      	lsrs	r2, r2, #12
    6424:	469c      	mov	ip, r3
    6426:	4688      	mov	r8, r1
    6428:	4c03      	ldr	r4, [pc, #12]	; (6438 <__aeabi_ddiv+0x664>)
    642a:	e5a1      	b.n	5f70 <__aeabi_ddiv+0x19c>
    642c:	000003ff 	.word	0x000003ff
    6430:	feffffff 	.word	0xfeffffff
    6434:	000007fe 	.word	0x000007fe
    6438:	000007ff 	.word	0x000007ff

0000643c <__aeabi_dmul>:
    643c:	b5f0      	push	{r4, r5, r6, r7, lr}
    643e:	4657      	mov	r7, sl
    6440:	4645      	mov	r5, r8
    6442:	46de      	mov	lr, fp
    6444:	464e      	mov	r6, r9
    6446:	b5e0      	push	{r5, r6, r7, lr}
    6448:	030c      	lsls	r4, r1, #12
    644a:	4698      	mov	r8, r3
    644c:	004e      	lsls	r6, r1, #1
    644e:	0b23      	lsrs	r3, r4, #12
    6450:	b087      	sub	sp, #28
    6452:	0007      	movs	r7, r0
    6454:	4692      	mov	sl, r2
    6456:	469b      	mov	fp, r3
    6458:	0d76      	lsrs	r6, r6, #21
    645a:	0fcd      	lsrs	r5, r1, #31
    645c:	2e00      	cmp	r6, #0
    645e:	d06b      	beq.n	6538 <__aeabi_dmul+0xfc>
    6460:	4b6d      	ldr	r3, [pc, #436]	; (6618 <__aeabi_dmul+0x1dc>)
    6462:	429e      	cmp	r6, r3
    6464:	d035      	beq.n	64d2 <__aeabi_dmul+0x96>
    6466:	2480      	movs	r4, #128	; 0x80
    6468:	465b      	mov	r3, fp
    646a:	0f42      	lsrs	r2, r0, #29
    646c:	0424      	lsls	r4, r4, #16
    646e:	00db      	lsls	r3, r3, #3
    6470:	4314      	orrs	r4, r2
    6472:	431c      	orrs	r4, r3
    6474:	00c3      	lsls	r3, r0, #3
    6476:	4699      	mov	r9, r3
    6478:	4b68      	ldr	r3, [pc, #416]	; (661c <__aeabi_dmul+0x1e0>)
    647a:	46a3      	mov	fp, r4
    647c:	469c      	mov	ip, r3
    647e:	2300      	movs	r3, #0
    6480:	2700      	movs	r7, #0
    6482:	4466      	add	r6, ip
    6484:	9302      	str	r3, [sp, #8]
    6486:	4643      	mov	r3, r8
    6488:	031c      	lsls	r4, r3, #12
    648a:	005a      	lsls	r2, r3, #1
    648c:	0fdb      	lsrs	r3, r3, #31
    648e:	4650      	mov	r0, sl
    6490:	0b24      	lsrs	r4, r4, #12
    6492:	0d52      	lsrs	r2, r2, #21
    6494:	4698      	mov	r8, r3
    6496:	d100      	bne.n	649a <__aeabi_dmul+0x5e>
    6498:	e076      	b.n	6588 <__aeabi_dmul+0x14c>
    649a:	4b5f      	ldr	r3, [pc, #380]	; (6618 <__aeabi_dmul+0x1dc>)
    649c:	429a      	cmp	r2, r3
    649e:	d06d      	beq.n	657c <__aeabi_dmul+0x140>
    64a0:	2380      	movs	r3, #128	; 0x80
    64a2:	0f41      	lsrs	r1, r0, #29
    64a4:	041b      	lsls	r3, r3, #16
    64a6:	430b      	orrs	r3, r1
    64a8:	495c      	ldr	r1, [pc, #368]	; (661c <__aeabi_dmul+0x1e0>)
    64aa:	00e4      	lsls	r4, r4, #3
    64ac:	468c      	mov	ip, r1
    64ae:	431c      	orrs	r4, r3
    64b0:	00c3      	lsls	r3, r0, #3
    64b2:	2000      	movs	r0, #0
    64b4:	4462      	add	r2, ip
    64b6:	4641      	mov	r1, r8
    64b8:	18b6      	adds	r6, r6, r2
    64ba:	4069      	eors	r1, r5
    64bc:	1c72      	adds	r2, r6, #1
    64be:	9101      	str	r1, [sp, #4]
    64c0:	4694      	mov	ip, r2
    64c2:	4307      	orrs	r7, r0
    64c4:	2f0f      	cmp	r7, #15
    64c6:	d900      	bls.n	64ca <__aeabi_dmul+0x8e>
    64c8:	e0b0      	b.n	662c <__aeabi_dmul+0x1f0>
    64ca:	4a55      	ldr	r2, [pc, #340]	; (6620 <__aeabi_dmul+0x1e4>)
    64cc:	00bf      	lsls	r7, r7, #2
    64ce:	59d2      	ldr	r2, [r2, r7]
    64d0:	4697      	mov	pc, r2
    64d2:	465b      	mov	r3, fp
    64d4:	4303      	orrs	r3, r0
    64d6:	4699      	mov	r9, r3
    64d8:	d000      	beq.n	64dc <__aeabi_dmul+0xa0>
    64da:	e087      	b.n	65ec <__aeabi_dmul+0x1b0>
    64dc:	2300      	movs	r3, #0
    64de:	469b      	mov	fp, r3
    64e0:	3302      	adds	r3, #2
    64e2:	2708      	movs	r7, #8
    64e4:	9302      	str	r3, [sp, #8]
    64e6:	e7ce      	b.n	6486 <__aeabi_dmul+0x4a>
    64e8:	4642      	mov	r2, r8
    64ea:	9201      	str	r2, [sp, #4]
    64ec:	2802      	cmp	r0, #2
    64ee:	d067      	beq.n	65c0 <__aeabi_dmul+0x184>
    64f0:	2803      	cmp	r0, #3
    64f2:	d100      	bne.n	64f6 <__aeabi_dmul+0xba>
    64f4:	e20e      	b.n	6914 <__aeabi_dmul+0x4d8>
    64f6:	2801      	cmp	r0, #1
    64f8:	d000      	beq.n	64fc <__aeabi_dmul+0xc0>
    64fa:	e162      	b.n	67c2 <__aeabi_dmul+0x386>
    64fc:	2300      	movs	r3, #0
    64fe:	2400      	movs	r4, #0
    6500:	2200      	movs	r2, #0
    6502:	4699      	mov	r9, r3
    6504:	9901      	ldr	r1, [sp, #4]
    6506:	4001      	ands	r1, r0
    6508:	b2cd      	uxtb	r5, r1
    650a:	2100      	movs	r1, #0
    650c:	0312      	lsls	r2, r2, #12
    650e:	0d0b      	lsrs	r3, r1, #20
    6510:	0b12      	lsrs	r2, r2, #12
    6512:	051b      	lsls	r3, r3, #20
    6514:	4313      	orrs	r3, r2
    6516:	4a43      	ldr	r2, [pc, #268]	; (6624 <__aeabi_dmul+0x1e8>)
    6518:	0524      	lsls	r4, r4, #20
    651a:	4013      	ands	r3, r2
    651c:	431c      	orrs	r4, r3
    651e:	0064      	lsls	r4, r4, #1
    6520:	07ed      	lsls	r5, r5, #31
    6522:	0864      	lsrs	r4, r4, #1
    6524:	432c      	orrs	r4, r5
    6526:	4648      	mov	r0, r9
    6528:	0021      	movs	r1, r4
    652a:	b007      	add	sp, #28
    652c:	bc3c      	pop	{r2, r3, r4, r5}
    652e:	4690      	mov	r8, r2
    6530:	4699      	mov	r9, r3
    6532:	46a2      	mov	sl, r4
    6534:	46ab      	mov	fp, r5
    6536:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6538:	4303      	orrs	r3, r0
    653a:	4699      	mov	r9, r3
    653c:	d04f      	beq.n	65de <__aeabi_dmul+0x1a2>
    653e:	465b      	mov	r3, fp
    6540:	2b00      	cmp	r3, #0
    6542:	d100      	bne.n	6546 <__aeabi_dmul+0x10a>
    6544:	e189      	b.n	685a <__aeabi_dmul+0x41e>
    6546:	4658      	mov	r0, fp
    6548:	f000 fdfa 	bl	7140 <__clzsi2>
    654c:	0003      	movs	r3, r0
    654e:	3b0b      	subs	r3, #11
    6550:	2b1c      	cmp	r3, #28
    6552:	dd00      	ble.n	6556 <__aeabi_dmul+0x11a>
    6554:	e17a      	b.n	684c <__aeabi_dmul+0x410>
    6556:	221d      	movs	r2, #29
    6558:	1ad3      	subs	r3, r2, r3
    655a:	003a      	movs	r2, r7
    655c:	0001      	movs	r1, r0
    655e:	465c      	mov	r4, fp
    6560:	40da      	lsrs	r2, r3
    6562:	3908      	subs	r1, #8
    6564:	408c      	lsls	r4, r1
    6566:	0013      	movs	r3, r2
    6568:	408f      	lsls	r7, r1
    656a:	4323      	orrs	r3, r4
    656c:	469b      	mov	fp, r3
    656e:	46b9      	mov	r9, r7
    6570:	2300      	movs	r3, #0
    6572:	4e2d      	ldr	r6, [pc, #180]	; (6628 <__aeabi_dmul+0x1ec>)
    6574:	2700      	movs	r7, #0
    6576:	1a36      	subs	r6, r6, r0
    6578:	9302      	str	r3, [sp, #8]
    657a:	e784      	b.n	6486 <__aeabi_dmul+0x4a>
    657c:	4653      	mov	r3, sl
    657e:	4323      	orrs	r3, r4
    6580:	d12a      	bne.n	65d8 <__aeabi_dmul+0x19c>
    6582:	2400      	movs	r4, #0
    6584:	2002      	movs	r0, #2
    6586:	e796      	b.n	64b6 <__aeabi_dmul+0x7a>
    6588:	4653      	mov	r3, sl
    658a:	4323      	orrs	r3, r4
    658c:	d020      	beq.n	65d0 <__aeabi_dmul+0x194>
    658e:	2c00      	cmp	r4, #0
    6590:	d100      	bne.n	6594 <__aeabi_dmul+0x158>
    6592:	e157      	b.n	6844 <__aeabi_dmul+0x408>
    6594:	0020      	movs	r0, r4
    6596:	f000 fdd3 	bl	7140 <__clzsi2>
    659a:	0003      	movs	r3, r0
    659c:	3b0b      	subs	r3, #11
    659e:	2b1c      	cmp	r3, #28
    65a0:	dd00      	ble.n	65a4 <__aeabi_dmul+0x168>
    65a2:	e149      	b.n	6838 <__aeabi_dmul+0x3fc>
    65a4:	211d      	movs	r1, #29
    65a6:	1acb      	subs	r3, r1, r3
    65a8:	4651      	mov	r1, sl
    65aa:	0002      	movs	r2, r0
    65ac:	40d9      	lsrs	r1, r3
    65ae:	4653      	mov	r3, sl
    65b0:	3a08      	subs	r2, #8
    65b2:	4094      	lsls	r4, r2
    65b4:	4093      	lsls	r3, r2
    65b6:	430c      	orrs	r4, r1
    65b8:	4a1b      	ldr	r2, [pc, #108]	; (6628 <__aeabi_dmul+0x1ec>)
    65ba:	1a12      	subs	r2, r2, r0
    65bc:	2000      	movs	r0, #0
    65be:	e77a      	b.n	64b6 <__aeabi_dmul+0x7a>
    65c0:	2501      	movs	r5, #1
    65c2:	9b01      	ldr	r3, [sp, #4]
    65c4:	4c14      	ldr	r4, [pc, #80]	; (6618 <__aeabi_dmul+0x1dc>)
    65c6:	401d      	ands	r5, r3
    65c8:	2300      	movs	r3, #0
    65ca:	2200      	movs	r2, #0
    65cc:	4699      	mov	r9, r3
    65ce:	e79c      	b.n	650a <__aeabi_dmul+0xce>
    65d0:	2400      	movs	r4, #0
    65d2:	2200      	movs	r2, #0
    65d4:	2001      	movs	r0, #1
    65d6:	e76e      	b.n	64b6 <__aeabi_dmul+0x7a>
    65d8:	4653      	mov	r3, sl
    65da:	2003      	movs	r0, #3
    65dc:	e76b      	b.n	64b6 <__aeabi_dmul+0x7a>
    65de:	2300      	movs	r3, #0
    65e0:	469b      	mov	fp, r3
    65e2:	3301      	adds	r3, #1
    65e4:	2704      	movs	r7, #4
    65e6:	2600      	movs	r6, #0
    65e8:	9302      	str	r3, [sp, #8]
    65ea:	e74c      	b.n	6486 <__aeabi_dmul+0x4a>
    65ec:	2303      	movs	r3, #3
    65ee:	4681      	mov	r9, r0
    65f0:	270c      	movs	r7, #12
    65f2:	9302      	str	r3, [sp, #8]
    65f4:	e747      	b.n	6486 <__aeabi_dmul+0x4a>
    65f6:	2280      	movs	r2, #128	; 0x80
    65f8:	2300      	movs	r3, #0
    65fa:	2500      	movs	r5, #0
    65fc:	0312      	lsls	r2, r2, #12
    65fe:	4699      	mov	r9, r3
    6600:	4c05      	ldr	r4, [pc, #20]	; (6618 <__aeabi_dmul+0x1dc>)
    6602:	e782      	b.n	650a <__aeabi_dmul+0xce>
    6604:	465c      	mov	r4, fp
    6606:	464b      	mov	r3, r9
    6608:	9802      	ldr	r0, [sp, #8]
    660a:	e76f      	b.n	64ec <__aeabi_dmul+0xb0>
    660c:	465c      	mov	r4, fp
    660e:	464b      	mov	r3, r9
    6610:	9501      	str	r5, [sp, #4]
    6612:	9802      	ldr	r0, [sp, #8]
    6614:	e76a      	b.n	64ec <__aeabi_dmul+0xb0>
    6616:	46c0      	nop			; (mov r8, r8)
    6618:	000007ff 	.word	0x000007ff
    661c:	fffffc01 	.word	0xfffffc01
    6620:	00008714 	.word	0x00008714
    6624:	800fffff 	.word	0x800fffff
    6628:	fffffc0d 	.word	0xfffffc0d
    662c:	464a      	mov	r2, r9
    662e:	4649      	mov	r1, r9
    6630:	0c17      	lsrs	r7, r2, #16
    6632:	0c1a      	lsrs	r2, r3, #16
    6634:	041b      	lsls	r3, r3, #16
    6636:	0c1b      	lsrs	r3, r3, #16
    6638:	0408      	lsls	r0, r1, #16
    663a:	0019      	movs	r1, r3
    663c:	0c00      	lsrs	r0, r0, #16
    663e:	4341      	muls	r1, r0
    6640:	0015      	movs	r5, r2
    6642:	4688      	mov	r8, r1
    6644:	0019      	movs	r1, r3
    6646:	437d      	muls	r5, r7
    6648:	4379      	muls	r1, r7
    664a:	9503      	str	r5, [sp, #12]
    664c:	4689      	mov	r9, r1
    664e:	0029      	movs	r1, r5
    6650:	0015      	movs	r5, r2
    6652:	4345      	muls	r5, r0
    6654:	444d      	add	r5, r9
    6656:	9502      	str	r5, [sp, #8]
    6658:	4645      	mov	r5, r8
    665a:	0c2d      	lsrs	r5, r5, #16
    665c:	46aa      	mov	sl, r5
    665e:	9d02      	ldr	r5, [sp, #8]
    6660:	4455      	add	r5, sl
    6662:	45a9      	cmp	r9, r5
    6664:	d906      	bls.n	6674 <__aeabi_dmul+0x238>
    6666:	468a      	mov	sl, r1
    6668:	2180      	movs	r1, #128	; 0x80
    666a:	0249      	lsls	r1, r1, #9
    666c:	4689      	mov	r9, r1
    666e:	44ca      	add	sl, r9
    6670:	4651      	mov	r1, sl
    6672:	9103      	str	r1, [sp, #12]
    6674:	0c29      	lsrs	r1, r5, #16
    6676:	9104      	str	r1, [sp, #16]
    6678:	4641      	mov	r1, r8
    667a:	0409      	lsls	r1, r1, #16
    667c:	042d      	lsls	r5, r5, #16
    667e:	0c09      	lsrs	r1, r1, #16
    6680:	4688      	mov	r8, r1
    6682:	0029      	movs	r1, r5
    6684:	0c25      	lsrs	r5, r4, #16
    6686:	0424      	lsls	r4, r4, #16
    6688:	4441      	add	r1, r8
    668a:	0c24      	lsrs	r4, r4, #16
    668c:	9105      	str	r1, [sp, #20]
    668e:	0021      	movs	r1, r4
    6690:	4341      	muls	r1, r0
    6692:	4688      	mov	r8, r1
    6694:	0021      	movs	r1, r4
    6696:	4379      	muls	r1, r7
    6698:	468a      	mov	sl, r1
    669a:	4368      	muls	r0, r5
    669c:	4641      	mov	r1, r8
    669e:	4450      	add	r0, sl
    66a0:	4681      	mov	r9, r0
    66a2:	0c08      	lsrs	r0, r1, #16
    66a4:	4448      	add	r0, r9
    66a6:	436f      	muls	r7, r5
    66a8:	4582      	cmp	sl, r0
    66aa:	d903      	bls.n	66b4 <__aeabi_dmul+0x278>
    66ac:	2180      	movs	r1, #128	; 0x80
    66ae:	0249      	lsls	r1, r1, #9
    66b0:	4689      	mov	r9, r1
    66b2:	444f      	add	r7, r9
    66b4:	0c01      	lsrs	r1, r0, #16
    66b6:	4689      	mov	r9, r1
    66b8:	0039      	movs	r1, r7
    66ba:	4449      	add	r1, r9
    66bc:	9102      	str	r1, [sp, #8]
    66be:	4641      	mov	r1, r8
    66c0:	040f      	lsls	r7, r1, #16
    66c2:	9904      	ldr	r1, [sp, #16]
    66c4:	0c3f      	lsrs	r7, r7, #16
    66c6:	4688      	mov	r8, r1
    66c8:	0400      	lsls	r0, r0, #16
    66ca:	19c0      	adds	r0, r0, r7
    66cc:	4480      	add	r8, r0
    66ce:	4641      	mov	r1, r8
    66d0:	9104      	str	r1, [sp, #16]
    66d2:	4659      	mov	r1, fp
    66d4:	0c0f      	lsrs	r7, r1, #16
    66d6:	0409      	lsls	r1, r1, #16
    66d8:	0c09      	lsrs	r1, r1, #16
    66da:	4688      	mov	r8, r1
    66dc:	4359      	muls	r1, r3
    66de:	468a      	mov	sl, r1
    66e0:	0039      	movs	r1, r7
    66e2:	4351      	muls	r1, r2
    66e4:	4689      	mov	r9, r1
    66e6:	4641      	mov	r1, r8
    66e8:	434a      	muls	r2, r1
    66ea:	4651      	mov	r1, sl
    66ec:	0c09      	lsrs	r1, r1, #16
    66ee:	468b      	mov	fp, r1
    66f0:	437b      	muls	r3, r7
    66f2:	18d2      	adds	r2, r2, r3
    66f4:	445a      	add	r2, fp
    66f6:	4293      	cmp	r3, r2
    66f8:	d903      	bls.n	6702 <__aeabi_dmul+0x2c6>
    66fa:	2380      	movs	r3, #128	; 0x80
    66fc:	025b      	lsls	r3, r3, #9
    66fe:	469b      	mov	fp, r3
    6700:	44d9      	add	r9, fp
    6702:	4651      	mov	r1, sl
    6704:	0409      	lsls	r1, r1, #16
    6706:	0c09      	lsrs	r1, r1, #16
    6708:	468a      	mov	sl, r1
    670a:	4641      	mov	r1, r8
    670c:	4361      	muls	r1, r4
    670e:	437c      	muls	r4, r7
    6710:	0c13      	lsrs	r3, r2, #16
    6712:	0412      	lsls	r2, r2, #16
    6714:	444b      	add	r3, r9
    6716:	4452      	add	r2, sl
    6718:	46a1      	mov	r9, r4
    671a:	468a      	mov	sl, r1
    671c:	003c      	movs	r4, r7
    671e:	4641      	mov	r1, r8
    6720:	436c      	muls	r4, r5
    6722:	434d      	muls	r5, r1
    6724:	4651      	mov	r1, sl
    6726:	444d      	add	r5, r9
    6728:	0c0f      	lsrs	r7, r1, #16
    672a:	197d      	adds	r5, r7, r5
    672c:	45a9      	cmp	r9, r5
    672e:	d903      	bls.n	6738 <__aeabi_dmul+0x2fc>
    6730:	2180      	movs	r1, #128	; 0x80
    6732:	0249      	lsls	r1, r1, #9
    6734:	4688      	mov	r8, r1
    6736:	4444      	add	r4, r8
    6738:	9f04      	ldr	r7, [sp, #16]
    673a:	9903      	ldr	r1, [sp, #12]
    673c:	46b8      	mov	r8, r7
    673e:	4441      	add	r1, r8
    6740:	468b      	mov	fp, r1
    6742:	4583      	cmp	fp, r0
    6744:	4180      	sbcs	r0, r0
    6746:	4241      	negs	r1, r0
    6748:	4688      	mov	r8, r1
    674a:	4651      	mov	r1, sl
    674c:	0408      	lsls	r0, r1, #16
    674e:	042f      	lsls	r7, r5, #16
    6750:	0c00      	lsrs	r0, r0, #16
    6752:	183f      	adds	r7, r7, r0
    6754:	4658      	mov	r0, fp
    6756:	9902      	ldr	r1, [sp, #8]
    6758:	1810      	adds	r0, r2, r0
    675a:	4689      	mov	r9, r1
    675c:	4290      	cmp	r0, r2
    675e:	4192      	sbcs	r2, r2
    6760:	444f      	add	r7, r9
    6762:	46ba      	mov	sl, r7
    6764:	4252      	negs	r2, r2
    6766:	4699      	mov	r9, r3
    6768:	4693      	mov	fp, r2
    676a:	44c2      	add	sl, r8
    676c:	44d1      	add	r9, sl
    676e:	44cb      	add	fp, r9
    6770:	428f      	cmp	r7, r1
    6772:	41bf      	sbcs	r7, r7
    6774:	45c2      	cmp	sl, r8
    6776:	4189      	sbcs	r1, r1
    6778:	4599      	cmp	r9, r3
    677a:	419b      	sbcs	r3, r3
    677c:	4593      	cmp	fp, r2
    677e:	4192      	sbcs	r2, r2
    6780:	427f      	negs	r7, r7
    6782:	4249      	negs	r1, r1
    6784:	0c2d      	lsrs	r5, r5, #16
    6786:	4252      	negs	r2, r2
    6788:	430f      	orrs	r7, r1
    678a:	425b      	negs	r3, r3
    678c:	4313      	orrs	r3, r2
    678e:	197f      	adds	r7, r7, r5
    6790:	18ff      	adds	r7, r7, r3
    6792:	465b      	mov	r3, fp
    6794:	193c      	adds	r4, r7, r4
    6796:	0ddb      	lsrs	r3, r3, #23
    6798:	9a05      	ldr	r2, [sp, #20]
    679a:	0264      	lsls	r4, r4, #9
    679c:	431c      	orrs	r4, r3
    679e:	0243      	lsls	r3, r0, #9
    67a0:	4313      	orrs	r3, r2
    67a2:	1e5d      	subs	r5, r3, #1
    67a4:	41ab      	sbcs	r3, r5
    67a6:	465a      	mov	r2, fp
    67a8:	0dc0      	lsrs	r0, r0, #23
    67aa:	4303      	orrs	r3, r0
    67ac:	0252      	lsls	r2, r2, #9
    67ae:	4313      	orrs	r3, r2
    67b0:	01e2      	lsls	r2, r4, #7
    67b2:	d556      	bpl.n	6862 <__aeabi_dmul+0x426>
    67b4:	2001      	movs	r0, #1
    67b6:	085a      	lsrs	r2, r3, #1
    67b8:	4003      	ands	r3, r0
    67ba:	4313      	orrs	r3, r2
    67bc:	07e2      	lsls	r2, r4, #31
    67be:	4313      	orrs	r3, r2
    67c0:	0864      	lsrs	r4, r4, #1
    67c2:	485a      	ldr	r0, [pc, #360]	; (692c <__aeabi_dmul+0x4f0>)
    67c4:	4460      	add	r0, ip
    67c6:	2800      	cmp	r0, #0
    67c8:	dd4d      	ble.n	6866 <__aeabi_dmul+0x42a>
    67ca:	075a      	lsls	r2, r3, #29
    67cc:	d009      	beq.n	67e2 <__aeabi_dmul+0x3a6>
    67ce:	220f      	movs	r2, #15
    67d0:	401a      	ands	r2, r3
    67d2:	2a04      	cmp	r2, #4
    67d4:	d005      	beq.n	67e2 <__aeabi_dmul+0x3a6>
    67d6:	1d1a      	adds	r2, r3, #4
    67d8:	429a      	cmp	r2, r3
    67da:	419b      	sbcs	r3, r3
    67dc:	425b      	negs	r3, r3
    67de:	18e4      	adds	r4, r4, r3
    67e0:	0013      	movs	r3, r2
    67e2:	01e2      	lsls	r2, r4, #7
    67e4:	d504      	bpl.n	67f0 <__aeabi_dmul+0x3b4>
    67e6:	2080      	movs	r0, #128	; 0x80
    67e8:	4a51      	ldr	r2, [pc, #324]	; (6930 <__aeabi_dmul+0x4f4>)
    67ea:	00c0      	lsls	r0, r0, #3
    67ec:	4014      	ands	r4, r2
    67ee:	4460      	add	r0, ip
    67f0:	4a50      	ldr	r2, [pc, #320]	; (6934 <__aeabi_dmul+0x4f8>)
    67f2:	4290      	cmp	r0, r2
    67f4:	dd00      	ble.n	67f8 <__aeabi_dmul+0x3bc>
    67f6:	e6e3      	b.n	65c0 <__aeabi_dmul+0x184>
    67f8:	2501      	movs	r5, #1
    67fa:	08db      	lsrs	r3, r3, #3
    67fc:	0762      	lsls	r2, r4, #29
    67fe:	431a      	orrs	r2, r3
    6800:	0264      	lsls	r4, r4, #9
    6802:	9b01      	ldr	r3, [sp, #4]
    6804:	4691      	mov	r9, r2
    6806:	0b22      	lsrs	r2, r4, #12
    6808:	0544      	lsls	r4, r0, #21
    680a:	0d64      	lsrs	r4, r4, #21
    680c:	401d      	ands	r5, r3
    680e:	e67c      	b.n	650a <__aeabi_dmul+0xce>
    6810:	2280      	movs	r2, #128	; 0x80
    6812:	4659      	mov	r1, fp
    6814:	0312      	lsls	r2, r2, #12
    6816:	4211      	tst	r1, r2
    6818:	d008      	beq.n	682c <__aeabi_dmul+0x3f0>
    681a:	4214      	tst	r4, r2
    681c:	d106      	bne.n	682c <__aeabi_dmul+0x3f0>
    681e:	4322      	orrs	r2, r4
    6820:	0312      	lsls	r2, r2, #12
    6822:	0b12      	lsrs	r2, r2, #12
    6824:	4645      	mov	r5, r8
    6826:	4699      	mov	r9, r3
    6828:	4c43      	ldr	r4, [pc, #268]	; (6938 <__aeabi_dmul+0x4fc>)
    682a:	e66e      	b.n	650a <__aeabi_dmul+0xce>
    682c:	465b      	mov	r3, fp
    682e:	431a      	orrs	r2, r3
    6830:	0312      	lsls	r2, r2, #12
    6832:	0b12      	lsrs	r2, r2, #12
    6834:	4c40      	ldr	r4, [pc, #256]	; (6938 <__aeabi_dmul+0x4fc>)
    6836:	e668      	b.n	650a <__aeabi_dmul+0xce>
    6838:	0003      	movs	r3, r0
    683a:	4654      	mov	r4, sl
    683c:	3b28      	subs	r3, #40	; 0x28
    683e:	409c      	lsls	r4, r3
    6840:	2300      	movs	r3, #0
    6842:	e6b9      	b.n	65b8 <__aeabi_dmul+0x17c>
    6844:	f000 fc7c 	bl	7140 <__clzsi2>
    6848:	3020      	adds	r0, #32
    684a:	e6a6      	b.n	659a <__aeabi_dmul+0x15e>
    684c:	0003      	movs	r3, r0
    684e:	3b28      	subs	r3, #40	; 0x28
    6850:	409f      	lsls	r7, r3
    6852:	2300      	movs	r3, #0
    6854:	46bb      	mov	fp, r7
    6856:	4699      	mov	r9, r3
    6858:	e68a      	b.n	6570 <__aeabi_dmul+0x134>
    685a:	f000 fc71 	bl	7140 <__clzsi2>
    685e:	3020      	adds	r0, #32
    6860:	e674      	b.n	654c <__aeabi_dmul+0x110>
    6862:	46b4      	mov	ip, r6
    6864:	e7ad      	b.n	67c2 <__aeabi_dmul+0x386>
    6866:	2501      	movs	r5, #1
    6868:	1a2a      	subs	r2, r5, r0
    686a:	2a38      	cmp	r2, #56	; 0x38
    686c:	dd06      	ble.n	687c <__aeabi_dmul+0x440>
    686e:	9b01      	ldr	r3, [sp, #4]
    6870:	2400      	movs	r4, #0
    6872:	401d      	ands	r5, r3
    6874:	2300      	movs	r3, #0
    6876:	2200      	movs	r2, #0
    6878:	4699      	mov	r9, r3
    687a:	e646      	b.n	650a <__aeabi_dmul+0xce>
    687c:	2a1f      	cmp	r2, #31
    687e:	dc21      	bgt.n	68c4 <__aeabi_dmul+0x488>
    6880:	2520      	movs	r5, #32
    6882:	0020      	movs	r0, r4
    6884:	1aad      	subs	r5, r5, r2
    6886:	001e      	movs	r6, r3
    6888:	40ab      	lsls	r3, r5
    688a:	40a8      	lsls	r0, r5
    688c:	40d6      	lsrs	r6, r2
    688e:	1e5d      	subs	r5, r3, #1
    6890:	41ab      	sbcs	r3, r5
    6892:	4330      	orrs	r0, r6
    6894:	4318      	orrs	r0, r3
    6896:	40d4      	lsrs	r4, r2
    6898:	0743      	lsls	r3, r0, #29
    689a:	d009      	beq.n	68b0 <__aeabi_dmul+0x474>
    689c:	230f      	movs	r3, #15
    689e:	4003      	ands	r3, r0
    68a0:	2b04      	cmp	r3, #4
    68a2:	d005      	beq.n	68b0 <__aeabi_dmul+0x474>
    68a4:	0003      	movs	r3, r0
    68a6:	1d18      	adds	r0, r3, #4
    68a8:	4298      	cmp	r0, r3
    68aa:	419b      	sbcs	r3, r3
    68ac:	425b      	negs	r3, r3
    68ae:	18e4      	adds	r4, r4, r3
    68b0:	0223      	lsls	r3, r4, #8
    68b2:	d521      	bpl.n	68f8 <__aeabi_dmul+0x4bc>
    68b4:	2501      	movs	r5, #1
    68b6:	9b01      	ldr	r3, [sp, #4]
    68b8:	2401      	movs	r4, #1
    68ba:	401d      	ands	r5, r3
    68bc:	2300      	movs	r3, #0
    68be:	2200      	movs	r2, #0
    68c0:	4699      	mov	r9, r3
    68c2:	e622      	b.n	650a <__aeabi_dmul+0xce>
    68c4:	251f      	movs	r5, #31
    68c6:	0021      	movs	r1, r4
    68c8:	426d      	negs	r5, r5
    68ca:	1a28      	subs	r0, r5, r0
    68cc:	40c1      	lsrs	r1, r0
    68ce:	0008      	movs	r0, r1
    68d0:	2a20      	cmp	r2, #32
    68d2:	d01d      	beq.n	6910 <__aeabi_dmul+0x4d4>
    68d4:	355f      	adds	r5, #95	; 0x5f
    68d6:	1aaa      	subs	r2, r5, r2
    68d8:	4094      	lsls	r4, r2
    68da:	4323      	orrs	r3, r4
    68dc:	1e5c      	subs	r4, r3, #1
    68de:	41a3      	sbcs	r3, r4
    68e0:	2507      	movs	r5, #7
    68e2:	4303      	orrs	r3, r0
    68e4:	401d      	ands	r5, r3
    68e6:	2200      	movs	r2, #0
    68e8:	2d00      	cmp	r5, #0
    68ea:	d009      	beq.n	6900 <__aeabi_dmul+0x4c4>
    68ec:	220f      	movs	r2, #15
    68ee:	2400      	movs	r4, #0
    68f0:	401a      	ands	r2, r3
    68f2:	0018      	movs	r0, r3
    68f4:	2a04      	cmp	r2, #4
    68f6:	d1d6      	bne.n	68a6 <__aeabi_dmul+0x46a>
    68f8:	0003      	movs	r3, r0
    68fa:	0765      	lsls	r5, r4, #29
    68fc:	0264      	lsls	r4, r4, #9
    68fe:	0b22      	lsrs	r2, r4, #12
    6900:	08db      	lsrs	r3, r3, #3
    6902:	432b      	orrs	r3, r5
    6904:	2501      	movs	r5, #1
    6906:	4699      	mov	r9, r3
    6908:	9b01      	ldr	r3, [sp, #4]
    690a:	2400      	movs	r4, #0
    690c:	401d      	ands	r5, r3
    690e:	e5fc      	b.n	650a <__aeabi_dmul+0xce>
    6910:	2400      	movs	r4, #0
    6912:	e7e2      	b.n	68da <__aeabi_dmul+0x49e>
    6914:	2280      	movs	r2, #128	; 0x80
    6916:	2501      	movs	r5, #1
    6918:	0312      	lsls	r2, r2, #12
    691a:	4322      	orrs	r2, r4
    691c:	9901      	ldr	r1, [sp, #4]
    691e:	0312      	lsls	r2, r2, #12
    6920:	0b12      	lsrs	r2, r2, #12
    6922:	400d      	ands	r5, r1
    6924:	4699      	mov	r9, r3
    6926:	4c04      	ldr	r4, [pc, #16]	; (6938 <__aeabi_dmul+0x4fc>)
    6928:	e5ef      	b.n	650a <__aeabi_dmul+0xce>
    692a:	46c0      	nop			; (mov r8, r8)
    692c:	000003ff 	.word	0x000003ff
    6930:	feffffff 	.word	0xfeffffff
    6934:	000007fe 	.word	0x000007fe
    6938:	000007ff 	.word	0x000007ff

0000693c <__aeabi_dsub>:
    693c:	b5f0      	push	{r4, r5, r6, r7, lr}
    693e:	4646      	mov	r6, r8
    6940:	46d6      	mov	lr, sl
    6942:	464f      	mov	r7, r9
    6944:	030c      	lsls	r4, r1, #12
    6946:	b5c0      	push	{r6, r7, lr}
    6948:	0fcd      	lsrs	r5, r1, #31
    694a:	004e      	lsls	r6, r1, #1
    694c:	0a61      	lsrs	r1, r4, #9
    694e:	0f44      	lsrs	r4, r0, #29
    6950:	430c      	orrs	r4, r1
    6952:	00c1      	lsls	r1, r0, #3
    6954:	0058      	lsls	r0, r3, #1
    6956:	0d40      	lsrs	r0, r0, #21
    6958:	4684      	mov	ip, r0
    695a:	468a      	mov	sl, r1
    695c:	000f      	movs	r7, r1
    695e:	0319      	lsls	r1, r3, #12
    6960:	0f50      	lsrs	r0, r2, #29
    6962:	0a49      	lsrs	r1, r1, #9
    6964:	4301      	orrs	r1, r0
    6966:	48c6      	ldr	r0, [pc, #792]	; (6c80 <__aeabi_dsub+0x344>)
    6968:	0d76      	lsrs	r6, r6, #21
    696a:	46a8      	mov	r8, r5
    696c:	0fdb      	lsrs	r3, r3, #31
    696e:	00d2      	lsls	r2, r2, #3
    6970:	4584      	cmp	ip, r0
    6972:	d100      	bne.n	6976 <__aeabi_dsub+0x3a>
    6974:	e0d8      	b.n	6b28 <__aeabi_dsub+0x1ec>
    6976:	2001      	movs	r0, #1
    6978:	4043      	eors	r3, r0
    697a:	42ab      	cmp	r3, r5
    697c:	d100      	bne.n	6980 <__aeabi_dsub+0x44>
    697e:	e0a6      	b.n	6ace <__aeabi_dsub+0x192>
    6980:	4660      	mov	r0, ip
    6982:	1a35      	subs	r5, r6, r0
    6984:	2d00      	cmp	r5, #0
    6986:	dc00      	bgt.n	698a <__aeabi_dsub+0x4e>
    6988:	e105      	b.n	6b96 <__aeabi_dsub+0x25a>
    698a:	2800      	cmp	r0, #0
    698c:	d110      	bne.n	69b0 <__aeabi_dsub+0x74>
    698e:	000b      	movs	r3, r1
    6990:	4313      	orrs	r3, r2
    6992:	d100      	bne.n	6996 <__aeabi_dsub+0x5a>
    6994:	e0d7      	b.n	6b46 <__aeabi_dsub+0x20a>
    6996:	1e6b      	subs	r3, r5, #1
    6998:	2b00      	cmp	r3, #0
    699a:	d000      	beq.n	699e <__aeabi_dsub+0x62>
    699c:	e14b      	b.n	6c36 <__aeabi_dsub+0x2fa>
    699e:	4653      	mov	r3, sl
    69a0:	1a9f      	subs	r7, r3, r2
    69a2:	45ba      	cmp	sl, r7
    69a4:	4180      	sbcs	r0, r0
    69a6:	1a64      	subs	r4, r4, r1
    69a8:	4240      	negs	r0, r0
    69aa:	1a24      	subs	r4, r4, r0
    69ac:	2601      	movs	r6, #1
    69ae:	e01e      	b.n	69ee <__aeabi_dsub+0xb2>
    69b0:	4bb3      	ldr	r3, [pc, #716]	; (6c80 <__aeabi_dsub+0x344>)
    69b2:	429e      	cmp	r6, r3
    69b4:	d048      	beq.n	6a48 <__aeabi_dsub+0x10c>
    69b6:	2380      	movs	r3, #128	; 0x80
    69b8:	041b      	lsls	r3, r3, #16
    69ba:	4319      	orrs	r1, r3
    69bc:	2d38      	cmp	r5, #56	; 0x38
    69be:	dd00      	ble.n	69c2 <__aeabi_dsub+0x86>
    69c0:	e119      	b.n	6bf6 <__aeabi_dsub+0x2ba>
    69c2:	2d1f      	cmp	r5, #31
    69c4:	dd00      	ble.n	69c8 <__aeabi_dsub+0x8c>
    69c6:	e14c      	b.n	6c62 <__aeabi_dsub+0x326>
    69c8:	2320      	movs	r3, #32
    69ca:	000f      	movs	r7, r1
    69cc:	1b5b      	subs	r3, r3, r5
    69ce:	0010      	movs	r0, r2
    69d0:	409a      	lsls	r2, r3
    69d2:	409f      	lsls	r7, r3
    69d4:	40e8      	lsrs	r0, r5
    69d6:	1e53      	subs	r3, r2, #1
    69d8:	419a      	sbcs	r2, r3
    69da:	40e9      	lsrs	r1, r5
    69dc:	4307      	orrs	r7, r0
    69de:	4317      	orrs	r7, r2
    69e0:	4653      	mov	r3, sl
    69e2:	1bdf      	subs	r7, r3, r7
    69e4:	1a61      	subs	r1, r4, r1
    69e6:	45ba      	cmp	sl, r7
    69e8:	41a4      	sbcs	r4, r4
    69ea:	4264      	negs	r4, r4
    69ec:	1b0c      	subs	r4, r1, r4
    69ee:	0223      	lsls	r3, r4, #8
    69f0:	d400      	bmi.n	69f4 <__aeabi_dsub+0xb8>
    69f2:	e0c5      	b.n	6b80 <__aeabi_dsub+0x244>
    69f4:	0264      	lsls	r4, r4, #9
    69f6:	0a65      	lsrs	r5, r4, #9
    69f8:	2d00      	cmp	r5, #0
    69fa:	d100      	bne.n	69fe <__aeabi_dsub+0xc2>
    69fc:	e0f6      	b.n	6bec <__aeabi_dsub+0x2b0>
    69fe:	0028      	movs	r0, r5
    6a00:	f000 fb9e 	bl	7140 <__clzsi2>
    6a04:	0003      	movs	r3, r0
    6a06:	3b08      	subs	r3, #8
    6a08:	2b1f      	cmp	r3, #31
    6a0a:	dd00      	ble.n	6a0e <__aeabi_dsub+0xd2>
    6a0c:	e0e9      	b.n	6be2 <__aeabi_dsub+0x2a6>
    6a0e:	2220      	movs	r2, #32
    6a10:	003c      	movs	r4, r7
    6a12:	1ad2      	subs	r2, r2, r3
    6a14:	409d      	lsls	r5, r3
    6a16:	40d4      	lsrs	r4, r2
    6a18:	409f      	lsls	r7, r3
    6a1a:	4325      	orrs	r5, r4
    6a1c:	429e      	cmp	r6, r3
    6a1e:	dd00      	ble.n	6a22 <__aeabi_dsub+0xe6>
    6a20:	e0db      	b.n	6bda <__aeabi_dsub+0x29e>
    6a22:	1b9e      	subs	r6, r3, r6
    6a24:	1c73      	adds	r3, r6, #1
    6a26:	2b1f      	cmp	r3, #31
    6a28:	dd00      	ble.n	6a2c <__aeabi_dsub+0xf0>
    6a2a:	e10a      	b.n	6c42 <__aeabi_dsub+0x306>
    6a2c:	2220      	movs	r2, #32
    6a2e:	0038      	movs	r0, r7
    6a30:	1ad2      	subs	r2, r2, r3
    6a32:	0029      	movs	r1, r5
    6a34:	4097      	lsls	r7, r2
    6a36:	002c      	movs	r4, r5
    6a38:	4091      	lsls	r1, r2
    6a3a:	40d8      	lsrs	r0, r3
    6a3c:	1e7a      	subs	r2, r7, #1
    6a3e:	4197      	sbcs	r7, r2
    6a40:	40dc      	lsrs	r4, r3
    6a42:	2600      	movs	r6, #0
    6a44:	4301      	orrs	r1, r0
    6a46:	430f      	orrs	r7, r1
    6a48:	077b      	lsls	r3, r7, #29
    6a4a:	d009      	beq.n	6a60 <__aeabi_dsub+0x124>
    6a4c:	230f      	movs	r3, #15
    6a4e:	403b      	ands	r3, r7
    6a50:	2b04      	cmp	r3, #4
    6a52:	d005      	beq.n	6a60 <__aeabi_dsub+0x124>
    6a54:	1d3b      	adds	r3, r7, #4
    6a56:	42bb      	cmp	r3, r7
    6a58:	41bf      	sbcs	r7, r7
    6a5a:	427f      	negs	r7, r7
    6a5c:	19e4      	adds	r4, r4, r7
    6a5e:	001f      	movs	r7, r3
    6a60:	0223      	lsls	r3, r4, #8
    6a62:	d525      	bpl.n	6ab0 <__aeabi_dsub+0x174>
    6a64:	4b86      	ldr	r3, [pc, #536]	; (6c80 <__aeabi_dsub+0x344>)
    6a66:	3601      	adds	r6, #1
    6a68:	429e      	cmp	r6, r3
    6a6a:	d100      	bne.n	6a6e <__aeabi_dsub+0x132>
    6a6c:	e0af      	b.n	6bce <__aeabi_dsub+0x292>
    6a6e:	4b85      	ldr	r3, [pc, #532]	; (6c84 <__aeabi_dsub+0x348>)
    6a70:	2501      	movs	r5, #1
    6a72:	401c      	ands	r4, r3
    6a74:	4643      	mov	r3, r8
    6a76:	0762      	lsls	r2, r4, #29
    6a78:	08ff      	lsrs	r7, r7, #3
    6a7a:	0264      	lsls	r4, r4, #9
    6a7c:	0576      	lsls	r6, r6, #21
    6a7e:	4317      	orrs	r7, r2
    6a80:	0b24      	lsrs	r4, r4, #12
    6a82:	0d76      	lsrs	r6, r6, #21
    6a84:	401d      	ands	r5, r3
    6a86:	2100      	movs	r1, #0
    6a88:	0324      	lsls	r4, r4, #12
    6a8a:	0b23      	lsrs	r3, r4, #12
    6a8c:	0d0c      	lsrs	r4, r1, #20
    6a8e:	4a7e      	ldr	r2, [pc, #504]	; (6c88 <__aeabi_dsub+0x34c>)
    6a90:	0524      	lsls	r4, r4, #20
    6a92:	431c      	orrs	r4, r3
    6a94:	4014      	ands	r4, r2
    6a96:	0533      	lsls	r3, r6, #20
    6a98:	4323      	orrs	r3, r4
    6a9a:	005b      	lsls	r3, r3, #1
    6a9c:	07ed      	lsls	r5, r5, #31
    6a9e:	085b      	lsrs	r3, r3, #1
    6aa0:	432b      	orrs	r3, r5
    6aa2:	0038      	movs	r0, r7
    6aa4:	0019      	movs	r1, r3
    6aa6:	bc1c      	pop	{r2, r3, r4}
    6aa8:	4690      	mov	r8, r2
    6aaa:	4699      	mov	r9, r3
    6aac:	46a2      	mov	sl, r4
    6aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6ab0:	2501      	movs	r5, #1
    6ab2:	4643      	mov	r3, r8
    6ab4:	0762      	lsls	r2, r4, #29
    6ab6:	08ff      	lsrs	r7, r7, #3
    6ab8:	4317      	orrs	r7, r2
    6aba:	08e4      	lsrs	r4, r4, #3
    6abc:	401d      	ands	r5, r3
    6abe:	4b70      	ldr	r3, [pc, #448]	; (6c80 <__aeabi_dsub+0x344>)
    6ac0:	429e      	cmp	r6, r3
    6ac2:	d036      	beq.n	6b32 <__aeabi_dsub+0x1f6>
    6ac4:	0324      	lsls	r4, r4, #12
    6ac6:	0576      	lsls	r6, r6, #21
    6ac8:	0b24      	lsrs	r4, r4, #12
    6aca:	0d76      	lsrs	r6, r6, #21
    6acc:	e7db      	b.n	6a86 <__aeabi_dsub+0x14a>
    6ace:	4663      	mov	r3, ip
    6ad0:	1af3      	subs	r3, r6, r3
    6ad2:	2b00      	cmp	r3, #0
    6ad4:	dc00      	bgt.n	6ad8 <__aeabi_dsub+0x19c>
    6ad6:	e094      	b.n	6c02 <__aeabi_dsub+0x2c6>
    6ad8:	4660      	mov	r0, ip
    6ada:	2800      	cmp	r0, #0
    6adc:	d035      	beq.n	6b4a <__aeabi_dsub+0x20e>
    6ade:	4868      	ldr	r0, [pc, #416]	; (6c80 <__aeabi_dsub+0x344>)
    6ae0:	4286      	cmp	r6, r0
    6ae2:	d0b1      	beq.n	6a48 <__aeabi_dsub+0x10c>
    6ae4:	2780      	movs	r7, #128	; 0x80
    6ae6:	043f      	lsls	r7, r7, #16
    6ae8:	4339      	orrs	r1, r7
    6aea:	2b38      	cmp	r3, #56	; 0x38
    6aec:	dc00      	bgt.n	6af0 <__aeabi_dsub+0x1b4>
    6aee:	e0fd      	b.n	6cec <__aeabi_dsub+0x3b0>
    6af0:	430a      	orrs	r2, r1
    6af2:	0017      	movs	r7, r2
    6af4:	2100      	movs	r1, #0
    6af6:	1e7a      	subs	r2, r7, #1
    6af8:	4197      	sbcs	r7, r2
    6afa:	4457      	add	r7, sl
    6afc:	4557      	cmp	r7, sl
    6afe:	4180      	sbcs	r0, r0
    6b00:	1909      	adds	r1, r1, r4
    6b02:	4244      	negs	r4, r0
    6b04:	190c      	adds	r4, r1, r4
    6b06:	0223      	lsls	r3, r4, #8
    6b08:	d53a      	bpl.n	6b80 <__aeabi_dsub+0x244>
    6b0a:	4b5d      	ldr	r3, [pc, #372]	; (6c80 <__aeabi_dsub+0x344>)
    6b0c:	3601      	adds	r6, #1
    6b0e:	429e      	cmp	r6, r3
    6b10:	d100      	bne.n	6b14 <__aeabi_dsub+0x1d8>
    6b12:	e14b      	b.n	6dac <__aeabi_dsub+0x470>
    6b14:	2201      	movs	r2, #1
    6b16:	4b5b      	ldr	r3, [pc, #364]	; (6c84 <__aeabi_dsub+0x348>)
    6b18:	401c      	ands	r4, r3
    6b1a:	087b      	lsrs	r3, r7, #1
    6b1c:	4017      	ands	r7, r2
    6b1e:	431f      	orrs	r7, r3
    6b20:	07e2      	lsls	r2, r4, #31
    6b22:	4317      	orrs	r7, r2
    6b24:	0864      	lsrs	r4, r4, #1
    6b26:	e78f      	b.n	6a48 <__aeabi_dsub+0x10c>
    6b28:	0008      	movs	r0, r1
    6b2a:	4310      	orrs	r0, r2
    6b2c:	d000      	beq.n	6b30 <__aeabi_dsub+0x1f4>
    6b2e:	e724      	b.n	697a <__aeabi_dsub+0x3e>
    6b30:	e721      	b.n	6976 <__aeabi_dsub+0x3a>
    6b32:	0023      	movs	r3, r4
    6b34:	433b      	orrs	r3, r7
    6b36:	d100      	bne.n	6b3a <__aeabi_dsub+0x1fe>
    6b38:	e1b9      	b.n	6eae <__aeabi_dsub+0x572>
    6b3a:	2280      	movs	r2, #128	; 0x80
    6b3c:	0312      	lsls	r2, r2, #12
    6b3e:	4314      	orrs	r4, r2
    6b40:	0324      	lsls	r4, r4, #12
    6b42:	0b24      	lsrs	r4, r4, #12
    6b44:	e79f      	b.n	6a86 <__aeabi_dsub+0x14a>
    6b46:	002e      	movs	r6, r5
    6b48:	e77e      	b.n	6a48 <__aeabi_dsub+0x10c>
    6b4a:	0008      	movs	r0, r1
    6b4c:	4310      	orrs	r0, r2
    6b4e:	d100      	bne.n	6b52 <__aeabi_dsub+0x216>
    6b50:	e0ca      	b.n	6ce8 <__aeabi_dsub+0x3ac>
    6b52:	1e58      	subs	r0, r3, #1
    6b54:	4684      	mov	ip, r0
    6b56:	2800      	cmp	r0, #0
    6b58:	d000      	beq.n	6b5c <__aeabi_dsub+0x220>
    6b5a:	e0e7      	b.n	6d2c <__aeabi_dsub+0x3f0>
    6b5c:	4452      	add	r2, sl
    6b5e:	4552      	cmp	r2, sl
    6b60:	4180      	sbcs	r0, r0
    6b62:	1864      	adds	r4, r4, r1
    6b64:	4240      	negs	r0, r0
    6b66:	1824      	adds	r4, r4, r0
    6b68:	0017      	movs	r7, r2
    6b6a:	2601      	movs	r6, #1
    6b6c:	0223      	lsls	r3, r4, #8
    6b6e:	d507      	bpl.n	6b80 <__aeabi_dsub+0x244>
    6b70:	2602      	movs	r6, #2
    6b72:	e7cf      	b.n	6b14 <__aeabi_dsub+0x1d8>
    6b74:	4664      	mov	r4, ip
    6b76:	432c      	orrs	r4, r5
    6b78:	d100      	bne.n	6b7c <__aeabi_dsub+0x240>
    6b7a:	e1b3      	b.n	6ee4 <__aeabi_dsub+0x5a8>
    6b7c:	002c      	movs	r4, r5
    6b7e:	4667      	mov	r7, ip
    6b80:	077b      	lsls	r3, r7, #29
    6b82:	d000      	beq.n	6b86 <__aeabi_dsub+0x24a>
    6b84:	e762      	b.n	6a4c <__aeabi_dsub+0x110>
    6b86:	0763      	lsls	r3, r4, #29
    6b88:	08ff      	lsrs	r7, r7, #3
    6b8a:	431f      	orrs	r7, r3
    6b8c:	2501      	movs	r5, #1
    6b8e:	4643      	mov	r3, r8
    6b90:	08e4      	lsrs	r4, r4, #3
    6b92:	401d      	ands	r5, r3
    6b94:	e793      	b.n	6abe <__aeabi_dsub+0x182>
    6b96:	2d00      	cmp	r5, #0
    6b98:	d178      	bne.n	6c8c <__aeabi_dsub+0x350>
    6b9a:	1c75      	adds	r5, r6, #1
    6b9c:	056d      	lsls	r5, r5, #21
    6b9e:	0d6d      	lsrs	r5, r5, #21
    6ba0:	2d01      	cmp	r5, #1
    6ba2:	dc00      	bgt.n	6ba6 <__aeabi_dsub+0x26a>
    6ba4:	e0f2      	b.n	6d8c <__aeabi_dsub+0x450>
    6ba6:	4650      	mov	r0, sl
    6ba8:	1a80      	subs	r0, r0, r2
    6baa:	4582      	cmp	sl, r0
    6bac:	41bf      	sbcs	r7, r7
    6bae:	1a65      	subs	r5, r4, r1
    6bb0:	427f      	negs	r7, r7
    6bb2:	1bed      	subs	r5, r5, r7
    6bb4:	4684      	mov	ip, r0
    6bb6:	0228      	lsls	r0, r5, #8
    6bb8:	d400      	bmi.n	6bbc <__aeabi_dsub+0x280>
    6bba:	e08c      	b.n	6cd6 <__aeabi_dsub+0x39a>
    6bbc:	4650      	mov	r0, sl
    6bbe:	1a17      	subs	r7, r2, r0
    6bc0:	42ba      	cmp	r2, r7
    6bc2:	4192      	sbcs	r2, r2
    6bc4:	1b0c      	subs	r4, r1, r4
    6bc6:	4255      	negs	r5, r2
    6bc8:	1b65      	subs	r5, r4, r5
    6bca:	4698      	mov	r8, r3
    6bcc:	e714      	b.n	69f8 <__aeabi_dsub+0xbc>
    6bce:	2501      	movs	r5, #1
    6bd0:	4643      	mov	r3, r8
    6bd2:	2400      	movs	r4, #0
    6bd4:	401d      	ands	r5, r3
    6bd6:	2700      	movs	r7, #0
    6bd8:	e755      	b.n	6a86 <__aeabi_dsub+0x14a>
    6bda:	4c2a      	ldr	r4, [pc, #168]	; (6c84 <__aeabi_dsub+0x348>)
    6bdc:	1af6      	subs	r6, r6, r3
    6bde:	402c      	ands	r4, r5
    6be0:	e732      	b.n	6a48 <__aeabi_dsub+0x10c>
    6be2:	003d      	movs	r5, r7
    6be4:	3828      	subs	r0, #40	; 0x28
    6be6:	4085      	lsls	r5, r0
    6be8:	2700      	movs	r7, #0
    6bea:	e717      	b.n	6a1c <__aeabi_dsub+0xe0>
    6bec:	0038      	movs	r0, r7
    6bee:	f000 faa7 	bl	7140 <__clzsi2>
    6bf2:	3020      	adds	r0, #32
    6bf4:	e706      	b.n	6a04 <__aeabi_dsub+0xc8>
    6bf6:	430a      	orrs	r2, r1
    6bf8:	0017      	movs	r7, r2
    6bfa:	2100      	movs	r1, #0
    6bfc:	1e7a      	subs	r2, r7, #1
    6bfe:	4197      	sbcs	r7, r2
    6c00:	e6ee      	b.n	69e0 <__aeabi_dsub+0xa4>
    6c02:	2b00      	cmp	r3, #0
    6c04:	d000      	beq.n	6c08 <__aeabi_dsub+0x2cc>
    6c06:	e0e5      	b.n	6dd4 <__aeabi_dsub+0x498>
    6c08:	1c73      	adds	r3, r6, #1
    6c0a:	469c      	mov	ip, r3
    6c0c:	055b      	lsls	r3, r3, #21
    6c0e:	0d5b      	lsrs	r3, r3, #21
    6c10:	2b01      	cmp	r3, #1
    6c12:	dc00      	bgt.n	6c16 <__aeabi_dsub+0x2da>
    6c14:	e09f      	b.n	6d56 <__aeabi_dsub+0x41a>
    6c16:	4b1a      	ldr	r3, [pc, #104]	; (6c80 <__aeabi_dsub+0x344>)
    6c18:	459c      	cmp	ip, r3
    6c1a:	d100      	bne.n	6c1e <__aeabi_dsub+0x2e2>
    6c1c:	e0c5      	b.n	6daa <__aeabi_dsub+0x46e>
    6c1e:	4452      	add	r2, sl
    6c20:	4552      	cmp	r2, sl
    6c22:	4180      	sbcs	r0, r0
    6c24:	1864      	adds	r4, r4, r1
    6c26:	4240      	negs	r0, r0
    6c28:	1824      	adds	r4, r4, r0
    6c2a:	07e7      	lsls	r7, r4, #31
    6c2c:	0852      	lsrs	r2, r2, #1
    6c2e:	4317      	orrs	r7, r2
    6c30:	0864      	lsrs	r4, r4, #1
    6c32:	4666      	mov	r6, ip
    6c34:	e708      	b.n	6a48 <__aeabi_dsub+0x10c>
    6c36:	4812      	ldr	r0, [pc, #72]	; (6c80 <__aeabi_dsub+0x344>)
    6c38:	4285      	cmp	r5, r0
    6c3a:	d100      	bne.n	6c3e <__aeabi_dsub+0x302>
    6c3c:	e085      	b.n	6d4a <__aeabi_dsub+0x40e>
    6c3e:	001d      	movs	r5, r3
    6c40:	e6bc      	b.n	69bc <__aeabi_dsub+0x80>
    6c42:	0029      	movs	r1, r5
    6c44:	3e1f      	subs	r6, #31
    6c46:	40f1      	lsrs	r1, r6
    6c48:	2b20      	cmp	r3, #32
    6c4a:	d100      	bne.n	6c4e <__aeabi_dsub+0x312>
    6c4c:	e07f      	b.n	6d4e <__aeabi_dsub+0x412>
    6c4e:	2240      	movs	r2, #64	; 0x40
    6c50:	1ad3      	subs	r3, r2, r3
    6c52:	409d      	lsls	r5, r3
    6c54:	432f      	orrs	r7, r5
    6c56:	1e7d      	subs	r5, r7, #1
    6c58:	41af      	sbcs	r7, r5
    6c5a:	2400      	movs	r4, #0
    6c5c:	430f      	orrs	r7, r1
    6c5e:	2600      	movs	r6, #0
    6c60:	e78e      	b.n	6b80 <__aeabi_dsub+0x244>
    6c62:	002b      	movs	r3, r5
    6c64:	000f      	movs	r7, r1
    6c66:	3b20      	subs	r3, #32
    6c68:	40df      	lsrs	r7, r3
    6c6a:	2d20      	cmp	r5, #32
    6c6c:	d071      	beq.n	6d52 <__aeabi_dsub+0x416>
    6c6e:	2340      	movs	r3, #64	; 0x40
    6c70:	1b5d      	subs	r5, r3, r5
    6c72:	40a9      	lsls	r1, r5
    6c74:	430a      	orrs	r2, r1
    6c76:	1e51      	subs	r1, r2, #1
    6c78:	418a      	sbcs	r2, r1
    6c7a:	2100      	movs	r1, #0
    6c7c:	4317      	orrs	r7, r2
    6c7e:	e6af      	b.n	69e0 <__aeabi_dsub+0xa4>
    6c80:	000007ff 	.word	0x000007ff
    6c84:	ff7fffff 	.word	0xff7fffff
    6c88:	800fffff 	.word	0x800fffff
    6c8c:	2e00      	cmp	r6, #0
    6c8e:	d03e      	beq.n	6d0e <__aeabi_dsub+0x3d2>
    6c90:	4eb3      	ldr	r6, [pc, #716]	; (6f60 <__aeabi_dsub+0x624>)
    6c92:	45b4      	cmp	ip, r6
    6c94:	d045      	beq.n	6d22 <__aeabi_dsub+0x3e6>
    6c96:	2680      	movs	r6, #128	; 0x80
    6c98:	0436      	lsls	r6, r6, #16
    6c9a:	426d      	negs	r5, r5
    6c9c:	4334      	orrs	r4, r6
    6c9e:	2d38      	cmp	r5, #56	; 0x38
    6ca0:	dd00      	ble.n	6ca4 <__aeabi_dsub+0x368>
    6ca2:	e0a8      	b.n	6df6 <__aeabi_dsub+0x4ba>
    6ca4:	2d1f      	cmp	r5, #31
    6ca6:	dd00      	ble.n	6caa <__aeabi_dsub+0x36e>
    6ca8:	e11f      	b.n	6eea <__aeabi_dsub+0x5ae>
    6caa:	2620      	movs	r6, #32
    6cac:	0027      	movs	r7, r4
    6cae:	4650      	mov	r0, sl
    6cb0:	1b76      	subs	r6, r6, r5
    6cb2:	40b7      	lsls	r7, r6
    6cb4:	40e8      	lsrs	r0, r5
    6cb6:	4307      	orrs	r7, r0
    6cb8:	4650      	mov	r0, sl
    6cba:	40b0      	lsls	r0, r6
    6cbc:	1e46      	subs	r6, r0, #1
    6cbe:	41b0      	sbcs	r0, r6
    6cc0:	40ec      	lsrs	r4, r5
    6cc2:	4338      	orrs	r0, r7
    6cc4:	1a17      	subs	r7, r2, r0
    6cc6:	42ba      	cmp	r2, r7
    6cc8:	4192      	sbcs	r2, r2
    6cca:	1b0c      	subs	r4, r1, r4
    6ccc:	4252      	negs	r2, r2
    6cce:	1aa4      	subs	r4, r4, r2
    6cd0:	4666      	mov	r6, ip
    6cd2:	4698      	mov	r8, r3
    6cd4:	e68b      	b.n	69ee <__aeabi_dsub+0xb2>
    6cd6:	4664      	mov	r4, ip
    6cd8:	4667      	mov	r7, ip
    6cda:	432c      	orrs	r4, r5
    6cdc:	d000      	beq.n	6ce0 <__aeabi_dsub+0x3a4>
    6cde:	e68b      	b.n	69f8 <__aeabi_dsub+0xbc>
    6ce0:	2500      	movs	r5, #0
    6ce2:	2600      	movs	r6, #0
    6ce4:	2700      	movs	r7, #0
    6ce6:	e6ea      	b.n	6abe <__aeabi_dsub+0x182>
    6ce8:	001e      	movs	r6, r3
    6cea:	e6ad      	b.n	6a48 <__aeabi_dsub+0x10c>
    6cec:	2b1f      	cmp	r3, #31
    6cee:	dc60      	bgt.n	6db2 <__aeabi_dsub+0x476>
    6cf0:	2720      	movs	r7, #32
    6cf2:	1af8      	subs	r0, r7, r3
    6cf4:	000f      	movs	r7, r1
    6cf6:	4684      	mov	ip, r0
    6cf8:	4087      	lsls	r7, r0
    6cfa:	0010      	movs	r0, r2
    6cfc:	40d8      	lsrs	r0, r3
    6cfe:	4307      	orrs	r7, r0
    6d00:	4660      	mov	r0, ip
    6d02:	4082      	lsls	r2, r0
    6d04:	1e50      	subs	r0, r2, #1
    6d06:	4182      	sbcs	r2, r0
    6d08:	40d9      	lsrs	r1, r3
    6d0a:	4317      	orrs	r7, r2
    6d0c:	e6f5      	b.n	6afa <__aeabi_dsub+0x1be>
    6d0e:	0026      	movs	r6, r4
    6d10:	4650      	mov	r0, sl
    6d12:	4306      	orrs	r6, r0
    6d14:	d005      	beq.n	6d22 <__aeabi_dsub+0x3e6>
    6d16:	43ed      	mvns	r5, r5
    6d18:	2d00      	cmp	r5, #0
    6d1a:	d0d3      	beq.n	6cc4 <__aeabi_dsub+0x388>
    6d1c:	4e90      	ldr	r6, [pc, #576]	; (6f60 <__aeabi_dsub+0x624>)
    6d1e:	45b4      	cmp	ip, r6
    6d20:	d1bd      	bne.n	6c9e <__aeabi_dsub+0x362>
    6d22:	000c      	movs	r4, r1
    6d24:	0017      	movs	r7, r2
    6d26:	4666      	mov	r6, ip
    6d28:	4698      	mov	r8, r3
    6d2a:	e68d      	b.n	6a48 <__aeabi_dsub+0x10c>
    6d2c:	488c      	ldr	r0, [pc, #560]	; (6f60 <__aeabi_dsub+0x624>)
    6d2e:	4283      	cmp	r3, r0
    6d30:	d00b      	beq.n	6d4a <__aeabi_dsub+0x40e>
    6d32:	4663      	mov	r3, ip
    6d34:	e6d9      	b.n	6aea <__aeabi_dsub+0x1ae>
    6d36:	2d00      	cmp	r5, #0
    6d38:	d000      	beq.n	6d3c <__aeabi_dsub+0x400>
    6d3a:	e096      	b.n	6e6a <__aeabi_dsub+0x52e>
    6d3c:	0008      	movs	r0, r1
    6d3e:	4310      	orrs	r0, r2
    6d40:	d100      	bne.n	6d44 <__aeabi_dsub+0x408>
    6d42:	e0e2      	b.n	6f0a <__aeabi_dsub+0x5ce>
    6d44:	000c      	movs	r4, r1
    6d46:	0017      	movs	r7, r2
    6d48:	4698      	mov	r8, r3
    6d4a:	4e85      	ldr	r6, [pc, #532]	; (6f60 <__aeabi_dsub+0x624>)
    6d4c:	e67c      	b.n	6a48 <__aeabi_dsub+0x10c>
    6d4e:	2500      	movs	r5, #0
    6d50:	e780      	b.n	6c54 <__aeabi_dsub+0x318>
    6d52:	2100      	movs	r1, #0
    6d54:	e78e      	b.n	6c74 <__aeabi_dsub+0x338>
    6d56:	0023      	movs	r3, r4
    6d58:	4650      	mov	r0, sl
    6d5a:	4303      	orrs	r3, r0
    6d5c:	2e00      	cmp	r6, #0
    6d5e:	d000      	beq.n	6d62 <__aeabi_dsub+0x426>
    6d60:	e0a8      	b.n	6eb4 <__aeabi_dsub+0x578>
    6d62:	2b00      	cmp	r3, #0
    6d64:	d100      	bne.n	6d68 <__aeabi_dsub+0x42c>
    6d66:	e0de      	b.n	6f26 <__aeabi_dsub+0x5ea>
    6d68:	000b      	movs	r3, r1
    6d6a:	4313      	orrs	r3, r2
    6d6c:	d100      	bne.n	6d70 <__aeabi_dsub+0x434>
    6d6e:	e66b      	b.n	6a48 <__aeabi_dsub+0x10c>
    6d70:	4452      	add	r2, sl
    6d72:	4552      	cmp	r2, sl
    6d74:	4180      	sbcs	r0, r0
    6d76:	1864      	adds	r4, r4, r1
    6d78:	4240      	negs	r0, r0
    6d7a:	1824      	adds	r4, r4, r0
    6d7c:	0017      	movs	r7, r2
    6d7e:	0223      	lsls	r3, r4, #8
    6d80:	d400      	bmi.n	6d84 <__aeabi_dsub+0x448>
    6d82:	e6fd      	b.n	6b80 <__aeabi_dsub+0x244>
    6d84:	4b77      	ldr	r3, [pc, #476]	; (6f64 <__aeabi_dsub+0x628>)
    6d86:	4666      	mov	r6, ip
    6d88:	401c      	ands	r4, r3
    6d8a:	e65d      	b.n	6a48 <__aeabi_dsub+0x10c>
    6d8c:	0025      	movs	r5, r4
    6d8e:	4650      	mov	r0, sl
    6d90:	4305      	orrs	r5, r0
    6d92:	2e00      	cmp	r6, #0
    6d94:	d1cf      	bne.n	6d36 <__aeabi_dsub+0x3fa>
    6d96:	2d00      	cmp	r5, #0
    6d98:	d14f      	bne.n	6e3a <__aeabi_dsub+0x4fe>
    6d9a:	000c      	movs	r4, r1
    6d9c:	4314      	orrs	r4, r2
    6d9e:	d100      	bne.n	6da2 <__aeabi_dsub+0x466>
    6da0:	e0a0      	b.n	6ee4 <__aeabi_dsub+0x5a8>
    6da2:	000c      	movs	r4, r1
    6da4:	0017      	movs	r7, r2
    6da6:	4698      	mov	r8, r3
    6da8:	e64e      	b.n	6a48 <__aeabi_dsub+0x10c>
    6daa:	4666      	mov	r6, ip
    6dac:	2400      	movs	r4, #0
    6dae:	2700      	movs	r7, #0
    6db0:	e685      	b.n	6abe <__aeabi_dsub+0x182>
    6db2:	001f      	movs	r7, r3
    6db4:	0008      	movs	r0, r1
    6db6:	3f20      	subs	r7, #32
    6db8:	40f8      	lsrs	r0, r7
    6dba:	0007      	movs	r7, r0
    6dbc:	2b20      	cmp	r3, #32
    6dbe:	d100      	bne.n	6dc2 <__aeabi_dsub+0x486>
    6dc0:	e08e      	b.n	6ee0 <__aeabi_dsub+0x5a4>
    6dc2:	2040      	movs	r0, #64	; 0x40
    6dc4:	1ac3      	subs	r3, r0, r3
    6dc6:	4099      	lsls	r1, r3
    6dc8:	430a      	orrs	r2, r1
    6dca:	1e51      	subs	r1, r2, #1
    6dcc:	418a      	sbcs	r2, r1
    6dce:	2100      	movs	r1, #0
    6dd0:	4317      	orrs	r7, r2
    6dd2:	e692      	b.n	6afa <__aeabi_dsub+0x1be>
    6dd4:	2e00      	cmp	r6, #0
    6dd6:	d114      	bne.n	6e02 <__aeabi_dsub+0x4c6>
    6dd8:	0026      	movs	r6, r4
    6dda:	4650      	mov	r0, sl
    6ddc:	4306      	orrs	r6, r0
    6dde:	d062      	beq.n	6ea6 <__aeabi_dsub+0x56a>
    6de0:	43db      	mvns	r3, r3
    6de2:	2b00      	cmp	r3, #0
    6de4:	d15c      	bne.n	6ea0 <__aeabi_dsub+0x564>
    6de6:	1887      	adds	r7, r0, r2
    6de8:	4297      	cmp	r7, r2
    6dea:	4192      	sbcs	r2, r2
    6dec:	1864      	adds	r4, r4, r1
    6dee:	4252      	negs	r2, r2
    6df0:	18a4      	adds	r4, r4, r2
    6df2:	4666      	mov	r6, ip
    6df4:	e687      	b.n	6b06 <__aeabi_dsub+0x1ca>
    6df6:	4650      	mov	r0, sl
    6df8:	4320      	orrs	r0, r4
    6dfa:	1e44      	subs	r4, r0, #1
    6dfc:	41a0      	sbcs	r0, r4
    6dfe:	2400      	movs	r4, #0
    6e00:	e760      	b.n	6cc4 <__aeabi_dsub+0x388>
    6e02:	4e57      	ldr	r6, [pc, #348]	; (6f60 <__aeabi_dsub+0x624>)
    6e04:	45b4      	cmp	ip, r6
    6e06:	d04e      	beq.n	6ea6 <__aeabi_dsub+0x56a>
    6e08:	2680      	movs	r6, #128	; 0x80
    6e0a:	0436      	lsls	r6, r6, #16
    6e0c:	425b      	negs	r3, r3
    6e0e:	4334      	orrs	r4, r6
    6e10:	2b38      	cmp	r3, #56	; 0x38
    6e12:	dd00      	ble.n	6e16 <__aeabi_dsub+0x4da>
    6e14:	e07f      	b.n	6f16 <__aeabi_dsub+0x5da>
    6e16:	2b1f      	cmp	r3, #31
    6e18:	dd00      	ble.n	6e1c <__aeabi_dsub+0x4e0>
    6e1a:	e08b      	b.n	6f34 <__aeabi_dsub+0x5f8>
    6e1c:	2620      	movs	r6, #32
    6e1e:	0027      	movs	r7, r4
    6e20:	4650      	mov	r0, sl
    6e22:	1af6      	subs	r6, r6, r3
    6e24:	40b7      	lsls	r7, r6
    6e26:	40d8      	lsrs	r0, r3
    6e28:	4307      	orrs	r7, r0
    6e2a:	4650      	mov	r0, sl
    6e2c:	40b0      	lsls	r0, r6
    6e2e:	1e46      	subs	r6, r0, #1
    6e30:	41b0      	sbcs	r0, r6
    6e32:	4307      	orrs	r7, r0
    6e34:	40dc      	lsrs	r4, r3
    6e36:	18bf      	adds	r7, r7, r2
    6e38:	e7d6      	b.n	6de8 <__aeabi_dsub+0x4ac>
    6e3a:	000d      	movs	r5, r1
    6e3c:	4315      	orrs	r5, r2
    6e3e:	d100      	bne.n	6e42 <__aeabi_dsub+0x506>
    6e40:	e602      	b.n	6a48 <__aeabi_dsub+0x10c>
    6e42:	4650      	mov	r0, sl
    6e44:	1a80      	subs	r0, r0, r2
    6e46:	4582      	cmp	sl, r0
    6e48:	41bf      	sbcs	r7, r7
    6e4a:	1a65      	subs	r5, r4, r1
    6e4c:	427f      	negs	r7, r7
    6e4e:	1bed      	subs	r5, r5, r7
    6e50:	4684      	mov	ip, r0
    6e52:	0228      	lsls	r0, r5, #8
    6e54:	d400      	bmi.n	6e58 <__aeabi_dsub+0x51c>
    6e56:	e68d      	b.n	6b74 <__aeabi_dsub+0x238>
    6e58:	4650      	mov	r0, sl
    6e5a:	1a17      	subs	r7, r2, r0
    6e5c:	42ba      	cmp	r2, r7
    6e5e:	4192      	sbcs	r2, r2
    6e60:	1b0c      	subs	r4, r1, r4
    6e62:	4252      	negs	r2, r2
    6e64:	1aa4      	subs	r4, r4, r2
    6e66:	4698      	mov	r8, r3
    6e68:	e5ee      	b.n	6a48 <__aeabi_dsub+0x10c>
    6e6a:	000d      	movs	r5, r1
    6e6c:	4315      	orrs	r5, r2
    6e6e:	d100      	bne.n	6e72 <__aeabi_dsub+0x536>
    6e70:	e76b      	b.n	6d4a <__aeabi_dsub+0x40e>
    6e72:	4650      	mov	r0, sl
    6e74:	0767      	lsls	r7, r4, #29
    6e76:	08c0      	lsrs	r0, r0, #3
    6e78:	4307      	orrs	r7, r0
    6e7a:	2080      	movs	r0, #128	; 0x80
    6e7c:	08e4      	lsrs	r4, r4, #3
    6e7e:	0300      	lsls	r0, r0, #12
    6e80:	4204      	tst	r4, r0
    6e82:	d007      	beq.n	6e94 <__aeabi_dsub+0x558>
    6e84:	08cd      	lsrs	r5, r1, #3
    6e86:	4205      	tst	r5, r0
    6e88:	d104      	bne.n	6e94 <__aeabi_dsub+0x558>
    6e8a:	002c      	movs	r4, r5
    6e8c:	4698      	mov	r8, r3
    6e8e:	08d7      	lsrs	r7, r2, #3
    6e90:	0749      	lsls	r1, r1, #29
    6e92:	430f      	orrs	r7, r1
    6e94:	0f7b      	lsrs	r3, r7, #29
    6e96:	00e4      	lsls	r4, r4, #3
    6e98:	431c      	orrs	r4, r3
    6e9a:	00ff      	lsls	r7, r7, #3
    6e9c:	4e30      	ldr	r6, [pc, #192]	; (6f60 <__aeabi_dsub+0x624>)
    6e9e:	e5d3      	b.n	6a48 <__aeabi_dsub+0x10c>
    6ea0:	4e2f      	ldr	r6, [pc, #188]	; (6f60 <__aeabi_dsub+0x624>)
    6ea2:	45b4      	cmp	ip, r6
    6ea4:	d1b4      	bne.n	6e10 <__aeabi_dsub+0x4d4>
    6ea6:	000c      	movs	r4, r1
    6ea8:	0017      	movs	r7, r2
    6eaa:	4666      	mov	r6, ip
    6eac:	e5cc      	b.n	6a48 <__aeabi_dsub+0x10c>
    6eae:	2700      	movs	r7, #0
    6eb0:	2400      	movs	r4, #0
    6eb2:	e5e8      	b.n	6a86 <__aeabi_dsub+0x14a>
    6eb4:	2b00      	cmp	r3, #0
    6eb6:	d039      	beq.n	6f2c <__aeabi_dsub+0x5f0>
    6eb8:	000b      	movs	r3, r1
    6eba:	4313      	orrs	r3, r2
    6ebc:	d100      	bne.n	6ec0 <__aeabi_dsub+0x584>
    6ebe:	e744      	b.n	6d4a <__aeabi_dsub+0x40e>
    6ec0:	08c0      	lsrs	r0, r0, #3
    6ec2:	0767      	lsls	r7, r4, #29
    6ec4:	4307      	orrs	r7, r0
    6ec6:	2080      	movs	r0, #128	; 0x80
    6ec8:	08e4      	lsrs	r4, r4, #3
    6eca:	0300      	lsls	r0, r0, #12
    6ecc:	4204      	tst	r4, r0
    6ece:	d0e1      	beq.n	6e94 <__aeabi_dsub+0x558>
    6ed0:	08cb      	lsrs	r3, r1, #3
    6ed2:	4203      	tst	r3, r0
    6ed4:	d1de      	bne.n	6e94 <__aeabi_dsub+0x558>
    6ed6:	08d7      	lsrs	r7, r2, #3
    6ed8:	0749      	lsls	r1, r1, #29
    6eda:	430f      	orrs	r7, r1
    6edc:	001c      	movs	r4, r3
    6ede:	e7d9      	b.n	6e94 <__aeabi_dsub+0x558>
    6ee0:	2100      	movs	r1, #0
    6ee2:	e771      	b.n	6dc8 <__aeabi_dsub+0x48c>
    6ee4:	2500      	movs	r5, #0
    6ee6:	2700      	movs	r7, #0
    6ee8:	e5e9      	b.n	6abe <__aeabi_dsub+0x182>
    6eea:	002e      	movs	r6, r5
    6eec:	0027      	movs	r7, r4
    6eee:	3e20      	subs	r6, #32
    6ef0:	40f7      	lsrs	r7, r6
    6ef2:	2d20      	cmp	r5, #32
    6ef4:	d02f      	beq.n	6f56 <__aeabi_dsub+0x61a>
    6ef6:	2640      	movs	r6, #64	; 0x40
    6ef8:	1b75      	subs	r5, r6, r5
    6efa:	40ac      	lsls	r4, r5
    6efc:	4650      	mov	r0, sl
    6efe:	4320      	orrs	r0, r4
    6f00:	1e44      	subs	r4, r0, #1
    6f02:	41a0      	sbcs	r0, r4
    6f04:	2400      	movs	r4, #0
    6f06:	4338      	orrs	r0, r7
    6f08:	e6dc      	b.n	6cc4 <__aeabi_dsub+0x388>
    6f0a:	2480      	movs	r4, #128	; 0x80
    6f0c:	2500      	movs	r5, #0
    6f0e:	0324      	lsls	r4, r4, #12
    6f10:	4e13      	ldr	r6, [pc, #76]	; (6f60 <__aeabi_dsub+0x624>)
    6f12:	2700      	movs	r7, #0
    6f14:	e5d3      	b.n	6abe <__aeabi_dsub+0x182>
    6f16:	4650      	mov	r0, sl
    6f18:	4320      	orrs	r0, r4
    6f1a:	0007      	movs	r7, r0
    6f1c:	1e78      	subs	r0, r7, #1
    6f1e:	4187      	sbcs	r7, r0
    6f20:	2400      	movs	r4, #0
    6f22:	18bf      	adds	r7, r7, r2
    6f24:	e760      	b.n	6de8 <__aeabi_dsub+0x4ac>
    6f26:	000c      	movs	r4, r1
    6f28:	0017      	movs	r7, r2
    6f2a:	e58d      	b.n	6a48 <__aeabi_dsub+0x10c>
    6f2c:	000c      	movs	r4, r1
    6f2e:	0017      	movs	r7, r2
    6f30:	4e0b      	ldr	r6, [pc, #44]	; (6f60 <__aeabi_dsub+0x624>)
    6f32:	e589      	b.n	6a48 <__aeabi_dsub+0x10c>
    6f34:	001e      	movs	r6, r3
    6f36:	0027      	movs	r7, r4
    6f38:	3e20      	subs	r6, #32
    6f3a:	40f7      	lsrs	r7, r6
    6f3c:	2b20      	cmp	r3, #32
    6f3e:	d00c      	beq.n	6f5a <__aeabi_dsub+0x61e>
    6f40:	2640      	movs	r6, #64	; 0x40
    6f42:	1af3      	subs	r3, r6, r3
    6f44:	409c      	lsls	r4, r3
    6f46:	4650      	mov	r0, sl
    6f48:	4320      	orrs	r0, r4
    6f4a:	1e44      	subs	r4, r0, #1
    6f4c:	41a0      	sbcs	r0, r4
    6f4e:	4307      	orrs	r7, r0
    6f50:	2400      	movs	r4, #0
    6f52:	18bf      	adds	r7, r7, r2
    6f54:	e748      	b.n	6de8 <__aeabi_dsub+0x4ac>
    6f56:	2400      	movs	r4, #0
    6f58:	e7d0      	b.n	6efc <__aeabi_dsub+0x5c0>
    6f5a:	2400      	movs	r4, #0
    6f5c:	e7f3      	b.n	6f46 <__aeabi_dsub+0x60a>
    6f5e:	46c0      	nop			; (mov r8, r8)
    6f60:	000007ff 	.word	0x000007ff
    6f64:	ff7fffff 	.word	0xff7fffff

00006f68 <__aeabi_d2iz>:
    6f68:	b530      	push	{r4, r5, lr}
    6f6a:	4d13      	ldr	r5, [pc, #76]	; (6fb8 <__aeabi_d2iz+0x50>)
    6f6c:	030a      	lsls	r2, r1, #12
    6f6e:	004b      	lsls	r3, r1, #1
    6f70:	0b12      	lsrs	r2, r2, #12
    6f72:	0d5b      	lsrs	r3, r3, #21
    6f74:	0fc9      	lsrs	r1, r1, #31
    6f76:	2400      	movs	r4, #0
    6f78:	42ab      	cmp	r3, r5
    6f7a:	dd10      	ble.n	6f9e <__aeabi_d2iz+0x36>
    6f7c:	4c0f      	ldr	r4, [pc, #60]	; (6fbc <__aeabi_d2iz+0x54>)
    6f7e:	42a3      	cmp	r3, r4
    6f80:	dc0f      	bgt.n	6fa2 <__aeabi_d2iz+0x3a>
    6f82:	2480      	movs	r4, #128	; 0x80
    6f84:	4d0e      	ldr	r5, [pc, #56]	; (6fc0 <__aeabi_d2iz+0x58>)
    6f86:	0364      	lsls	r4, r4, #13
    6f88:	4322      	orrs	r2, r4
    6f8a:	1aed      	subs	r5, r5, r3
    6f8c:	2d1f      	cmp	r5, #31
    6f8e:	dd0b      	ble.n	6fa8 <__aeabi_d2iz+0x40>
    6f90:	480c      	ldr	r0, [pc, #48]	; (6fc4 <__aeabi_d2iz+0x5c>)
    6f92:	1ac3      	subs	r3, r0, r3
    6f94:	40da      	lsrs	r2, r3
    6f96:	4254      	negs	r4, r2
    6f98:	2900      	cmp	r1, #0
    6f9a:	d100      	bne.n	6f9e <__aeabi_d2iz+0x36>
    6f9c:	0014      	movs	r4, r2
    6f9e:	0020      	movs	r0, r4
    6fa0:	bd30      	pop	{r4, r5, pc}
    6fa2:	4b09      	ldr	r3, [pc, #36]	; (6fc8 <__aeabi_d2iz+0x60>)
    6fa4:	18cc      	adds	r4, r1, r3
    6fa6:	e7fa      	b.n	6f9e <__aeabi_d2iz+0x36>
    6fa8:	4c08      	ldr	r4, [pc, #32]	; (6fcc <__aeabi_d2iz+0x64>)
    6faa:	40e8      	lsrs	r0, r5
    6fac:	46a4      	mov	ip, r4
    6fae:	4463      	add	r3, ip
    6fb0:	409a      	lsls	r2, r3
    6fb2:	4302      	orrs	r2, r0
    6fb4:	e7ef      	b.n	6f96 <__aeabi_d2iz+0x2e>
    6fb6:	46c0      	nop			; (mov r8, r8)
    6fb8:	000003fe 	.word	0x000003fe
    6fbc:	0000041d 	.word	0x0000041d
    6fc0:	00000433 	.word	0x00000433
    6fc4:	00000413 	.word	0x00000413
    6fc8:	7fffffff 	.word	0x7fffffff
    6fcc:	fffffbed 	.word	0xfffffbed

00006fd0 <__aeabi_i2d>:
    6fd0:	b570      	push	{r4, r5, r6, lr}
    6fd2:	2800      	cmp	r0, #0
    6fd4:	d030      	beq.n	7038 <__aeabi_i2d+0x68>
    6fd6:	17c3      	asrs	r3, r0, #31
    6fd8:	18c4      	adds	r4, r0, r3
    6fda:	405c      	eors	r4, r3
    6fdc:	0fc5      	lsrs	r5, r0, #31
    6fde:	0020      	movs	r0, r4
    6fe0:	f000 f8ae 	bl	7140 <__clzsi2>
    6fe4:	4b17      	ldr	r3, [pc, #92]	; (7044 <__aeabi_i2d+0x74>)
    6fe6:	4a18      	ldr	r2, [pc, #96]	; (7048 <__aeabi_i2d+0x78>)
    6fe8:	1a1b      	subs	r3, r3, r0
    6fea:	1ad2      	subs	r2, r2, r3
    6fec:	2a1f      	cmp	r2, #31
    6fee:	dd18      	ble.n	7022 <__aeabi_i2d+0x52>
    6ff0:	4a16      	ldr	r2, [pc, #88]	; (704c <__aeabi_i2d+0x7c>)
    6ff2:	1ad2      	subs	r2, r2, r3
    6ff4:	4094      	lsls	r4, r2
    6ff6:	2200      	movs	r2, #0
    6ff8:	0324      	lsls	r4, r4, #12
    6ffa:	055b      	lsls	r3, r3, #21
    6ffc:	0b24      	lsrs	r4, r4, #12
    6ffe:	0d5b      	lsrs	r3, r3, #21
    7000:	2100      	movs	r1, #0
    7002:	0010      	movs	r0, r2
    7004:	0324      	lsls	r4, r4, #12
    7006:	0d0a      	lsrs	r2, r1, #20
    7008:	0b24      	lsrs	r4, r4, #12
    700a:	0512      	lsls	r2, r2, #20
    700c:	4322      	orrs	r2, r4
    700e:	4c10      	ldr	r4, [pc, #64]	; (7050 <__aeabi_i2d+0x80>)
    7010:	051b      	lsls	r3, r3, #20
    7012:	4022      	ands	r2, r4
    7014:	4313      	orrs	r3, r2
    7016:	005b      	lsls	r3, r3, #1
    7018:	07ed      	lsls	r5, r5, #31
    701a:	085b      	lsrs	r3, r3, #1
    701c:	432b      	orrs	r3, r5
    701e:	0019      	movs	r1, r3
    7020:	bd70      	pop	{r4, r5, r6, pc}
    7022:	0021      	movs	r1, r4
    7024:	4091      	lsls	r1, r2
    7026:	000a      	movs	r2, r1
    7028:	210b      	movs	r1, #11
    702a:	1a08      	subs	r0, r1, r0
    702c:	40c4      	lsrs	r4, r0
    702e:	055b      	lsls	r3, r3, #21
    7030:	0324      	lsls	r4, r4, #12
    7032:	0b24      	lsrs	r4, r4, #12
    7034:	0d5b      	lsrs	r3, r3, #21
    7036:	e7e3      	b.n	7000 <__aeabi_i2d+0x30>
    7038:	2500      	movs	r5, #0
    703a:	2300      	movs	r3, #0
    703c:	2400      	movs	r4, #0
    703e:	2200      	movs	r2, #0
    7040:	e7de      	b.n	7000 <__aeabi_i2d+0x30>
    7042:	46c0      	nop			; (mov r8, r8)
    7044:	0000041e 	.word	0x0000041e
    7048:	00000433 	.word	0x00000433
    704c:	00000413 	.word	0x00000413
    7050:	800fffff 	.word	0x800fffff

00007054 <__aeabi_ui2d>:
    7054:	b510      	push	{r4, lr}
    7056:	1e04      	subs	r4, r0, #0
    7058:	d028      	beq.n	70ac <__aeabi_ui2d+0x58>
    705a:	f000 f871 	bl	7140 <__clzsi2>
    705e:	4b15      	ldr	r3, [pc, #84]	; (70b4 <__aeabi_ui2d+0x60>)
    7060:	4a15      	ldr	r2, [pc, #84]	; (70b8 <__aeabi_ui2d+0x64>)
    7062:	1a1b      	subs	r3, r3, r0
    7064:	1ad2      	subs	r2, r2, r3
    7066:	2a1f      	cmp	r2, #31
    7068:	dd15      	ble.n	7096 <__aeabi_ui2d+0x42>
    706a:	4a14      	ldr	r2, [pc, #80]	; (70bc <__aeabi_ui2d+0x68>)
    706c:	1ad2      	subs	r2, r2, r3
    706e:	4094      	lsls	r4, r2
    7070:	2200      	movs	r2, #0
    7072:	0324      	lsls	r4, r4, #12
    7074:	055b      	lsls	r3, r3, #21
    7076:	0b24      	lsrs	r4, r4, #12
    7078:	0d5b      	lsrs	r3, r3, #21
    707a:	2100      	movs	r1, #0
    707c:	0010      	movs	r0, r2
    707e:	0324      	lsls	r4, r4, #12
    7080:	0d0a      	lsrs	r2, r1, #20
    7082:	0b24      	lsrs	r4, r4, #12
    7084:	0512      	lsls	r2, r2, #20
    7086:	4322      	orrs	r2, r4
    7088:	4c0d      	ldr	r4, [pc, #52]	; (70c0 <__aeabi_ui2d+0x6c>)
    708a:	051b      	lsls	r3, r3, #20
    708c:	4022      	ands	r2, r4
    708e:	4313      	orrs	r3, r2
    7090:	005b      	lsls	r3, r3, #1
    7092:	0859      	lsrs	r1, r3, #1
    7094:	bd10      	pop	{r4, pc}
    7096:	0021      	movs	r1, r4
    7098:	4091      	lsls	r1, r2
    709a:	000a      	movs	r2, r1
    709c:	210b      	movs	r1, #11
    709e:	1a08      	subs	r0, r1, r0
    70a0:	40c4      	lsrs	r4, r0
    70a2:	055b      	lsls	r3, r3, #21
    70a4:	0324      	lsls	r4, r4, #12
    70a6:	0b24      	lsrs	r4, r4, #12
    70a8:	0d5b      	lsrs	r3, r3, #21
    70aa:	e7e6      	b.n	707a <__aeabi_ui2d+0x26>
    70ac:	2300      	movs	r3, #0
    70ae:	2400      	movs	r4, #0
    70b0:	2200      	movs	r2, #0
    70b2:	e7e2      	b.n	707a <__aeabi_ui2d+0x26>
    70b4:	0000041e 	.word	0x0000041e
    70b8:	00000433 	.word	0x00000433
    70bc:	00000413 	.word	0x00000413
    70c0:	800fffff 	.word	0x800fffff

000070c4 <__aeabi_cdrcmple>:
    70c4:	4684      	mov	ip, r0
    70c6:	1c10      	adds	r0, r2, #0
    70c8:	4662      	mov	r2, ip
    70ca:	468c      	mov	ip, r1
    70cc:	1c19      	adds	r1, r3, #0
    70ce:	4663      	mov	r3, ip
    70d0:	e000      	b.n	70d4 <__aeabi_cdcmpeq>
    70d2:	46c0      	nop			; (mov r8, r8)

000070d4 <__aeabi_cdcmpeq>:
    70d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    70d6:	f000 f8ef 	bl	72b8 <__ledf2>
    70da:	2800      	cmp	r0, #0
    70dc:	d401      	bmi.n	70e2 <__aeabi_cdcmpeq+0xe>
    70de:	2100      	movs	r1, #0
    70e0:	42c8      	cmn	r0, r1
    70e2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000070e4 <__aeabi_dcmpeq>:
    70e4:	b510      	push	{r4, lr}
    70e6:	f000 f849 	bl	717c <__eqdf2>
    70ea:	4240      	negs	r0, r0
    70ec:	3001      	adds	r0, #1
    70ee:	bd10      	pop	{r4, pc}

000070f0 <__aeabi_dcmplt>:
    70f0:	b510      	push	{r4, lr}
    70f2:	f000 f8e1 	bl	72b8 <__ledf2>
    70f6:	2800      	cmp	r0, #0
    70f8:	db01      	blt.n	70fe <__aeabi_dcmplt+0xe>
    70fa:	2000      	movs	r0, #0
    70fc:	bd10      	pop	{r4, pc}
    70fe:	2001      	movs	r0, #1
    7100:	bd10      	pop	{r4, pc}
    7102:	46c0      	nop			; (mov r8, r8)

00007104 <__aeabi_dcmple>:
    7104:	b510      	push	{r4, lr}
    7106:	f000 f8d7 	bl	72b8 <__ledf2>
    710a:	2800      	cmp	r0, #0
    710c:	dd01      	ble.n	7112 <__aeabi_dcmple+0xe>
    710e:	2000      	movs	r0, #0
    7110:	bd10      	pop	{r4, pc}
    7112:	2001      	movs	r0, #1
    7114:	bd10      	pop	{r4, pc}
    7116:	46c0      	nop			; (mov r8, r8)

00007118 <__aeabi_dcmpgt>:
    7118:	b510      	push	{r4, lr}
    711a:	f000 f869 	bl	71f0 <__gedf2>
    711e:	2800      	cmp	r0, #0
    7120:	dc01      	bgt.n	7126 <__aeabi_dcmpgt+0xe>
    7122:	2000      	movs	r0, #0
    7124:	bd10      	pop	{r4, pc}
    7126:	2001      	movs	r0, #1
    7128:	bd10      	pop	{r4, pc}
    712a:	46c0      	nop			; (mov r8, r8)

0000712c <__aeabi_dcmpge>:
    712c:	b510      	push	{r4, lr}
    712e:	f000 f85f 	bl	71f0 <__gedf2>
    7132:	2800      	cmp	r0, #0
    7134:	da01      	bge.n	713a <__aeabi_dcmpge+0xe>
    7136:	2000      	movs	r0, #0
    7138:	bd10      	pop	{r4, pc}
    713a:	2001      	movs	r0, #1
    713c:	bd10      	pop	{r4, pc}
    713e:	46c0      	nop			; (mov r8, r8)

00007140 <__clzsi2>:
    7140:	211c      	movs	r1, #28
    7142:	2301      	movs	r3, #1
    7144:	041b      	lsls	r3, r3, #16
    7146:	4298      	cmp	r0, r3
    7148:	d301      	bcc.n	714e <__clzsi2+0xe>
    714a:	0c00      	lsrs	r0, r0, #16
    714c:	3910      	subs	r1, #16
    714e:	0a1b      	lsrs	r3, r3, #8
    7150:	4298      	cmp	r0, r3
    7152:	d301      	bcc.n	7158 <__clzsi2+0x18>
    7154:	0a00      	lsrs	r0, r0, #8
    7156:	3908      	subs	r1, #8
    7158:	091b      	lsrs	r3, r3, #4
    715a:	4298      	cmp	r0, r3
    715c:	d301      	bcc.n	7162 <__clzsi2+0x22>
    715e:	0900      	lsrs	r0, r0, #4
    7160:	3904      	subs	r1, #4
    7162:	a202      	add	r2, pc, #8	; (adr r2, 716c <__clzsi2+0x2c>)
    7164:	5c10      	ldrb	r0, [r2, r0]
    7166:	1840      	adds	r0, r0, r1
    7168:	4770      	bx	lr
    716a:	46c0      	nop			; (mov r8, r8)
    716c:	02020304 	.word	0x02020304
    7170:	01010101 	.word	0x01010101
	...

0000717c <__eqdf2>:
    717c:	b5f0      	push	{r4, r5, r6, r7, lr}
    717e:	464f      	mov	r7, r9
    7180:	4646      	mov	r6, r8
    7182:	46d6      	mov	lr, sl
    7184:	005c      	lsls	r4, r3, #1
    7186:	b5c0      	push	{r6, r7, lr}
    7188:	031f      	lsls	r7, r3, #12
    718a:	0fdb      	lsrs	r3, r3, #31
    718c:	469a      	mov	sl, r3
    718e:	4b17      	ldr	r3, [pc, #92]	; (71ec <__eqdf2+0x70>)
    7190:	030e      	lsls	r6, r1, #12
    7192:	004d      	lsls	r5, r1, #1
    7194:	4684      	mov	ip, r0
    7196:	4680      	mov	r8, r0
    7198:	0b36      	lsrs	r6, r6, #12
    719a:	0d6d      	lsrs	r5, r5, #21
    719c:	0fc9      	lsrs	r1, r1, #31
    719e:	4691      	mov	r9, r2
    71a0:	0b3f      	lsrs	r7, r7, #12
    71a2:	0d64      	lsrs	r4, r4, #21
    71a4:	2001      	movs	r0, #1
    71a6:	429d      	cmp	r5, r3
    71a8:	d008      	beq.n	71bc <__eqdf2+0x40>
    71aa:	429c      	cmp	r4, r3
    71ac:	d001      	beq.n	71b2 <__eqdf2+0x36>
    71ae:	42a5      	cmp	r5, r4
    71b0:	d00b      	beq.n	71ca <__eqdf2+0x4e>
    71b2:	bc1c      	pop	{r2, r3, r4}
    71b4:	4690      	mov	r8, r2
    71b6:	4699      	mov	r9, r3
    71b8:	46a2      	mov	sl, r4
    71ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    71bc:	4663      	mov	r3, ip
    71be:	4333      	orrs	r3, r6
    71c0:	d1f7      	bne.n	71b2 <__eqdf2+0x36>
    71c2:	42ac      	cmp	r4, r5
    71c4:	d1f5      	bne.n	71b2 <__eqdf2+0x36>
    71c6:	433a      	orrs	r2, r7
    71c8:	d1f3      	bne.n	71b2 <__eqdf2+0x36>
    71ca:	2001      	movs	r0, #1
    71cc:	42be      	cmp	r6, r7
    71ce:	d1f0      	bne.n	71b2 <__eqdf2+0x36>
    71d0:	45c8      	cmp	r8, r9
    71d2:	d1ee      	bne.n	71b2 <__eqdf2+0x36>
    71d4:	4551      	cmp	r1, sl
    71d6:	d007      	beq.n	71e8 <__eqdf2+0x6c>
    71d8:	2d00      	cmp	r5, #0
    71da:	d1ea      	bne.n	71b2 <__eqdf2+0x36>
    71dc:	4663      	mov	r3, ip
    71de:	431e      	orrs	r6, r3
    71e0:	0030      	movs	r0, r6
    71e2:	1e46      	subs	r6, r0, #1
    71e4:	41b0      	sbcs	r0, r6
    71e6:	e7e4      	b.n	71b2 <__eqdf2+0x36>
    71e8:	2000      	movs	r0, #0
    71ea:	e7e2      	b.n	71b2 <__eqdf2+0x36>
    71ec:	000007ff 	.word	0x000007ff

000071f0 <__gedf2>:
    71f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    71f2:	4645      	mov	r5, r8
    71f4:	46de      	mov	lr, fp
    71f6:	4657      	mov	r7, sl
    71f8:	464e      	mov	r6, r9
    71fa:	b5e0      	push	{r5, r6, r7, lr}
    71fc:	031f      	lsls	r7, r3, #12
    71fe:	0b3d      	lsrs	r5, r7, #12
    7200:	4f2c      	ldr	r7, [pc, #176]	; (72b4 <__gedf2+0xc4>)
    7202:	030e      	lsls	r6, r1, #12
    7204:	004c      	lsls	r4, r1, #1
    7206:	46ab      	mov	fp, r5
    7208:	005d      	lsls	r5, r3, #1
    720a:	4684      	mov	ip, r0
    720c:	0b36      	lsrs	r6, r6, #12
    720e:	0d64      	lsrs	r4, r4, #21
    7210:	0fc9      	lsrs	r1, r1, #31
    7212:	4690      	mov	r8, r2
    7214:	0d6d      	lsrs	r5, r5, #21
    7216:	0fdb      	lsrs	r3, r3, #31
    7218:	42bc      	cmp	r4, r7
    721a:	d02a      	beq.n	7272 <__gedf2+0x82>
    721c:	4f25      	ldr	r7, [pc, #148]	; (72b4 <__gedf2+0xc4>)
    721e:	42bd      	cmp	r5, r7
    7220:	d02d      	beq.n	727e <__gedf2+0x8e>
    7222:	2c00      	cmp	r4, #0
    7224:	d10f      	bne.n	7246 <__gedf2+0x56>
    7226:	4330      	orrs	r0, r6
    7228:	0007      	movs	r7, r0
    722a:	4681      	mov	r9, r0
    722c:	4278      	negs	r0, r7
    722e:	4178      	adcs	r0, r7
    7230:	b2c0      	uxtb	r0, r0
    7232:	2d00      	cmp	r5, #0
    7234:	d117      	bne.n	7266 <__gedf2+0x76>
    7236:	465f      	mov	r7, fp
    7238:	433a      	orrs	r2, r7
    723a:	d114      	bne.n	7266 <__gedf2+0x76>
    723c:	464b      	mov	r3, r9
    723e:	2000      	movs	r0, #0
    7240:	2b00      	cmp	r3, #0
    7242:	d00a      	beq.n	725a <__gedf2+0x6a>
    7244:	e006      	b.n	7254 <__gedf2+0x64>
    7246:	2d00      	cmp	r5, #0
    7248:	d102      	bne.n	7250 <__gedf2+0x60>
    724a:	4658      	mov	r0, fp
    724c:	4302      	orrs	r2, r0
    724e:	d001      	beq.n	7254 <__gedf2+0x64>
    7250:	4299      	cmp	r1, r3
    7252:	d018      	beq.n	7286 <__gedf2+0x96>
    7254:	4248      	negs	r0, r1
    7256:	2101      	movs	r1, #1
    7258:	4308      	orrs	r0, r1
    725a:	bc3c      	pop	{r2, r3, r4, r5}
    725c:	4690      	mov	r8, r2
    725e:	4699      	mov	r9, r3
    7260:	46a2      	mov	sl, r4
    7262:	46ab      	mov	fp, r5
    7264:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7266:	2800      	cmp	r0, #0
    7268:	d0f2      	beq.n	7250 <__gedf2+0x60>
    726a:	2001      	movs	r0, #1
    726c:	3b01      	subs	r3, #1
    726e:	4318      	orrs	r0, r3
    7270:	e7f3      	b.n	725a <__gedf2+0x6a>
    7272:	0037      	movs	r7, r6
    7274:	4307      	orrs	r7, r0
    7276:	d0d1      	beq.n	721c <__gedf2+0x2c>
    7278:	2002      	movs	r0, #2
    727a:	4240      	negs	r0, r0
    727c:	e7ed      	b.n	725a <__gedf2+0x6a>
    727e:	465f      	mov	r7, fp
    7280:	4317      	orrs	r7, r2
    7282:	d0ce      	beq.n	7222 <__gedf2+0x32>
    7284:	e7f8      	b.n	7278 <__gedf2+0x88>
    7286:	42ac      	cmp	r4, r5
    7288:	dce4      	bgt.n	7254 <__gedf2+0x64>
    728a:	da03      	bge.n	7294 <__gedf2+0xa4>
    728c:	1e48      	subs	r0, r1, #1
    728e:	2101      	movs	r1, #1
    7290:	4308      	orrs	r0, r1
    7292:	e7e2      	b.n	725a <__gedf2+0x6a>
    7294:	455e      	cmp	r6, fp
    7296:	d8dd      	bhi.n	7254 <__gedf2+0x64>
    7298:	d006      	beq.n	72a8 <__gedf2+0xb8>
    729a:	2000      	movs	r0, #0
    729c:	455e      	cmp	r6, fp
    729e:	d2dc      	bcs.n	725a <__gedf2+0x6a>
    72a0:	2301      	movs	r3, #1
    72a2:	1e48      	subs	r0, r1, #1
    72a4:	4318      	orrs	r0, r3
    72a6:	e7d8      	b.n	725a <__gedf2+0x6a>
    72a8:	45c4      	cmp	ip, r8
    72aa:	d8d3      	bhi.n	7254 <__gedf2+0x64>
    72ac:	2000      	movs	r0, #0
    72ae:	45c4      	cmp	ip, r8
    72b0:	d3f6      	bcc.n	72a0 <__gedf2+0xb0>
    72b2:	e7d2      	b.n	725a <__gedf2+0x6a>
    72b4:	000007ff 	.word	0x000007ff

000072b8 <__ledf2>:
    72b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    72ba:	464e      	mov	r6, r9
    72bc:	4645      	mov	r5, r8
    72be:	46de      	mov	lr, fp
    72c0:	4657      	mov	r7, sl
    72c2:	005c      	lsls	r4, r3, #1
    72c4:	b5e0      	push	{r5, r6, r7, lr}
    72c6:	031f      	lsls	r7, r3, #12
    72c8:	0fdb      	lsrs	r3, r3, #31
    72ca:	4699      	mov	r9, r3
    72cc:	4b2a      	ldr	r3, [pc, #168]	; (7378 <__ledf2+0xc0>)
    72ce:	030e      	lsls	r6, r1, #12
    72d0:	004d      	lsls	r5, r1, #1
    72d2:	0fc9      	lsrs	r1, r1, #31
    72d4:	4684      	mov	ip, r0
    72d6:	0b36      	lsrs	r6, r6, #12
    72d8:	0d6d      	lsrs	r5, r5, #21
    72da:	468b      	mov	fp, r1
    72dc:	4690      	mov	r8, r2
    72de:	0b3f      	lsrs	r7, r7, #12
    72e0:	0d64      	lsrs	r4, r4, #21
    72e2:	429d      	cmp	r5, r3
    72e4:	d020      	beq.n	7328 <__ledf2+0x70>
    72e6:	4b24      	ldr	r3, [pc, #144]	; (7378 <__ledf2+0xc0>)
    72e8:	429c      	cmp	r4, r3
    72ea:	d022      	beq.n	7332 <__ledf2+0x7a>
    72ec:	2d00      	cmp	r5, #0
    72ee:	d112      	bne.n	7316 <__ledf2+0x5e>
    72f0:	4330      	orrs	r0, r6
    72f2:	4243      	negs	r3, r0
    72f4:	4143      	adcs	r3, r0
    72f6:	b2db      	uxtb	r3, r3
    72f8:	2c00      	cmp	r4, #0
    72fa:	d01f      	beq.n	733c <__ledf2+0x84>
    72fc:	2b00      	cmp	r3, #0
    72fe:	d00c      	beq.n	731a <__ledf2+0x62>
    7300:	464b      	mov	r3, r9
    7302:	2001      	movs	r0, #1
    7304:	3b01      	subs	r3, #1
    7306:	4303      	orrs	r3, r0
    7308:	0018      	movs	r0, r3
    730a:	bc3c      	pop	{r2, r3, r4, r5}
    730c:	4690      	mov	r8, r2
    730e:	4699      	mov	r9, r3
    7310:	46a2      	mov	sl, r4
    7312:	46ab      	mov	fp, r5
    7314:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7316:	2c00      	cmp	r4, #0
    7318:	d016      	beq.n	7348 <__ledf2+0x90>
    731a:	45cb      	cmp	fp, r9
    731c:	d017      	beq.n	734e <__ledf2+0x96>
    731e:	465b      	mov	r3, fp
    7320:	4259      	negs	r1, r3
    7322:	2301      	movs	r3, #1
    7324:	430b      	orrs	r3, r1
    7326:	e7ef      	b.n	7308 <__ledf2+0x50>
    7328:	0031      	movs	r1, r6
    732a:	2302      	movs	r3, #2
    732c:	4301      	orrs	r1, r0
    732e:	d1eb      	bne.n	7308 <__ledf2+0x50>
    7330:	e7d9      	b.n	72e6 <__ledf2+0x2e>
    7332:	0039      	movs	r1, r7
    7334:	2302      	movs	r3, #2
    7336:	4311      	orrs	r1, r2
    7338:	d1e6      	bne.n	7308 <__ledf2+0x50>
    733a:	e7d7      	b.n	72ec <__ledf2+0x34>
    733c:	433a      	orrs	r2, r7
    733e:	d1dd      	bne.n	72fc <__ledf2+0x44>
    7340:	2300      	movs	r3, #0
    7342:	2800      	cmp	r0, #0
    7344:	d0e0      	beq.n	7308 <__ledf2+0x50>
    7346:	e7ea      	b.n	731e <__ledf2+0x66>
    7348:	433a      	orrs	r2, r7
    734a:	d1e6      	bne.n	731a <__ledf2+0x62>
    734c:	e7e7      	b.n	731e <__ledf2+0x66>
    734e:	42a5      	cmp	r5, r4
    7350:	dce5      	bgt.n	731e <__ledf2+0x66>
    7352:	db05      	blt.n	7360 <__ledf2+0xa8>
    7354:	42be      	cmp	r6, r7
    7356:	d8e2      	bhi.n	731e <__ledf2+0x66>
    7358:	d007      	beq.n	736a <__ledf2+0xb2>
    735a:	2300      	movs	r3, #0
    735c:	42be      	cmp	r6, r7
    735e:	d2d3      	bcs.n	7308 <__ledf2+0x50>
    7360:	4659      	mov	r1, fp
    7362:	2301      	movs	r3, #1
    7364:	3901      	subs	r1, #1
    7366:	430b      	orrs	r3, r1
    7368:	e7ce      	b.n	7308 <__ledf2+0x50>
    736a:	45c4      	cmp	ip, r8
    736c:	d8d7      	bhi.n	731e <__ledf2+0x66>
    736e:	2300      	movs	r3, #0
    7370:	45c4      	cmp	ip, r8
    7372:	d3f5      	bcc.n	7360 <__ledf2+0xa8>
    7374:	e7c8      	b.n	7308 <__ledf2+0x50>
    7376:	46c0      	nop			; (mov r8, r8)
    7378:	000007ff 	.word	0x000007ff

0000737c <__libc_init_array>:
    737c:	b570      	push	{r4, r5, r6, lr}
    737e:	2600      	movs	r6, #0
    7380:	4d0c      	ldr	r5, [pc, #48]	; (73b4 <__libc_init_array+0x38>)
    7382:	4c0d      	ldr	r4, [pc, #52]	; (73b8 <__libc_init_array+0x3c>)
    7384:	1b64      	subs	r4, r4, r5
    7386:	10a4      	asrs	r4, r4, #2
    7388:	42a6      	cmp	r6, r4
    738a:	d109      	bne.n	73a0 <__libc_init_array+0x24>
    738c:	2600      	movs	r6, #0
    738e:	f001 fa2d 	bl	87ec <_init>
    7392:	4d0a      	ldr	r5, [pc, #40]	; (73bc <__libc_init_array+0x40>)
    7394:	4c0a      	ldr	r4, [pc, #40]	; (73c0 <__libc_init_array+0x44>)
    7396:	1b64      	subs	r4, r4, r5
    7398:	10a4      	asrs	r4, r4, #2
    739a:	42a6      	cmp	r6, r4
    739c:	d105      	bne.n	73aa <__libc_init_array+0x2e>
    739e:	bd70      	pop	{r4, r5, r6, pc}
    73a0:	00b3      	lsls	r3, r6, #2
    73a2:	58eb      	ldr	r3, [r5, r3]
    73a4:	4798      	blx	r3
    73a6:	3601      	adds	r6, #1
    73a8:	e7ee      	b.n	7388 <__libc_init_array+0xc>
    73aa:	00b3      	lsls	r3, r6, #2
    73ac:	58eb      	ldr	r3, [r5, r3]
    73ae:	4798      	blx	r3
    73b0:	3601      	adds	r6, #1
    73b2:	e7f2      	b.n	739a <__libc_init_array+0x1e>
    73b4:	000087f8 	.word	0x000087f8
    73b8:	000087f8 	.word	0x000087f8
    73bc:	000087f8 	.word	0x000087f8
    73c0:	000087fc 	.word	0x000087fc

000073c4 <memcpy>:
    73c4:	2300      	movs	r3, #0
    73c6:	b510      	push	{r4, lr}
    73c8:	429a      	cmp	r2, r3
    73ca:	d100      	bne.n	73ce <memcpy+0xa>
    73cc:	bd10      	pop	{r4, pc}
    73ce:	5ccc      	ldrb	r4, [r1, r3]
    73d0:	54c4      	strb	r4, [r0, r3]
    73d2:	3301      	adds	r3, #1
    73d4:	e7f8      	b.n	73c8 <memcpy+0x4>

000073d6 <memset>:
    73d6:	0003      	movs	r3, r0
    73d8:	1882      	adds	r2, r0, r2
    73da:	4293      	cmp	r3, r2
    73dc:	d100      	bne.n	73e0 <memset+0xa>
    73de:	4770      	bx	lr
    73e0:	7019      	strb	r1, [r3, #0]
    73e2:	3301      	adds	r3, #1
    73e4:	e7f9      	b.n	73da <memset+0x4>
	...

000073e8 <iprintf>:
    73e8:	b40f      	push	{r0, r1, r2, r3}
    73ea:	4b0b      	ldr	r3, [pc, #44]	; (7418 <iprintf+0x30>)
    73ec:	b513      	push	{r0, r1, r4, lr}
    73ee:	681c      	ldr	r4, [r3, #0]
    73f0:	2c00      	cmp	r4, #0
    73f2:	d005      	beq.n	7400 <iprintf+0x18>
    73f4:	69a3      	ldr	r3, [r4, #24]
    73f6:	2b00      	cmp	r3, #0
    73f8:	d102      	bne.n	7400 <iprintf+0x18>
    73fa:	0020      	movs	r0, r4
    73fc:	f000 faf2 	bl	79e4 <__sinit>
    7400:	ab05      	add	r3, sp, #20
    7402:	9a04      	ldr	r2, [sp, #16]
    7404:	68a1      	ldr	r1, [r4, #8]
    7406:	0020      	movs	r0, r4
    7408:	9301      	str	r3, [sp, #4]
    740a:	f000 fcc7 	bl	7d9c <_vfiprintf_r>
    740e:	bc16      	pop	{r1, r2, r4}
    7410:	bc08      	pop	{r3}
    7412:	b004      	add	sp, #16
    7414:	4718      	bx	r3
    7416:	46c0      	nop			; (mov r8, r8)
    7418:	20000020 	.word	0x20000020

0000741c <_puts_r>:
    741c:	b570      	push	{r4, r5, r6, lr}
    741e:	0005      	movs	r5, r0
    7420:	000e      	movs	r6, r1
    7422:	2800      	cmp	r0, #0
    7424:	d004      	beq.n	7430 <_puts_r+0x14>
    7426:	6983      	ldr	r3, [r0, #24]
    7428:	2b00      	cmp	r3, #0
    742a:	d101      	bne.n	7430 <_puts_r+0x14>
    742c:	f000 fada 	bl	79e4 <__sinit>
    7430:	69ab      	ldr	r3, [r5, #24]
    7432:	68ac      	ldr	r4, [r5, #8]
    7434:	2b00      	cmp	r3, #0
    7436:	d102      	bne.n	743e <_puts_r+0x22>
    7438:	0028      	movs	r0, r5
    743a:	f000 fad3 	bl	79e4 <__sinit>
    743e:	4b24      	ldr	r3, [pc, #144]	; (74d0 <_puts_r+0xb4>)
    7440:	429c      	cmp	r4, r3
    7442:	d10f      	bne.n	7464 <_puts_r+0x48>
    7444:	686c      	ldr	r4, [r5, #4]
    7446:	89a3      	ldrh	r3, [r4, #12]
    7448:	071b      	lsls	r3, r3, #28
    744a:	d502      	bpl.n	7452 <_puts_r+0x36>
    744c:	6923      	ldr	r3, [r4, #16]
    744e:	2b00      	cmp	r3, #0
    7450:	d120      	bne.n	7494 <_puts_r+0x78>
    7452:	0021      	movs	r1, r4
    7454:	0028      	movs	r0, r5
    7456:	f000 f957 	bl	7708 <__swsetup_r>
    745a:	2800      	cmp	r0, #0
    745c:	d01a      	beq.n	7494 <_puts_r+0x78>
    745e:	2001      	movs	r0, #1
    7460:	4240      	negs	r0, r0
    7462:	bd70      	pop	{r4, r5, r6, pc}
    7464:	4b1b      	ldr	r3, [pc, #108]	; (74d4 <_puts_r+0xb8>)
    7466:	429c      	cmp	r4, r3
    7468:	d101      	bne.n	746e <_puts_r+0x52>
    746a:	68ac      	ldr	r4, [r5, #8]
    746c:	e7eb      	b.n	7446 <_puts_r+0x2a>
    746e:	4b1a      	ldr	r3, [pc, #104]	; (74d8 <_puts_r+0xbc>)
    7470:	429c      	cmp	r4, r3
    7472:	d1e8      	bne.n	7446 <_puts_r+0x2a>
    7474:	68ec      	ldr	r4, [r5, #12]
    7476:	e7e6      	b.n	7446 <_puts_r+0x2a>
    7478:	3b01      	subs	r3, #1
    747a:	3601      	adds	r6, #1
    747c:	60a3      	str	r3, [r4, #8]
    747e:	2b00      	cmp	r3, #0
    7480:	da04      	bge.n	748c <_puts_r+0x70>
    7482:	69a2      	ldr	r2, [r4, #24]
    7484:	4293      	cmp	r3, r2
    7486:	db16      	blt.n	74b6 <_puts_r+0x9a>
    7488:	290a      	cmp	r1, #10
    748a:	d014      	beq.n	74b6 <_puts_r+0x9a>
    748c:	6823      	ldr	r3, [r4, #0]
    748e:	1c5a      	adds	r2, r3, #1
    7490:	6022      	str	r2, [r4, #0]
    7492:	7019      	strb	r1, [r3, #0]
    7494:	7831      	ldrb	r1, [r6, #0]
    7496:	68a3      	ldr	r3, [r4, #8]
    7498:	2900      	cmp	r1, #0
    749a:	d1ed      	bne.n	7478 <_puts_r+0x5c>
    749c:	3b01      	subs	r3, #1
    749e:	60a3      	str	r3, [r4, #8]
    74a0:	2b00      	cmp	r3, #0
    74a2:	da0f      	bge.n	74c4 <_puts_r+0xa8>
    74a4:	0022      	movs	r2, r4
    74a6:	310a      	adds	r1, #10
    74a8:	0028      	movs	r0, r5
    74aa:	f000 f8d7 	bl	765c <__swbuf_r>
    74ae:	1c43      	adds	r3, r0, #1
    74b0:	d0d5      	beq.n	745e <_puts_r+0x42>
    74b2:	200a      	movs	r0, #10
    74b4:	e7d5      	b.n	7462 <_puts_r+0x46>
    74b6:	0022      	movs	r2, r4
    74b8:	0028      	movs	r0, r5
    74ba:	f000 f8cf 	bl	765c <__swbuf_r>
    74be:	1c43      	adds	r3, r0, #1
    74c0:	d1e8      	bne.n	7494 <_puts_r+0x78>
    74c2:	e7cc      	b.n	745e <_puts_r+0x42>
    74c4:	200a      	movs	r0, #10
    74c6:	6823      	ldr	r3, [r4, #0]
    74c8:	1c5a      	adds	r2, r3, #1
    74ca:	6022      	str	r2, [r4, #0]
    74cc:	7018      	strb	r0, [r3, #0]
    74ce:	e7c8      	b.n	7462 <_puts_r+0x46>
    74d0:	00008778 	.word	0x00008778
    74d4:	00008798 	.word	0x00008798
    74d8:	00008758 	.word	0x00008758

000074dc <puts>:
    74dc:	b510      	push	{r4, lr}
    74de:	4b03      	ldr	r3, [pc, #12]	; (74ec <puts+0x10>)
    74e0:	0001      	movs	r1, r0
    74e2:	6818      	ldr	r0, [r3, #0]
    74e4:	f7ff ff9a 	bl	741c <_puts_r>
    74e8:	bd10      	pop	{r4, pc}
    74ea:	46c0      	nop			; (mov r8, r8)
    74ec:	20000020 	.word	0x20000020

000074f0 <setbuf>:
    74f0:	424a      	negs	r2, r1
    74f2:	414a      	adcs	r2, r1
    74f4:	2380      	movs	r3, #128	; 0x80
    74f6:	b510      	push	{r4, lr}
    74f8:	0052      	lsls	r2, r2, #1
    74fa:	00db      	lsls	r3, r3, #3
    74fc:	f000 f802 	bl	7504 <setvbuf>
    7500:	bd10      	pop	{r4, pc}
	...

00007504 <setvbuf>:
    7504:	b5f0      	push	{r4, r5, r6, r7, lr}
    7506:	001d      	movs	r5, r3
    7508:	4b4f      	ldr	r3, [pc, #316]	; (7648 <setvbuf+0x144>)
    750a:	b085      	sub	sp, #20
    750c:	681e      	ldr	r6, [r3, #0]
    750e:	0004      	movs	r4, r0
    7510:	000f      	movs	r7, r1
    7512:	9200      	str	r2, [sp, #0]
    7514:	2e00      	cmp	r6, #0
    7516:	d005      	beq.n	7524 <setvbuf+0x20>
    7518:	69b3      	ldr	r3, [r6, #24]
    751a:	2b00      	cmp	r3, #0
    751c:	d102      	bne.n	7524 <setvbuf+0x20>
    751e:	0030      	movs	r0, r6
    7520:	f000 fa60 	bl	79e4 <__sinit>
    7524:	4b49      	ldr	r3, [pc, #292]	; (764c <setvbuf+0x148>)
    7526:	429c      	cmp	r4, r3
    7528:	d150      	bne.n	75cc <setvbuf+0xc8>
    752a:	6874      	ldr	r4, [r6, #4]
    752c:	9b00      	ldr	r3, [sp, #0]
    752e:	2b02      	cmp	r3, #2
    7530:	d005      	beq.n	753e <setvbuf+0x3a>
    7532:	2b01      	cmp	r3, #1
    7534:	d900      	bls.n	7538 <setvbuf+0x34>
    7536:	e084      	b.n	7642 <setvbuf+0x13e>
    7538:	2d00      	cmp	r5, #0
    753a:	da00      	bge.n	753e <setvbuf+0x3a>
    753c:	e081      	b.n	7642 <setvbuf+0x13e>
    753e:	0021      	movs	r1, r4
    7540:	0030      	movs	r0, r6
    7542:	f000 f9e1 	bl	7908 <_fflush_r>
    7546:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7548:	2900      	cmp	r1, #0
    754a:	d008      	beq.n	755e <setvbuf+0x5a>
    754c:	0023      	movs	r3, r4
    754e:	3344      	adds	r3, #68	; 0x44
    7550:	4299      	cmp	r1, r3
    7552:	d002      	beq.n	755a <setvbuf+0x56>
    7554:	0030      	movs	r0, r6
    7556:	f000 fb51 	bl	7bfc <_free_r>
    755a:	2300      	movs	r3, #0
    755c:	6363      	str	r3, [r4, #52]	; 0x34
    755e:	2300      	movs	r3, #0
    7560:	61a3      	str	r3, [r4, #24]
    7562:	6063      	str	r3, [r4, #4]
    7564:	89a3      	ldrh	r3, [r4, #12]
    7566:	061b      	lsls	r3, r3, #24
    7568:	d503      	bpl.n	7572 <setvbuf+0x6e>
    756a:	6921      	ldr	r1, [r4, #16]
    756c:	0030      	movs	r0, r6
    756e:	f000 fb45 	bl	7bfc <_free_r>
    7572:	89a3      	ldrh	r3, [r4, #12]
    7574:	4a36      	ldr	r2, [pc, #216]	; (7650 <setvbuf+0x14c>)
    7576:	4013      	ands	r3, r2
    7578:	81a3      	strh	r3, [r4, #12]
    757a:	9b00      	ldr	r3, [sp, #0]
    757c:	2b02      	cmp	r3, #2
    757e:	d05a      	beq.n	7636 <setvbuf+0x132>
    7580:	ab03      	add	r3, sp, #12
    7582:	aa02      	add	r2, sp, #8
    7584:	0021      	movs	r1, r4
    7586:	0030      	movs	r0, r6
    7588:	f000 fac2 	bl	7b10 <__swhatbuf_r>
    758c:	89a3      	ldrh	r3, [r4, #12]
    758e:	4318      	orrs	r0, r3
    7590:	81a0      	strh	r0, [r4, #12]
    7592:	2d00      	cmp	r5, #0
    7594:	d124      	bne.n	75e0 <setvbuf+0xdc>
    7596:	9d02      	ldr	r5, [sp, #8]
    7598:	0028      	movs	r0, r5
    759a:	f000 fb25 	bl	7be8 <malloc>
    759e:	9501      	str	r5, [sp, #4]
    75a0:	1e07      	subs	r7, r0, #0
    75a2:	d142      	bne.n	762a <setvbuf+0x126>
    75a4:	9b02      	ldr	r3, [sp, #8]
    75a6:	9301      	str	r3, [sp, #4]
    75a8:	42ab      	cmp	r3, r5
    75aa:	d139      	bne.n	7620 <setvbuf+0x11c>
    75ac:	2001      	movs	r0, #1
    75ae:	4240      	negs	r0, r0
    75b0:	2302      	movs	r3, #2
    75b2:	89a2      	ldrh	r2, [r4, #12]
    75b4:	4313      	orrs	r3, r2
    75b6:	81a3      	strh	r3, [r4, #12]
    75b8:	2300      	movs	r3, #0
    75ba:	60a3      	str	r3, [r4, #8]
    75bc:	0023      	movs	r3, r4
    75be:	3347      	adds	r3, #71	; 0x47
    75c0:	6023      	str	r3, [r4, #0]
    75c2:	6123      	str	r3, [r4, #16]
    75c4:	2301      	movs	r3, #1
    75c6:	6163      	str	r3, [r4, #20]
    75c8:	b005      	add	sp, #20
    75ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    75cc:	4b21      	ldr	r3, [pc, #132]	; (7654 <setvbuf+0x150>)
    75ce:	429c      	cmp	r4, r3
    75d0:	d101      	bne.n	75d6 <setvbuf+0xd2>
    75d2:	68b4      	ldr	r4, [r6, #8]
    75d4:	e7aa      	b.n	752c <setvbuf+0x28>
    75d6:	4b20      	ldr	r3, [pc, #128]	; (7658 <setvbuf+0x154>)
    75d8:	429c      	cmp	r4, r3
    75da:	d1a7      	bne.n	752c <setvbuf+0x28>
    75dc:	68f4      	ldr	r4, [r6, #12]
    75de:	e7a5      	b.n	752c <setvbuf+0x28>
    75e0:	2f00      	cmp	r7, #0
    75e2:	d0d9      	beq.n	7598 <setvbuf+0x94>
    75e4:	69b3      	ldr	r3, [r6, #24]
    75e6:	2b00      	cmp	r3, #0
    75e8:	d102      	bne.n	75f0 <setvbuf+0xec>
    75ea:	0030      	movs	r0, r6
    75ec:	f000 f9fa 	bl	79e4 <__sinit>
    75f0:	9b00      	ldr	r3, [sp, #0]
    75f2:	2b01      	cmp	r3, #1
    75f4:	d103      	bne.n	75fe <setvbuf+0xfa>
    75f6:	89a3      	ldrh	r3, [r4, #12]
    75f8:	9a00      	ldr	r2, [sp, #0]
    75fa:	431a      	orrs	r2, r3
    75fc:	81a2      	strh	r2, [r4, #12]
    75fe:	2008      	movs	r0, #8
    7600:	89a3      	ldrh	r3, [r4, #12]
    7602:	6027      	str	r7, [r4, #0]
    7604:	6127      	str	r7, [r4, #16]
    7606:	6165      	str	r5, [r4, #20]
    7608:	4018      	ands	r0, r3
    760a:	d018      	beq.n	763e <setvbuf+0x13a>
    760c:	2001      	movs	r0, #1
    760e:	4018      	ands	r0, r3
    7610:	2300      	movs	r3, #0
    7612:	4298      	cmp	r0, r3
    7614:	d011      	beq.n	763a <setvbuf+0x136>
    7616:	426d      	negs	r5, r5
    7618:	60a3      	str	r3, [r4, #8]
    761a:	61a5      	str	r5, [r4, #24]
    761c:	0018      	movs	r0, r3
    761e:	e7d3      	b.n	75c8 <setvbuf+0xc4>
    7620:	9801      	ldr	r0, [sp, #4]
    7622:	f000 fae1 	bl	7be8 <malloc>
    7626:	1e07      	subs	r7, r0, #0
    7628:	d0c0      	beq.n	75ac <setvbuf+0xa8>
    762a:	2380      	movs	r3, #128	; 0x80
    762c:	89a2      	ldrh	r2, [r4, #12]
    762e:	9d01      	ldr	r5, [sp, #4]
    7630:	4313      	orrs	r3, r2
    7632:	81a3      	strh	r3, [r4, #12]
    7634:	e7d6      	b.n	75e4 <setvbuf+0xe0>
    7636:	2000      	movs	r0, #0
    7638:	e7ba      	b.n	75b0 <setvbuf+0xac>
    763a:	60a5      	str	r5, [r4, #8]
    763c:	e7c4      	b.n	75c8 <setvbuf+0xc4>
    763e:	60a0      	str	r0, [r4, #8]
    7640:	e7c2      	b.n	75c8 <setvbuf+0xc4>
    7642:	2001      	movs	r0, #1
    7644:	4240      	negs	r0, r0
    7646:	e7bf      	b.n	75c8 <setvbuf+0xc4>
    7648:	20000020 	.word	0x20000020
    764c:	00008778 	.word	0x00008778
    7650:	fffff35c 	.word	0xfffff35c
    7654:	00008798 	.word	0x00008798
    7658:	00008758 	.word	0x00008758

0000765c <__swbuf_r>:
    765c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    765e:	0005      	movs	r5, r0
    7660:	000e      	movs	r6, r1
    7662:	0014      	movs	r4, r2
    7664:	2800      	cmp	r0, #0
    7666:	d004      	beq.n	7672 <__swbuf_r+0x16>
    7668:	6983      	ldr	r3, [r0, #24]
    766a:	2b00      	cmp	r3, #0
    766c:	d101      	bne.n	7672 <__swbuf_r+0x16>
    766e:	f000 f9b9 	bl	79e4 <__sinit>
    7672:	4b22      	ldr	r3, [pc, #136]	; (76fc <__swbuf_r+0xa0>)
    7674:	429c      	cmp	r4, r3
    7676:	d12d      	bne.n	76d4 <__swbuf_r+0x78>
    7678:	686c      	ldr	r4, [r5, #4]
    767a:	69a3      	ldr	r3, [r4, #24]
    767c:	60a3      	str	r3, [r4, #8]
    767e:	89a3      	ldrh	r3, [r4, #12]
    7680:	071b      	lsls	r3, r3, #28
    7682:	d531      	bpl.n	76e8 <__swbuf_r+0x8c>
    7684:	6923      	ldr	r3, [r4, #16]
    7686:	2b00      	cmp	r3, #0
    7688:	d02e      	beq.n	76e8 <__swbuf_r+0x8c>
    768a:	6823      	ldr	r3, [r4, #0]
    768c:	6922      	ldr	r2, [r4, #16]
    768e:	b2f7      	uxtb	r7, r6
    7690:	1a98      	subs	r0, r3, r2
    7692:	6963      	ldr	r3, [r4, #20]
    7694:	b2f6      	uxtb	r6, r6
    7696:	4298      	cmp	r0, r3
    7698:	db05      	blt.n	76a6 <__swbuf_r+0x4a>
    769a:	0021      	movs	r1, r4
    769c:	0028      	movs	r0, r5
    769e:	f000 f933 	bl	7908 <_fflush_r>
    76a2:	2800      	cmp	r0, #0
    76a4:	d126      	bne.n	76f4 <__swbuf_r+0x98>
    76a6:	68a3      	ldr	r3, [r4, #8]
    76a8:	3001      	adds	r0, #1
    76aa:	3b01      	subs	r3, #1
    76ac:	60a3      	str	r3, [r4, #8]
    76ae:	6823      	ldr	r3, [r4, #0]
    76b0:	1c5a      	adds	r2, r3, #1
    76b2:	6022      	str	r2, [r4, #0]
    76b4:	701f      	strb	r7, [r3, #0]
    76b6:	6963      	ldr	r3, [r4, #20]
    76b8:	4298      	cmp	r0, r3
    76ba:	d004      	beq.n	76c6 <__swbuf_r+0x6a>
    76bc:	89a3      	ldrh	r3, [r4, #12]
    76be:	07db      	lsls	r3, r3, #31
    76c0:	d51a      	bpl.n	76f8 <__swbuf_r+0x9c>
    76c2:	2e0a      	cmp	r6, #10
    76c4:	d118      	bne.n	76f8 <__swbuf_r+0x9c>
    76c6:	0021      	movs	r1, r4
    76c8:	0028      	movs	r0, r5
    76ca:	f000 f91d 	bl	7908 <_fflush_r>
    76ce:	2800      	cmp	r0, #0
    76d0:	d012      	beq.n	76f8 <__swbuf_r+0x9c>
    76d2:	e00f      	b.n	76f4 <__swbuf_r+0x98>
    76d4:	4b0a      	ldr	r3, [pc, #40]	; (7700 <__swbuf_r+0xa4>)
    76d6:	429c      	cmp	r4, r3
    76d8:	d101      	bne.n	76de <__swbuf_r+0x82>
    76da:	68ac      	ldr	r4, [r5, #8]
    76dc:	e7cd      	b.n	767a <__swbuf_r+0x1e>
    76de:	4b09      	ldr	r3, [pc, #36]	; (7704 <__swbuf_r+0xa8>)
    76e0:	429c      	cmp	r4, r3
    76e2:	d1ca      	bne.n	767a <__swbuf_r+0x1e>
    76e4:	68ec      	ldr	r4, [r5, #12]
    76e6:	e7c8      	b.n	767a <__swbuf_r+0x1e>
    76e8:	0021      	movs	r1, r4
    76ea:	0028      	movs	r0, r5
    76ec:	f000 f80c 	bl	7708 <__swsetup_r>
    76f0:	2800      	cmp	r0, #0
    76f2:	d0ca      	beq.n	768a <__swbuf_r+0x2e>
    76f4:	2601      	movs	r6, #1
    76f6:	4276      	negs	r6, r6
    76f8:	0030      	movs	r0, r6
    76fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    76fc:	00008778 	.word	0x00008778
    7700:	00008798 	.word	0x00008798
    7704:	00008758 	.word	0x00008758

00007708 <__swsetup_r>:
    7708:	4b36      	ldr	r3, [pc, #216]	; (77e4 <__swsetup_r+0xdc>)
    770a:	b570      	push	{r4, r5, r6, lr}
    770c:	681d      	ldr	r5, [r3, #0]
    770e:	0006      	movs	r6, r0
    7710:	000c      	movs	r4, r1
    7712:	2d00      	cmp	r5, #0
    7714:	d005      	beq.n	7722 <__swsetup_r+0x1a>
    7716:	69ab      	ldr	r3, [r5, #24]
    7718:	2b00      	cmp	r3, #0
    771a:	d102      	bne.n	7722 <__swsetup_r+0x1a>
    771c:	0028      	movs	r0, r5
    771e:	f000 f961 	bl	79e4 <__sinit>
    7722:	4b31      	ldr	r3, [pc, #196]	; (77e8 <__swsetup_r+0xe0>)
    7724:	429c      	cmp	r4, r3
    7726:	d10f      	bne.n	7748 <__swsetup_r+0x40>
    7728:	686c      	ldr	r4, [r5, #4]
    772a:	230c      	movs	r3, #12
    772c:	5ee2      	ldrsh	r2, [r4, r3]
    772e:	b293      	uxth	r3, r2
    7730:	0719      	lsls	r1, r3, #28
    7732:	d42d      	bmi.n	7790 <__swsetup_r+0x88>
    7734:	06d9      	lsls	r1, r3, #27
    7736:	d411      	bmi.n	775c <__swsetup_r+0x54>
    7738:	2309      	movs	r3, #9
    773a:	2001      	movs	r0, #1
    773c:	6033      	str	r3, [r6, #0]
    773e:	3337      	adds	r3, #55	; 0x37
    7740:	4313      	orrs	r3, r2
    7742:	81a3      	strh	r3, [r4, #12]
    7744:	4240      	negs	r0, r0
    7746:	bd70      	pop	{r4, r5, r6, pc}
    7748:	4b28      	ldr	r3, [pc, #160]	; (77ec <__swsetup_r+0xe4>)
    774a:	429c      	cmp	r4, r3
    774c:	d101      	bne.n	7752 <__swsetup_r+0x4a>
    774e:	68ac      	ldr	r4, [r5, #8]
    7750:	e7eb      	b.n	772a <__swsetup_r+0x22>
    7752:	4b27      	ldr	r3, [pc, #156]	; (77f0 <__swsetup_r+0xe8>)
    7754:	429c      	cmp	r4, r3
    7756:	d1e8      	bne.n	772a <__swsetup_r+0x22>
    7758:	68ec      	ldr	r4, [r5, #12]
    775a:	e7e6      	b.n	772a <__swsetup_r+0x22>
    775c:	075b      	lsls	r3, r3, #29
    775e:	d513      	bpl.n	7788 <__swsetup_r+0x80>
    7760:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7762:	2900      	cmp	r1, #0
    7764:	d008      	beq.n	7778 <__swsetup_r+0x70>
    7766:	0023      	movs	r3, r4
    7768:	3344      	adds	r3, #68	; 0x44
    776a:	4299      	cmp	r1, r3
    776c:	d002      	beq.n	7774 <__swsetup_r+0x6c>
    776e:	0030      	movs	r0, r6
    7770:	f000 fa44 	bl	7bfc <_free_r>
    7774:	2300      	movs	r3, #0
    7776:	6363      	str	r3, [r4, #52]	; 0x34
    7778:	2224      	movs	r2, #36	; 0x24
    777a:	89a3      	ldrh	r3, [r4, #12]
    777c:	4393      	bics	r3, r2
    777e:	81a3      	strh	r3, [r4, #12]
    7780:	2300      	movs	r3, #0
    7782:	6063      	str	r3, [r4, #4]
    7784:	6923      	ldr	r3, [r4, #16]
    7786:	6023      	str	r3, [r4, #0]
    7788:	2308      	movs	r3, #8
    778a:	89a2      	ldrh	r2, [r4, #12]
    778c:	4313      	orrs	r3, r2
    778e:	81a3      	strh	r3, [r4, #12]
    7790:	6923      	ldr	r3, [r4, #16]
    7792:	2b00      	cmp	r3, #0
    7794:	d10b      	bne.n	77ae <__swsetup_r+0xa6>
    7796:	21a0      	movs	r1, #160	; 0xa0
    7798:	2280      	movs	r2, #128	; 0x80
    779a:	89a3      	ldrh	r3, [r4, #12]
    779c:	0089      	lsls	r1, r1, #2
    779e:	0092      	lsls	r2, r2, #2
    77a0:	400b      	ands	r3, r1
    77a2:	4293      	cmp	r3, r2
    77a4:	d003      	beq.n	77ae <__swsetup_r+0xa6>
    77a6:	0021      	movs	r1, r4
    77a8:	0030      	movs	r0, r6
    77aa:	f000 f9d9 	bl	7b60 <__smakebuf_r>
    77ae:	2301      	movs	r3, #1
    77b0:	89a2      	ldrh	r2, [r4, #12]
    77b2:	4013      	ands	r3, r2
    77b4:	d011      	beq.n	77da <__swsetup_r+0xd2>
    77b6:	2300      	movs	r3, #0
    77b8:	60a3      	str	r3, [r4, #8]
    77ba:	6963      	ldr	r3, [r4, #20]
    77bc:	425b      	negs	r3, r3
    77be:	61a3      	str	r3, [r4, #24]
    77c0:	2000      	movs	r0, #0
    77c2:	6923      	ldr	r3, [r4, #16]
    77c4:	4283      	cmp	r3, r0
    77c6:	d1be      	bne.n	7746 <__swsetup_r+0x3e>
    77c8:	230c      	movs	r3, #12
    77ca:	5ee2      	ldrsh	r2, [r4, r3]
    77cc:	0613      	lsls	r3, r2, #24
    77ce:	d5ba      	bpl.n	7746 <__swsetup_r+0x3e>
    77d0:	2340      	movs	r3, #64	; 0x40
    77d2:	4313      	orrs	r3, r2
    77d4:	81a3      	strh	r3, [r4, #12]
    77d6:	3801      	subs	r0, #1
    77d8:	e7b5      	b.n	7746 <__swsetup_r+0x3e>
    77da:	0792      	lsls	r2, r2, #30
    77dc:	d400      	bmi.n	77e0 <__swsetup_r+0xd8>
    77de:	6963      	ldr	r3, [r4, #20]
    77e0:	60a3      	str	r3, [r4, #8]
    77e2:	e7ed      	b.n	77c0 <__swsetup_r+0xb8>
    77e4:	20000020 	.word	0x20000020
    77e8:	00008778 	.word	0x00008778
    77ec:	00008798 	.word	0x00008798
    77f0:	00008758 	.word	0x00008758

000077f4 <__sflush_r>:
    77f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    77f6:	898a      	ldrh	r2, [r1, #12]
    77f8:	0005      	movs	r5, r0
    77fa:	000c      	movs	r4, r1
    77fc:	0713      	lsls	r3, r2, #28
    77fe:	d460      	bmi.n	78c2 <__sflush_r+0xce>
    7800:	684b      	ldr	r3, [r1, #4]
    7802:	2b00      	cmp	r3, #0
    7804:	dc04      	bgt.n	7810 <__sflush_r+0x1c>
    7806:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    7808:	2b00      	cmp	r3, #0
    780a:	dc01      	bgt.n	7810 <__sflush_r+0x1c>
    780c:	2000      	movs	r0, #0
    780e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7810:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    7812:	2f00      	cmp	r7, #0
    7814:	d0fa      	beq.n	780c <__sflush_r+0x18>
    7816:	2300      	movs	r3, #0
    7818:	682e      	ldr	r6, [r5, #0]
    781a:	602b      	str	r3, [r5, #0]
    781c:	2380      	movs	r3, #128	; 0x80
    781e:	015b      	lsls	r3, r3, #5
    7820:	401a      	ands	r2, r3
    7822:	d034      	beq.n	788e <__sflush_r+0x9a>
    7824:	6d60      	ldr	r0, [r4, #84]	; 0x54
    7826:	89a3      	ldrh	r3, [r4, #12]
    7828:	075b      	lsls	r3, r3, #29
    782a:	d506      	bpl.n	783a <__sflush_r+0x46>
    782c:	6863      	ldr	r3, [r4, #4]
    782e:	1ac0      	subs	r0, r0, r3
    7830:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7832:	2b00      	cmp	r3, #0
    7834:	d001      	beq.n	783a <__sflush_r+0x46>
    7836:	6c23      	ldr	r3, [r4, #64]	; 0x40
    7838:	1ac0      	subs	r0, r0, r3
    783a:	0002      	movs	r2, r0
    783c:	6a21      	ldr	r1, [r4, #32]
    783e:	2300      	movs	r3, #0
    7840:	0028      	movs	r0, r5
    7842:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    7844:	47b8      	blx	r7
    7846:	89a1      	ldrh	r1, [r4, #12]
    7848:	1c43      	adds	r3, r0, #1
    784a:	d106      	bne.n	785a <__sflush_r+0x66>
    784c:	682b      	ldr	r3, [r5, #0]
    784e:	2b1d      	cmp	r3, #29
    7850:	d831      	bhi.n	78b6 <__sflush_r+0xc2>
    7852:	4a2c      	ldr	r2, [pc, #176]	; (7904 <__sflush_r+0x110>)
    7854:	40da      	lsrs	r2, r3
    7856:	07d3      	lsls	r3, r2, #31
    7858:	d52d      	bpl.n	78b6 <__sflush_r+0xc2>
    785a:	2300      	movs	r3, #0
    785c:	6063      	str	r3, [r4, #4]
    785e:	6923      	ldr	r3, [r4, #16]
    7860:	6023      	str	r3, [r4, #0]
    7862:	04cb      	lsls	r3, r1, #19
    7864:	d505      	bpl.n	7872 <__sflush_r+0x7e>
    7866:	1c43      	adds	r3, r0, #1
    7868:	d102      	bne.n	7870 <__sflush_r+0x7c>
    786a:	682b      	ldr	r3, [r5, #0]
    786c:	2b00      	cmp	r3, #0
    786e:	d100      	bne.n	7872 <__sflush_r+0x7e>
    7870:	6560      	str	r0, [r4, #84]	; 0x54
    7872:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7874:	602e      	str	r6, [r5, #0]
    7876:	2900      	cmp	r1, #0
    7878:	d0c8      	beq.n	780c <__sflush_r+0x18>
    787a:	0023      	movs	r3, r4
    787c:	3344      	adds	r3, #68	; 0x44
    787e:	4299      	cmp	r1, r3
    7880:	d002      	beq.n	7888 <__sflush_r+0x94>
    7882:	0028      	movs	r0, r5
    7884:	f000 f9ba 	bl	7bfc <_free_r>
    7888:	2000      	movs	r0, #0
    788a:	6360      	str	r0, [r4, #52]	; 0x34
    788c:	e7bf      	b.n	780e <__sflush_r+0x1a>
    788e:	2301      	movs	r3, #1
    7890:	6a21      	ldr	r1, [r4, #32]
    7892:	0028      	movs	r0, r5
    7894:	47b8      	blx	r7
    7896:	1c43      	adds	r3, r0, #1
    7898:	d1c5      	bne.n	7826 <__sflush_r+0x32>
    789a:	682b      	ldr	r3, [r5, #0]
    789c:	2b00      	cmp	r3, #0
    789e:	d0c2      	beq.n	7826 <__sflush_r+0x32>
    78a0:	2b1d      	cmp	r3, #29
    78a2:	d001      	beq.n	78a8 <__sflush_r+0xb4>
    78a4:	2b16      	cmp	r3, #22
    78a6:	d101      	bne.n	78ac <__sflush_r+0xb8>
    78a8:	602e      	str	r6, [r5, #0]
    78aa:	e7af      	b.n	780c <__sflush_r+0x18>
    78ac:	2340      	movs	r3, #64	; 0x40
    78ae:	89a2      	ldrh	r2, [r4, #12]
    78b0:	4313      	orrs	r3, r2
    78b2:	81a3      	strh	r3, [r4, #12]
    78b4:	e7ab      	b.n	780e <__sflush_r+0x1a>
    78b6:	2340      	movs	r3, #64	; 0x40
    78b8:	430b      	orrs	r3, r1
    78ba:	2001      	movs	r0, #1
    78bc:	81a3      	strh	r3, [r4, #12]
    78be:	4240      	negs	r0, r0
    78c0:	e7a5      	b.n	780e <__sflush_r+0x1a>
    78c2:	690f      	ldr	r7, [r1, #16]
    78c4:	2f00      	cmp	r7, #0
    78c6:	d0a1      	beq.n	780c <__sflush_r+0x18>
    78c8:	680b      	ldr	r3, [r1, #0]
    78ca:	600f      	str	r7, [r1, #0]
    78cc:	1bdb      	subs	r3, r3, r7
    78ce:	9301      	str	r3, [sp, #4]
    78d0:	2300      	movs	r3, #0
    78d2:	0792      	lsls	r2, r2, #30
    78d4:	d100      	bne.n	78d8 <__sflush_r+0xe4>
    78d6:	694b      	ldr	r3, [r1, #20]
    78d8:	60a3      	str	r3, [r4, #8]
    78da:	9b01      	ldr	r3, [sp, #4]
    78dc:	2b00      	cmp	r3, #0
    78de:	dc00      	bgt.n	78e2 <__sflush_r+0xee>
    78e0:	e794      	b.n	780c <__sflush_r+0x18>
    78e2:	9b01      	ldr	r3, [sp, #4]
    78e4:	003a      	movs	r2, r7
    78e6:	6a21      	ldr	r1, [r4, #32]
    78e8:	0028      	movs	r0, r5
    78ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    78ec:	47b0      	blx	r6
    78ee:	2800      	cmp	r0, #0
    78f0:	dc03      	bgt.n	78fa <__sflush_r+0x106>
    78f2:	2340      	movs	r3, #64	; 0x40
    78f4:	89a2      	ldrh	r2, [r4, #12]
    78f6:	4313      	orrs	r3, r2
    78f8:	e7df      	b.n	78ba <__sflush_r+0xc6>
    78fa:	9b01      	ldr	r3, [sp, #4]
    78fc:	183f      	adds	r7, r7, r0
    78fe:	1a1b      	subs	r3, r3, r0
    7900:	9301      	str	r3, [sp, #4]
    7902:	e7ea      	b.n	78da <__sflush_r+0xe6>
    7904:	20400001 	.word	0x20400001

00007908 <_fflush_r>:
    7908:	690b      	ldr	r3, [r1, #16]
    790a:	b570      	push	{r4, r5, r6, lr}
    790c:	0005      	movs	r5, r0
    790e:	000c      	movs	r4, r1
    7910:	2b00      	cmp	r3, #0
    7912:	d101      	bne.n	7918 <_fflush_r+0x10>
    7914:	2000      	movs	r0, #0
    7916:	bd70      	pop	{r4, r5, r6, pc}
    7918:	2800      	cmp	r0, #0
    791a:	d004      	beq.n	7926 <_fflush_r+0x1e>
    791c:	6983      	ldr	r3, [r0, #24]
    791e:	2b00      	cmp	r3, #0
    7920:	d101      	bne.n	7926 <_fflush_r+0x1e>
    7922:	f000 f85f 	bl	79e4 <__sinit>
    7926:	4b0b      	ldr	r3, [pc, #44]	; (7954 <_fflush_r+0x4c>)
    7928:	429c      	cmp	r4, r3
    792a:	d109      	bne.n	7940 <_fflush_r+0x38>
    792c:	686c      	ldr	r4, [r5, #4]
    792e:	220c      	movs	r2, #12
    7930:	5ea3      	ldrsh	r3, [r4, r2]
    7932:	2b00      	cmp	r3, #0
    7934:	d0ee      	beq.n	7914 <_fflush_r+0xc>
    7936:	0021      	movs	r1, r4
    7938:	0028      	movs	r0, r5
    793a:	f7ff ff5b 	bl	77f4 <__sflush_r>
    793e:	e7ea      	b.n	7916 <_fflush_r+0xe>
    7940:	4b05      	ldr	r3, [pc, #20]	; (7958 <_fflush_r+0x50>)
    7942:	429c      	cmp	r4, r3
    7944:	d101      	bne.n	794a <_fflush_r+0x42>
    7946:	68ac      	ldr	r4, [r5, #8]
    7948:	e7f1      	b.n	792e <_fflush_r+0x26>
    794a:	4b04      	ldr	r3, [pc, #16]	; (795c <_fflush_r+0x54>)
    794c:	429c      	cmp	r4, r3
    794e:	d1ee      	bne.n	792e <_fflush_r+0x26>
    7950:	68ec      	ldr	r4, [r5, #12]
    7952:	e7ec      	b.n	792e <_fflush_r+0x26>
    7954:	00008778 	.word	0x00008778
    7958:	00008798 	.word	0x00008798
    795c:	00008758 	.word	0x00008758

00007960 <_cleanup_r>:
    7960:	b510      	push	{r4, lr}
    7962:	4902      	ldr	r1, [pc, #8]	; (796c <_cleanup_r+0xc>)
    7964:	f000 f8b2 	bl	7acc <_fwalk_reent>
    7968:	bd10      	pop	{r4, pc}
    796a:	46c0      	nop			; (mov r8, r8)
    796c:	00007909 	.word	0x00007909

00007970 <std.isra.0>:
    7970:	2300      	movs	r3, #0
    7972:	b510      	push	{r4, lr}
    7974:	0004      	movs	r4, r0
    7976:	6003      	str	r3, [r0, #0]
    7978:	6043      	str	r3, [r0, #4]
    797a:	6083      	str	r3, [r0, #8]
    797c:	8181      	strh	r1, [r0, #12]
    797e:	6643      	str	r3, [r0, #100]	; 0x64
    7980:	81c2      	strh	r2, [r0, #14]
    7982:	6103      	str	r3, [r0, #16]
    7984:	6143      	str	r3, [r0, #20]
    7986:	6183      	str	r3, [r0, #24]
    7988:	0019      	movs	r1, r3
    798a:	2208      	movs	r2, #8
    798c:	305c      	adds	r0, #92	; 0x5c
    798e:	f7ff fd22 	bl	73d6 <memset>
    7992:	4b05      	ldr	r3, [pc, #20]	; (79a8 <std.isra.0+0x38>)
    7994:	6224      	str	r4, [r4, #32]
    7996:	6263      	str	r3, [r4, #36]	; 0x24
    7998:	4b04      	ldr	r3, [pc, #16]	; (79ac <std.isra.0+0x3c>)
    799a:	62a3      	str	r3, [r4, #40]	; 0x28
    799c:	4b04      	ldr	r3, [pc, #16]	; (79b0 <std.isra.0+0x40>)
    799e:	62e3      	str	r3, [r4, #44]	; 0x2c
    79a0:	4b04      	ldr	r3, [pc, #16]	; (79b4 <std.isra.0+0x44>)
    79a2:	6323      	str	r3, [r4, #48]	; 0x30
    79a4:	bd10      	pop	{r4, pc}
    79a6:	46c0      	nop			; (mov r8, r8)
    79a8:	00008309 	.word	0x00008309
    79ac:	00008331 	.word	0x00008331
    79b0:	00008369 	.word	0x00008369
    79b4:	00008395 	.word	0x00008395

000079b8 <__sfmoreglue>:
    79b8:	b570      	push	{r4, r5, r6, lr}
    79ba:	2568      	movs	r5, #104	; 0x68
    79bc:	1e4a      	subs	r2, r1, #1
    79be:	4355      	muls	r5, r2
    79c0:	000e      	movs	r6, r1
    79c2:	0029      	movs	r1, r5
    79c4:	3174      	adds	r1, #116	; 0x74
    79c6:	f000 f963 	bl	7c90 <_malloc_r>
    79ca:	1e04      	subs	r4, r0, #0
    79cc:	d008      	beq.n	79e0 <__sfmoreglue+0x28>
    79ce:	2100      	movs	r1, #0
    79d0:	002a      	movs	r2, r5
    79d2:	6001      	str	r1, [r0, #0]
    79d4:	6046      	str	r6, [r0, #4]
    79d6:	300c      	adds	r0, #12
    79d8:	60a0      	str	r0, [r4, #8]
    79da:	3268      	adds	r2, #104	; 0x68
    79dc:	f7ff fcfb 	bl	73d6 <memset>
    79e0:	0020      	movs	r0, r4
    79e2:	bd70      	pop	{r4, r5, r6, pc}

000079e4 <__sinit>:
    79e4:	6983      	ldr	r3, [r0, #24]
    79e6:	b513      	push	{r0, r1, r4, lr}
    79e8:	0004      	movs	r4, r0
    79ea:	2b00      	cmp	r3, #0
    79ec:	d128      	bne.n	7a40 <__sinit+0x5c>
    79ee:	6483      	str	r3, [r0, #72]	; 0x48
    79f0:	64c3      	str	r3, [r0, #76]	; 0x4c
    79f2:	6503      	str	r3, [r0, #80]	; 0x50
    79f4:	4b13      	ldr	r3, [pc, #76]	; (7a44 <__sinit+0x60>)
    79f6:	4a14      	ldr	r2, [pc, #80]	; (7a48 <__sinit+0x64>)
    79f8:	681b      	ldr	r3, [r3, #0]
    79fa:	6282      	str	r2, [r0, #40]	; 0x28
    79fc:	9301      	str	r3, [sp, #4]
    79fe:	4298      	cmp	r0, r3
    7a00:	d101      	bne.n	7a06 <__sinit+0x22>
    7a02:	2301      	movs	r3, #1
    7a04:	6183      	str	r3, [r0, #24]
    7a06:	0020      	movs	r0, r4
    7a08:	f000 f820 	bl	7a4c <__sfp>
    7a0c:	6060      	str	r0, [r4, #4]
    7a0e:	0020      	movs	r0, r4
    7a10:	f000 f81c 	bl	7a4c <__sfp>
    7a14:	60a0      	str	r0, [r4, #8]
    7a16:	0020      	movs	r0, r4
    7a18:	f000 f818 	bl	7a4c <__sfp>
    7a1c:	2200      	movs	r2, #0
    7a1e:	60e0      	str	r0, [r4, #12]
    7a20:	2104      	movs	r1, #4
    7a22:	6860      	ldr	r0, [r4, #4]
    7a24:	f7ff ffa4 	bl	7970 <std.isra.0>
    7a28:	2201      	movs	r2, #1
    7a2a:	2109      	movs	r1, #9
    7a2c:	68a0      	ldr	r0, [r4, #8]
    7a2e:	f7ff ff9f 	bl	7970 <std.isra.0>
    7a32:	2202      	movs	r2, #2
    7a34:	2112      	movs	r1, #18
    7a36:	68e0      	ldr	r0, [r4, #12]
    7a38:	f7ff ff9a 	bl	7970 <std.isra.0>
    7a3c:	2301      	movs	r3, #1
    7a3e:	61a3      	str	r3, [r4, #24]
    7a40:	bd13      	pop	{r0, r1, r4, pc}
    7a42:	46c0      	nop			; (mov r8, r8)
    7a44:	00008754 	.word	0x00008754
    7a48:	00007961 	.word	0x00007961

00007a4c <__sfp>:
    7a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7a4e:	4b1e      	ldr	r3, [pc, #120]	; (7ac8 <__sfp+0x7c>)
    7a50:	0007      	movs	r7, r0
    7a52:	681e      	ldr	r6, [r3, #0]
    7a54:	69b3      	ldr	r3, [r6, #24]
    7a56:	2b00      	cmp	r3, #0
    7a58:	d102      	bne.n	7a60 <__sfp+0x14>
    7a5a:	0030      	movs	r0, r6
    7a5c:	f7ff ffc2 	bl	79e4 <__sinit>
    7a60:	3648      	adds	r6, #72	; 0x48
    7a62:	68b4      	ldr	r4, [r6, #8]
    7a64:	6873      	ldr	r3, [r6, #4]
    7a66:	3b01      	subs	r3, #1
    7a68:	d504      	bpl.n	7a74 <__sfp+0x28>
    7a6a:	6833      	ldr	r3, [r6, #0]
    7a6c:	2b00      	cmp	r3, #0
    7a6e:	d007      	beq.n	7a80 <__sfp+0x34>
    7a70:	6836      	ldr	r6, [r6, #0]
    7a72:	e7f6      	b.n	7a62 <__sfp+0x16>
    7a74:	220c      	movs	r2, #12
    7a76:	5ea5      	ldrsh	r5, [r4, r2]
    7a78:	2d00      	cmp	r5, #0
    7a7a:	d00d      	beq.n	7a98 <__sfp+0x4c>
    7a7c:	3468      	adds	r4, #104	; 0x68
    7a7e:	e7f2      	b.n	7a66 <__sfp+0x1a>
    7a80:	2104      	movs	r1, #4
    7a82:	0038      	movs	r0, r7
    7a84:	f7ff ff98 	bl	79b8 <__sfmoreglue>
    7a88:	6030      	str	r0, [r6, #0]
    7a8a:	2800      	cmp	r0, #0
    7a8c:	d1f0      	bne.n	7a70 <__sfp+0x24>
    7a8e:	230c      	movs	r3, #12
    7a90:	0004      	movs	r4, r0
    7a92:	603b      	str	r3, [r7, #0]
    7a94:	0020      	movs	r0, r4
    7a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7a98:	2301      	movs	r3, #1
    7a9a:	0020      	movs	r0, r4
    7a9c:	425b      	negs	r3, r3
    7a9e:	81e3      	strh	r3, [r4, #14]
    7aa0:	3302      	adds	r3, #2
    7aa2:	81a3      	strh	r3, [r4, #12]
    7aa4:	6665      	str	r5, [r4, #100]	; 0x64
    7aa6:	6025      	str	r5, [r4, #0]
    7aa8:	60a5      	str	r5, [r4, #8]
    7aaa:	6065      	str	r5, [r4, #4]
    7aac:	6125      	str	r5, [r4, #16]
    7aae:	6165      	str	r5, [r4, #20]
    7ab0:	61a5      	str	r5, [r4, #24]
    7ab2:	2208      	movs	r2, #8
    7ab4:	0029      	movs	r1, r5
    7ab6:	305c      	adds	r0, #92	; 0x5c
    7ab8:	f7ff fc8d 	bl	73d6 <memset>
    7abc:	6365      	str	r5, [r4, #52]	; 0x34
    7abe:	63a5      	str	r5, [r4, #56]	; 0x38
    7ac0:	64a5      	str	r5, [r4, #72]	; 0x48
    7ac2:	64e5      	str	r5, [r4, #76]	; 0x4c
    7ac4:	e7e6      	b.n	7a94 <__sfp+0x48>
    7ac6:	46c0      	nop			; (mov r8, r8)
    7ac8:	00008754 	.word	0x00008754

00007acc <_fwalk_reent>:
    7acc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7ace:	0004      	movs	r4, r0
    7ad0:	0007      	movs	r7, r0
    7ad2:	2600      	movs	r6, #0
    7ad4:	9101      	str	r1, [sp, #4]
    7ad6:	3448      	adds	r4, #72	; 0x48
    7ad8:	2c00      	cmp	r4, #0
    7ada:	d101      	bne.n	7ae0 <_fwalk_reent+0x14>
    7adc:	0030      	movs	r0, r6
    7ade:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7ae0:	6863      	ldr	r3, [r4, #4]
    7ae2:	68a5      	ldr	r5, [r4, #8]
    7ae4:	9300      	str	r3, [sp, #0]
    7ae6:	9b00      	ldr	r3, [sp, #0]
    7ae8:	3b01      	subs	r3, #1
    7aea:	9300      	str	r3, [sp, #0]
    7aec:	d501      	bpl.n	7af2 <_fwalk_reent+0x26>
    7aee:	6824      	ldr	r4, [r4, #0]
    7af0:	e7f2      	b.n	7ad8 <_fwalk_reent+0xc>
    7af2:	89ab      	ldrh	r3, [r5, #12]
    7af4:	2b01      	cmp	r3, #1
    7af6:	d908      	bls.n	7b0a <_fwalk_reent+0x3e>
    7af8:	220e      	movs	r2, #14
    7afa:	5eab      	ldrsh	r3, [r5, r2]
    7afc:	3301      	adds	r3, #1
    7afe:	d004      	beq.n	7b0a <_fwalk_reent+0x3e>
    7b00:	0029      	movs	r1, r5
    7b02:	0038      	movs	r0, r7
    7b04:	9b01      	ldr	r3, [sp, #4]
    7b06:	4798      	blx	r3
    7b08:	4306      	orrs	r6, r0
    7b0a:	3568      	adds	r5, #104	; 0x68
    7b0c:	e7eb      	b.n	7ae6 <_fwalk_reent+0x1a>
	...

00007b10 <__swhatbuf_r>:
    7b10:	b570      	push	{r4, r5, r6, lr}
    7b12:	000e      	movs	r6, r1
    7b14:	001d      	movs	r5, r3
    7b16:	230e      	movs	r3, #14
    7b18:	5ec9      	ldrsh	r1, [r1, r3]
    7b1a:	b090      	sub	sp, #64	; 0x40
    7b1c:	0014      	movs	r4, r2
    7b1e:	2900      	cmp	r1, #0
    7b20:	da07      	bge.n	7b32 <__swhatbuf_r+0x22>
    7b22:	2300      	movs	r3, #0
    7b24:	602b      	str	r3, [r5, #0]
    7b26:	89b3      	ldrh	r3, [r6, #12]
    7b28:	061b      	lsls	r3, r3, #24
    7b2a:	d411      	bmi.n	7b50 <__swhatbuf_r+0x40>
    7b2c:	2380      	movs	r3, #128	; 0x80
    7b2e:	00db      	lsls	r3, r3, #3
    7b30:	e00f      	b.n	7b52 <__swhatbuf_r+0x42>
    7b32:	aa01      	add	r2, sp, #4
    7b34:	f000 fc5a 	bl	83ec <_fstat_r>
    7b38:	2800      	cmp	r0, #0
    7b3a:	dbf2      	blt.n	7b22 <__swhatbuf_r+0x12>
    7b3c:	22f0      	movs	r2, #240	; 0xf0
    7b3e:	9b02      	ldr	r3, [sp, #8]
    7b40:	0212      	lsls	r2, r2, #8
    7b42:	4013      	ands	r3, r2
    7b44:	4a05      	ldr	r2, [pc, #20]	; (7b5c <__swhatbuf_r+0x4c>)
    7b46:	189b      	adds	r3, r3, r2
    7b48:	425a      	negs	r2, r3
    7b4a:	4153      	adcs	r3, r2
    7b4c:	602b      	str	r3, [r5, #0]
    7b4e:	e7ed      	b.n	7b2c <__swhatbuf_r+0x1c>
    7b50:	2340      	movs	r3, #64	; 0x40
    7b52:	2000      	movs	r0, #0
    7b54:	6023      	str	r3, [r4, #0]
    7b56:	b010      	add	sp, #64	; 0x40
    7b58:	bd70      	pop	{r4, r5, r6, pc}
    7b5a:	46c0      	nop			; (mov r8, r8)
    7b5c:	ffffe000 	.word	0xffffe000

00007b60 <__smakebuf_r>:
    7b60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7b62:	2602      	movs	r6, #2
    7b64:	898b      	ldrh	r3, [r1, #12]
    7b66:	0005      	movs	r5, r0
    7b68:	000c      	movs	r4, r1
    7b6a:	4233      	tst	r3, r6
    7b6c:	d006      	beq.n	7b7c <__smakebuf_r+0x1c>
    7b6e:	0023      	movs	r3, r4
    7b70:	3347      	adds	r3, #71	; 0x47
    7b72:	6023      	str	r3, [r4, #0]
    7b74:	6123      	str	r3, [r4, #16]
    7b76:	2301      	movs	r3, #1
    7b78:	6163      	str	r3, [r4, #20]
    7b7a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    7b7c:	ab01      	add	r3, sp, #4
    7b7e:	466a      	mov	r2, sp
    7b80:	f7ff ffc6 	bl	7b10 <__swhatbuf_r>
    7b84:	9900      	ldr	r1, [sp, #0]
    7b86:	0007      	movs	r7, r0
    7b88:	0028      	movs	r0, r5
    7b8a:	f000 f881 	bl	7c90 <_malloc_r>
    7b8e:	2800      	cmp	r0, #0
    7b90:	d108      	bne.n	7ba4 <__smakebuf_r+0x44>
    7b92:	220c      	movs	r2, #12
    7b94:	5ea3      	ldrsh	r3, [r4, r2]
    7b96:	059a      	lsls	r2, r3, #22
    7b98:	d4ef      	bmi.n	7b7a <__smakebuf_r+0x1a>
    7b9a:	2203      	movs	r2, #3
    7b9c:	4393      	bics	r3, r2
    7b9e:	431e      	orrs	r6, r3
    7ba0:	81a6      	strh	r6, [r4, #12]
    7ba2:	e7e4      	b.n	7b6e <__smakebuf_r+0xe>
    7ba4:	4b0f      	ldr	r3, [pc, #60]	; (7be4 <__smakebuf_r+0x84>)
    7ba6:	62ab      	str	r3, [r5, #40]	; 0x28
    7ba8:	2380      	movs	r3, #128	; 0x80
    7baa:	89a2      	ldrh	r2, [r4, #12]
    7bac:	6020      	str	r0, [r4, #0]
    7bae:	4313      	orrs	r3, r2
    7bb0:	81a3      	strh	r3, [r4, #12]
    7bb2:	9b00      	ldr	r3, [sp, #0]
    7bb4:	6120      	str	r0, [r4, #16]
    7bb6:	6163      	str	r3, [r4, #20]
    7bb8:	9b01      	ldr	r3, [sp, #4]
    7bba:	2b00      	cmp	r3, #0
    7bbc:	d00d      	beq.n	7bda <__smakebuf_r+0x7a>
    7bbe:	230e      	movs	r3, #14
    7bc0:	5ee1      	ldrsh	r1, [r4, r3]
    7bc2:	0028      	movs	r0, r5
    7bc4:	f000 fc24 	bl	8410 <_isatty_r>
    7bc8:	2800      	cmp	r0, #0
    7bca:	d006      	beq.n	7bda <__smakebuf_r+0x7a>
    7bcc:	2203      	movs	r2, #3
    7bce:	89a3      	ldrh	r3, [r4, #12]
    7bd0:	4393      	bics	r3, r2
    7bd2:	001a      	movs	r2, r3
    7bd4:	2301      	movs	r3, #1
    7bd6:	4313      	orrs	r3, r2
    7bd8:	81a3      	strh	r3, [r4, #12]
    7bda:	89a0      	ldrh	r0, [r4, #12]
    7bdc:	4338      	orrs	r0, r7
    7bde:	81a0      	strh	r0, [r4, #12]
    7be0:	e7cb      	b.n	7b7a <__smakebuf_r+0x1a>
    7be2:	46c0      	nop			; (mov r8, r8)
    7be4:	00007961 	.word	0x00007961

00007be8 <malloc>:
    7be8:	b510      	push	{r4, lr}
    7bea:	4b03      	ldr	r3, [pc, #12]	; (7bf8 <malloc+0x10>)
    7bec:	0001      	movs	r1, r0
    7bee:	6818      	ldr	r0, [r3, #0]
    7bf0:	f000 f84e 	bl	7c90 <_malloc_r>
    7bf4:	bd10      	pop	{r4, pc}
    7bf6:	46c0      	nop			; (mov r8, r8)
    7bf8:	20000020 	.word	0x20000020

00007bfc <_free_r>:
    7bfc:	b570      	push	{r4, r5, r6, lr}
    7bfe:	0005      	movs	r5, r0
    7c00:	2900      	cmp	r1, #0
    7c02:	d010      	beq.n	7c26 <_free_r+0x2a>
    7c04:	1f0c      	subs	r4, r1, #4
    7c06:	6823      	ldr	r3, [r4, #0]
    7c08:	2b00      	cmp	r3, #0
    7c0a:	da00      	bge.n	7c0e <_free_r+0x12>
    7c0c:	18e4      	adds	r4, r4, r3
    7c0e:	0028      	movs	r0, r5
    7c10:	f000 fc2f 	bl	8472 <__malloc_lock>
    7c14:	4a1d      	ldr	r2, [pc, #116]	; (7c8c <_free_r+0x90>)
    7c16:	6813      	ldr	r3, [r2, #0]
    7c18:	2b00      	cmp	r3, #0
    7c1a:	d105      	bne.n	7c28 <_free_r+0x2c>
    7c1c:	6063      	str	r3, [r4, #4]
    7c1e:	6014      	str	r4, [r2, #0]
    7c20:	0028      	movs	r0, r5
    7c22:	f000 fc27 	bl	8474 <__malloc_unlock>
    7c26:	bd70      	pop	{r4, r5, r6, pc}
    7c28:	42a3      	cmp	r3, r4
    7c2a:	d909      	bls.n	7c40 <_free_r+0x44>
    7c2c:	6821      	ldr	r1, [r4, #0]
    7c2e:	1860      	adds	r0, r4, r1
    7c30:	4283      	cmp	r3, r0
    7c32:	d1f3      	bne.n	7c1c <_free_r+0x20>
    7c34:	6818      	ldr	r0, [r3, #0]
    7c36:	685b      	ldr	r3, [r3, #4]
    7c38:	1841      	adds	r1, r0, r1
    7c3a:	6021      	str	r1, [r4, #0]
    7c3c:	e7ee      	b.n	7c1c <_free_r+0x20>
    7c3e:	0013      	movs	r3, r2
    7c40:	685a      	ldr	r2, [r3, #4]
    7c42:	2a00      	cmp	r2, #0
    7c44:	d001      	beq.n	7c4a <_free_r+0x4e>
    7c46:	42a2      	cmp	r2, r4
    7c48:	d9f9      	bls.n	7c3e <_free_r+0x42>
    7c4a:	6819      	ldr	r1, [r3, #0]
    7c4c:	1858      	adds	r0, r3, r1
    7c4e:	42a0      	cmp	r0, r4
    7c50:	d10b      	bne.n	7c6a <_free_r+0x6e>
    7c52:	6820      	ldr	r0, [r4, #0]
    7c54:	1809      	adds	r1, r1, r0
    7c56:	1858      	adds	r0, r3, r1
    7c58:	6019      	str	r1, [r3, #0]
    7c5a:	4282      	cmp	r2, r0
    7c5c:	d1e0      	bne.n	7c20 <_free_r+0x24>
    7c5e:	6810      	ldr	r0, [r2, #0]
    7c60:	6852      	ldr	r2, [r2, #4]
    7c62:	1841      	adds	r1, r0, r1
    7c64:	6019      	str	r1, [r3, #0]
    7c66:	605a      	str	r2, [r3, #4]
    7c68:	e7da      	b.n	7c20 <_free_r+0x24>
    7c6a:	42a0      	cmp	r0, r4
    7c6c:	d902      	bls.n	7c74 <_free_r+0x78>
    7c6e:	230c      	movs	r3, #12
    7c70:	602b      	str	r3, [r5, #0]
    7c72:	e7d5      	b.n	7c20 <_free_r+0x24>
    7c74:	6821      	ldr	r1, [r4, #0]
    7c76:	1860      	adds	r0, r4, r1
    7c78:	4282      	cmp	r2, r0
    7c7a:	d103      	bne.n	7c84 <_free_r+0x88>
    7c7c:	6810      	ldr	r0, [r2, #0]
    7c7e:	6852      	ldr	r2, [r2, #4]
    7c80:	1841      	adds	r1, r0, r1
    7c82:	6021      	str	r1, [r4, #0]
    7c84:	6062      	str	r2, [r4, #4]
    7c86:	605c      	str	r4, [r3, #4]
    7c88:	e7ca      	b.n	7c20 <_free_r+0x24>
    7c8a:	46c0      	nop			; (mov r8, r8)
    7c8c:	20000278 	.word	0x20000278

00007c90 <_malloc_r>:
    7c90:	2303      	movs	r3, #3
    7c92:	b570      	push	{r4, r5, r6, lr}
    7c94:	1ccd      	adds	r5, r1, #3
    7c96:	439d      	bics	r5, r3
    7c98:	3508      	adds	r5, #8
    7c9a:	0006      	movs	r6, r0
    7c9c:	2d0c      	cmp	r5, #12
    7c9e:	d21e      	bcs.n	7cde <_malloc_r+0x4e>
    7ca0:	250c      	movs	r5, #12
    7ca2:	42a9      	cmp	r1, r5
    7ca4:	d81d      	bhi.n	7ce2 <_malloc_r+0x52>
    7ca6:	0030      	movs	r0, r6
    7ca8:	f000 fbe3 	bl	8472 <__malloc_lock>
    7cac:	4a25      	ldr	r2, [pc, #148]	; (7d44 <_malloc_r+0xb4>)
    7cae:	6814      	ldr	r4, [r2, #0]
    7cb0:	0021      	movs	r1, r4
    7cb2:	2900      	cmp	r1, #0
    7cb4:	d119      	bne.n	7cea <_malloc_r+0x5a>
    7cb6:	4c24      	ldr	r4, [pc, #144]	; (7d48 <_malloc_r+0xb8>)
    7cb8:	6823      	ldr	r3, [r4, #0]
    7cba:	2b00      	cmp	r3, #0
    7cbc:	d103      	bne.n	7cc6 <_malloc_r+0x36>
    7cbe:	0030      	movs	r0, r6
    7cc0:	f000 fb10 	bl	82e4 <_sbrk_r>
    7cc4:	6020      	str	r0, [r4, #0]
    7cc6:	0029      	movs	r1, r5
    7cc8:	0030      	movs	r0, r6
    7cca:	f000 fb0b 	bl	82e4 <_sbrk_r>
    7cce:	1c43      	adds	r3, r0, #1
    7cd0:	d12c      	bne.n	7d2c <_malloc_r+0x9c>
    7cd2:	230c      	movs	r3, #12
    7cd4:	0030      	movs	r0, r6
    7cd6:	6033      	str	r3, [r6, #0]
    7cd8:	f000 fbcc 	bl	8474 <__malloc_unlock>
    7cdc:	e003      	b.n	7ce6 <_malloc_r+0x56>
    7cde:	2d00      	cmp	r5, #0
    7ce0:	dadf      	bge.n	7ca2 <_malloc_r+0x12>
    7ce2:	230c      	movs	r3, #12
    7ce4:	6033      	str	r3, [r6, #0]
    7ce6:	2000      	movs	r0, #0
    7ce8:	bd70      	pop	{r4, r5, r6, pc}
    7cea:	680b      	ldr	r3, [r1, #0]
    7cec:	1b5b      	subs	r3, r3, r5
    7cee:	d41a      	bmi.n	7d26 <_malloc_r+0x96>
    7cf0:	2b0b      	cmp	r3, #11
    7cf2:	d903      	bls.n	7cfc <_malloc_r+0x6c>
    7cf4:	600b      	str	r3, [r1, #0]
    7cf6:	18cc      	adds	r4, r1, r3
    7cf8:	6025      	str	r5, [r4, #0]
    7cfa:	e003      	b.n	7d04 <_malloc_r+0x74>
    7cfc:	428c      	cmp	r4, r1
    7cfe:	d10e      	bne.n	7d1e <_malloc_r+0x8e>
    7d00:	6863      	ldr	r3, [r4, #4]
    7d02:	6013      	str	r3, [r2, #0]
    7d04:	0030      	movs	r0, r6
    7d06:	f000 fbb5 	bl	8474 <__malloc_unlock>
    7d0a:	0020      	movs	r0, r4
    7d0c:	2207      	movs	r2, #7
    7d0e:	300b      	adds	r0, #11
    7d10:	1d23      	adds	r3, r4, #4
    7d12:	4390      	bics	r0, r2
    7d14:	1ac3      	subs	r3, r0, r3
    7d16:	d0e7      	beq.n	7ce8 <_malloc_r+0x58>
    7d18:	425a      	negs	r2, r3
    7d1a:	50e2      	str	r2, [r4, r3]
    7d1c:	e7e4      	b.n	7ce8 <_malloc_r+0x58>
    7d1e:	684b      	ldr	r3, [r1, #4]
    7d20:	6063      	str	r3, [r4, #4]
    7d22:	000c      	movs	r4, r1
    7d24:	e7ee      	b.n	7d04 <_malloc_r+0x74>
    7d26:	000c      	movs	r4, r1
    7d28:	6849      	ldr	r1, [r1, #4]
    7d2a:	e7c2      	b.n	7cb2 <_malloc_r+0x22>
    7d2c:	2303      	movs	r3, #3
    7d2e:	1cc4      	adds	r4, r0, #3
    7d30:	439c      	bics	r4, r3
    7d32:	42a0      	cmp	r0, r4
    7d34:	d0e0      	beq.n	7cf8 <_malloc_r+0x68>
    7d36:	1a21      	subs	r1, r4, r0
    7d38:	0030      	movs	r0, r6
    7d3a:	f000 fad3 	bl	82e4 <_sbrk_r>
    7d3e:	1c43      	adds	r3, r0, #1
    7d40:	d1da      	bne.n	7cf8 <_malloc_r+0x68>
    7d42:	e7c6      	b.n	7cd2 <_malloc_r+0x42>
    7d44:	20000278 	.word	0x20000278
    7d48:	2000027c 	.word	0x2000027c

00007d4c <__sfputc_r>:
    7d4c:	6893      	ldr	r3, [r2, #8]
    7d4e:	b510      	push	{r4, lr}
    7d50:	3b01      	subs	r3, #1
    7d52:	6093      	str	r3, [r2, #8]
    7d54:	2b00      	cmp	r3, #0
    7d56:	da05      	bge.n	7d64 <__sfputc_r+0x18>
    7d58:	6994      	ldr	r4, [r2, #24]
    7d5a:	42a3      	cmp	r3, r4
    7d5c:	db08      	blt.n	7d70 <__sfputc_r+0x24>
    7d5e:	b2cb      	uxtb	r3, r1
    7d60:	2b0a      	cmp	r3, #10
    7d62:	d005      	beq.n	7d70 <__sfputc_r+0x24>
    7d64:	6813      	ldr	r3, [r2, #0]
    7d66:	1c58      	adds	r0, r3, #1
    7d68:	6010      	str	r0, [r2, #0]
    7d6a:	7019      	strb	r1, [r3, #0]
    7d6c:	b2c8      	uxtb	r0, r1
    7d6e:	bd10      	pop	{r4, pc}
    7d70:	f7ff fc74 	bl	765c <__swbuf_r>
    7d74:	e7fb      	b.n	7d6e <__sfputc_r+0x22>

00007d76 <__sfputs_r>:
    7d76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7d78:	0006      	movs	r6, r0
    7d7a:	000f      	movs	r7, r1
    7d7c:	0014      	movs	r4, r2
    7d7e:	18d5      	adds	r5, r2, r3
    7d80:	42ac      	cmp	r4, r5
    7d82:	d101      	bne.n	7d88 <__sfputs_r+0x12>
    7d84:	2000      	movs	r0, #0
    7d86:	e007      	b.n	7d98 <__sfputs_r+0x22>
    7d88:	7821      	ldrb	r1, [r4, #0]
    7d8a:	003a      	movs	r2, r7
    7d8c:	0030      	movs	r0, r6
    7d8e:	f7ff ffdd 	bl	7d4c <__sfputc_r>
    7d92:	3401      	adds	r4, #1
    7d94:	1c43      	adds	r3, r0, #1
    7d96:	d1f3      	bne.n	7d80 <__sfputs_r+0xa>
    7d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00007d9c <_vfiprintf_r>:
    7d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7d9e:	b09f      	sub	sp, #124	; 0x7c
    7da0:	0006      	movs	r6, r0
    7da2:	000f      	movs	r7, r1
    7da4:	0014      	movs	r4, r2
    7da6:	9305      	str	r3, [sp, #20]
    7da8:	2800      	cmp	r0, #0
    7daa:	d004      	beq.n	7db6 <_vfiprintf_r+0x1a>
    7dac:	6983      	ldr	r3, [r0, #24]
    7dae:	2b00      	cmp	r3, #0
    7db0:	d101      	bne.n	7db6 <_vfiprintf_r+0x1a>
    7db2:	f7ff fe17 	bl	79e4 <__sinit>
    7db6:	4b7f      	ldr	r3, [pc, #508]	; (7fb4 <_vfiprintf_r+0x218>)
    7db8:	429f      	cmp	r7, r3
    7dba:	d15c      	bne.n	7e76 <_vfiprintf_r+0xda>
    7dbc:	6877      	ldr	r7, [r6, #4]
    7dbe:	89bb      	ldrh	r3, [r7, #12]
    7dc0:	071b      	lsls	r3, r3, #28
    7dc2:	d562      	bpl.n	7e8a <_vfiprintf_r+0xee>
    7dc4:	693b      	ldr	r3, [r7, #16]
    7dc6:	2b00      	cmp	r3, #0
    7dc8:	d05f      	beq.n	7e8a <_vfiprintf_r+0xee>
    7dca:	2300      	movs	r3, #0
    7dcc:	ad06      	add	r5, sp, #24
    7dce:	616b      	str	r3, [r5, #20]
    7dd0:	3320      	adds	r3, #32
    7dd2:	766b      	strb	r3, [r5, #25]
    7dd4:	3310      	adds	r3, #16
    7dd6:	76ab      	strb	r3, [r5, #26]
    7dd8:	9402      	str	r4, [sp, #8]
    7dda:	9c02      	ldr	r4, [sp, #8]
    7ddc:	7823      	ldrb	r3, [r4, #0]
    7dde:	2b00      	cmp	r3, #0
    7de0:	d15d      	bne.n	7e9e <_vfiprintf_r+0x102>
    7de2:	9b02      	ldr	r3, [sp, #8]
    7de4:	1ae3      	subs	r3, r4, r3
    7de6:	9304      	str	r3, [sp, #16]
    7de8:	d00d      	beq.n	7e06 <_vfiprintf_r+0x6a>
    7dea:	9b04      	ldr	r3, [sp, #16]
    7dec:	9a02      	ldr	r2, [sp, #8]
    7dee:	0039      	movs	r1, r7
    7df0:	0030      	movs	r0, r6
    7df2:	f7ff ffc0 	bl	7d76 <__sfputs_r>
    7df6:	1c43      	adds	r3, r0, #1
    7df8:	d100      	bne.n	7dfc <_vfiprintf_r+0x60>
    7dfa:	e0cc      	b.n	7f96 <_vfiprintf_r+0x1fa>
    7dfc:	696a      	ldr	r2, [r5, #20]
    7dfe:	9b04      	ldr	r3, [sp, #16]
    7e00:	4694      	mov	ip, r2
    7e02:	4463      	add	r3, ip
    7e04:	616b      	str	r3, [r5, #20]
    7e06:	7823      	ldrb	r3, [r4, #0]
    7e08:	2b00      	cmp	r3, #0
    7e0a:	d100      	bne.n	7e0e <_vfiprintf_r+0x72>
    7e0c:	e0c3      	b.n	7f96 <_vfiprintf_r+0x1fa>
    7e0e:	2201      	movs	r2, #1
    7e10:	2300      	movs	r3, #0
    7e12:	4252      	negs	r2, r2
    7e14:	606a      	str	r2, [r5, #4]
    7e16:	a902      	add	r1, sp, #8
    7e18:	3254      	adds	r2, #84	; 0x54
    7e1a:	1852      	adds	r2, r2, r1
    7e1c:	3401      	adds	r4, #1
    7e1e:	602b      	str	r3, [r5, #0]
    7e20:	60eb      	str	r3, [r5, #12]
    7e22:	60ab      	str	r3, [r5, #8]
    7e24:	7013      	strb	r3, [r2, #0]
    7e26:	65ab      	str	r3, [r5, #88]	; 0x58
    7e28:	7821      	ldrb	r1, [r4, #0]
    7e2a:	2205      	movs	r2, #5
    7e2c:	4862      	ldr	r0, [pc, #392]	; (7fb8 <_vfiprintf_r+0x21c>)
    7e2e:	f000 fb15 	bl	845c <memchr>
    7e32:	1c63      	adds	r3, r4, #1
    7e34:	469c      	mov	ip, r3
    7e36:	2800      	cmp	r0, #0
    7e38:	d135      	bne.n	7ea6 <_vfiprintf_r+0x10a>
    7e3a:	6829      	ldr	r1, [r5, #0]
    7e3c:	06cb      	lsls	r3, r1, #27
    7e3e:	d504      	bpl.n	7e4a <_vfiprintf_r+0xae>
    7e40:	2353      	movs	r3, #83	; 0x53
    7e42:	aa02      	add	r2, sp, #8
    7e44:	3020      	adds	r0, #32
    7e46:	189b      	adds	r3, r3, r2
    7e48:	7018      	strb	r0, [r3, #0]
    7e4a:	070b      	lsls	r3, r1, #28
    7e4c:	d504      	bpl.n	7e58 <_vfiprintf_r+0xbc>
    7e4e:	2353      	movs	r3, #83	; 0x53
    7e50:	202b      	movs	r0, #43	; 0x2b
    7e52:	aa02      	add	r2, sp, #8
    7e54:	189b      	adds	r3, r3, r2
    7e56:	7018      	strb	r0, [r3, #0]
    7e58:	7823      	ldrb	r3, [r4, #0]
    7e5a:	2b2a      	cmp	r3, #42	; 0x2a
    7e5c:	d02c      	beq.n	7eb8 <_vfiprintf_r+0x11c>
    7e5e:	2000      	movs	r0, #0
    7e60:	210a      	movs	r1, #10
    7e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7e64:	7822      	ldrb	r2, [r4, #0]
    7e66:	3a30      	subs	r2, #48	; 0x30
    7e68:	2a09      	cmp	r2, #9
    7e6a:	d800      	bhi.n	7e6e <_vfiprintf_r+0xd2>
    7e6c:	e06b      	b.n	7f46 <_vfiprintf_r+0x1aa>
    7e6e:	2800      	cmp	r0, #0
    7e70:	d02a      	beq.n	7ec8 <_vfiprintf_r+0x12c>
    7e72:	9309      	str	r3, [sp, #36]	; 0x24
    7e74:	e028      	b.n	7ec8 <_vfiprintf_r+0x12c>
    7e76:	4b51      	ldr	r3, [pc, #324]	; (7fbc <_vfiprintf_r+0x220>)
    7e78:	429f      	cmp	r7, r3
    7e7a:	d101      	bne.n	7e80 <_vfiprintf_r+0xe4>
    7e7c:	68b7      	ldr	r7, [r6, #8]
    7e7e:	e79e      	b.n	7dbe <_vfiprintf_r+0x22>
    7e80:	4b4f      	ldr	r3, [pc, #316]	; (7fc0 <_vfiprintf_r+0x224>)
    7e82:	429f      	cmp	r7, r3
    7e84:	d19b      	bne.n	7dbe <_vfiprintf_r+0x22>
    7e86:	68f7      	ldr	r7, [r6, #12]
    7e88:	e799      	b.n	7dbe <_vfiprintf_r+0x22>
    7e8a:	0039      	movs	r1, r7
    7e8c:	0030      	movs	r0, r6
    7e8e:	f7ff fc3b 	bl	7708 <__swsetup_r>
    7e92:	2800      	cmp	r0, #0
    7e94:	d099      	beq.n	7dca <_vfiprintf_r+0x2e>
    7e96:	2001      	movs	r0, #1
    7e98:	4240      	negs	r0, r0
    7e9a:	b01f      	add	sp, #124	; 0x7c
    7e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7e9e:	2b25      	cmp	r3, #37	; 0x25
    7ea0:	d09f      	beq.n	7de2 <_vfiprintf_r+0x46>
    7ea2:	3401      	adds	r4, #1
    7ea4:	e79a      	b.n	7ddc <_vfiprintf_r+0x40>
    7ea6:	4b44      	ldr	r3, [pc, #272]	; (7fb8 <_vfiprintf_r+0x21c>)
    7ea8:	6829      	ldr	r1, [r5, #0]
    7eaa:	1ac0      	subs	r0, r0, r3
    7eac:	2301      	movs	r3, #1
    7eae:	4083      	lsls	r3, r0
    7eb0:	430b      	orrs	r3, r1
    7eb2:	602b      	str	r3, [r5, #0]
    7eb4:	4664      	mov	r4, ip
    7eb6:	e7b7      	b.n	7e28 <_vfiprintf_r+0x8c>
    7eb8:	9b05      	ldr	r3, [sp, #20]
    7eba:	1d18      	adds	r0, r3, #4
    7ebc:	681b      	ldr	r3, [r3, #0]
    7ebe:	9005      	str	r0, [sp, #20]
    7ec0:	2b00      	cmp	r3, #0
    7ec2:	db3a      	blt.n	7f3a <_vfiprintf_r+0x19e>
    7ec4:	9309      	str	r3, [sp, #36]	; 0x24
    7ec6:	4664      	mov	r4, ip
    7ec8:	7823      	ldrb	r3, [r4, #0]
    7eca:	2b2e      	cmp	r3, #46	; 0x2e
    7ecc:	d10b      	bne.n	7ee6 <_vfiprintf_r+0x14a>
    7ece:	7863      	ldrb	r3, [r4, #1]
    7ed0:	1c62      	adds	r2, r4, #1
    7ed2:	2b2a      	cmp	r3, #42	; 0x2a
    7ed4:	d13f      	bne.n	7f56 <_vfiprintf_r+0x1ba>
    7ed6:	9b05      	ldr	r3, [sp, #20]
    7ed8:	3402      	adds	r4, #2
    7eda:	1d1a      	adds	r2, r3, #4
    7edc:	681b      	ldr	r3, [r3, #0]
    7ede:	9205      	str	r2, [sp, #20]
    7ee0:	2b00      	cmp	r3, #0
    7ee2:	db35      	blt.n	7f50 <_vfiprintf_r+0x1b4>
    7ee4:	9307      	str	r3, [sp, #28]
    7ee6:	7821      	ldrb	r1, [r4, #0]
    7ee8:	2203      	movs	r2, #3
    7eea:	4836      	ldr	r0, [pc, #216]	; (7fc4 <_vfiprintf_r+0x228>)
    7eec:	f000 fab6 	bl	845c <memchr>
    7ef0:	2800      	cmp	r0, #0
    7ef2:	d007      	beq.n	7f04 <_vfiprintf_r+0x168>
    7ef4:	4b33      	ldr	r3, [pc, #204]	; (7fc4 <_vfiprintf_r+0x228>)
    7ef6:	682a      	ldr	r2, [r5, #0]
    7ef8:	1ac0      	subs	r0, r0, r3
    7efa:	2340      	movs	r3, #64	; 0x40
    7efc:	4083      	lsls	r3, r0
    7efe:	4313      	orrs	r3, r2
    7f00:	602b      	str	r3, [r5, #0]
    7f02:	3401      	adds	r4, #1
    7f04:	7821      	ldrb	r1, [r4, #0]
    7f06:	1c63      	adds	r3, r4, #1
    7f08:	2206      	movs	r2, #6
    7f0a:	482f      	ldr	r0, [pc, #188]	; (7fc8 <_vfiprintf_r+0x22c>)
    7f0c:	9302      	str	r3, [sp, #8]
    7f0e:	7629      	strb	r1, [r5, #24]
    7f10:	f000 faa4 	bl	845c <memchr>
    7f14:	2800      	cmp	r0, #0
    7f16:	d044      	beq.n	7fa2 <_vfiprintf_r+0x206>
    7f18:	4b2c      	ldr	r3, [pc, #176]	; (7fcc <_vfiprintf_r+0x230>)
    7f1a:	2b00      	cmp	r3, #0
    7f1c:	d12f      	bne.n	7f7e <_vfiprintf_r+0x1e2>
    7f1e:	6829      	ldr	r1, [r5, #0]
    7f20:	9b05      	ldr	r3, [sp, #20]
    7f22:	2207      	movs	r2, #7
    7f24:	05c9      	lsls	r1, r1, #23
    7f26:	d528      	bpl.n	7f7a <_vfiprintf_r+0x1de>
    7f28:	189b      	adds	r3, r3, r2
    7f2a:	4393      	bics	r3, r2
    7f2c:	3308      	adds	r3, #8
    7f2e:	9305      	str	r3, [sp, #20]
    7f30:	696b      	ldr	r3, [r5, #20]
    7f32:	9a03      	ldr	r2, [sp, #12]
    7f34:	189b      	adds	r3, r3, r2
    7f36:	616b      	str	r3, [r5, #20]
    7f38:	e74f      	b.n	7dda <_vfiprintf_r+0x3e>
    7f3a:	425b      	negs	r3, r3
    7f3c:	60eb      	str	r3, [r5, #12]
    7f3e:	2302      	movs	r3, #2
    7f40:	430b      	orrs	r3, r1
    7f42:	602b      	str	r3, [r5, #0]
    7f44:	e7bf      	b.n	7ec6 <_vfiprintf_r+0x12a>
    7f46:	434b      	muls	r3, r1
    7f48:	3401      	adds	r4, #1
    7f4a:	189b      	adds	r3, r3, r2
    7f4c:	2001      	movs	r0, #1
    7f4e:	e789      	b.n	7e64 <_vfiprintf_r+0xc8>
    7f50:	2301      	movs	r3, #1
    7f52:	425b      	negs	r3, r3
    7f54:	e7c6      	b.n	7ee4 <_vfiprintf_r+0x148>
    7f56:	2300      	movs	r3, #0
    7f58:	0014      	movs	r4, r2
    7f5a:	200a      	movs	r0, #10
    7f5c:	001a      	movs	r2, r3
    7f5e:	606b      	str	r3, [r5, #4]
    7f60:	7821      	ldrb	r1, [r4, #0]
    7f62:	3930      	subs	r1, #48	; 0x30
    7f64:	2909      	cmp	r1, #9
    7f66:	d903      	bls.n	7f70 <_vfiprintf_r+0x1d4>
    7f68:	2b00      	cmp	r3, #0
    7f6a:	d0bc      	beq.n	7ee6 <_vfiprintf_r+0x14a>
    7f6c:	9207      	str	r2, [sp, #28]
    7f6e:	e7ba      	b.n	7ee6 <_vfiprintf_r+0x14a>
    7f70:	4342      	muls	r2, r0
    7f72:	3401      	adds	r4, #1
    7f74:	1852      	adds	r2, r2, r1
    7f76:	2301      	movs	r3, #1
    7f78:	e7f2      	b.n	7f60 <_vfiprintf_r+0x1c4>
    7f7a:	3307      	adds	r3, #7
    7f7c:	e7d5      	b.n	7f2a <_vfiprintf_r+0x18e>
    7f7e:	ab05      	add	r3, sp, #20
    7f80:	9300      	str	r3, [sp, #0]
    7f82:	003a      	movs	r2, r7
    7f84:	4b12      	ldr	r3, [pc, #72]	; (7fd0 <_vfiprintf_r+0x234>)
    7f86:	0029      	movs	r1, r5
    7f88:	0030      	movs	r0, r6
    7f8a:	e000      	b.n	7f8e <_vfiprintf_r+0x1f2>
    7f8c:	bf00      	nop
    7f8e:	9003      	str	r0, [sp, #12]
    7f90:	9b03      	ldr	r3, [sp, #12]
    7f92:	3301      	adds	r3, #1
    7f94:	d1cc      	bne.n	7f30 <_vfiprintf_r+0x194>
    7f96:	89bb      	ldrh	r3, [r7, #12]
    7f98:	065b      	lsls	r3, r3, #25
    7f9a:	d500      	bpl.n	7f9e <_vfiprintf_r+0x202>
    7f9c:	e77b      	b.n	7e96 <_vfiprintf_r+0xfa>
    7f9e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    7fa0:	e77b      	b.n	7e9a <_vfiprintf_r+0xfe>
    7fa2:	ab05      	add	r3, sp, #20
    7fa4:	9300      	str	r3, [sp, #0]
    7fa6:	003a      	movs	r2, r7
    7fa8:	4b09      	ldr	r3, [pc, #36]	; (7fd0 <_vfiprintf_r+0x234>)
    7faa:	0029      	movs	r1, r5
    7fac:	0030      	movs	r0, r6
    7fae:	f000 f87f 	bl	80b0 <_printf_i>
    7fb2:	e7ec      	b.n	7f8e <_vfiprintf_r+0x1f2>
    7fb4:	00008778 	.word	0x00008778
    7fb8:	000087b8 	.word	0x000087b8
    7fbc:	00008798 	.word	0x00008798
    7fc0:	00008758 	.word	0x00008758
    7fc4:	000087be 	.word	0x000087be
    7fc8:	000087c2 	.word	0x000087c2
    7fcc:	00000000 	.word	0x00000000
    7fd0:	00007d77 	.word	0x00007d77

00007fd4 <_printf_common>:
    7fd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7fd6:	0015      	movs	r5, r2
    7fd8:	9301      	str	r3, [sp, #4]
    7fda:	688a      	ldr	r2, [r1, #8]
    7fdc:	690b      	ldr	r3, [r1, #16]
    7fde:	9000      	str	r0, [sp, #0]
    7fe0:	000c      	movs	r4, r1
    7fe2:	4293      	cmp	r3, r2
    7fe4:	da00      	bge.n	7fe8 <_printf_common+0x14>
    7fe6:	0013      	movs	r3, r2
    7fe8:	0022      	movs	r2, r4
    7fea:	602b      	str	r3, [r5, #0]
    7fec:	3243      	adds	r2, #67	; 0x43
    7fee:	7812      	ldrb	r2, [r2, #0]
    7ff0:	2a00      	cmp	r2, #0
    7ff2:	d001      	beq.n	7ff8 <_printf_common+0x24>
    7ff4:	3301      	adds	r3, #1
    7ff6:	602b      	str	r3, [r5, #0]
    7ff8:	6823      	ldr	r3, [r4, #0]
    7ffa:	069b      	lsls	r3, r3, #26
    7ffc:	d502      	bpl.n	8004 <_printf_common+0x30>
    7ffe:	682b      	ldr	r3, [r5, #0]
    8000:	3302      	adds	r3, #2
    8002:	602b      	str	r3, [r5, #0]
    8004:	2706      	movs	r7, #6
    8006:	6823      	ldr	r3, [r4, #0]
    8008:	401f      	ands	r7, r3
    800a:	d027      	beq.n	805c <_printf_common+0x88>
    800c:	0023      	movs	r3, r4
    800e:	3343      	adds	r3, #67	; 0x43
    8010:	781b      	ldrb	r3, [r3, #0]
    8012:	1e5a      	subs	r2, r3, #1
    8014:	4193      	sbcs	r3, r2
    8016:	6822      	ldr	r2, [r4, #0]
    8018:	0692      	lsls	r2, r2, #26
    801a:	d430      	bmi.n	807e <_printf_common+0xaa>
    801c:	0022      	movs	r2, r4
    801e:	9901      	ldr	r1, [sp, #4]
    8020:	3243      	adds	r2, #67	; 0x43
    8022:	9800      	ldr	r0, [sp, #0]
    8024:	9e08      	ldr	r6, [sp, #32]
    8026:	47b0      	blx	r6
    8028:	1c43      	adds	r3, r0, #1
    802a:	d025      	beq.n	8078 <_printf_common+0xa4>
    802c:	2306      	movs	r3, #6
    802e:	6820      	ldr	r0, [r4, #0]
    8030:	682a      	ldr	r2, [r5, #0]
    8032:	68e1      	ldr	r1, [r4, #12]
    8034:	4003      	ands	r3, r0
    8036:	2500      	movs	r5, #0
    8038:	2b04      	cmp	r3, #4
    803a:	d103      	bne.n	8044 <_printf_common+0x70>
    803c:	1a8d      	subs	r5, r1, r2
    803e:	43eb      	mvns	r3, r5
    8040:	17db      	asrs	r3, r3, #31
    8042:	401d      	ands	r5, r3
    8044:	68a3      	ldr	r3, [r4, #8]
    8046:	6922      	ldr	r2, [r4, #16]
    8048:	4293      	cmp	r3, r2
    804a:	dd01      	ble.n	8050 <_printf_common+0x7c>
    804c:	1a9b      	subs	r3, r3, r2
    804e:	18ed      	adds	r5, r5, r3
    8050:	2700      	movs	r7, #0
    8052:	42bd      	cmp	r5, r7
    8054:	d120      	bne.n	8098 <_printf_common+0xc4>
    8056:	2000      	movs	r0, #0
    8058:	e010      	b.n	807c <_printf_common+0xa8>
    805a:	3701      	adds	r7, #1
    805c:	68e3      	ldr	r3, [r4, #12]
    805e:	682a      	ldr	r2, [r5, #0]
    8060:	1a9b      	subs	r3, r3, r2
    8062:	429f      	cmp	r7, r3
    8064:	dad2      	bge.n	800c <_printf_common+0x38>
    8066:	0022      	movs	r2, r4
    8068:	2301      	movs	r3, #1
    806a:	3219      	adds	r2, #25
    806c:	9901      	ldr	r1, [sp, #4]
    806e:	9800      	ldr	r0, [sp, #0]
    8070:	9e08      	ldr	r6, [sp, #32]
    8072:	47b0      	blx	r6
    8074:	1c43      	adds	r3, r0, #1
    8076:	d1f0      	bne.n	805a <_printf_common+0x86>
    8078:	2001      	movs	r0, #1
    807a:	4240      	negs	r0, r0
    807c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    807e:	2030      	movs	r0, #48	; 0x30
    8080:	18e1      	adds	r1, r4, r3
    8082:	3143      	adds	r1, #67	; 0x43
    8084:	7008      	strb	r0, [r1, #0]
    8086:	0021      	movs	r1, r4
    8088:	1c5a      	adds	r2, r3, #1
    808a:	3145      	adds	r1, #69	; 0x45
    808c:	7809      	ldrb	r1, [r1, #0]
    808e:	18a2      	adds	r2, r4, r2
    8090:	3243      	adds	r2, #67	; 0x43
    8092:	3302      	adds	r3, #2
    8094:	7011      	strb	r1, [r2, #0]
    8096:	e7c1      	b.n	801c <_printf_common+0x48>
    8098:	0022      	movs	r2, r4
    809a:	2301      	movs	r3, #1
    809c:	321a      	adds	r2, #26
    809e:	9901      	ldr	r1, [sp, #4]
    80a0:	9800      	ldr	r0, [sp, #0]
    80a2:	9e08      	ldr	r6, [sp, #32]
    80a4:	47b0      	blx	r6
    80a6:	1c43      	adds	r3, r0, #1
    80a8:	d0e6      	beq.n	8078 <_printf_common+0xa4>
    80aa:	3701      	adds	r7, #1
    80ac:	e7d1      	b.n	8052 <_printf_common+0x7e>
	...

000080b0 <_printf_i>:
    80b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    80b2:	b08b      	sub	sp, #44	; 0x2c
    80b4:	9206      	str	r2, [sp, #24]
    80b6:	000a      	movs	r2, r1
    80b8:	3243      	adds	r2, #67	; 0x43
    80ba:	9307      	str	r3, [sp, #28]
    80bc:	9005      	str	r0, [sp, #20]
    80be:	9204      	str	r2, [sp, #16]
    80c0:	7e0a      	ldrb	r2, [r1, #24]
    80c2:	000c      	movs	r4, r1
    80c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    80c6:	2a6e      	cmp	r2, #110	; 0x6e
    80c8:	d100      	bne.n	80cc <_printf_i+0x1c>
    80ca:	e08f      	b.n	81ec <_printf_i+0x13c>
    80cc:	d817      	bhi.n	80fe <_printf_i+0x4e>
    80ce:	2a63      	cmp	r2, #99	; 0x63
    80d0:	d02c      	beq.n	812c <_printf_i+0x7c>
    80d2:	d808      	bhi.n	80e6 <_printf_i+0x36>
    80d4:	2a00      	cmp	r2, #0
    80d6:	d100      	bne.n	80da <_printf_i+0x2a>
    80d8:	e099      	b.n	820e <_printf_i+0x15e>
    80da:	2a58      	cmp	r2, #88	; 0x58
    80dc:	d054      	beq.n	8188 <_printf_i+0xd8>
    80de:	0026      	movs	r6, r4
    80e0:	3642      	adds	r6, #66	; 0x42
    80e2:	7032      	strb	r2, [r6, #0]
    80e4:	e029      	b.n	813a <_printf_i+0x8a>
    80e6:	2a64      	cmp	r2, #100	; 0x64
    80e8:	d001      	beq.n	80ee <_printf_i+0x3e>
    80ea:	2a69      	cmp	r2, #105	; 0x69
    80ec:	d1f7      	bne.n	80de <_printf_i+0x2e>
    80ee:	6821      	ldr	r1, [r4, #0]
    80f0:	681a      	ldr	r2, [r3, #0]
    80f2:	0608      	lsls	r0, r1, #24
    80f4:	d523      	bpl.n	813e <_printf_i+0x8e>
    80f6:	1d11      	adds	r1, r2, #4
    80f8:	6019      	str	r1, [r3, #0]
    80fa:	6815      	ldr	r5, [r2, #0]
    80fc:	e025      	b.n	814a <_printf_i+0x9a>
    80fe:	2a73      	cmp	r2, #115	; 0x73
    8100:	d100      	bne.n	8104 <_printf_i+0x54>
    8102:	e088      	b.n	8216 <_printf_i+0x166>
    8104:	d808      	bhi.n	8118 <_printf_i+0x68>
    8106:	2a6f      	cmp	r2, #111	; 0x6f
    8108:	d029      	beq.n	815e <_printf_i+0xae>
    810a:	2a70      	cmp	r2, #112	; 0x70
    810c:	d1e7      	bne.n	80de <_printf_i+0x2e>
    810e:	2220      	movs	r2, #32
    8110:	6809      	ldr	r1, [r1, #0]
    8112:	430a      	orrs	r2, r1
    8114:	6022      	str	r2, [r4, #0]
    8116:	e003      	b.n	8120 <_printf_i+0x70>
    8118:	2a75      	cmp	r2, #117	; 0x75
    811a:	d020      	beq.n	815e <_printf_i+0xae>
    811c:	2a78      	cmp	r2, #120	; 0x78
    811e:	d1de      	bne.n	80de <_printf_i+0x2e>
    8120:	0022      	movs	r2, r4
    8122:	2178      	movs	r1, #120	; 0x78
    8124:	3245      	adds	r2, #69	; 0x45
    8126:	7011      	strb	r1, [r2, #0]
    8128:	4a6c      	ldr	r2, [pc, #432]	; (82dc <_printf_i+0x22c>)
    812a:	e030      	b.n	818e <_printf_i+0xde>
    812c:	000e      	movs	r6, r1
    812e:	681a      	ldr	r2, [r3, #0]
    8130:	3642      	adds	r6, #66	; 0x42
    8132:	1d11      	adds	r1, r2, #4
    8134:	6019      	str	r1, [r3, #0]
    8136:	6813      	ldr	r3, [r2, #0]
    8138:	7033      	strb	r3, [r6, #0]
    813a:	2301      	movs	r3, #1
    813c:	e079      	b.n	8232 <_printf_i+0x182>
    813e:	0649      	lsls	r1, r1, #25
    8140:	d5d9      	bpl.n	80f6 <_printf_i+0x46>
    8142:	1d11      	adds	r1, r2, #4
    8144:	6019      	str	r1, [r3, #0]
    8146:	2300      	movs	r3, #0
    8148:	5ed5      	ldrsh	r5, [r2, r3]
    814a:	2d00      	cmp	r5, #0
    814c:	da03      	bge.n	8156 <_printf_i+0xa6>
    814e:	232d      	movs	r3, #45	; 0x2d
    8150:	9a04      	ldr	r2, [sp, #16]
    8152:	426d      	negs	r5, r5
    8154:	7013      	strb	r3, [r2, #0]
    8156:	4b62      	ldr	r3, [pc, #392]	; (82e0 <_printf_i+0x230>)
    8158:	270a      	movs	r7, #10
    815a:	9303      	str	r3, [sp, #12]
    815c:	e02f      	b.n	81be <_printf_i+0x10e>
    815e:	6820      	ldr	r0, [r4, #0]
    8160:	6819      	ldr	r1, [r3, #0]
    8162:	0605      	lsls	r5, r0, #24
    8164:	d503      	bpl.n	816e <_printf_i+0xbe>
    8166:	1d08      	adds	r0, r1, #4
    8168:	6018      	str	r0, [r3, #0]
    816a:	680d      	ldr	r5, [r1, #0]
    816c:	e005      	b.n	817a <_printf_i+0xca>
    816e:	0640      	lsls	r0, r0, #25
    8170:	d5f9      	bpl.n	8166 <_printf_i+0xb6>
    8172:	680d      	ldr	r5, [r1, #0]
    8174:	1d08      	adds	r0, r1, #4
    8176:	6018      	str	r0, [r3, #0]
    8178:	b2ad      	uxth	r5, r5
    817a:	4b59      	ldr	r3, [pc, #356]	; (82e0 <_printf_i+0x230>)
    817c:	2708      	movs	r7, #8
    817e:	9303      	str	r3, [sp, #12]
    8180:	2a6f      	cmp	r2, #111	; 0x6f
    8182:	d018      	beq.n	81b6 <_printf_i+0x106>
    8184:	270a      	movs	r7, #10
    8186:	e016      	b.n	81b6 <_printf_i+0x106>
    8188:	3145      	adds	r1, #69	; 0x45
    818a:	700a      	strb	r2, [r1, #0]
    818c:	4a54      	ldr	r2, [pc, #336]	; (82e0 <_printf_i+0x230>)
    818e:	9203      	str	r2, [sp, #12]
    8190:	681a      	ldr	r2, [r3, #0]
    8192:	6821      	ldr	r1, [r4, #0]
    8194:	1d10      	adds	r0, r2, #4
    8196:	6018      	str	r0, [r3, #0]
    8198:	6815      	ldr	r5, [r2, #0]
    819a:	0608      	lsls	r0, r1, #24
    819c:	d522      	bpl.n	81e4 <_printf_i+0x134>
    819e:	07cb      	lsls	r3, r1, #31
    81a0:	d502      	bpl.n	81a8 <_printf_i+0xf8>
    81a2:	2320      	movs	r3, #32
    81a4:	4319      	orrs	r1, r3
    81a6:	6021      	str	r1, [r4, #0]
    81a8:	2710      	movs	r7, #16
    81aa:	2d00      	cmp	r5, #0
    81ac:	d103      	bne.n	81b6 <_printf_i+0x106>
    81ae:	2320      	movs	r3, #32
    81b0:	6822      	ldr	r2, [r4, #0]
    81b2:	439a      	bics	r2, r3
    81b4:	6022      	str	r2, [r4, #0]
    81b6:	0023      	movs	r3, r4
    81b8:	2200      	movs	r2, #0
    81ba:	3343      	adds	r3, #67	; 0x43
    81bc:	701a      	strb	r2, [r3, #0]
    81be:	6863      	ldr	r3, [r4, #4]
    81c0:	60a3      	str	r3, [r4, #8]
    81c2:	2b00      	cmp	r3, #0
    81c4:	db5c      	blt.n	8280 <_printf_i+0x1d0>
    81c6:	2204      	movs	r2, #4
    81c8:	6821      	ldr	r1, [r4, #0]
    81ca:	4391      	bics	r1, r2
    81cc:	6021      	str	r1, [r4, #0]
    81ce:	2d00      	cmp	r5, #0
    81d0:	d158      	bne.n	8284 <_printf_i+0x1d4>
    81d2:	9e04      	ldr	r6, [sp, #16]
    81d4:	2b00      	cmp	r3, #0
    81d6:	d064      	beq.n	82a2 <_printf_i+0x1f2>
    81d8:	0026      	movs	r6, r4
    81da:	9b03      	ldr	r3, [sp, #12]
    81dc:	3642      	adds	r6, #66	; 0x42
    81de:	781b      	ldrb	r3, [r3, #0]
    81e0:	7033      	strb	r3, [r6, #0]
    81e2:	e05e      	b.n	82a2 <_printf_i+0x1f2>
    81e4:	0648      	lsls	r0, r1, #25
    81e6:	d5da      	bpl.n	819e <_printf_i+0xee>
    81e8:	b2ad      	uxth	r5, r5
    81ea:	e7d8      	b.n	819e <_printf_i+0xee>
    81ec:	6809      	ldr	r1, [r1, #0]
    81ee:	681a      	ldr	r2, [r3, #0]
    81f0:	0608      	lsls	r0, r1, #24
    81f2:	d505      	bpl.n	8200 <_printf_i+0x150>
    81f4:	1d11      	adds	r1, r2, #4
    81f6:	6019      	str	r1, [r3, #0]
    81f8:	6813      	ldr	r3, [r2, #0]
    81fa:	6962      	ldr	r2, [r4, #20]
    81fc:	601a      	str	r2, [r3, #0]
    81fe:	e006      	b.n	820e <_printf_i+0x15e>
    8200:	0649      	lsls	r1, r1, #25
    8202:	d5f7      	bpl.n	81f4 <_printf_i+0x144>
    8204:	1d11      	adds	r1, r2, #4
    8206:	6019      	str	r1, [r3, #0]
    8208:	6813      	ldr	r3, [r2, #0]
    820a:	8aa2      	ldrh	r2, [r4, #20]
    820c:	801a      	strh	r2, [r3, #0]
    820e:	2300      	movs	r3, #0
    8210:	9e04      	ldr	r6, [sp, #16]
    8212:	6123      	str	r3, [r4, #16]
    8214:	e054      	b.n	82c0 <_printf_i+0x210>
    8216:	681a      	ldr	r2, [r3, #0]
    8218:	1d11      	adds	r1, r2, #4
    821a:	6019      	str	r1, [r3, #0]
    821c:	6816      	ldr	r6, [r2, #0]
    821e:	2100      	movs	r1, #0
    8220:	6862      	ldr	r2, [r4, #4]
    8222:	0030      	movs	r0, r6
    8224:	f000 f91a 	bl	845c <memchr>
    8228:	2800      	cmp	r0, #0
    822a:	d001      	beq.n	8230 <_printf_i+0x180>
    822c:	1b80      	subs	r0, r0, r6
    822e:	6060      	str	r0, [r4, #4]
    8230:	6863      	ldr	r3, [r4, #4]
    8232:	6123      	str	r3, [r4, #16]
    8234:	2300      	movs	r3, #0
    8236:	9a04      	ldr	r2, [sp, #16]
    8238:	7013      	strb	r3, [r2, #0]
    823a:	e041      	b.n	82c0 <_printf_i+0x210>
    823c:	6923      	ldr	r3, [r4, #16]
    823e:	0032      	movs	r2, r6
    8240:	9906      	ldr	r1, [sp, #24]
    8242:	9805      	ldr	r0, [sp, #20]
    8244:	9d07      	ldr	r5, [sp, #28]
    8246:	47a8      	blx	r5
    8248:	1c43      	adds	r3, r0, #1
    824a:	d043      	beq.n	82d4 <_printf_i+0x224>
    824c:	6823      	ldr	r3, [r4, #0]
    824e:	2500      	movs	r5, #0
    8250:	079b      	lsls	r3, r3, #30
    8252:	d40f      	bmi.n	8274 <_printf_i+0x1c4>
    8254:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8256:	68e0      	ldr	r0, [r4, #12]
    8258:	4298      	cmp	r0, r3
    825a:	da3d      	bge.n	82d8 <_printf_i+0x228>
    825c:	0018      	movs	r0, r3
    825e:	e03b      	b.n	82d8 <_printf_i+0x228>
    8260:	0022      	movs	r2, r4
    8262:	2301      	movs	r3, #1
    8264:	3219      	adds	r2, #25
    8266:	9906      	ldr	r1, [sp, #24]
    8268:	9805      	ldr	r0, [sp, #20]
    826a:	9e07      	ldr	r6, [sp, #28]
    826c:	47b0      	blx	r6
    826e:	1c43      	adds	r3, r0, #1
    8270:	d030      	beq.n	82d4 <_printf_i+0x224>
    8272:	3501      	adds	r5, #1
    8274:	68e3      	ldr	r3, [r4, #12]
    8276:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8278:	1a9b      	subs	r3, r3, r2
    827a:	429d      	cmp	r5, r3
    827c:	dbf0      	blt.n	8260 <_printf_i+0x1b0>
    827e:	e7e9      	b.n	8254 <_printf_i+0x1a4>
    8280:	2d00      	cmp	r5, #0
    8282:	d0a9      	beq.n	81d8 <_printf_i+0x128>
    8284:	9e04      	ldr	r6, [sp, #16]
    8286:	0028      	movs	r0, r5
    8288:	0039      	movs	r1, r7
    828a:	f7fd fa45 	bl	5718 <__aeabi_uidivmod>
    828e:	9b03      	ldr	r3, [sp, #12]
    8290:	3e01      	subs	r6, #1
    8292:	5c5b      	ldrb	r3, [r3, r1]
    8294:	0028      	movs	r0, r5
    8296:	7033      	strb	r3, [r6, #0]
    8298:	0039      	movs	r1, r7
    829a:	f7fd f9b7 	bl	560c <__udivsi3>
    829e:	1e05      	subs	r5, r0, #0
    82a0:	d1f1      	bne.n	8286 <_printf_i+0x1d6>
    82a2:	2f08      	cmp	r7, #8
    82a4:	d109      	bne.n	82ba <_printf_i+0x20a>
    82a6:	6823      	ldr	r3, [r4, #0]
    82a8:	07db      	lsls	r3, r3, #31
    82aa:	d506      	bpl.n	82ba <_printf_i+0x20a>
    82ac:	6863      	ldr	r3, [r4, #4]
    82ae:	6922      	ldr	r2, [r4, #16]
    82b0:	4293      	cmp	r3, r2
    82b2:	dc02      	bgt.n	82ba <_printf_i+0x20a>
    82b4:	2330      	movs	r3, #48	; 0x30
    82b6:	3e01      	subs	r6, #1
    82b8:	7033      	strb	r3, [r6, #0]
    82ba:	9b04      	ldr	r3, [sp, #16]
    82bc:	1b9b      	subs	r3, r3, r6
    82be:	6123      	str	r3, [r4, #16]
    82c0:	9b07      	ldr	r3, [sp, #28]
    82c2:	aa09      	add	r2, sp, #36	; 0x24
    82c4:	9300      	str	r3, [sp, #0]
    82c6:	0021      	movs	r1, r4
    82c8:	9b06      	ldr	r3, [sp, #24]
    82ca:	9805      	ldr	r0, [sp, #20]
    82cc:	f7ff fe82 	bl	7fd4 <_printf_common>
    82d0:	1c43      	adds	r3, r0, #1
    82d2:	d1b3      	bne.n	823c <_printf_i+0x18c>
    82d4:	2001      	movs	r0, #1
    82d6:	4240      	negs	r0, r0
    82d8:	b00b      	add	sp, #44	; 0x2c
    82da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    82dc:	000087da 	.word	0x000087da
    82e0:	000087c9 	.word	0x000087c9

000082e4 <_sbrk_r>:
    82e4:	2300      	movs	r3, #0
    82e6:	b570      	push	{r4, r5, r6, lr}
    82e8:	4c06      	ldr	r4, [pc, #24]	; (8304 <_sbrk_r+0x20>)
    82ea:	0005      	movs	r5, r0
    82ec:	0008      	movs	r0, r1
    82ee:	6023      	str	r3, [r4, #0]
    82f0:	f7fb fb84 	bl	39fc <_sbrk>
    82f4:	1c43      	adds	r3, r0, #1
    82f6:	d103      	bne.n	8300 <_sbrk_r+0x1c>
    82f8:	6823      	ldr	r3, [r4, #0]
    82fa:	2b00      	cmp	r3, #0
    82fc:	d000      	beq.n	8300 <_sbrk_r+0x1c>
    82fe:	602b      	str	r3, [r5, #0]
    8300:	bd70      	pop	{r4, r5, r6, pc}
    8302:	46c0      	nop			; (mov r8, r8)
    8304:	20000c44 	.word	0x20000c44

00008308 <__sread>:
    8308:	b570      	push	{r4, r5, r6, lr}
    830a:	000c      	movs	r4, r1
    830c:	250e      	movs	r5, #14
    830e:	5f49      	ldrsh	r1, [r1, r5]
    8310:	f000 f8b2 	bl	8478 <_read_r>
    8314:	2800      	cmp	r0, #0
    8316:	db03      	blt.n	8320 <__sread+0x18>
    8318:	6d63      	ldr	r3, [r4, #84]	; 0x54
    831a:	181b      	adds	r3, r3, r0
    831c:	6563      	str	r3, [r4, #84]	; 0x54
    831e:	bd70      	pop	{r4, r5, r6, pc}
    8320:	89a3      	ldrh	r3, [r4, #12]
    8322:	4a02      	ldr	r2, [pc, #8]	; (832c <__sread+0x24>)
    8324:	4013      	ands	r3, r2
    8326:	81a3      	strh	r3, [r4, #12]
    8328:	e7f9      	b.n	831e <__sread+0x16>
    832a:	46c0      	nop			; (mov r8, r8)
    832c:	ffffefff 	.word	0xffffefff

00008330 <__swrite>:
    8330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8332:	001f      	movs	r7, r3
    8334:	898b      	ldrh	r3, [r1, #12]
    8336:	0005      	movs	r5, r0
    8338:	000c      	movs	r4, r1
    833a:	0016      	movs	r6, r2
    833c:	05db      	lsls	r3, r3, #23
    833e:	d505      	bpl.n	834c <__swrite+0x1c>
    8340:	230e      	movs	r3, #14
    8342:	5ec9      	ldrsh	r1, [r1, r3]
    8344:	2200      	movs	r2, #0
    8346:	2302      	movs	r3, #2
    8348:	f000 f874 	bl	8434 <_lseek_r>
    834c:	89a3      	ldrh	r3, [r4, #12]
    834e:	4a05      	ldr	r2, [pc, #20]	; (8364 <__swrite+0x34>)
    8350:	0028      	movs	r0, r5
    8352:	4013      	ands	r3, r2
    8354:	81a3      	strh	r3, [r4, #12]
    8356:	0032      	movs	r2, r6
    8358:	230e      	movs	r3, #14
    835a:	5ee1      	ldrsh	r1, [r4, r3]
    835c:	003b      	movs	r3, r7
    835e:	f000 f81f 	bl	83a0 <_write_r>
    8362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8364:	ffffefff 	.word	0xffffefff

00008368 <__sseek>:
    8368:	b570      	push	{r4, r5, r6, lr}
    836a:	000c      	movs	r4, r1
    836c:	250e      	movs	r5, #14
    836e:	5f49      	ldrsh	r1, [r1, r5]
    8370:	f000 f860 	bl	8434 <_lseek_r>
    8374:	89a3      	ldrh	r3, [r4, #12]
    8376:	1c42      	adds	r2, r0, #1
    8378:	d103      	bne.n	8382 <__sseek+0x1a>
    837a:	4a05      	ldr	r2, [pc, #20]	; (8390 <__sseek+0x28>)
    837c:	4013      	ands	r3, r2
    837e:	81a3      	strh	r3, [r4, #12]
    8380:	bd70      	pop	{r4, r5, r6, pc}
    8382:	2280      	movs	r2, #128	; 0x80
    8384:	0152      	lsls	r2, r2, #5
    8386:	4313      	orrs	r3, r2
    8388:	81a3      	strh	r3, [r4, #12]
    838a:	6560      	str	r0, [r4, #84]	; 0x54
    838c:	e7f8      	b.n	8380 <__sseek+0x18>
    838e:	46c0      	nop			; (mov r8, r8)
    8390:	ffffefff 	.word	0xffffefff

00008394 <__sclose>:
    8394:	b510      	push	{r4, lr}
    8396:	230e      	movs	r3, #14
    8398:	5ec9      	ldrsh	r1, [r1, r3]
    839a:	f000 f815 	bl	83c8 <_close_r>
    839e:	bd10      	pop	{r4, pc}

000083a0 <_write_r>:
    83a0:	b570      	push	{r4, r5, r6, lr}
    83a2:	0005      	movs	r5, r0
    83a4:	0008      	movs	r0, r1
    83a6:	0011      	movs	r1, r2
    83a8:	2200      	movs	r2, #0
    83aa:	4c06      	ldr	r4, [pc, #24]	; (83c4 <_write_r+0x24>)
    83ac:	6022      	str	r2, [r4, #0]
    83ae:	001a      	movs	r2, r3
    83b0:	f7fb fafc 	bl	39ac <_write>
    83b4:	1c43      	adds	r3, r0, #1
    83b6:	d103      	bne.n	83c0 <_write_r+0x20>
    83b8:	6823      	ldr	r3, [r4, #0]
    83ba:	2b00      	cmp	r3, #0
    83bc:	d000      	beq.n	83c0 <_write_r+0x20>
    83be:	602b      	str	r3, [r5, #0]
    83c0:	bd70      	pop	{r4, r5, r6, pc}
    83c2:	46c0      	nop			; (mov r8, r8)
    83c4:	20000c44 	.word	0x20000c44

000083c8 <_close_r>:
    83c8:	2300      	movs	r3, #0
    83ca:	b570      	push	{r4, r5, r6, lr}
    83cc:	4c06      	ldr	r4, [pc, #24]	; (83e8 <_close_r+0x20>)
    83ce:	0005      	movs	r5, r0
    83d0:	0008      	movs	r0, r1
    83d2:	6023      	str	r3, [r4, #0]
    83d4:	f7fb fb24 	bl	3a20 <_close>
    83d8:	1c43      	adds	r3, r0, #1
    83da:	d103      	bne.n	83e4 <_close_r+0x1c>
    83dc:	6823      	ldr	r3, [r4, #0]
    83de:	2b00      	cmp	r3, #0
    83e0:	d000      	beq.n	83e4 <_close_r+0x1c>
    83e2:	602b      	str	r3, [r5, #0]
    83e4:	bd70      	pop	{r4, r5, r6, pc}
    83e6:	46c0      	nop			; (mov r8, r8)
    83e8:	20000c44 	.word	0x20000c44

000083ec <_fstat_r>:
    83ec:	2300      	movs	r3, #0
    83ee:	b570      	push	{r4, r5, r6, lr}
    83f0:	4c06      	ldr	r4, [pc, #24]	; (840c <_fstat_r+0x20>)
    83f2:	0005      	movs	r5, r0
    83f4:	0008      	movs	r0, r1
    83f6:	0011      	movs	r1, r2
    83f8:	6023      	str	r3, [r4, #0]
    83fa:	f7fb fb14 	bl	3a26 <_fstat>
    83fe:	1c43      	adds	r3, r0, #1
    8400:	d103      	bne.n	840a <_fstat_r+0x1e>
    8402:	6823      	ldr	r3, [r4, #0]
    8404:	2b00      	cmp	r3, #0
    8406:	d000      	beq.n	840a <_fstat_r+0x1e>
    8408:	602b      	str	r3, [r5, #0]
    840a:	bd70      	pop	{r4, r5, r6, pc}
    840c:	20000c44 	.word	0x20000c44

00008410 <_isatty_r>:
    8410:	2300      	movs	r3, #0
    8412:	b570      	push	{r4, r5, r6, lr}
    8414:	4c06      	ldr	r4, [pc, #24]	; (8430 <_isatty_r+0x20>)
    8416:	0005      	movs	r5, r0
    8418:	0008      	movs	r0, r1
    841a:	6023      	str	r3, [r4, #0]
    841c:	f7fb fb08 	bl	3a30 <_isatty>
    8420:	1c43      	adds	r3, r0, #1
    8422:	d103      	bne.n	842c <_isatty_r+0x1c>
    8424:	6823      	ldr	r3, [r4, #0]
    8426:	2b00      	cmp	r3, #0
    8428:	d000      	beq.n	842c <_isatty_r+0x1c>
    842a:	602b      	str	r3, [r5, #0]
    842c:	bd70      	pop	{r4, r5, r6, pc}
    842e:	46c0      	nop			; (mov r8, r8)
    8430:	20000c44 	.word	0x20000c44

00008434 <_lseek_r>:
    8434:	b570      	push	{r4, r5, r6, lr}
    8436:	0005      	movs	r5, r0
    8438:	0008      	movs	r0, r1
    843a:	0011      	movs	r1, r2
    843c:	2200      	movs	r2, #0
    843e:	4c06      	ldr	r4, [pc, #24]	; (8458 <_lseek_r+0x24>)
    8440:	6022      	str	r2, [r4, #0]
    8442:	001a      	movs	r2, r3
    8444:	f7fb faf6 	bl	3a34 <_lseek>
    8448:	1c43      	adds	r3, r0, #1
    844a:	d103      	bne.n	8454 <_lseek_r+0x20>
    844c:	6823      	ldr	r3, [r4, #0]
    844e:	2b00      	cmp	r3, #0
    8450:	d000      	beq.n	8454 <_lseek_r+0x20>
    8452:	602b      	str	r3, [r5, #0]
    8454:	bd70      	pop	{r4, r5, r6, pc}
    8456:	46c0      	nop			; (mov r8, r8)
    8458:	20000c44 	.word	0x20000c44

0000845c <memchr>:
    845c:	b2c9      	uxtb	r1, r1
    845e:	1882      	adds	r2, r0, r2
    8460:	4290      	cmp	r0, r2
    8462:	d101      	bne.n	8468 <memchr+0xc>
    8464:	2000      	movs	r0, #0
    8466:	4770      	bx	lr
    8468:	7803      	ldrb	r3, [r0, #0]
    846a:	428b      	cmp	r3, r1
    846c:	d0fb      	beq.n	8466 <memchr+0xa>
    846e:	3001      	adds	r0, #1
    8470:	e7f6      	b.n	8460 <memchr+0x4>

00008472 <__malloc_lock>:
    8472:	4770      	bx	lr

00008474 <__malloc_unlock>:
    8474:	4770      	bx	lr
	...

00008478 <_read_r>:
    8478:	b570      	push	{r4, r5, r6, lr}
    847a:	0005      	movs	r5, r0
    847c:	0008      	movs	r0, r1
    847e:	0011      	movs	r1, r2
    8480:	2200      	movs	r2, #0
    8482:	4c06      	ldr	r4, [pc, #24]	; (849c <_read_r+0x24>)
    8484:	6022      	str	r2, [r4, #0]
    8486:	001a      	movs	r2, r3
    8488:	f7fb fa6e 	bl	3968 <_read>
    848c:	1c43      	adds	r3, r0, #1
    848e:	d103      	bne.n	8498 <_read_r+0x20>
    8490:	6823      	ldr	r3, [r4, #0]
    8492:	2b00      	cmp	r3, #0
    8494:	d000      	beq.n	8498 <_read_r+0x20>
    8496:	602b      	str	r3, [r5, #0]
    8498:	bd70      	pop	{r4, r5, r6, pc}
    849a:	46c0      	nop			; (mov r8, r8)
    849c:	20000c44 	.word	0x20000c44
    84a0:	0000166c 	.word	0x0000166c
    84a4:	00001760 	.word	0x00001760
    84a8:	0000176a 	.word	0x0000176a
    84ac:	00001774 	.word	0x00001774
    84b0:	0000177e 	.word	0x0000177e
    84b4:	000017b0 	.word	0x000017b0
    84b8:	000017ba 	.word	0x000017ba
    84bc:	000017c4 	.word	0x000017c4
    84c0:	000017ce 	.word	0x000017ce
    84c4:	000017d8 	.word	0x000017d8
    84c8:	42002000 	.word	0x42002000
    84cc:	42002400 	.word	0x42002400
    84d0:	43000800 	.word	0x43000800
    84d4:	00000002 	.word	0x00000002
    84d8:	00000100 	.word	0x00000100
    84dc:	00000002 	.word	0x00000002
    84e0:	00000200 	.word	0x00000200
    84e4:	00000003 	.word	0x00000003
    84e8:	00000004 	.word	0x00000004
    84ec:	42000000 	.word	0x42000000
    84f0:	42000400 	.word	0x42000400
    84f4:	42000800 	.word	0x42000800
    84f8:	42000c00 	.word	0x42000c00
    84fc:	42001000 	.word	0x42001000
    8500:	43000400 	.word	0x43000400
    8504:	000031a2 	.word	0x000031a2
    8508:	0000319e 	.word	0x0000319e
    850c:	0000319e 	.word	0x0000319e
    8510:	00003208 	.word	0x00003208
    8514:	00003208 	.word	0x00003208
    8518:	000031b8 	.word	0x000031b8
    851c:	000031a8 	.word	0x000031a8
    8520:	000031be 	.word	0x000031be
    8524:	000031f6 	.word	0x000031f6
    8528:	00003304 	.word	0x00003304
    852c:	000032e4 	.word	0x000032e4
    8530:	000032e4 	.word	0x000032e4
    8534:	0000337e 	.word	0x0000337e
    8538:	000032f6 	.word	0x000032f6
    853c:	00003312 	.word	0x00003312
    8540:	000032e8 	.word	0x000032e8
    8544:	00003320 	.word	0x00003320
    8548:	00003362 	.word	0x00003362
    854c:	000033bc 	.word	0x000033bc
    8550:	000033fe 	.word	0x000033fe
    8554:	000033fe 	.word	0x000033fe
    8558:	000033fe 	.word	0x000033fe
    855c:	000033ae 	.word	0x000033ae
    8560:	000033ca 	.word	0x000033ca
    8564:	000033a0 	.word	0x000033a0
    8568:	000033d8 	.word	0x000033d8
    856c:	000033ee 	.word	0x000033ee
    8570:	00005068 	.word	0x00005068
    8574:	0000516a 	.word	0x0000516a
    8578:	0000516a 	.word	0x0000516a
    857c:	0000516a 	.word	0x0000516a
    8580:	0000516a 	.word	0x0000516a
    8584:	0000501c 	.word	0x0000501c
    8588:	0000516a 	.word	0x0000516a
    858c:	0000516a 	.word	0x0000516a
    8590:	0000516a 	.word	0x0000516a
    8594:	0000516a 	.word	0x0000516a
    8598:	0000516a 	.word	0x0000516a
    859c:	0000516a 	.word	0x0000516a
    85a0:	0000516a 	.word	0x0000516a
    85a4:	0000516a 	.word	0x0000516a
    85a8:	0000516a 	.word	0x0000516a
    85ac:	000050d2 	.word	0x000050d2
    85b0:	0000511c 	.word	0x0000511c
    85b4:	0000516a 	.word	0x0000516a
    85b8:	0000516a 	.word	0x0000516a
    85bc:	0000516a 	.word	0x0000516a
    85c0:	0000516a 	.word	0x0000516a
    85c4:	00005104 	.word	0x00005104
    85c8:	4a325b1b 	.word	0x4a325b1b
    85cc:	00200a0d 	.word	0x00200a0d
    85d0:	614c0a0d 	.word	0x614c0a0d
    85d4:	72207473 	.word	0x72207473
    85d8:	74657365 	.word	0x74657365
    85dc:	75616320 	.word	0x75616320
    85e0:	203a6573 	.word	0x203a6573
    85e4:	00000000 	.word	0x00000000
    85e8:	74737953 	.word	0x74737953
    85ec:	52206d65 	.word	0x52206d65
    85f0:	74657365 	.word	0x74657365
    85f4:	71655220 	.word	0x71655220
    85f8:	74736575 	.word	0x74736575
    85fc:	0000000d 	.word	0x0000000d
    8600:	63746157 	.word	0x63746157
    8604:	676f6468 	.word	0x676f6468
    8608:	73655220 	.word	0x73655220
    860c:	000d7465 	.word	0x000d7465
    8610:	65747845 	.word	0x65747845
    8614:	6c616e72 	.word	0x6c616e72
    8618:	73655220 	.word	0x73655220
    861c:	000d7465 	.word	0x000d7465
    8620:	776f7242 	.word	0x776f7242
    8624:	754f206e 	.word	0x754f206e
    8628:	33332074 	.word	0x33332074
    862c:	74654420 	.word	0x74654420
    8630:	6f746365 	.word	0x6f746365
    8634:	65522072 	.word	0x65522072
    8638:	0d746573 	.word	0x0d746573
    863c:	00000000 	.word	0x00000000
    8640:	776f7242 	.word	0x776f7242
    8644:	754f206e 	.word	0x754f206e
    8648:	32312074 	.word	0x32312074
    864c:	74654420 	.word	0x74654420
    8650:	6f746365 	.word	0x6f746365
    8654:	65522072 	.word	0x65522072
    8658:	0d746573 	.word	0x0d746573
    865c:	00000000 	.word	0x00000000
    8660:	65776f50 	.word	0x65776f50
    8664:	6e4f2d72 	.word	0x6e4f2d72
    8668:	73655220 	.word	0x73655220
    866c:	000d7465 	.word	0x000d7465
    8670:	74696157 	.word	0x74696157
    8674:	20676e69 	.word	0x20676e69
    8678:	4a206f74 	.word	0x4a206f74
    867c:	0d6e696f 	.word	0x0d6e696f
    8680:	00000000 	.word	0x00000000
    8684:	61746f54 	.word	0x61746f54
    8688:	6f43206c 	.word	0x6f43206c
    868c:	63656e6e 	.word	0x63656e6e
    8690:	6e6f6974 	.word	0x6e6f6974
    8694:	64253a73 	.word	0x64253a73
    8698:	00000a0d 	.word	0x00000a0d
    869c:	6e696f6a 	.word	0x6e696f6a
    86a0:	61206465 	.word	0x61206465
    86a4:	20612073 	.word	0x20612073
    86a8:	20646e45 	.word	0x20646e45
    86ac:	69766544 	.word	0x69766544
    86b0:	2e2e6563 	.word	0x2e2e6563
    86b4:	000d2e2e 	.word	0x000d2e2e
    86b8:	65656c73 	.word	0x65656c73
    86bc:	676e6970 	.word	0x676e6970
    86c0:	65796220 	.word	0x65796220
    86c4:	726f6620 	.word	0x726f6620
    86c8:	776f6e20 	.word	0x776f6e20
    86cc:	21212121 	.word	0x21212121
    86d0:	00000000 	.word	0x00000000
    86d4:	00005fcc 	.word	0x00005fcc
    86d8:	00005fae 	.word	0x00005fae
    86dc:	00005f68 	.word	0x00005f68
    86e0:	00005e86 	.word	0x00005e86
    86e4:	00005f68 	.word	0x00005f68
    86e8:	00005fa0 	.word	0x00005fa0
    86ec:	00005f68 	.word	0x00005f68
    86f0:	00005e86 	.word	0x00005e86
    86f4:	00005fae 	.word	0x00005fae
    86f8:	00005fae 	.word	0x00005fae
    86fc:	00005fa0 	.word	0x00005fa0
    8700:	00005e86 	.word	0x00005e86
    8704:	00005e7e 	.word	0x00005e7e
    8708:	00005e7e 	.word	0x00005e7e
    870c:	00005e7e 	.word	0x00005e7e
    8710:	000061e4 	.word	0x000061e4
    8714:	0000662c 	.word	0x0000662c
    8718:	000064ec 	.word	0x000064ec
    871c:	000064ec 	.word	0x000064ec
    8720:	000064e8 	.word	0x000064e8
    8724:	00006604 	.word	0x00006604
    8728:	00006604 	.word	0x00006604
    872c:	000065f6 	.word	0x000065f6
    8730:	000064e8 	.word	0x000064e8
    8734:	00006604 	.word	0x00006604
    8738:	000065f6 	.word	0x000065f6
    873c:	00006604 	.word	0x00006604
    8740:	000064e8 	.word	0x000064e8
    8744:	0000660c 	.word	0x0000660c
    8748:	0000660c 	.word	0x0000660c
    874c:	0000660c 	.word	0x0000660c
    8750:	00006810 	.word	0x00006810

00008754 <_global_impure_ptr>:
    8754:	20000024                                $.. 

00008758 <__sf_fake_stderr>:
	...

00008778 <__sf_fake_stdin>:
	...

00008798 <__sf_fake_stdout>:
	...
    87b8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    87c8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    87d8:	31300046 35343332 39383736 64636261     F.0123456789abcd
    87e8:	00006665                                ef..

000087ec <_init>:
    87ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    87ee:	46c0      	nop			; (mov r8, r8)
    87f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    87f2:	bc08      	pop	{r3}
    87f4:	469e      	mov	lr, r3
    87f6:	4770      	bx	lr

000087f8 <__init_array_start>:
    87f8:	000000dd 	.word	0x000000dd

000087fc <_fini>:
    87fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    87fe:	46c0      	nop			; (mov r8, r8)
    8800:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8802:	bc08      	pop	{r3}
    8804:	469e      	mov	lr, r3
    8806:	4770      	bx	lr

00008808 <__fini_array_start>:
    8808:	000000b5 	.word	0x000000b5
